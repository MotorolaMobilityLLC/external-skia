# Copyright 2017 Google Inc.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file is generated semi-automatically with this command:
#   $ src/jumper/build_stages.py

#if defined(__MACH__)
    #define HIDDEN .private_extern
    #define FUNCTION(name)
    #define BALIGN4  .align 2
    #define BALIGN16 .align 4
    #define BALIGN32 .align 5
#else
    .section .note.GNU-stack,"",%progbits
    #define HIDDEN .hidden
    #define FUNCTION(name) .type name,%function
    #define BALIGN4  .balign 4
    #define BALIGN16 .balign 16
    #define BALIGN32 .balign 32
#endif
.text
#if defined(__aarch64__)
BALIGN4

HIDDEN _sk_start_pipeline_aarch64
.globl _sk_start_pipeline_aarch64
FUNCTION(_sk_start_pipeline_aarch64)
_sk_start_pipeline_aarch64:
  .long  0xf81c0ff7                          // str           x23, [sp, #-64]!
  .long  0xa90157f6                          // stp           x22, x21, [sp, #16]
  .long  0xa9024ff4                          // stp           x20, x19, [sp, #32]
  .long  0xa9037bfd                          // stp           x29, x30, [sp, #48]
  .long  0xaa0303f4                          // mov           x20, x3
  .long  0xf8408685                          // ldr           x5, [x20], #8
  .long  0xaa0003f7                          // mov           x23, x0
  .long  0xaa0203f5                          // mov           x21, x2
  .long  0x910012e8                          // add           x8, x23, #0x4
  .long  0xaa0403f3                          // mov           x19, x4
  .long  0xeb15011f                          // cmp           x8, x21
  .long  0xaa0103f6                          // mov           x22, x1
  .long  0x9100c3fd                          // add           x29, sp, #0x30
  .long  0x54000069                          // b.ls          40 <sk_start_pipeline_aarch64+0x40>  // b.plast
  .long  0xaa1703e2                          // mov           x2, x23
  .long  0x1400000f                          // b             78 <sk_start_pipeline_aarch64+0x78>
  .long  0xf90007e5                          // str           x5, [sp, #8]
  .long  0xf94007e5                          // ldr           x5, [sp, #8]
  .long  0xaa1303e0                          // mov           x0, x19
  .long  0xaa1403e1                          // mov           x1, x20
  .long  0xaa1703e2                          // mov           x2, x23
  .long  0xaa1603e3                          // mov           x3, x22
  .long  0xaa1f03e4                          // mov           x4, xzr
  .long  0xd63f00a0                          // blr           x5
  .long  0xf94007e5                          // ldr           x5, [sp, #8]
  .long  0x910012e2                          // add           x2, x23, #0x4
  .long  0x910022e8                          // add           x8, x23, #0x8
  .long  0xeb15011f                          // cmp           x8, x21
  .long  0xaa0203f7                          // mov           x23, x2
  .long  0x54fffe89                          // b.ls          44 <sk_start_pipeline_aarch64+0x44>  // b.plast
  .long  0xcb0202a4                          // sub           x4, x21, x2
  .long  0xb4000124                          // cbz           x4, a0 <sk_start_pipeline_aarch64+0xa0>
  .long  0xaa1303e0                          // mov           x0, x19
  .long  0xaa1403e1                          // mov           x1, x20
  .long  0xaa1603e3                          // mov           x3, x22
  .long  0xa9437bfd                          // ldp           x29, x30, [sp, #48]
  .long  0xa9424ff4                          // ldp           x20, x19, [sp, #32]
  .long  0xa94157f6                          // ldp           x22, x21, [sp, #16]
  .long  0xf84407f7                          // ldr           x23, [sp], #64
  .long  0xd61f00a0                          // br            x5
  .long  0xa9437bfd                          // ldp           x29, x30, [sp, #48]
  .long  0xa9424ff4                          // ldp           x20, x19, [sp, #32]
  .long  0xa94157f6                          // ldp           x22, x21, [sp, #16]
  .long  0xf84407f7                          // ldr           x23, [sp], #64
  .long  0xd65f03c0                          // ret

HIDDEN _sk_just_return_aarch64
.globl _sk_just_return_aarch64
FUNCTION(_sk_just_return_aarch64)
_sk_just_return_aarch64:
  .long  0xd65f03c0                          // ret

HIDDEN _sk_seed_shader_aarch64
.globl _sk_seed_shader_aarch64
FUNCTION(_sk_seed_shader_aarch64)
_sk_seed_shader_aarch64:
  .long  0x3dc00007                          // ldr           q7, [x0]
  .long  0x4e040c40                          // dup           v0.4s, w2
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f0167e1                          // movi          v1.4s, #0x3f, lsl #24
  .long  0x4e040c66                          // dup           v6.4s, w3
  .long  0x4e21d800                          // scvtf         v0.4s, v0.4s
  .long  0x4e21d8c6                          // scvtf         v6.4s, v6.4s
  .long  0x4e21d400                          // fadd          v0.4s, v0.4s, v1.4s
  .long  0x4f03f602                          // fmov          v2.4s, #1.000000000000000000e+00
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x6f00e405                          // movi          v5.2d, #0x0
  .long  0x4e21d4c1                          // fadd          v1.4s, v6.4s, v1.4s
  .long  0x6f00e406                          // movi          v6.2d, #0x0
  .long  0x4e27d400                          // fadd          v0.4s, v0.4s, v7.4s
  .long  0x6f00e407                          // movi          v7.2d, #0x0
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dither_aarch64
.globl _sk_dither_aarch64
FUNCTION(_sk_dither_aarch64)
_sk_dither_aarch64:
  .long  0x3dc00811                          // ldr           q17, [x0, #32]
  .long  0x4e040c50                          // dup           v16.4s, w2
  .long  0x4e040c72                          // dup           v18.4s, w3
  .long  0x4f000433                          // movi          v19.4s, #0x1
  .long  0x4f000455                          // movi          v21.4s, #0x2
  .long  0x4eb08630                          // add           v16.4s, v17.4s, v16.4s
  .long  0x4f000494                          // movi          v20.4s, #0x4
  .long  0x52a79008                          // mov           w8, #0x3c800000
  .long  0x6e301e51                          // eor           v17.16b, v18.16b, v16.16b
  .long  0x4e331e12                          // and           v18.16b, v16.16b, v19.16b
  .long  0x4e351e17                          // and           v23.16b, v16.16b, v21.16b
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x4e341e10                          // and           v16.16b, v16.16b, v20.16b
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4f245652                          // shl           v18.4s, v18.4s, #4
  .long  0x4f2156f7                          // shl           v23.4s, v23.4s, #1
  .long  0x4e331e33                          // and           v19.16b, v17.16b, v19.16b
  .long  0x4eb21ef2                          // orr           v18.16b, v23.16b, v18.16b
  .long  0x6f3e0610                          // ushr          v16.4s, v16.4s, #2
  .long  0x4e351e35                          // and           v21.16b, v17.16b, v21.16b
  .long  0x4eb01e50                          // orr           v16.16b, v18.16b, v16.16b
  .long  0x4f255673                          // shl           v19.4s, v19.4s, #5
  .long  0x4e341e31                          // and           v17.16b, v17.16b, v20.16b
  .long  0x4f2256b5                          // shl           v21.4s, v21.4s, #2
  .long  0x4eb31e10                          // orr           v16.16b, v16.16b, v19.16b
  .long  0xbd400117                          // ldr           s23, [x8]
  .long  0x6f3f0631                          // ushr          v17.4s, v17.4s, #1
  .long  0x4eb51e10                          // orr           v16.16b, v16.16b, v21.16b
  .long  0x52b7df89                          // mov           w9, #0xbefc0000
  .long  0x4eb11e10                          // orr           v16.16b, v16.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x4e30ced4                          // fmla          v20.4s, v22.4s, v16.4s
  .long  0x4f979290                          // fmul          v16.4s, v20.4s, v23.s[0]
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x4e22d602                          // fadd          v2.4s, v16.4s, v2.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x4ea3f400                          // fmin          v0.4s, v0.4s, v3.4s
  .long  0x4ea3f421                          // fmin          v1.4s, v1.4s, v3.4s
  .long  0x4ea3f442                          // fmin          v2.4s, v2.4s, v3.4s
  .long  0x4e20f640                          // fmax          v0.4s, v18.4s, v0.4s
  .long  0x4e21f641                          // fmax          v1.4s, v18.4s, v1.4s
  .long  0x4e22f642                          // fmax          v2.4s, v18.4s, v2.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_constant_color_aarch64
.globl _sk_constant_color_aarch64
FUNCTION(_sk_constant_color_aarch64)
_sk_constant_color_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803ea                          // mov           x10, x8
  .long  0x4ddfc940                          // ld1r          {v0.4s}, [x10], #4
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x91003108                          // add           x8, x8, #0xc
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0x4d40c903                          // ld1r          {v3.4s}, [x8]
  .long  0x4d40c941                          // ld1r          {v1.4s}, [x10]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_load_rgba_aarch64
.globl _sk_load_rgba_aarch64
FUNCTION(_sk_load_rgba_aarch64)
_sk_load_rgba_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xad400500                          // ldp           q0, q1, [x8]
  .long  0xad410d02                          // ldp           q2, q3, [x8, #32]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_rgba_aarch64
.globl _sk_store_rgba_aarch64
FUNCTION(_sk_store_rgba_aarch64)
_sk_store_rgba_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xad000500                          // stp           q0, q1, [x8]
  .long  0xad010d02                          // stp           q2, q3, [x8, #32]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clear_aarch64
.globl _sk_clear_aarch64
FUNCTION(_sk_clear_aarch64)
_sk_clear_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcatop_aarch64
.globl _sk_srcatop_aarch64
FUNCTION(_sk_srcatop_aarch64)
_sk_srcatop_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e27dc00                          // fmul          v0.4s, v0.4s, v7.4s
  .long  0x6e27dc21                          // fmul          v1.4s, v1.4s, v7.4s
  .long  0x6e27dc42                          // fmul          v2.4s, v2.4s, v7.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccc2                          // fmla          v2.4s, v6.4s, v16.4s
  .long  0x6e27de10                          // fmul          v16.4s, v16.4s, v7.4s
  .long  0x4e23ccf0                          // fmla          v16.4s, v7.4s, v3.4s
  .long  0x4eb01e03                          // mov           v3.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dstatop_aarch64
.globl _sk_dstatop_aarch64
FUNCTION(_sk_dstatop_aarch64)
_sk_dstatop_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d610                          // fsub          v16.4s, v16.4s, v7.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de10                          // fmul          v16.4s, v16.4s, v3.4s
  .long  0x4e23ccf0                          // fmla          v16.4s, v7.4s, v3.4s
  .long  0x4e23cc80                          // fmla          v0.4s, v4.4s, v3.4s
  .long  0x4e23cca1                          // fmla          v1.4s, v5.4s, v3.4s
  .long  0x4e23ccc2                          // fmla          v2.4s, v6.4s, v3.4s
  .long  0x4eb01e03                          // mov           v3.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcin_aarch64
.globl _sk_srcin_aarch64
FUNCTION(_sk_srcin_aarch64)
_sk_srcin_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e27dc00                          // fmul          v0.4s, v0.4s, v7.4s
  .long  0x6e27dc21                          // fmul          v1.4s, v1.4s, v7.4s
  .long  0x6e27dc42                          // fmul          v2.4s, v2.4s, v7.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dstin_aarch64
.globl _sk_dstin_aarch64
FUNCTION(_sk_dstin_aarch64)
_sk_dstin_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e24dc60                          // fmul          v0.4s, v3.4s, v4.4s
  .long  0x6e25dc61                          // fmul          v1.4s, v3.4s, v5.4s
  .long  0x6e26dc62                          // fmul          v2.4s, v3.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcout_aarch64
.globl _sk_srcout_aarch64
FUNCTION(_sk_srcout_aarch64)
_sk_srcout_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d610                          // fsub          v16.4s, v16.4s, v7.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dstout_aarch64
.globl _sk_dstout_aarch64
FUNCTION(_sk_dstout_aarch64)
_sk_dstout_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x4ea3d403                          // fsub          v3.4s, v0.4s, v3.4s
  .long  0x6e24dc60                          // fmul          v0.4s, v3.4s, v4.4s
  .long  0x6e25dc61                          // fmul          v1.4s, v3.4s, v5.4s
  .long  0x6e26dc62                          // fmul          v2.4s, v3.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcover_aarch64
.globl _sk_srcover_aarch64
FUNCTION(_sk_srcover_aarch64)
_sk_srcover_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4e24ce00                          // fmla          v0.4s, v16.4s, v4.4s
  .long  0x4e25ce01                          // fmla          v1.4s, v16.4s, v5.4s
  .long  0x4e26ce02                          // fmla          v2.4s, v16.4s, v6.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dstover_aarch64
.globl _sk_dstover_aarch64
FUNCTION(_sk_dstover_aarch64)
_sk_dstover_aarch64:
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea41c90                          // mov           v16.16b, v4.16b
  .long  0x4ea7d634                          // fsub          v20.4s, v17.4s, v7.4s
  .long  0x4ea51cb1                          // mov           v17.16b, v5.16b
  .long  0x4ea61cd2                          // mov           v18.16b, v6.16b
  .long  0x4ea71cf3                          // mov           v19.16b, v7.16b
  .long  0x4e20ce90                          // fmla          v16.4s, v20.4s, v0.4s
  .long  0x4e21ce91                          // fmla          v17.4s, v20.4s, v1.4s
  .long  0x4e22ce92                          // fmla          v18.4s, v20.4s, v2.4s
  .long  0x4e23ce93                          // fmla          v19.4s, v20.4s, v3.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_modulate_aarch64
.globl _sk_modulate_aarch64
FUNCTION(_sk_modulate_aarch64)
_sk_modulate_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e24dc00                          // fmul          v0.4s, v0.4s, v4.4s
  .long  0x6e25dc21                          // fmul          v1.4s, v1.4s, v5.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_multiply_aarch64
.globl _sk_multiply_aarch64
FUNCTION(_sk_multiply_aarch64)
_sk_multiply_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d613                          // fsub          v19.4s, v16.4s, v7.4s
  .long  0x4ea3d614                          // fsub          v20.4s, v16.4s, v3.4s
  .long  0x6e20de70                          // fmul          v16.4s, v19.4s, v0.4s
  .long  0x6e21de71                          // fmul          v17.4s, v19.4s, v1.4s
  .long  0x6e22de72                          // fmul          v18.4s, v19.4s, v2.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e34cc90                          // fmla          v16.4s, v4.4s, v20.4s
  .long  0x4e34ccb1                          // fmla          v17.4s, v5.4s, v20.4s
  .long  0x4e34ccd2                          // fmla          v18.4s, v6.4s, v20.4s
  .long  0x4e34ccf3                          // fmla          v19.4s, v7.4s, v20.4s
  .long  0x4e20cc90                          // fmla          v16.4s, v4.4s, v0.4s
  .long  0x4e21ccb1                          // fmla          v17.4s, v5.4s, v1.4s
  .long  0x4e22ccd2                          // fmla          v18.4s, v6.4s, v2.4s
  .long  0x4e23ccf3                          // fmla          v19.4s, v7.4s, v3.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_plus__aarch64
.globl _sk_plus__aarch64
FUNCTION(_sk_plus__aarch64)
_sk_plus__aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4e27d463                          // fadd          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_screen_aarch64
.globl _sk_screen_aarch64
FUNCTION(_sk_screen_aarch64)
_sk_screen_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e24d410                          // fadd          v16.4s, v0.4s, v4.4s
  .long  0x4e25d431                          // fadd          v17.4s, v1.4s, v5.4s
  .long  0x4e26d452                          // fadd          v18.4s, v2.4s, v6.4s
  .long  0x4e27d473                          // fadd          v19.4s, v3.4s, v7.4s
  .long  0x4ea4cc10                          // fmls          v16.4s, v0.4s, v4.4s
  .long  0x4ea5cc31                          // fmls          v17.4s, v1.4s, v5.4s
  .long  0x4ea6cc52                          // fmls          v18.4s, v2.4s, v6.4s
  .long  0x4ea7cc73                          // fmls          v19.4s, v3.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_xor__aarch64
.globl _sk_xor__aarch64
FUNCTION(_sk_xor__aarch64)
_sk_xor__aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea7d611                          // fsub          v17.4s, v16.4s, v7.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e20de20                          // fmul          v0.4s, v17.4s, v0.4s
  .long  0x6e21de21                          // fmul          v1.4s, v17.4s, v1.4s
  .long  0x6e22de22                          // fmul          v2.4s, v17.4s, v2.4s
  .long  0x6e23de23                          // fmul          v3.4s, v17.4s, v3.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccc2                          // fmla          v2.4s, v6.4s, v16.4s
  .long  0x4e30cce3                          // fmla          v3.4s, v7.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_darken_aarch64
.globl _sk_darken_aarch64
FUNCTION(_sk_darken_aarch64)
_sk_darken_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4e31f610                          // fmax          v16.4s, v16.4s, v17.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x4e33f652                          // fmax          v18.4s, v18.4s, v19.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4e33f631                          // fmax          v17.4s, v17.4s, v19.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_lighten_aarch64
.globl _sk_lighten_aarch64
FUNCTION(_sk_lighten_aarch64)
_sk_lighten_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4eb1f610                          // fmin          v16.4s, v16.4s, v17.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x4eb3f652                          // fmin          v18.4s, v18.4s, v19.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb3f631                          // fmin          v17.4s, v17.4s, v19.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_difference_aarch64
.globl _sk_difference_aarch64
FUNCTION(_sk_difference_aarch64)
_sk_difference_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4eb1f610                          // fmin          v16.4s, v16.4s, v17.4s
  .long  0x4eb3f652                          // fmin          v18.4s, v18.4s, v19.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0x4e30d610                          // fadd          v16.4s, v16.4s, v16.4s
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e32d650                          // fadd          v16.4s, v18.4s, v18.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb3f631                          // fmin          v17.4s, v17.4s, v19.4s
  .long  0x4eb0d421                          // fsub          v1.4s, v1.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4e31d631                          // fadd          v17.4s, v17.4s, v17.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_exclusion_aarch64
.globl _sk_exclusion_aarch64
FUNCTION(_sk_exclusion_aarch64)
_sk_exclusion_aarch64:
  .long  0x4e24d410                          // fadd          v16.4s, v0.4s, v4.4s
  .long  0x6e24dc00                          // fmul          v0.4s, v0.4s, v4.4s
  .long  0x4e20d400                          // fadd          v0.4s, v0.4s, v0.4s
  .long  0x4ea0d600                          // fsub          v0.4s, v16.4s, v0.4s
  .long  0x4e25d430                          // fadd          v16.4s, v1.4s, v5.4s
  .long  0x6e25dc21                          // fmul          v1.4s, v1.4s, v5.4s
  .long  0x4e21d421                          // fadd          v1.4s, v1.4s, v1.4s
  .long  0x4ea1d601                          // fsub          v1.4s, v16.4s, v1.4s
  .long  0x4e26d450                          // fadd          v16.4s, v2.4s, v6.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea2d602                          // fsub          v2.4s, v16.4s, v2.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_colorburn_aarch64
.globl _sk_colorburn_aarch64
FUNCTION(_sk_colorburn_aarch64)
_sk_colorburn_aarch64:
  .long  0x4ea4d4f3                          // fsub          v19.4s, v7.4s, v4.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x6e20fe73                          // fdiv          v19.4s, v19.4s, v0.4s
  .long  0x4ea7d634                          // fsub          v20.4s, v17.4s, v7.4s
  .long  0x4eb3f4f3                          // fmin          v19.4s, v7.4s, v19.4s
  .long  0x6e20de95                          // fmul          v21.4s, v20.4s, v0.4s
  .long  0x4eb3d4f3                          // fsub          v19.4s, v7.4s, v19.4s
  .long  0x4e24d6b6                          // fadd          v22.4s, v21.4s, v4.4s
  .long  0x4e33cc75                          // fmla          v21.4s, v3.4s, v19.4s
  .long  0x4ea5d4f3                          // fsub          v19.4s, v7.4s, v5.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0x6e21fe73                          // fdiv          v19.4s, v19.4s, v1.4s
  .long  0x4ea0d812                          // fcmeq         v18.4s, v0.4s, #0.0
  .long  0x4eb3f4f3                          // fmin          v19.4s, v7.4s, v19.4s
  .long  0x6e751c12                          // bsl           v18.16b, v0.16b, v21.16b
  .long  0x6e21de80                          // fmul          v0.4s, v20.4s, v1.4s
  .long  0x4eb3d4f3                          // fsub          v19.4s, v7.4s, v19.4s
  .long  0x4e25d415                          // fadd          v21.4s, v0.4s, v5.4s
  .long  0x4e33cc60                          // fmla          v0.4s, v3.4s, v19.4s
  .long  0x4ea0d833                          // fcmeq         v19.4s, v1.4s, #0.0
  .long  0x6e601c33                          // bsl           v19.16b, v1.16b, v0.16b
  .long  0x4ea6d4e0                          // fsub          v0.4s, v7.4s, v6.4s
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x6e22fc00                          // fdiv          v0.4s, v0.4s, v2.4s
  .long  0x4ea0f4e0                          // fmin          v0.4s, v7.4s, v0.4s
  .long  0x6e22de81                          // fmul          v1.4s, v20.4s, v2.4s
  .long  0x4ea0d4e0                          // fsub          v0.4s, v7.4s, v0.4s
  .long  0x4e26d434                          // fadd          v20.4s, v1.4s, v6.4s
  .long  0x4e20cc61                          // fmla          v1.4s, v3.4s, v0.4s
  .long  0x4ea0d840                          // fcmeq         v0.4s, v2.4s, #0.0
  .long  0x4ea3d631                          // fsub          v17.4s, v17.4s, v3.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e27e490                          // fcmeq         v16.4s, v4.4s, v7.4s
  .long  0x6e611c40                          // bsl           v0.16b, v2.16b, v1.16b
  .long  0x4e31cc92                          // fmla          v18.4s, v4.4s, v17.4s
  .long  0x4e27e4a1                          // fcmeq         v1.4s, v5.4s, v7.4s
  .long  0x4e27e4c2                          // fcmeq         v2.4s, v6.4s, v7.4s
  .long  0x4e31ccb3                          // fmla          v19.4s, v5.4s, v17.4s
  .long  0x4e31ccc0                          // fmla          v0.4s, v6.4s, v17.4s
  .long  0x6e721ed0                          // bsl           v16.16b, v22.16b, v18.16b
  .long  0x6e731ea1                          // bsl           v1.16b, v21.16b, v19.16b
  .long  0x6e601e82                          // bsl           v2.16b, v20.16b, v0.16b
  .long  0x4e27ce23                          // fmla          v3.4s, v17.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_colordodge_aarch64
.globl _sk_colordodge_aarch64
FUNCTION(_sk_colordodge_aarch64)
_sk_colordodge_aarch64:
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x4ea0d474                          // fsub          v20.4s, v3.4s, v0.4s
  .long  0x6e25dc75                          // fmul          v21.4s, v3.4s, v5.4s
  .long  0x4ea1d476                          // fsub          v22.4s, v3.4s, v1.4s
  .long  0x4ea7d657                          // fsub          v23.4s, v18.4s, v7.4s
  .long  0x6e34fe31                          // fdiv          v17.4s, v17.4s, v20.4s
  .long  0x6e36feb4                          // fdiv          v20.4s, v21.4s, v22.4s
  .long  0x6e20def5                          // fmul          v21.4s, v23.4s, v0.4s
  .long  0x4eb1f4f1                          // fmin          v17.4s, v7.4s, v17.4s
  .long  0x4e23e413                          // fcmeq         v19.4s, v0.4s, v3.4s
  .long  0x4e24d6b6                          // fadd          v22.4s, v21.4s, v4.4s
  .long  0x4e31cc75                          // fmla          v21.4s, v3.4s, v17.4s
  .long  0x6e751c13                          // bsl           v19.16b, v0.16b, v21.16b
  .long  0x6e21dee0                          // fmul          v0.4s, v23.4s, v1.4s
  .long  0x4eb4f4f4                          // fmin          v20.4s, v7.4s, v20.4s
  .long  0x4e25d415                          // fadd          v21.4s, v0.4s, v5.4s
  .long  0x4e34cc60                          // fmla          v0.4s, v3.4s, v20.4s
  .long  0x4e23e434                          // fcmeq         v20.4s, v1.4s, v3.4s
  .long  0x6e601c34                          // bsl           v20.16b, v1.16b, v0.16b
  .long  0x6e26dc60                          // fmul          v0.4s, v3.4s, v6.4s
  .long  0x4ea2d461                          // fsub          v1.4s, v3.4s, v2.4s
  .long  0x6e21fc00                          // fdiv          v0.4s, v0.4s, v1.4s
  .long  0x6e22dee1                          // fmul          v1.4s, v23.4s, v2.4s
  .long  0x4ea0f4e0                          // fmin          v0.4s, v7.4s, v0.4s
  .long  0x4e26d437                          // fadd          v23.4s, v1.4s, v6.4s
  .long  0x4e20cc61                          // fmla          v1.4s, v3.4s, v0.4s
  .long  0x4e23e440                          // fcmeq         v0.4s, v2.4s, v3.4s
  .long  0x6e611c40                          // bsl           v0.16b, v2.16b, v1.16b
  .long  0x4ea3d641                          // fsub          v1.4s, v18.4s, v3.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea0d890                          // fcmeq         v16.4s, v4.4s, #0.0
  .long  0x4ea0d8b1                          // fcmeq         v17.4s, v5.4s, #0.0
  .long  0x4e21cc93                          // fmla          v19.4s, v4.4s, v1.4s
  .long  0x4e21ccb4                          // fmla          v20.4s, v5.4s, v1.4s
  .long  0x4ea0d8c2                          // fcmeq         v2.4s, v6.4s, #0.0
  .long  0x4e21ccc0                          // fmla          v0.4s, v6.4s, v1.4s
  .long  0x6e731ed0                          // bsl           v16.16b, v22.16b, v19.16b
  .long  0x6e741eb1                          // bsl           v17.16b, v21.16b, v20.16b
  .long  0x6e601ee2                          // bsl           v2.16b, v23.16b, v0.16b
  .long  0x4e27cc23                          // fmla          v3.4s, v1.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_hardlight_aarch64
.globl _sk_hardlight_aarch64
FUNCTION(_sk_hardlight_aarch64)
_sk_hardlight_aarch64:
  .long  0x4ea4d4f4                          // fsub          v20.4s, v7.4s, v4.4s
  .long  0x4ea0d475                          // fsub          v21.4s, v3.4s, v0.4s
  .long  0x6e34deb4                          // fmul          v20.4s, v21.4s, v20.4s
  .long  0x4e20d411                          // fadd          v17.4s, v0.4s, v0.4s
  .long  0x6e24dc12                          // fmul          v18.4s, v0.4s, v4.4s
  .long  0x6e27dc73                          // fmul          v19.4s, v3.4s, v7.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x6e31e471                          // fcmge         v17.4s, v3.4s, v17.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4eb4d674                          // fsub          v20.4s, v19.4s, v20.4s
  .long  0x6e741e51                          // bsl           v17.16b, v18.16b, v20.16b
  .long  0x4ea5d4f2                          // fsub          v18.4s, v7.4s, v5.4s
  .long  0x4ea1d474                          // fsub          v20.4s, v3.4s, v1.4s
  .long  0x6e32de92                          // fmul          v18.4s, v20.4s, v18.4s
  .long  0x4e21d436                          // fadd          v22.4s, v1.4s, v1.4s
  .long  0x6e25dc35                          // fmul          v21.4s, v1.4s, v5.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x6e36e476                          // fcmge         v22.4s, v3.4s, v22.4s
  .long  0x4e35d6b5                          // fadd          v21.4s, v21.4s, v21.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e721eb6                          // bsl           v22.16b, v21.16b, v18.16b
  .long  0x4ea6d4f2                          // fsub          v18.4s, v7.4s, v6.4s
  .long  0x4ea2d475                          // fsub          v21.4s, v3.4s, v2.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x4ea7d615                          // fsub          v21.4s, v16.4s, v7.4s
  .long  0x4e22d454                          // fadd          v20.4s, v2.4s, v2.4s
  .long  0x6e20dea0                          // fmul          v0.4s, v21.4s, v0.4s
  .long  0x6e21dea1                          // fmul          v1.4s, v21.4s, v1.4s
  .long  0x6e22deb5                          // fmul          v21.4s, v21.4s, v2.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e34e474                          // fcmge         v20.4s, v3.4s, v20.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccd5                          // fmla          v21.4s, v6.4s, v16.4s
  .long  0x6e721c54                          // bsl           v20.16b, v2.16b, v18.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e36d421                          // fadd          v1.4s, v1.4s, v22.4s
  .long  0x4e34d6a2                          // fadd          v2.4s, v21.4s, v20.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_overlay_aarch64
.globl _sk_overlay_aarch64
FUNCTION(_sk_overlay_aarch64)
_sk_overlay_aarch64:
  .long  0x4ea4d4f4                          // fsub          v20.4s, v7.4s, v4.4s
  .long  0x4ea0d475                          // fsub          v21.4s, v3.4s, v0.4s
  .long  0x6e34deb4                          // fmul          v20.4s, v21.4s, v20.4s
  .long  0x4e24d491                          // fadd          v17.4s, v4.4s, v4.4s
  .long  0x6e24dc12                          // fmul          v18.4s, v0.4s, v4.4s
  .long  0x6e27dc73                          // fmul          v19.4s, v3.4s, v7.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x6e31e4f1                          // fcmge         v17.4s, v7.4s, v17.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4eb4d674                          // fsub          v20.4s, v19.4s, v20.4s
  .long  0x6e741e51                          // bsl           v17.16b, v18.16b, v20.16b
  .long  0x4ea5d4f2                          // fsub          v18.4s, v7.4s, v5.4s
  .long  0x4ea1d474                          // fsub          v20.4s, v3.4s, v1.4s
  .long  0x6e32de92                          // fmul          v18.4s, v20.4s, v18.4s
  .long  0x4e25d4b6                          // fadd          v22.4s, v5.4s, v5.4s
  .long  0x6e25dc35                          // fmul          v21.4s, v1.4s, v5.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x6e36e4f6                          // fcmge         v22.4s, v7.4s, v22.4s
  .long  0x4e35d6b5                          // fadd          v21.4s, v21.4s, v21.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e721eb6                          // bsl           v22.16b, v21.16b, v18.16b
  .long  0x4ea6d4f2                          // fsub          v18.4s, v7.4s, v6.4s
  .long  0x4ea2d475                          // fsub          v21.4s, v3.4s, v2.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x4ea7d615                          // fsub          v21.4s, v16.4s, v7.4s
  .long  0x4e26d4d4                          // fadd          v20.4s, v6.4s, v6.4s
  .long  0x6e20dea0                          // fmul          v0.4s, v21.4s, v0.4s
  .long  0x6e21dea1                          // fmul          v1.4s, v21.4s, v1.4s
  .long  0x6e22deb5                          // fmul          v21.4s, v21.4s, v2.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e34e4f4                          // fcmge         v20.4s, v7.4s, v20.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccd5                          // fmla          v21.4s, v6.4s, v16.4s
  .long  0x6e721c54                          // bsl           v20.16b, v2.16b, v18.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e36d421                          // fadd          v1.4s, v1.4s, v22.4s
  .long  0x4e34d6a2                          // fadd          v2.4s, v21.4s, v20.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_softlight_aarch64
.globl _sk_softlight_aarch64
FUNCTION(_sk_softlight_aarch64)
_sk_softlight_aarch64:
  .long  0x4ea0c8f5                          // fcmgt         v21.4s, v7.4s, #0.0
  .long  0x6e27fc96                          // fdiv          v22.4s, v4.4s, v7.4s
  .long  0x6e27fcb8                          // fdiv          v24.4s, v5.4s, v7.4s
  .long  0x6e27fcd9                          // fdiv          v25.4s, v6.4s, v7.4s
  .long  0x4e351ed6                          // and           v22.16b, v22.16b, v21.16b
  .long  0x4e351f18                          // and           v24.16b, v24.16b, v21.16b
  .long  0x4e351f35                          // and           v21.16b, v25.16b, v21.16b
  .long  0x6ea1dad9                          // frsqrte       v25.4s, v22.4s
  .long  0x6e39df3d                          // fmul          v29.4s, v25.4s, v25.4s
  .long  0x4ebdfedd                          // frsqrts       v29.4s, v22.4s, v29.4s
  .long  0x6e3ddf39                          // fmul          v25.4s, v25.4s, v29.4s
  .long  0x4ea1db3d                          // frecpe        v29.4s, v25.4s
  .long  0x6ea0fada                          // fneg          v26.4s, v22.4s
  .long  0x6ea1db1b                          // frsqrte       v27.4s, v24.4s
  .long  0x4e3dff39                          // frecps        v25.4s, v25.4s, v29.4s
  .long  0x4e3dcf3a                          // fmla          v26.4s, v25.4s, v29.4s
  .long  0x6e3bdf7d                          // fmul          v29.4s, v27.4s, v27.4s
  .long  0x4ebdff1d                          // frsqrts       v29.4s, v24.4s, v29.4s
  .long  0x6e3ddf7b                          // fmul          v27.4s, v27.4s, v29.4s
  .long  0x4ea1db7d                          // frecpe        v29.4s, v27.4s
  .long  0x6ea0fb1c                          // fneg          v28.4s, v24.4s
  .long  0x6ea1dab9                          // frsqrte       v25.4s, v21.4s
  .long  0x4e3dff7b                          // frecps        v27.4s, v27.4s, v29.4s
  .long  0x4e3dcf7c                          // fmla          v28.4s, v27.4s, v29.4s
  .long  0x6e39df3d                          // fmul          v29.4s, v25.4s, v25.4s
  .long  0x4ebdfebd                          // frsqrts       v29.4s, v21.4s, v29.4s
  .long  0x6e3ddf39                          // fmul          v25.4s, v25.4s, v29.4s
  .long  0x4ea1db3d                          // frecpe        v29.4s, v25.4s
  .long  0x6ea0fabb                          // fneg          v27.4s, v21.4s
  .long  0x4e3dff39                          // frecps        v25.4s, v25.4s, v29.4s
  .long  0x4e3dcf3b                          // fmla          v27.4s, v25.4s, v29.4s
  .long  0x4e36d6d9                          // fadd          v25.4s, v22.4s, v22.4s
  .long  0x4f07f613                          // fmov          v19.4s, #-1.000000000000000000e+00
  .long  0x4e39d739                          // fadd          v25.4s, v25.4s, v25.4s
  .long  0x4e24d497                          // fadd          v23.4s, v4.4s, v4.4s
  .long  0x4e33d6dd                          // fadd          v29.4s, v22.4s, v19.4s
  .long  0x4e39cf39                          // fmla          v25.4s, v25.4s, v25.4s
  .long  0x4f00f794                          // fmov          v20.4s, #7.000000000000000000e+00
  .long  0x6e39dfb9                          // fmul          v25.4s, v29.4s, v25.4s
  .long  0x4e37d6f7                          // fadd          v23.4s, v23.4s, v23.4s
  .long  0x6e37e4f7                          // fcmge         v23.4s, v7.4s, v23.4s
  .long  0x4e36ce99                          // fmla          v25.4s, v20.4s, v22.4s
  .long  0x6e7a1f37                          // bsl           v23.16b, v25.16b, v26.16b
  .long  0x4e38d719                          // fadd          v25.4s, v24.4s, v24.4s
  .long  0x4e39d739                          // fadd          v25.4s, v25.4s, v25.4s
  .long  0x4e33d71a                          // fadd          v26.4s, v24.4s, v19.4s
  .long  0x4e39cf39                          // fmla          v25.4s, v25.4s, v25.4s
  .long  0x6e39df59                          // fmul          v25.4s, v26.4s, v25.4s
  .long  0x4e25d4ba                          // fadd          v26.4s, v5.4s, v5.4s
  .long  0x4e3ad75a                          // fadd          v26.4s, v26.4s, v26.4s
  .long  0x6e3ae4fa                          // fcmge         v26.4s, v7.4s, v26.4s
  .long  0x4e38ce99                          // fmla          v25.4s, v20.4s, v24.4s
  .long  0x6e7c1f3a                          // bsl           v26.16b, v25.16b, v28.16b
  .long  0x4e35d6bc                          // fadd          v28.4s, v21.4s, v21.4s
  .long  0x4e3cd79c                          // fadd          v28.4s, v28.4s, v28.4s
  .long  0x4e33d6b3                          // fadd          v19.4s, v21.4s, v19.4s
  .long  0x4e3ccf9c                          // fmla          v28.4s, v28.4s, v28.4s
  .long  0x6e3cde73                          // fmul          v19.4s, v19.4s, v28.4s
  .long  0x4e35ce93                          // fmla          v19.4s, v20.4s, v21.4s
  .long  0x4e26d4d4                          // fadd          v20.4s, v6.4s, v6.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x6e34e4f4                          // fcmge         v20.4s, v7.4s, v20.4s
  .long  0x4e20d411                          // fadd          v17.4s, v0.4s, v0.4s
  .long  0x6e7b1e74                          // bsl           v20.16b, v19.16b, v27.16b
  .long  0x4ea7d65b                          // fsub          v27.4s, v18.4s, v7.4s
  .long  0x4ea31c70                          // mov           v16.16b, v3.16b
  .long  0x4e21d43d                          // fadd          v29.4s, v1.4s, v1.4s
  .long  0x4e22d45c                          // fadd          v28.4s, v2.4s, v2.4s
  .long  0x6e20df60                          // fmul          v0.4s, v27.4s, v0.4s
  .long  0x6e21df61                          // fmul          v1.4s, v27.4s, v1.4s
  .long  0x6e22df62                          // fmul          v2.4s, v27.4s, v2.4s
  .long  0x4ea3d63b                          // fsub          v27.4s, v17.4s, v3.4s
  .long  0x4eb6d656                          // fsub          v22.4s, v18.4s, v22.4s
  .long  0x4ea31c79                          // mov           v25.16b, v3.16b
  .long  0x4e3bced0                          // fmla          v16.4s, v22.4s, v27.4s
  .long  0x4ea3d7b6                          // fsub          v22.4s, v29.4s, v3.4s
  .long  0x4eb8d658                          // fsub          v24.4s, v18.4s, v24.4s
  .long  0x4ea31c73                          // mov           v19.16b, v3.16b
  .long  0x4e36cf19                          // fmla          v25.4s, v24.4s, v22.4s
  .long  0x4ea3d798                          // fsub          v24.4s, v28.4s, v3.4s
  .long  0x4eb5d655                          // fsub          v21.4s, v18.4s, v21.4s
  .long  0x4e38ceb3                          // fmla          v19.4s, v21.4s, v24.4s
  .long  0x6e27df7b                          // fmul          v27.4s, v27.4s, v7.4s
  .long  0x6e27ded6                          // fmul          v22.4s, v22.4s, v7.4s
  .long  0x6e27df18                          // fmul          v24.4s, v24.4s, v7.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e37df77                          // fmul          v23.4s, v27.4s, v23.4s
  .long  0x6e3aded6                          // fmul          v22.4s, v22.4s, v26.4s
  .long  0x6e34df14                          // fmul          v20.4s, v24.4s, v20.4s
  .long  0x4ea3d652                          // fsub          v18.4s, v18.4s, v3.4s
  .long  0x6e31e471                          // fcmge         v17.4s, v3.4s, v17.4s
  .long  0x6e3de475                          // fcmge         v21.4s, v3.4s, v29.4s
  .long  0x6e3ce47c                          // fcmge         v28.4s, v3.4s, v28.4s
  .long  0x6e24de10                          // fmul          v16.4s, v16.4s, v4.4s
  .long  0x6e25df39                          // fmul          v25.4s, v25.4s, v5.4s
  .long  0x6e26de73                          // fmul          v19.4s, v19.4s, v6.4s
  .long  0x4e23cc97                          // fmla          v23.4s, v4.4s, v3.4s
  .long  0x4e23ccb6                          // fmla          v22.4s, v5.4s, v3.4s
  .long  0x4e23ccd4                          // fmla          v20.4s, v6.4s, v3.4s
  .long  0x4e32cc80                          // fmla          v0.4s, v4.4s, v18.4s
  .long  0x4e32cca1                          // fmla          v1.4s, v5.4s, v18.4s
  .long  0x4e32ccc2                          // fmla          v2.4s, v6.4s, v18.4s
  .long  0x6e771e11                          // bsl           v17.16b, v16.16b, v23.16b
  .long  0x6e761f35                          // bsl           v21.16b, v25.16b, v22.16b
  .long  0x6e741e7c                          // bsl           v28.16b, v19.16b, v20.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e35d421                          // fadd          v1.4s, v1.4s, v21.4s
  .long  0x4e3cd442                          // fadd          v2.4s, v2.4s, v28.4s
  .long  0x4e27ce43                          // fmla          v3.4s, v18.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_hue_aarch64
.globl _sk_hue_aarch64
FUNCTION(_sk_hue_aarch64)
_sk_hue_aarch64:
  .long  0x6e23dc32                          // fmul          v18.4s, v1.4s, v3.4s
  .long  0x6e23dc53                          // fmul          v19.4s, v2.4s, v3.4s
  .long  0x4e26f4b5                          // fmax          v21.4s, v5.4s, v6.4s
  .long  0x4ea6f4b7                          // fmin          v23.4s, v5.4s, v6.4s
  .long  0x6e23dc11                          // fmul          v17.4s, v0.4s, v3.4s
  .long  0x4e35f495                          // fmax          v21.4s, v4.4s, v21.4s
  .long  0x4eb7f497                          // fmin          v23.4s, v4.4s, v23.4s
  .long  0x4eb3f65b                          // fmin          v27.4s, v18.4s, v19.4s
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x4f03f619                          // fmov          v25.4s, #1.000000000000000000e+00
  .long  0x4e33f65c                          // fmax          v28.4s, v18.4s, v19.4s
  .long  0x4eb7d6b5                          // fsub          v21.4s, v21.4s, v23.4s
  .long  0x4ebbf63b                          // fmin          v27.4s, v17.4s, v27.4s
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4ea7d737                          // fsub          v23.4s, v25.4s, v7.4s
  .long  0x4e3cf63c                          // fmax          v28.4s, v17.4s, v28.4s
  .long  0x4ebbd652                          // fsub          v18.4s, v18.4s, v27.4s
  .long  0x6e23deb5                          // fmul          v21.4s, v21.4s, v3.4s
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x6e20dee0                          // fmul          v0.4s, v23.4s, v0.4s
  .long  0x6e21dee1                          // fmul          v1.4s, v23.4s, v1.4s
  .long  0x6e22dee2                          // fmul          v2.4s, v23.4s, v2.4s
  .long  0x4ea3d739                          // fsub          v25.4s, v25.4s, v3.4s
  .long  0x4ebbd79c                          // fsub          v28.4s, v28.4s, v27.4s
  .long  0x4ebbd631                          // fsub          v17.4s, v17.4s, v27.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x4ebbd673                          // fsub          v19.4s, v19.4s, v27.4s
  .long  0x4e39cc80                          // fmla          v0.4s, v4.4s, v25.4s
  .long  0x4e39cca1                          // fmla          v1.4s, v5.4s, v25.4s
  .long  0x4e39ccc2                          // fmla          v2.4s, v6.4s, v25.4s
  .long  0x4ea0db99                          // fcmeq         v25.4s, v28.4s, #0.0
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e3cfe52                          // fdiv          v18.4s, v18.4s, v28.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e33deb3                          // fmul          v19.4s, v21.4s, v19.4s
  .long  0x6e3cfe31                          // fdiv          v17.4s, v17.4s, v28.4s
  .long  0x4e791e52                          // bic           v18.16b, v18.16b, v25.16b
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x6e3cfe73                          // fdiv          v19.4s, v19.4s, v28.4s
  .long  0x4e791e31                          // bic           v17.16b, v17.16b, v25.16b
  .long  0x6e38de55                          // fmul          v21.4s, v18.4s, v24.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x6e38dcbb                          // fmul          v27.4s, v5.4s, v24.4s
  .long  0x4e791e73                          // bic           v19.16b, v19.16b, v25.16b
  .long  0x4e31ced5                          // fmla          v21.4s, v22.4s, v17.4s
  .long  0x4e24cedb                          // fmla          v27.4s, v22.4s, v4.4s
  .long  0x4e33cef5                          // fmla          v21.4s, v23.4s, v19.4s
  .long  0x4e26cefb                          // fmla          v27.4s, v23.4s, v6.4s
  .long  0x6ea0fab5                          // fneg          v21.4s, v21.4s
  .long  0x4e3bcc75                          // fmla          v21.4s, v3.4s, v27.4s
  .long  0x6e27dc74                          // fmul          v20.4s, v3.4s, v7.4s
  .long  0x4e27d47a                          // fadd          v26.4s, v3.4s, v7.4s
  .long  0x4e35d623                          // fadd          v3.4s, v17.4s, v21.4s
  .long  0x4e35d651                          // fadd          v17.4s, v18.4s, v21.4s
  .long  0x6e38de38                          // fmul          v24.4s, v17.4s, v24.4s
  .long  0x4e35d672                          // fadd          v18.4s, v19.4s, v21.4s
  .long  0x4e23ced8                          // fmla          v24.4s, v22.4s, v3.4s
  .long  0x4eb2f633                          // fmin          v19.4s, v17.4s, v18.4s
  .long  0x4e32cef8                          // fmla          v24.4s, v23.4s, v18.4s
  .long  0x4eb3f473                          // fmin          v19.4s, v3.4s, v19.4s
  .long  0x4eb8d479                          // fsub          v25.4s, v3.4s, v24.4s
  .long  0x6ea0ca76                          // fcmge         v22.4s, v19.4s, #0.0
  .long  0x4eb3d713                          // fsub          v19.4s, v24.4s, v19.4s
  .long  0x6e39df19                          // fmul          v25.4s, v24.4s, v25.4s
  .long  0x6e33ff39                          // fdiv          v25.4s, v25.4s, v19.4s
  .long  0x4e32f635                          // fmax          v21.4s, v17.4s, v18.4s
  .long  0x4eb61edb                          // mov           v27.16b, v22.16b
  .long  0x4e39d719                          // fadd          v25.4s, v24.4s, v25.4s
  .long  0x4e35f475                          // fmax          v21.4s, v3.4s, v21.4s
  .long  0x6e791c7b                          // bsl           v27.16b, v3.16b, v25.16b
  .long  0x4eb8d623                          // fsub          v3.4s, v17.4s, v24.4s
  .long  0x6e23df03                          // fmul          v3.4s, v24.4s, v3.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x4eb61ed9                          // mov           v25.16b, v22.16b
  .long  0x4e23d703                          // fadd          v3.4s, v24.4s, v3.4s
  .long  0x6e631e39                          // bsl           v25.16b, v17.16b, v3.16b
  .long  0x4eb8d651                          // fsub          v17.4s, v18.4s, v24.4s
  .long  0x6e31df11                          // fmul          v17.4s, v24.4s, v17.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x6e711e56                          // bsl           v22.16b, v18.16b, v17.16b
  .long  0x4eb8d69c                          // fsub          v28.4s, v20.4s, v24.4s
  .long  0x4eb8d771                          // fsub          v17.4s, v27.4s, v24.4s
  .long  0x4eb8d732                          // fsub          v18.4s, v25.4s, v24.4s
  .long  0x4eb8d6d3                          // fsub          v19.4s, v22.4s, v24.4s
  .long  0x6eb4e6b7                          // fcmgt         v23.4s, v21.4s, v20.4s
  .long  0x4eb8d6b5                          // fsub          v21.4s, v21.4s, v24.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e32df92                          // fmul          v18.4s, v28.4s, v18.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e35fe31                          // fdiv          v17.4s, v17.4s, v21.4s
  .long  0x6e35fe52                          // fdiv          v18.4s, v18.4s, v21.4s
  .long  0x6e35fe73                          // fdiv          v19.4s, v19.4s, v21.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb71ee3                          // mov           v3.16b, v23.16b
  .long  0x4eb71efc                          // mov           v28.16b, v23.16b
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x4e32d712                          // fadd          v18.4s, v24.4s, v18.4s
  .long  0x4e33d713                          // fadd          v19.4s, v24.4s, v19.4s
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e791e5c                          // bsl           v28.16b, v18.16b, v25.16b
  .long  0x6e761e77                          // bsl           v23.16b, v19.16b, v22.16b
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0x4e30f791                          // fmax          v17.4s, v28.4s, v16.4s
  .long  0x4e30f6f0                          // fmax          v16.4s, v23.4s, v16.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e30d442                          // fadd          v2.4s, v2.4s, v16.4s
  .long  0x4eb4d743                          // fsub          v3.4s, v26.4s, v20.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_saturation_aarch64
.globl _sk_saturation_aarch64
FUNCTION(_sk_saturation_aarch64)
_sk_saturation_aarch64:
  .long  0x6e25dc72                          // fmul          v18.4s, v3.4s, v5.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4e22f435                          // fmax          v21.4s, v1.4s, v2.4s
  .long  0x4ea2f437                          // fmin          v23.4s, v1.4s, v2.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x4e35f415                          // fmax          v21.4s, v0.4s, v21.4s
  .long  0x4eb7f417                          // fmin          v23.4s, v0.4s, v23.4s
  .long  0x4eb3f65b                          // fmin          v27.4s, v18.4s, v19.4s
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x4f03f619                          // fmov          v25.4s, #1.000000000000000000e+00
  .long  0x4e33f65c                          // fmax          v28.4s, v18.4s, v19.4s
  .long  0x4eb7d6b5                          // fsub          v21.4s, v21.4s, v23.4s
  .long  0x4ebbf63b                          // fmin          v27.4s, v17.4s, v27.4s
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4ea7d737                          // fsub          v23.4s, v25.4s, v7.4s
  .long  0x4e3cf63c                          // fmax          v28.4s, v17.4s, v28.4s
  .long  0x4ebbd652                          // fsub          v18.4s, v18.4s, v27.4s
  .long  0x6e27deb5                          // fmul          v21.4s, v21.4s, v7.4s
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x6e20dee0                          // fmul          v0.4s, v23.4s, v0.4s
  .long  0x6e21dee1                          // fmul          v1.4s, v23.4s, v1.4s
  .long  0x6e22dee2                          // fmul          v2.4s, v23.4s, v2.4s
  .long  0x4ea3d739                          // fsub          v25.4s, v25.4s, v3.4s
  .long  0x4ebbd79c                          // fsub          v28.4s, v28.4s, v27.4s
  .long  0x4ebbd631                          // fsub          v17.4s, v17.4s, v27.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x4ebbd673                          // fsub          v19.4s, v19.4s, v27.4s
  .long  0x4e39cc80                          // fmla          v0.4s, v4.4s, v25.4s
  .long  0x4e39cca1                          // fmla          v1.4s, v5.4s, v25.4s
  .long  0x4e39ccc2                          // fmla          v2.4s, v6.4s, v25.4s
  .long  0x4ea0db99                          // fcmeq         v25.4s, v28.4s, #0.0
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e3cfe52                          // fdiv          v18.4s, v18.4s, v28.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e33deb3                          // fmul          v19.4s, v21.4s, v19.4s
  .long  0x6e3cfe31                          // fdiv          v17.4s, v17.4s, v28.4s
  .long  0x4e791e52                          // bic           v18.16b, v18.16b, v25.16b
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x6e3cfe73                          // fdiv          v19.4s, v19.4s, v28.4s
  .long  0x4e791e31                          // bic           v17.16b, v17.16b, v25.16b
  .long  0x6e38de55                          // fmul          v21.4s, v18.4s, v24.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x6e38dcbb                          // fmul          v27.4s, v5.4s, v24.4s
  .long  0x4e791e73                          // bic           v19.16b, v19.16b, v25.16b
  .long  0x4e31ced5                          // fmla          v21.4s, v22.4s, v17.4s
  .long  0x4e24cedb                          // fmla          v27.4s, v22.4s, v4.4s
  .long  0x4e33cef5                          // fmla          v21.4s, v23.4s, v19.4s
  .long  0x4e26cefb                          // fmla          v27.4s, v23.4s, v6.4s
  .long  0x6ea0fab5                          // fneg          v21.4s, v21.4s
  .long  0x4e3bcc75                          // fmla          v21.4s, v3.4s, v27.4s
  .long  0x6e27dc74                          // fmul          v20.4s, v3.4s, v7.4s
  .long  0x4e27d47a                          // fadd          v26.4s, v3.4s, v7.4s
  .long  0x4e35d623                          // fadd          v3.4s, v17.4s, v21.4s
  .long  0x4e35d651                          // fadd          v17.4s, v18.4s, v21.4s
  .long  0x6e38de38                          // fmul          v24.4s, v17.4s, v24.4s
  .long  0x4e35d672                          // fadd          v18.4s, v19.4s, v21.4s
  .long  0x4e23ced8                          // fmla          v24.4s, v22.4s, v3.4s
  .long  0x4eb2f633                          // fmin          v19.4s, v17.4s, v18.4s
  .long  0x4e32cef8                          // fmla          v24.4s, v23.4s, v18.4s
  .long  0x4eb3f473                          // fmin          v19.4s, v3.4s, v19.4s
  .long  0x4eb8d479                          // fsub          v25.4s, v3.4s, v24.4s
  .long  0x6ea0ca76                          // fcmge         v22.4s, v19.4s, #0.0
  .long  0x4eb3d713                          // fsub          v19.4s, v24.4s, v19.4s
  .long  0x6e39df19                          // fmul          v25.4s, v24.4s, v25.4s
  .long  0x6e33ff39                          // fdiv          v25.4s, v25.4s, v19.4s
  .long  0x4e32f635                          // fmax          v21.4s, v17.4s, v18.4s
  .long  0x4eb61edb                          // mov           v27.16b, v22.16b
  .long  0x4e39d719                          // fadd          v25.4s, v24.4s, v25.4s
  .long  0x4e35f475                          // fmax          v21.4s, v3.4s, v21.4s
  .long  0x6e791c7b                          // bsl           v27.16b, v3.16b, v25.16b
  .long  0x4eb8d623                          // fsub          v3.4s, v17.4s, v24.4s
  .long  0x6e23df03                          // fmul          v3.4s, v24.4s, v3.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x4eb61ed9                          // mov           v25.16b, v22.16b
  .long  0x4e23d703                          // fadd          v3.4s, v24.4s, v3.4s
  .long  0x6e631e39                          // bsl           v25.16b, v17.16b, v3.16b
  .long  0x4eb8d651                          // fsub          v17.4s, v18.4s, v24.4s
  .long  0x6e31df11                          // fmul          v17.4s, v24.4s, v17.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x6e711e56                          // bsl           v22.16b, v18.16b, v17.16b
  .long  0x4eb8d69c                          // fsub          v28.4s, v20.4s, v24.4s
  .long  0x4eb8d771                          // fsub          v17.4s, v27.4s, v24.4s
  .long  0x4eb8d732                          // fsub          v18.4s, v25.4s, v24.4s
  .long  0x4eb8d6d3                          // fsub          v19.4s, v22.4s, v24.4s
  .long  0x6eb4e6b7                          // fcmgt         v23.4s, v21.4s, v20.4s
  .long  0x4eb8d6b5                          // fsub          v21.4s, v21.4s, v24.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e32df92                          // fmul          v18.4s, v28.4s, v18.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e35fe31                          // fdiv          v17.4s, v17.4s, v21.4s
  .long  0x6e35fe52                          // fdiv          v18.4s, v18.4s, v21.4s
  .long  0x6e35fe73                          // fdiv          v19.4s, v19.4s, v21.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb71ee3                          // mov           v3.16b, v23.16b
  .long  0x4eb71efc                          // mov           v28.16b, v23.16b
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x4e32d712                          // fadd          v18.4s, v24.4s, v18.4s
  .long  0x4e33d713                          // fadd          v19.4s, v24.4s, v19.4s
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e791e5c                          // bsl           v28.16b, v18.16b, v25.16b
  .long  0x6e761e77                          // bsl           v23.16b, v19.16b, v22.16b
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0x4e30f791                          // fmax          v17.4s, v28.4s, v16.4s
  .long  0x4e30f6f0                          // fmax          v16.4s, v23.4s, v16.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e30d442                          // fadd          v2.4s, v2.4s, v16.4s
  .long  0x4eb4d743                          // fsub          v3.4s, v26.4s, v20.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_color_aarch64
.globl _sk_color_aarch64
FUNCTION(_sk_color_aarch64)
_sk_color_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x6e27dc33                          // fmul          v19.4s, v1.4s, v7.4s
  .long  0x4e040d15                          // dup           v21.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e27dc11                          // fmul          v17.4s, v0.4s, v7.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4f03f617                          // fmov          v23.4s, #1.000000000000000000e+00
  .long  0x6e35de7c                          // fmul          v28.4s, v19.4s, v21.4s
  .long  0x6e27dc54                          // fmul          v20.4s, v2.4s, v7.4s
  .long  0x4e040d19                          // dup           v25.4s, w8
  .long  0x4ea7d6fa                          // fsub          v26.4s, v23.4s, v7.4s
  .long  0x6e35dcbb                          // fmul          v27.4s, v5.4s, v21.4s
  .long  0x4e31ce5c                          // fmla          v28.4s, v18.4s, v17.4s
  .long  0x4ea3d6f7                          // fsub          v23.4s, v23.4s, v3.4s
  .long  0x6e20df40                          // fmul          v0.4s, v26.4s, v0.4s
  .long  0x6e21df41                          // fmul          v1.4s, v26.4s, v1.4s
  .long  0x6e22df42                          // fmul          v2.4s, v26.4s, v2.4s
  .long  0x4e24ce5b                          // fmla          v27.4s, v18.4s, v4.4s
  .long  0x4e34cf3c                          // fmla          v28.4s, v25.4s, v20.4s
  .long  0x4e37cc80                          // fmla          v0.4s, v4.4s, v23.4s
  .long  0x4e37cca1                          // fmla          v1.4s, v5.4s, v23.4s
  .long  0x4e37ccc2                          // fmla          v2.4s, v6.4s, v23.4s
  .long  0x4e26cf3b                          // fmla          v27.4s, v25.4s, v6.4s
  .long  0x6ea0fb97                          // fneg          v23.4s, v28.4s
  .long  0x4e3bcc77                          // fmla          v23.4s, v3.4s, v27.4s
  .long  0x6e27dc70                          // fmul          v16.4s, v3.4s, v7.4s
  .long  0x4e27d478                          // fadd          v24.4s, v3.4s, v7.4s
  .long  0x4e37d623                          // fadd          v3.4s, v17.4s, v23.4s
  .long  0x4e37d671                          // fadd          v17.4s, v19.4s, v23.4s
  .long  0x6e35de35                          // fmul          v21.4s, v17.4s, v21.4s
  .long  0x4e37d693                          // fadd          v19.4s, v20.4s, v23.4s
  .long  0x4e23ce55                          // fmla          v21.4s, v18.4s, v3.4s
  .long  0x4eb3f634                          // fmin          v20.4s, v17.4s, v19.4s
  .long  0x4e33cf35                          // fmla          v21.4s, v25.4s, v19.4s
  .long  0x4eb4f474                          // fmin          v20.4s, v3.4s, v20.4s
  .long  0x4eb5d47a                          // fsub          v26.4s, v3.4s, v21.4s
  .long  0x6ea0ca92                          // fcmge         v18.4s, v20.4s, #0.0
  .long  0x4eb4d6b4                          // fsub          v20.4s, v21.4s, v20.4s
  .long  0x6e3adeba                          // fmul          v26.4s, v21.4s, v26.4s
  .long  0x6e34ff5a                          // fdiv          v26.4s, v26.4s, v20.4s
  .long  0x4e33f637                          // fmax          v23.4s, v17.4s, v19.4s
  .long  0x4eb21e5b                          // mov           v27.16b, v18.16b
  .long  0x4e3ad6ba                          // fadd          v26.4s, v21.4s, v26.4s
  .long  0x4e37f477                          // fmax          v23.4s, v3.4s, v23.4s
  .long  0x6e7a1c7b                          // bsl           v27.16b, v3.16b, v26.16b
  .long  0x4eb5d623                          // fsub          v3.4s, v17.4s, v21.4s
  .long  0x6e23dea3                          // fmul          v3.4s, v21.4s, v3.4s
  .long  0x6e34fc63                          // fdiv          v3.4s, v3.4s, v20.4s
  .long  0x4eb21e5a                          // mov           v26.16b, v18.16b
  .long  0x4e23d6a3                          // fadd          v3.4s, v21.4s, v3.4s
  .long  0x6e631e3a                          // bsl           v26.16b, v17.16b, v3.16b
  .long  0x4eb5d671                          // fsub          v17.4s, v19.4s, v21.4s
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e34fe31                          // fdiv          v17.4s, v17.4s, v20.4s
  .long  0x4e31d6b1                          // fadd          v17.4s, v21.4s, v17.4s
  .long  0x6e711e72                          // bsl           v18.16b, v19.16b, v17.16b
  .long  0x4eb5d61c                          // fsub          v28.4s, v16.4s, v21.4s
  .long  0x4eb5d771                          // fsub          v17.4s, v27.4s, v21.4s
  .long  0x4eb5d753                          // fsub          v19.4s, v26.4s, v21.4s
  .long  0x4eb5d654                          // fsub          v20.4s, v18.4s, v21.4s
  .long  0x6eb0e6f9                          // fcmgt         v25.4s, v23.4s, v16.4s
  .long  0x4eb5d6f7                          // fsub          v23.4s, v23.4s, v21.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e34df94                          // fmul          v20.4s, v28.4s, v20.4s
  .long  0x6e37fe31                          // fdiv          v17.4s, v17.4s, v23.4s
  .long  0x6e37fe73                          // fdiv          v19.4s, v19.4s, v23.4s
  .long  0x6e37fe94                          // fdiv          v20.4s, v20.4s, v23.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb91f23                          // mov           v3.16b, v25.16b
  .long  0x4eb91f3c                          // mov           v28.16b, v25.16b
  .long  0x4e31d6b1                          // fadd          v17.4s, v21.4s, v17.4s
  .long  0x4e33d6b3                          // fadd          v19.4s, v21.4s, v19.4s
  .long  0x4e34d6b4                          // fadd          v20.4s, v21.4s, v20.4s
  .long  0x6f00e416                          // movi          v22.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e7a1e7c                          // bsl           v28.16b, v19.16b, v26.16b
  .long  0x6e721e99                          // bsl           v25.16b, v20.16b, v18.16b
  .long  0x4e36f463                          // fmax          v3.4s, v3.4s, v22.4s
  .long  0x4e36f791                          // fmax          v17.4s, v28.4s, v22.4s
  .long  0x4e36f732                          // fmax          v18.4s, v25.4s, v22.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e32d442                          // fadd          v2.4s, v2.4s, v18.4s
  .long  0x4eb0d703                          // fsub          v3.4s, v24.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_luminosity_aarch64
.globl _sk_luminosity_aarch64
FUNCTION(_sk_luminosity_aarch64)
_sk_luminosity_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4e040d15                          // dup           v21.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4f03f617                          // fmov          v23.4s, #1.000000000000000000e+00
  .long  0x6e35de7b                          // fmul          v27.4s, v19.4s, v21.4s
  .long  0x6e26dc74                          // fmul          v20.4s, v3.4s, v6.4s
  .long  0x6e27dc70                          // fmul          v16.4s, v3.4s, v7.4s
  .long  0x4e27d478                          // fadd          v24.4s, v3.4s, v7.4s
  .long  0x4e040d19                          // dup           v25.4s, w8
  .long  0x4ea7d6fa                          // fsub          v26.4s, v23.4s, v7.4s
  .long  0x4ea3d6e3                          // fsub          v3.4s, v23.4s, v3.4s
  .long  0x6e35dc37                          // fmul          v23.4s, v1.4s, v21.4s
  .long  0x4e31ce5b                          // fmla          v27.4s, v18.4s, v17.4s
  .long  0x4e20ce57                          // fmla          v23.4s, v18.4s, v0.4s
  .long  0x4e34cf3b                          // fmla          v27.4s, v25.4s, v20.4s
  .long  0x6e20df5c                          // fmul          v28.4s, v26.4s, v0.4s
  .long  0x4e22cf37                          // fmla          v23.4s, v25.4s, v2.4s
  .long  0x6ea0fb60                          // fneg          v0.4s, v27.4s
  .long  0x6e21df41                          // fmul          v1.4s, v26.4s, v1.4s
  .long  0x6e22df5a                          // fmul          v26.4s, v26.4s, v2.4s
  .long  0x4e37cce0                          // fmla          v0.4s, v7.4s, v23.4s
  .long  0x4e23cc9c                          // fmla          v28.4s, v4.4s, v3.4s
  .long  0x4e23cca1                          // fmla          v1.4s, v5.4s, v3.4s
  .long  0x4e23ccda                          // fmla          v26.4s, v6.4s, v3.4s
  .long  0x4e20d663                          // fadd          v3.4s, v19.4s, v0.4s
  .long  0x4e20d622                          // fadd          v2.4s, v17.4s, v0.4s
  .long  0x4e20d680                          // fadd          v0.4s, v20.4s, v0.4s
  .long  0x6e35dc74                          // fmul          v20.4s, v3.4s, v21.4s
  .long  0x4e22ce54                          // fmla          v20.4s, v18.4s, v2.4s
  .long  0x4ea0f471                          // fmin          v17.4s, v3.4s, v0.4s
  .long  0x4e20cf34                          // fmla          v20.4s, v25.4s, v0.4s
  .long  0x4eb1f451                          // fmin          v17.4s, v2.4s, v17.4s
  .long  0x4eb4d457                          // fsub          v23.4s, v2.4s, v20.4s
  .long  0x6ea0ca32                          // fcmge         v18.4s, v17.4s, #0.0
  .long  0x4eb1d691                          // fsub          v17.4s, v20.4s, v17.4s
  .long  0x6e37de97                          // fmul          v23.4s, v20.4s, v23.4s
  .long  0x6e31fef7                          // fdiv          v23.4s, v23.4s, v17.4s
  .long  0x4e20f473                          // fmax          v19.4s, v3.4s, v0.4s
  .long  0x4eb21e59                          // mov           v25.16b, v18.16b
  .long  0x4e37d697                          // fadd          v23.4s, v20.4s, v23.4s
  .long  0x4e33f453                          // fmax          v19.4s, v2.4s, v19.4s
  .long  0x6e771c59                          // bsl           v25.16b, v2.16b, v23.16b
  .long  0x4eb4d462                          // fsub          v2.4s, v3.4s, v20.4s
  .long  0x6e22de82                          // fmul          v2.4s, v20.4s, v2.4s
  .long  0x6e31fc42                          // fdiv          v2.4s, v2.4s, v17.4s
  .long  0x4eb21e57                          // mov           v23.16b, v18.16b
  .long  0x4e22d682                          // fadd          v2.4s, v20.4s, v2.4s
  .long  0x6e621c77                          // bsl           v23.16b, v3.16b, v2.16b
  .long  0x4eb4d403                          // fsub          v3.4s, v0.4s, v20.4s
  .long  0x6e23de83                          // fmul          v3.4s, v20.4s, v3.4s
  .long  0x6e31fc63                          // fdiv          v3.4s, v3.4s, v17.4s
  .long  0x4e23d683                          // fadd          v3.4s, v20.4s, v3.4s
  .long  0x6e631c12                          // bsl           v18.16b, v0.16b, v3.16b
  .long  0x4eb4d61b                          // fsub          v27.4s, v16.4s, v20.4s
  .long  0x4eb4d720                          // fsub          v0.4s, v25.4s, v20.4s
  .long  0x4eb4d6e3                          // fsub          v3.4s, v23.4s, v20.4s
  .long  0x4eb4d651                          // fsub          v17.4s, v18.4s, v20.4s
  .long  0x6eb0e675                          // fcmgt         v21.4s, v19.4s, v16.4s
  .long  0x4eb4d673                          // fsub          v19.4s, v19.4s, v20.4s
  .long  0x6e20df60                          // fmul          v0.4s, v27.4s, v0.4s
  .long  0x6e23df63                          // fmul          v3.4s, v27.4s, v3.4s
  .long  0x6e31df71                          // fmul          v17.4s, v27.4s, v17.4s
  .long  0x6e33fc00                          // fdiv          v0.4s, v0.4s, v19.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb51ea2                          // mov           v2.16b, v21.16b
  .long  0x4eb51ebb                          // mov           v27.16b, v21.16b
  .long  0x4e20d680                          // fadd          v0.4s, v20.4s, v0.4s
  .long  0x4e23d683                          // fadd          v3.4s, v20.4s, v3.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x6f00e416                          // movi          v22.2d, #0x0
  .long  0x6e791c02                          // bsl           v2.16b, v0.16b, v25.16b
  .long  0x6e771c7b                          // bsl           v27.16b, v3.16b, v23.16b
  .long  0x6e721e35                          // bsl           v21.16b, v17.16b, v18.16b
  .long  0x4e36f440                          // fmax          v0.4s, v2.4s, v22.4s
  .long  0x4e36f762                          // fmax          v2.4s, v27.4s, v22.4s
  .long  0x4e36f6a3                          // fmax          v3.4s, v21.4s, v22.4s
  .long  0x4e20d780                          // fadd          v0.4s, v28.4s, v0.4s
  .long  0x4e22d421                          // fadd          v1.4s, v1.4s, v2.4s
  .long  0x4e23d742                          // fadd          v2.4s, v26.4s, v3.4s
  .long  0x4eb0d703                          // fsub          v3.4s, v24.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcover_rgba_8888_aarch64
.globl _sk_srcover_rgba_8888_aarch64
FUNCTION(_sk_srcover_rgba_8888_aarch64)
_sk_srcover_rgba_8888_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020908                          // add           x8, x8, x2, lsl #2
  .long  0xb5000504                          // cbnz          x4, 111c <sk_srcover_rgba_8888_aarch64+0xac>
  .long  0x3dc00104                          // ldr           q4, [x8]
  .long  0x6f00e625                          // movi          v5.2d, #0xff000000ff
  .long  0x6f380486                          // ushr          v6.4s, v4.4s, #8
  .long  0x6f300487                          // ushr          v7.4s, v4.4s, #16
  .long  0x6f280490                          // ushr          v16.4s, v4.4s, #24
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x52a86fe9                          // mov           w9, #0x437f0000
  .long  0x4e251cc6                          // and           v6.16b, v6.16b, v5.16b
  .long  0x4e251cf2                          // and           v18.16b, v7.16b, v5.16b
  .long  0x4e21da07                          // scvtf         v7.4s, v16.4s
  .long  0x4ea3d630                          // fsub          v16.4s, v17.4s, v3.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e251c84                          // and           v4.16b, v4.16b, v5.16b
  .long  0x4e21d8c5                          // scvtf         v5.4s, v6.4s
  .long  0x6e31dc21                          // fmul          v1.4s, v1.4s, v17.4s
  .long  0x4e21d884                          // scvtf         v4.4s, v4.4s
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x4e25ce01                          // fmla          v1.4s, v16.4s, v5.4s
  .long  0x4e21da46                          // scvtf         v6.4s, v18.4s
  .long  0x6e31dc42                          // fmul          v2.4s, v2.4s, v17.4s
  .long  0x6e31dc63                          // fmul          v3.4s, v3.4s, v17.4s
  .long  0x4e24ce00                          // fmla          v0.4s, v16.4s, v4.4s
  .long  0x6e21a831                          // fcvtnu        v17.4s, v1.4s
  .long  0x4e26ce02                          // fmla          v2.4s, v16.4s, v6.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0x6e21a810                          // fcvtnu        v16.4s, v0.4s
  .long  0x4f285631                          // shl           v17.4s, v17.4s, #8
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0x6e21a851                          // fcvtnu        v17.4s, v2.4s
  .long  0x4f305631                          // shl           v17.4s, v17.4s, #16
  .long  0x4eb11e10                          // orr           v16.16b, v16.16b, v17.16b
  .long  0x6e21a871                          // fcvtnu        v17.4s, v3.4s
  .long  0x4f385631                          // shl           v17.4s, v17.4s, #24
  .long  0x4eb11e10                          // orr           v16.16b, v16.16b, v17.16b
  .long  0xb5000284                          // cbnz          x4, 1158 <sk_srcover_rgba_8888_aarch64+0xe8>
  .long  0x3d800110                          // str           q16, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000300                          // b.eq          1184 <sk_srcover_rgba_8888_aarch64+0x114>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x540000c0                          // b.eq          1148 <sk_srcover_rgba_8888_aarch64+0xd8>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffa61                          // b.ne          1084 <sk_srcover_rgba_8888_aarch64+0x14>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4e040fe4                          // dup           v4.4s, wzr
  .long  0x4d408124                          // ld1           {v4.s}[2], [x9]
  .long  0xfd400105                          // ldr           d5, [x8]
  .long  0x6e054084                          // ext           v4.16b, v4.16b, v5.16b, #8
  .long  0x6e044084                          // ext           v4.16b, v4.16b, v4.16b, #8
  .long  0x17ffffcc                          // b             1084 <sk_srcover_rgba_8888_aarch64+0x14>
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000180                          // b.eq          1190 <sk_srcover_rgba_8888_aarch64+0x120>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          117c <sk_srcover_rgba_8888_aarch64+0x10c>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd01                          // b.ne          1110 <sk_srcover_rgba_8888_aarch64+0xa0>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4d008130                          // st1           {v16.s}[2], [x9]
  .long  0xfd000110                          // str           d16, [x8]
  .long  0x17ffffe4                          // b             1110 <sk_srcover_rgba_8888_aarch64+0xa0>
  .long  0x4e040fe4                          // dup           v4.4s, wzr
  .long  0x0d408104                          // ld1           {v4.s}[0], [x8]
  .long  0x17ffffbe                          // b             1084 <sk_srcover_rgba_8888_aarch64+0x14>
  .long  0x0d008110                          // st1           {v16.s}[0], [x8]
  .long  0x17ffffdf                          // b             1110 <sk_srcover_rgba_8888_aarch64+0xa0>

HIDDEN _sk_clamp_0_aarch64
.globl _sk_clamp_0_aarch64
FUNCTION(_sk_clamp_0_aarch64)
_sk_clamp_0_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x4e30f400                          // fmax          v0.4s, v0.4s, v16.4s
  .long  0x4e30f421                          // fmax          v1.4s, v1.4s, v16.4s
  .long  0x4e30f442                          // fmax          v2.4s, v2.4s, v16.4s
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_1_aarch64
.globl _sk_clamp_1_aarch64
FUNCTION(_sk_clamp_1_aarch64)
_sk_clamp_1_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0x4eb0f421                          // fmin          v1.4s, v1.4s, v16.4s
  .long  0x4eb0f442                          // fmin          v2.4s, v2.4s, v16.4s
  .long  0x4eb0f463                          // fmin          v3.4s, v3.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_a_aarch64
.globl _sk_clamp_a_aarch64
FUNCTION(_sk_clamp_a_aarch64)
_sk_clamp_a_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f463                          // fmin          v3.4s, v3.4s, v16.4s
  .long  0x4ea3f400                          // fmin          v0.4s, v0.4s, v3.4s
  .long  0x4ea3f421                          // fmin          v1.4s, v1.4s, v3.4s
  .long  0x4ea3f442                          // fmin          v2.4s, v2.4s, v3.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_a_dst_aarch64
.globl _sk_clamp_a_dst_aarch64
FUNCTION(_sk_clamp_a_dst_aarch64)
_sk_clamp_a_dst_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f4e7                          // fmin          v7.4s, v7.4s, v16.4s
  .long  0x4ea7f484                          // fmin          v4.4s, v4.4s, v7.4s
  .long  0x4ea7f4a5                          // fmin          v5.4s, v5.4s, v7.4s
  .long  0x4ea7f4c6                          // fmin          v6.4s, v6.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_set_rgb_aarch64
.globl _sk_set_rgb_aarch64
FUNCTION(_sk_set_rgb_aarch64)
_sk_set_rgb_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x4ddfc920                          // ld1r          {v0.4s}, [x9], #4
  .long  0x91002108                          // add           x8, x8, #0x8
  .long  0x4d40c902                          // ld1r          {v2.4s}, [x8]
  .long  0x4d40c921                          // ld1r          {v1.4s}, [x9]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_swap_rb_aarch64
.globl _sk_swap_rb_aarch64
FUNCTION(_sk_swap_rb_aarch64)
_sk_swap_rb_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea01c10                          // mov           v16.16b, v0.16b
  .long  0x4ea21c40                          // mov           v0.16b, v2.16b
  .long  0x4eb01e02                          // mov           v2.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_swap_rb_dst_aarch64
.globl _sk_swap_rb_dst_aarch64
FUNCTION(_sk_swap_rb_dst_aarch64)
_sk_swap_rb_dst_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea41c90                          // mov           v16.16b, v4.16b
  .long  0x4ea61cc4                          // mov           v4.16b, v6.16b
  .long  0x4eb01e06                          // mov           v6.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_move_src_dst_aarch64
.globl _sk_move_src_dst_aarch64
FUNCTION(_sk_move_src_dst_aarch64)
_sk_move_src_dst_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea01c04                          // mov           v4.16b, v0.16b
  .long  0x4ea11c25                          // mov           v5.16b, v1.16b
  .long  0x4ea21c46                          // mov           v6.16b, v2.16b
  .long  0x4ea31c67                          // mov           v7.16b, v3.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_move_dst_src_aarch64
.globl _sk_move_dst_src_aarch64
FUNCTION(_sk_move_dst_src_aarch64)
_sk_move_dst_src_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_premul_aarch64
.globl _sk_premul_aarch64
FUNCTION(_sk_premul_aarch64)
_sk_premul_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x6e23dc21                          // fmul          v1.4s, v1.4s, v3.4s
  .long  0x6e23dc42                          // fmul          v2.4s, v2.4s, v3.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_unpremul_aarch64
.globl _sk_unpremul_aarch64
FUNCTION(_sk_unpremul_aarch64)
_sk_unpremul_aarch64:
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea0d870                          // fcmeq         v16.4s, v3.4s, #0.0
  .long  0x6e23fe31                          // fdiv          v17.4s, v17.4s, v3.4s
  .long  0x4e701e30                          // bic           v16.16b, v17.16b, v16.16b
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_from_srgb_aarch64
.globl _sk_from_srgb_aarch64
FUNCTION(_sk_from_srgb_aarch64)
_sk_from_srgb_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a7e648                          // mov           w8, #0x3f320000
  .long  0x7291eb88                          // movk          w8, #0x8f5c
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a76468                          // mov           w8, #0x3b230000
  .long  0x729ae148                          // movk          w8, #0xd70a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7b3c8                          // mov           w8, #0x3d9e0000
  .long  0x72907228                          // movk          w8, #0x8391
  .long  0x6e22dc54                          // fmul          v20.4s, v2.4s, v2.4s
  .long  0x4eb11e35                          // mov           v21.16b, v17.16b
  .long  0x4eb11e37                          // mov           v23.16b, v17.16b
  .long  0x4e22ce11                          // fmla          v17.4s, v16.4s, v2.4s
  .long  0x4eb21e56                          // mov           v22.16b, v18.16b
  .long  0x4eb21e58                          // mov           v24.16b, v18.16b
  .long  0x4e34ce32                          // fmla          v18.4s, v17.4s, v20.4s
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7ac28                          // mov           w8, #0x3d610000
  .long  0x6e20dc13                          // fmul          v19.4s, v0.4s, v0.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4e20ce15                          // fmla          v21.4s, v16.4s, v0.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e21dc34                          // fmul          v20.4s, v1.4s, v1.4s
  .long  0x4e33ceb6                          // fmla          v22.4s, v21.4s, v19.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e21ce17                          // fmla          v23.4s, v16.4s, v1.4s
  .long  0x6e31dc15                          // fmul          v21.4s, v0.4s, v17.4s
  .long  0x6ea0e660                          // fcmgt         v0.4s, v19.4s, v0.4s
  .long  0x6e31dc30                          // fmul          v16.4s, v1.4s, v17.4s
  .long  0x6ea1e661                          // fcmgt         v1.4s, v19.4s, v1.4s
  .long  0x6e31dc51                          // fmul          v17.4s, v2.4s, v17.4s
  .long  0x6ea2e662                          // fcmgt         v2.4s, v19.4s, v2.4s
  .long  0x4e34cef8                          // fmla          v24.4s, v23.4s, v20.4s
  .long  0x6e761ea0                          // bsl           v0.16b, v21.16b, v22.16b
  .long  0x6e781e01                          // bsl           v1.16b, v16.16b, v24.16b
  .long  0x6e721e22                          // bsl           v2.16b, v17.16b, v18.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_from_srgb_dst_aarch64
.globl _sk_from_srgb_dst_aarch64
FUNCTION(_sk_from_srgb_dst_aarch64)
_sk_from_srgb_dst_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a7e648                          // mov           w8, #0x3f320000
  .long  0x7291eb88                          // movk          w8, #0x8f5c
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a76468                          // mov           w8, #0x3b230000
  .long  0x729ae148                          // movk          w8, #0xd70a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7b3c8                          // mov           w8, #0x3d9e0000
  .long  0x72907228                          // movk          w8, #0x8391
  .long  0x6e26dcd4                          // fmul          v20.4s, v6.4s, v6.4s
  .long  0x4eb11e35                          // mov           v21.16b, v17.16b
  .long  0x4eb11e37                          // mov           v23.16b, v17.16b
  .long  0x4e26ce11                          // fmla          v17.4s, v16.4s, v6.4s
  .long  0x4eb21e56                          // mov           v22.16b, v18.16b
  .long  0x4eb21e58                          // mov           v24.16b, v18.16b
  .long  0x4e34ce32                          // fmla          v18.4s, v17.4s, v20.4s
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7ac28                          // mov           w8, #0x3d610000
  .long  0x6e24dc93                          // fmul          v19.4s, v4.4s, v4.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4e24ce15                          // fmla          v21.4s, v16.4s, v4.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e25dcb4                          // fmul          v20.4s, v5.4s, v5.4s
  .long  0x4e33ceb6                          // fmla          v22.4s, v21.4s, v19.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e25ce17                          // fmla          v23.4s, v16.4s, v5.4s
  .long  0x6e31dc95                          // fmul          v21.4s, v4.4s, v17.4s
  .long  0x6ea4e664                          // fcmgt         v4.4s, v19.4s, v4.4s
  .long  0x6e31dcb0                          // fmul          v16.4s, v5.4s, v17.4s
  .long  0x6ea5e665                          // fcmgt         v5.4s, v19.4s, v5.4s
  .long  0x6e31dcd1                          // fmul          v17.4s, v6.4s, v17.4s
  .long  0x6ea6e666                          // fcmgt         v6.4s, v19.4s, v6.4s
  .long  0x4e34cef8                          // fmla          v24.4s, v23.4s, v20.4s
  .long  0x6e761ea4                          // bsl           v4.16b, v21.16b, v22.16b
  .long  0x6e781e05                          // bsl           v5.16b, v16.16b, v24.16b
  .long  0x6e721e26                          // bsl           v6.16b, v17.16b, v18.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_to_srgb_aarch64
.globl _sk_to_srgb_aarch64
FUNCTION(_sk_to_srgb_aarch64)
_sk_to_srgb_aarch64:
  .long  0x52a829c8                          // mov           w8, #0x414e0000
  .long  0x72970a48                          // movk          w8, #0xb852
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52b76408                          // mov           w8, #0xbb200000
  .long  0x729ae728                          // movk          w8, #0xd739
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a77308                          // mov           w8, #0x3b980000
  .long  0x72963508                          // movk          w8, #0xb1a8
  .long  0x6ea1d810                          // frsqrte       v16.4s, v0.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a78c48                          // mov           w8, #0x3c620000
  .long  0x6ea1d834                          // frsqrte       v20.4s, v1.4s
  .long  0x6ea1d855                          // frsqrte       v21.4s, v2.4s
  .long  0x7293f748                          // movk          w8, #0x9fba
  .long  0x6e30de16                          // fmul          v22.4s, v16.4s, v16.4s
  .long  0x6e34de97                          // fmul          v23.4s, v20.4s, v20.4s
  .long  0x6e35deb8                          // fmul          v24.4s, v21.4s, v21.4s
  .long  0x4eb6fc16                          // frsqrts       v22.4s, v0.4s, v22.4s
  .long  0x6e31dc19                          // fmul          v25.4s, v0.4s, v17.4s
  .long  0x6ea0e660                          // fcmgt         v0.4s, v19.4s, v0.4s
  .long  0x4eb7fc37                          // frsqrts       v23.4s, v1.4s, v23.4s
  .long  0x6e31dc3a                          // fmul          v26.4s, v1.4s, v17.4s
  .long  0x6ea1e661                          // fcmgt         v1.4s, v19.4s, v1.4s
  .long  0x4eb8fc58                          // frsqrts       v24.4s, v2.4s, v24.4s
  .long  0x6e31dc51                          // fmul          v17.4s, v2.4s, v17.4s
  .long  0x6ea2e662                          // fcmgt         v2.4s, v19.4s, v2.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a7f208                          // mov           w8, #0x3f900000
  .long  0x72947ae8                          // movk          w8, #0xa3d7
  .long  0x6e36de10                          // fmul          v16.4s, v16.4s, v22.4s
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x6e37de94                          // fmul          v20.4s, v20.4s, v23.4s
  .long  0x4eb31e77                          // mov           v23.16b, v19.16b
  .long  0x6e38deb5                          // fmul          v21.4s, v21.4s, v24.4s
  .long  0x4eb31e78                          // mov           v24.16b, v19.16b
  .long  0x52a7c208                          // mov           w8, #0x3e100000
  .long  0x4e30ce57                          // fmla          v23.4s, v18.4s, v16.4s
  .long  0x4e34ce58                          // fmla          v24.4s, v18.4s, v20.4s
  .long  0x4e35ce53                          // fmla          v19.4s, v18.4s, v21.4s
  .long  0x4eb61ed2                          // mov           v18.16b, v22.16b
  .long  0x7298c988                          // movk          w8, #0xc64c
  .long  0x4e30cef2                          // fmla          v18.4s, v23.4s, v16.4s
  .long  0x4eb61ed7                          // mov           v23.16b, v22.16b
  .long  0x4e35ce76                          // fmla          v22.4s, v19.4s, v21.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e33d610                          // fadd          v16.4s, v16.4s, v19.4s
  .long  0x4e34cf17                          // fmla          v23.4s, v24.4s, v20.4s
  .long  0x4e33d694                          // fadd          v20.4s, v20.4s, v19.4s
  .long  0x4e33d6b3                          // fadd          v19.4s, v21.4s, v19.4s
  .long  0x4ea1da15                          // frecpe        v21.4s, v16.4s
  .long  0x4e35fe10                          // frecps        v16.4s, v16.4s, v21.4s
  .long  0x6e30deb0                          // fmul          v16.4s, v21.4s, v16.4s
  .long  0x4ea1da95                          // frecpe        v21.4s, v20.4s
  .long  0x4e35fe94                          // frecps        v20.4s, v20.4s, v21.4s
  .long  0x6e34deb4                          // fmul          v20.4s, v21.4s, v20.4s
  .long  0x4ea1da75                          // frecpe        v21.4s, v19.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e35fe73                          // frecps        v19.4s, v19.4s, v21.4s
  .long  0x6e33deb3                          // fmul          v19.4s, v21.4s, v19.4s
  .long  0x6e30de50                          // fmul          v16.4s, v18.4s, v16.4s
  .long  0x6e34def2                          // fmul          v18.4s, v23.4s, v20.4s
  .long  0x6e33ded3                          // fmul          v19.4s, v22.4s, v19.4s
  .long  0x6e701f20                          // bsl           v0.16b, v25.16b, v16.16b
  .long  0x6e721f41                          // bsl           v1.16b, v26.16b, v18.16b
  .long  0x6e731e22                          // bsl           v2.16b, v17.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_rgb_to_hsl_aarch64
.globl _sk_rgb_to_hsl_aarch64
FUNCTION(_sk_rgb_to_hsl_aarch64)
_sk_rgb_to_hsl_aarch64:
  .long  0x4e21f410                          // fmax          v16.4s, v0.4s, v1.4s
  .long  0x4ea1f411                          // fmin          v17.4s, v0.4s, v1.4s
  .long  0x6ea1e454                          // fcmgt         v20.4s, v2.4s, v1.4s
  .long  0x4f00f715                          // fmov          v21.4s, #6.000000000000000000e+00
  .long  0x4e22f610                          // fmax          v16.4s, v16.4s, v2.4s
  .long  0x4ea2f631                          // fmin          v17.4s, v17.4s, v2.4s
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x4e341eb4                          // and           v20.16b, v21.16b, v20.16b
  .long  0x4eb1d615                          // fsub          v21.4s, v16.4s, v17.4s
  .long  0x4ea2d433                          // fsub          v19.4s, v1.4s, v2.4s
  .long  0x4ea0d456                          // fsub          v22.4s, v2.4s, v0.4s
  .long  0x4f026417                          // movi          v23.4s, #0x40, lsl #24
  .long  0x6e35fe42                          // fdiv          v2.4s, v18.4s, v21.4s
  .long  0x4ea1d418                          // fsub          v24.4s, v0.4s, v1.4s
  .long  0x4f00f619                          // fmov          v25.4s, #4.000000000000000000e+00
  .long  0x4f0167fa                          // movi          v26.4s, #0x3f, lsl #24
  .long  0x4eb0d6f2                          // fsub          v18.4s, v23.4s, v16.4s
  .long  0x4e36cc57                          // fmla          v23.4s, v2.4s, v22.4s
  .long  0x4e31e616                          // fcmeq         v22.4s, v16.4s, v17.4s
  .long  0x4e20e600                          // fcmeq         v0.4s, v16.4s, v0.4s
  .long  0x4e21e601                          // fcmeq         v1.4s, v16.4s, v1.4s
  .long  0x4e31d610                          // fadd          v16.4s, v16.4s, v17.4s
  .long  0x52a7c548                          // mov           w8, #0x3e2a0000
  .long  0x4e33cc54                          // fmla          v20.4s, v2.4s, v19.4s
  .long  0x4e38cc59                          // fmla          v25.4s, v2.4s, v24.4s
  .long  0x6e3ade02                          // fmul          v2.4s, v16.4s, v26.4s
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb1d651                          // fsub          v17.4s, v18.4s, v17.4s
  .long  0x6ebae452                          // fcmgt         v18.4s, v2.4s, v26.4s
  .long  0x6e791ee1                          // bsl           v1.16b, v23.16b, v25.16b
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x6e701e32                          // bsl           v18.16b, v17.16b, v16.16b
  .long  0x6e611e80                          // bsl           v0.16b, v20.16b, v1.16b
  .long  0x6e32fea1                          // fdiv          v1.4s, v21.4s, v18.4s
  .long  0x6e33dc00                          // fmul          v0.4s, v0.4s, v19.4s
  .long  0x4e761c00                          // bic           v0.16b, v0.16b, v22.16b
  .long  0x4e761c21                          // bic           v1.16b, v1.16b, v22.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_hsl_to_rgb_aarch64
.globl _sk_hsl_to_rgb_aarch64
FUNCTION(_sk_hsl_to_rgb_aarch64)
_sk_hsl_to_rgb_aarch64:
  .long  0x52a7d548                          // mov           w8, #0x3eaa0000
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x4e040d14                          // dup           v20.4s, w8
  .long  0x52a7e548                          // mov           w8, #0x3f2a0000
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x4f0167f1                          // movi          v17.4s, #0x3f, lsl #24
  .long  0x6e22dc32                          // fmul          v18.4s, v1.4s, v2.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x52b7d548                          // mov           w8, #0xbeaa0000
  .long  0x4ea0d830                          // fcmeq         v16.4s, v1.4s, #0.0
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x6e31e45a                          // fcmge         v26.4s, v2.4s, v17.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x4e219819                          // frintm        v25.4s, v0.4s
  .long  0x6e721c3a                          // bsl           v26.16b, v1.16b, v18.16b
  .long  0x4e34d401                          // fadd          v1.4s, v0.4s, v20.4s
  .long  0x4eb9d419                          // fsub          v25.4s, v0.4s, v25.4s
  .long  0x4e38d400                          // fadd          v0.4s, v0.4s, v24.4s
  .long  0x4e22d754                          // fadd          v20.4s, v26.4s, v2.4s
  .long  0x4e219838                          // frintm        v24.4s, v1.4s
  .long  0x4f026413                          // movi          v19.4s, #0x40, lsl #24
  .long  0x4f00f715                          // fmov          v21.4s, #6.000000000000000000e+00
  .long  0x4e21981b                          // frintm        v27.4s, v0.4s
  .long  0x6ea0fa9c                          // fneg          v28.4s, v20.4s
  .long  0x4eb8d421                          // fsub          v1.4s, v1.4s, v24.4s
  .long  0x4f00f616                          // fmov          v22.4s, #4.000000000000000000e+00
  .long  0x4ebbd418                          // fsub          v24.4s, v0.4s, v27.4s
  .long  0x4e22ce7c                          // fmla          v28.4s, v19.4s, v2.4s
  .long  0x6e35dc20                          // fmul          v0.4s, v1.4s, v21.4s
  .long  0x6e35df32                          // fmul          v18.4s, v25.4s, v21.4s
  .long  0x6e35df13                          // fmul          v19.4s, v24.4s, v21.4s
  .long  0x4ebcd695                          // fsub          v21.4s, v20.4s, v28.4s
  .long  0x4ea0d6db                          // fsub          v27.4s, v22.4s, v0.4s
  .long  0x4ebc1f9d                          // mov           v29.16b, v28.16b
  .long  0x4e3bcebd                          // fmla          v29.4s, v21.4s, v27.4s
  .long  0x4ebc1f9b                          // mov           v27.16b, v28.16b
  .long  0x4eb2d6da                          // fsub          v26.4s, v22.4s, v18.4s
  .long  0x4e20cebb                          // fmla          v27.4s, v21.4s, v0.4s
  .long  0x4ebc1f80                          // mov           v0.16b, v28.16b
  .long  0x4e3acea0                          // fmla          v0.4s, v21.4s, v26.4s
  .long  0x4ebc1f9a                          // mov           v26.16b, v28.16b
  .long  0x4eb3d6d6                          // fsub          v22.4s, v22.4s, v19.4s
  .long  0x4e32ceba                          // fmla          v26.4s, v21.4s, v18.4s
  .long  0x4ebc1f92                          // mov           v18.16b, v28.16b
  .long  0x52a7c548                          // mov           w8, #0x3e2a0000
  .long  0x4e36ceb2                          // fmla          v18.4s, v21.4s, v22.4s
  .long  0x6e37e436                          // fcmge         v22.4s, v1.4s, v23.4s
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x6e7d1f96                          // bsl           v22.16b, v28.16b, v29.16b
  .long  0x6e37e73d                          // fcmge         v29.4s, v25.4s, v23.4s
  .long  0x6e37e717                          // fcmge         v23.4s, v24.4s, v23.4s
  .long  0x6e601f9d                          // bsl           v29.16b, v28.16b, v0.16b
  .long  0x4e040d1e                          // dup           v30.4s, w8
  .long  0x6e721f97                          // bsl           v23.16b, v28.16b, v18.16b
  .long  0x4e33cebc                          // fmla          v28.4s, v21.4s, v19.4s
  .long  0x6e31e732                          // fcmge         v18.4s, v25.4s, v17.4s
  .long  0x6e31e435                          // fcmge         v21.4s, v1.4s, v17.4s
  .long  0x6e31e711                          // fcmge         v17.4s, v24.4s, v17.4s
  .long  0x6e3ee718                          // fcmge         v24.4s, v24.4s, v30.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e741ef1                          // bsl           v17.16b, v23.16b, v20.16b
  .long  0x6e3ee733                          // fcmge         v19.4s, v25.4s, v30.4s
  .long  0x6e3ee439                          // fcmge         v25.4s, v1.4s, v30.4s
  .long  0x6e741ed5                          // bsl           v21.16b, v22.16b, v20.16b
  .long  0x6e741fb2                          // bsl           v18.16b, v29.16b, v20.16b
  .long  0x6e7c1e38                          // bsl           v24.16b, v17.16b, v28.16b
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb01e01                          // mov           v1.16b, v16.16b
  .long  0x6e7b1eb9                          // bsl           v25.16b, v21.16b, v27.16b
  .long  0x6e7a1e53                          // bsl           v19.16b, v18.16b, v26.16b
  .long  0x6e781c50                          // bsl           v16.16b, v2.16b, v24.16b
  .long  0x6e791c40                          // bsl           v0.16b, v2.16b, v25.16b
  .long  0x6e731c41                          // bsl           v1.16b, v2.16b, v19.16b
  .long  0x4eb01e02                          // mov           v2.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_scale_1_float_aarch64
.globl _sk_scale_1_float_aarch64
FUNCTION(_sk_scale_1_float_aarch64)
_sk_scale_1_float_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4f909000                          // fmul          v0.4s, v0.4s, v16.s[0]
  .long  0x4f909021                          // fmul          v1.4s, v1.4s, v16.s[0]
  .long  0x4f909042                          // fmul          v2.4s, v2.4s, v16.s[0]
  .long  0x4f909063                          // fmul          v3.4s, v3.4s, v16.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_scale_u8_aarch64
.globl _sk_scale_u8_aarch64
FUNCTION(_sk_scale_u8_aarch64)
_sk_scale_u8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50002e4                          // cbnz          x4, 1744 <sk_scale_u8_aarch64+0x68>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d30                          // mov           v16.h[0], w9
  .long  0x4e061d50                          // mov           v16.h[1], w10
  .long  0x4e0a1d70                          // mov           v16.h[2], w11
  .long  0x4e0e1d10                          // mov           v16.h[3], w8
  .long  0x2f07b7f0                          // bic           v16.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x2f10a610                          // uxtl          v16.4s, v16.4h
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x6e21da10                          // ucvtf         v16.4s, v16.4s
  .long  0x6e31de10                          // fmul          v16.4s, v16.4s, v17.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          1790 <sk_scale_u8_aarch64+0xb4>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e410                          // movi          d16, #0x0
  .long  0x540000c0                          // b.eq          1770 <sk_scale_u8_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd61                          // b.ne          170c <sk_scale_u8_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x4e0a1d30                          // mov           v16.h[2], w9
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x39400508                          // ldrb          w8, [x8, #1]
  .long  0x4e041d31                          // mov           v17.s[0], w9
  .long  0x4e0c1d11                          // mov           v17.s[1], w8
  .long  0x0e401a31                          // uzp1          v17.4h, v17.4h, v0.4h
  .long  0x2e112210                          // ext           v16.8b, v16.8b, v17.8b, #4
  .long  0x2e102210                          // ext           v16.8b, v16.8b, v16.8b, #4
  .long  0x17ffffe0                          // b             170c <sk_scale_u8_aarch64+0x30>
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x4e021d10                          // mov           v16.h[0], w8
  .long  0x17ffffdc                          // b             170c <sk_scale_u8_aarch64+0x30>

HIDDEN _sk_lerp_1_float_aarch64
.globl _sk_lerp_1_float_aarch64
FUNCTION(_sk_lerp_1_float_aarch64)
_sk_lerp_1_float_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea4d411                          // fsub          v17.4s, v0.4s, v4.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea5d432                          // fsub          v18.4s, v1.4s, v5.4s
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4f901220                          // fmla          v0.4s, v17.4s, v16.s[0]
  .long  0x4ea6d451                          // fsub          v17.4s, v2.4s, v6.4s
  .long  0x4f901241                          // fmla          v1.4s, v18.4s, v16.s[0]
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea7d472                          // fsub          v18.4s, v3.4s, v7.4s
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0x4f901222                          // fmla          v2.4s, v17.4s, v16.s[0]
  .long  0x4f901243                          // fmla          v3.4s, v18.4s, v16.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_lerp_u8_aarch64
.globl _sk_lerp_u8_aarch64
FUNCTION(_sk_lerp_u8_aarch64)
_sk_lerp_u8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50003e4                          // cbnz          x4, 1864 <sk_lerp_u8_aarch64+0x88>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d30                          // mov           v16.h[0], w9
  .long  0x4e061d50                          // mov           v16.h[1], w10
  .long  0x4e0a1d70                          // mov           v16.h[2], w11
  .long  0x4e0e1d10                          // mov           v16.h[3], w8
  .long  0x2f07b7f0                          // bic           v16.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x4ea4d411                          // fsub          v17.4s, v0.4s, v4.4s
  .long  0x2f10a600                          // uxtl          v0.4s, v16.4h
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x6e30dc10                          // fmul          v16.4s, v0.4s, v16.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea5d432                          // fsub          v18.4s, v1.4s, v5.4s
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4e31ce00                          // fmla          v0.4s, v16.4s, v17.4s
  .long  0x4ea6d451                          // fsub          v17.4s, v2.4s, v6.4s
  .long  0x4e32ce01                          // fmla          v1.4s, v16.4s, v18.4s
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea7d472                          // fsub          v18.4s, v3.4s, v7.4s
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0x4e31ce02                          // fmla          v2.4s, v16.4s, v17.4s
  .long  0x4e32ce03                          // fmla          v3.4s, v16.4s, v18.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          18b0 <sk_lerp_u8_aarch64+0xd4>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e410                          // movi          d16, #0x0
  .long  0x540000c0                          // b.eq          1890 <sk_lerp_u8_aarch64+0xb4>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffc61                          // b.ne          180c <sk_lerp_u8_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x4e0a1d30                          // mov           v16.h[2], w9
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x39400508                          // ldrb          w8, [x8, #1]
  .long  0x4e041d31                          // mov           v17.s[0], w9
  .long  0x4e0c1d11                          // mov           v17.s[1], w8
  .long  0x0e401a31                          // uzp1          v17.4h, v17.4h, v0.4h
  .long  0x2e112210                          // ext           v16.8b, v16.8b, v17.8b, #4
  .long  0x2e102210                          // ext           v16.8b, v16.8b, v16.8b, #4
  .long  0x17ffffd8                          // b             180c <sk_lerp_u8_aarch64+0x30>
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x4e021d10                          // mov           v16.h[0], w8
  .long  0x17ffffd4                          // b             180c <sk_lerp_u8_aarch64+0x30>

HIDDEN _sk_lerp_565_aarch64
.globl _sk_lerp_565_aarch64
FUNCTION(_sk_lerp_565_aarch64)
_sk_lerp_565_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0xb50005c4                          // cbnz          x4, 1984 <sk_lerp_565_aarch64+0xc4>
  .long  0xfd400110                          // ldr           d16, [x8]
  .long  0x321b17e8                          // orr           w8, wzr, #0x7e0
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a6f088                          // mov           w8, #0x37840000
  .long  0x2f10a610                          // uxtl          v16.4s, v16.4h
  .long  0x4f072711                          // movi          v17.4s, #0xf8, lsl #8
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4f0007f3                          // movi          v19.4s, #0x1f
  .long  0x4e311e11                          // and           v17.16b, v16.16b, v17.16b
  .long  0x4e331e13                          // and           v19.16b, v16.16b, v19.16b
  .long  0x4e321e10                          // and           v16.16b, v16.16b, v18.16b
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7a088                          // mov           w8, #0x3d040000
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4e21da31                          // scvtf         v17.4s, v17.4s
  .long  0x6e32de31                          // fmul          v17.4s, v17.4s, v18.4s
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a74048                          // mov           w8, #0x3a020000
  .long  0x72810428                          // movk          w8, #0x821
  .long  0x4ea4d414                          // fsub          v20.4s, v0.4s, v4.4s
  .long  0x4e21da60                          // scvtf         v0.4s, v19.4s
  .long  0x6e32dc12                          // fmul          v18.4s, v0.4s, v18.4s
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e20de10                          // fmul          v16.4s, v16.4s, v0.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4e34ce20                          // fmla          v0.4s, v17.4s, v20.4s
  .long  0x4ea7d463                          // fsub          v3.4s, v3.4s, v7.4s
  .long  0x4ea71cf4                          // mov           v20.16b, v7.16b
  .long  0x4ea5d433                          // fsub          v19.4s, v1.4s, v5.4s
  .long  0x4ea6d441                          // fsub          v1.4s, v2.4s, v6.4s
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4e23ce34                          // fmla          v20.4s, v17.4s, v3.4s
  .long  0x4ea71cf1                          // mov           v17.16b, v7.16b
  .long  0x4e21ce42                          // fmla          v2.4s, v18.4s, v1.4s
  .long  0x4e23ce51                          // fmla          v17.4s, v18.4s, v3.4s
  .long  0x4ea71cf2                          // mov           v18.16b, v7.16b
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e23ce12                          // fmla          v18.4s, v16.4s, v3.4s
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4e31f643                          // fmax          v3.4s, v18.4s, v17.4s
  .long  0x4e33ce01                          // fmla          v1.4s, v16.4s, v19.4s
  .long  0x4e23f683                          // fmax          v3.4s, v20.4s, v3.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          19d0 <sk_lerp_565_aarch64+0x110>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e410                          // movi          d16, #0x0
  .long  0x540000c0                          // b.eq          19b0 <sk_lerp_565_aarch64+0xf0>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fff9a1                          // b.ne          18d4 <sk_lerp_565_aarch64+0x14>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x0d405130                          // ld1           {v16.h}[2], [x9]
  .long  0x79400109                          // ldrh          w9, [x8]
  .long  0x79400508                          // ldrh          w8, [x8, #2]
  .long  0x4e041d31                          // mov           v17.s[0], w9
  .long  0x4e0c1d11                          // mov           v17.s[1], w8
  .long  0x0e401a31                          // uzp1          v17.4h, v17.4h, v0.4h
  .long  0x2e112210                          // ext           v16.8b, v16.8b, v17.8b, #4
  .long  0x2e102210                          // ext           v16.8b, v16.8b, v16.8b, #4
  .long  0x17ffffc2                          // b             18d4 <sk_lerp_565_aarch64+0x14>
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x0d404110                          // ld1           {v16.h}[0], [x8]
  .long  0x17ffffbf                          // b             18d4 <sk_lerp_565_aarch64+0x14>

HIDDEN _sk_load_tables_aarch64
.globl _sk_load_tables_aarch64
FUNCTION(_sk_load_tables_aarch64)
_sk_load_tables_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0x8b020929                          // add           x9, x9, x2, lsl #2
  .long  0xb50006e4                          // cbnz          x4, 1ac4 <sk_load_tables_aarch64+0xe8>
  .long  0x3dc00122                          // ldr           q2, [x9]
  .long  0xa940a909                          // ldp           x9, x10, [x8, #8]
  .long  0x6f00e620                          // movi          v0.2d, #0xff000000ff
  .long  0x6f380441                          // ushr          v1.4s, v2.4s, #8
  .long  0x4e201c50                          // and           v16.16b, v2.16b, v0.16b
  .long  0x4e201c21                          // and           v1.16b, v1.16b, v0.16b
  .long  0x1e26020e                          // fmov          w14, s16
  .long  0xf9400d08                          // ldr           x8, [x8, #24]
  .long  0x6f300443                          // ushr          v3.4s, v2.4s, #16
  .long  0x1e260032                          // fmov          w18, s1
  .long  0x8b2e492e                          // add           x14, x9, w14, uxtw #2
  .long  0x52a7700b                          // mov           w11, #0x3b800000
  .long  0x4e201c63                          // and           v3.16b, v3.16b, v0.16b
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x8b324952                          // add           x18, x10, w18, uxtw #2
  .long  0x7290102b                          // movk          w11, #0x8081
  .long  0x0e0c3c2f                          // mov           w15, v1.s[1]
  .long  0x0e143c30                          // mov           w16, v1.s[2]
  .long  0x0e1c3c31                          // mov           w17, v1.s[3]
  .long  0x0d408241                          // ld1           {v1.s}[0], [x18]
  .long  0x4e040d71                          // dup           v17.4s, w11
  .long  0x0e0c3e0b                          // mov           w11, v16.s[1]
  .long  0x1e26006e                          // fmov          w14, s3
  .long  0x6f280442                          // ushr          v2.4s, v2.4s, #24
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0xbc705952                          // ldr           s18, [x10, w16, uxtw #2]
  .long  0x0e143c70                          // mov           w16, v3.s[2]
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x8b2e490e                          // add           x14, x8, w14, uxtw #2
  .long  0x8b2b492b                          // add           x11, x9, w11, uxtw #2
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0xbc6c5930                          // ldr           s16, [x9, w12, uxtw #2]
  .long  0x0e0c3c6c                          // mov           w12, v3.s[1]
  .long  0xbc705913                          // ldr           s19, [x8, w16, uxtw #2]
  .long  0x0e1c3c70                          // mov           w16, v3.s[3]
  .long  0x6e31dc43                          // fmul          v3.4s, v2.4s, v17.4s
  .long  0x0d4081c2                          // ld1           {v2.s}[0], [x14]
  .long  0x0d409160                          // ld1           {v0.s}[1], [x11]
  .long  0x8b2f494b                          // add           x11, x10, w15, uxtw #2
  .long  0x0d409161                          // ld1           {v1.s}[1], [x11]
  .long  0x8b2c490b                          // add           x11, x8, w12, uxtw #2
  .long  0x0d409162                          // ld1           {v2.s}[1], [x11]
  .long  0x6e140600                          // mov           v0.s[2], v16.s[0]
  .long  0xbc6d5930                          // ldr           s16, [x9, w13, uxtw #2]
  .long  0x6e140641                          // mov           v1.s[2], v18.s[0]
  .long  0xbc715951                          // ldr           s17, [x10, w17, uxtw #2]
  .long  0xbc705912                          // ldr           s18, [x8, w16, uxtw #2]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x6e140662                          // mov           v2.s[2], v19.s[0]
  .long  0x6e1c0600                          // mov           v0.s[3], v16.s[0]
  .long  0x6e1c0621                          // mov           v1.s[3], v17.s[0]
  .long  0x6e1c0642                          // mov           v2.s[3], v18.s[0]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x1200048a                          // and           w10, w4, #0x3
  .long  0x7100055f                          // cmp           w10, #0x1
  .long  0x540001a0                          // b.eq          1b00 <sk_load_tables_aarch64+0x124>  // b.none
  .long  0x7100095f                          // cmp           w10, #0x2
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0x540000c0                          // b.eq          1af0 <sk_load_tables_aarch64+0x114>  // b.none
  .long  0x71000d5f                          // cmp           w10, #0x3
  .long  0x54fff881                          // b.ne          19f0 <sk_load_tables_aarch64+0x14>  // b.any
  .long  0x9100212a                          // add           x10, x9, #0x8
  .long  0x4e040fe2                          // dup           v2.4s, wzr
  .long  0x4d408142                          // ld1           {v2.s}[2], [x10]
  .long  0xfd400120                          // ldr           d0, [x9]
  .long  0x6e004040                          // ext           v0.16b, v2.16b, v0.16b, #8
  .long  0x6e004002                          // ext           v2.16b, v0.16b, v0.16b, #8
  .long  0x17ffffbd                          // b             19f0 <sk_load_tables_aarch64+0x14>
  .long  0x4e040fe2                          // dup           v2.4s, wzr
  .long  0x0d408122                          // ld1           {v2.s}[0], [x9]
  .long  0x17ffffba                          // b             19f0 <sk_load_tables_aarch64+0x14>

HIDDEN _sk_load_tables_u16_be_aarch64
.globl _sk_load_tables_u16_be_aarch64
FUNCTION(_sk_load_tables_u16_be_aarch64)
_sk_load_tables_u16_be_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0x8b020d29                          // add           x9, x9, x2, lsl #3
  .long  0xb5000744                          // cbnz          x4, 1c00 <sk_load_tables_u16_be_aarch64+0xf4>
  .long  0x0c400520                          // ld4           {v0.4h-v3.4h}, [x9]
  .long  0xa940a909                          // ldp           x9, x10, [x8, #8]
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x52a6f00b                          // mov           w11, #0x37800000
  .long  0x7280100b                          // movk          w11, #0x80
  .long  0x2f10a410                          // uxtl          v16.4s, v0.4h
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0xf9400d08                          // ldr           x8, [x8, #24]
  .long  0x4e040d71                          // dup           v17.4s, w11
  .long  0x0e0c3e0b                          // mov           w11, v16.s[1]
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0x1e26020e                          // fmov          w14, s16
  .long  0x2f10a430                          // uxtl          v16.4s, v1.4h
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x0e0c3e0f                          // mov           w15, v16.s[1]
  .long  0xbc6c5932                          // ldr           s18, [x9, w12, uxtw #2]
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0xbc6d5933                          // ldr           s19, [x9, w13, uxtw #2]
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0x8b2e492e                          // add           x14, x9, w14, uxtw #2
  .long  0x8b2b4929                          // add           x9, x9, w11, uxtw #2
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x2f10a450                          // uxtl          v16.4s, v2.4h
  .long  0x0f185474                          // shl           v20.4h, v3.4h, #8
  .long  0x2f180462                          // ushr          v2.4h, v3.4h, #8
  .long  0x0ea21e82                          // orr           v2.8b, v20.8b, v2.8b
  .long  0x8b2b494b                          // add           x11, x10, w11, uxtw #2
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x1e26020e                          // fmov          w14, s16
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x0d408161                          // ld1           {v1.s}[0], [x11]
  .long  0x8b2e490b                          // add           x11, x8, w14, uxtw #2
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e31dc43                          // fmul          v3.4s, v2.4s, v17.4s
  .long  0x0d408162                          // ld1           {v2.s}[0], [x11]
  .long  0x8b2f494f                          // add           x15, x10, w15, uxtw #2
  .long  0xbc6c5955                          // ldr           s21, [x10, w12, uxtw #2]
  .long  0xbc6d5956                          // ldr           s22, [x10, w13, uxtw #2]
  .long  0x0e0c3e0a                          // mov           w10, v16.s[1]
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0x8b2a4909                          // add           x9, x8, w10, uxtw #2
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0xbc6c5910                          // ldr           s16, [x8, w12, uxtw #2]
  .long  0x0d4091e1                          // ld1           {v1.s}[1], [x15]
  .long  0x0d409122                          // ld1           {v2.s}[1], [x9]
  .long  0xbc6d5911                          // ldr           s17, [x8, w13, uxtw #2]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x6e140640                          // mov           v0.s[2], v18.s[0]
  .long  0x6e1406a1                          // mov           v1.s[2], v21.s[0]
  .long  0x6e140602                          // mov           v2.s[2], v16.s[0]
  .long  0x6e1c0660                          // mov           v0.s[3], v19.s[0]
  .long  0x6e1c06c1                          // mov           v1.s[3], v22.s[0]
  .long  0x6e1c0622                          // mov           v2.s[3], v17.s[0]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d606120                          // ld4           {v0.h-v3.h}[0], [x9]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fff8c0                          // b.eq          1b20 <sk_load_tables_u16_be_aarch64+0x14>  // b.none
  .long  0x9100212a                          // add           x10, x9, #0x8
  .long  0x0d606940                          // ld4           {v0.h-v3.h}[1], [x10]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fff843                          // b.cc          1b20 <sk_load_tables_u16_be_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91004129                          // add           x9, x9, #0x10
  .long  0x0d607120                          // ld4           {v0.h-v3.h}[2], [x9]
  .long  0x17ffffbf                          // b             1b20 <sk_load_tables_u16_be_aarch64+0x14>

HIDDEN _sk_load_tables_rgb_u16_be_aarch64
.globl _sk_load_tables_rgb_u16_be_aarch64
FUNCTION(_sk_load_tables_rgb_u16_be_aarch64)
_sk_load_tables_rgb_u16_be_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x321f07ea                          // orr           w10, wzr, #0x6
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0x9b0a2449                          // madd          x9, x2, x10, x9
  .long  0xb5000664                          // cbnz          x4, 1d04 <sk_load_tables_rgb_u16_be_aarch64+0xdc>
  .long  0x0c404520                          // ld3           {v0.4h-v2.4h}, [x9]
  .long  0xa940a909                          // ldp           x9, x10, [x8, #8]
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f10a403                          // uxtl          v3.4s, v0.4h
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0xf9400d0b                          // ldr           x11, [x8, #24]
  .long  0x0e0c3c68                          // mov           w8, v3.s[1]
  .long  0x0e143c6c                          // mov           w12, v3.s[2]
  .long  0x0e1c3c6d                          // mov           w13, v3.s[3]
  .long  0x1e26006e                          // fmov          w14, s3
  .long  0x2f10a423                          // uxtl          v3.4s, v1.4h
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0xbc6c5930                          // ldr           s16, [x9, w12, uxtw #2]
  .long  0xbc6d5931                          // ldr           s17, [x9, w13, uxtw #2]
  .long  0x8b2e492e                          // add           x14, x9, w14, uxtw #2
  .long  0x8b284928                          // add           x8, x9, w8, uxtw #2
  .long  0x1e260069                          // fmov          w9, s3
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x8b294949                          // add           x9, x10, w9, uxtw #2
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x0e143c4e                          // mov           w14, v2.s[2]
  .long  0x0d408121                          // ld1           {v1.s}[0], [x9]
  .long  0xbc6e5972                          // ldr           s18, [x11, w14, uxtw #2]
  .long  0x1e26004e                          // fmov          w14, s2
  .long  0x0e0c3c6f                          // mov           w15, v3.s[1]
  .long  0x0e143c6c                          // mov           w12, v3.s[2]
  .long  0x8b2e496e                          // add           x14, x11, w14, uxtw #2
  .long  0x0e1c3c6d                          // mov           w13, v3.s[3]
  .long  0xbc6c5943                          // ldr           s3, [x10, w12, uxtw #2]
  .long  0x0e0c3c4c                          // mov           w12, v2.s[1]
  .long  0x0e1c3c49                          // mov           w9, v2.s[3]
  .long  0x0d4081c2                          // ld1           {v2.s}[0], [x14]
  .long  0x0d409100                          // ld1           {v0.s}[1], [x8]
  .long  0x8b2f4948                          // add           x8, x10, w15, uxtw #2
  .long  0x0d409101                          // ld1           {v1.s}[1], [x8]
  .long  0x8b2c4968                          // add           x8, x11, w12, uxtw #2
  .long  0x0d409102                          // ld1           {v2.s}[1], [x8]
  .long  0x6e140600                          // mov           v0.s[2], v16.s[0]
  .long  0xbc6d5950                          // ldr           s16, [x10, w13, uxtw #2]
  .long  0x6e140461                          // mov           v1.s[2], v3.s[0]
  .long  0xbc695963                          // ldr           s3, [x11, w9, uxtw #2]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e140642                          // mov           v2.s[2], v18.s[0]
  .long  0x6e1c0620                          // mov           v0.s[3], v17.s[0]
  .long  0x6e1c0601                          // mov           v1.s[3], v16.s[0]
  .long  0x6e1c0462                          // mov           v2.s[3], v3.s[0]
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x0d406120                          // ld3           {v0.h-v2.h}[0], [x9]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fff9a0                          // b.eq          1c40 <sk_load_tables_rgb_u16_be_aarch64+0x18>  // b.none
  .long  0x9100192a                          // add           x10, x9, #0x6
  .long  0x0d406940                          // ld3           {v0.h-v2.h}[1], [x10]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fff923                          // b.cc          1c40 <sk_load_tables_rgb_u16_be_aarch64+0x18>  // b.lo, b.ul, b.last
  .long  0x91003129                          // add           x9, x9, #0xc
  .long  0x0d407120                          // ld3           {v0.h-v2.h}[2], [x9]
  .long  0x17ffffc6                          // b             1c40 <sk_load_tables_rgb_u16_be_aarch64+0x18>

HIDDEN _sk_byte_tables_aarch64
.globl _sk_byte_tables_aarch64
FUNCTION(_sk_byte_tables_aarch64)
_sk_byte_tables_aarch64:
  .long  0xd100c3ff                          // sub           sp, sp, #0x30
  .long  0xaa0103e8                          // mov           x8, x1
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xa90157f6                          // stp           x22, x21, [sp, #16]
  .long  0xa9024ff4                          // stp           x20, x19, [sp, #32]
  .long  0xf90007e9                          // str           x9, [sp, #8]
  .long  0xf8410429                          // ldr           x9, [x1], #16
  .long  0x52a86fea                          // mov           w10, #0x437f0000
  .long  0x4e040d51                          // dup           v17.4s, w10
  .long  0x52a7700b                          // mov           w11, #0x3b800000
  .long  0xa9405933                          // ldp           x19, x22, [x9]
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x7290102b                          // movk          w11, #0x8081
  .long  0x6e21a800                          // fcvtnu        v0.4s, v0.4s
  .long  0x4e040d70                          // dup           v16.4s, w11
  .long  0x0e0c3c0a                          // mov           w10, v0.s[1]
  .long  0x0e143c0b                          // mov           w11, v0.s[2]
  .long  0x0e1c3c0c                          // mov           w12, v0.s[3]
  .long  0x1e26000d                          // fmov          w13, s0
  .long  0x386d4a6d                          // ldrb          w13, [x19, w13, uxtw]
  .long  0x386a4a6a                          // ldrb          w10, [x19, w10, uxtw]
  .long  0x386b4a6b                          // ldrb          w11, [x19, w11, uxtw]
  .long  0x386c4a6c                          // ldrb          w12, [x19, w12, uxtw]
  .long  0xa9412533                          // ldp           x19, x9, [x9, #16]
  .long  0x6e31dc42                          // fmul          v2.4s, v2.4s, v17.4s
  .long  0x6e31dc21                          // fmul          v1.4s, v1.4s, v17.4s
  .long  0x6e31dc63                          // fmul          v3.4s, v3.4s, v17.4s
  .long  0x6e21a842                          // fcvtnu        v2.4s, v2.4s
  .long  0x6e21a821                          // fcvtnu        v1.4s, v1.4s
  .long  0x6e21a863                          // fcvtnu        v3.4s, v3.4s
  .long  0x0e0c3c52                          // mov           w18, v2.s[1]
  .long  0x0e143c45                          // mov           w5, v2.s[2]
  .long  0x0e1c3c46                          // mov           w6, v2.s[3]
  .long  0x1e260047                          // fmov          w7, s2
  .long  0x1e260031                          // fmov          w17, s1
  .long  0x38674a67                          // ldrb          w7, [x19, w7, uxtw]
  .long  0x38724a72                          // ldrb          w18, [x19, w18, uxtw]
  .long  0x38654a65                          // ldrb          w5, [x19, w5, uxtw]
  .long  0x38664a66                          // ldrb          w6, [x19, w6, uxtw]
  .long  0x1e260073                          // fmov          w19, s3
  .long  0x0e0c3c2e                          // mov           w14, v1.s[1]
  .long  0x0e0c3c74                          // mov           w20, v3.s[1]
  .long  0x38714ad1                          // ldrb          w17, [x22, w17, uxtw]
  .long  0x38734933                          // ldrb          w19, [x9, w19, uxtw]
  .long  0x0e143c2f                          // mov           w15, v1.s[2]
  .long  0x0e1c3c30                          // mov           w16, v1.s[3]
  .long  0x0e143c75                          // mov           w21, v3.s[2]
  .long  0x386e4ace                          // ldrb          w14, [x22, w14, uxtw]
  .long  0x38744934                          // ldrb          w20, [x9, w20, uxtw]
  .long  0x386f4acf                          // ldrb          w15, [x22, w15, uxtw]
  .long  0x38704ad0                          // ldrb          w16, [x22, w16, uxtw]
  .long  0x0e1c3c76                          // mov           w22, v3.s[3]
  .long  0x38754935                          // ldrb          w21, [x9, w21, uxtw]
  .long  0x38764929                          // ldrb          w9, [x9, w22, uxtw]
  .long  0x4e021da0                          // mov           v0.h[0], w13
  .long  0x4e021e21                          // mov           v1.h[0], w17
  .long  0x4e021ce2                          // mov           v2.h[0], w7
  .long  0x4e021e63                          // mov           v3.h[0], w19
  .long  0x4e061d40                          // mov           v0.h[1], w10
  .long  0x4e061dc1                          // mov           v1.h[1], w14
  .long  0x4e061e42                          // mov           v2.h[1], w18
  .long  0x4e061e83                          // mov           v3.h[1], w20
  .long  0x4e0a1d60                          // mov           v0.h[2], w11
  .long  0x4e0a1de1                          // mov           v1.h[2], w15
  .long  0x4e0a1ca2                          // mov           v2.h[2], w5
  .long  0x4e0a1ea3                          // mov           v3.h[2], w21
  .long  0x4e0e1d80                          // mov           v0.h[3], w12
  .long  0x4e0e1e01                          // mov           v1.h[3], w16
  .long  0x4e0e1cc2                          // mov           v2.h[3], w6
  .long  0x4e0e1d23                          // mov           v3.h[3], w9
  .long  0xf9400507                          // ldr           x7, [x8, #8]
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f07b7e3                          // bic           v3.4h, #0xff, lsl #8
  .long  0xa9424ff4                          // ldp           x20, x19, [sp, #32]
  .long  0xa94157f6                          // ldp           x22, x21, [sp, #16]
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x2f10a463                          // uxtl          v3.4s, v3.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e21d863                          // ucvtf         v3.4s, v3.4s
  .long  0x6e30dc00                          // fmul          v0.4s, v0.4s, v16.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0x6e30dc63                          // fmul          v3.4s, v3.4s, v16.4s
  .long  0x9100c3ff                          // add           sp, sp, #0x30
  .long  0xd61f00e0                          // br            x7

HIDDEN _sk_byte_tables_rgb_aarch64
.globl _sk_byte_tables_rgb_aarch64
FUNCTION(_sk_byte_tables_rgb_aarch64)
_sk_byte_tables_rgb_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0xb9401909                          // ldr           w9, [x8, #24]
  .long  0xa9402d0a                          // ldp           x10, x11, [x8]
  .long  0xf9400908                          // ldr           x8, [x8, #16]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e21da31                          // scvtf         v17.4s, v17.4s
  .long  0x6e21de21                          // fmul          v1.4s, v17.4s, v1.4s
  .long  0x6e20de20                          // fmul          v0.4s, v17.4s, v0.4s
  .long  0x6e22de22                          // fmul          v2.4s, v17.4s, v2.4s
  .long  0x6e21a821                          // fcvtnu        v1.4s, v1.4s
  .long  0x6e21a800                          // fcvtnu        v0.4s, v0.4s
  .long  0x6e21a842                          // fcvtnu        v2.4s, v2.4s
  .long  0x0e0c3c2f                          // mov           w15, v1.s[1]
  .long  0x0e143c30                          // mov           w16, v1.s[2]
  .long  0x0e1c3c31                          // mov           w17, v1.s[3]
  .long  0x1e260032                          // fmov          w18, s1
  .long  0x1e26000e                          // fmov          w14, s0
  .long  0x38724972                          // ldrb          w18, [x11, w18, uxtw]
  .long  0x386f496f                          // ldrb          w15, [x11, w15, uxtw]
  .long  0x38704970                          // ldrb          w16, [x11, w16, uxtw]
  .long  0x3871496b                          // ldrb          w11, [x11, w17, uxtw]
  .long  0x1e260051                          // fmov          w17, s2
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386e494e                          // ldrb          w14, [x10, w14, uxtw]
  .long  0x0e0c3c46                          // mov           w6, v2.s[1]
  .long  0x38714911                          // ldrb          w17, [x8, w17, uxtw]
  .long  0x0e143c0c                          // mov           w12, v0.s[2]
  .long  0x0e1c3c0d                          // mov           w13, v0.s[3]
  .long  0x0e143c47                          // mov           w7, v2.s[2]
  .long  0x38694949                          // ldrb          w9, [x10, w9, uxtw]
  .long  0x38664906                          // ldrb          w6, [x8, w6, uxtw]
  .long  0x386c494c                          // ldrb          w12, [x10, w12, uxtw]
  .long  0x386d494a                          // ldrb          w10, [x10, w13, uxtw]
  .long  0x0e1c3c4d                          // mov           w13, v2.s[3]
  .long  0x38674907                          // ldrb          w7, [x8, w7, uxtw]
  .long  0x386d4908                          // ldrb          w8, [x8, w13, uxtw]
  .long  0x4e021dc0                          // mov           v0.h[0], w14
  .long  0x4e021e41                          // mov           v1.h[0], w18
  .long  0x4e021e22                          // mov           v2.h[0], w17
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e061de1                          // mov           v1.h[1], w15
  .long  0x4e061cc2                          // mov           v2.h[1], w6
  .long  0x4e0a1d80                          // mov           v0.h[2], w12
  .long  0x4e0a1e01                          // mov           v1.h[2], w16
  .long  0x4e0a1ce2                          // mov           v2.h[2], w7
  .long  0x4e0e1d40                          // mov           v0.h[3], w10
  .long  0x4e0e1d61                          // mov           v1.h[3], w11
  .long  0x4e0e1d02                          // mov           v2.h[3], w8
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e30dc00                          // fmul          v0.4s, v0.4s, v16.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_table_r_aarch64
.globl _sk_table_r_aarch64
FUNCTION(_sk_table_r_aarch64)
_sk_table_r_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21a810                          // fcvtnu        v16.4s, v0.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408160                          // ld1           {v0.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140600                          // mov           v0.s[2], v16.s[0]
  .long  0x6e1c0620                          // mov           v0.s[3], v17.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_table_g_aarch64
.globl _sk_table_g_aarch64
FUNCTION(_sk_table_g_aarch64)
_sk_table_g_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e21a830                          // fcvtnu        v16.4s, v1.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408161                          // ld1           {v1.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409121                          // ld1           {v1.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140601                          // mov           v1.s[2], v16.s[0]
  .long  0x6e1c0621                          // mov           v1.s[3], v17.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_table_b_aarch64
.globl _sk_table_b_aarch64
FUNCTION(_sk_table_b_aarch64)
_sk_table_b_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e21a850                          // fcvtnu        v16.4s, v2.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408162                          // ld1           {v2.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409122                          // ld1           {v2.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140602                          // mov           v2.s[2], v16.s[0]
  .long  0x6e1c0622                          // mov           v2.s[3], v17.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_table_a_aarch64
.globl _sk_table_a_aarch64
FUNCTION(_sk_table_a_aarch64)
_sk_table_a_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0x6e21a870                          // fcvtnu        v16.4s, v3.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408163                          // ld1           {v3.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409123                          // ld1           {v3.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140603                          // mov           v3.s[2], v16.s[0]
  .long  0x6e1c0623                          // mov           v3.s[3], v17.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_parametric_r_aarch64
.globl _sk_parametric_r_aarch64
FUNCTION(_sk_parametric_r_aarch64)
_sk_parametric_r_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911010                          // fmla          v16.4s, v0.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951014                          // fmla          v20.4s, v0.4s, v21.s[0]
  .long  0x6e20e640                          // fcmge         v0.4s, v18.4s, v0.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e00                          // bsl           v0.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f400                          // fmax          v0.4s, v0.4s, v18.4s
  .long  0x4eb5f400                          // fmin          v0.4s, v0.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_parametric_g_aarch64
.globl _sk_parametric_g_aarch64
FUNCTION(_sk_parametric_g_aarch64)
_sk_parametric_g_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911030                          // fmla          v16.4s, v1.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951034                          // fmla          v20.4s, v1.4s, v21.s[0]
  .long  0x6e21e641                          // fcmge         v1.4s, v18.4s, v1.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e01                          // bsl           v1.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f421                          // fmax          v1.4s, v1.4s, v18.4s
  .long  0x4eb5f421                          // fmin          v1.4s, v1.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_parametric_b_aarch64
.globl _sk_parametric_b_aarch64
FUNCTION(_sk_parametric_b_aarch64)
_sk_parametric_b_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911050                          // fmla          v16.4s, v2.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951054                          // fmla          v20.4s, v2.4s, v21.s[0]
  .long  0x6e22e642                          // fcmge         v2.4s, v18.4s, v2.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e02                          // bsl           v2.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f442                          // fmax          v2.4s, v2.4s, v18.4s
  .long  0x4eb5f442                          // fmin          v2.4s, v2.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_parametric_a_aarch64
.globl _sk_parametric_a_aarch64
FUNCTION(_sk_parametric_a_aarch64)
_sk_parametric_a_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911070                          // fmla          v16.4s, v3.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951074                          // fmla          v20.4s, v3.4s, v21.s[0]
  .long  0x6e23e643                          // fcmge         v3.4s, v18.4s, v3.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e03                          // bsl           v3.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f463                          // fmax          v3.4s, v3.4s, v18.4s
  .long  0x4eb5f463                          // fmin          v3.4s, v3.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_lab_to_xyz_aarch64
.globl _sk_lab_to_xyz_aarch64
FUNCTION(_sk_lab_to_xyz_aarch64)
_sk_lab_to_xyz_aarch64:
  .long  0x52a85908                          // mov           w8, #0x42c80000
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a86fe8                          // mov           w8, #0x437f0000
  .long  0x4f066471                          // movi          v17.4s, #0xc3, lsl #24
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a781a8                          // mov           w8, #0x3c0d0000
  .long  0x7287b968                          // movk          w8, #0x3dcb
  .long  0x4eb11e34                          // mov           v20.16b, v17.16b
  .long  0x4e21ce74                          // fmla          v20.4s, v19.4s, v1.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a76068                          // mov           w8, #0x3b030000
  .long  0x72824de8                          // movk          w8, #0x126f
  .long  0x4e22ce71                          // fmla          v17.4s, v19.4s, v2.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a77468                          // mov           w8, #0x3ba30000
  .long  0x729ae148                          // movk          w8, #0xd70a
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a78228                          // mov           w8, #0x3c110000
  .long  0x4f01f612                          // fmov          v18.4s, #1.600000000000000000e+01
  .long  0x72831848                          // movk          w8, #0x18c2
  .long  0x4e20ce12                          // fmla          v18.4s, v16.4s, v0.4s
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52b7c1a8                          // mov           w8, #0xbe0d0000
  .long  0x7287b968                          // movk          w8, #0x3dcb
  .long  0x6e21de41                          // fmul          v1.4s, v18.4s, v1.4s
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a7c068                          // mov           w8, #0x3e030000
  .long  0x4ea11c32                          // mov           v18.16b, v1.16b
  .long  0x72900a08                          // movk          w8, #0x8050
  .long  0x4eb3ce32                          // fmls          v18.4s, v17.4s, v19.4s
  .long  0x6e21dc31                          // fmul          v17.4s, v1.4s, v1.4s
  .long  0x4ea11c35                          // mov           v21.16b, v1.16b
  .long  0x4e30d433                          // fadd          v19.4s, v1.4s, v16.4s
  .long  0x6e31dc31                          // fmul          v17.4s, v1.4s, v17.4s
  .long  0x4e34cc55                          // fmla          v21.4s, v2.4s, v20.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x6e22de73                          // fmul          v19.4s, v19.4s, v2.4s
  .long  0x6ea0e621                          // fcmgt         v1.4s, v17.4s, v0.4s
  .long  0x6e731e21                          // bsl           v1.16b, v17.16b, v19.16b
  .long  0x6e32de51                          // fmul          v17.4s, v18.4s, v18.4s
  .long  0x4e30d653                          // fadd          v19.4s, v18.4s, v16.4s
  .long  0x6e31de51                          // fmul          v17.4s, v18.4s, v17.4s
  .long  0x52a7eec8                          // mov           w8, #0x3f760000
  .long  0x6e22de72                          // fmul          v18.4s, v19.4s, v2.4s
  .long  0x6ea0e633                          // fcmgt         v19.4s, v17.4s, v0.4s
  .long  0x729ae3e8                          // movk          w8, #0xd71f
  .long  0x6e721e33                          // bsl           v19.16b, v17.16b, v18.16b
  .long  0x6e35deb2                          // fmul          v18.4s, v21.4s, v21.4s
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7ea68                          // mov           w8, #0x3f530000
  .long  0x4e30d6b0                          // fadd          v16.4s, v21.4s, v16.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x72881ec8                          // movk          w8, #0x40f6
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6ea0e640                          // fcmgt         v0.4s, v18.4s, v0.4s
  .long  0x4e040d14                          // dup           v20.4s, w8
  .long  0x6e621e40                          // bsl           v0.16b, v18.16b, v2.16b
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x6e34de62                          // fmul          v2.4s, v19.4s, v20.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_load_a8_aarch64
.globl _sk_load_a8_aarch64
FUNCTION(_sk_load_a8_aarch64)
_sk_load_a8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50002e4                          // cbnz          x4, 26a8 <sk_load_a8_aarch64+0x68>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d22                          // mov           v2.h[0], w9
  .long  0x4e061d42                          // mov           v2.h[1], w10
  .long  0x4e0a1d62                          // mov           v2.h[2], w11
  .long  0x4e0e1d02                          // mov           v2.h[3], w8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6e23dc43                          // fmul          v3.4s, v2.4s, v3.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          26f4 <sk_load_a8_aarch64+0xb4>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e402                          // movi          d2, #0x0
  .long  0x540000c0                          // b.eq          26d4 <sk_load_a8_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd61                          // b.ne          2670 <sk_load_a8_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020fe2                          // dup           v2.4h, wzr
  .long  0x4e0a1d22                          // mov           v2.h[2], w9
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x39400508                          // ldrb          w8, [x8, #1]
  .long  0x4e041d20                          // mov           v0.s[0], w9
  .long  0x4e0c1d00                          // mov           v0.s[1], w8
  .long  0x0e401800                          // uzp1          v0.4h, v0.4h, v0.4h
  .long  0x2e002040                          // ext           v0.8b, v2.8b, v0.8b, #4
  .long  0x2e002002                          // ext           v2.8b, v0.8b, v0.8b, #4
  .long  0x17ffffe0                          // b             2670 <sk_load_a8_aarch64+0x30>
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x0e020fe2                          // dup           v2.4h, wzr
  .long  0x4e021d02                          // mov           v2.h[0], w8
  .long  0x17ffffdc                          // b             2670 <sk_load_a8_aarch64+0x30>

HIDDEN _sk_load_a8_dst_aarch64
.globl _sk_load_a8_dst_aarch64
FUNCTION(_sk_load_a8_dst_aarch64)
_sk_load_a8_dst_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50002e4                          // cbnz          x4, 276c <sk_load_a8_dst_aarch64+0x68>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d26                          // mov           v6.h[0], w9
  .long  0x4e061d46                          // mov           v6.h[1], w10
  .long  0x4e0a1d66                          // mov           v6.h[2], w11
  .long  0x4e0e1d06                          // mov           v6.h[3], w8
  .long  0x2f07b7e6                          // bic           v6.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x2f10a4c6                          // uxtl          v6.4s, v6.4h
  .long  0x4e040d07                          // dup           v7.4s, w8
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e21d8c6                          // ucvtf         v6.4s, v6.4s
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x6f00e405                          // movi          v5.2d, #0x0
  .long  0x6e27dcc7                          // fmul          v7.4s, v6.4s, v7.4s
  .long  0x6f00e406                          // movi          v6.2d, #0x0
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          27b8 <sk_load_a8_dst_aarch64+0xb4>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e406                          // movi          d6, #0x0
  .long  0x540000c0                          // b.eq          2798 <sk_load_a8_dst_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd61                          // b.ne          2734 <sk_load_a8_dst_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020fe6                          // dup           v6.4h, wzr
  .long  0x4e0a1d26                          // mov           v6.h[2], w9
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x39400508                          // ldrb          w8, [x8, #1]
  .long  0x4e041d24                          // mov           v4.s[0], w9
  .long  0x4e0c1d04                          // mov           v4.s[1], w8
  .long  0x0e401884                          // uzp1          v4.4h, v4.4h, v0.4h
  .long  0x2e0420c4                          // ext           v4.8b, v6.8b, v4.8b, #4
  .long  0x2e042086                          // ext           v6.8b, v4.8b, v4.8b, #4
  .long  0x17ffffe0                          // b             2734 <sk_load_a8_dst_aarch64+0x30>
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x0e020fe6                          // dup           v6.4h, wzr
  .long  0x4e021d06                          // mov           v6.h[0], w8
  .long  0x17ffffdc                          // b             2734 <sk_load_a8_dst_aarch64+0x30>

HIDDEN _sk_gather_a8_aarch64
.globl _sk_gather_a8_aarch64
FUNCTION(_sk_gather_a8_aarch64)
_sk_gather_a8_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386c490c                          // ldrb          w12, [x8, w12, uxtw]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x38694909                          // ldrb          w9, [x8, w9, uxtw]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x386b4908                          // ldrb          w8, [x8, w11, uxtw]
  .long  0x4e021d82                          // mov           v2.h[0], w12
  .long  0x4e061d22                          // mov           v2.h[1], w9
  .long  0x4e0a1d42                          // mov           v2.h[2], w10
  .long  0x4e0e1d02                          // mov           v2.h[3], w8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6e23dc43                          // fmul          v3.4s, v2.4s, v3.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_a8_aarch64
.globl _sk_store_a8_aarch64
FUNCTION(_sk_store_a8_aarch64)
_sk_store_a8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a86fe9                          // mov           w9, #0x437f0000
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb5000184                          // cbnz          x4, 2890 <sk_store_a8_aarch64+0x50>
  .long  0x0e0e3e09                          // umov          w9, v16.h[3]
  .long  0x0e0a3e0a                          // umov          w10, v16.h[2]
  .long  0x0e063e0b                          // umov          w11, v16.h[1]
  .long  0x0e023e0c                          // umov          w12, v16.h[0]
  .long  0x39000d09                          // strb          w9, [x8, #3]
  .long  0x3900090a                          // strb          w10, [x8, #2]
  .long  0x3900050b                          // strb          w11, [x8, #1]
  .long  0x3900010c                          // strb          w12, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000180                          // b.eq          28c8 <sk_store_a8_aarch64+0x88>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          28b4 <sk_store_a8_aarch64+0x74>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffee1                          // b.ne          2884 <sk_store_a8_aarch64+0x44>  // b.any
  .long  0x0e0a3e09                          // umov          w9, v16.h[2]
  .long  0x39000909                          // strb          w9, [x8, #2]
  .long  0x0e023e09                          // umov          w9, v16.h[0]
  .long  0x0e063e0a                          // umov          w10, v16.h[1]
  .long  0x3900050a                          // strb          w10, [x8, #1]
  .long  0x39000109                          // strb          w9, [x8]
  .long  0x17fffff0                          // b             2884 <sk_store_a8_aarch64+0x44>
  .long  0x0e023e09                          // umov          w9, v16.h[0]
  .long  0x39000109                          // strb          w9, [x8]
  .long  0x17ffffed                          // b             2884 <sk_store_a8_aarch64+0x44>

HIDDEN _sk_load_g8_aarch64
.globl _sk_load_g8_aarch64
FUNCTION(_sk_load_g8_aarch64)
_sk_load_g8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50002e4                          // cbnz          x4, 293c <sk_load_g8_aarch64+0x68>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d20                          // mov           v0.h[0], w9
  .long  0x4e061d40                          // mov           v0.h[1], w10
  .long  0x4e0a1d60                          // mov           v0.h[2], w11
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e21dc00                          // fmul          v0.4s, v0.4s, v1.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0x4ea01c01                          // mov           v1.16b, v0.16b
  .long  0x4ea01c02                          // mov           v2.16b, v0.16b
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          2988 <sk_load_g8_aarch64+0xb4>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e400                          // movi          d0, #0x0
  .long  0x540000c0                          // b.eq          2968 <sk_load_g8_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd61                          // b.ne          2904 <sk_load_g8_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x4e0a1d20                          // mov           v0.h[2], w9
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x39400508                          // ldrb          w8, [x8, #1]
  .long  0x4e041d21                          // mov           v1.s[0], w9
  .long  0x4e0c1d01                          // mov           v1.s[1], w8
  .long  0x0e401821                          // uzp1          v1.4h, v1.4h, v0.4h
  .long  0x2e012000                          // ext           v0.8b, v0.8b, v1.8b, #4
  .long  0x2e002000                          // ext           v0.8b, v0.8b, v0.8b, #4
  .long  0x17ffffe0                          // b             2904 <sk_load_g8_aarch64+0x30>
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x4e021d00                          // mov           v0.h[0], w8
  .long  0x17ffffdc                          // b             2904 <sk_load_g8_aarch64+0x30>

HIDDEN _sk_load_g8_dst_aarch64
.globl _sk_load_g8_dst_aarch64
FUNCTION(_sk_load_g8_dst_aarch64)
_sk_load_g8_dst_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50002e4                          // cbnz          x4, 2a00 <sk_load_g8_dst_aarch64+0x68>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d24                          // mov           v4.h[0], w9
  .long  0x4e061d44                          // mov           v4.h[1], w10
  .long  0x4e0a1d64                          // mov           v4.h[2], w11
  .long  0x4e0e1d04                          // mov           v4.h[3], w8
  .long  0x2f07b7e4                          // bic           v4.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x2f10a484                          // uxtl          v4.4s, v4.4h
  .long  0x4e040d05                          // dup           v5.4s, w8
  .long  0x6e21d884                          // ucvtf         v4.4s, v4.4s
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e25dc84                          // fmul          v4.4s, v4.4s, v5.4s
  .long  0x4f03f607                          // fmov          v7.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0x4ea41c85                          // mov           v5.16b, v4.16b
  .long  0x4ea41c86                          // mov           v6.16b, v4.16b
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          2a4c <sk_load_g8_dst_aarch64+0xb4>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e404                          // movi          d4, #0x0
  .long  0x540000c0                          // b.eq          2a2c <sk_load_g8_dst_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd61                          // b.ne          29c8 <sk_load_g8_dst_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020fe4                          // dup           v4.4h, wzr
  .long  0x4e0a1d24                          // mov           v4.h[2], w9
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x39400508                          // ldrb          w8, [x8, #1]
  .long  0x4e041d25                          // mov           v5.s[0], w9
  .long  0x4e0c1d05                          // mov           v5.s[1], w8
  .long  0x0e4018a5                          // uzp1          v5.4h, v5.4h, v0.4h
  .long  0x2e052084                          // ext           v4.8b, v4.8b, v5.8b, #4
  .long  0x2e042084                          // ext           v4.8b, v4.8b, v4.8b, #4
  .long  0x17ffffe0                          // b             29c8 <sk_load_g8_dst_aarch64+0x30>
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x0e020fe4                          // dup           v4.4h, wzr
  .long  0x4e021d04                          // mov           v4.h[0], w8
  .long  0x17ffffdc                          // b             29c8 <sk_load_g8_dst_aarch64+0x30>

HIDDEN _sk_gather_g8_aarch64
.globl _sk_gather_g8_aarch64
FUNCTION(_sk_gather_g8_aarch64)
_sk_gather_g8_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386c490c                          // ldrb          w12, [x8, w12, uxtw]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x38694909                          // ldrb          w9, [x8, w9, uxtw]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x386b4908                          // ldrb          w8, [x8, w11, uxtw]
  .long  0x4e021d80                          // mov           v0.h[0], w12
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0x4ea01c01                          // mov           v1.16b, v0.16b
  .long  0x4ea01c02                          // mov           v2.16b, v0.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_gather_i8_aarch64
.globl _sk_gather_i8_aarch64
FUNCTION(_sk_gather_i8_aarch64)
_sk_gather_i8_aarch64:
  .long  0xaa0103e8                          // mov           x8, x1
  .long  0xf8408429                          // ldr           x9, [x1], #8
  .long  0xb4000069                          // cbz           x9, 2ae8 <sk_gather_i8_aarch64+0x14>
  .long  0xaa0903ea                          // mov           x10, x9
  .long  0x14000003                          // b             2af0 <sk_gather_i8_aarch64+0x1c>
  .long  0xf940050a                          // ldr           x10, [x8, #8]
  .long  0x91004101                          // add           x1, x8, #0x10
  .long  0xf8410548                          // ldr           x8, [x10], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0xf9400529                          // ldr           x9, [x9, #8]
  .long  0x4d40c942                          // ld1r          {v2.4s}, [x10]
  .long  0x6f00e623                          // movi          v3.2d, #0xff000000ff
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000d                          // fmov          w13, s0
  .long  0x0e0c3c0a                          // mov           w10, v0.s[1]
  .long  0x386d490d                          // ldrb          w13, [x8, w13, uxtw]
  .long  0x0e143c0b                          // mov           w11, v0.s[2]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x0e1c3c0c                          // mov           w12, v0.s[3]
  .long  0x386b490b                          // ldrb          w11, [x8, w11, uxtw]
  .long  0x386c4908                          // ldrb          w8, [x8, w12, uxtw]
  .long  0x4e021da0                          // mov           v0.h[0], w13
  .long  0x4e061d40                          // mov           v0.h[1], w10
  .long  0x4e0a1d60                          // mov           v0.h[2], w11
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e231c00                          // and           v0.16b, v0.16b, v3.16b
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c492c                          // add           x12, x9, w12, uxtw #2
  .long  0x0e0c3c08                          // mov           w8, v0.s[1]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408180                          // ld1           {v0.s}[0], [x12]
  .long  0x8b284928                          // add           x8, x9, w8, uxtw #2
  .long  0xb86a592a                          // ldr           w10, [x9, w10, uxtw #2]
  .long  0x52a7700c                          // mov           w12, #0x3b800000
  .long  0x0d409100                          // ld1           {v0.s}[1], [x8]
  .long  0xb86b5928                          // ldr           w8, [x9, w11, uxtw #2]
  .long  0x7290102c                          // movk          w12, #0x8081
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e141d40                          // mov           v0.s[2], w10
  .long  0x4e1c1d00                          // mov           v0.s[3], w8
  .long  0x4e231c01                          // and           v1.16b, v0.16b, v3.16b
  .long  0x6f380402                          // ushr          v2.4s, v0.4s, #8
  .long  0x6f300411                          // ushr          v17.4s, v0.4s, #16
  .long  0x4e040d90                          // dup           v16.4s, w12
  .long  0x6f280400                          // ushr          v0.4s, v0.4s, #24
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x4e231c42                          // and           v2.16b, v2.16b, v3.16b
  .long  0x4e231e23                          // and           v3.16b, v17.16b, v3.16b
  .long  0x4e21d811                          // scvtf         v17.4s, v0.4s
  .long  0x6e30dc20                          // fmul          v0.4s, v1.4s, v16.4s
  .long  0x4e21d841                          // scvtf         v1.4s, v2.4s
  .long  0x4e21d862                          // scvtf         v2.4s, v3.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0x6e30de23                          // fmul          v3.4s, v17.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_load_565_aarch64
.globl _sk_load_565_aarch64
FUNCTION(_sk_load_565_aarch64)
_sk_load_565_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0xb50003c4                          // cbnz          x4, 2c44 <sk_load_565_aarch64+0x84>
  .long  0xfd400100                          // ldr           d0, [x8]
  .long  0x321b17e8                          // orr           w8, wzr, #0x7e0
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a6f088                          // mov           w8, #0x37840000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4f072701                          // movi          v1.4s, #0xf8, lsl #8
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4f0007e3                          // movi          v3.4s, #0x1f
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e221c10                          // and           v16.16b, v0.16b, v2.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a7a088                          // mov           w8, #0x3d040000
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a74048                          // mov           w8, #0x3a020000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72810428                          // movk          w8, #0x821
  .long  0x4e21d862                          // scvtf         v2.4s, v3.4s
  .long  0x6e21dc42                          // fmul          v2.4s, v2.4s, v1.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x4e21da03                          // scvtf         v3.4s, v16.4s
  .long  0x6e21dc61                          // fmul          v1.4s, v3.4s, v1.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          2c90 <sk_load_565_aarch64+0xd0>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e400                          // movi          d0, #0x0
  .long  0x540000c0                          // b.eq          2c70 <sk_load_565_aarch64+0xb0>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffba1                          // b.ne          2bd4 <sk_load_565_aarch64+0x14>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x0d405120                          // ld1           {v0.h}[2], [x9]
  .long  0x79400109                          // ldrh          w9, [x8]
  .long  0x79400508                          // ldrh          w8, [x8, #2]
  .long  0x4e041d21                          // mov           v1.s[0], w9
  .long  0x4e0c1d01                          // mov           v1.s[1], w8
  .long  0x0e401821                          // uzp1          v1.4h, v1.4h, v0.4h
  .long  0x2e012000                          // ext           v0.8b, v0.8b, v1.8b, #4
  .long  0x2e002000                          // ext           v0.8b, v0.8b, v0.8b, #4
  .long  0x17ffffd2                          // b             2bd4 <sk_load_565_aarch64+0x14>
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x0d404100                          // ld1           {v0.h}[0], [x8]
  .long  0x17ffffcf                          // b             2bd4 <sk_load_565_aarch64+0x14>

HIDDEN _sk_load_565_dst_aarch64
.globl _sk_load_565_dst_aarch64
FUNCTION(_sk_load_565_dst_aarch64)
_sk_load_565_dst_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0xb50003c4                          // cbnz          x4, 2d20 <sk_load_565_dst_aarch64+0x84>
  .long  0xfd400104                          // ldr           d4, [x8]
  .long  0x321b17e8                          // orr           w8, wzr, #0x7e0
  .long  0x4e040d06                          // dup           v6.4s, w8
  .long  0x52a6f088                          // mov           w8, #0x37840000
  .long  0x2f10a484                          // uxtl          v4.4s, v4.4h
  .long  0x4f072705                          // movi          v5.4s, #0xf8, lsl #8
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4f0007e7                          // movi          v7.4s, #0x1f
  .long  0x4e251c85                          // and           v5.16b, v4.16b, v5.16b
  .long  0x4e271c87                          // and           v7.16b, v4.16b, v7.16b
  .long  0x4e261c90                          // and           v16.16b, v4.16b, v6.16b
  .long  0x4e040d04                          // dup           v4.4s, w8
  .long  0x52a7a088                          // mov           w8, #0x3d040000
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4e21d8a5                          // scvtf         v5.4s, v5.4s
  .long  0x6e24dca4                          // fmul          v4.4s, v5.4s, v4.4s
  .long  0x4e040d05                          // dup           v5.4s, w8
  .long  0x52a74048                          // mov           w8, #0x3a020000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72810428                          // movk          w8, #0x821
  .long  0x4e21d8e6                          // scvtf         v6.4s, v7.4s
  .long  0x6e25dcc6                          // fmul          v6.4s, v6.4s, v5.4s
  .long  0x4e040d05                          // dup           v5.4s, w8
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x4e21da07                          // scvtf         v7.4s, v16.4s
  .long  0x6e25dce5                          // fmul          v5.4s, v7.4s, v5.4s
  .long  0x4f03f607                          // fmov          v7.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          2d6c <sk_load_565_dst_aarch64+0xd0>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e404                          // movi          d4, #0x0
  .long  0x540000c0                          // b.eq          2d4c <sk_load_565_dst_aarch64+0xb0>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffba1                          // b.ne          2cb0 <sk_load_565_dst_aarch64+0x14>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0e020fe4                          // dup           v4.4h, wzr
  .long  0x0d405124                          // ld1           {v4.h}[2], [x9]
  .long  0x79400109                          // ldrh          w9, [x8]
  .long  0x79400508                          // ldrh          w8, [x8, #2]
  .long  0x4e041d25                          // mov           v5.s[0], w9
  .long  0x4e0c1d05                          // mov           v5.s[1], w8
  .long  0x0e4018a5                          // uzp1          v5.4h, v5.4h, v0.4h
  .long  0x2e052084                          // ext           v4.8b, v4.8b, v5.8b, #4
  .long  0x2e042084                          // ext           v4.8b, v4.8b, v4.8b, #4
  .long  0x17ffffd2                          // b             2cb0 <sk_load_565_dst_aarch64+0x14>
  .long  0x0e020fe4                          // dup           v4.4h, wzr
  .long  0x0d404104                          // ld1           {v4.h}[0], [x8]
  .long  0x17ffffcf                          // b             2cb0 <sk_load_565_dst_aarch64+0x14>

HIDDEN _sk_gather_565_aarch64
.globl _sk_gather_565_aarch64
FUNCTION(_sk_gather_565_aarch64)
_sk_gather_565_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x321b17e9                          // orr           w9, wzr, #0x7e0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x8b2c450c                          // add           x12, x8, w12, uxtw #1
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d404180                          // ld1           {v0.h}[0], [x12]
  .long  0x78695909                          // ldrh          w9, [x8, w9, uxtw #1]
  .long  0x786a590a                          // ldrh          w10, [x8, w10, uxtw #1]
  .long  0x786b5908                          // ldrh          w8, [x8, w11, uxtw #1]
  .long  0x4f072701                          // movi          v1.4s, #0xf8, lsl #8
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x52a6f08b                          // mov           w11, #0x37840000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x7284210b                          // movk          w11, #0x2108
  .long  0x52a74049                          // mov           w9, #0x3a020000
  .long  0x4f0007e2                          // movi          v2.4s, #0x1f
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x72810429                          // movk          w9, #0x821
  .long  0x52a7a08a                          // mov           w10, #0x3d040000
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e040d60                          // dup           v0.4s, w11
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x7284210a                          // movk          w10, #0x2108
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e21dc61                          // fmul          v1.4s, v3.4s, v1.4s
  .long  0x4e040d43                          // dup           v3.4s, w10
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x6e23dc42                          // fmul          v2.4s, v2.4s, v3.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_565_aarch64
.globl _sk_store_565_aarch64
FUNCTION(_sk_store_565_aarch64)
_sk_store_565_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a84f89                          // mov           w9, #0x427c0000
  .long  0x4f01f7f0                          // fmov          v16.4s, #3.100000000000000000e+01
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e32dc32                          // fmul          v18.4s, v1.4s, v18.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e30dc50                          // fmul          v16.4s, v2.4s, v16.4s
  .long  0x4f2b5631                          // shl           v17.4s, v17.4s, #11
  .long  0x4f255652                          // shl           v18.4s, v18.4s, #5
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0xb50000a4                          // cbnz          x4, 2e80 <sk_store_565_aarch64+0x58>
  .long  0xfd000110                          // str           d16, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000120                          // b.eq          2eac <sk_store_565_aarch64+0x84>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          2ea4 <sk_store_565_aarch64+0x7c>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffee1                          // b.ne          2e74 <sk_store_565_aarch64+0x4c>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0d005130                          // st1           {v16.h}[2], [x9]
  .long  0x91000909                          // add           x9, x8, #0x2
  .long  0x0d004930                          // st1           {v16.h}[1], [x9]
  .long  0x0d004110                          // st1           {v16.h}[0], [x8]
  .long  0x17fffff1                          // b             2e74 <sk_store_565_aarch64+0x4c>

HIDDEN _sk_load_4444_aarch64
.globl _sk_load_4444_aarch64
FUNCTION(_sk_load_4444_aarch64)
_sk_load_4444_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0xb5000444                          // cbnz          x4, 2f48 <sk_load_4444_aarch64+0x94>
  .long  0xfd400100                          // ldr           d0, [x8]
  .long  0x52a6f108                          // mov           w8, #0x37880000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4f072601                          // movi          v1.4s, #0xf0, lsl #8
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4f0025e2                          // movi          v2.4s, #0xf, lsl #8
  .long  0x4f070603                          // movi          v3.4s, #0xf0
  .long  0x4f0005f0                          // movi          v16.4s, #0xf
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e301c10                          // and           v16.16b, v0.16b, v16.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a73108                          // mov           w8, #0x39880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a77108                          // mov           w8, #0x3b880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x6e21dc41                          // fmul          v1.4s, v2.4s, v1.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a7b108                          // mov           w8, #0x3d880000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e22dc62                          // fmul          v2.4s, v3.4s, v2.4s
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          2f94 <sk_load_4444_aarch64+0xe0>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e400                          // movi          d0, #0x0
  .long  0x540000c0                          // b.eq          2f74 <sk_load_4444_aarch64+0xc0>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffb21                          // b.ne          2ec8 <sk_load_4444_aarch64+0x14>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x0d405120                          // ld1           {v0.h}[2], [x9]
  .long  0x79400109                          // ldrh          w9, [x8]
  .long  0x79400508                          // ldrh          w8, [x8, #2]
  .long  0x4e041d21                          // mov           v1.s[0], w9
  .long  0x4e0c1d01                          // mov           v1.s[1], w8
  .long  0x0e401821                          // uzp1          v1.4h, v1.4h, v0.4h
  .long  0x2e012000                          // ext           v0.8b, v0.8b, v1.8b, #4
  .long  0x2e002000                          // ext           v0.8b, v0.8b, v0.8b, #4
  .long  0x17ffffce                          // b             2ec8 <sk_load_4444_aarch64+0x14>
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x0d404100                          // ld1           {v0.h}[0], [x8]
  .long  0x17ffffcb                          // b             2ec8 <sk_load_4444_aarch64+0x14>

HIDDEN _sk_load_4444_dst_aarch64
.globl _sk_load_4444_dst_aarch64
FUNCTION(_sk_load_4444_dst_aarch64)
_sk_load_4444_dst_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0xb5000444                          // cbnz          x4, 3034 <sk_load_4444_dst_aarch64+0x94>
  .long  0xfd400104                          // ldr           d4, [x8]
  .long  0x52a6f108                          // mov           w8, #0x37880000
  .long  0x2f10a484                          // uxtl          v4.4s, v4.4h
  .long  0x4f072605                          // movi          v5.4s, #0xf0, lsl #8
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4f0025e6                          // movi          v6.4s, #0xf, lsl #8
  .long  0x4f070607                          // movi          v7.4s, #0xf0
  .long  0x4f0005f0                          // movi          v16.4s, #0xf
  .long  0x4e251c85                          // and           v5.16b, v4.16b, v5.16b
  .long  0x4e261c86                          // and           v6.16b, v4.16b, v6.16b
  .long  0x4e271c87                          // and           v7.16b, v4.16b, v7.16b
  .long  0x4e301c90                          // and           v16.16b, v4.16b, v16.16b
  .long  0x4e040d04                          // dup           v4.4s, w8
  .long  0x52a73108                          // mov           w8, #0x39880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d8a5                          // scvtf         v5.4s, v5.4s
  .long  0x6e24dca4                          // fmul          v4.4s, v5.4s, v4.4s
  .long  0x4e040d05                          // dup           v5.4s, w8
  .long  0x52a77108                          // mov           w8, #0x3b880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d8c6                          // scvtf         v6.4s, v6.4s
  .long  0x6e25dcc5                          // fmul          v5.4s, v6.4s, v5.4s
  .long  0x4e040d06                          // dup           v6.4s, w8
  .long  0x52a7b108                          // mov           w8, #0x3d880000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d8e7                          // scvtf         v7.4s, v7.4s
  .long  0x6e26dce6                          // fmul          v6.4s, v7.4s, v6.4s
  .long  0x4e040d07                          // dup           v7.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e27de07                          // fmul          v7.4s, v16.4s, v7.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000220                          // b.eq          3080 <sk_load_4444_dst_aarch64+0xe0>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x2f00e404                          // movi          d4, #0x0
  .long  0x540000c0                          // b.eq          3060 <sk_load_4444_dst_aarch64+0xc0>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffb21                          // b.ne          2fb4 <sk_load_4444_dst_aarch64+0x14>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0e020fe4                          // dup           v4.4h, wzr
  .long  0x0d405124                          // ld1           {v4.h}[2], [x9]
  .long  0x79400109                          // ldrh          w9, [x8]
  .long  0x79400508                          // ldrh          w8, [x8, #2]
  .long  0x4e041d25                          // mov           v5.s[0], w9
  .long  0x4e0c1d05                          // mov           v5.s[1], w8
  .long  0x0e4018a5                          // uzp1          v5.4h, v5.4h, v0.4h
  .long  0x2e052084                          // ext           v4.8b, v4.8b, v5.8b, #4
  .long  0x2e042084                          // ext           v4.8b, v4.8b, v4.8b, #4
  .long  0x17ffffce                          // b             2fb4 <sk_load_4444_dst_aarch64+0x14>
  .long  0x0e020fe4                          // dup           v4.4h, wzr
  .long  0x0d404104                          // ld1           {v4.h}[0], [x8]
  .long  0x17ffffcb                          // b             2fb4 <sk_load_4444_dst_aarch64+0x14>

HIDDEN _sk_gather_4444_aarch64
.globl _sk_gather_4444_aarch64
FUNCTION(_sk_gather_4444_aarch64)
_sk_gather_4444_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x4f070603                          // movi          v3.4s, #0xf0
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4f0005f0                          // movi          v16.4s, #0xf
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x8b2c450c                          // add           x12, x8, w12, uxtw #1
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d404180                          // ld1           {v0.h}[0], [x12]
  .long  0x78695909                          // ldrh          w9, [x8, w9, uxtw #1]
  .long  0x786a590a                          // ldrh          w10, [x8, w10, uxtw #1]
  .long  0x786b5908                          // ldrh          w8, [x8, w11, uxtw #1]
  .long  0x4f072601                          // movi          v1.4s, #0xf0, lsl #8
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x52a6f10b                          // mov           w11, #0x37880000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x7291112b                          // movk          w11, #0x8889
  .long  0x4f0025e2                          // movi          v2.4s, #0xf, lsl #8
  .long  0x52a73109                          // mov           w9, #0x39880000
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x72911129                          // movk          w9, #0x8889
  .long  0x52a7710a                          // mov           w10, #0x3b880000
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e301c10                          // and           v16.16b, v0.16b, v16.16b
  .long  0x4e040d60                          // dup           v0.4s, w11
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x7291112a                          // movk          w10, #0x8889
  .long  0x52a7b108                          // mov           w8, #0x3d880000
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x6e21dc41                          // fmul          v1.4s, v2.4s, v1.4s
  .long  0x4e040d42                          // dup           v2.4s, w10
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e22dc62                          // fmul          v2.4s, v3.4s, v2.4s
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_4444_aarch64
.globl _sk_store_4444_aarch64
FUNCTION(_sk_store_4444_aarch64)
_sk_store_4444_aarch64:
  .long  0x4f01f5d0                          // fmov          v16.4s, #1.500000000000000000e+01
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e30dc32                          // fmul          v18.4s, v1.4s, v16.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x4f2c5631                          // shl           v17.4s, v17.4s, #12
  .long  0x4f285652                          // shl           v18.4s, v18.4s, #8
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x6e30dc52                          // fmul          v18.4s, v2.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0x4f245652                          // shl           v18.4s, v18.4s, #4
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4eb21e31                          // orr           v17.16b, v17.16b, v18.16b
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0xb50000a4                          // cbnz          x4, 31b0 <sk_store_4444_aarch64+0x60>
  .long  0xfd000110                          // str           d16, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000120                          // b.eq          31dc <sk_store_4444_aarch64+0x8c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          31d4 <sk_store_4444_aarch64+0x84>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffee1                          // b.ne          31a4 <sk_store_4444_aarch64+0x54>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0d005130                          // st1           {v16.h}[2], [x9]
  .long  0x91000909                          // add           x9, x8, #0x2
  .long  0x0d004930                          // st1           {v16.h}[1], [x9]
  .long  0x0d004110                          // st1           {v16.h}[0], [x8]
  .long  0x17fffff1                          // b             31a4 <sk_store_4444_aarch64+0x54>

HIDDEN _sk_load_8888_aarch64
.globl _sk_load_8888_aarch64
FUNCTION(_sk_load_8888_aarch64)
_sk_load_8888_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020908                          // add           x8, x8, x2, lsl #2
  .long  0xb50002e4                          // cbnz          x4, 324c <sk_load_8888_aarch64+0x68>
  .long  0x3dc00100                          // ldr           q0, [x8]
  .long  0x6f00e621                          // movi          v1.2d, #0xff000000ff
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x6f380402                          // ushr          v2.4s, v0.4s, #8
  .long  0x6f300403                          // ushr          v3.4s, v0.4s, #16
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x6f280410                          // ushr          v16.4s, v0.4s, #24
  .long  0x4e211c00                          // and           v0.16b, v0.16b, v1.16b
  .long  0x4e211c42                          // and           v2.16b, v2.16b, v1.16b
  .long  0x4e211c61                          // and           v1.16b, v3.16b, v1.16b
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x4e21da03                          // scvtf         v3.4s, v16.4s
  .long  0x4e21d800                          // scvtf         v0.4s, v0.4s
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x4e21d830                          // scvtf         v16.4s, v1.4s
  .long  0x6e31dc63                          // fmul          v3.4s, v3.4s, v17.4s
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x6e31dc41                          // fmul          v1.4s, v2.4s, v17.4s
  .long  0x6e31de02                          // fmul          v2.4s, v16.4s, v17.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x540001a0                          // b.eq          3288 <sk_load_8888_aarch64+0xa4>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x540000c0                          // b.eq          3278 <sk_load_8888_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffc81                          // b.ne          31f8 <sk_load_8888_aarch64+0x14>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4e040fe0                          // dup           v0.4s, wzr
  .long  0x4d408120                          // ld1           {v0.s}[2], [x9]
  .long  0xfd400101                          // ldr           d1, [x8]
  .long  0x6e014000                          // ext           v0.16b, v0.16b, v1.16b, #8
  .long  0x6e004000                          // ext           v0.16b, v0.16b, v0.16b, #8
  .long  0x17ffffdd                          // b             31f8 <sk_load_8888_aarch64+0x14>
  .long  0x4e040fe0                          // dup           v0.4s, wzr
  .long  0x0d408100                          // ld1           {v0.s}[0], [x8]
  .long  0x17ffffda                          // b             31f8 <sk_load_8888_aarch64+0x14>

HIDDEN _sk_load_8888_dst_aarch64
.globl _sk_load_8888_dst_aarch64
FUNCTION(_sk_load_8888_dst_aarch64)
_sk_load_8888_dst_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020908                          // add           x8, x8, x2, lsl #2
  .long  0xb50002e4                          // cbnz          x4, 32fc <sk_load_8888_dst_aarch64+0x68>
  .long  0x3dc00104                          // ldr           q4, [x8]
  .long  0x6f00e625                          // movi          v5.2d, #0xff000000ff
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x6f380486                          // ushr          v6.4s, v4.4s, #8
  .long  0x6f300487                          // ushr          v7.4s, v4.4s, #16
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x6f280490                          // ushr          v16.4s, v4.4s, #24
  .long  0x4e251c84                          // and           v4.16b, v4.16b, v5.16b
  .long  0x4e251cc6                          // and           v6.16b, v6.16b, v5.16b
  .long  0x4e251ce5                          // and           v5.16b, v7.16b, v5.16b
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x4e21da07                          // scvtf         v7.4s, v16.4s
  .long  0x4e21d884                          // scvtf         v4.4s, v4.4s
  .long  0x4e21d8c6                          // scvtf         v6.4s, v6.4s
  .long  0x4e21d8b0                          // scvtf         v16.4s, v5.4s
  .long  0x6e31dce7                          // fmul          v7.4s, v7.4s, v17.4s
  .long  0x6e31dc84                          // fmul          v4.4s, v4.4s, v17.4s
  .long  0x6e31dcc5                          // fmul          v5.4s, v6.4s, v17.4s
  .long  0x6e31de06                          // fmul          v6.4s, v16.4s, v17.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x540001a0                          // b.eq          3338 <sk_load_8888_dst_aarch64+0xa4>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x540000c0                          // b.eq          3328 <sk_load_8888_dst_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffc81                          // b.ne          32a8 <sk_load_8888_dst_aarch64+0x14>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4e040fe4                          // dup           v4.4s, wzr
  .long  0x4d408124                          // ld1           {v4.s}[2], [x9]
  .long  0xfd400105                          // ldr           d5, [x8]
  .long  0x6e054084                          // ext           v4.16b, v4.16b, v5.16b, #8
  .long  0x6e044084                          // ext           v4.16b, v4.16b, v4.16b, #8
  .long  0x17ffffdd                          // b             32a8 <sk_load_8888_dst_aarch64+0x14>
  .long  0x4e040fe4                          // dup           v4.4s, wzr
  .long  0x0d408104                          // ld1           {v4.s}[0], [x8]
  .long  0x17ffffda                          // b             32a8 <sk_load_8888_dst_aarch64+0x14>

HIDDEN _sk_gather_8888_aarch64
.globl _sk_gather_8888_aarch64
FUNCTION(_sk_gather_8888_aarch64)
_sk_gather_8888_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c490c                          // add           x12, x8, w12, uxtw #2
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408180                          // ld1           {v0.s}[0], [x12]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0xb86a590a                          // ldr           w10, [x8, w10, uxtw #2]
  .long  0xb86b5908                          // ldr           w8, [x8, w11, uxtw #2]
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0x6f00e621                          // movi          v1.2d, #0xff000000ff
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e141d40                          // mov           v0.s[2], w10
  .long  0x4e1c1d00                          // mov           v0.s[3], w8
  .long  0x6f380410                          // ushr          v16.4s, v0.4s, #8
  .long  0x6f300411                          // ushr          v17.4s, v0.4s, #16
  .long  0x4e211c03                          // and           v3.16b, v0.16b, v1.16b
  .long  0x6f280400                          // ushr          v0.4s, v0.4s, #24
  .long  0x4e211e10                          // and           v16.16b, v16.16b, v1.16b
  .long  0x4e211e21                          // and           v1.16b, v17.16b, v1.16b
  .long  0x4e040d22                          // dup           v2.4s, w9
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x4e21d811                          // scvtf         v17.4s, v0.4s
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x4e21d832                          // scvtf         v18.4s, v1.4s
  .long  0x6e22dc60                          // fmul          v0.4s, v3.4s, v2.4s
  .long  0x6e22de23                          // fmul          v3.4s, v17.4s, v2.4s
  .long  0x6e22de01                          // fmul          v1.4s, v16.4s, v2.4s
  .long  0x6e22de42                          // fmul          v2.4s, v18.4s, v2.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_8888_aarch64
.globl _sk_store_8888_aarch64
FUNCTION(_sk_store_8888_aarch64)
_sk_store_8888_aarch64:
  .long  0x52a86fe9                          // mov           w9, #0x437f0000
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x6e30dc32                          // fmul          v18.4s, v1.4s, v16.4s
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x4f285652                          // shl           v18.4s, v18.4s, #8
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x6e30dc52                          // fmul          v18.4s, v2.4s, v16.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4f305652                          // shl           v18.4s, v18.4s, #16
  .long  0x4f385610                          // shl           v16.4s, v16.4s, #24
  .long  0x4eb21e31                          // orr           v17.16b, v17.16b, v18.16b
  .long  0x8b020908                          // add           x8, x8, x2, lsl #2
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0xb50000a4                          // cbnz          x4, 343c <sk_store_8888_aarch64+0x60>
  .long  0x3d800110                          // str           q16, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000120                          // b.eq          3468 <sk_store_8888_aarch64+0x8c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          3460 <sk_store_8888_aarch64+0x84>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffee1                          // b.ne          3430 <sk_store_8888_aarch64+0x54>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4d008130                          // st1           {v16.s}[2], [x9]
  .long  0xfd000110                          // str           d16, [x8]
  .long  0x17fffff3                          // b             3430 <sk_store_8888_aarch64+0x54>
  .long  0x0d008110                          // st1           {v16.s}[0], [x8]
  .long  0x17fffff1                          // b             3430 <sk_store_8888_aarch64+0x54>

HIDDEN _sk_load_f16_aarch64
.globl _sk_load_f16_aarch64
FUNCTION(_sk_load_f16_aarch64)
_sk_load_f16_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0xb5000124                          // cbnz          x4, 34a0 <sk_load_f16_aarch64+0x30>
  .long  0x0c400510                          // ld4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x0e217a00                          // fcvtl         v0.4s, v16.4h
  .long  0x0e217a21                          // fcvtl         v1.4s, v17.4h
  .long  0x0e217a42                          // fcvtl         v2.4s, v18.4h
  .long  0x0e217a63                          // fcvtl         v3.4s, v19.4h
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d606110                          // ld4           {v16.h-v19.h}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fffee0                          // b.eq          3484 <sk_load_f16_aarch64+0x14>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x0d606930                          // ld4           {v16.h-v19.h}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffe63                          // b.cc          3484 <sk_load_f16_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d607110                          // ld4           {v16.h-v19.h}[2], [x8]
  .long  0x17fffff0                          // b             3484 <sk_load_f16_aarch64+0x14>

HIDDEN _sk_load_f16_dst_aarch64
.globl _sk_load_f16_dst_aarch64
FUNCTION(_sk_load_f16_dst_aarch64)
_sk_load_f16_dst_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0xb5000124                          // cbnz          x4, 34f8 <sk_load_f16_dst_aarch64+0x30>
  .long  0x0c400510                          // ld4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x0e217a04                          // fcvtl         v4.4s, v16.4h
  .long  0x0e217a25                          // fcvtl         v5.4s, v17.4h
  .long  0x0e217a46                          // fcvtl         v6.4s, v18.4h
  .long  0x0e217a67                          // fcvtl         v7.4s, v19.4h
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d606110                          // ld4           {v16.h-v19.h}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fffee0                          // b.eq          34dc <sk_load_f16_dst_aarch64+0x14>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x0d606930                          // ld4           {v16.h-v19.h}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffe63                          // b.cc          34dc <sk_load_f16_dst_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d607110                          // ld4           {v16.h-v19.h}[2], [x8]
  .long  0x17fffff0                          // b             34dc <sk_load_f16_dst_aarch64+0x14>

HIDDEN _sk_gather_f16_aarch64
.globl _sk_gather_f16_aarch64
FUNCTION(_sk_gather_f16_aarch64)
_sk_gather_f16_aarch64:
  .long  0xa9bf7bfd                          // stp           x29, x30, [sp, #-16]!
  .long  0xd100c3e9                          // sub           x9, sp, #0x30
  .long  0x910003fd                          // mov           x29, sp
  .long  0x927be93f                          // and           sp, x9, #0xffffffffffffffe0
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c4d0c                          // add           x12, x8, w12, uxtw #3
  .long  0x8b2a4d0a                          // add           x10, x8, w10, uxtw #3
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408540                          // ld1           {v0.d}[0], [x10]
  .long  0x0d408581                          // ld1           {v1.d}[0], [x12]
  .long  0x8b294d09                          // add           x9, x8, w9, uxtw #3
  .long  0x8b2b4d08                          // add           x8, x8, w11, uxtw #3
  .long  0x4d408500                          // ld1           {v0.d}[1], [x8]
  .long  0x4d408521                          // ld1           {v1.d}[1], [x9]
  .long  0x910003e8                          // mov           x8, sp
  .long  0xad0003e1                          // stp           q1, q0, [sp]
  .long  0x0c400510                          // ld4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400428                          // ldr           x8, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x0e217a00                          // fcvtl         v0.4s, v16.4h
  .long  0x0e217a21                          // fcvtl         v1.4s, v17.4h
  .long  0x0e217a42                          // fcvtl         v2.4s, v18.4h
  .long  0x0e217a63                          // fcvtl         v3.4s, v19.4h
  .long  0xd63f0100                          // blr           x8
  .long  0x910003bf                          // mov           sp, x29
  .long  0xa8c17bfd                          // ldp           x29, x30, [sp], #16
  .long  0xd65f03c0                          // ret

HIDDEN _sk_store_f16_aarch64
.globl _sk_store_f16_aarch64
FUNCTION(_sk_store_f16_aarch64)
_sk_store_f16_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x0e216810                          // fcvtn         v16.4h, v0.4s
  .long  0x0e216831                          // fcvtn         v17.4h, v1.4s
  .long  0x0e216852                          // fcvtn         v18.4h, v2.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x0e216873                          // fcvtn         v19.4h, v3.4s
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0xb50000a4                          // cbnz          x4, 35e0 <sk_store_f16_aarch64+0x30>
  .long  0x0c000510                          // st4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x0d206110                          // st4           {v16.h-v19.h}[0], [x8]
  .long  0x54ffff60                          // b.eq          35d4 <sk_store_f16_aarch64+0x24>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x0d206930                          // st4           {v16.h-v19.h}[1], [x9]
  .long  0x54fffee3                          // b.cc          35d4 <sk_store_f16_aarch64+0x24>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d207110                          // st4           {v16.h-v19.h}[2], [x8]
  .long  0x17fffff4                          // b             35d4 <sk_store_f16_aarch64+0x24>

HIDDEN _sk_load_u16_be_aarch64
.globl _sk_load_u16_be_aarch64
FUNCTION(_sk_load_u16_be_aarch64)
_sk_load_u16_be_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0xb5000404                          // cbnz          x4, 3694 <sk_load_u16_be_aarch64+0x8c>
  .long  0x0c400500                          // ld4           {v0.4h-v3.4h}, [x8]
  .long  0x0f185410                          // shl           v16.4h, v0.4h, #8
  .long  0x2f180411                          // ushr          v17.4h, v0.4h, #8
  .long  0x0f185432                          // shl           v18.4h, v1.4h, #8
  .long  0x2f180433                          // ushr          v19.4h, v1.4h, #8
  .long  0x0f185454                          // shl           v20.4h, v2.4h, #8
  .long  0x2f180455                          // ushr          v21.4h, v2.4h, #8
  .long  0x0f185476                          // shl           v22.4h, v3.4h, #8
  .long  0x2f180460                          // ushr          v0.4h, v3.4h, #8
  .long  0x52a6f008                          // mov           w8, #0x37800000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x0eb11e01                          // orr           v1.8b, v16.8b, v17.8b
  .long  0x0eb31e42                          // orr           v2.8b, v18.8b, v19.8b
  .long  0x0eb51e90                          // orr           v16.8b, v20.8b, v21.8b
  .long  0x0ea01ec0                          // orr           v0.8b, v22.8b, v0.8b
  .long  0x72801008                          // movk          w8, #0x80
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x2f10a610                          // uxtl          v16.4s, v16.4h
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e21da10                          // ucvtf         v16.4s, v16.4s
  .long  0x6e21d811                          // ucvtf         v17.4s, v0.4s
  .long  0x6e23dc20                          // fmul          v0.4s, v1.4s, v3.4s
  .long  0x6e23dc41                          // fmul          v1.4s, v2.4s, v3.4s
  .long  0x6e23de02                          // fmul          v2.4s, v16.4s, v3.4s
  .long  0x6e23de23                          // fmul          v3.4s, v17.4s, v3.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d606100                          // ld4           {v0.h-v3.h}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fffc00                          // b.eq          361c <sk_load_u16_be_aarch64+0x14>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x0d606920                          // ld4           {v0.h-v3.h}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffb83                          // b.cc          361c <sk_load_u16_be_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d607100                          // ld4           {v0.h-v3.h}[2], [x8]
  .long  0x17ffffd9                          // b             361c <sk_load_u16_be_aarch64+0x14>

HIDDEN _sk_load_rgb_u16_be_aarch64
.globl _sk_load_rgb_u16_be_aarch64
FUNCTION(_sk_load_rgb_u16_be_aarch64)
_sk_load_rgb_u16_be_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x321f07e9                          // orr           w9, wzr, #0x6
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x9b092048                          // madd          x8, x2, x9, x8
  .long  0xb5000384                          // cbnz          x4, 373c <sk_load_rgb_u16_be_aarch64+0x80>
  .long  0x0c404500                          // ld3           {v0.4h-v2.4h}, [x8]
  .long  0x0f185403                          // shl           v3.4h, v0.4h, #8
  .long  0x2f180410                          // ushr          v16.4h, v0.4h, #8
  .long  0x0f185431                          // shl           v17.4h, v1.4h, #8
  .long  0x2f180432                          // ushr          v18.4h, v1.4h, #8
  .long  0x0f185453                          // shl           v19.4h, v2.4h, #8
  .long  0x2f180440                          // ushr          v0.4h, v2.4h, #8
  .long  0x52a6f008                          // mov           w8, #0x37800000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x0eb01c61                          // orr           v1.8b, v3.8b, v16.8b
  .long  0x0eb21e23                          // orr           v3.8b, v17.8b, v18.8b
  .long  0x0ea01e60                          // orr           v0.8b, v19.8b, v0.8b
  .long  0x72801008                          // movk          w8, #0x80
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a463                          // uxtl          v3.4s, v3.4h
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d863                          // ucvtf         v3.4s, v3.4s
  .long  0x6e21d810                          // ucvtf         v16.4s, v0.4s
  .long  0x6e22dc20                          // fmul          v0.4s, v1.4s, v2.4s
  .long  0x6e22dc61                          // fmul          v1.4s, v3.4s, v2.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x0d406100                          // ld3           {v0.h-v2.h}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fffc80                          // b.eq          36d4 <sk_load_rgb_u16_be_aarch64+0x18>  // b.none
  .long  0x91001909                          // add           x9, x8, #0x6
  .long  0x0d406920                          // ld3           {v0.h-v2.h}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffc03                          // b.cc          36d4 <sk_load_rgb_u16_be_aarch64+0x18>  // b.lo, b.ul, b.last
  .long  0x91003108                          // add           x8, x8, #0xc
  .long  0x0d407100                          // ld3           {v0.h-v2.h}[2], [x8]
  .long  0x17ffffdd                          // b             36d4 <sk_load_rgb_u16_be_aarch64+0x18>

HIDDEN _sk_store_u16_be_aarch64
.globl _sk_store_u16_be_aarch64
FUNCTION(_sk_store_u16_be_aarch64)
_sk_store_u16_be_aarch64:
  .long  0x52a8efe9                          // mov           w9, #0x477f0000
  .long  0x729fe009                          // movk          w9, #0xff00
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x6e34dc10                          // fmul          v16.4s, v0.4s, v20.4s
  .long  0x6e34dc31                          // fmul          v17.4s, v1.4s, v20.4s
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0x0e612a31                          // xtn           v17.4h, v17.4s
  .long  0x0f185612                          // shl           v18.4h, v16.4h, #8
  .long  0x2f180610                          // ushr          v16.4h, v16.4h, #8
  .long  0x0f185635                          // shl           v21.4h, v17.4h, #8
  .long  0x2f180636                          // ushr          v22.4h, v17.4h, #8
  .long  0x0eb01e50                          // orr           v16.8b, v18.8b, v16.8b
  .long  0x0eb61eb1                          // orr           v17.8b, v21.8b, v22.8b
  .long  0x6e34dc55                          // fmul          v21.4s, v2.4s, v20.4s
  .long  0x6e34dc74                          // fmul          v20.4s, v3.4s, v20.4s
  .long  0x6e21aab5                          // fcvtnu        v21.4s, v21.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e21aa94                          // fcvtnu        v20.4s, v20.4s
  .long  0x0e612ab5                          // xtn           v21.4h, v21.4s
  .long  0x0e612a94                          // xtn           v20.4h, v20.4s
  .long  0x0f1856b6                          // shl           v22.4h, v21.4h, #8
  .long  0x2f1806b5                          // ushr          v21.4h, v21.4h, #8
  .long  0x0eb51ed2                          // orr           v18.8b, v22.8b, v21.8b
  .long  0x0f185695                          // shl           v21.4h, v20.4h, #8
  .long  0x2f180694                          // ushr          v20.4h, v20.4h, #8
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0x0eb41eb3                          // orr           v19.8b, v21.8b, v20.8b
  .long  0xb50000a4                          // cbnz          x4, 37f0 <sk_store_u16_be_aarch64+0x8c>
  .long  0x0c000510                          // st4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x0d206110                          // st4           {v16.h-v19.h}[0], [x8]
  .long  0x54ffff60                          // b.eq          37e4 <sk_store_u16_be_aarch64+0x80>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x0d206930                          // st4           {v16.h-v19.h}[1], [x9]
  .long  0x54fffee3                          // b.cc          37e4 <sk_store_u16_be_aarch64+0x80>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d207110                          // st4           {v16.h-v19.h}[2], [x8]
  .long  0x17fffff4                          // b             37e4 <sk_store_u16_be_aarch64+0x80>

HIDDEN _sk_load_f32_aarch64
.globl _sk_load_f32_aarch64
FUNCTION(_sk_load_f32_aarch64)
_sk_load_f32_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b021108                          // add           x8, x8, x2, lsl #4
  .long  0xb50000a4                          // cbnz          x4, 3838 <sk_load_f32_aarch64+0x20>
  .long  0x4c400900                          // ld4           {v0.4s-v3.4s}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d60a100                          // ld4           {v0.s-v3.s}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54ffff60                          // b.eq          382c <sk_load_f32_aarch64+0x14>  // b.none
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x0d60b120                          // ld4           {v0.s-v3.s}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffee3                          // b.cc          382c <sk_load_f32_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91008108                          // add           x8, x8, #0x20
  .long  0x4d60a100                          // ld4           {v0.s-v3.s}[2], [x8]
  .long  0x17fffff4                          // b             382c <sk_load_f32_aarch64+0x14>

HIDDEN _sk_load_f32_dst_aarch64
.globl _sk_load_f32_dst_aarch64
FUNCTION(_sk_load_f32_dst_aarch64)
_sk_load_f32_dst_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b021108                          // add           x8, x8, x2, lsl #4
  .long  0xb50000a4                          // cbnz          x4, 3880 <sk_load_f32_dst_aarch64+0x20>
  .long  0x4c400904                          // ld4           {v4.4s-v7.4s}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d60a104                          // ld4           {v4.s-v7.s}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54ffff60                          // b.eq          3874 <sk_load_f32_dst_aarch64+0x14>  // b.none
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x0d60b124                          // ld4           {v4.s-v7.s}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffee3                          // b.cc          3874 <sk_load_f32_dst_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91008108                          // add           x8, x8, #0x20
  .long  0x4d60a104                          // ld4           {v4.s-v7.s}[2], [x8]
  .long  0x17fffff4                          // b             3874 <sk_load_f32_dst_aarch64+0x14>

HIDDEN _sk_store_f32_aarch64
.globl _sk_store_f32_aarch64
FUNCTION(_sk_store_f32_aarch64)
_sk_store_f32_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b021108                          // add           x8, x8, x2, lsl #4
  .long  0xb50000a4                          // cbnz          x4, 38c8 <sk_store_f32_aarch64+0x20>
  .long  0x4c000900                          // st4           {v0.4s-v3.4s}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x0d20a100                          // st4           {v0.s-v3.s}[0], [x8]
  .long  0x54ffff60                          // b.eq          38bc <sk_store_f32_aarch64+0x14>  // b.none
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x0d20b120                          // st4           {v0.s-v3.s}[1], [x9]
  .long  0x54fffee3                          // b.cc          38bc <sk_store_f32_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91008108                          // add           x8, x8, #0x20
  .long  0x4d20a100                          // st4           {v0.s-v3.s}[2], [x8]
  .long  0x17fffff4                          // b             38bc <sk_store_f32_aarch64+0x14>

HIDDEN _sk_clamp_x_aarch64
.globl _sk_clamp_x_aarch64
FUNCTION(_sk_clamp_x_aarch64)
_sk_clamp_x_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0x4e20f620                          // fmax          v0.4s, v17.4s, v0.4s
  .long  0x6f07e7f1                          // movi          v17.2d, #0xffffffffffffffff
  .long  0x4d40c910                          // ld1r          {v16.4s}, [x8]
  .long  0x4eb18610                          // add           v16.4s, v16.4s, v17.4s
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_y_aarch64
.globl _sk_clamp_y_aarch64
FUNCTION(_sk_clamp_y_aarch64)
_sk_clamp_y_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0x4e21f621                          // fmax          v1.4s, v17.4s, v1.4s
  .long  0x6f07e7f1                          // movi          v17.2d, #0xffffffffffffffff
  .long  0x4d40c910                          // ld1r          {v16.4s}, [x8]
  .long  0x4eb18610                          // add           v16.4s, v16.4s, v17.4s
  .long  0x4eb0f421                          // fmin          v1.4s, v1.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_repeat_x_aarch64
.globl _sk_repeat_x_aarch64
FUNCTION(_sk_repeat_x_aarch64)
_sk_repeat_x_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ddfc910                          // ld1r          {v16.4s}, [x8], #4
  .long  0xbd400111                          // ldr           s17, [x8]
  .long  0x4f919011                          // fmul          v17.4s, v0.4s, v17.s[0]
  .long  0x4e219a31                          // frintm        v17.4s, v17.4s
  .long  0x4eb1ce00                          // fmls          v0.4s, v16.4s, v17.4s
  .long  0x6f07e7f1                          // movi          v17.2d, #0xffffffffffffffff
  .long  0x4eb18610                          // add           v16.4s, v16.4s, v17.4s
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_repeat_y_aarch64
.globl _sk_repeat_y_aarch64
FUNCTION(_sk_repeat_y_aarch64)
_sk_repeat_y_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ddfc910                          // ld1r          {v16.4s}, [x8], #4
  .long  0xbd400111                          // ldr           s17, [x8]
  .long  0x4f919031                          // fmul          v17.4s, v1.4s, v17.s[0]
  .long  0x4e219a31                          // frintm        v17.4s, v17.4s
  .long  0x4eb1ce01                          // fmls          v1.4s, v16.4s, v17.4s
  .long  0x6f07e7f1                          // movi          v17.2d, #0xffffffffffffffff
  .long  0x4eb18610                          // add           v16.4s, v16.4s, v17.4s
  .long  0x4eb0f421                          // fmin          v1.4s, v1.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_mirror_x_aarch64
.globl _sk_mirror_x_aarch64
FUNCTION(_sk_mirror_x_aarch64)
_sk_mirror_x_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x1e2c1012                          // fmov          s18, #5.000000000000000000e-01
  .long  0x6f07e7f3                          // movi          v19.2d, #0xffffffffffffffff
  .long  0x2d404111                          // ldp           s17, s16, [x8]
  .long  0x1e320a10                          // fmul          s16, s16, s18
  .long  0x4e040632                          // dup           v18.4s, v17.s[0]
  .long  0x4eb2d400                          // fsub          v0.4s, v0.4s, v18.4s
  .long  0x4f909010                          // fmul          v16.4s, v0.4s, v16.s[0]
  .long  0x1e312a31                          // fadd          s17, s17, s17
  .long  0x4e219a10                          // frintm        v16.4s, v16.4s
  .long  0x4f915200                          // fmls          v0.4s, v16.4s, v17.s[0]
  .long  0x4eb2d400                          // fsub          v0.4s, v0.4s, v18.4s
  .long  0x4eb38653                          // add           v19.4s, v18.4s, v19.4s
  .long  0x4ea0f800                          // fabs          v0.4s, v0.4s
  .long  0x4eb3f400                          // fmin          v0.4s, v0.4s, v19.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_mirror_y_aarch64
.globl _sk_mirror_y_aarch64
FUNCTION(_sk_mirror_y_aarch64)
_sk_mirror_y_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x1e2c1012                          // fmov          s18, #5.000000000000000000e-01
  .long  0x6f07e7f3                          // movi          v19.2d, #0xffffffffffffffff
  .long  0x2d404111                          // ldp           s17, s16, [x8]
  .long  0x1e320a10                          // fmul          s16, s16, s18
  .long  0x4e040632                          // dup           v18.4s, v17.s[0]
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4f909030                          // fmul          v16.4s, v1.4s, v16.s[0]
  .long  0x1e312a31                          // fadd          s17, s17, s17
  .long  0x4e219a10                          // frintm        v16.4s, v16.4s
  .long  0x4f915201                          // fmls          v1.4s, v16.4s, v17.s[0]
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4eb38653                          // add           v19.4s, v18.4s, v19.4s
  .long  0x4ea0f821                          // fabs          v1.4s, v1.4s
  .long  0x4eb3f421                          // fmin          v1.4s, v1.4s, v19.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_x_1_aarch64
.globl _sk_clamp_x_1_aarch64
FUNCTION(_sk_clamp_x_1_aarch64)
_sk_clamp_x_1_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x4e20f600                          // fmax          v0.4s, v16.4s, v0.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_repeat_x_1_aarch64
.globl _sk_repeat_x_1_aarch64
FUNCTION(_sk_repeat_x_1_aarch64)
_sk_repeat_x_1_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e219810                          // frintm        v16.4s, v0.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_mirror_x_1_aarch64
.globl _sk_mirror_x_1_aarch64
FUNCTION(_sk_mirror_x_1_aarch64)
_sk_mirror_x_1_aarch64:
  .long  0x4f07f610                          // fmov          v16.4s, #-1.000000000000000000e+00
  .long  0x4f0167f1                          // movi          v17.4s, #0x3f, lsl #24
  .long  0x4e30d400                          // fadd          v0.4s, v0.4s, v16.4s
  .long  0x6e31dc11                          // fmul          v17.4s, v0.4s, v17.4s
  .long  0x4e219a31                          // frintm        v17.4s, v17.4s
  .long  0x4e31d631                          // fadd          v17.4s, v17.4s, v17.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb1d400                          // fsub          v0.4s, v0.4s, v17.4s
  .long  0x4e30d400                          // fadd          v0.4s, v0.4s, v16.4s
  .long  0x4ea0f800                          // fabs          v0.4s, v0.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_luminance_to_alpha_aarch64
.globl _sk_luminance_to_alpha_aarch64
FUNCTION(_sk_luminance_to_alpha_aarch64)
_sk_luminance_to_alpha_aarch64:
  .long  0x52a7cb28                          // mov           w8, #0x3e590000
  .long  0x72967a08                          // movk          w8, #0xb3d0
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7e6e8                          // mov           w8, #0x3f370000
  .long  0x7282eb28                          // movk          w8, #0x1759
  .long  0x4ea01c10                          // mov           v16.16b, v0.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a7b268                          // mov           w8, #0x3d930000
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x729bb308                          // movk          w8, #0xdd98
  .long  0x6e20dc23                          // fmul          v3.4s, v1.4s, v0.4s
  .long  0x4e30ce23                          // fmla          v3.4s, v17.4s, v16.4s
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x4e22ce03                          // fmla          v3.4s, v16.4s, v2.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_2x3_aarch64
.globl _sk_matrix_2x3_aarch64
FUNCTION(_sk_matrix_2x3_aarch64)
_sk_matrix_2x3_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100410a                          // add           x10, x8, #0x10
  .long  0x4ddfc932                          // ld1r          {v18.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x2d415113                          // ldp           s19, s20, [x8, #8]
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x4f931030                          // fmla          v16.4s, v1.4s, v19.s[0]
  .long  0xbd400133                          // ldr           s19, [x9]
  .long  0x4f941031                          // fmla          v17.4s, v1.4s, v20.s[0]
  .long  0x4e20ce50                          // fmla          v16.4s, v18.4s, v0.4s
  .long  0x4f931011                          // fmla          v17.4s, v0.4s, v19.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_3x4_aarch64
.globl _sk_matrix_3x4_aarch64
FUNCTION(_sk_matrix_3x4_aarch64)
_sk_matrix_3x4_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100910a                          // add           x10, x8, #0x24
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9100a10a                          // add           x10, x8, #0x28
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9100b10a                          // add           x10, x8, #0x2c
  .long  0x2d435514                          // ldp           s20, s21, [x8, #24]
  .long  0xbd402116                          // ldr           s22, [x8, #32]
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x4f941050                          // fmla          v16.4s, v2.4s, v20.s[0]
  .long  0x4f951051                          // fmla          v17.4s, v2.4s, v21.s[0]
  .long  0x4f961052                          // fmla          v18.4s, v2.4s, v22.s[0]
  .long  0x2d425502                          // ldp           s2, s21, [x8, #16]
  .long  0x2d415d14                          // ldp           s20, s23, [x8, #8]
  .long  0x4f821031                          // fmla          v17.4s, v1.4s, v2.s[0]
  .long  0xbd400122                          // ldr           s2, [x9]
  .long  0x4f971030                          // fmla          v16.4s, v1.4s, v23.s[0]
  .long  0x4f951032                          // fmla          v18.4s, v1.4s, v21.s[0]
  .long  0x4e20ce70                          // fmla          v16.4s, v19.4s, v0.4s
  .long  0x4f941012                          // fmla          v18.4s, v0.4s, v20.s[0]
  .long  0x4f821011                          // fmla          v17.4s, v0.4s, v2.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_4x5_aarch64
.globl _sk_matrix_4x5_aarch64
FUNCTION(_sk_matrix_4x5_aarch64)
_sk_matrix_4x5_aarch64:
  .long  0xf9400029                          // ldr           x9, [x1]
  .long  0xaa0903e8                          // mov           x8, x9
  .long  0x9101012a                          // add           x10, x9, #0x40
  .long  0x4ddfc914                          // ld1r          {v20.4s}, [x8], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9101112a                          // add           x10, x9, #0x44
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9101212a                          // add           x10, x9, #0x48
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x2d465533                          // ldp           s19, s21, [x9, #48]
  .long  0x2d475d36                          // ldp           s22, s23, [x9, #56]
  .long  0x9101312a                          // add           x10, x9, #0x4c
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f931070                          // fmla          v16.4s, v3.4s, v19.s[0]
  .long  0x4d40c953                          // ld1r          {v19.4s}, [x10]
  .long  0x4f951071                          // fmla          v17.4s, v3.4s, v21.s[0]
  .long  0x4f961072                          // fmla          v18.4s, v3.4s, v22.s[0]
  .long  0x2d445935                          // ldp           s21, s22, [x9, #32]
  .long  0x4f971073                          // fmla          v19.4s, v3.4s, v23.s[0]
  .long  0x2d455d23                          // ldp           s3, s23, [x9, #40]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x4f951050                          // fmla          v16.4s, v2.4s, v21.s[0]
  .long  0x4f961051                          // fmla          v17.4s, v2.4s, v22.s[0]
  .long  0x2d425935                          // ldp           s21, s22, [x9, #16]
  .long  0x4f971053                          // fmla          v19.4s, v2.4s, v23.s[0]
  .long  0x4f831052                          // fmla          v18.4s, v2.4s, v3.s[0]
  .long  0x2d410d22                          // ldp           s2, s3, [x9, #8]
  .long  0x4f951030                          // fmla          v16.4s, v1.4s, v21.s[0]
  .long  0x2d435d35                          // ldp           s21, s23, [x9, #24]
  .long  0x4f961031                          // fmla          v17.4s, v1.4s, v22.s[0]
  .long  0xbd400116                          // ldr           s22, [x8]
  .long  0x4e20ce90                          // fmla          v16.4s, v20.4s, v0.4s
  .long  0x4f951032                          // fmla          v18.4s, v1.4s, v21.s[0]
  .long  0x4f971033                          // fmla          v19.4s, v1.4s, v23.s[0]
  .long  0x4f821012                          // fmla          v18.4s, v0.4s, v2.s[0]
  .long  0x4f831013                          // fmla          v19.4s, v0.4s, v3.s[0]
  .long  0x4f961011                          // fmla          v17.4s, v0.4s, v22.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_4x3_aarch64
.globl _sk_matrix_4x3_aarch64
FUNCTION(_sk_matrix_4x3_aarch64)
_sk_matrix_4x3_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100810a                          // add           x10, x8, #0x20
  .long  0x4ddfc932                          // ld1r          {v18.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9100910a                          // add           x10, x8, #0x24
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9100a10a                          // add           x10, x8, #0x28
  .long  0x2d425113                          // ldp           s19, s20, [x8, #16]
  .long  0x4d40c942                          // ld1r          {v2.4s}, [x10]
  .long  0x9100b10a                          // add           x10, x8, #0x2c
  .long  0x2d435915                          // ldp           s21, s22, [x8, #24]
  .long  0x4d40c943                          // ld1r          {v3.4s}, [x10]
  .long  0x4f931030                          // fmla          v16.4s, v1.4s, v19.s[0]
  .long  0x4e20ce50                          // fmla          v16.4s, v18.4s, v0.4s
  .long  0xbd400132                          // ldr           s18, [x9]
  .long  0x4f941031                          // fmla          v17.4s, v1.4s, v20.s[0]
  .long  0x4f951022                          // fmla          v2.4s, v1.4s, v21.s[0]
  .long  0x4f961023                          // fmla          v3.4s, v1.4s, v22.s[0]
  .long  0x2d414d01                          // ldp           s1, s19, [x8, #8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f921011                          // fmla          v17.4s, v0.4s, v18.s[0]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x4f811002                          // fmla          v2.4s, v0.4s, v1.s[0]
  .long  0x4f931003                          // fmla          v3.4s, v0.4s, v19.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_perspective_aarch64
.globl _sk_matrix_perspective_aarch64
FUNCTION(_sk_matrix_perspective_aarch64)
_sk_matrix_perspective_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4ddfc930                          // ld1r          {v16.4s}, [x9], #4
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9100810a                          // add           x10, x8, #0x20
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x2d41d113                          // ldp           s19, s20, [x8, #12]
  .long  0x2d435915                          // ldp           s21, s22, [x8, #24]
  .long  0x91002108                          // add           x8, x8, #0x8
  .long  0x4f941031                          // fmla          v17.4s, v1.4s, v20.s[0]
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f961032                          // fmla          v18.4s, v1.4s, v22.s[0]
  .long  0xbd400136                          // ldr           s22, [x9]
  .long  0x4f951012                          // fmla          v18.4s, v0.4s, v21.s[0]
  .long  0x4f931011                          // fmla          v17.4s, v0.4s, v19.s[0]
  .long  0x4f961034                          // fmla          v20.4s, v1.4s, v22.s[0]
  .long  0x4ea1da41                          // frecpe        v1.4s, v18.4s
  .long  0x4e21fe52                          // frecps        v18.4s, v18.4s, v1.4s
  .long  0x6e32dc32                          // fmul          v18.4s, v1.4s, v18.4s
  .long  0x4e20ce14                          // fmla          v20.4s, v16.4s, v0.4s
  .long  0x6e32de21                          // fmul          v1.4s, v17.4s, v18.4s
  .long  0x6e32de80                          // fmul          v0.4s, v20.4s, v18.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_evenly_spaced_gradient_aarch64
.globl _sk_evenly_spaced_gradient_aarch64
FUNCTION(_sk_evenly_spaced_gradient_aarch64)
_sk_evenly_spaced_gradient_aarch64:
  .long  0xd10043ff                          // sub           sp, sp, #0x10
  .long  0xaa0103e8                          // mov           x8, x1
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xf90007e9                          // str           x9, [sp, #8]
  .long  0xf841042a                          // ldr           x10, [x1], #16
  .long  0xa940254b                          // ldp           x11, x9, [x10]
  .long  0xa942354c                          // ldp           x12, x13, [x10, #32]
  .long  0xa9413d4e                          // ldp           x14, x15, [x10, #16]
  .long  0xa9434550                          // ldp           x16, x17, [x10, #48]
  .long  0xd100056b                          // sub           x11, x11, #0x1
  .long  0x9e230161                          // ucvtf         s1, x11
  .long  0xf940214a                          // ldr           x10, [x10, #64]
  .long  0x4f819001                          // fmul          v1.4s, v0.4s, v1.s[0]
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x6f20a422                          // uxtl2         v2.2d, v1.4s
  .long  0x2f20a421                          // uxtl          v1.2d, v1.2s
  .long  0x9e660032                          // fmov          x18, d1
  .long  0x9e660046                          // fmov          x6, d2
  .long  0x4e183c2b                          // mov           x11, v1.d[1]
  .long  0x4e183c45                          // mov           x5, v2.d[1]
  .long  0xbc667921                          // ldr           s1, [x9, x6, lsl #2]
  .long  0xbc6679a2                          // ldr           s2, [x13, x6, lsl #2]
  .long  0xbc6679c3                          // ldr           s3, [x14, x6, lsl #2]
  .long  0xbc667a11                          // ldr           s17, [x16, x6, lsl #2]
  .long  0xbc6679f2                          // ldr           s18, [x15, x6, lsl #2]
  .long  0xbc667a33                          // ldr           s19, [x17, x6, lsl #2]
  .long  0xbc667994                          // ldr           s20, [x12, x6, lsl #2]
  .long  0xbc667955                          // ldr           s21, [x10, x6, lsl #2]
  .long  0x8b120926                          // add           x6, x9, x18, lsl #2
  .long  0x0d4080d6                          // ld1           {v22.s}[0], [x6]
  .long  0x8b1209a6                          // add           x6, x13, x18, lsl #2
  .long  0x0d4080d0                          // ld1           {v16.s}[0], [x6]
  .long  0x8b0b0926                          // add           x6, x9, x11, lsl #2
  .long  0x0d4090d6                          // ld1           {v22.s}[1], [x6]
  .long  0x8b1209c6                          // add           x6, x14, x18, lsl #2
  .long  0x0d4080d7                          // ld1           {v23.s}[0], [x6]
  .long  0x8b120a06                          // add           x6, x16, x18, lsl #2
  .long  0x6e140436                          // mov           v22.s[2], v1.s[0]
  .long  0x0d4080c1                          // ld1           {v1.s}[0], [x6]
  .long  0x8b0b09a6                          // add           x6, x13, x11, lsl #2
  .long  0x0d4090d0                          // ld1           {v16.s}[1], [x6]
  .long  0x8b0b09c6                          // add           x6, x14, x11, lsl #2
  .long  0x0d4090d7                          // ld1           {v23.s}[1], [x6]
  .long  0x8b1209e6                          // add           x6, x15, x18, lsl #2
  .long  0x0d4080d8                          // ld1           {v24.s}[0], [x6]
  .long  0x8b120a26                          // add           x6, x17, x18, lsl #2
  .long  0x6e140450                          // mov           v16.s[2], v2.s[0]
  .long  0x0d4080c2                          // ld1           {v2.s}[0], [x6]
  .long  0x8b0b0a06                          // add           x6, x16, x11, lsl #2
  .long  0x0d4090c1                          // ld1           {v1.s}[1], [x6]
  .long  0x8b0b09e6                          // add           x6, x15, x11, lsl #2
  .long  0x0d4090d8                          // ld1           {v24.s}[1], [x6]
  .long  0x8b120986                          // add           x6, x12, x18, lsl #2
  .long  0x8b120952                          // add           x18, x10, x18, lsl #2
  .long  0x6e140477                          // mov           v23.s[2], v3.s[0]
  .long  0x0d408243                          // ld1           {v3.s}[0], [x18]
  .long  0x8b0b0a32                          // add           x18, x17, x11, lsl #2
  .long  0x6e140621                          // mov           v1.s[2], v17.s[0]
  .long  0x0d4080d1                          // ld1           {v17.s}[0], [x6]
  .long  0x0d409242                          // ld1           {v2.s}[1], [x18]
  .long  0x8b0b0992                          // add           x18, x12, x11, lsl #2
  .long  0x6e140658                          // mov           v24.s[2], v18.s[0]
  .long  0x0d409251                          // ld1           {v17.s}[1], [x18]
  .long  0x6e140662                          // mov           v2.s[2], v19.s[0]
  .long  0xbc657932                          // ldr           s18, [x9, x5, lsl #2]
  .long  0xbc6579b3                          // ldr           s19, [x13, x5, lsl #2]
  .long  0x6e140691                          // mov           v17.s[2], v20.s[0]
  .long  0xbc6579d4                          // ldr           s20, [x14, x5, lsl #2]
  .long  0x6e1c0656                          // mov           v22.s[3], v18.s[0]
  .long  0xbc657a12                          // ldr           s18, [x16, x5, lsl #2]
  .long  0x6e1c0670                          // mov           v16.s[3], v19.s[0]
  .long  0xbc6579f3                          // ldr           s19, [x15, x5, lsl #2]
  .long  0x8b0b094b                          // add           x11, x10, x11, lsl #2
  .long  0x0d409163                          // ld1           {v3.s}[1], [x11]
  .long  0x6e1c0697                          // mov           v23.s[3], v20.s[0]
  .long  0xbc657a34                          // ldr           s20, [x17, x5, lsl #2]
  .long  0x6e1c0641                          // mov           v1.s[3], v18.s[0]
  .long  0xbc657992                          // ldr           s18, [x12, x5, lsl #2]
  .long  0x6e1c0678                          // mov           v24.s[3], v19.s[0]
  .long  0xbc657953                          // ldr           s19, [x10, x5, lsl #2]
  .long  0xf9400505                          // ldr           x5, [x8, #8]
  .long  0x6e1406a3                          // mov           v3.s[2], v21.s[0]
  .long  0x6e1c0682                          // mov           v2.s[3], v20.s[0]
  .long  0x6e1c0651                          // mov           v17.s[3], v18.s[0]
  .long  0x6e1c0663                          // mov           v3.s[3], v19.s[0]
  .long  0x4e20ced0                          // fmla          v16.4s, v22.4s, v0.4s
  .long  0x4e20cee1                          // fmla          v1.4s, v23.4s, v0.4s
  .long  0x4e20cf02                          // fmla          v2.4s, v24.4s, v0.4s
  .long  0x4e20ce23                          // fmla          v3.4s, v17.4s, v0.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x910043ff                          // add           sp, sp, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_gauss_a_to_rgba_aarch64
.globl _sk_gauss_a_to_rgba_aarch64
FUNCTION(_sk_gauss_a_to_rgba_aarch64)
_sk_gauss_a_to_rgba_aarch64:
  .long  0x52b80228                          // mov           w8, #0xc0110000
  .long  0x728205a8                          // movk          w8, #0x102d
  .long  0x52a80729                          // mov           w9, #0x40390000
  .long  0x728f0249                          // movk          w9, #0x7812
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a7cb48                          // mov           w8, #0x3e5a0000
  .long  0x72928408                          // movk          w8, #0x9420
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x52a7c3c9                          // mov           w9, #0x3e1e0000
  .long  0x7293a089                          // movk          w9, #0x9d04
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a73428                          // mov           w8, #0x39a10000
  .long  0x4e23cc01                          // fmla          v1.4s, v0.4s, v3.4s
  .long  0x72830008                          // movk          w8, #0x1800
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e23cc22                          // fmla          v2.4s, v1.4s, v3.4s
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x4e23cc50                          // fmla          v16.4s, v2.4s, v3.4s
  .long  0x4e23ce00                          // fmla          v0.4s, v16.4s, v3.4s
  .long  0x4ea01c01                          // mov           v1.16b, v0.16b
  .long  0x4ea01c02                          // mov           v2.16b, v0.16b
  .long  0x4ea01c03                          // mov           v3.16b, v0.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_gradient_aarch64
.globl _sk_gradient_aarch64
FUNCTION(_sk_gradient_aarch64)
_sk_gradient_aarch64:
  .long  0xd10043ff                          // sub           sp, sp, #0x10
  .long  0x91002028                          // add           x8, x1, #0x8
  .long  0xf90007e8                          // str           x8, [sp, #8]
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0xf100093f                          // cmp           x9, #0x2
  .long  0x540001c3                          // b.cc          3ee8 <sk_gradient_aarch64+0x58>  // b.lo, b.ul, b.last
  .long  0xf940250a                          // ldr           x10, [x8, #72]
  .long  0xd1000529                          // sub           x9, x9, #0x1
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x4f000422                          // movi          v2.4s, #0x1
  .long  0x9100114a                          // add           x10, x10, #0x4
  .long  0x4ddfc943                          // ld1r          {v3.4s}, [x10], #4
  .long  0xd1000529                          // sub           x9, x9, #0x1
  .long  0x6e23e403                          // fcmge         v3.4s, v0.4s, v3.4s
  .long  0x4e221c63                          // and           v3.16b, v3.16b, v2.16b
  .long  0x4ea18461                          // add           v1.4s, v3.4s, v1.4s
  .long  0xb5ffff69                          // cbnz          x9, 3ec8 <sk_gradient_aarch64+0x38>
  .long  0x6f20a431                          // uxtl2         v17.2d, v1.4s
  .long  0x2f20a421                          // uxtl          v1.2d, v1.2s
  .long  0xa940b10a                          // ldp           x10, x12, [x8, #8]
  .long  0xa942b90d                          // ldp           x13, x14, [x8, #40]
  .long  0x9e66002b                          // fmov          x11, d1
  .long  0xa941c10f                          // ldp           x15, x16, [x8, #24]
  .long  0x8b0b0952                          // add           x18, x10, x11, lsl #2
  .long  0xa943a111                          // ldp           x17, x8, [x8, #56]
  .long  0x0d408252                          // ld1           {v18.s}[0], [x18]
  .long  0x8b0b09b2                          // add           x18, x13, x11, lsl #2
  .long  0x0d408250                          // ld1           {v16.s}[0], [x18]
  .long  0x8b0b0992                          // add           x18, x12, x11, lsl #2
  .long  0x0d408253                          // ld1           {v19.s}[0], [x18]
  .long  0x8b0b09d2                          // add           x18, x14, x11, lsl #2
  .long  0x4e183c29                          // mov           x9, v1.d[1]
  .long  0x0d408241                          // ld1           {v1.s}[0], [x18]
  .long  0x8b0b09f2                          // add           x18, x15, x11, lsl #2
  .long  0x0d408254                          // ld1           {v20.s}[0], [x18]
  .long  0x8b0b0a32                          // add           x18, x17, x11, lsl #2
  .long  0x0d408242                          // ld1           {v2.s}[0], [x18]
  .long  0x8b0b0a12                          // add           x18, x16, x11, lsl #2
  .long  0x8b0b090b                          // add           x11, x8, x11, lsl #2
  .long  0x0d408163                          // ld1           {v3.s}[0], [x11]
  .long  0x8b09094b                          // add           x11, x10, x9, lsl #2
  .long  0x0d409172                          // ld1           {v18.s}[1], [x11]
  .long  0x8b0909ab                          // add           x11, x13, x9, lsl #2
  .long  0x0d409170                          // ld1           {v16.s}[1], [x11]
  .long  0x8b09098b                          // add           x11, x12, x9, lsl #2
  .long  0x0d409173                          // ld1           {v19.s}[1], [x11]
  .long  0x8b0909cb                          // add           x11, x14, x9, lsl #2
  .long  0x0d409161                          // ld1           {v1.s}[1], [x11]
  .long  0x8b0909eb                          // add           x11, x15, x9, lsl #2
  .long  0x0d408255                          // ld1           {v21.s}[0], [x18]
  .long  0x9e660232                          // fmov          x18, d17
  .long  0x0d409174                          // ld1           {v20.s}[1], [x11]
  .long  0x4e183e2b                          // mov           x11, v17.d[1]
  .long  0xbc6b7951                          // ldr           s17, [x10, x11, lsl #2]
  .long  0x8b12094a                          // add           x10, x10, x18, lsl #2
  .long  0x4d408152                          // ld1           {v18.s}[2], [x10]
  .long  0x8b1209aa                          // add           x10, x13, x18, lsl #2
  .long  0xbc6b79b6                          // ldr           s22, [x13, x11, lsl #2]
  .long  0x4d408150                          // ld1           {v16.s}[2], [x10]
  .long  0x8b12098a                          // add           x10, x12, x18, lsl #2
  .long  0x4d408153                          // ld1           {v19.s}[2], [x10]
  .long  0x8b1209ca                          // add           x10, x14, x18, lsl #2
  .long  0x4d408141                          // ld1           {v1.s}[2], [x10]
  .long  0x8b090a2a                          // add           x10, x17, x9, lsl #2
  .long  0xbc6b7997                          // ldr           s23, [x12, x11, lsl #2]
  .long  0x8b1209ec                          // add           x12, x15, x18, lsl #2
  .long  0x0d409142                          // ld1           {v2.s}[1], [x10]
  .long  0x8b090a0a                          // add           x10, x16, x9, lsl #2
  .long  0x8b090909                          // add           x9, x8, x9, lsl #2
  .long  0x6e1c0632                          // mov           v18.s[3], v17.s[0]
  .long  0xbc6b79d1                          // ldr           s17, [x14, x11, lsl #2]
  .long  0x6e1c06d0                          // mov           v16.s[3], v22.s[0]
  .long  0xbc6b79f6                          // ldr           s22, [x15, x11, lsl #2]
  .long  0x0d409155                          // ld1           {v21.s}[1], [x10]
  .long  0x4d408194                          // ld1           {v20.s}[2], [x12]
  .long  0x0d409123                          // ld1           {v3.s}[1], [x9]
  .long  0xf94007e1                          // ldr           x1, [sp, #8]
  .long  0x8b120a2d                          // add           x13, x17, x18, lsl #2
  .long  0x8b120a0e                          // add           x14, x16, x18, lsl #2
  .long  0x8b12090f                          // add           x15, x8, x18, lsl #2
  .long  0x6e1c06f3                          // mov           v19.s[3], v23.s[0]
  .long  0xbc6b7a37                          // ldr           s23, [x17, x11, lsl #2]
  .long  0x6e1c0621                          // mov           v1.s[3], v17.s[0]
  .long  0xbc6b7a11                          // ldr           s17, [x16, x11, lsl #2]
  .long  0x4d4081a2                          // ld1           {v2.s}[2], [x13]
  .long  0x4d4081d5                          // ld1           {v21.s}[2], [x14]
  .long  0x6e1c06d4                          // mov           v20.s[3], v22.s[0]
  .long  0xbc6b7916                          // ldr           s22, [x8, x11, lsl #2]
  .long  0x4d4081e3                          // ld1           {v3.s}[2], [x15]
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e1c06e2                          // mov           v2.s[3], v23.s[0]
  .long  0x6e1c0635                          // mov           v21.s[3], v17.s[0]
  .long  0x6e1c06c3                          // mov           v3.s[3], v22.s[0]
  .long  0x4e20ce50                          // fmla          v16.4s, v18.4s, v0.4s
  .long  0x4e20ce61                          // fmla          v1.4s, v19.4s, v0.4s
  .long  0x4e20ce82                          // fmla          v2.4s, v20.4s, v0.4s
  .long  0x4e20cea3                          // fmla          v3.4s, v21.4s, v0.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x910043ff                          // add           sp, sp, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_evenly_spaced_2_stop_gradient_aarch64
.globl _sk_evenly_spaced_2_stop_gradient_aarch64
FUNCTION(_sk_evenly_spaced_2_stop_gradient_aarch64)
_sk_evenly_spaced_2_stop_gradient_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100410a                          // add           x10, x8, #0x10
  .long  0x4ddfc931                          // ld1r          {v17.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4d40c941                          // ld1r          {v1.4s}, [x10]
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c942                          // ld1r          {v2.4s}, [x10]
  .long  0x9100710a                          // add           x10, x8, #0x1c
  .long  0x2d414d12                          // ldp           s18, s19, [x8, #8]
  .long  0x4d40c943                          // ld1r          {v3.4s}, [x10]
  .long  0x4e20ce30                          // fmla          v16.4s, v17.4s, v0.4s
  .long  0xbd400131                          // ldr           s17, [x9]
  .long  0x4f921002                          // fmla          v2.4s, v0.4s, v18.s[0]
  .long  0x4f931003                          // fmla          v3.4s, v0.4s, v19.s[0]
  .long  0x4f911001                          // fmla          v1.4s, v0.4s, v17.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_xy_to_unit_angle_aarch64
.globl _sk_xy_to_unit_angle_aarch64
FUNCTION(_sk_xy_to_unit_angle_aarch64)
_sk_xy_to_unit_angle_aarch64:
  .long  0x52b77ce8                          // mov           w8, #0xbbe70000
  .long  0x72856de8                          // movk          w8, #0x2b6f
  .long  0x4ea0f810                          // fabs          v16.4s, v0.4s
  .long  0x4ea0f831                          // fabs          v17.4s, v1.4s
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a79948                          // mov           w8, #0x3cca0000
  .long  0x729af3e8                          // movk          w8, #0xd79f
  .long  0x4eb1f614                          // fmin          v20.4s, v16.4s, v17.4s
  .long  0x4e31f615                          // fmax          v21.4s, v16.4s, v17.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52b7aa88                          // mov           w8, #0xbd540000
  .long  0x6e35fe94                          // fdiv          v20.4s, v20.4s, v21.4s
  .long  0x728c9a88                          // movk          w8, #0x64d4
  .long  0x6e34de95                          // fmul          v21.4s, v20.4s, v20.4s
  .long  0x4e35ce53                          // fmla          v19.4s, v18.4s, v21.4s
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7c448                          // mov           w8, #0x3e220000
  .long  0x729e1528                          // movk          w8, #0xf0a9
  .long  0x4e35ce72                          // fmla          v18.4s, v19.4s, v21.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e35ce53                          // fmla          v19.4s, v18.4s, v21.4s
  .long  0x4f02f612                          // fmov          v18.4s, #2.500000000000000000e-01
  .long  0x6e33de93                          // fmul          v19.4s, v20.4s, v19.4s
  .long  0x6eb0e630                          // fcmgt         v16.4s, v17.4s, v16.4s
  .long  0x4eb3d652                          // fsub          v18.4s, v18.4s, v19.4s
  .long  0x4f0167f5                          // movi          v21.4s, #0x3f, lsl #24
  .long  0x6e731e50                          // bsl           v16.16b, v18.16b, v19.16b
  .long  0x4ea0e800                          // fcmlt         v0.4s, v0.4s, #0.0
  .long  0x4eb0d6b2                          // fsub          v18.4s, v21.4s, v16.4s
  .long  0x4f03f614                          // fmov          v20.4s, #1.000000000000000000e+00
  .long  0x6e701e40                          // bsl           v0.16b, v18.16b, v16.16b
  .long  0x4ea0e831                          // fcmlt         v17.4s, v1.4s, #0.0
  .long  0x4ea0d690                          // fsub          v16.4s, v20.4s, v0.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e601e11                          // bsl           v17.16b, v16.16b, v0.16b
  .long  0x6ea0ca20                          // fcmge         v0.4s, v17.4s, #0.0
  .long  0x4ea0ea30                          // fcmlt         v16.4s, v17.4s, #0.0
  .long  0x4ea01e00                          // orr           v0.16b, v16.16b, v0.16b
  .long  0x4e201e20                          // and           v0.16b, v17.16b, v0.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_xy_to_radius_aarch64
.globl _sk_xy_to_radius_aarch64
FUNCTION(_sk_xy_to_radius_aarch64)
_sk_xy_to_radius_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e21dc30                          // fmul          v16.4s, v1.4s, v1.4s
  .long  0x4e20cc10                          // fmla          v16.4s, v0.4s, v0.4s
  .long  0x6ea1fa00                          // fsqrt         v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_save_xy_aarch64
.globl _sk_save_xy_aarch64
FUNCTION(_sk_save_xy_aarch64)
_sk_save_xy_aarch64:
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4e30d411                          // fadd          v17.4s, v0.4s, v16.4s
  .long  0x4e30d430                          // fadd          v16.4s, v1.4s, v16.4s
  .long  0x4e219a32                          // frintm        v18.4s, v17.4s
  .long  0x4eb2d631                          // fsub          v17.4s, v17.4s, v18.4s
  .long  0x4e219a12                          // frintm        v18.4s, v16.4s
  .long  0x4eb2d610                          // fsub          v16.4s, v16.4s, v18.4s
  .long  0x3d800100                          // str           q0, [x8]
  .long  0x3d800901                          // str           q1, [x8, #32]
  .long  0x3d801111                          // str           q17, [x8, #64]
  .long  0x3d801910                          // str           q16, [x8, #96]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_accumulate_aarch64
.globl _sk_accumulate_aarch64
FUNCTION(_sk_accumulate_aarch64)
_sk_accumulate_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x3dc02110                          // ldr           q16, [x8, #128]
  .long  0x3dc02911                          // ldr           q17, [x8, #160]
  .long  0x6e31de10                          // fmul          v16.4s, v16.4s, v17.4s
  .long  0x4e30cc04                          // fmla          v4.4s, v0.4s, v16.4s
  .long  0x4e30cc25                          // fmla          v5.4s, v1.4s, v16.4s
  .long  0x4e30cc46                          // fmla          v6.4s, v2.4s, v16.4s
  .long  0x4e30cc67                          // fmla          v7.4s, v3.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bilinear_nx_aarch64
.globl _sk_bilinear_nx_aarch64
FUNCTION(_sk_bilinear_nx_aarch64)
_sk_bilinear_nx_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x3dc01100                          // ldr           q0, [x8, #64]
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x4ea0d620                          // fsub          v0.4s, v17.4s, v0.4s
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0567e0                          // movi          v0.4s, #0xbf, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bilinear_px_aarch64
.globl _sk_bilinear_px_aarch64
FUNCTION(_sk_bilinear_px_aarch64)
_sk_bilinear_px_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x3dc01100                          // ldr           q0, [x8, #64]
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0167e0                          // movi          v0.4s, #0x3f, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bilinear_ny_aarch64
.globl _sk_bilinear_ny_aarch64
FUNCTION(_sk_bilinear_ny_aarch64)
_sk_bilinear_ny_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x3dc01901                          // ldr           q1, [x8, #96]
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x4ea1d621                          // fsub          v1.4s, v17.4s, v1.4s
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0567e1                          // movi          v1.4s, #0xbf, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bilinear_py_aarch64
.globl _sk_bilinear_py_aarch64
FUNCTION(_sk_bilinear_py_aarch64)
_sk_bilinear_py_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x3dc01901                          // ldr           q1, [x8, #96]
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0167e1                          // movi          v1.4s, #0x3f, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_n3x_aarch64
.globl _sk_bicubic_n3x_aarch64
FUNCTION(_sk_bicubic_n3x_aarch64)
_sk_bicubic_n3x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x3dc01111                          // ldr           q17, [x8, #64]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x4eb1d400                          // fsub          v0.4s, v0.4s, v17.4s
  .long  0x6e20dc11                          // fmul          v17.4s, v0.4s, v0.4s
  .long  0x4e20ce12                          // fmla          v18.4s, v16.4s, v0.4s
  .long  0x6e32de20                          // fmul          v0.4s, v17.4s, v18.4s
  .long  0x3dc00113                          // ldr           q19, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f07f700                          // fmov          v0.4s, #-1.500000000000000000e+00
  .long  0x4e20d660                          // fadd          v0.4s, v19.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_n1x_aarch64
.globl _sk_bicubic_n1x_aarch64
FUNCTION(_sk_bicubic_n1x_aarch64)
_sk_bicubic_n1x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x3dc01110                          // ldr           q16, [x8, #64]
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x4f0167f2                          // movi          v18.4s, #0x3f, lsl #24
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e20ce11                          // fmla          v17.4s, v16.4s, v0.4s
  .long  0x4e20ce32                          // fmla          v18.4s, v17.4s, v0.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e20ce51                          // fmla          v17.4s, v18.4s, v0.4s
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x3d802111                          // str           q17, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0567e0                          // movi          v0.4s, #0xbf, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_p1x_aarch64
.globl _sk_bicubic_p1x_aarch64
FUNCTION(_sk_bicubic_p1x_aarch64)
_sk_bicubic_p1x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x3dc01112                          // ldr           q18, [x8, #64]
  .long  0x3dc00100                          // ldr           q0, [x8]
  .long  0x4e040d33                          // dup           v19.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e32ce71                          // fmla          v17.4s, v19.4s, v18.4s
  .long  0x4e30d400                          // fadd          v0.4s, v0.4s, v16.4s
  .long  0x4e32ce30                          // fmla          v16.4s, v17.4s, v18.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e32ce11                          // fmla          v17.4s, v16.4s, v18.4s
  .long  0x3d802111                          // str           q17, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_p3x_aarch64
.globl _sk_bicubic_p3x_aarch64
FUNCTION(_sk_bicubic_p3x_aarch64)
_sk_bicubic_p3x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d20                          // dup           v0.4s, w9
  .long  0x3dc01110                          // ldr           q16, [x8, #64]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x6e30de13                          // fmul          v19.4s, v16.4s, v16.4s
  .long  0x4e30cc11                          // fmla          v17.4s, v0.4s, v16.4s
  .long  0x6e31de60                          // fmul          v0.4s, v19.4s, v17.4s
  .long  0x3dc00112                          // ldr           q18, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f03f700                          // fmov          v0.4s, #1.500000000000000000e+00
  .long  0x4e20d640                          // fadd          v0.4s, v18.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_n3y_aarch64
.globl _sk_bicubic_n3y_aarch64
FUNCTION(_sk_bicubic_n3y_aarch64)
_sk_bicubic_n3y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x3dc01911                          // ldr           q17, [x8, #96]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x4f03f601                          // fmov          v1.4s, #1.000000000000000000e+00
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x4eb1d421                          // fsub          v1.4s, v1.4s, v17.4s
  .long  0x6e21dc31                          // fmul          v17.4s, v1.4s, v1.4s
  .long  0x4e21ce12                          // fmla          v18.4s, v16.4s, v1.4s
  .long  0x6e32de21                          // fmul          v1.4s, v17.4s, v18.4s
  .long  0x3dc00913                          // ldr           q19, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f07f701                          // fmov          v1.4s, #-1.500000000000000000e+00
  .long  0x4e21d661                          // fadd          v1.4s, v19.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_n1y_aarch64
.globl _sk_bicubic_n1y_aarch64
FUNCTION(_sk_bicubic_n1y_aarch64)
_sk_bicubic_n1y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x4f03f601                          // fmov          v1.4s, #1.000000000000000000e+00
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x3dc01910                          // ldr           q16, [x8, #96]
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x4f0167f2                          // movi          v18.4s, #0x3f, lsl #24
  .long  0x4eb0d421                          // fsub          v1.4s, v1.4s, v16.4s
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e21ce11                          // fmla          v17.4s, v16.4s, v1.4s
  .long  0x4e21ce32                          // fmla          v18.4s, v17.4s, v1.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e21ce51                          // fmla          v17.4s, v18.4s, v1.4s
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x3d802911                          // str           q17, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0567e1                          // movi          v1.4s, #0xbf, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_p1y_aarch64
.globl _sk_bicubic_p1y_aarch64
FUNCTION(_sk_bicubic_p1y_aarch64)
_sk_bicubic_p1y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x3dc01912                          // ldr           q18, [x8, #96]
  .long  0x3dc00901                          // ldr           q1, [x8, #32]
  .long  0x4e040d33                          // dup           v19.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e32ce71                          // fmla          v17.4s, v19.4s, v18.4s
  .long  0x4e30d421                          // fadd          v1.4s, v1.4s, v16.4s
  .long  0x4e32ce30                          // fmla          v16.4s, v17.4s, v18.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e32ce11                          // fmla          v17.4s, v16.4s, v18.4s
  .long  0x3d802911                          // str           q17, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_p3y_aarch64
.globl _sk_bicubic_p3y_aarch64
FUNCTION(_sk_bicubic_p3y_aarch64)
_sk_bicubic_p3y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x3dc01910                          // ldr           q16, [x8, #96]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x6e30de13                          // fmul          v19.4s, v16.4s, v16.4s
  .long  0x4e30cc31                          // fmla          v17.4s, v1.4s, v16.4s
  .long  0x6e31de61                          // fmul          v1.4s, v19.4s, v17.4s
  .long  0x3dc00912                          // ldr           q18, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f03f701                          // fmov          v1.4s, #1.500000000000000000e+00
  .long  0x4e21d641                          // fadd          v1.4s, v18.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_callback_aarch64
.globl _sk_callback_aarch64
FUNCTION(_sk_callback_aarch64)
_sk_callback_aarch64:
  .long  0xd10203ff                          // sub           sp, sp, #0x80
  .long  0xa9045ff8                          // stp           x24, x23, [sp, #64]
  .long  0xa90557f6                          // stp           x22, x21, [sp, #80]
  .long  0xa9064ff4                          // stp           x20, x19, [sp, #96]
  .long  0xa9077bfd                          // stp           x29, x30, [sp, #112]
  .long  0xad011fe6                          // stp           q6, q7, [sp, #32]
  .long  0xad0017e4                          // stp           q4, q5, [sp]
  .long  0xaa0103f6                          // mov           x22, x1
  .long  0xf94002d8                          // ldr           x24, [x22]
  .long  0xaa0403f3                          // mov           x19, x4
  .long  0xf100027f                          // cmp           x19, #0x0
  .long  0x321e03e9                          // orr           w9, wzr, #0x4
  .long  0x91002308                          // add           x8, x24, #0x8
  .long  0x4c000900                          // st4           {v0.4s-v3.4s}, [x8]
  .long  0xf9400308                          // ldr           x8, [x24]
  .long  0xaa0003f7                          // mov           x23, x0
  .long  0x1a891261                          // csel          w1, w19, w9, ne  // ne = any
  .long  0xaa1803e0                          // mov           x0, x24
  .long  0x9101c3fd                          // add           x29, sp, #0x70
  .long  0xaa0303f4                          // mov           x20, x3
  .long  0xaa0203f5                          // mov           x21, x2
  .long  0xd63f0100                          // blr           x8
  .long  0xf9404708                          // ldr           x8, [x24, #136]
  .long  0xf94006c5                          // ldr           x5, [x22, #8]
  .long  0x910042c1                          // add           x1, x22, #0x10
  .long  0xaa1703e0                          // mov           x0, x23
  .long  0x4c400900                          // ld4           {v0.4s-v3.4s}, [x8]
  .long  0xaa1503e2                          // mov           x2, x21
  .long  0xaa1403e3                          // mov           x3, x20
  .long  0xaa1303e4                          // mov           x4, x19
  .long  0xad4017e4                          // ldp           q4, q5, [sp]
  .long  0xad411fe6                          // ldp           q6, q7, [sp, #32]
  .long  0xa9477bfd                          // ldp           x29, x30, [sp, #112]
  .long  0xa9464ff4                          // ldp           x20, x19, [sp, #96]
  .long  0xa94557f6                          // ldp           x22, x21, [sp, #80]
  .long  0xa9445ff8                          // ldp           x24, x23, [sp, #64]
  .long  0x910203ff                          // add           sp, sp, #0x80
  .long  0xd61f00a0                          // br            x5
#elif defined(__arm__)
BALIGN4

HIDDEN _sk_start_pipeline_vfp4
.globl _sk_start_pipeline_vfp4
FUNCTION(_sk_start_pipeline_vfp4)
_sk_start_pipeline_vfp4:
  .long  0xe92d4ff0                          // push          {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe28db01c                          // add           fp, sp, #28
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe1a04003                          // mov           r4, r3
  .long  0xe59b8008                          // ldr           r8, [fp, #8]
  .long  0xe4945004                          // ldr           r5, [r4], #4
  .long  0xe1a06000                          // mov           r6, r0
  .long  0xe2860002                          // add           r0, r6, #2
  .long  0xe1a07002                          // mov           r7, r2
  .long  0xe1a09001                          // mov           r9, r1
  .long  0xe1500007                          // cmp           r0, r7
  .long  0x8a00000a                          // bhi           5c <sk_start_pipeline_vfp4+0x5c>
  .long  0xe3a0a000                          // mov           sl, #0
  .long  0xe1a00008                          // mov           r0, r8
  .long  0xe1a01004                          // mov           r1, r4
  .long  0xe1a02006                          // mov           r2, r6
  .long  0xe1a03009                          // mov           r3, r9
  .long  0xe58da000                          // str           sl, [sp]
  .long  0xe12fff35                          // blx           r5
  .long  0xe2860004                          // add           r0, r6, #4
  .long  0xe2866002                          // add           r6, r6, #2
  .long  0xe1500007                          // cmp           r0, r7
  .long  0x9afffff5                          // bls           34 <sk_start_pipeline_vfp4+0x34>
  .long  0xe0570006                          // subs          r0, r7, r6
  .long  0x0a000005                          // beq           7c <sk_start_pipeline_vfp4+0x7c>
  .long  0xe58d0000                          // str           r0, [sp]
  .long  0xe1a00008                          // mov           r0, r8
  .long  0xe1a01004                          // mov           r1, r4
  .long  0xe1a02006                          // mov           r2, r6
  .long  0xe1a03009                          // mov           r3, r9
  .long  0xe12fff35                          // blx           r5
  .long  0xe24bd01c                          // sub           sp, fp, #28
  .long  0xe8bd8ff0                          // pop           {r4, r5, r6, r7, r8, r9, sl, fp, pc}

HIDDEN _sk_just_return_vfp4
.globl _sk_just_return_vfp4
FUNCTION(_sk_just_return_vfp4)
_sk_just_return_vfp4:
  .long  0xe12fff1e                          // bx            lr

HIDDEN _sk_seed_shader_vfp4
.globl _sk_seed_shader_vfp4
FUNCTION(_sk_seed_shader_vfp4)
_sk_seed_shader_vfp4:
  .long  0xee802b90                          // vdup.32       d16, r2
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xee823b90                          // vdup.32       d18, r3
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xedd03b00                          // vldr          d19, [r0]
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2872f10                          // vmov.f32      d2, #1
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xf2400da1                          // vadd.f32      d16, d16, d17
  .long  0xf2021da1                          // vadd.f32      d1, d18, d17
  .long  0xf2804010                          // vmov.i32      d4, #0
  .long  0xf2805010                          // vmov.i32      d5, #0
  .long  0xf2000da3                          // vadd.f32      d0, d16, d19
  .long  0xf2806010                          // vmov.i32      d6, #0
  .long  0xf2807010                          // vmov.i32      d7, #0
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_dither_vfp4
.globl _sk_dither_vfp4
FUNCTION(_sk_dither_vfp4)
_sk_dither_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xee802b90                          // vdup.32       d16, r2
  .long  0xf2c02011                          // vmov.i32      d18, #1
  .long  0xedd01b08                          // vldr          d17, [r0, #32]
  .long  0xf2c03014                          // vmov.i32      d19, #4
  .long  0xf26108a0                          // vadd.i32      d16, d17, d16
  .long  0xee853b90                          // vdup.32       d21, r3
  .long  0xf2c01012                          // vmov.i32      d17, #2
  .long  0xe3a0c5f2                          // mov           ip, #1015021568
  .long  0xf24041b2                          // vand          d20, d16, d18
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf24061b1                          // vand          d22, d16, d17
  .long  0xf34551b0                          // veor          d21, d21, d16
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf2e44534                          // vshl.s32      d20, d20, #4
  .long  0xf2e16536                          // vshl.s32      d22, d22, #1
  .long  0xf24521b2                          // vand          d18, d21, d18
  .long  0xf3fe0030                          // vshr.u32      d16, d16, #2
  .long  0xf26641b4                          // vorr          d20, d22, d20
  .long  0xf24511b1                          // vand          d17, d21, d17
  .long  0xf2e52532                          // vshl.s32      d18, d18, #5
  .long  0xf26401b0                          // vorr          d16, d20, d16
  .long  0xf24531b3                          // vand          d19, d21, d19
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xf2e21531                          // vshl.s32      d17, d17, #2
  .long  0xf3ff2033                          // vshr.u32      d18, d19, #1
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xee81cb90                          // vdup.32       d17, ip
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xeddf1b0e                          // vldr          d17, [pc, #56]
  .long  0xf2400da1                          // vadd.f32      d16, d16, d17
  .long  0xf4ee1c9f                          // vld1.32       {d17[]}, [lr :32]
  .long  0xf3410db0                          // vmul.f32      d16, d17, d16
  .long  0xf2401d80                          // vadd.f32      d17, d16, d0
  .long  0xf2402d81                          // vadd.f32      d18, d16, d1
  .long  0xf2400d82                          // vadd.f32      d16, d16, d2
  .long  0xf2611f83                          // vmin.f32      d17, d17, d3
  .long  0xf2622f83                          // vmin.f32      d18, d18, d3
  .long  0xf2600f83                          // vmin.f32      d16, d16, d3
  .long  0xf2030fa1                          // vmax.f32      d0, d19, d17
  .long  0xf2031fa2                          // vmax.f32      d1, d19, d18
  .long  0xf2032fa0                          // vmax.f32      d2, d19, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0xbefc0000                          // .word         0xbefc0000
  .long  0xbefc0000                          // .word         0xbefc0000

HIDDEN _sk_constant_color_vfp4
.globl _sk_constant_color_vfp4
FUNCTION(_sk_constant_color_vfp4)
_sk_constant_color_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4a40c9d                          // vld1.32       {d0[]}, [r4 :32]!
  .long  0xf4a53c9f                          // vld1.32       {d3[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf4a52c9f                          // vld1.32       {d2[]}, [r5 :32]
  .long  0xf4a41c9f                          // vld1.32       {d1[]}, [r4 :32]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_load_rgba_vfp4
.globl _sk_load_rgba_vfp4
FUNCTION(_sk_load_rgba_vfp4)
_sk_load_rgba_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xed9e2b04                          // vldr          d2, [lr, #16]
  .long  0xf424078d                          // vld1.32       {d0}, [r4]!
  .long  0xed9e3b06                          // vldr          d3, [lr, #24]
  .long  0xed941b00                          // vldr          d1, [r4]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_store_rgba_vfp4
.globl _sk_store_rgba_vfp4
FUNCTION(_sk_store_rgba_vfp4)
_sk_store_rgba_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe1a0e00c                          // mov           lr, ip
  .long  0xf40e078d                          // vst1.32       {d0}, [lr]!
  .long  0xed8e1b00                          // vstr          d1, [lr]
  .long  0xed8c2b04                          // vstr          d2, [ip, #16]
  .long  0xed8c3b06                          // vstr          d3, [ip, #24]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clear_vfp4
.globl _sk_clear_vfp4
FUNCTION(_sk_clear_vfp4)
_sk_clear_vfp4:
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_srcatop_vfp4
.globl _sk_srcatop_vfp4
FUNCTION(_sk_srcatop_vfp4)
_sk_srcatop_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2603d83                          // vsub.f32      d19, d16, d3
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xf3430d94                          // vmul.f32      d16, d19, d4
  .long  0xf3431d95                          // vmul.f32      d17, d19, d5
  .long  0xf3432d96                          // vmul.f32      d18, d19, d6
  .long  0xf2400c17                          // vfma.f32      d16, d0, d7
  .long  0xf2411c17                          // vfma.f32      d17, d1, d7
  .long  0xf2422c17                          // vfma.f32      d18, d2, d7
  .long  0xf2033c97                          // vfma.f32      d3, d19, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dstatop_vfp4
.globl _sk_dstatop_vfp4
FUNCTION(_sk_dstatop_vfp4)
_sk_dstatop_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3431d15                          // vmul.f32      d17, d3, d5
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf3430d14                          // vmul.f32      d16, d3, d4
  .long  0xf3432d16                          // vmul.f32      d18, d3, d6
  .long  0xf3433d17                          // vmul.f32      d19, d3, d7
  .long  0xf2440c90                          // vfma.f32      d16, d20, d0
  .long  0xf2441c91                          // vfma.f32      d17, d20, d1
  .long  0xf2442c92                          // vfma.f32      d18, d20, d2
  .long  0xf2443c93                          // vfma.f32      d19, d20, d3
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_srcin_vfp4
.globl _sk_srcin_vfp4
FUNCTION(_sk_srcin_vfp4)
_sk_srcin_vfp4:
  .long  0xf3000d17                          // vmul.f32      d0, d0, d7
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3011d17                          // vmul.f32      d1, d1, d7
  .long  0xf3022d17                          // vmul.f32      d2, d2, d7
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dstin_vfp4
.globl _sk_dstin_vfp4
FUNCTION(_sk_dstin_vfp4)
_sk_dstin_vfp4:
  .long  0xf3030d14                          // vmul.f32      d0, d3, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3031d15                          // vmul.f32      d1, d3, d5
  .long  0xf3032d16                          // vmul.f32      d2, d3, d6
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_srcout_vfp4
.globl _sk_srcout_vfp4
FUNCTION(_sk_srcout_vfp4)
_sk_srcout_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2600d87                          // vsub.f32      d16, d16, d7
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dstout_vfp4
.globl _sk_dstout_vfp4
FUNCTION(_sk_dstout_vfp4)
_sk_dstout_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3000d94                          // vmul.f32      d0, d16, d4
  .long  0xf3001d95                          // vmul.f32      d1, d16, d5
  .long  0xf3002d96                          // vmul.f32      d2, d16, d6
  .long  0xf3003d97                          // vmul.f32      d3, d16, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_srcover_vfp4
.globl _sk_srcover_vfp4
FUNCTION(_sk_srcover_vfp4)
_sk_srcover_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf2040c30                          // vfma.f32      d0, d4, d16
  .long  0xf2051c30                          // vfma.f32      d1, d5, d16
  .long  0xf2062c30                          // vfma.f32      d2, d6, d16
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dstover_vfp4
.globl _sk_dstover_vfp4
FUNCTION(_sk_dstover_vfp4)
_sk_dstover_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2651115                          // vorr          d17, d5, d5
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf2640114                          // vorr          d16, d4, d4
  .long  0xf2662116                          // vorr          d18, d6, d6
  .long  0xf2673117                          // vorr          d19, d7, d7
  .long  0xf2400c34                          // vfma.f32      d16, d0, d20
  .long  0xf2411c34                          // vfma.f32      d17, d1, d20
  .long  0xf2422c34                          // vfma.f32      d18, d2, d20
  .long  0xf2433c34                          // vfma.f32      d19, d3, d20
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_modulate_vfp4
.globl _sk_modulate_vfp4
FUNCTION(_sk_modulate_vfp4)
_sk_modulate_vfp4:
  .long  0xf3000d14                          // vmul.f32      d0, d0, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3011d15                          // vmul.f32      d1, d1, d5
  .long  0xf3022d16                          // vmul.f32      d2, d2, d6
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_multiply_vfp4
.globl _sk_multiply_vfp4
FUNCTION(_sk_multiply_vfp4)
_sk_multiply_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2601d87                          // vsub.f32      d17, d16, d7
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3412d90                          // vmul.f32      d18, d17, d0
  .long  0xf3403d94                          // vmul.f32      d19, d16, d4
  .long  0xf3414d91                          // vmul.f32      d20, d17, d1
  .long  0xf3405d95                          // vmul.f32      d21, d16, d5
  .long  0xf3416d92                          // vmul.f32      d22, d17, d2
  .long  0xf3418d93                          // vmul.f32      d24, d17, d3
  .long  0xf3407d96                          // vmul.f32      d23, d16, d6
  .long  0xf3409d97                          // vmul.f32      d25, d16, d7
  .long  0xf2430da2                          // vadd.f32      d16, d19, d18
  .long  0xf2451da4                          // vadd.f32      d17, d21, d20
  .long  0xf2472da6                          // vadd.f32      d18, d23, d22
  .long  0xf2493da8                          // vadd.f32      d19, d25, d24
  .long  0xf2400c14                          // vfma.f32      d16, d0, d4
  .long  0xf2411c15                          // vfma.f32      d17, d1, d5
  .long  0xf2422c16                          // vfma.f32      d18, d2, d6
  .long  0xf2433c17                          // vfma.f32      d19, d3, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_plus__vfp4
.globl _sk_plus__vfp4
FUNCTION(_sk_plus__vfp4)
_sk_plus__vfp4:
  .long  0xf2000d04                          // vadd.f32      d0, d0, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2011d05                          // vadd.f32      d1, d1, d5
  .long  0xf2022d06                          // vadd.f32      d2, d2, d6
  .long  0xf2033d07                          // vadd.f32      d3, d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_screen_vfp4
.globl _sk_screen_vfp4
FUNCTION(_sk_screen_vfp4)
_sk_screen_vfp4:
  .long  0xf2400d04                          // vadd.f32      d16, d0, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2411d05                          // vadd.f32      d17, d1, d5
  .long  0xf2422d06                          // vadd.f32      d18, d2, d6
  .long  0xf2433d07                          // vadd.f32      d19, d3, d7
  .long  0xf2600c14                          // vfms.f32      d16, d0, d4
  .long  0xf2611c15                          // vfms.f32      d17, d1, d5
  .long  0xf2622c16                          // vfms.f32      d18, d2, d6
  .long  0xf2633c17                          // vfms.f32      d19, d3, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_xor__vfp4
.globl _sk_xor__vfp4
FUNCTION(_sk_xor__vfp4)
_sk_xor__vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2603d83                          // vsub.f32      d19, d16, d3
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf3430d94                          // vmul.f32      d16, d19, d4
  .long  0xf3431d95                          // vmul.f32      d17, d19, d5
  .long  0xf3432d96                          // vmul.f32      d18, d19, d6
  .long  0xf3433d97                          // vmul.f32      d19, d19, d7
  .long  0xf2440c90                          // vfma.f32      d16, d20, d0
  .long  0xf2441c91                          // vfma.f32      d17, d20, d1
  .long  0xf2442c92                          // vfma.f32      d18, d20, d2
  .long  0xf2443c93                          // vfma.f32      d19, d20, d3
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_darken_vfp4
.globl _sk_darken_vfp4
FUNCTION(_sk_darken_vfp4)
_sk_darken_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3402d17                          // vmul.f32      d18, d0, d7
  .long  0xf3433d15                          // vmul.f32      d19, d3, d5
  .long  0xf3414d17                          // vmul.f32      d20, d1, d7
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3426d17                          // vmul.f32      d22, d2, d7
  .long  0xf2421fa1                          // vmax.f32      d17, d18, d17
  .long  0xf2407d04                          // vadd.f32      d23, d0, d4
  .long  0xf2443fa3                          // vmax.f32      d19, d20, d19
  .long  0xf2412d05                          // vadd.f32      d18, d1, d5
  .long  0xf2424d06                          // vadd.f32      d20, d2, d6
  .long  0xf2465fa5                          // vmax.f32      d21, d22, d21
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2270da1                          // vsub.f32      d0, d23, d17
  .long  0xf2221da3                          // vsub.f32      d1, d18, d19
  .long  0xf2242da5                          // vsub.f32      d2, d20, d21
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_lighten_vfp4
.globl _sk_lighten_vfp4
FUNCTION(_sk_lighten_vfp4)
_sk_lighten_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3402d17                          // vmul.f32      d18, d0, d7
  .long  0xf3433d15                          // vmul.f32      d19, d3, d5
  .long  0xf3414d17                          // vmul.f32      d20, d1, d7
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3426d17                          // vmul.f32      d22, d2, d7
  .long  0xf2621fa1                          // vmin.f32      d17, d18, d17
  .long  0xf2407d04                          // vadd.f32      d23, d0, d4
  .long  0xf2643fa3                          // vmin.f32      d19, d20, d19
  .long  0xf2412d05                          // vadd.f32      d18, d1, d5
  .long  0xf2424d06                          // vadd.f32      d20, d2, d6
  .long  0xf2665fa5                          // vmin.f32      d21, d22, d21
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2270da1                          // vsub.f32      d0, d23, d17
  .long  0xf2221da3                          // vsub.f32      d1, d18, d19
  .long  0xf2242da5                          // vsub.f32      d2, d20, d21
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_difference_vfp4
.globl _sk_difference_vfp4
FUNCTION(_sk_difference_vfp4)
_sk_difference_vfp4:
  .long  0xf3430d14                          // vmul.f32      d16, d3, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3401d17                          // vmul.f32      d17, d0, d7
  .long  0xf3432d15                          // vmul.f32      d18, d3, d5
  .long  0xf3413d17                          // vmul.f32      d19, d1, d7
  .long  0xf3434d16                          // vmul.f32      d20, d3, d6
  .long  0xf3425d17                          // vmul.f32      d21, d2, d7
  .long  0xf2c76f10                          // vmov.f32      d22, #1
  .long  0xf2610fa0                          // vmin.f32      d16, d17, d16
  .long  0xf2631fa2                          // vmin.f32      d17, d19, d18
  .long  0xf2662d83                          // vsub.f32      d18, d22, d3
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf2404d04                          // vadd.f32      d20, d0, d4
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf2073c32                          // vfma.f32      d3, d7, d18
  .long  0xf2415d05                          // vadd.f32      d21, d1, d5
  .long  0xf2411da1                          // vadd.f32      d17, d17, d17
  .long  0xf2426d06                          // vadd.f32      d22, d2, d6
  .long  0xf2432da3                          // vadd.f32      d18, d19, d19
  .long  0xf2240da0                          // vsub.f32      d0, d20, d16
  .long  0xf2251da1                          // vsub.f32      d1, d21, d17
  .long  0xf2262da2                          // vsub.f32      d2, d22, d18
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_exclusion_vfp4
.globl _sk_exclusion_vfp4
FUNCTION(_sk_exclusion_vfp4)
_sk_exclusion_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3401d14                          // vmul.f32      d17, d0, d4
  .long  0xf3412d15                          // vmul.f32      d18, d1, d5
  .long  0xf3423d16                          // vmul.f32      d19, d2, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf2404d04                          // vadd.f32      d20, d0, d4
  .long  0xf2411da1                          // vadd.f32      d17, d17, d17
  .long  0xf2415d05                          // vadd.f32      d21, d1, d5
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2426d06                          // vadd.f32      d22, d2, d6
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2240da1                          // vsub.f32      d0, d20, d17
  .long  0xf2251da2                          // vsub.f32      d1, d21, d18
  .long  0xf2262da3                          // vsub.f32      d2, d22, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_colorburn_vfp4
.globl _sk_colorburn_vfp4
FUNCTION(_sk_colorburn_vfp4)
_sk_colorburn_vfp4:
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2671d06                          // vsub.f32      d17, d7, d6
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf3008d93                          // vmul.f32      d8, d16, d3
  .long  0xf3019d93                          // vmul.f32      d9, d17, d3
  .long  0xf302ad93                          // vmul.f32      d10, d18, d3
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xeec8baa0                          // vdiv.f32      s23, s17, s1
  .long  0xee88ba00                          // vdiv.f32      s22, s16, s0
  .long  0xeec98aa2                          // vdiv.f32      s17, s19, s5
  .long  0xee898a02                          // vdiv.f32      s16, s18, s4
  .long  0xeeca9aa1                          // vdiv.f32      s19, s21, s3
  .long  0xee8a9a01                          // vdiv.f32      s18, s20, s2
  .long  0xf2672f08                          // vmin.f32      d18, d7, d8
  .long  0xf2673f09                          // vmin.f32      d19, d7, d9
  .long  0xf2670f0b                          // vmin.f32      d16, d7, d11
  .long  0xf2614d87                          // vsub.f32      d20, d17, d7
  .long  0xf2672d22                          // vsub.f32      d18, d7, d18
  .long  0xf2673d23                          // vsub.f32      d19, d7, d19
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2670d20                          // vsub.f32      d16, d7, d16
  .long  0xf3445d90                          // vmul.f32      d21, d20, d0
  .long  0xf3446d92                          // vmul.f32      d22, d20, d2
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf3444d91                          // vmul.f32      d20, d20, d1
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf3400d93                          // vmul.f32      d16, d16, d3
  .long  0xf3417d95                          // vmul.f32      d23, d17, d5
  .long  0xf3418d94                          // vmul.f32      d24, d17, d4
  .long  0xf3419d96                          // vmul.f32      d25, d17, d6
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf2462da2                          // vadd.f32      d18, d22, d18
  .long  0xf245ada0                          // vadd.f32      d26, d21, d16
  .long  0xf247bd81                          // vadd.f32      d27, d23, d1
  .long  0xf248cd80                          // vadd.f32      d28, d24, d0
  .long  0xf249dd82                          // vadd.f32      d29, d25, d2
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf2499da2                          // vadd.f32      d25, d25, d18
  .long  0xf2473da3                          // vadd.f32      d19, d23, d19
  .long  0xf3f97501                          // vceq.f32      d23, d1, #0
  .long  0xf2455d84                          // vadd.f32      d21, d21, d4
  .long  0xf2444d85                          // vadd.f32      d20, d20, d5
  .long  0xf2440e07                          // vceq.f32      d16, d4, d7
  .long  0xf2466d86                          // vadd.f32      d22, d22, d6
  .long  0xf2451e07                          // vceq.f32      d17, d5, d7
  .long  0xf2462e07                          // vceq.f32      d18, d6, d7
  .long  0xf35b71b3                          // vbsl          d23, d27, d19
  .long  0xf3f93500                          // vceq.f32      d19, d0, #0
  .long  0xf2488daa                          // vadd.f32      d24, d24, d26
  .long  0xf35c31b8                          // vbsl          d19, d28, d24
  .long  0xf3f98502                          // vceq.f32      d24, d2, #0
  .long  0xf35d81b9                          // vbsl          d24, d29, d25
  .long  0xf35501b3                          // vbsl          d16, d21, d19
  .long  0xf35411b7                          // vbsl          d17, d20, d23
  .long  0xf35621b8                          // vbsl          d18, d22, d24
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_colordodge_vfp4
.globl _sk_colordodge_vfp4
FUNCTION(_sk_colordodge_vfp4)
_sk_colordodge_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xf2238d02                          // vsub.f32      d8, d3, d2
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3039d16                          // vmul.f32      d9, d3, d6
  .long  0xf223ad01                          // vsub.f32      d10, d3, d1
  .long  0xf303bd15                          // vmul.f32      d11, d3, d5
  .long  0xf223cd00                          // vsub.f32      d12, d3, d0
  .long  0xf303dd14                          // vmul.f32      d13, d3, d4
  .long  0xeec9eaa8                          // vdiv.f32      s29, s19, s17
  .long  0xee89ea08                          // vdiv.f32      s28, s18, s16
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xeecd9aac                          // vdiv.f32      s19, s27, s25
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xee8d9a0c                          // vdiv.f32      s18, s26, s24
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2672f0e                          // vmin.f32      d18, d7, d14
  .long  0xf2601d87                          // vsub.f32      d17, d16, d7
  .long  0xf2673f08                          // vmin.f32      d19, d7, d8
  .long  0xf2674f09                          // vmin.f32      d20, d7, d9
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3415d92                          // vmul.f32      d21, d17, d2
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf3416d91                          // vmul.f32      d22, d17, d1
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf3411d90                          // vmul.f32      d17, d17, d0
  .long  0xf3444d93                          // vmul.f32      d20, d20, d3
  .long  0xf3407d95                          // vmul.f32      d23, d16, d5
  .long  0xf3408d94                          // vmul.f32      d24, d16, d4
  .long  0xf3409d96                          // vmul.f32      d25, d16, d6
  .long  0xf2452da2                          // vadd.f32      d18, d21, d18
  .long  0xf2463da3                          // vadd.f32      d19, d22, d19
  .long  0xf2414da4                          // vadd.f32      d20, d17, d20
  .long  0xf241ae03                          // vceq.f32      d26, d1, d3
  .long  0xf247bd81                          // vadd.f32      d27, d23, d1
  .long  0xf3b91505                          // vceq.f32      d1, d5, #0
  .long  0xf240ce03                          // vceq.f32      d28, d0, d3
  .long  0xf248dd80                          // vadd.f32      d29, d24, d0
  .long  0xf3b90504                          // vceq.f32      d0, d4, #0
  .long  0xf242ee03                          // vceq.f32      d30, d2, d3
  .long  0xf249fd82                          // vadd.f32      d31, d25, d2
  .long  0xf3b92506                          // vceq.f32      d2, d6, #0
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2410d84                          // vadd.f32      d16, d17, d4
  .long  0xf2491da2                          // vadd.f32      d17, d25, d18
  .long  0xf2462d85                          // vadd.f32      d18, d22, d5
  .long  0xf2455d86                          // vadd.f32      d21, d21, d6
  .long  0xf2473da3                          // vadd.f32      d19, d23, d19
  .long  0xf2484da4                          // vadd.f32      d20, d24, d20
  .long  0xf35fe1b1                          // vbsl          d30, d31, d17
  .long  0xf35ba1b3                          // vbsl          d26, d27, d19
  .long  0xf35dc1b4                          // vbsl          d28, d29, d20
  .long  0xf31001bc                          // vbsl          d0, d16, d28
  .long  0xf31211ba                          // vbsl          d1, d18, d26
  .long  0xf31521be                          // vbsl          d2, d21, d30
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_hardlight_vfp4
.globl _sk_hardlight_vfp4
FUNCTION(_sk_hardlight_vfp4)
_sk_hardlight_vfp4:
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xf2617d87                          // vsub.f32      d23, d17, d7
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf2674d06                          // vsub.f32      d20, d7, d6
  .long  0xf2633d00                          // vsub.f32      d19, d3, d0
  .long  0xf2635d01                          // vsub.f32      d21, d3, d1
  .long  0xf2636d02                          // vsub.f32      d22, d3, d2
  .long  0xf347bd90                          // vmul.f32      d27, d23, d0
  .long  0xf341cd94                          // vmul.f32      d28, d17, d4
  .long  0xf3430db0                          // vmul.f32      d16, d19, d16
  .long  0xf3463db4                          // vmul.f32      d19, d22, d20
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf2404d00                          // vadd.f32      d20, d0, d0
  .long  0xf3405d14                          // vmul.f32      d21, d0, d4
  .long  0xf2416d01                          // vadd.f32      d22, d1, d1
  .long  0xf3418d15                          // vmul.f32      d24, d1, d5
  .long  0xf2429d02                          // vadd.f32      d25, d2, d2
  .long  0xf342ad16                          // vmul.f32      d26, d2, d6
  .long  0xf347dd91                          // vmul.f32      d29, d23, d1
  .long  0xf341fd95                          // vmul.f32      d31, d17, d5
  .long  0xf24cbdab                          // vadd.f32      d27, d28, d27
  .long  0xf3477d92                          // vmul.f32      d23, d23, d2
  .long  0xf341cd96                          // vmul.f32      d28, d17, d6
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf343ed17                          // vmul.f32      d30, d3, d7
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf3434e24                          // vcge.f32      d20, d3, d20
  .long  0xf2455da5                          // vadd.f32      d21, d21, d21
  .long  0xf3436e26                          // vcge.f32      d22, d3, d22
  .long  0xf3439e29                          // vcge.f32      d25, d3, d25
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf24aadaa                          // vadd.f32      d26, d26, d26
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf24fddad                          // vadd.f32      d29, d31, d29
  .long  0xf24c1da7                          // vadd.f32      d17, d28, d23
  .long  0xf26e0da0                          // vsub.f32      d16, d30, d16
  .long  0xf26e2da2                          // vsub.f32      d18, d30, d18
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf35541b0                          // vbsl          d20, d21, d16
  .long  0xf35861b2                          // vbsl          d22, d24, d18
  .long  0xf35a91b3                          // vbsl          d25, d26, d19
  .long  0xf20b0da4                          // vadd.f32      d0, d27, d20
  .long  0xf20d1da6                          // vadd.f32      d1, d29, d22
  .long  0xf2012da9                          // vadd.f32      d2, d17, d25
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_overlay_vfp4
.globl _sk_overlay_vfp4
FUNCTION(_sk_overlay_vfp4)
_sk_overlay_vfp4:
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xf2617d87                          // vsub.f32      d23, d17, d7
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf2674d06                          // vsub.f32      d20, d7, d6
  .long  0xf2633d00                          // vsub.f32      d19, d3, d0
  .long  0xf2635d01                          // vsub.f32      d21, d3, d1
  .long  0xf2636d02                          // vsub.f32      d22, d3, d2
  .long  0xf347bd90                          // vmul.f32      d27, d23, d0
  .long  0xf341cd94                          // vmul.f32      d28, d17, d4
  .long  0xf3430db0                          // vmul.f32      d16, d19, d16
  .long  0xf3463db4                          // vmul.f32      d19, d22, d20
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf2444d04                          // vadd.f32      d20, d4, d4
  .long  0xf3405d14                          // vmul.f32      d21, d0, d4
  .long  0xf2456d05                          // vadd.f32      d22, d5, d5
  .long  0xf3418d15                          // vmul.f32      d24, d1, d5
  .long  0xf2469d06                          // vadd.f32      d25, d6, d6
  .long  0xf342ad16                          // vmul.f32      d26, d2, d6
  .long  0xf347dd91                          // vmul.f32      d29, d23, d1
  .long  0xf341fd95                          // vmul.f32      d31, d17, d5
  .long  0xf24cbdab                          // vadd.f32      d27, d28, d27
  .long  0xf3477d92                          // vmul.f32      d23, d23, d2
  .long  0xf341cd96                          // vmul.f32      d28, d17, d6
  .long  0xf343ed17                          // vmul.f32      d30, d3, d7
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf3474e24                          // vcge.f32      d20, d7, d20
  .long  0xf2455da5                          // vadd.f32      d21, d21, d21
  .long  0xf3476e26                          // vcge.f32      d22, d7, d22
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf3479e29                          // vcge.f32      d25, d7, d25
  .long  0xf24aadaa                          // vadd.f32      d26, d26, d26
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf24fddad                          // vadd.f32      d29, d31, d29
  .long  0xf24c1da7                          // vadd.f32      d17, d28, d23
  .long  0xf26e0da0                          // vsub.f32      d16, d30, d16
  .long  0xf26e2da2                          // vsub.f32      d18, d30, d18
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf35541b0                          // vbsl          d20, d21, d16
  .long  0xf35861b2                          // vbsl          d22, d24, d18
  .long  0xf35a91b3                          // vbsl          d25, d26, d19
  .long  0xf20b0da4                          // vadd.f32      d0, d27, d20
  .long  0xf20d1da6                          // vadd.f32      d1, d29, d22
  .long  0xf2012da9                          // vadd.f32      d2, d17, d25
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_softlight_vfp4
.globl _sk_softlight_vfp4
FUNCTION(_sk_softlight_vfp4)
_sk_softlight_vfp4:
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xeec58aa7                          // vdiv.f32      s17, s11, s15
  .long  0xf3f90407                          // vcgt.f32      d16, d7, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeec49aa7                          // vdiv.f32      s19, s9, s15
  .long  0xeec6aaa7                          // vdiv.f32      s21, s13, s15
  .long  0xee858a07                          // vdiv.f32      s16, s10, s14
  .long  0xee849a07                          // vdiv.f32      s18, s8, s14
  .long  0xee86aa07                          // vdiv.f32      s20, s12, s14
  .long  0xf26021b0                          // vorr          d18, d16, d16
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf3582131                          // vbsl          d18, d8, d17
  .long  0xf26031b0                          // vorr          d19, d16, d16
  .long  0xf3fb45a2                          // vrsqrte.f32   d20, d18
  .long  0xf3593131                          // vbsl          d19, d9, d17
  .long  0xf35a0131                          // vbsl          d16, d10, d17
  .long  0xf3fb15a3                          // vrsqrte.f32   d17, d19
  .long  0xf3fb55a0                          // vrsqrte.f32   d21, d16
  .long  0xf3446db4                          // vmul.f32      d22, d20, d20
  .long  0xf243ada3                          // vadd.f32      d26, d19, d19
  .long  0xf240bda0                          // vadd.f32      d27, d16, d16
  .long  0xf3417db1                          // vmul.f32      d23, d17, d17
  .long  0xf3458db5                          // vmul.f32      d24, d21, d21
  .long  0xf2626fb6                          // vrsqrts.f32   d22, d18, d22
  .long  0xf2429da2                          // vadd.f32      d25, d18, d18
  .long  0xf2637fb7                          // vrsqrts.f32   d23, d19, d23
  .long  0xf2608fb8                          // vrsqrts.f32   d24, d16, d24
  .long  0xf2818f1c                          // vmov.f32      d8, #7
  .long  0xf2499da9                          // vadd.f32      d25, d25, d25
  .long  0xf3444db6                          // vmul.f32      d20, d20, d22
  .long  0xf24a6daa                          // vadd.f32      d22, d26, d26
  .long  0xf24badab                          // vadd.f32      d26, d27, d27
  .long  0xf3411db7                          // vmul.f32      d17, d17, d23
  .long  0xf3455db8                          // vmul.f32      d21, d21, d24
  .long  0xf3fb7524                          // vrecpe.f32    d23, d20
  .long  0xf3498db9                          // vmul.f32      d24, d25, d25
  .long  0xf3fbd521                          // vrecpe.f32    d29, d17
  .long  0xf34aedba                          // vmul.f32      d30, d26, d26
  .long  0xf3fbf525                          // vrecpe.f32    d31, d21
  .long  0xf2444fb7                          // vrecps.f32    d20, d20, d23
  .long  0xf346cdb6                          // vmul.f32      d28, d22, d22
  .long  0xf2411fbd                          // vrecps.f32    d17, d17, d29
  .long  0xf3c7bf10                          // vmov.f32      d27, #-1
  .long  0xf2455fbf                          // vrecps.f32    d21, d21, d31
  .long  0xf24aadae                          // vadd.f32      d26, d26, d30
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2429dab                          // vadd.f32      d25, d18, d27
  .long  0xf2466dac                          // vadd.f32      d22, d22, d28
  .long  0xf243cdab                          // vadd.f32      d28, d19, d27
  .long  0xf240bdab                          // vadd.f32      d27, d16, d27
  .long  0xf3474db4                          // vmul.f32      d20, d23, d20
  .long  0xf2c7ef10                          // vmov.f32      d30, #1
  .long  0xf34d1db1                          // vmul.f32      d17, d29, d17
  .long  0xf34badba                          // vmul.f32      d26, d27, d26
  .long  0xf242bd02                          // vadd.f32      d27, d2, d2
  .long  0xf26edda0                          // vsub.f32      d29, d30, d16
  .long  0xf3498db8                          // vmul.f32      d24, d25, d24
  .long  0xf3429d98                          // vmul.f32      d25, d18, d8
  .long  0xf34f5db5                          // vmul.f32      d21, d31, d21
  .long  0xf26efda2                          // vsub.f32      d31, d30, d18
  .long  0xf2642da2                          // vsub.f32      d18, d20, d18
  .long  0xf26b4d83                          // vsub.f32      d20, d27, d3
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf34c6db6                          // vmul.f32      d22, d28, d22
  .long  0xf3437d98                          // vmul.f32      d23, d19, d8
  .long  0xf3449dbd                          // vmul.f32      d25, d20, d29
  .long  0xf245dd05                          // vadd.f32      d29, d5, d5
  .long  0xf340cd98                          // vmul.f32      d28, d16, d8
  .long  0xf2476da6                          // vadd.f32      d22, d23, d22
  .long  0xf2611da3                          // vsub.f32      d17, d17, d19
  .long  0xf24dddad                          // vadd.f32      d29, d29, d29
  .long  0xf24c7daa                          // vadd.f32      d23, d28, d26
  .long  0xf2650da0                          // vsub.f32      d16, d21, d16
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf347de2d                          // vcge.f32      d29, d7, d29
  .long  0xf241ad01                          // vadd.f32      d26, d1, d1
  .long  0xf3444d97                          // vmul.f32      d20, d20, d7
  .long  0xf358d1b2                          // vbsl          d29, d24, d18
  .long  0xf2448d04                          // vadd.f32      d24, d4, d4
  .long  0xf2462d06                          // vadd.f32      d18, d6, d6
  .long  0xf26a5d83                          // vsub.f32      d21, d26, d3
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf345cdbf                          // vmul.f32      d28, d21, d31
  .long  0xf3455d97                          // vmul.f32      d21, d21, d7
  .long  0xf3478e28                          // vcge.f32      d24, d7, d24
  .long  0xf3472e22                          // vcge.f32      d18, d7, d18
  .long  0xf343fd14                          // vmul.f32      d31, d3, d4
  .long  0xf3455dbd                          // vmul.f32      d21, d21, d29
  .long  0xf35681b1                          // vbsl          d24, d22, d17
  .long  0xf2401d00                          // vadd.f32      d17, d0, d0
  .long  0xf35721b0                          // vbsl          d18, d23, d16
  .long  0xf24c0d83                          // vadd.f32      d16, d28, d3
  .long  0xf2496d83                          // vadd.f32      d22, d25, d3
  .long  0xf2617d83                          // vsub.f32      d23, d17, d3
  .long  0xf3442db2                          // vmul.f32      d18, d20, d18
  .long  0xf3434e2a                          // vcge.f32      d20, d3, d26
  .long  0xf343ae2b                          // vcge.f32      d26, d3, d27
  .long  0xf3473db3                          // vmul.f32      d19, d23, d19
  .long  0xf3477d97                          // vmul.f32      d23, d23, d7
  .long  0xf3431e21                          // vcge.f32      d17, d3, d17
  .long  0xf3400d95                          // vmul.f32      d16, d16, d5
  .long  0xf2433d83                          // vadd.f32      d19, d19, d3
  .long  0xf3477db8                          // vmul.f32      d23, d23, d24
  .long  0xf26e8d87                          // vsub.f32      d24, d30, d7
  .long  0xf26eed83                          // vsub.f32      d30, d30, d3
  .long  0xf3433d94                          // vmul.f32      d19, d19, d4
  .long  0xf24f7da7                          // vadd.f32      d23, d31, d23
  .long  0xf3489d91                          // vmul.f32      d25, d24, d1
  .long  0xf348cd90                          // vmul.f32      d28, d24, d0
  .long  0xf34edd94                          // vmul.f32      d29, d30, d4
  .long  0xf34ebd95                          // vmul.f32      d27, d30, d5
  .long  0xf3488d92                          // vmul.f32      d24, d24, d2
  .long  0xf34efd96                          // vmul.f32      d31, d30, d6
  .long  0xf24dcdac                          // vadd.f32      d28, d29, d28
  .long  0xf343dd15                          // vmul.f32      d29, d3, d5
  .long  0xf24b9da9                          // vadd.f32      d25, d27, d25
  .long  0xf343bd16                          // vmul.f32      d27, d3, d6
  .long  0xf3466d96                          // vmul.f32      d22, d22, d6
  .long  0xf24f8da8                          // vadd.f32      d24, d31, d24
  .long  0xf24d5da5                          // vadd.f32      d21, d29, d21
  .long  0xf24b2da2                          // vadd.f32      d18, d27, d18
  .long  0xf35311b7                          // vbsl          d17, d19, d23
  .long  0xf35041b5                          // vbsl          d20, d16, d21
  .long  0xf356a1b2                          // vbsl          d26, d22, d18
  .long  0xf2073c3e                          // vfma.f32      d3, d7, d30
  .long  0xf20c0da1                          // vadd.f32      d0, d28, d17
  .long  0xf2091da4                          // vadd.f32      d1, d25, d20
  .long  0xf2082daa                          // vadd.f32      d2, d24, d26
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_hue_vfp4
.globl _sk_hue_vfp4
FUNCTION(_sk_hue_vfp4)
_sk_hue_vfp4:
  .long  0xed2d8b0c                          // vpush         {d8-d13}
  .long  0xf3420d13                          // vmul.f32      d16, d2, d3
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3411d13                          // vmul.f32      d17, d1, d3
  .long  0xf2652f06                          // vmin.f32      d18, d5, d6
  .long  0xf2453f06                          // vmax.f32      d19, d5, d6
  .long  0xf3404d13                          // vmul.f32      d20, d0, d3
  .long  0xf2615fa0                          // vmin.f32      d21, d17, d16
  .long  0xf2642f22                          // vmin.f32      d18, d4, d18
  .long  0xf2443f23                          // vmax.f32      d19, d4, d19
  .long  0xf2416fa0                          // vmax.f32      d22, d17, d16
  .long  0xf2645fa5                          // vmin.f32      d21, d20, d21
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2443fa6                          // vmax.f32      d19, d20, d22
  .long  0xeddf6b76                          // vldr          d22, [pc, #472]
  .long  0xf2611da5                          // vsub.f32      d17, d17, d21
  .long  0xf2644da5                          // vsub.f32      d20, d20, d21
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf2238da5                          // vsub.f32      d8, d19, d21
  .long  0xf2600da5                          // vsub.f32      d16, d16, d21
  .long  0xf3f97508                          // vceq.f32      d23, d8, #0
  .long  0xf26751b7                          // vorr          d21, d23, d23
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xeddf1b69                          // vldr          d17, [pc, #420]
  .long  0xf302adb4                          // vmul.f32      d10, d18, d20
  .long  0xf3453d31                          // vmul.f32      d19, d5, d17
  .long  0xf302bdb0                          // vmul.f32      d11, d18, d16
  .long  0xeddf2b67                          // vldr          d18, [pc, #412]
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xeec9caa8                          // vdiv.f32      s25, s19, s17
  .long  0xee89ca08                          // vdiv.f32      s24, s18, s16
  .long  0xeeca9aa8                          // vdiv.f32      s19, s21, s17
  .long  0xee8a9a08                          // vdiv.f32      s18, s20, s16
  .long  0xeecbaaa8                          // vdiv.f32      s21, s23, s17
  .long  0xee8baa08                          // vdiv.f32      s20, s22, s16
  .long  0xf3444d32                          // vmul.f32      d20, d4, d18
  .long  0xf350519c                          // vbsl          d21, d16, d12
  .long  0xf3468d36                          // vmul.f32      d24, d6, d22
  .long  0xf3459db1                          // vmul.f32      d25, d21, d17
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf26741b7                          // vorr          d20, d23, d23
  .long  0xf350719a                          // vbsl          d23, d16, d10
  .long  0xf3504199                          // vbsl          d20, d16, d9
  .long  0xf2433da8                          // vadd.f32      d19, d19, d24
  .long  0xf344adb2                          // vmul.f32      d26, d20, d18
  .long  0xf3478db6                          // vmul.f32      d24, d23, d22
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf24a9da9                          // vadd.f32      d25, d26, d25
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2633da8                          // vsub.f32      d19, d19, d24
  .long  0xf2458da3                          // vadd.f32      d24, d21, d19
  .long  0xf2445da3                          // vadd.f32      d21, d20, d19
  .long  0xf2477da3                          // vadd.f32      d23, d23, d19
  .long  0xf3481db1                          // vmul.f32      d17, d24, d17
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf3473db6                          // vmul.f32      d19, d23, d22
  .long  0xf2684fa7                          // vmin.f32      d20, d24, d23
  .long  0xf2486fa7                          // vmax.f32      d22, d24, d23
  .long  0xf2421da1                          // vadd.f32      d17, d18, d17
  .long  0xf2456fa6                          // vmax.f32      d22, d21, d22
  .long  0xf2432da1                          // vadd.f32      d18, d19, d17
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf3f944a3                          // vcge.f32      d20, d19, #0
  .long  0xf264a1b4                          // vorr          d26, d20, d20
  .long  0xf2671da2                          // vsub.f32      d17, d23, d18
  .long  0xf2228da3                          // vsub.f32      d8, d18, d19
  .long  0xf26431b4                          // vorr          d19, d20, d20
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xf3431d17                          // vmul.f32      d17, d3, d7
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf2429d8a                          // vadd.f32      d25, d18, d10
  .long  0xf35731b9                          // vbsl          d19, d23, d25
  .long  0xf2619da2                          // vsub.f32      d25, d17, d18
  .long  0xf2637da2                          // vsub.f32      d23, d19, d18
  .long  0xf226ada2                          // vsub.f32      d10, d22, d18
  .long  0xf309bdb7                          // vmul.f32      d11, d25, d23
  .long  0xf2687da2                          // vsub.f32      d23, d24, d18
  .long  0xeecb9aaa                          // vdiv.f32      s19, s23, s21
  .long  0xee8b9a0a                          // vdiv.f32      s18, s22, s20
  .long  0xf302bdb7                          // vmul.f32      d11, d18, d23
  .long  0xeecbcaa8                          // vdiv.f32      s25, s23, s17
  .long  0xee8bca08                          // vdiv.f32      s24, s22, s16
  .long  0xf2427d8c                          // vadd.f32      d23, d18, d12
  .long  0xf358a1b7                          // vbsl          d26, d24, d23
  .long  0xf26a7da2                          // vsub.f32      d23, d26, d18
  .long  0xf309bdb7                          // vmul.f32      d11, d25, d23
  .long  0xf2657da2                          // vsub.f32      d23, d21, d18
  .long  0xeecbcaaa                          // vdiv.f32      s25, s23, s21
  .long  0xee8bca0a                          // vdiv.f32      s24, s22, s20
  .long  0xf302bdb7                          // vmul.f32      d11, d18, d23
  .long  0xf2428d8c                          // vadd.f32      d24, d18, d12
  .long  0xeecbdaa8                          // vdiv.f32      s27, s23, s17
  .long  0xee8bda08                          // vdiv.f32      s26, s22, s16
  .long  0xf2427d8d                          // vadd.f32      d23, d18, d13
  .long  0xf35541b7                          // vbsl          d20, d21, d23
  .long  0xf2c77f10                          // vmov.f32      d23, #1
  .long  0xf2645da2                          // vsub.f32      d21, d20, d18
  .long  0xf3098db5                          // vmul.f32      d8, d25, d21
  .long  0xf3665ea1                          // vcgt.f32      d21, d22, d17
  .long  0xf2679d87                          // vsub.f32      d25, d23, d7
  .long  0xf2677d83                          // vsub.f32      d23, d23, d3
  .long  0xeec8baaa                          // vdiv.f32      s23, s17, s21
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf2426d8b                          // vadd.f32      d22, d18, d11
  .long  0xf265f1b5                          // vorr          d31, d21, d21
  .long  0xf2422d89                          // vadd.f32      d18, d18, d9
  .long  0xf349bd90                          // vmul.f32      d27, d25, d0
  .long  0xf356f1b4                          // vbsl          d31, d22, d20
  .long  0xf347cd94                          // vmul.f32      d28, d23, d4
  .long  0xf349dd91                          // vmul.f32      d29, d25, d1
  .long  0xf3494d92                          // vmul.f32      d20, d25, d2
  .long  0xf3476d96                          // vmul.f32      d22, d23, d6
  .long  0xf347ed95                          // vmul.f32      d30, d23, d5
  .long  0xf26571b5                          // vorr          d23, d21, d21
  .long  0xf35251b3                          // vbsl          d21, d18, d19
  .long  0xf35871ba                          // vbsl          d23, d24, d26
  .long  0xf2438d07                          // vadd.f32      d24, d3, d7
  .long  0xf24c9dab                          // vadd.f32      d25, d28, d27
  .long  0xf24f2fa0                          // vmax.f32      d18, d31, d16
  .long  0xf2477fa0                          // vmax.f32      d23, d23, d16
  .long  0xf24e3dad                          // vadd.f32      d19, d30, d29
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2450fa0                          // vmax.f32      d16, d21, d16
  .long  0xf2283da1                          // vsub.f32      d3, d24, d17
  .long  0xf2090da2                          // vadd.f32      d0, d25, d18
  .long  0xf2031da7                          // vadd.f32      d1, d19, d23
  .long  0xf2042da0                          // vadd.f32      d2, d20, d16
  .long  0xecbd8b0c                          // vpop          {d8-d13}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_saturation_vfp4
.globl _sk_saturation_vfp4
FUNCTION(_sk_saturation_vfp4)
_sk_saturation_vfp4:
  .long  0xed2d8b0c                          // vpush         {d8-d13}
  .long  0xf3430d16                          // vmul.f32      d16, d3, d6
  .long  0xeddf7b82                          // vldr          d23, [pc, #520]
  .long  0xf3431d15                          // vmul.f32      d17, d3, d5
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2612f02                          // vmin.f32      d18, d1, d2
  .long  0xf2413f02                          // vmax.f32      d19, d1, d2
  .long  0xf3434d14                          // vmul.f32      d20, d3, d4
  .long  0xf2615fa0                          // vmin.f32      d21, d17, d16
  .long  0xf2602f22                          // vmin.f32      d18, d0, d18
  .long  0xf2403f23                          // vmax.f32      d19, d0, d19
  .long  0xf2416fa0                          // vmax.f32      d22, d17, d16
  .long  0xf2645fa5                          // vmin.f32      d21, d20, d21
  .long  0xf3468d37                          // vmul.f32      d24, d6, d23
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2443fa6                          // vmax.f32      d19, d20, d22
  .long  0xf2611da5                          // vsub.f32      d17, d17, d21
  .long  0xf2644da5                          // vsub.f32      d20, d20, d21
  .long  0xf3422d97                          // vmul.f32      d18, d18, d7
  .long  0xf2238da5                          // vsub.f32      d8, d19, d21
  .long  0xf2600da5                          // vsub.f32      d16, d16, d21
  .long  0xf3f96508                          // vceq.f32      d22, d8, #0
  .long  0xf26651b6                          // vorr          d21, d22, d22
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xeddf1b68                          // vldr          d17, [pc, #416]
  .long  0xf302adb4                          // vmul.f32      d10, d18, d20
  .long  0xf3453d31                          // vmul.f32      d19, d5, d17
  .long  0xf302bdb0                          // vmul.f32      d11, d18, d16
  .long  0xeddf2b66                          // vldr          d18, [pc, #408]
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xeec9caa8                          // vdiv.f32      s25, s19, s17
  .long  0xee89ca08                          // vdiv.f32      s24, s18, s16
  .long  0xeeca9aa8                          // vdiv.f32      s19, s21, s17
  .long  0xee8a9a08                          // vdiv.f32      s18, s20, s16
  .long  0xeecbaaa8                          // vdiv.f32      s21, s23, s17
  .long  0xee8baa08                          // vdiv.f32      s20, s22, s16
  .long  0xf3444d32                          // vmul.f32      d20, d4, d18
  .long  0xf350519c                          // vbsl          d21, d16, d12
  .long  0xf3459db1                          // vmul.f32      d25, d21, d17
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf26641b6                          // vorr          d20, d22, d22
  .long  0xf350619a                          // vbsl          d22, d16, d10
  .long  0xf3504199                          // vbsl          d20, d16, d9
  .long  0xf2433da8                          // vadd.f32      d19, d19, d24
  .long  0xf344adb2                          // vmul.f32      d26, d20, d18
  .long  0xf3468db7                          // vmul.f32      d24, d22, d23
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf24a9da9                          // vadd.f32      d25, d26, d25
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2633da8                          // vsub.f32      d19, d19, d24
  .long  0xf2458da3                          // vadd.f32      d24, d21, d19
  .long  0xf2445da3                          // vadd.f32      d21, d20, d19
  .long  0xf2466da3                          // vadd.f32      d22, d22, d19
  .long  0xf3481db1                          // vmul.f32      d17, d24, d17
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf3463db7                          // vmul.f32      d19, d22, d23
  .long  0xf2684fa6                          // vmin.f32      d20, d24, d22
  .long  0xf2487fa6                          // vmax.f32      d23, d24, d22
  .long  0xf2421da1                          // vadd.f32      d17, d18, d17
  .long  0xf2457fa7                          // vmax.f32      d23, d21, d23
  .long  0xf2432da1                          // vadd.f32      d18, d19, d17
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf3f944a3                          // vcge.f32      d20, d19, #0
  .long  0xf264a1b4                          // vorr          d26, d20, d20
  .long  0xf2661da2                          // vsub.f32      d17, d22, d18
  .long  0xf2228da3                          // vsub.f32      d8, d18, d19
  .long  0xf26431b4                          // vorr          d19, d20, d20
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xf3431d17                          // vmul.f32      d17, d3, d7
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf2429d8a                          // vadd.f32      d25, d18, d10
  .long  0xf35631b9                          // vbsl          d19, d22, d25
  .long  0xf2619da2                          // vsub.f32      d25, d17, d18
  .long  0xf2636da2                          // vsub.f32      d22, d19, d18
  .long  0xf227ada2                          // vsub.f32      d10, d23, d18
  .long  0xf309bdb6                          // vmul.f32      d11, d25, d22
  .long  0xf2686da2                          // vsub.f32      d22, d24, d18
  .long  0xeecb9aaa                          // vdiv.f32      s19, s23, s21
  .long  0xee8b9a0a                          // vdiv.f32      s18, s22, s20
  .long  0xf302bdb6                          // vmul.f32      d11, d18, d22
  .long  0xeecbcaa8                          // vdiv.f32      s25, s23, s17
  .long  0xee8bca08                          // vdiv.f32      s24, s22, s16
  .long  0xf2426d8c                          // vadd.f32      d22, d18, d12
  .long  0xf358a1b6                          // vbsl          d26, d24, d22
  .long  0xf26a6da2                          // vsub.f32      d22, d26, d18
  .long  0xf309bdb6                          // vmul.f32      d11, d25, d22
  .long  0xf2656da2                          // vsub.f32      d22, d21, d18
  .long  0xeecbcaaa                          // vdiv.f32      s25, s23, s21
  .long  0xee8bca0a                          // vdiv.f32      s24, s22, s20
  .long  0xf302bdb6                          // vmul.f32      d11, d18, d22
  .long  0xf2428d8c                          // vadd.f32      d24, d18, d12
  .long  0xeecbdaa8                          // vdiv.f32      s27, s23, s17
  .long  0xee8bda08                          // vdiv.f32      s26, s22, s16
  .long  0xf2426d8d                          // vadd.f32      d22, d18, d13
  .long  0xf35541b6                          // vbsl          d20, d21, d22
  .long  0xf2645da2                          // vsub.f32      d21, d20, d18
  .long  0xf3098db5                          // vmul.f32      d8, d25, d21
  .long  0xf3675ea1                          // vcgt.f32      d21, d23, d17
  .long  0xf2c77f10                          // vmov.f32      d23, #1
  .long  0xf2679d87                          // vsub.f32      d25, d23, d7
  .long  0xeec8baaa                          // vdiv.f32      s23, s17, s21
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf2677d83                          // vsub.f32      d23, d23, d3
  .long  0xf2426d8b                          // vadd.f32      d22, d18, d11
  .long  0xf265f1b5                          // vorr          d31, d21, d21
  .long  0xf2422d89                          // vadd.f32      d18, d18, d9
  .long  0xf349bd90                          // vmul.f32      d27, d25, d0
  .long  0xf356f1b4                          // vbsl          d31, d22, d20
  .long  0xf347cd94                          // vmul.f32      d28, d23, d4
  .long  0xf349dd91                          // vmul.f32      d29, d25, d1
  .long  0xf3494d92                          // vmul.f32      d20, d25, d2
  .long  0xf3476d96                          // vmul.f32      d22, d23, d6
  .long  0xf347ed95                          // vmul.f32      d30, d23, d5
  .long  0xf26571b5                          // vorr          d23, d21, d21
  .long  0xf35251b3                          // vbsl          d21, d18, d19
  .long  0xf35871ba                          // vbsl          d23, d24, d26
  .long  0xf2438d07                          // vadd.f32      d24, d3, d7
  .long  0xf24c9dab                          // vadd.f32      d25, d28, d27
  .long  0xf24f2fa0                          // vmax.f32      d18, d31, d16
  .long  0xf2477fa0                          // vmax.f32      d23, d23, d16
  .long  0xf24e3dad                          // vadd.f32      d19, d30, d29
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2450fa0                          // vmax.f32      d16, d21, d16
  .long  0xf2283da1                          // vsub.f32      d3, d24, d17
  .long  0xf2090da2                          // vadd.f32      d0, d25, d18
  .long  0xf2031da7                          // vadd.f32      d1, d19, d23
  .long  0xf2042da0                          // vadd.f32      d2, d20, d16
  .long  0xecbd8b0c                          // vpop          {d8-d13}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_color_vfp4
.globl _sk_color_vfp4
FUNCTION(_sk_color_vfp4)
_sk_color_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xeddf0b63                          // vldr          d16, [pc, #396]
  .long  0xf3412d17                          // vmul.f32      d18, d1, d7
  .long  0xeddf3b63                          // vldr          d19, [pc, #396]
  .long  0xf3401d17                          // vmul.f32      d17, d0, d7
  .long  0xf3454d30                          // vmul.f32      d20, d5, d16
  .long  0xeddf7b62                          // vldr          d23, [pc, #392]
  .long  0xf3446d33                          // vmul.f32      d22, d4, d19
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3425d17                          // vmul.f32      d21, d2, d7
  .long  0xf3428db0                          // vmul.f32      d24, d18, d16
  .long  0xf3419db3                          // vmul.f32      d25, d17, d19
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf346ad37                          // vmul.f32      d26, d6, d23
  .long  0xf3456db7                          // vmul.f32      d22, d21, d23
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2c0e010                          // vmov.i32      d30, #0
  .long  0xf2444daa                          // vadd.f32      d20, d20, d26
  .long  0xf2466da8                          // vadd.f32      d22, d22, d24
  .long  0xf3444d93                          // vmul.f32      d20, d20, d3
  .long  0xf2646da6                          // vsub.f32      d22, d20, d22
  .long  0xf2414da6                          // vadd.f32      d20, d17, d22
  .long  0xf2428da6                          // vadd.f32      d24, d18, d22
  .long  0xf2455da6                          // vadd.f32      d21, d21, d22
  .long  0xf3441db3                          // vmul.f32      d17, d20, d19
  .long  0xf3480db0                          // vmul.f32      d16, d24, d16
  .long  0xf3452db7                          // vmul.f32      d18, d21, d23
  .long  0xf2683fa5                          // vmin.f32      d19, d24, d21
  .long  0xf2486fa5                          // vmax.f32      d22, d24, d21
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf2421da0                          // vadd.f32      d17, d18, d16
  .long  0xf2642fa3                          // vmin.f32      d18, d20, d19
  .long  0xf3f934a2                          // vcge.f32      d19, d18, #0
  .long  0xf26391b3                          // vorr          d25, d19, d19
  .long  0xf2650da1                          // vsub.f32      d16, d21, d17
  .long  0xf2219da2                          // vsub.f32      d9, d17, d18
  .long  0xf26321b3                          // vorr          d18, d19, d19
  .long  0xf3018db0                          // vmul.f32      d8, d17, d16
  .long  0xf3430d17                          // vmul.f32      d16, d3, d7
  .long  0xeec8aaa9                          // vdiv.f32      s21, s17, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2417d8a                          // vadd.f32      d23, d17, d10
  .long  0xf35521b7                          // vbsl          d18, d21, d23
  .long  0xf2445fa6                          // vmax.f32      d21, d20, d22
  .long  0xf2626da1                          // vsub.f32      d22, d18, d17
  .long  0xf2607da1                          // vsub.f32      d23, d16, d17
  .long  0xf225ada1                          // vsub.f32      d10, d21, d17
  .long  0xf307bdb6                          // vmul.f32      d11, d23, d22
  .long  0xf2686da1                          // vsub.f32      d22, d24, d17
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xf301cdb6                          // vmul.f32      d12, d17, d22
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xeeccdaa9                          // vdiv.f32      s27, s25, s19
  .long  0xee8cda09                          // vdiv.f32      s26, s24, s18
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf35891b6                          // vbsl          d25, d24, d22
  .long  0xf2696da1                          // vsub.f32      d22, d25, d17
  .long  0xf307ddb6                          // vmul.f32      d13, d23, d22
  .long  0xf2646da1                          // vsub.f32      d22, d20, d17
  .long  0xeecdcaaa                          // vdiv.f32      s25, s27, s21
  .long  0xee8dca0a                          // vdiv.f32      s24, s26, s20
  .long  0xf301ddb6                          // vmul.f32      d13, d17, d22
  .long  0xf2418d8c                          // vadd.f32      d24, d17, d12
  .long  0xeecdeaa9                          // vdiv.f32      s29, s27, s19
  .long  0xee8dea09                          // vdiv.f32      s28, s26, s18
  .long  0xf2416d8e                          // vadd.f32      d22, d17, d14
  .long  0xf35431b6                          // vbsl          d19, d20, d22
  .long  0xf2634da1                          // vsub.f32      d20, d19, d17
  .long  0xf3079db4                          // vmul.f32      d9, d23, d20
  .long  0xf3654ea0                          // vcgt.f32      d20, d21, d16
  .long  0xf2c75f10                          // vmov.f32      d21, #1
  .long  0xf2657d83                          // vsub.f32      d23, d21, d3
  .long  0xeec9daaa                          // vdiv.f32      s27, s19, s21
  .long  0xee89da0a                          // vdiv.f32      s26, s18, s20
  .long  0xf2655d87                          // vsub.f32      d21, d21, d7
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf264f1b4                          // vorr          d31, d20, d20
  .long  0xf2411d88                          // vadd.f32      d17, d17, d8
  .long  0xf345ad90                          // vmul.f32      d26, d21, d0
  .long  0xf356f1b3                          // vbsl          d31, d22, d19
  .long  0xf26461b4                          // vorr          d22, d20, d20
  .long  0xf347bd94                          // vmul.f32      d27, d23, d4
  .long  0xf345cd91                          // vmul.f32      d28, d21, d1
  .long  0xf3453d92                          // vmul.f32      d19, d21, d2
  .long  0xf3475d96                          // vmul.f32      d21, d23, d6
  .long  0xf347dd95                          // vmul.f32      d29, d23, d5
  .long  0xf35141b2                          // vbsl          d20, d17, d18
  .long  0xf35861b9                          // vbsl          d22, d24, d25
  .long  0xf2437d07                          // vadd.f32      d23, d3, d7
  .long  0xf24b8daa                          // vadd.f32      d24, d27, d26
  .long  0xf24f1fae                          // vmax.f32      d17, d31, d30
  .long  0xf24d2dac                          // vadd.f32      d18, d29, d28
  .long  0xf2466fae                          // vmax.f32      d22, d22, d30
  .long  0xf2453da3                          // vadd.f32      d19, d21, d19
  .long  0xf2444fae                          // vmax.f32      d20, d20, d30
  .long  0xf2273da0                          // vsub.f32      d3, d23, d16
  .long  0xf2080da1                          // vadd.f32      d0, d24, d17
  .long  0xf2021da6                          // vadd.f32      d1, d18, d22
  .long  0xf2032da4                          // vadd.f32      d2, d19, d20
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_luminosity_vfp4
.globl _sk_luminosity_vfp4
FUNCTION(_sk_luminosity_vfp4)
_sk_luminosity_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xeddf0b63                          // vldr          d16, [pc, #396]
  .long  0xf3432d15                          // vmul.f32      d18, d3, d5
  .long  0xeddf3b63                          // vldr          d19, [pc, #396]
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3414d30                          // vmul.f32      d20, d1, d16
  .long  0xeddf7b62                          // vldr          d23, [pc, #392]
  .long  0xf3406d33                          // vmul.f32      d22, d0, d19
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf3428db0                          // vmul.f32      d24, d18, d16
  .long  0xf3419db3                          // vmul.f32      d25, d17, d19
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf342ad37                          // vmul.f32      d26, d2, d23
  .long  0xf3456db7                          // vmul.f32      d22, d21, d23
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2c0e010                          // vmov.i32      d30, #0
  .long  0xf2444daa                          // vadd.f32      d20, d20, d26
  .long  0xf2486da6                          // vadd.f32      d22, d24, d22
  .long  0xf3444d97                          // vmul.f32      d20, d20, d7
  .long  0xf2646da6                          // vsub.f32      d22, d20, d22
  .long  0xf2414da6                          // vadd.f32      d20, d17, d22
  .long  0xf2428da6                          // vadd.f32      d24, d18, d22
  .long  0xf2455da6                          // vadd.f32      d21, d21, d22
  .long  0xf3441db3                          // vmul.f32      d17, d20, d19
  .long  0xf3480db0                          // vmul.f32      d16, d24, d16
  .long  0xf3452db7                          // vmul.f32      d18, d21, d23
  .long  0xf2683fa5                          // vmin.f32      d19, d24, d21
  .long  0xf2486fa5                          // vmax.f32      d22, d24, d21
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf2421da0                          // vadd.f32      d17, d18, d16
  .long  0xf2642fa3                          // vmin.f32      d18, d20, d19
  .long  0xf3f934a2                          // vcge.f32      d19, d18, #0
  .long  0xf26391b3                          // vorr          d25, d19, d19
  .long  0xf2650da1                          // vsub.f32      d16, d21, d17
  .long  0xf2219da2                          // vsub.f32      d9, d17, d18
  .long  0xf26321b3                          // vorr          d18, d19, d19
  .long  0xf3018db0                          // vmul.f32      d8, d17, d16
  .long  0xf3430d17                          // vmul.f32      d16, d3, d7
  .long  0xeec8aaa9                          // vdiv.f32      s21, s17, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2417d8a                          // vadd.f32      d23, d17, d10
  .long  0xf35521b7                          // vbsl          d18, d21, d23
  .long  0xf2445fa6                          // vmax.f32      d21, d20, d22
  .long  0xf2626da1                          // vsub.f32      d22, d18, d17
  .long  0xf2607da1                          // vsub.f32      d23, d16, d17
  .long  0xf225ada1                          // vsub.f32      d10, d21, d17
  .long  0xf307bdb6                          // vmul.f32      d11, d23, d22
  .long  0xf2686da1                          // vsub.f32      d22, d24, d17
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xf301cdb6                          // vmul.f32      d12, d17, d22
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xeeccdaa9                          // vdiv.f32      s27, s25, s19
  .long  0xee8cda09                          // vdiv.f32      s26, s24, s18
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf35891b6                          // vbsl          d25, d24, d22
  .long  0xf2696da1                          // vsub.f32      d22, d25, d17
  .long  0xf307ddb6                          // vmul.f32      d13, d23, d22
  .long  0xf2646da1                          // vsub.f32      d22, d20, d17
  .long  0xeecdcaaa                          // vdiv.f32      s25, s27, s21
  .long  0xee8dca0a                          // vdiv.f32      s24, s26, s20
  .long  0xf301ddb6                          // vmul.f32      d13, d17, d22
  .long  0xf2418d8c                          // vadd.f32      d24, d17, d12
  .long  0xeecdeaa9                          // vdiv.f32      s29, s27, s19
  .long  0xee8dea09                          // vdiv.f32      s28, s26, s18
  .long  0xf2416d8e                          // vadd.f32      d22, d17, d14
  .long  0xf35431b6                          // vbsl          d19, d20, d22
  .long  0xf2634da1                          // vsub.f32      d20, d19, d17
  .long  0xf3079db4                          // vmul.f32      d9, d23, d20
  .long  0xf3654ea0                          // vcgt.f32      d20, d21, d16
  .long  0xf2c75f10                          // vmov.f32      d21, #1
  .long  0xf2657d83                          // vsub.f32      d23, d21, d3
  .long  0xeec9daaa                          // vdiv.f32      s27, s19, s21
  .long  0xee89da0a                          // vdiv.f32      s26, s18, s20
  .long  0xf2655d87                          // vsub.f32      d21, d21, d7
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf264f1b4                          // vorr          d31, d20, d20
  .long  0xf2411d88                          // vadd.f32      d17, d17, d8
  .long  0xf345ad90                          // vmul.f32      d26, d21, d0
  .long  0xf356f1b3                          // vbsl          d31, d22, d19
  .long  0xf26461b4                          // vorr          d22, d20, d20
  .long  0xf347bd94                          // vmul.f32      d27, d23, d4
  .long  0xf345cd91                          // vmul.f32      d28, d21, d1
  .long  0xf3453d92                          // vmul.f32      d19, d21, d2
  .long  0xf3475d96                          // vmul.f32      d21, d23, d6
  .long  0xf347dd95                          // vmul.f32      d29, d23, d5
  .long  0xf35141b2                          // vbsl          d20, d17, d18
  .long  0xf35861b9                          // vbsl          d22, d24, d25
  .long  0xf2437d07                          // vadd.f32      d23, d3, d7
  .long  0xf24b8daa                          // vadd.f32      d24, d27, d26
  .long  0xf24f1fae                          // vmax.f32      d17, d31, d30
  .long  0xf24d2dac                          // vadd.f32      d18, d29, d28
  .long  0xf2466fae                          // vmax.f32      d22, d22, d30
  .long  0xf2453da3                          // vadd.f32      d19, d21, d19
  .long  0xf2444fae                          // vmax.f32      d20, d20, d30
  .long  0xf2273da0                          // vsub.f32      d3, d23, d16
  .long  0xf2080da1                          // vadd.f32      d0, d24, d17
  .long  0xf2021da6                          // vadd.f32      d1, d18, d22
  .long  0xf2032da4                          // vadd.f32      d2, d19, d20
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_srcover_rgba_8888_vfp4
.globl _sk_srcover_rgba_8888_vfp4
FUNCTION(_sk_srcover_rgba_8888_vfp4)
_sk_srcover_rgba_8888_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc102                          // add           ip, ip, r2, lsl #2
  .long  0x0a00002c                          // beq           13c8 <sk_srcover_rgba_8888_vfp4+0xd0>
  .long  0xed9c4b00                          // vldr          d4, [ip]
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xeddf6b2f                          // vldr          d22, [pc, #188]
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xf3f82014                          // vshr.u32      d18, d4, #8
  .long  0xf3e84014                          // vshr.u32      d20, d4, #24
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf24221b0                          // vand          d18, d18, d16
  .long  0xf3f03014                          // vshr.u32      d19, d4, #16
  .long  0xf3bb7624                          // vcvt.f32.s32  d7, d20
  .long  0xf2445130                          // vand          d21, d4, d16
  .long  0xf3033d36                          // vmul.f32      d3, d3, d22
  .long  0xf24301b0                          // vand          d16, d19, d16
  .long  0xf3bb5622                          // vcvt.f32.s32  d5, d18
  .long  0xf3011d36                          // vmul.f32      d1, d1, d22
  .long  0xf3bb4625                          // vcvt.f32.s32  d4, d21
  .long  0xf3000d36                          // vmul.f32      d0, d0, d22
  .long  0xf3bb6620                          // vcvt.f32.s32  d6, d16
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf3022d36                          // vmul.f32      d2, d2, d22
  .long  0xf2051c31                          // vfma.f32      d1, d5, d17
  .long  0xf2040c31                          // vfma.f32      d0, d4, d17
  .long  0xf2062c31                          // vfma.f32      d2, d6, d17
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xf2431d20                          // vadd.f32      d17, d3, d16
  .long  0xf2413d20                          // vadd.f32      d19, d1, d16
  .long  0xf2402d20                          // vadd.f32      d18, d0, d16
  .long  0xf2420d20                          // vadd.f32      d16, d2, d16
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf3fb37a3                          // vcvt.u32.f32  d19, d19
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf3fb07a0                          // vcvt.u32.f32  d16, d16
  .long  0xf2f81531                          // vshl.s32      d17, d17, #24
  .long  0xf26111b2                          // vorr          d17, d17, d18
  .long  0xf2e82533                          // vshl.s32      d18, d19, #8
  .long  0xf2f00530                          // vshl.s32      d16, d16, #16
  .long  0xf26111b2                          // vorr          d17, d17, d18
  .long  0xf26101b0                          // vorr          d16, d17, d16
  .long  0x0a000007                          // beq           13d4 <sk_srcover_rgba_8888_vfp4+0xdc>
  .long  0xedcc0b00                          // vstr          d16, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xeddf4a06                          // vldr          s9, [pc, #24]
  .long  0xed9c4a00                          // vldr          s8, [ip]
  .long  0xeaffffd0                          // b             1318 <sk_srcover_rgba_8888_vfp4+0x20>
  .long  0xf4cc083f                          // vst1.32       {d16[0]}, [ip :32]
  .long  0xeafffff6                          // b             13b8 <sk_srcover_rgba_8888_vfp4+0xc0>
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x00000000                          // .word         0x00000000

HIDDEN _sk_clamp_0_vfp4
.globl _sk_clamp_0_vfp4
FUNCTION(_sk_clamp_0_vfp4)
_sk_clamp_0_vfp4:
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2000f20                          // vmax.f32      d0, d0, d16
  .long  0xf2011f20                          // vmax.f32      d1, d1, d16
  .long  0xf2022f20                          // vmax.f32      d2, d2, d16
  .long  0xf2033f20                          // vmax.f32      d3, d3, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_1_vfp4
.globl _sk_clamp_1_vfp4
FUNCTION(_sk_clamp_1_vfp4)
_sk_clamp_1_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2200f20                          // vmin.f32      d0, d0, d16
  .long  0xf2211f20                          // vmin.f32      d1, d1, d16
  .long  0xf2222f20                          // vmin.f32      d2, d2, d16
  .long  0xf2233f20                          // vmin.f32      d3, d3, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_a_vfp4
.globl _sk_clamp_a_vfp4
FUNCTION(_sk_clamp_a_vfp4)
_sk_clamp_a_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2233f20                          // vmin.f32      d3, d3, d16
  .long  0xf2200f03                          // vmin.f32      d0, d0, d3
  .long  0xf2211f03                          // vmin.f32      d1, d1, d3
  .long  0xf2222f03                          // vmin.f32      d2, d2, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_a_dst_vfp4
.globl _sk_clamp_a_dst_vfp4
FUNCTION(_sk_clamp_a_dst_vfp4)
_sk_clamp_a_dst_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2277f20                          // vmin.f32      d7, d7, d16
  .long  0xf2244f07                          // vmin.f32      d4, d4, d7
  .long  0xf2255f07                          // vmin.f32      d5, d5, d7
  .long  0xf2266f07                          // vmin.f32      d6, d6, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_set_rgb_vfp4
.globl _sk_set_rgb_vfp4
FUNCTION(_sk_set_rgb_vfp4)
_sk_set_rgb_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4ae0c9d                          // vld1.32       {d0[]}, [lr :32]!
  .long  0xf4a42c9f                          // vld1.32       {d2[]}, [r4 :32]
  .long  0xf4ae1c9f                          // vld1.32       {d1[]}, [lr :32]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_swap_rb_vfp4
.globl _sk_swap_rb_vfp4
FUNCTION(_sk_swap_rb_vfp4)
_sk_swap_rb_vfp4:
  .long  0xeef00b40                          // vmov.f64      d16, d0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb00b42                          // vmov.f64      d0, d2
  .long  0xeeb02b60                          // vmov.f64      d2, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_swap_rb_dst_vfp4
.globl _sk_swap_rb_dst_vfp4
FUNCTION(_sk_swap_rb_dst_vfp4)
_sk_swap_rb_dst_vfp4:
  .long  0xeef00b44                          // vmov.f64      d16, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb04b46                          // vmov.f64      d4, d6
  .long  0xeeb06b60                          // vmov.f64      d6, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_move_src_dst_vfp4
.globl _sk_move_src_dst_vfp4
FUNCTION(_sk_move_src_dst_vfp4)
_sk_move_src_dst_vfp4:
  .long  0xeeb04b40                          // vmov.f64      d4, d0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb05b41                          // vmov.f64      d5, d1
  .long  0xeeb06b42                          // vmov.f64      d6, d2
  .long  0xeeb07b43                          // vmov.f64      d7, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_move_dst_src_vfp4
.globl _sk_move_dst_src_vfp4
FUNCTION(_sk_move_dst_src_vfp4)
_sk_move_dst_src_vfp4:
  .long  0xeeb00b44                          // vmov.f64      d0, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb01b45                          // vmov.f64      d1, d5
  .long  0xeeb02b46                          // vmov.f64      d2, d6
  .long  0xeeb03b47                          // vmov.f64      d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_premul_vfp4
.globl _sk_premul_vfp4
FUNCTION(_sk_premul_vfp4)
_sk_premul_vfp4:
  .long  0xf3000d13                          // vmul.f32      d0, d0, d3
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3011d13                          // vmul.f32      d1, d1, d3
  .long  0xf3022d13                          // vmul.f32      d2, d2, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_unpremul_vfp4
.globl _sk_unpremul_vfp4
FUNCTION(_sk_unpremul_vfp4)
_sk_unpremul_vfp4:
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xeeb78a00                          // vmov.f32      s16, #112
  .long  0xf3f91503                          // vceq.f32      d17, d3, #0
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeec89a23                          // vdiv.f32      s19, s16, s7
  .long  0xee889a03                          // vdiv.f32      s18, s16, s6
  .long  0xf3501199                          // vbsl          d17, d16, d9
  .long  0xf3010d90                          // vmul.f32      d0, d17, d0
  .long  0xf3011d91                          // vmul.f32      d1, d17, d1
  .long  0xf3012d92                          // vmul.f32      d2, d17, d2
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_from_srgb_vfp4
.globl _sk_from_srgb_vfp4
FUNCTION(_sk_from_srgb_vfp4)
_sk_from_srgb_vfp4:
  .long  0xeddf3b20                          // vldr          d19, [pc, #128]
  .long  0xf3408d10                          // vmul.f32      d24, d0, d0
  .long  0xeddf0b1c                          // vldr          d16, [pc, #112]
  .long  0xf26341b3                          // vorr          d20, d19, d19
  .long  0xf26351b3                          // vorr          d21, d19, d19
  .long  0xeddf9b1f                          // vldr          d25, [pc, #124]
  .long  0xf2404c30                          // vfma.f32      d20, d0, d16
  .long  0xeddf2b1b                          // vldr          d18, [pc, #108]
  .long  0xf2415c30                          // vfma.f32      d21, d1, d16
  .long  0xeddfcb1d                          // vldr          d28, [pc, #116]
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3426d12                          // vmul.f32      d22, d2, d2
  .long  0xf3417d11                          // vmul.f32      d23, d1, d1
  .long  0xf3620e80                          // vcgt.f32      d16, d18, d0
  .long  0xf3621e81                          // vcgt.f32      d17, d18, d1
  .long  0xf341ad39                          // vmul.f32      d26, d1, d25
  .long  0xf342bd39                          // vmul.f32      d27, d2, d25
  .long  0xf3622e82                          // vcgt.f32      d18, d18, d2
  .long  0xf3409d39                          // vmul.f32      d25, d0, d25
  .long  0xf26cd1bc                          // vorr          d29, d28, d28
  .long  0xf248dcb4                          // vfma.f32      d29, d24, d20
  .long  0xf26c41bc                          // vorr          d20, d28, d28
  .long  0xf2474cb5                          // vfma.f32      d20, d23, d21
  .long  0xf246ccb3                          // vfma.f32      d28, d22, d19
  .long  0xf35901bd                          // vbsl          d16, d25, d29
  .long  0xf35a11b4                          // vbsl          d17, d26, d20
  .long  0xf35b21bc                          // vbsl          d18, d27, d28
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff1c                          // bx            ip
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3f328f5c                          // .word         0x3f328f5c
  .long  0x3f328f5c                          // .word         0x3f328f5c
  .long  0x3d6147ae                          // .word         0x3d6147ae
  .long  0x3d6147ae                          // .word         0x3d6147ae
  .long  0x3d9e8391                          // .word         0x3d9e8391
  .long  0x3d9e8391                          // .word         0x3d9e8391
  .long  0x3b23d70a                          // .word         0x3b23d70a
  .long  0x3b23d70a                          // .word         0x3b23d70a

HIDDEN _sk_from_srgb_dst_vfp4
.globl _sk_from_srgb_dst_vfp4
FUNCTION(_sk_from_srgb_dst_vfp4)
_sk_from_srgb_dst_vfp4:
  .long  0xeddf3b20                          // vldr          d19, [pc, #128]
  .long  0xf3448d14                          // vmul.f32      d24, d4, d4
  .long  0xeddf0b1c                          // vldr          d16, [pc, #112]
  .long  0xf26341b3                          // vorr          d20, d19, d19
  .long  0xf26351b3                          // vorr          d21, d19, d19
  .long  0xeddf9b1f                          // vldr          d25, [pc, #124]
  .long  0xf2444c30                          // vfma.f32      d20, d4, d16
  .long  0xeddf2b1b                          // vldr          d18, [pc, #108]
  .long  0xf2455c30                          // vfma.f32      d21, d5, d16
  .long  0xeddfcb1d                          // vldr          d28, [pc, #116]
  .long  0xf2463c30                          // vfma.f32      d19, d6, d16
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3466d16                          // vmul.f32      d22, d6, d6
  .long  0xf3457d15                          // vmul.f32      d23, d5, d5
  .long  0xf3620e84                          // vcgt.f32      d16, d18, d4
  .long  0xf3621e85                          // vcgt.f32      d17, d18, d5
  .long  0xf345ad39                          // vmul.f32      d26, d5, d25
  .long  0xf346bd39                          // vmul.f32      d27, d6, d25
  .long  0xf3622e86                          // vcgt.f32      d18, d18, d6
  .long  0xf3449d39                          // vmul.f32      d25, d4, d25
  .long  0xf26cd1bc                          // vorr          d29, d28, d28
  .long  0xf248dcb4                          // vfma.f32      d29, d24, d20
  .long  0xf26c41bc                          // vorr          d20, d28, d28
  .long  0xf2474cb5                          // vfma.f32      d20, d23, d21
  .long  0xf246ccb3                          // vfma.f32      d28, d22, d19
  .long  0xf35901bd                          // vbsl          d16, d25, d29
  .long  0xf35a11b4                          // vbsl          d17, d26, d20
  .long  0xf35b21bc                          // vbsl          d18, d27, d28
  .long  0xf22041b0                          // vorr          d4, d16, d16
  .long  0xf22151b1                          // vorr          d5, d17, d17
  .long  0xf22261b2                          // vorr          d6, d18, d18
  .long  0xe12fff1c                          // bx            ip
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3f328f5c                          // .word         0x3f328f5c
  .long  0x3f328f5c                          // .word         0x3f328f5c
  .long  0x3d6147ae                          // .word         0x3d6147ae
  .long  0x3d6147ae                          // .word         0x3d6147ae
  .long  0x3d9e8391                          // .word         0x3d9e8391
  .long  0x3d9e8391                          // .word         0x3d9e8391
  .long  0x3b23d70a                          // .word         0x3b23d70a
  .long  0x3b23d70a                          // .word         0x3b23d70a

HIDDEN _sk_to_srgb_vfp4
.globl _sk_to_srgb_vfp4
FUNCTION(_sk_to_srgb_vfp4)
_sk_to_srgb_vfp4:
  .long  0xf3fb0580                          // vrsqrte.f32   d16, d0
  .long  0xeddf9b3b                          // vldr          d25, [pc, #236]
  .long  0xf3fb1581                          // vrsqrte.f32   d17, d1
  .long  0xeddf7b37                          // vldr          d23, [pc, #220]
  .long  0xf3fb2582                          // vrsqrte.f32   d18, d2
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf269a1b9                          // vorr          d26, d25, d25
  .long  0xf269c1b9                          // vorr          d28, d25, d25
  .long  0xf3403db0                          // vmul.f32      d19, d16, d16
  .long  0xf3414db1                          // vmul.f32      d20, d17, d17
  .long  0xf3425db2                          // vmul.f32      d21, d18, d18
  .long  0xf2603f33                          // vrsqrts.f32   d19, d0, d19
  .long  0xf2614f34                          // vrsqrts.f32   d20, d1, d20
  .long  0xf2625f35                          // vrsqrts.f32   d21, d2, d21
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xeddf3b29                          // vldr          d19, [pc, #164]
  .long  0xf3411db4                          // vmul.f32      d17, d17, d20
  .long  0xf3422db5                          // vmul.f32      d18, d18, d21
  .long  0xf2404da3                          // vadd.f32      d20, d16, d19
  .long  0xf2415da3                          // vadd.f32      d21, d17, d19
  .long  0xf2423da3                          // vadd.f32      d19, d18, d19
  .long  0xf240acb7                          // vfma.f32      d26, d16, d23
  .long  0xf3fb6524                          // vrecpe.f32    d22, d20
  .long  0xf3fb8525                          // vrecpe.f32    d24, d21
  .long  0xf3fbb523                          // vrecpe.f32    d27, d19
  .long  0xf241ccb7                          // vfma.f32      d28, d17, d23
  .long  0xf2429cb7                          // vfma.f32      d25, d18, d23
  .long  0xeddf7b23                          // vldr          d23, [pc, #140]
  .long  0xf2455fb8                          // vrecps.f32    d21, d21, d24
  .long  0xf2444fb6                          // vrecps.f32    d20, d20, d22
  .long  0xf2433fbb                          // vrecps.f32    d19, d19, d27
  .long  0xf267d1b7                          // vorr          d29, d23, d23
  .long  0xf240dcba                          // vfma.f32      d29, d16, d26
  .long  0xf267a1b7                          // vorr          d26, d23, d23
  .long  0xf241acbc                          // vfma.f32      d26, d17, d28
  .long  0xf2427cb9                          // vfma.f32      d23, d18, d25
  .long  0xeddf2b1e                          // vldr          d18, [pc, #120]
  .long  0xf3620e80                          // vcgt.f32      d16, d18, d0
  .long  0xf3485db5                          // vmul.f32      d21, d24, d21
  .long  0xeddf8b19                          // vldr          d24, [pc, #100]
  .long  0xf3464db4                          // vmul.f32      d20, d22, d20
  .long  0xf34b3db3                          // vmul.f32      d19, d27, d19
  .long  0xf3621e81                          // vcgt.f32      d17, d18, d1
  .long  0xf3406d38                          // vmul.f32      d22, d0, d24
  .long  0xf3419d38                          // vmul.f32      d25, d1, d24
  .long  0xf3622e82                          // vcgt.f32      d18, d18, d2
  .long  0xf3428d38                          // vmul.f32      d24, d2, d24
  .long  0xf34d4db4                          // vmul.f32      d20, d29, d20
  .long  0xf34a5db5                          // vmul.f32      d21, d26, d21
  .long  0xf3473db3                          // vmul.f32      d19, d23, d19
  .long  0xf35601b4                          // vbsl          d16, d22, d20
  .long  0xf35911b5                          // vbsl          d17, d25, d21
  .long  0xf35821b3                          // vbsl          d18, d24, d19
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3e10c64c                          // .word         0x3e10c64c
  .long  0x3e10c64c                          // .word         0x3e10c64c
  .long  0xbb20d739                          // .word         0xbb20d739
  .long  0xbb20d739                          // .word         0xbb20d739
  .long  0x3c629fba                          // .word         0x3c629fba
  .long  0x3c629fba                          // .word         0x3c629fba
  .long  0x3f90a3d7                          // .word         0x3f90a3d7
  .long  0x3f90a3d7                          // .word         0x3f90a3d7
  .long  0x414eb852                          // .word         0x414eb852
  .long  0x414eb852                          // .word         0x414eb852
  .long  0x3b98b1a8                          // .word         0x3b98b1a8
  .long  0x3b98b1a8                          // .word         0x3b98b1a8

HIDDEN _sk_rgb_to_hsl_vfp4
.globl _sk_rgb_to_hsl_vfp4
FUNCTION(_sk_rgb_to_hsl_vfp4)
_sk_rgb_to_hsl_vfp4:
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xf2401f01                          // vmax.f32      d17, d0, d1
  .long  0xeddf9b2c                          // vldr          d25, [pc, #176]
  .long  0xf2600f01                          // vmin.f32      d16, d0, d1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb78a00                          // vmov.f32      s16, #112
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xf2411f82                          // vmax.f32      d17, d17, d2
  .long  0xf2602f82                          // vmin.f32      d18, d16, d2
  .long  0xf2c45610                          // vmov.i32      d21, #1073741824
  .long  0xf2607d01                          // vsub.f32      d23, d0, d1
  .long  0xf2656da1                          // vsub.f32      d22, d21, d17
  .long  0xf221ada2                          // vsub.f32      d10, d17, d18
  .long  0xf2413da2                          // vadd.f32      d19, d17, d18
  .long  0xf2c08010                          // vmov.i32      d24, #0
  .long  0xf2666da2                          // vsub.f32      d22, d22, d18
  .long  0xf241ae80                          // vceq.f32      d26, d17, d0
  .long  0xeec8ba2a                          // vdiv.f32      s23, s16, s21
  .long  0xf3430db4                          // vmul.f32      d16, d19, d20
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf3209ea4                          // vcgt.f32      d9, d16, d20
  .long  0xf2614d02                          // vsub.f32      d20, d1, d2
  .long  0xf3477d9b                          // vmul.f32      d23, d23, d11
  .long  0xf31691b3                          // vbsl          d9, d22, d19
  .long  0xf2623d00                          // vsub.f32      d19, d2, d0
  .long  0xf3626e01                          // vcgt.f32      d22, d2, d1
  .long  0xeeca8aa9                          // vdiv.f32      s17, s21, s19
  .long  0xee8a8a09                          // vdiv.f32      s16, s20, s18
  .long  0xf3433d9b                          // vmul.f32      d19, d19, d11
  .long  0xf3444d9b                          // vmul.f32      d20, d20, d11
  .long  0xf35961b8                          // vbsl          d22, d25, d24
  .long  0xf2419e81                          // vceq.f32      d25, d17, d1
  .long  0xf2011ea2                          // vceq.f32      d1, d17, d18
  .long  0xf2433da5                          // vadd.f32      d19, d19, d21
  .long  0xf2c15f10                          // vmov.f32      d21, #4
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2471da5                          // vadd.f32      d17, d23, d21
  .long  0xf35391b1                          // vbsl          d25, d19, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf2612111                          // vorr          d18, d1, d1
  .long  0xf354a1b9                          // vbsl          d26, d20, d25
  .long  0xf35821ba                          // vbsl          d18, d24, d26
  .long  0xf3181198                          // vbsl          d1, d24, d8
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x40c00000                          // .word         0x40c00000
  .long  0x40c00000                          // .word         0x40c00000
  .long  0x3e2aaaab                          // .word         0x3e2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab

HIDDEN _sk_hsl_to_rgb_vfp4
.globl _sk_hsl_to_rgb_vfp4
FUNCTION(_sk_hsl_to_rgb_vfp4)
_sk_hsl_to_rgb_vfp4:
  .long  0xed2d8b02                          // vpush         {d8}
  .long  0xeddf0b51                          // vldr          d16, [pc, #324]
  .long  0xf3fb2700                          // vcvt.s32.f32  d18, d0
  .long  0xeddf1b51                          // vldr          d17, [pc, #324]
  .long  0xf2400d20                          // vadd.f32      d16, d0, d16
  .long  0xf2401d21                          // vadd.f32      d17, d0, d17
  .long  0xeddfab50                          // vldr          d26, [pc, #320]
  .long  0xf3416d12                          // vmul.f32      d22, d1, d2
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3720                          // vcvt.s32.f32  d19, d16
  .long  0xf3fb4721                          // vcvt.s32.f32  d20, d17
  .long  0xf2c3761f                          // vmov.i32      d23, #1056964608
  .long  0xf3625e80                          // vcgt.f32      d21, d18, d0
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf2c08010                          // vmov.i32      d24, #0
  .long  0xf35a51b8                          // vbsl          d21, d26, d24
  .long  0xf3639ea0                          // vcgt.f32      d25, d19, d16
  .long  0xf364bea1                          // vcgt.f32      d27, d20, d17
  .long  0xf342ce27                          // vcge.f32      d28, d2, d23
  .long  0xf261dd26                          // vsub.f32      d29, d1, d22
  .long  0xf35a91b8                          // vbsl          d25, d26, d24
  .long  0xf35ab1b8                          // vbsl          d27, d26, d24
  .long  0xf2622da5                          // vsub.f32      d18, d18, d21
  .long  0xf2633da9                          // vsub.f32      d19, d19, d25
  .long  0xf2644dab                          // vsub.f32      d20, d20, d27
  .long  0xf35dc1b6                          // vbsl          d28, d29, d22
  .long  0xeddfdb3c                          // vldr          d29, [pc, #240]
  .long  0xf2602d22                          // vsub.f32      d18, d0, d18
  .long  0xf2600da3                          // vsub.f32      d16, d16, d19
  .long  0xf2c15f18                          // vmov.f32      d21, #6
  .long  0xf2426d02                          // vadd.f32      d22, d2, d2
  .long  0xf24c8d82                          // vadd.f32      d24, d28, d2
  .long  0xf2611da4                          // vsub.f32      d17, d17, d20
  .long  0xf3423db5                          // vmul.f32      d19, d18, d21
  .long  0xf3409db5                          // vmul.f32      d25, d16, d21
  .long  0xf2664da8                          // vsub.f32      d20, d22, d24
  .long  0xf3415db5                          // vmul.f32      d21, d17, d21
  .long  0xf2c16f10                          // vmov.f32      d22, #4
  .long  0xf342eead                          // vcge.f32      d30, d18, d29
  .long  0xf266ada3                          // vsub.f32      d26, d22, d19
  .long  0xf268bda4                          // vsub.f32      d27, d24, d20
  .long  0xf266cda9                          // vsub.f32      d28, d22, d25
  .long  0xf2666da5                          // vsub.f32      d22, d22, d21
  .long  0xf340fead                          // vcge.f32      d31, d16, d29
  .long  0xf34badba                          // vmul.f32      d26, d27, d26
  .long  0xf341dead                          // vcge.f32      d29, d17, d29
  .long  0xf34bcdbc                          // vmul.f32      d28, d27, d28
  .long  0xf34b6db6                          // vmul.f32      d22, d27, d22
  .long  0xf244adaa                          // vadd.f32      d26, d20, d26
  .long  0xf3020ea7                          // vcge.f32      d0, d18, d23
  .long  0xf3008ea7                          // vcge.f32      d8, d16, d23
  .long  0xf354e1ba                          // vbsl          d30, d20, d26
  .long  0xeddfab24                          // vldr          d26, [pc, #144]
  .long  0xf244cdac                          // vadd.f32      d28, d20, d28
  .long  0xf2446da6                          // vadd.f32      d22, d20, d22
  .long  0xf34b3db3                          // vmul.f32      d19, d27, d19
  .long  0xf34b9db9                          // vmul.f32      d25, d27, d25
  .long  0xf3417ea7                          // vcge.f32      d23, d17, d23
  .long  0xf354d1b6                          // vbsl          d29, d20, d22
  .long  0xf354f1bc                          // vbsl          d31, d20, d28
  .long  0xf3406eaa                          // vcge.f32      d22, d16, d26
  .long  0xf3422eaa                          // vcge.f32      d18, d18, d26
  .long  0xf34b5db5                          // vmul.f32      d21, d27, d21
  .long  0xf3411eaa                          // vcge.f32      d17, d17, d26
  .long  0xf31e01b8                          // vbsl          d0, d30, d24
  .long  0xf31f81b8                          // vbsl          d8, d31, d24
  .long  0xf2440da3                          // vadd.f32      d16, d20, d19
  .long  0xf2443da9                          // vadd.f32      d19, d20, d25
  .long  0xf3502130                          // vbsl          d18, d0, d16
  .long  0xf3f90501                          // vceq.f32      d16, d1, #0
  .long  0xf35d71b8                          // vbsl          d23, d29, d24
  .long  0xf3586133                          // vbsl          d22, d8, d19
  .long  0xf22011b0                          // vorr          d1, d16, d16
  .long  0xf2444da5                          // vadd.f32      d20, d20, d21
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf3520136                          // vbsl          d16, d2, d22
  .long  0xf35711b4                          // vbsl          d17, d23, d20
  .long  0xf3121132                          // vbsl          d1, d2, d18
  .long  0xf3120131                          // vbsl          d0, d2, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xecbd8b02                          // vpop          {d8}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0x3eaaaaab                          // .word         0x3eaaaaab
  .long  0x3eaaaaab                          // .word         0x3eaaaaab
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f2aaaab                          // .word         0x3f2aaaab
  .long  0x3f2aaaab                          // .word         0x3f2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab

HIDDEN _sk_scale_1_float_vfp4
.globl _sk_scale_1_float_vfp4
FUNCTION(_sk_scale_1_float_vfp4)
_sk_scale_1_float_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee0c9f                          // vld1.32       {d16[]}, [lr :32]
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_scale_u8_vfp4
.globl _sk_scale_u8_vfp4
FUNCTION(_sk_scale_u8_vfp4)
_sk_scale_u8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe24dd008                          // sub           sp, sp, #8
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de020                          // ldr           lr, [sp, #32]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a000014                          // beq           1a80 <sk_scale_u8_vfp4+0x78>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b4                          // strh          ip, [sp, #4]
  .long  0xe28dc004                          // add           ip, sp, #4
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3908a30                          // vmovl.u16     q4, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b10                          // vldr          d17, [pc, #64]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2480130                          // vand          d16, d8, d16
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe28dd008                          // add           sp, sp, #8
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf8a03                          // vldr          s17, [pc, #12]
  .long  0xee08ca10                          // vmov          s16, ip
  .long  0xeaffffec                          // b             1a44 <sk_scale_u8_vfp4+0x3c>
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000

HIDDEN _sk_lerp_1_float_vfp4
.globl _sk_lerp_1_float_vfp4
FUNCTION(_sk_lerp_1_float_vfp4)
_sk_lerp_1_float_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2600d04                          // vsub.f32      d16, d0, d4
  .long  0xf2611d05                          // vsub.f32      d17, d1, d5
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2622d06                          // vsub.f32      d18, d2, d6
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2633d07                          // vsub.f32      d19, d3, d7
  .long  0xf4ee4c9f                          // vld1.32       {d20[]}, [lr :32]
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xf2273117                          // vorr          d3, d7, d7
  .long  0xf2000cb4                          // vfma.f32      d0, d16, d20
  .long  0xf2011cb4                          // vfma.f32      d1, d17, d20
  .long  0xf2022cb4                          // vfma.f32      d2, d18, d20
  .long  0xf2033cb4                          // vfma.f32      d3, d19, d20
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_lerp_u8_vfp4
.globl _sk_lerp_u8_vfp4
FUNCTION(_sk_lerp_u8_vfp4)
_sk_lerp_u8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe24dd008                          // sub           sp, sp, #8
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de020                          // ldr           lr, [sp, #32]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a00001e                          // beq           1b88 <sk_lerp_u8_vfp4+0xa0>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b4                          // strh          ip, [sp, #4]
  .long  0xe28dc004                          // add           ip, sp, #4
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3908a30                          // vmovl.u16     q4, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b1a                          // vldr          d17, [pc, #104]
  .long  0xf2602d04                          // vsub.f32      d18, d0, d4
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xf2480130                          // vand          d16, d8, d16
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xf2623d06                          // vsub.f32      d19, d2, d6
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xf2634d07                          // vsub.f32      d20, d3, d7
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf2611d05                          // vsub.f32      d17, d1, d5
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xf2273117                          // vorr          d3, d7, d7
  .long  0xf2020cb0                          // vfma.f32      d0, d18, d16
  .long  0xf2011cb0                          // vfma.f32      d1, d17, d16
  .long  0xf2032cb0                          // vfma.f32      d2, d19, d16
  .long  0xf2043cb0                          // vfma.f32      d3, d20, d16
  .long  0xe28dd008                          // add           sp, sp, #8
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf8a03                          // vldr          s17, [pc, #12]
  .long  0xee08ca10                          // vmov          s16, ip
  .long  0xeaffffe2                          // b             1b24 <sk_lerp_u8_vfp4+0x3c>
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_lerp_565_vfp4
.globl _sk_lerp_565_vfp4
FUNCTION(_sk_lerp_565_vfp4)
_sk_lerp_565_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe24dd008                          // sub           sp, sp, #8
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de020                          // ldr           lr, [sp, #32]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0x0a00002e                          // beq           1c88 <sk_lerp_565_vfp4+0xe0>
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe58dc004                          // str           ip, [sp, #4]
  .long  0xe28dc004                          // add           ip, sp, #4
  .long  0xf4ec083f                          // vld1.32       {d16[0]}, [ip :32]
  .long  0xf3908a30                          // vmovl.u16     q4, d16
  .long  0xf2c1001f                          // vmov.i32      d16, #31
  .long  0xe3a0ce7e                          // mov           ip, #2016
  .long  0xee82cb90                          // vdup.32       d18, ip
  .long  0xf3c71218                          // vmov.i32      d17, #63488
  .long  0xf2480130                          // vand          d16, d8, d16
  .long  0xeddf3b27                          // vldr          d19, [pc, #156]
  .long  0xf2482132                          // vand          d18, d8, d18
  .long  0xeddf4b27                          // vldr          d20, [pc, #156]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xf2481131                          // vand          d17, d8, d17
  .long  0xf2635d07                          // vsub.f32      d21, d3, d7
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xeddf3b1e                          // vldr          d19, [pc, #120]
  .long  0xf3422db4                          // vmul.f32      d18, d18, d20
  .long  0xf2674117                          // vorr          d20, d7, d7
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xf2673117                          // vorr          d19, d7, d7
  .long  0xf2453cb0                          // vfma.f32      d19, d21, d16
  .long  0xf2454cb2                          // vfma.f32      d20, d21, d18
  .long  0xf2679117                          // vorr          d25, d7, d7
  .long  0xf2628d06                          // vsub.f32      d24, d2, d6
  .long  0xf2459cb1                          // vfma.f32      d25, d21, d17
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xf2606d04                          // vsub.f32      d22, d0, d4
  .long  0xf2617d05                          // vsub.f32      d23, d1, d5
  .long  0xf2082cb0                          // vfma.f32      d2, d24, d16
  .long  0xf2440fa3                          // vmax.f32      d16, d20, d19
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xf2060cb1                          // vfma.f32      d0, d22, d17
  .long  0xf2071cb2                          // vfma.f32      d1, d23, d18
  .long  0xf2093fa0                          // vmax.f32      d3, d25, d16
  .long  0xe28dd008                          // add           sp, sp, #8
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xeddf8a07                          // vldr          s17, [pc, #28]
  .long  0xee08ca10                          // vmov          s16, ip
  .long  0xeaffffd1                          // b             1be0 <sk_lerp_565_vfp4+0x38>
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_tables_vfp4
.globl _sk_load_tables_vfp4
FUNCTION(_sk_load_tables_vfp4)
_sk_load_tables_vfp4:
  .long  0xe92d47f0                          // push          {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59d4020                          // ldr           r4, [sp, #32]
  .long  0xe59ce000                          // ldr           lr, [ip]
  .long  0xe3540001                          // cmp           r4, #1
  .long  0xe08ee102                          // add           lr, lr, r2, lsl #2
  .long  0x0a000023                          // beq           1d64 <sk_load_tables_vfp4+0xac>
  .long  0xed9e0b00                          // vldr          d0, [lr]
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe59c7004                          // ldr           r7, [ip, #4]
  .long  0xf3f01010                          // vshr.u32      d17, d0, #16
  .long  0xe59c6008                          // ldr           r6, [ip, #8]
  .long  0xf3f82010                          // vshr.u32      d18, d0, #8
  .long  0xe59c400c                          // ldr           r4, [ip, #12]
  .long  0xf24111b0                          // vand          d17, d17, d16
  .long  0xf24221b0                          // vand          d18, d18, d16
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xee319b90                          // vmov.32       r9, d17[1]
  .long  0xee32eb90                          // vmov.32       lr, d18[1]
  .long  0xee305b90                          // vmov.32       r5, d16[1]
  .long  0xee108b90                          // vmov.32       r8, d16[0]
  .long  0xf3e80010                          // vshr.u32      d16, d0, #24
  .long  0xee12cb90                          // vmov.32       ip, d18[0]
  .long  0xee11ab90                          // vmov.32       sl, d17[0]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xeddf1b13                          // vldr          d17, [pc, #76]
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe0849109                          // add           r9, r4, r9, lsl #2
  .long  0xe086e10e                          // add           lr, r6, lr, lsl #2
  .long  0xe0875105                          // add           r5, r7, r5, lsl #2
  .long  0xedd92a00                          // vldr          s5, [r9]
  .long  0xedde1a00                          // vldr          s3, [lr]
  .long  0xedd50a00                          // vldr          s1, [r5]
  .long  0xe0875108                          // add           r5, r7, r8, lsl #2
  .long  0xe086710c                          // add           r7, r6, ip, lsl #2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xed950a00                          // vldr          s0, [r5]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed971a00                          // vldr          s2, [r7]
  .long  0xe084710a                          // add           r7, r4, sl, lsl #2
  .long  0xed972a00                          // vldr          s4, [r7]
  .long  0xe8bd47f0                          // pop           {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xeddf0a03                          // vldr          s1, [pc, #12]
  .long  0xed9e0a00                          // vldr          s0, [lr]
  .long  0xeaffffd9                          // b             1cd8 <sk_load_tables_vfp4+0x20>
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_tables_u16_be_vfp4
.globl _sk_load_tables_u16_be_vfp4
FUNCTION(_sk_load_tables_u16_be_vfp4)
_sk_load_tables_u16_be_vfp4:
  .long  0xe92d47f0                          // push          {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59d4020                          // ldr           r4, [sp, #32]
  .long  0xe59ce000                          // ldr           lr, [ip]
  .long  0xe3540000                          // cmp           r4, #0
  .long  0xe08ee182                          // add           lr, lr, r2, lsl #3
  .long  0xf4ee070f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [lr]
  .long  0x1a000001                          // bne           1da8 <sk_load_tables_u16_be_vfp4+0x28>
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e4074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [r4]
  .long  0xee924bb0                          // vmov.u16      r4, d18[0]
  .long  0xf3c7701f                          // vmov.i32      d23, #255
  .long  0xee905bb0                          // vmov.u16      r5, d16[0]
  .long  0xee91ebb0                          // vmov.u16      lr, d17[0]
  .long  0xee926bf0                          // vmov.u16      r6, d18[1]
  .long  0xee908bf0                          // vmov.u16      r8, d16[1]
  .long  0xee917bf0                          // vmov.u16      r7, d17[1]
  .long  0xee044b90                          // vmov.32       d20[0], r4
  .long  0xe59c400c                          // ldr           r4, [ip, #12]
  .long  0xee065b90                          // vmov.32       d22[0], r5
  .long  0xee05eb90                          // vmov.32       d21[0], lr
  .long  0xee246b90                          // vmov.32       d20[1], r6
  .long  0xee936bb0                          // vmov.u16      r6, d19[0]
  .long  0xee268b90                          // vmov.32       d22[1], r8
  .long  0xee257b90                          // vmov.32       d21[1], r7
  .long  0xee937bf0                          // vmov.u16      r7, d19[1]
  .long  0xf24621b7                          // vand          d18, d22, d23
  .long  0xf24401b7                          // vand          d16, d20, d23
  .long  0xf24511b7                          // vand          d17, d21, d23
  .long  0xee32eb90                          // vmov.32       lr, d18[1]
  .long  0xee305b90                          // vmov.32       r5, d16[1]
  .long  0xee319b90                          // vmov.32       r9, d17[1]
  .long  0xee128b90                          // vmov.32       r8, d18[0]
  .long  0xf3c72c1f                          // vmov.i32      d18, #65535
  .long  0xee036b90                          // vmov.32       d19[0], r6
  .long  0xe59c6008                          // ldr           r6, [ip, #8]
  .long  0xee237b90                          // vmov.32       d19[1], r7
  .long  0xe59c7004                          // ldr           r7, [ip, #4]
  .long  0xee11cb90                          // vmov.32       ip, d17[0]
  .long  0xf24311b2                          // vand          d17, d19, d18
  .long  0xe084a105                          // add           sl, r4, r5, lsl #2
  .long  0xe087510e                          // add           r5, r7, lr, lsl #2
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xf2e80533                          // vshl.s32      d16, d19, #8
  .long  0xf3f81031                          // vshr.u32      d17, d17, #8
  .long  0xe0869109                          // add           r9, r6, r9, lsl #2
  .long  0xedd50a00                          // vldr          s1, [r5]
  .long  0xe0875108                          // add           r5, r7, r8, lsl #2
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xedd91a00                          // vldr          s3, [r9]
  .long  0xeddf1b0c                          // vldr          d17, [pc, #48]
  .long  0xf24001b2                          // vand          d16, d16, d18
  .long  0xedda2a00                          // vldr          s5, [sl]
  .long  0xed950a00                          // vldr          s0, [r5]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe086710c                          // add           r7, r6, ip, lsl #2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed971a00                          // vldr          s2, [r7]
  .long  0xe084710e                          // add           r7, r4, lr, lsl #2
  .long  0xed972a00                          // vldr          s4, [r7]
  .long  0xe8bd47f0                          // pop           {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_load_tables_rgb_u16_be_vfp4
.globl _sk_load_tables_rgb_u16_be_vfp4
FUNCTION(_sk_load_tables_rgb_u16_be_vfp4)
_sk_load_tables_rgb_u16_be_vfp4:
  .long  0xe92d47f0                          // push          {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe0824082                          // add           r4, r2, r2, lsl #1
  .long  0xe59ce000                          // ldr           lr, [ip]
  .long  0xe08ee084                          // add           lr, lr, r4, lsl #1
  .long  0xe59d4020                          // ldr           r4, [sp, #32]
  .long  0xf4ee060f                          // vld3.16       {d16[0],d17[0],d18[0]}, [lr]
  .long  0xe3540000                          // cmp           r4, #0
  .long  0x1a000001                          // bne           1eb4 <sk_load_tables_rgb_u16_be_vfp4+0x2c>
  .long  0xe28e4006                          // add           r4, lr, #6
  .long  0xf4e4064f                          // vld3.16       {d16[1],d17[1],d18[1]}, [r4]
  .long  0xee924bb0                          // vmov.u16      r4, d18[0]
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xee905bb0                          // vmov.u16      r5, d16[0]
  .long  0xee908bf0                          // vmov.u16      r8, d16[1]
  .long  0xf3c7301f                          // vmov.i32      d19, #255
  .long  0xee926bf0                          // vmov.u16      r6, d18[1]
  .long  0xee91ebb0                          // vmov.u16      lr, d17[0]
  .long  0xee917bf0                          // vmov.u16      r7, d17[1]
  .long  0xee004b90                          // vmov.32       d16[0], r4
  .long  0xee025b90                          // vmov.32       d18[0], r5
  .long  0xee206b90                          // vmov.32       d16[1], r6
  .long  0xe99c0070                          // ldmib         ip, {r4, r5, r6}
  .long  0xee228b90                          // vmov.32       d18[1], r8
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xee01eb90                          // vmov.32       d17[0], lr
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xee217b90                          // vmov.32       d17[1], r7
  .long  0xee307b90                          // vmov.32       r7, d16[1]
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xee328b90                          // vmov.32       r8, d18[1]
  .long  0xee12eb90                          // vmov.32       lr, d18[0]
  .long  0xee319b90                          // vmov.32       r9, d17[1]
  .long  0xee11cb90                          // vmov.32       ip, d17[0]
  .long  0xe086a107                          // add           sl, r6, r7, lsl #2
  .long  0xe0847108                          // add           r7, r4, r8, lsl #2
  .long  0xee108b90                          // vmov.32       r8, d16[0]
  .long  0xedda2a00                          // vldr          s5, [sl]
  .long  0xe0859109                          // add           r9, r5, r9, lsl #2
  .long  0xedd70a00                          // vldr          s1, [r7]
  .long  0xe084710e                          // add           r7, r4, lr, lsl #2
  .long  0xedd91a00                          // vldr          s3, [r9]
  .long  0xed970a00                          // vldr          s0, [r7]
  .long  0xe085710c                          // add           r7, r5, ip, lsl #2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed971a00                          // vldr          s2, [r7]
  .long  0xe0867108                          // add           r7, r6, r8, lsl #2
  .long  0xed972a00                          // vldr          s4, [r7]
  .long  0xe8bd47f0                          // pop           {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_byte_tables_vfp4
.globl _sk_byte_tables_vfp4
FUNCTION(_sk_byte_tables_vfp4)
_sk_byte_tables_vfp4:
  .long  0xe92d47f0                          // push          {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xeddf0b37                          // vldr          d16, [pc, #220]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xe8911020                          // ldm           r1, {r5, ip}
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xe89504c0                          // ldm           r5, {r6, r7, sl}
  .long  0xf2404c30                          // vfma.f32      d20, d0, d16
  .long  0xe595900c                          // ldr           r9, [r5, #12]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb37a3                          // vcvt.u32.f32  d19, d19
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf3fb47a4                          // vcvt.u32.f32  d20, d20
  .long  0xee138b90                          // vmov.32       r8, d19[0]
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee12eb90                          // vmov.32       lr, d18[0]
  .long  0xee144b90                          // vmov.32       r4, d20[0]
  .long  0xe7d75008                          // ldrb          r5, [r7, r8]
  .long  0xe7dae00e                          // ldrb          lr, [sl, lr]
  .long  0xee055b90                          // vmov.32       d21[0], r5
  .long  0xe7d64004                          // ldrb          r4, [r6, r4]
  .long  0xee345b90                          // vmov.32       r5, d20[1]
  .long  0xee04eb90                          // vmov.32       d20[0], lr
  .long  0xee014b90                          // vmov.32       d17[0], r4
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xe7d6e005                          // ldrb          lr, [r6, r5]
  .long  0xee335b90                          // vmov.32       r5, d19[1]
  .long  0xee326b90                          // vmov.32       r6, d18[1]
  .long  0xf3c7201f                          // vmov.i32      d18, #255
  .long  0xee21eb90                          // vmov.32       d17[1], lr
  .long  0xe7d94004                          // ldrb          r4, [r9, r4]
  .long  0xf24111b2                          // vand          d17, d17, d18
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xe7d75005                          // ldrb          r5, [r7, r5]
  .long  0xee307b90                          // vmov.32       r7, d16[1]
  .long  0xee004b90                          // vmov.32       d16[0], r4
  .long  0xee255b90                          // vmov.32       d21[1], r5
  .long  0xe7da5006                          // ldrb          r5, [sl, r6]
  .long  0xf24531b2                          // vand          d19, d21, d18
  .long  0xee245b90                          // vmov.32       d20[1], r5
  .long  0xf24441b2                          // vand          d20, d20, d18
  .long  0xf3fb46a4                          // vcvt.f32.u32  d20, d20
  .long  0xe7d94007                          // ldrb          r4, [r9, r7]
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24001b2                          // vand          d16, d16, d18
  .long  0xf3fb26a3                          // vcvt.f32.u32  d18, d19
  .long  0xeddf3b08                          // vldr          d19, [pc, #32]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3010db3                          // vmul.f32      d0, d17, d19
  .long  0xf3042db3                          // vmul.f32      d2, d20, d19
  .long  0xf3021db3                          // vmul.f32      d1, d18, d19
  .long  0xf3003db3                          // vmul.f32      d3, d16, d19
  .long  0xe8bd47f0                          // pop           {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_byte_tables_rgb_vfp4
.globl _sk_byte_tables_rgb_vfp4
FUNCTION(_sk_byte_tables_rgb_vfp4)
_sk_byte_tables_rgb_vfp4:
  .long  0xe92d4bf0                          // push          {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf3c7301f                          // vmov.i32      d19, #255
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe89e0210                          // ldm           lr, {r4, r9}
  .long  0xe59e600c                          // ldr           r6, [lr, #12]
  .long  0xe59e8008                          // ldr           r8, [lr, #8]
  .long  0xe2466001                          // sub           r6, r6, #1
  .long  0xee806b90                          // vdup.32       d16, r6
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2402c30                          // vfma.f32      d18, d0, d16
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xee126b90                          // vmov.32       r6, d18[0]
  .long  0xee327b90                          // vmov.32       r7, d18[1]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xee105b90                          // vmov.32       r5, d16[0]
  .long  0xe7d46006                          // ldrb          r6, [r4, r6]
  .long  0xe7d4e007                          // ldrb          lr, [r4, r7]
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xee026b90                          // vmov.32       d18[0], r6
  .long  0xee116b90                          // vmov.32       r6, d17[0]
  .long  0xee307b90                          // vmov.32       r7, d16[1]
  .long  0xee22eb90                          // vmov.32       d18[1], lr
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xf3fb26a2                          // vcvt.f32.u32  d18, d18
  .long  0xe7d85005                          // ldrb          r5, [r8, r5]
  .long  0xee015b90                          // vmov.32       d17[0], r5
  .long  0xe7d94004                          // ldrb          r4, [r9, r4]
  .long  0xe7d96006                          // ldrb          r6, [r9, r6]
  .long  0xe7d85007                          // ldrb          r5, [r8, r7]
  .long  0xee006b90                          // vmov.32       d16[0], r6
  .long  0xee215b90                          // vmov.32       d17[1], r5
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xeddf3b06                          // vldr          d19, [pc, #24]
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3020db3                          // vmul.f32      d0, d18, d19
  .long  0xf3012db3                          // vmul.f32      d2, d17, d19
  .long  0xf3001db3                          // vmul.f32      d1, d16, d19
  .long  0xe8bd4bf0                          // pop           {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_table_r_vfp4
.globl _sk_table_r_vfp4
FUNCTION(_sk_table_r_vfp4)
_sk_table_r_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xe59e5000                          // ldr           r5, [lr]
  .long  0xe2444001                          // sub           r4, r4, #1
  .long  0xee804b90                          // vdup.32       d16, r4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe0854104                          // add           r4, r5, r4, lsl #2
  .long  0xe085510e                          // add           r5, r5, lr, lsl #2
  .long  0xedd40a00                          // vldr          s1, [r4]
  .long  0xed950a00                          // vldr          s0, [r5]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_g_vfp4
.globl _sk_table_g_vfp4
FUNCTION(_sk_table_g_vfp4)
_sk_table_g_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xe59e5000                          // ldr           r5, [lr]
  .long  0xe2444001                          // sub           r4, r4, #1
  .long  0xee804b90                          // vdup.32       d16, r4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe0854104                          // add           r4, r5, r4, lsl #2
  .long  0xe085510e                          // add           r5, r5, lr, lsl #2
  .long  0xedd41a00                          // vldr          s3, [r4]
  .long  0xed951a00                          // vldr          s2, [r5]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_b_vfp4
.globl _sk_table_b_vfp4
FUNCTION(_sk_table_b_vfp4)
_sk_table_b_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xe59e5000                          // ldr           r5, [lr]
  .long  0xe2444001                          // sub           r4, r4, #1
  .long  0xee804b90                          // vdup.32       d16, r4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2421c30                          // vfma.f32      d17, d2, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe0854104                          // add           r4, r5, r4, lsl #2
  .long  0xe085510e                          // add           r5, r5, lr, lsl #2
  .long  0xedd42a00                          // vldr          s5, [r4]
  .long  0xed952a00                          // vldr          s4, [r5]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_a_vfp4
.globl _sk_table_a_vfp4
FUNCTION(_sk_table_a_vfp4)
_sk_table_a_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xe59e5000                          // ldr           r5, [lr]
  .long  0xe2444001                          // sub           r4, r4, #1
  .long  0xee804b90                          // vdup.32       d16, r4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe0854104                          // add           r4, r5, r4, lsl #2
  .long  0xe085510e                          // add           r5, r5, lr, lsl #2
  .long  0xedd43a00                          // vldr          s7, [r4]
  .long  0xed953a00                          // vldr          s6, [r5]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_parametric_r_vfp4
.globl _sk_parametric_r_vfp4
FUNCTION(_sk_parametric_r_vfp4)
_sk_parametric_r_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf2412c90                          // vfma.f32      d18, d17, d0
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2401c90                          // vfma.f32      d17, d16, d0
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf3400e80                          // vcge.f32      d16, d16, d0
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_g_vfp4
.globl _sk_parametric_g_vfp4
FUNCTION(_sk_parametric_g_vfp4)
_sk_parametric_g_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf2412c91                          // vfma.f32      d18, d17, d1
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2401c91                          // vfma.f32      d17, d16, d1
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf3400e81                          // vcge.f32      d16, d16, d1
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2201fa1                          // vmin.f32      d1, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_b_vfp4
.globl _sk_parametric_b_vfp4
FUNCTION(_sk_parametric_b_vfp4)
_sk_parametric_b_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf2412c92                          // vfma.f32      d18, d17, d2
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2401c92                          // vfma.f32      d17, d16, d2
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf3400e82                          // vcge.f32      d16, d16, d2
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2202fa1                          // vmin.f32      d2, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_a_vfp4
.globl _sk_parametric_a_vfp4
FUNCTION(_sk_parametric_a_vfp4)
_sk_parametric_a_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf2412c93                          // vfma.f32      d18, d17, d3
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2401c93                          // vfma.f32      d17, d16, d3
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf3400e83                          // vcge.f32      d16, d16, d3
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2203fa1                          // vmin.f32      d3, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_lab_to_xyz_vfp4
.globl _sk_lab_to_xyz_vfp4
FUNCTION(_sk_lab_to_xyz_vfp4)
_sk_lab_to_xyz_vfp4:
  .long  0xeddf1b2e                          // vldr          d17, [pc, #184]
  .long  0xf3c43613                          // vmov.i32      d19, #-1023410176
  .long  0xeddf0b2a                          // vldr          d16, [pc, #168]
  .long  0xf2c34f10                          // vmov.f32      d20, #16
  .long  0xf3401d31                          // vmul.f32      d17, d0, d17
  .long  0xeddf5b2f                          // vldr          d21, [pc, #188]
  .long  0xf3412d30                          // vmul.f32      d18, d1, d16
  .long  0xeddf6b2f                          // vldr          d22, [pc, #188]
  .long  0xf3420d30                          // vmul.f32      d16, d2, d16
  .long  0xeddf7b2f                          // vldr          d23, [pc, #188]
  .long  0xeddf8b30                          // vldr          d24, [pc, #192]
  .long  0xf2411da4                          // vadd.f32      d17, d17, d20
  .long  0xeddf4b24                          // vldr          d20, [pc, #144]
  .long  0xf2422da3                          // vadd.f32      d18, d18, d19
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2400da3                          // vadd.f32      d16, d16, d19
  .long  0xeddf3b22                          // vldr          d19, [pc, #136]
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xf3422db4                          // vmul.f32      d18, d18, d20
  .long  0xf3400db5                          // vmul.f32      d16, d16, d21
  .long  0xf2412da2                          // vadd.f32      d18, d17, d18
  .long  0xf2610da0                          // vsub.f32      d16, d17, d16
  .long  0xf3415db1                          // vmul.f32      d21, d17, d17
  .long  0xf3423db2                          // vmul.f32      d19, d18, d18
  .long  0xf3404db0                          // vmul.f32      d20, d16, d16
  .long  0xf3415db5                          // vmul.f32      d21, d17, d21
  .long  0xf2411da6                          // vadd.f32      d17, d17, d22
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf3404db4                          // vmul.f32      d20, d16, d20
  .long  0xf2400da6                          // vadd.f32      d16, d16, d22
  .long  0xf2422da6                          // vadd.f32      d18, d18, d22
  .long  0xeddf6b1d                          // vldr          d22, [pc, #116]
  .long  0xf3639ea7                          // vcgt.f32      d25, d19, d23
  .long  0xf364aea7                          // vcgt.f32      d26, d20, d23
  .long  0xf3400db8                          // vmul.f32      d16, d16, d24
  .long  0xf3422db8                          // vmul.f32      d18, d18, d24
  .long  0xf35391b2                          // vbsl          d25, d19, d18
  .long  0xeddf2b19                          // vldr          d18, [pc, #100]
  .long  0xf354a1b0                          // vbsl          d26, d20, d16
  .long  0xf3251ea7                          // vcgt.f32      d1, d21, d23
  .long  0xf3090db6                          // vmul.f32      d0, d25, d22
  .long  0xf30a2db2                          // vmul.f32      d2, d26, d18
  .long  0xf3410db8                          // vmul.f32      d16, d17, d24
  .long  0xf31511b0                          // vbsl          d1, d21, d16
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x42c80000                          // .word         0x42c80000
  .long  0x42c80000                          // .word         0x42c80000
  .long  0x3b03126f                          // .word         0x3b03126f
  .long  0x3b03126f                          // .word         0x3b03126f
  .long  0x3c0d3dcb                          // .word         0x3c0d3dcb
  .long  0x3c0d3dcb                          // .word         0x3c0d3dcb
  .long  0x3ba3d70a                          // .word         0x3ba3d70a
  .long  0x3ba3d70a                          // .word         0x3ba3d70a
  .long  0xbe0d3dcb                          // .word         0xbe0d3dcb
  .long  0xbe0d3dcb                          // .word         0xbe0d3dcb
  .long  0x3c1118c2                          // .word         0x3c1118c2
  .long  0x3c1118c2                          // .word         0x3c1118c2
  .long  0x3e038050                          // .word         0x3e038050
  .long  0x3e038050                          // .word         0x3e038050
  .long  0x3f76d71f                          // .word         0x3f76d71f
  .long  0x3f76d71f                          // .word         0x3f76d71f
  .long  0x3f5340f6                          // .word         0x3f5340f6
  .long  0x3f5340f6                          // .word         0x3f5340f6

HIDDEN _sk_load_a8_vfp4
.globl _sk_load_a8_vfp4
FUNCTION(_sk_load_a8_vfp4)
_sk_load_a8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a000012                          // beq           2934 <sk_load_a8_vfp4+0x6c>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b0                          // strh          ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3900a30                          // vmovl.u16     q0, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b0f                          // vldr          d17, [pc, #60]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf0a04                          // vldr          s1, [pc, #16]
  .long  0xee00ca10                          // vmov          s0, ip
  .long  0xeaffffee                          // b             2900 <sk_load_a8_vfp4+0x38>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_a8_dst_vfp4
.globl _sk_load_a8_dst_vfp4
FUNCTION(_sk_load_a8_dst_vfp4)
_sk_load_a8_dst_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a000012                          // beq           29c4 <sk_load_a8_dst_vfp4+0x6c>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b0                          // strh          ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3904a30                          // vmovl.u16     q2, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b0f                          // vldr          d17, [pc, #60]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2440130                          // vand          d16, d4, d16
  .long  0xf2804010                          // vmov.i32      d4, #0
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf2805010                          // vmov.i32      d5, #0
  .long  0xf2806010                          // vmov.i32      d6, #0
  .long  0xf3007db1                          // vmul.f32      d7, d16, d17
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf4a04                          // vldr          s9, [pc, #16]
  .long  0xee04ca10                          // vmov          s8, ip
  .long  0xeaffffee                          // b             2990 <sk_load_a8_dst_vfp4+0x38>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_a8_vfp4
.globl _sk_gather_a8_vfp4
FUNCTION(_sk_gather_a8_vfp4)
_sk_gather_a8_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee315b90                          // vmov.32       r5, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7d4e00e                          // ldrb          lr, [r4, lr]
  .long  0xe7d44005                          // ldrb          r4, [r4, r5]
  .long  0xee00eb90                          // vmov.32       d16[0], lr
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b04                          // vldr          d17, [pc, #16]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_store_a8_vfp4
.globl _sk_store_a8_vfp4
FUNCTION(_sk_store_a8_vfp4)
_sk_store_a8_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xeddf0b13                          // vldr          d16, [pc, #76]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0x0a000007                          // beq           2aa4 <sk_store_a8_vfp4+0x4c>
  .long  0xee30eb90                          // vmov.32       lr, d16[1]
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xe5cce001                          // strb          lr, [ip, #1]
  .long  0xe5cc4000                          // strb          r4, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe5cce000                          // strb          lr, [ip]
  .long  0xeafffff8                          // b             2a94 <sk_store_a8_vfp4+0x3c>
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000

HIDDEN _sk_load_g8_vfp4
.globl _sk_load_g8_vfp4
FUNCTION(_sk_load_g8_vfp4)
_sk_load_g8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a000012                          // beq           2b24 <sk_load_g8_vfp4+0x6c>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b0                          // strh          ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3900a30                          // vmovl.u16     q0, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b0f                          // vldr          d17, [pc, #60]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3000db1                          // vmul.f32      d0, d16, d17
  .long  0xf2201110                          // vorr          d1, d0, d0
  .long  0xf2202110                          // vorr          d2, d0, d0
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf0a04                          // vldr          s1, [pc, #16]
  .long  0xee00ca10                          // vmov          s0, ip
  .long  0xeaffffee                          // b             2af0 <sk_load_g8_vfp4+0x38>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_g8_dst_vfp4
.globl _sk_load_g8_dst_vfp4
FUNCTION(_sk_load_g8_dst_vfp4)
_sk_load_g8_dst_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a000012                          // beq           2bb4 <sk_load_g8_dst_vfp4+0x6c>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b0                          // strh          ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3904a30                          // vmovl.u16     q2, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b0f                          // vldr          d17, [pc, #60]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2440130                          // vand          d16, d4, d16
  .long  0xf2877f10                          // vmov.f32      d7, #1
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3004db1                          // vmul.f32      d4, d16, d17
  .long  0xf2245114                          // vorr          d5, d4, d4
  .long  0xf2246114                          // vorr          d6, d4, d4
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf4a04                          // vldr          s9, [pc, #16]
  .long  0xee04ca10                          // vmov          s8, ip
  .long  0xeaffffee                          // b             2b80 <sk_load_g8_dst_vfp4+0x38>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_g8_vfp4
.globl _sk_gather_g8_vfp4
FUNCTION(_sk_gather_g8_vfp4)
_sk_gather_g8_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee315b90                          // vmov.32       r5, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7d4e00e                          // ldrb          lr, [r4, lr]
  .long  0xe7d44005                          // ldrb          r4, [r4, r5]
  .long  0xee00eb90                          // vmov.32       d16[0], lr
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b06                          // vldr          d17, [pc, #24]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3000db1                          // vmul.f32      d0, d16, d17
  .long  0xf2201110                          // vorr          d1, d0, d0
  .long  0xf2202110                          // vorr          d2, d0, d0
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_gather_i8_vfp4
.globl _sk_gather_i8_vfp4
FUNCTION(_sk_gather_i8_vfp4)
_sk_gather_i8_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe1a0c001                          // mov           ip, r1
  .long  0xe491e004                          // ldr           lr, [r1], #4
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0x028c1008                          // addeq         r1, ip, #8
  .long  0x059c4004                          // ldreq         r4, [ip, #4]
  .long  0xe494c008                          // ldr           ip, [r4], #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee114b90                          // vmov.32       r4, d17[0]
  .long  0xee315b90                          // vmov.32       r5, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7dc4004                          // ldrb          r4, [ip, r4]
  .long  0xe7dc5005                          // ldrb          r5, [ip, r5]
  .long  0xee004b90                          // vmov.32       d16[0], r4
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xee205b90                          // vmov.32       d16[1], r5
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xee105b90                          // vmov.32       r5, d16[0]
  .long  0xee30cb90                          // vmov.32       ip, d16[1]
  .long  0xe0845105                          // add           r5, r4, r5, lsl #2
  .long  0xf4e5083f                          // vld1.32       {d16[0]}, [r5 :32]
  .long  0xe084510c                          // add           r5, r4, ip, lsl #2
  .long  0xf4e508bf                          // vld1.32       {d16[1]}, [r5 :32]
  .long  0xf24021b1                          // vand          d18, d16, d17
  .long  0xf3f83030                          // vshr.u32      d19, d16, #8
  .long  0xf3e84030                          // vshr.u32      d20, d16, #24
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3f00030                          // vshr.u32      d16, d16, #16
  .long  0xf24331b1                          // vand          d19, d19, d17
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf3043db1                          // vmul.f32      d3, d20, d17
  .long  0xf3031db1                          // vmul.f32      d1, d19, d17
  .long  0xf3002db1                          // vmul.f32      d2, d16, d17
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_load_565_vfp4
.globl _sk_load_565_vfp4
FUNCTION(_sk_load_565_vfp4)
_sk_load_565_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0x0a00001a                          // beq           2d94 <sk_load_565_vfp4+0x8c>
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe58dc000                          // str           ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec083f                          // vld1.32       {d16[0]}, [ip :32]
  .long  0xf3900a30                          // vmovl.u16     q0, d16
  .long  0xf3c70218                          // vmov.i32      d16, #63488
  .long  0xe3a0ce7e                          // mov           ip, #2016
  .long  0xf2c1101f                          // vmov.i32      d17, #31
  .long  0xee82cb90                          // vdup.32       d18, ip
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xeddf3b14                          // vldr          d19, [pc, #80]
  .long  0xf2402132                          // vand          d18, d0, d18
  .long  0xeddf4b14                          // vldr          d20, [pc, #80]
  .long  0xf2401131                          // vand          d17, d0, d17
  .long  0xeddf5b14                          // vldr          d21, [pc, #80]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xf3000db3                          // vmul.f32      d0, d16, d19
  .long  0xf3021db4                          // vmul.f32      d1, d18, d20
  .long  0xf3012db5                          // vmul.f32      d2, d17, d21
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xeddf0a08                          // vldr          s1, [pc, #32]
  .long  0xee00ca10                          // vmov          s0, ip
  .long  0xeaffffe5                          // b             2d3c <sk_load_565_vfp4+0x34>
  .long  0xe320f000                          // nop           {0}
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_565_dst_vfp4
.globl _sk_load_565_dst_vfp4
FUNCTION(_sk_load_565_dst_vfp4)
_sk_load_565_dst_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0x0a00001a                          // beq           2e54 <sk_load_565_dst_vfp4+0x8c>
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe58dc000                          // str           ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec083f                          // vld1.32       {d16[0]}, [ip :32]
  .long  0xf3904a30                          // vmovl.u16     q2, d16
  .long  0xf3c70218                          // vmov.i32      d16, #63488
  .long  0xe3a0ce7e                          // mov           ip, #2016
  .long  0xf2c1101f                          // vmov.i32      d17, #31
  .long  0xee82cb90                          // vdup.32       d18, ip
  .long  0xf2440130                          // vand          d16, d4, d16
  .long  0xeddf3b14                          // vldr          d19, [pc, #80]
  .long  0xf2442132                          // vand          d18, d4, d18
  .long  0xeddf4b14                          // vldr          d20, [pc, #80]
  .long  0xf2441131                          // vand          d17, d4, d17
  .long  0xeddf5b14                          // vldr          d21, [pc, #80]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf2877f10                          // vmov.f32      d7, #1
  .long  0xf3004db3                          // vmul.f32      d4, d16, d19
  .long  0xf3025db4                          // vmul.f32      d5, d18, d20
  .long  0xf3016db5                          // vmul.f32      d6, d17, d21
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xeddf4a08                          // vldr          s9, [pc, #32]
  .long  0xee04ca10                          // vmov          s8, ip
  .long  0xeaffffe5                          // b             2dfc <sk_load_565_dst_vfp4+0x34>
  .long  0xe320f000                          // nop           {0}
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_565_vfp4
.globl _sk_gather_565_vfp4
FUNCTION(_sk_gather_565_vfp4)
_sk_gather_565_vfp4:
  .long  0xe92d4070                          // push          {r4, r5, r6, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xeddf4b20                          // vldr          d20, [pc, #128]
  .long  0xeddf5b21                          // vldr          d21, [pc, #132]
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xf2c1201f                          // vmov.i32      d18, #31
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee316b90                          // vmov.32       r6, d17[1]
  .long  0xf3c71218                          // vmov.i32      d17, #63488
  .long  0xe084508e                          // add           r5, r4, lr, lsl #1
  .long  0xe0846086                          // add           r6, r4, r6, lsl #1
  .long  0xe1d550b0                          // ldrh          r5, [r5]
  .long  0xe1d660b0                          // ldrh          r6, [r6]
  .long  0xee005b90                          // vmov.32       d16[0], r5
  .long  0xee206b90                          // vmov.32       d16[1], r6
  .long  0xe3a06e7e                          // mov           r6, #2016
  .long  0xee836b90                          // vdup.32       d19, r6
  .long  0xf24011b1                          // vand          d17, d16, d17
  .long  0xf24031b3                          // vand          d19, d16, d19
  .long  0xf24001b2                          // vand          d16, d16, d18
  .long  0xf3fb2623                          // vcvt.f32.s32  d18, d19
  .long  0xeddf3b06                          // vldr          d19, [pc, #24]
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3021db4                          // vmul.f32      d1, d18, d20
  .long  0xf3010db3                          // vmul.f32      d0, d17, d19
  .long  0xf3002db5                          // vmul.f32      d2, d16, d21
  .long  0xe8bd4070                          // pop           {r4, r5, r6, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108

HIDDEN _sk_store_565_vfp4
.globl _sk_store_565_vfp4
FUNCTION(_sk_store_565_vfp4)
_sk_store_565_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c30f1f                          // vmov.f32      d16, #31
  .long  0xeddf1b1c                          // vldr          d17, [pc, #112]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2413c31                          // vfma.f32      d19, d1, d17
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0xf3fb07a3                          // vcvt.u32.f32  d16, d19
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2e50530                          // vshl.s32      d16, d16, #5
  .long  0xf2eb1531                          // vshl.s32      d17, d17, #11
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0x0a000005                          // beq           2fa0 <sk_store_565_vfp4+0x70>
  .long  0xf3f60121                          // vuzp.16       d16, d17
  .long  0xf4cc080f                          // vst1.32       {d16[0]}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe1cce0b0                          // strh          lr, [ip]
  .long  0xeafffff8                          // b             2f90 <sk_store_565_vfp4+0x60>
  .long  0xe320f000                          // nop           {0}
  .long  0x427c0000                          // .word         0x427c0000
  .long  0x427c0000                          // .word         0x427c0000

HIDDEN _sk_load_4444_vfp4
.globl _sk_load_4444_vfp4
FUNCTION(_sk_load_4444_vfp4)
_sk_load_4444_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0x0a00001d                          // beq           3050 <sk_load_4444_vfp4+0x98>
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe58dc000                          // str           ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec083f                          // vld1.32       {d16[0]}, [ip :32]
  .long  0xf3900a30                          // vmovl.u16     q0, d16
  .long  0xf3c70210                          // vmov.i32      d16, #61440
  .long  0xeddf4b1a                          // vldr          d20, [pc, #104]
  .long  0xf2c0121f                          // vmov.i32      d17, #3840
  .long  0xeddf5b1a                          // vldr          d21, [pc, #104]
  .long  0xf3c72010                          // vmov.i32      d18, #240
  .long  0xeddf6b1a                          // vldr          d22, [pc, #104]
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2c0301f                          // vmov.i32      d19, #15
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2401131                          // vand          d17, d0, d17
  .long  0xf2402132                          // vand          d18, d0, d18
  .long  0xf2403133                          // vand          d19, d0, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3000db4                          // vmul.f32      d0, d16, d20
  .long  0xeddf0b0f                          // vldr          d16, [pc, #60]
  .long  0xf3011db5                          // vmul.f32      d1, d17, d21
  .long  0xf3022db6                          // vmul.f32      d2, d18, d22
  .long  0xf3033db0                          // vmul.f32      d3, d19, d16
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xeddf0a09                          // vldr          s1, [pc, #36]
  .long  0xee00ca10                          // vmov          s0, ip
  .long  0xeaffffe2                          // b             2fec <sk_load_4444_vfp4+0x34>
  .long  0x37888889                          // .word         0x37888889
  .long  0x37888889                          // .word         0x37888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_4444_dst_vfp4
.globl _sk_load_4444_dst_vfp4
FUNCTION(_sk_load_4444_dst_vfp4)
_sk_load_4444_dst_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0x0a00001d                          // beq           3120 <sk_load_4444_dst_vfp4+0x98>
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe58dc000                          // str           ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec083f                          // vld1.32       {d16[0]}, [ip :32]
  .long  0xf3904a30                          // vmovl.u16     q2, d16
  .long  0xf3c70210                          // vmov.i32      d16, #61440
  .long  0xeddf4b1a                          // vldr          d20, [pc, #104]
  .long  0xf2c0121f                          // vmov.i32      d17, #3840
  .long  0xeddf5b1a                          // vldr          d21, [pc, #104]
  .long  0xf3c72010                          // vmov.i32      d18, #240
  .long  0xeddf6b1a                          // vldr          d22, [pc, #104]
  .long  0xf2440130                          // vand          d16, d4, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2c0301f                          // vmov.i32      d19, #15
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2441131                          // vand          d17, d4, d17
  .long  0xf2442132                          // vand          d18, d4, d18
  .long  0xf2443133                          // vand          d19, d4, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3004db4                          // vmul.f32      d4, d16, d20
  .long  0xeddf0b0f                          // vldr          d16, [pc, #60]
  .long  0xf3015db5                          // vmul.f32      d5, d17, d21
  .long  0xf3026db6                          // vmul.f32      d6, d18, d22
  .long  0xf3037db0                          // vmul.f32      d7, d19, d16
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xeddf4a09                          // vldr          s9, [pc, #36]
  .long  0xee04ca10                          // vmov          s8, ip
  .long  0xeaffffe2                          // b             30bc <sk_load_4444_dst_vfp4+0x34>
  .long  0x37888889                          // .word         0x37888889
  .long  0x37888889                          // .word         0x37888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_4444_vfp4
.globl _sk_gather_4444_vfp4
FUNCTION(_sk_gather_4444_vfp4)
_sk_gather_4444_vfp4:
  .long  0xe92d4070                          // push          {r4, r5, r6, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xeddf5b24                          // vldr          d21, [pc, #144]
  .long  0xf3c73010                          // vmov.i32      d19, #240
  .long  0xeddf6b24                          // vldr          d22, [pc, #144]
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xf2c0401f                          // vmov.i32      d20, #15
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xf2c0221f                          // vmov.i32      d18, #3840
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee316b90                          // vmov.32       r6, d17[1]
  .long  0xf3c71210                          // vmov.i32      d17, #61440
  .long  0xe084508e                          // add           r5, r4, lr, lsl #1
  .long  0xe0846086                          // add           r6, r4, r6, lsl #1
  .long  0xe1d550b0                          // ldrh          r5, [r5]
  .long  0xe1d660b0                          // ldrh          r6, [r6]
  .long  0xee005b90                          // vmov.32       d16[0], r5
  .long  0xee206b90                          // vmov.32       d16[1], r6
  .long  0xf24011b1                          // vand          d17, d16, d17
  .long  0xf24021b2                          // vand          d18, d16, d18
  .long  0xf24031b3                          // vand          d19, d16, d19
  .long  0xf24001b4                          // vand          d16, d16, d20
  .long  0xeddf4b0b                          // vldr          d20, [pc, #44]
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3010db4                          // vmul.f32      d0, d17, d20
  .long  0xeddf1b0b                          // vldr          d17, [pc, #44]
  .long  0xf3021db5                          // vmul.f32      d1, d18, d21
  .long  0xf3032db6                          // vmul.f32      d2, d19, d22
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe8bd4070                          // pop           {r4, r5, r6, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x37888889                          // .word         0x37888889
  .long  0x37888889                          // .word         0x37888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x3d888889                          // .word         0x3d888889

HIDDEN _sk_store_4444_vfp4
.globl _sk_store_4444_vfp4
FUNCTION(_sk_store_4444_vfp4)
_sk_store_4444_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c20f1e                          // vmov.f32      d16, #15
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf2402c30                          // vfma.f32      d18, d0, d16
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0xf2424c30                          // vfma.f32      d20, d2, d16
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3fb37a4                          // vcvt.u32.f32  d19, d20
  .long  0xf2ec0530                          // vshl.s32      d16, d16, #12
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf2e43533                          // vshl.s32      d19, d19, #4
  .long  0xf26201b0                          // vorr          d16, d18, d16
  .long  0xf26001b3                          // vorr          d16, d16, d19
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0x0a000005                          // beq           3298 <sk_store_4444_vfp4+0x80>
  .long  0xf3f60121                          // vuzp.16       d16, d17
  .long  0xf4cc080f                          // vst1.32       {d16[0]}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe1cce0b0                          // strh          lr, [ip]
  .long  0xeafffff8                          // b             3288 <sk_store_4444_vfp4+0x70>
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_load_8888_vfp4
.globl _sk_load_8888_vfp4
FUNCTION(_sk_load_8888_vfp4)
_sk_load_8888_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc102                          // add           ip, ip, r2, lsl #2
  .long  0x0a000014                          // beq           3318 <sk_load_8888_vfp4+0x70>
  .long  0xed9c0b00                          // vldr          d0, [ip]
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf3f81010                          // vshr.u32      d17, d0, #8
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3f03010                          // vshr.u32      d19, d0, #16
  .long  0xf3e82010                          // vshr.u32      d18, d0, #24
  .long  0xf24111b0                          // vand          d17, d17, d16
  .long  0xf2404130                          // vand          d20, d0, d16
  .long  0xf24301b0                          // vand          d16, d19, d16
  .long  0xf3fb3624                          // vcvt.f32.s32  d19, d20
  .long  0xeddf4b0c                          // vldr          d20, [pc, #48]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3030db4                          // vmul.f32      d0, d19, d20
  .long  0xf3023db4                          // vmul.f32      d3, d18, d20
  .long  0xf3011db4                          // vmul.f32      d1, d17, d20
  .long  0xf3002db4                          // vmul.f32      d2, d16, d20
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xeddf0a04                          // vldr          s1, [pc, #16]
  .long  0xed9c0a00                          // vldr          s0, [ip]
  .long  0xeaffffe8                          // b             32c8 <sk_load_8888_vfp4+0x20>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_8888_dst_vfp4
.globl _sk_load_8888_dst_vfp4
FUNCTION(_sk_load_8888_dst_vfp4)
_sk_load_8888_dst_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc102                          // add           ip, ip, r2, lsl #2
  .long  0x0a000014                          // beq           33a8 <sk_load_8888_dst_vfp4+0x70>
  .long  0xed9c4b00                          // vldr          d4, [ip]
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf3f81014                          // vshr.u32      d17, d4, #8
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3f03014                          // vshr.u32      d19, d4, #16
  .long  0xf3e82014                          // vshr.u32      d18, d4, #24
  .long  0xf24111b0                          // vand          d17, d17, d16
  .long  0xf2444130                          // vand          d20, d4, d16
  .long  0xf24301b0                          // vand          d16, d19, d16
  .long  0xf3fb3624                          // vcvt.f32.s32  d19, d20
  .long  0xeddf4b0c                          // vldr          d20, [pc, #48]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3034db4                          // vmul.f32      d4, d19, d20
  .long  0xf3027db4                          // vmul.f32      d7, d18, d20
  .long  0xf3015db4                          // vmul.f32      d5, d17, d20
  .long  0xf3006db4                          // vmul.f32      d6, d16, d20
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xeddf4a04                          // vldr          s9, [pc, #16]
  .long  0xed9c4a00                          // vldr          s8, [ip]
  .long  0xeaffffe8                          // b             3358 <sk_load_8888_dst_vfp4+0x20>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_8888_vfp4
.globl _sk_gather_8888_vfp4
FUNCTION(_sk_gather_8888_vfp4)
_sk_gather_8888_vfp4:
  .long  0xe92d4070                          // push          {r4, r5, r6, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee316b90                          // vmov.32       r6, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe084510e                          // add           r5, r4, lr, lsl #2
  .long  0xe0846106                          // add           r6, r4, r6, lsl #2
  .long  0xf4e5083f                          // vld1.32       {d16[0]}, [r5 :32]
  .long  0xf4e608bf                          // vld1.32       {d16[1]}, [r6 :32]
  .long  0xf24021b1                          // vand          d18, d16, d17
  .long  0xf3f83030                          // vshr.u32      d19, d16, #8
  .long  0xf3e84030                          // vshr.u32      d20, d16, #24
  .long  0xf3f00030                          // vshr.u32      d16, d16, #16
  .long  0xf24331b1                          // vand          d19, d19, d17
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf3043db1                          // vmul.f32      d3, d20, d17
  .long  0xf3031db1                          // vmul.f32      d1, d19, d17
  .long  0xf3002db1                          // vmul.f32      d2, d16, d17
  .long  0xe8bd4070                          // pop           {r4, r5, r6, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_store_8888_vfp4
.globl _sk_store_8888_vfp4
FUNCTION(_sk_store_8888_vfp4)
_sk_store_8888_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xeddf0b1f                          // vldr          d16, [pc, #124]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2412c30                          // vfma.f32      d18, d1, d16
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xe08cc102                          // add           ip, ip, r2, lsl #2
  .long  0xf2434c30                          // vfma.f32      d20, d3, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf3fb37a4                          // vcvt.u32.f32  d19, d20
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xf2f02532                          // vshl.s32      d18, d18, #16
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xf2f81533                          // vshl.s32      d17, d19, #24
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0x0a000004                          // beq           34d4 <sk_store_8888_vfp4+0x7c>
  .long  0xedcc0b00                          // vstr          d16, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xf4cc083f                          // vst1.32       {d16[0]}, [ip :32]
  .long  0xeafffff9                          // b             34c4 <sk_store_8888_vfp4+0x6c>
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000

HIDDEN _sk_load_f16_vfp4
.globl _sk_load_f16_vfp4
FUNCTION(_sk_load_f16_vfp4)
_sk_load_f16_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf4ec070f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [ip]
  .long  0x1a000001                          // bne           3510 <sk_load_f16_vfp4+0x28>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4ec074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [ip]
  .long  0xf3b60720                          // vcvt.f32.f16  q0, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3b62722                          // vcvt.f32.f16  q1, d18
  .long  0xf3f64721                          // vcvt.f32.f16  q10, d17
  .long  0xf3f60723                          // vcvt.f32.f16  q8, d19
  .long  0xf22411b4                          // vorr          d1, d20, d20
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_load_f16_dst_vfp4
.globl _sk_load_f16_dst_vfp4
FUNCTION(_sk_load_f16_dst_vfp4)
_sk_load_f16_dst_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf4ec070f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [ip]
  .long  0x1a000001                          // bne           3560 <sk_load_f16_dst_vfp4+0x28>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4ec074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [ip]
  .long  0xf3b64720                          // vcvt.f32.f16  q2, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3b66722                          // vcvt.f32.f16  q3, d18
  .long  0xf3f64721                          // vcvt.f32.f16  q10, d17
  .long  0xf3f60723                          // vcvt.f32.f16  q8, d19
  .long  0xf22451b4                          // vorr          d5, d20, d20
  .long  0xf22071b0                          // vorr          d7, d16, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_gather_f16_vfp4
.globl _sk_gather_f16_vfp4
FUNCTION(_sk_gather_f16_vfp4)
_sk_gather_f16_vfp4:
  .long  0xe92d4c10                          // push          {r4, sl, fp, lr}
  .long  0xe28db008                          // add           fp, sp, #8
  .long  0xe24dd020                          // sub           sp, sp, #32
  .long  0xe7c3d01f                          // bfc           sp, #0, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe49ce008                          // ldr           lr, [ip], #8
  .long  0xf4ec2c9f                          // vld1.32       {d18[]}, [ip :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xee11cb90                          // vmov.32       ip, d17[0]
  .long  0xe08e4184                          // add           r4, lr, r4, lsl #3
  .long  0xe08ec18c                          // add           ip, lr, ip, lsl #3
  .long  0xedd41b00                          // vldr          d17, [r4]
  .long  0xe28d4010                          // add           r4, sp, #16
  .long  0xeddc0b00                          // vldr          d16, [ip]
  .long  0xe59bc008                          // ldr           ip, [fp, #8]
  .long  0xf4440aef                          // vst1.64       {d16-d17}, [r4 :128]
  .long  0xf4e4071f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [r4 :64]
  .long  0xe3844008                          // orr           r4, r4, #8
  .long  0xf4e4075f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [r4 :64]
  .long  0xf3b60720                          // vcvt.f32.f16  q0, d16
  .long  0xf3b62722                          // vcvt.f32.f16  q1, d18
  .long  0xe5914004                          // ldr           r4, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe58dc000                          // str           ip, [sp]
  .long  0xf3f64721                          // vcvt.f32.f16  q10, d17
  .long  0xf3f60723                          // vcvt.f32.f16  q8, d19
  .long  0xf22411b4                          // vorr          d1, d20, d20
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xe12fff34                          // blx           r4
  .long  0xe24bd008                          // sub           sp, fp, #8
  .long  0xe8bd8c10                          // pop           {r4, sl, fp, pc}

HIDDEN _sk_store_f16_vfp4
.globl _sk_store_f16_vfp4
FUNCTION(_sk_store_f16_vfp4)
_sk_store_f16_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2630113                          // vorr          d16, d3, d3
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2612111                          // vorr          d18, d1, d1
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xf3f67620                          // vcvt.f16.f32  d23, q8
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xf3f66602                          // vcvt.f16.f32  d22, q1
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf3f65622                          // vcvt.f16.f32  d21, q9
  .long  0xf3f64600                          // vcvt.f16.f32  d20, q0
  .long  0xf4cc470f                          // vst4.16       {d20[0],d21[0],d22[0],d23[0]}, [ip]
  .long  0x1a000001                          // bne           3650 <sk_store_f16_vfp4+0x40>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4cc474f                          // vst4.16       {d20[1],d21[1],d22[1],d23[1]}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf22211b2                          // vorr          d1, d18, d18
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_load_u16_be_vfp4
.globl _sk_load_u16_be_vfp4
FUNCTION(_sk_load_u16_be_vfp4)
_sk_load_u16_be_vfp4:
  .long  0xe92d4bf0                          // push          {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de020                          // ldr           lr, [sp, #32]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf4ec070f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [ip]
  .long  0x1a000001                          // bne           3690 <sk_load_u16_be_vfp4+0x28>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4ec074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [ip]
  .long  0xee90cbb0                          // vmov.u16      ip, d16[0]
  .long  0xee937bb0                          // vmov.u16      r7, d19[0]
  .long  0xee92ebb0                          // vmov.u16      lr, d18[0]
  .long  0xee914bb0                          // vmov.u16      r4, d17[0]
  .long  0xee905bf0                          // vmov.u16      r5, d16[1]
  .long  0xee939bf0                          // vmov.u16      r9, d19[1]
  .long  0xf3c73c1f                          // vmov.i32      d19, #65535
  .long  0xee926bf0                          // vmov.u16      r6, d18[1]
  .long  0xee918bf0                          // vmov.u16      r8, d17[1]
  .long  0xee00cb90                          // vmov.32       d16[0], ip
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xee01eb90                          // vmov.32       d17[0], lr
  .long  0xee024b90                          // vmov.32       d18[0], r4
  .long  0xee047b90                          // vmov.32       d20[0], r7
  .long  0xee205b90                          // vmov.32       d16[1], r5
  .long  0xf24051b3                          // vand          d21, d16, d19
  .long  0xee216b90                          // vmov.32       d17[1], r6
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xee228b90                          // vmov.32       d18[1], r8
  .long  0xf24161b3                          // vand          d22, d17, d19
  .long  0xf3f85035                          // vshr.u32      d21, d21, #8
  .long  0xee249b90                          // vmov.32       d20[1], r9
  .long  0xf24271b3                          // vand          d23, d18, d19
  .long  0xf26001b5                          // vorr          d16, d16, d21
  .long  0xf24481b3                          // vand          d24, d20, d19
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3f87037                          // vshr.u32      d23, d23, #8
  .long  0xf2e81531                          // vshl.s32      d17, d17, #8
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf2e84534                          // vshl.s32      d20, d20, #8
  .long  0xf3f85038                          // vshr.u32      d21, d24, #8
  .long  0xf26221b7                          // vorr          d18, d18, d23
  .long  0xf26111b6                          // vorr          d17, d17, d22
  .long  0xf26441b5                          // vorr          d20, d20, d21
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xf24431b3                          // vand          d19, d20, d19
  .long  0xeddf4b09                          // vldr          d20, [pc, #36]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3fb26a2                          // vcvt.f32.u32  d18, d18
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3fb36a3                          // vcvt.f32.u32  d19, d19
  .long  0xf3000db4                          // vmul.f32      d0, d16, d20
  .long  0xf3021db4                          // vmul.f32      d1, d18, d20
  .long  0xf3012db4                          // vmul.f32      d2, d17, d20
  .long  0xf3033db4                          // vmul.f32      d3, d19, d20
  .long  0xe8bd4bf0                          // pop           {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_load_rgb_u16_be_vfp4
.globl _sk_load_rgb_u16_be_vfp4
FUNCTION(_sk_load_rgb_u16_be_vfp4)
_sk_load_rgb_u16_be_vfp4:
  .long  0xe92d48f0                          // push          {r4, r5, r6, r7, fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe082e082                          // add           lr, r2, r2, lsl #1
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe08cc08e                          // add           ip, ip, lr, lsl #1
  .long  0xe59de018                          // ldr           lr, [sp, #24]
  .long  0xf4ec060f                          // vld3.16       {d16[0],d17[0],d18[0]}, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0x1a000001                          // bne           378c <sk_load_rgb_u16_be_vfp4+0x2c>
  .long  0xe28cc006                          // add           ip, ip, #6
  .long  0xf4ec064f                          // vld3.16       {d16[1],d17[1],d18[1]}, [ip]
  .long  0xee90cbb0                          // vmov.u16      ip, d16[0]
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xee91ebb0                          // vmov.u16      lr, d17[0]
  .long  0xee924bb0                          // vmov.u16      r4, d18[0]
  .long  0xee927bf0                          // vmov.u16      r7, d18[1]
  .long  0xf3c73c1f                          // vmov.i32      d19, #65535
  .long  0xee905bf0                          // vmov.u16      r5, d16[1]
  .long  0xee916bf0                          // vmov.u16      r6, d17[1]
  .long  0xee00cb90                          // vmov.32       d16[0], ip
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xee01eb90                          // vmov.32       d17[0], lr
  .long  0xee024b90                          // vmov.32       d18[0], r4
  .long  0xee205b90                          // vmov.32       d16[1], r5
  .long  0xee216b90                          // vmov.32       d17[1], r6
  .long  0xf24041b3                          // vand          d20, d16, d19
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xee227b90                          // vmov.32       d18[1], r7
  .long  0xf24151b3                          // vand          d21, d17, d19
  .long  0xf3f84034                          // vshr.u32      d20, d20, #8
  .long  0xf24261b3                          // vand          d22, d18, d19
  .long  0xf2e81531                          // vshl.s32      d17, d17, #8
  .long  0xf3f85035                          // vshr.u32      d21, d21, #8
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf26001b4                          // vorr          d16, d16, d20
  .long  0xf26111b5                          // vorr          d17, d17, d21
  .long  0xf26221b6                          // vorr          d18, d18, d22
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xeddf3b08                          // vldr          d19, [pc, #32]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3fb26a2                          // vcvt.f32.u32  d18, d18
  .long  0xf3000db3                          // vmul.f32      d0, d16, d19
  .long  0xf3011db3                          // vmul.f32      d1, d17, d19
  .long  0xf3022db3                          // vmul.f32      d2, d18, d19
  .long  0xe8bd48f0                          // pop           {r4, r5, r6, r7, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_store_u16_be_vfp4
.globl _sk_store_u16_be_vfp4
FUNCTION(_sk_store_u16_be_vfp4)
_sk_store_u16_be_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xeddf0b2d                          // vldr          d16, [pc, #180]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2432c30                          // vfma.f32      d18, d3, d16
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xf2414c30                          // vfma.f32      d20, d1, d16
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3c73c1f                          // vmov.i32      d19, #65535
  .long  0xf3fb47a4                          // vcvt.u32.f32  d20, d20
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf24051b3                          // vand          d21, d16, d19
  .long  0xf24261b3                          // vand          d22, d18, d19
  .long  0xf24471b3                          // vand          d23, d20, d19
  .long  0xf24131b3                          // vand          d19, d17, d19
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xf3f85035                          // vshr.u32      d21, d21, #8
  .long  0xf2e88532                          // vshl.s32      d24, d18, #8
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf2e84534                          // vshl.s32      d20, d20, #8
  .long  0xf3f87037                          // vshr.u32      d23, d23, #8
  .long  0xf2e89531                          // vshl.s32      d25, d17, #8
  .long  0xf3f8a033                          // vshr.u32      d26, d19, #8
  .long  0xf26031b5                          // vorr          d19, d16, d21
  .long  0xf26821b6                          // vorr          d18, d24, d22
  .long  0xf26411b7                          // vorr          d17, d20, d23
  .long  0xf26901ba                          // vorr          d16, d25, d26
  .long  0xf3f63124                          // vuzp.16       d19, d20
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xf3f62124                          // vuzp.16       d18, d20
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf3f61124                          // vuzp.16       d17, d20
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xf3f60124                          // vuzp.16       d16, d20
  .long  0xf4cc070f                          // vst4.16       {d16[0],d17[0],d18[0],d19[0]}, [ip]
  .long  0x1a000001                          // bne           38e8 <sk_store_u16_be_vfp4+0xb0>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4cc074f                          // vst4.16       {d16[1],d17[1],d18[1],d19[1]}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x477fff00                          // .word         0x477fff00
  .long  0x477fff00                          // .word         0x477fff00

HIDDEN _sk_load_f32_vfp4
.globl _sk_load_f32_vfp4
FUNCTION(_sk_load_f32_vfp4)
_sk_load_f32_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc202                          // add           ip, ip, r2, lsl #4
  .long  0x1a000004                          // bne           3930 <sk_load_f32_vfp4+0x30>
  .long  0xf42c008f                          // vld4.32       {d0-d3}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xf4ac0f8f                          // vld4.32       {d0[]-d3[]}, [ip]
  .long  0xeafffff9                          // b             3920 <sk_load_f32_vfp4+0x20>

HIDDEN _sk_load_f32_dst_vfp4
.globl _sk_load_f32_dst_vfp4
FUNCTION(_sk_load_f32_dst_vfp4)
_sk_load_f32_dst_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc202                          // add           ip, ip, r2, lsl #4
  .long  0x1a000004                          // bne           3968 <sk_load_f32_dst_vfp4+0x30>
  .long  0xf42c408f                          // vld4.32       {d4-d7}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xf4ac4f8f                          // vld4.32       {d4[]-d7[]}, [ip]
  .long  0xeafffff9                          // b             3958 <sk_load_f32_dst_vfp4+0x20>

HIDDEN _sk_store_f32_vfp4
.globl _sk_store_f32_vfp4
FUNCTION(_sk_store_f32_vfp4)
_sk_store_f32_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc202                          // add           ip, ip, r2, lsl #4
  .long  0x1a000004                          // bne           39a0 <sk_store_f32_vfp4+0x30>
  .long  0xf40c008f                          // vst4.32       {d0-d3}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xf48c0b0f                          // vst4.32       {d0[0],d1[0],d2[0],d3[0]}, [ip]
  .long  0xeafffff9                          // b             3990 <sk_store_f32_vfp4+0x20>

HIDDEN _sk_clamp_x_vfp4
.globl _sk_clamp_x_vfp4
FUNCTION(_sk_clamp_x_vfp4)
_sk_clamp_x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3c71e1f                          // vmov.i8       d17, #255
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2400f80                          // vmax.f32      d16, d16, d0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26218a1                          // vadd.i32      d17, d18, d17
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_y_vfp4
.globl _sk_clamp_y_vfp4
FUNCTION(_sk_clamp_y_vfp4)
_sk_clamp_y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3c71e1f                          // vmov.i8       d17, #255
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2400f81                          // vmax.f32      d16, d16, d1
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26218a1                          // vadd.i32      d17, d18, d17
  .long  0xf2201fa1                          // vmin.f32      d1, d16, d17
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_repeat_x_vfp4
.globl _sk_repeat_x_vfp4
FUNCTION(_sk_repeat_x_vfp4)
_sk_repeat_x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xeddf4b11                          // vldr          d20, [pc, #68]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee0c9d                          // vld1.32       {d16[]}, [lr :32]!
  .long  0xf4ee1c9f                          // vld1.32       {d17[]}, [lr :32]
  .long  0xf3411d90                          // vmul.f32      d17, d17, d0
  .long  0xf3fb2721                          // vcvt.s32.f32  d18, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3621ea1                          // vcgt.f32      d17, d18, d17
  .long  0xf35411b3                          // vbsl          d17, d20, d19
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf3c72e1f                          // vmov.i8       d18, #255
  .long  0xf3401db1                          // vmul.f32      d17, d16, d17
  .long  0xf26008a2                          // vadd.i32      d16, d16, d18
  .long  0xf2601d21                          // vsub.f32      d17, d0, d17
  .long  0xf2210fa0                          // vmin.f32      d0, d17, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_repeat_y_vfp4
.globl _sk_repeat_y_vfp4
FUNCTION(_sk_repeat_y_vfp4)
_sk_repeat_y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xeddf4b11                          // vldr          d20, [pc, #68]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee0c9d                          // vld1.32       {d16[]}, [lr :32]!
  .long  0xf4ee1c9f                          // vld1.32       {d17[]}, [lr :32]
  .long  0xf3411d91                          // vmul.f32      d17, d17, d1
  .long  0xf3fb2721                          // vcvt.s32.f32  d18, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3621ea1                          // vcgt.f32      d17, d18, d17
  .long  0xf35411b3                          // vbsl          d17, d20, d19
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf3c72e1f                          // vmov.i8       d18, #255
  .long  0xf3401db1                          // vmul.f32      d17, d16, d17
  .long  0xf26008a2                          // vadd.i32      d16, d16, d18
  .long  0xf2611d21                          // vsub.f32      d17, d1, d17
  .long  0xf2211fa0                          // vmin.f32      d1, d17, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_mirror_x_vfp4
.globl _sk_mirror_x_vfp4
FUNCTION(_sk_mirror_x_vfp4)
_sk_mirror_x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xeeb68a00                          // vmov.f32      s16, #96
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c04010                          // vmov.i32      d20, #0
  .long  0xeddf5b17                          // vldr          d21, [pc, #92]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed9e9a00                          // vldr          s18, [lr]
  .long  0xed9eaa01                          // vldr          s20, [lr, #4]
  .long  0xf3f40c09                          // vdup.32       d16, d9[0]
  .long  0xf2601d20                          // vsub.f32      d17, d0, d16
  .long  0xee2a0a08                          // vmul.f32      s0, s20, s16
  .long  0xf2e129c0                          // vmul.f32      d18, d17, d0[0]
  .long  0xee390a09                          // vadd.f32      s0, s18, s18
  .long  0xf3fb3722                          // vcvt.s32.f32  d19, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3632ea2                          // vcgt.f32      d18, d19, d18
  .long  0xf35521b4                          // vbsl          d18, d21, d20
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2e229c0                          // vmul.f32      d18, d18, d0[0]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf3c72e1f                          // vmov.i8       d18, #255
  .long  0xf2611da0                          // vsub.f32      d17, d17, d16
  .long  0xf26008a2                          // vadd.i32      d16, d16, d18
  .long  0xf3f91721                          // vabs.f32      d17, d17
  .long  0xf2210fa0                          // vmin.f32      d0, d17, d16
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_mirror_y_vfp4
.globl _sk_mirror_y_vfp4
FUNCTION(_sk_mirror_y_vfp4)
_sk_mirror_y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xeeb68a00                          // vmov.f32      s16, #96
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c04010                          // vmov.i32      d20, #0
  .long  0xeddf5b17                          // vldr          d21, [pc, #92]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed9e9a00                          // vldr          s18, [lr]
  .long  0xed9eaa01                          // vldr          s20, [lr, #4]
  .long  0xf3f40c09                          // vdup.32       d16, d9[0]
  .long  0xf2611d20                          // vsub.f32      d17, d1, d16
  .long  0xee2a1a08                          // vmul.f32      s2, s20, s16
  .long  0xf2e129c1                          // vmul.f32      d18, d17, d1[0]
  .long  0xee391a09                          // vadd.f32      s2, s18, s18
  .long  0xf3fb3722                          // vcvt.s32.f32  d19, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3632ea2                          // vcgt.f32      d18, d19, d18
  .long  0xf35521b4                          // vbsl          d18, d21, d20
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2e229c1                          // vmul.f32      d18, d18, d1[0]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf3c72e1f                          // vmov.i8       d18, #255
  .long  0xf2611da0                          // vsub.f32      d17, d17, d16
  .long  0xf26008a2                          // vadd.i32      d16, d16, d18
  .long  0xf3f91721                          // vabs.f32      d17, d17
  .long  0xf2211fa0                          // vmin.f32      d1, d17, d16
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_clamp_x_1_vfp4
.globl _sk_clamp_x_1_vfp4
FUNCTION(_sk_clamp_x_1_vfp4)
_sk_clamp_x_1_vfp4:
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400f80                          // vmax.f32      d16, d16, d0
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_repeat_x_1_vfp4
.globl _sk_repeat_x_1_vfp4
FUNCTION(_sk_repeat_x_1_vfp4)
_sk_repeat_x_1_vfp4:
  .long  0xf3fb0700                          // vcvt.s32.f32  d16, d0
  .long  0xeddf3b07                          // vldr          d19, [pc, #28]
  .long  0xf2c02010                          // vmov.i32      d18, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3601e80                          // vcgt.f32      d17, d16, d0
  .long  0xf35311b2                          // vbsl          d17, d19, d18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2200d20                          // vsub.f32      d0, d0, d16
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_mirror_x_1_vfp4
.globl _sk_mirror_x_1_vfp4
FUNCTION(_sk_mirror_x_1_vfp4)
_sk_mirror_x_1_vfp4:
  .long  0xf3c70f10                          // vmov.f32      d16, #-1
  .long  0xeddf5b0f                          // vldr          d21, [pc, #60]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2401d20                          // vadd.f32      d17, d0, d16
  .long  0xf2c04010                          // vmov.i32      d20, #0
  .long  0xf3412db2                          // vmul.f32      d18, d17, d18
  .long  0xf3fb3722                          // vcvt.s32.f32  d19, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3632ea2                          // vcgt.f32      d18, d19, d18
  .long  0xf35521b4                          // vbsl          d18, d21, d20
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf3b90720                          // vabs.f32      d0, d16
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_luminance_to_alpha_vfp4
.globl _sk_luminance_to_alpha_vfp4
FUNCTION(_sk_luminance_to_alpha_vfp4)
_sk_luminance_to_alpha_vfp4:
  .long  0xeddf0b0a                          // vldr          d16, [pc, #40]
  .long  0xeddf1b0b                          // vldr          d17, [pc, #44]
  .long  0xf3410d30                          // vmul.f32      d16, d1, d16
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3401d31                          // vmul.f32      d17, d0, d17
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2013da0                          // vadd.f32      d3, d17, d16
  .long  0xeddf0b06                          // vldr          d16, [pc, #24]
  .long  0xf2023c30                          // vfma.f32      d3, d2, d16
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f371759                          // .word         0x3f371759
  .long  0x3f371759                          // .word         0x3f371759
  .long  0x3e59b3d0                          // .word         0x3e59b3d0
  .long  0x3e59b3d0                          // .word         0x3e59b3d0
  .long  0x3d93dd98                          // .word         0x3d93dd98
  .long  0x3d93dd98                          // .word         0x3d93dd98

HIDDEN _sk_matrix_2x3_vfp4
.globl _sk_matrix_2x3_vfp4
FUNCTION(_sk_matrix_2x3_vfp4)
_sk_matrix_2x3_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf2410c31                          // vfma.f32      d16, d1, d17
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xf2411c32                          // vfma.f32      d17, d1, d18
  .long  0xf4ee2c9d                          // vld1.32       {d18[]}, [lr :32]!
  .long  0xf4ee3c9f                          // vld1.32       {d19[]}, [lr :32]
  .long  0xf2400c32                          // vfma.f32      d16, d0, d18
  .long  0xf2401c33                          // vfma.f32      d17, d0, d19
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_3x4_vfp4
.globl _sk_matrix_3x4_vfp4
FUNCTION(_sk_matrix_3x4_vfp4)
_sk_matrix_3x4_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e4020                          // add           r4, lr, #32
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xe28e402c                          // add           r4, lr, #44
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e401c                          // add           r4, lr, #28
  .long  0xf2420c33                          // vfma.f32      d16, d2, d19
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e4024                          // add           r4, lr, #36
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4028                          // add           r4, lr, #40
  .long  0xf2421c32                          // vfma.f32      d17, d2, d18
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2422c34                          // vfma.f32      d18, d2, d20
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf2411c34                          // vfma.f32      d17, d1, d20
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf2410c34                          // vfma.f32      d16, d1, d20
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf2412c33                          // vfma.f32      d18, d1, d19
  .long  0xf4ee3c9d                          // vld1.32       {d19[]}, [lr :32]!
  .long  0xf4ee4c9f                          // vld1.32       {d20[]}, [lr :32]
  .long  0xf2401c33                          // vfma.f32      d17, d0, d19
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xf2400c33                          // vfma.f32      d16, d0, d19
  .long  0xf2402c34                          // vfma.f32      d18, d0, d20
  .long  0xf22101b1                          // vorr          d0, d17, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xf22211b2                          // vorr          d1, d18, d18
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_4x5_vfp4
.globl _sk_matrix_4x5_vfp4
FUNCTION(_sk_matrix_4x5_vfp4)
_sk_matrix_4x5_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2620112                          // vorr          d16, d2, d2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e5014                          // add           r5, lr, #20
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4e55c9f                          // vld1.32       {d21[]}, [r5 :32]
  .long  0xe28e5028                          // add           r5, lr, #40
  .long  0xf4e56c9f                          // vld1.32       {d22[]}, [r5 :32]
  .long  0xe28e5038                          // add           r5, lr, #56
  .long  0xf4e57c9f                          // vld1.32       {d23[]}, [r5 :32]
  .long  0xe28e5048                          // add           r5, lr, #72
  .long  0xf4a52c9f                          // vld1.32       {d2[]}, [r5 :32]
  .long  0xe28e5034                          // add           r5, lr, #52
  .long  0xf2032c37                          // vfma.f32      d2, d3, d23
  .long  0xf4e58c9f                          // vld1.32       {d24[]}, [r5 :32]
  .long  0xe28e5044                          // add           r5, lr, #68
  .long  0xf4e51c9f                          // vld1.32       {d17[]}, [r5 :32]
  .long  0xe28e5030                          // add           r5, lr, #48
  .long  0xf2431c38                          // vfma.f32      d17, d3, d24
  .long  0xf4e59c9f                          // vld1.32       {d25[]}, [r5 :32]
  .long  0xe28e503c                          // add           r5, lr, #60
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e504c                          // add           r5, lr, #76
  .long  0xf2002cb6                          // vfma.f32      d2, d16, d22
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xe28e5040                          // add           r5, lr, #64
  .long  0xf2432c33                          // vfma.f32      d18, d3, d19
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e5020                          // add           r5, lr, #32
  .long  0xf2433c39                          // vfma.f32      d19, d3, d25
  .long  0xf4e57c9f                          // vld1.32       {d23[]}, [r5 :32]
  .long  0xe28e502c                          // add           r5, lr, #44
  .long  0xf4e58c9f                          // vld1.32       {d24[]}, [r5 :32]
  .long  0xe28e5024                          // add           r5, lr, #36
  .long  0xf2402cb8                          // vfma.f32      d18, d16, d24
  .long  0xf4e58c9f                          // vld1.32       {d24[]}, [r5 :32]
  .long  0xf2401cb8                          // vfma.f32      d17, d16, d24
  .long  0xe28e5010                          // add           r5, lr, #16
  .long  0xf2403cb7                          // vfma.f32      d19, d16, d23
  .long  0xf4e44c9d                          // vld1.32       {d20[]}, [r4 :32]!
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e501c                          // add           r5, lr, #28
  .long  0xf4e56c9f                          // vld1.32       {d22[]}, [r5 :32]
  .long  0xe28e5018                          // add           r5, lr, #24
  .long  0xf2412c36                          // vfma.f32      d18, d1, d22
  .long  0xf2411c35                          // vfma.f32      d17, d1, d21
  .long  0xf4e45c9f                          // vld1.32       {d21[]}, [r4 :32]
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf2012c30                          // vfma.f32      d2, d1, d16
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xf2401c35                          // vfma.f32      d17, d0, d21
  .long  0xf2403c34                          // vfma.f32      d19, d0, d20
  .long  0xf4e54c9f                          // vld1.32       {d20[]}, [r5 :32]
  .long  0xf2402c34                          // vfma.f32      d18, d0, d20
  .long  0xf2002c30                          // vfma.f32      d2, d0, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22301b3                          // vorr          d0, d19, d19
  .long  0xf22231b2                          // vorr          d3, d18, d18
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_4x3_vfp4
.globl _sk_matrix_4x3_vfp4
FUNCTION(_sk_matrix_4x3_vfp4)
_sk_matrix_4x3_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e5018                          // add           r5, lr, #24
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e5028                          // add           r5, lr, #40
  .long  0xf4a52c9f                          // vld1.32       {d2[]}, [r5 :32]
  .long  0xe28e5014                          // add           r5, lr, #20
  .long  0xf2012c33                          // vfma.f32      d2, d1, d19
  .long  0xf4e54c9f                          // vld1.32       {d20[]}, [r5 :32]
  .long  0xe28e5010                          // add           r5, lr, #16
  .long  0xf4e51c9f                          // vld1.32       {d17[]}, [r5 :32]
  .long  0xe28e5020                          // add           r5, lr, #32
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e501c                          // add           r5, lr, #28
  .long  0xf2410c31                          // vfma.f32      d16, d1, d17
  .long  0xf4e55c9f                          // vld1.32       {d21[]}, [r5 :32]
  .long  0xe28e502c                          // add           r5, lr, #44
  .long  0xf4a53c9f                          // vld1.32       {d3[]}, [r5 :32]
  .long  0xe28e5024                          // add           r5, lr, #36
  .long  0xf2013c35                          // vfma.f32      d3, d1, d21
  .long  0xf4e51c9f                          // vld1.32       {d17[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf2411c34                          // vfma.f32      d17, d1, d20
  .long  0xf4e42c9d                          // vld1.32       {d18[]}, [r4 :32]!
  .long  0xf2400c32                          // vfma.f32      d16, d0, d18
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xf2002c33                          // vfma.f32      d2, d0, d19
  .long  0xf2401c34                          // vfma.f32      d17, d0, d20
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xf2003c32                          // vfma.f32      d3, d0, d18
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_perspective_vfp4
.globl _sk_matrix_perspective_vfp4
FUNCTION(_sk_matrix_perspective_vfp4)
_sk_matrix_perspective_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e401c                          // add           r4, lr, #28
  .long  0xe28e5010                          // add           r5, lr, #16
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4020                          // add           r4, lr, #32
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xf4e45c9f                          // vld1.32       {d21[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf2413c35                          // vfma.f32      d19, d1, d21
  .long  0xf4e45c9f                          // vld1.32       {d21[]}, [r4 :32]
  .long  0xf2415c32                          // vfma.f32      d21, d1, d18
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xf3fb4521                          // vrecpe.f32    d20, d17
  .long  0xf2403c30                          // vfma.f32      d19, d0, d16
  .long  0xf2411fb4                          // vrecps.f32    d17, d17, d20
  .long  0xf2405c32                          // vfma.f32      d21, d0, d18
  .long  0xf3440db1                          // vmul.f32      d16, d20, d17
  .long  0xf3030db0                          // vmul.f32      d0, d19, d16
  .long  0xf3051db0                          // vmul.f32      d1, d21, d16
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_evenly_spaced_gradient_vfp4
.globl _sk_evenly_spaced_gradient_vfp4
FUNCTION(_sk_evenly_spaced_gradient_vfp4)
_sk_evenly_spaced_gradient_vfp4:
  .long  0xe92d4ff0                          // push          {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xed2d8b0a                          // vpush         {d8-d12}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe89e0720                          // ldm           lr, {r5, r8, r9, sl}
  .long  0xe2455001                          // sub           r5, r5, #1
  .long  0xe59e4010                          // ldr           r4, [lr, #16]
  .long  0xe59eb020                          // ldr           fp, [lr, #32]
  .long  0xee805b90                          // vdup.32       d16, r5
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3400d90                          // vmul.f32      d16, d16, d0
  .long  0xf3fb0720                          // vcvt.s32.f32  d16, d16
  .long  0xee305b90                          // vmov.32       r5, d16[1]
  .long  0xe0846105                          // add           r6, r4, r5, lsl #2
  .long  0xe08b7105                          // add           r7, fp, r5, lsl #2
  .long  0xedd69a00                          // vldr          s19, [r6]
  .long  0xee106b90                          // vmov.32       r6, d16[0]
  .long  0xedd73a00                          // vldr          s7, [r7]
  .long  0xe08a7105                          // add           r7, sl, r5, lsl #2
  .long  0xedd7aa00                          // vldr          s21, [r7]
  .long  0xe08a7106                          // add           r7, sl, r6, lsl #2
  .long  0xe0844106                          // add           r4, r4, r6, lsl #2
  .long  0xe59ea018                          // ldr           sl, [lr, #24]
  .long  0xed97aa00                          // vldr          s20, [r7]
  .long  0xe59e701c                          // ldr           r7, [lr, #28]
  .long  0xed949a00                          // vldr          s18, [r4]
  .long  0xe0874105                          // add           r4, r7, r5, lsl #2
  .long  0xedd42a00                          // vldr          s5, [r4]
  .long  0xe0894105                          // add           r4, r9, r5, lsl #2
  .long  0xedd4ba00                          // vldr          s23, [r4]
  .long  0xe0894106                          // add           r4, r9, r6, lsl #2
  .long  0xe08b9106                          // add           r9, fp, r6, lsl #2
  .long  0xe087b106                          // add           fp, r7, r6, lsl #2
  .long  0xed94ba00                          // vldr          s22, [r4]
  .long  0xe08a4105                          // add           r4, sl, r5, lsl #2
  .long  0xe0887105                          // add           r7, r8, r5, lsl #2
  .long  0xed9b2a00                          // vldr          s4, [fp]
  .long  0xedd41a00                          // vldr          s3, [r4]
  .long  0xe59e4014                          // ldr           r4, [lr, #20]
  .long  0xf2002c1a                          // vfma.f32      d2, d0, d10
  .long  0xedd7ca00                          // vldr          s25, [r7]
  .long  0xe0887106                          // add           r7, r8, r6, lsl #2
  .long  0xe0845105                          // add           r5, r4, r5, lsl #2
  .long  0xed993a00                          // vldr          s6, [r9]
  .long  0xed97ca00                          // vldr          s24, [r7]
  .long  0xe0847106                          // add           r7, r4, r6, lsl #2
  .long  0xedd58a00                          // vldr          s17, [r5]
  .long  0xf2003c19                          // vfma.f32      d3, d0, d9
  .long  0xed978a00                          // vldr          s16, [r7]
  .long  0xe08a7106                          // add           r7, sl, r6, lsl #2
  .long  0xf2008c1c                          // vfma.f32      d8, d0, d12
  .long  0xed971a00                          // vldr          s2, [r7]
  .long  0xf2001c1b                          // vfma.f32      d1, d0, d11
  .long  0xf2280118                          // vorr          d0, d8, d8
  .long  0xecbd8b0a                          // vpop          {d8-d12}
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4ff0                          // pop           {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_gauss_a_to_rgba_vfp4
.globl _sk_gauss_a_to_rgba_vfp4
FUNCTION(_sk_gauss_a_to_rgba_vfp4)
_sk_gauss_a_to_rgba_vfp4:
  .long  0xeddf0b0c                          // vldr          d16, [pc, #48]
  .long  0xeddf1b0d                          // vldr          d17, [pc, #52]
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xeddf0b0d                          // vldr          d16, [pc, #52]
  .long  0xed9f0b10                          // vldr          d0, [pc, #64]
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2430c31                          // vfma.f32      d16, d3, d17
  .long  0xeddf1b0b                          // vldr          d17, [pc, #44]
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf2030c31                          // vfma.f32      d0, d3, d17
  .long  0xf2201110                          // vorr          d1, d0, d0
  .long  0xf2202110                          // vorr          d2, d0, d0
  .long  0xf2203110                          // vorr          d3, d0, d0
  .long  0xe12fff1c                          // bx            ip
  .long  0xc011102d                          // .word         0xc011102d
  .long  0xc011102d                          // .word         0xc011102d
  .long  0x40397812                          // .word         0x40397812
  .long  0x40397812                          // .word         0x40397812
  .long  0x3e5a9420                          // .word         0x3e5a9420
  .long  0x3e5a9420                          // .word         0x3e5a9420
  .long  0x3e1e9d04                          // .word         0x3e1e9d04
  .long  0x3e1e9d04                          // .word         0x3e1e9d04
  .long  0x39a11800                          // .word         0x39a11800
  .long  0x39a11800                          // .word         0x39a11800

HIDDEN _sk_gradient_vfp4
.globl _sk_gradient_vfp4
FUNCTION(_sk_gradient_vfp4)
_sk_gradient_vfp4:
  .long  0xe92d4ff0                          // push          {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xed2d8b0a                          // vpush         {d8-d12}
  .long  0xe24dd008                          // sub           sp, sp, #8
  .long  0xe58d3004                          // str           r3, [sp, #4]
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59c4000                          // ldr           r4, [ip]
  .long  0xe3540002                          // cmp           r4, #2
  .long  0x3a00000b                          // bcc           4170 <sk_gradient_vfp4+0x58>
  .long  0xe59c5024                          // ldr           r5, [ip, #36]
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf2c02011                          // vmov.i32      d18, #1
  .long  0xe244e001                          // sub           lr, r4, #1
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe2854004                          // add           r4, r5, #4
  .long  0xf4e43c9d                          // vld1.32       {d19[]}, [r4 :32]!
  .long  0xe25ee001                          // subs          lr, lr, #1
  .long  0xf3403e23                          // vcge.f32      d19, d0, d19
  .long  0xf35231b1                          // vbsl          d19, d18, d17
  .long  0xf26308a0                          // vadd.i32      d16, d19, d16
  .long  0x1afffff9                          // bne           4158 <sk_gradient_vfp4+0x40>
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xe59c6010                          // ldr           r6, [ip, #16]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe59c700c                          // ldr           r7, [ip, #12]
  .long  0xe59ca020                          // ldr           sl, [ip, #32]
  .long  0xe59c9004                          // ldr           r9, [ip, #4]
  .long  0xe59c8008                          // ldr           r8, [ip, #8]
  .long  0xe0865104                          // add           r5, r6, r4, lsl #2
  .long  0xe089310e                          // add           r3, r9, lr, lsl #2
  .long  0xe0899104                          // add           r9, r9, r4, lsl #2
  .long  0xedd59a00                          // vldr          s19, [r5]
  .long  0xe086510e                          // add           r5, r6, lr, lsl #2
  .long  0xedd9ca00                          // vldr          s25, [r9]
  .long  0xed959a00                          // vldr          s18, [r5]
  .long  0xe0875104                          // add           r5, r7, r4, lsl #2
  .long  0xed93ca00                          // vldr          s24, [r3]
  .long  0xedd5aa00                          // vldr          s21, [r5]
  .long  0xe087510e                          // add           r5, r7, lr, lsl #2
  .long  0xed95aa00                          // vldr          s20, [r5]
  .long  0xe08a5104                          // add           r5, sl, r4, lsl #2
  .long  0xe08aa10e                          // add           sl, sl, lr, lsl #2
  .long  0xedd53a00                          // vldr          s7, [r5]
  .long  0xe59c501c                          // ldr           r5, [ip, #28]
  .long  0xed9a3a00                          // vldr          s6, [sl]
  .long  0xe0856104                          // add           r6, r5, r4, lsl #2
  .long  0xe085b10e                          // add           fp, r5, lr, lsl #2
  .long  0xe0885104                          // add           r5, r8, r4, lsl #2
  .long  0xe088810e                          // add           r8, r8, lr, lsl #2
  .long  0xedd62a00                          // vldr          s5, [r6]
  .long  0xf2003c19                          // vfma.f32      d3, d0, d9
  .long  0xedd5ba00                          // vldr          s23, [r5]
  .long  0xe59c6014                          // ldr           r6, [ip, #20]
  .long  0xe59c5018                          // ldr           r5, [ip, #24]
  .long  0xe0863104                          // add           r3, r6, r4, lsl #2
  .long  0xed9b2a00                          // vldr          s4, [fp]
  .long  0xe0857104                          // add           r7, r5, r4, lsl #2
  .long  0xed98ba00                          // vldr          s22, [r8]
  .long  0xedd38a00                          // vldr          s17, [r3]
  .long  0xe085310e                          // add           r3, r5, lr, lsl #2
  .long  0xedd71a00                          // vldr          s3, [r7]
  .long  0xe086710e                          // add           r7, r6, lr, lsl #2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2002c1a                          // vfma.f32      d2, d0, d10
  .long  0xed978a00                          // vldr          s16, [r7]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed931a00                          // vldr          s2, [r3]
  .long  0xf2008c1c                          // vfma.f32      d8, d0, d12
  .long  0xe59d3004                          // ldr           r3, [sp, #4]
  .long  0xf2001c1b                          // vfma.f32      d1, d0, d11
  .long  0xf2280118                          // vorr          d0, d8, d8
  .long  0xe28dd008                          // add           sp, sp, #8
  .long  0xecbd8b0a                          // vpop          {d8-d12}
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4ff0                          // pop           {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_evenly_spaced_2_stop_gradient_vfp4
.globl _sk_evenly_spaced_2_stop_gradient_vfp4
FUNCTION(_sk_evenly_spaced_2_stop_gradient_vfp4)
_sk_evenly_spaced_2_stop_gradient_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e5018                          // add           r5, lr, #24
  .long  0xf4a52c9f                          // vld1.32       {d2[]}, [r5 :32]
  .long  0xe28e5010                          // add           r5, lr, #16
  .long  0xf2002c33                          // vfma.f32      d2, d0, d19
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e501c                          // add           r5, lr, #28
  .long  0xf4e41c9d                          // vld1.32       {d17[]}, [r4 :32]!
  .long  0xf2400c31                          // vfma.f32      d16, d0, d17
  .long  0xf4a53c9f                          // vld1.32       {d3[]}, [r5 :32]
  .long  0xe28e5014                          // add           r5, lr, #20
  .long  0xf2003c32                          // vfma.f32      d3, d0, d18
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xf4a51c9f                          // vld1.32       {d1[]}, [r5 :32]
  .long  0xf2001c31                          // vfma.f32      d1, d0, d17
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_xy_to_unit_angle_vfp4
.globl _sk_xy_to_unit_angle_vfp4
FUNCTION(_sk_xy_to_unit_angle_vfp4)
_sk_xy_to_unit_angle_vfp4:
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xf3f90701                          // vabs.f32      d16, d1
  .long  0xeddf3b24                          // vldr          d19, [pc, #144]
  .long  0xf3f91700                          // vabs.f32      d17, d0
  .long  0xeddf4b24                          // vldr          d20, [pc, #144]
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2018fa0                          // vmax.f32      d8, d17, d16
  .long  0xf2219fa0                          // vmin.f32      d9, d17, d16
  .long  0xf3600ea1                          // vcgt.f32      d16, d16, d17
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf34a2d1a                          // vmul.f32      d18, d10, d10
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf2433da4                          // vadd.f32      d19, d19, d20
  .long  0xeddf4b1c                          // vldr          d20, [pc, #112]
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf2433da4                          // vadd.f32      d19, d19, d20
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b1a                          // vldr          d19, [pc, #104]
  .long  0xf2422da3                          // vadd.f32      d18, d18, d19
  .long  0xf2c53f10                          // vmov.f32      d19, #0.25
  .long  0xf34a2d32                          // vmul.f32      d18, d10, d18
  .long  0xf2631da2                          // vsub.f32      d17, d19, d18
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c72f10                          // vmov.f32      d18, #1
  .long  0xf2631da0                          // vsub.f32      d17, d19, d16
  .long  0xf3f93600                          // vclt.f32      d19, d0, #0
  .long  0xf35131b0                          // vbsl          d19, d17, d16
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf2620da3                          // vsub.f32      d16, d18, d19
  .long  0xf3f92601                          // vclt.f32      d18, d1, #0
  .long  0xf35021b3                          // vbsl          d18, d16, d19
  .long  0xf3420ea1                          // vcge.f32      d16, d18, d17
  .long  0xf3613ea2                          // vcgt.f32      d19, d17, d18
  .long  0xf26301b0                          // vorr          d16, d19, d16
  .long  0xf3b005a0                          // vmvn          d0, d16
  .long  0xf31101b2                          // vbsl          d0, d17, d18
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbbe72b6f                          // .word         0xbbe72b6f
  .long  0xbbe72b6f                          // .word         0xbbe72b6f
  .long  0x3ccad79f                          // .word         0x3ccad79f
  .long  0x3ccad79f                          // .word         0x3ccad79f
  .long  0xbd5464d4                          // .word         0xbd5464d4
  .long  0xbd5464d4                          // .word         0xbd5464d4
  .long  0x3e22f0a9                          // .word         0x3e22f0a9
  .long  0x3e22f0a9                          // .word         0x3e22f0a9

HIDDEN _sk_xy_to_radius_vfp4
.globl _sk_xy_to_radius_vfp4
FUNCTION(_sk_xy_to_radius_vfp4)
_sk_xy_to_radius_vfp4:
  .long  0xf3410d11                          // vmul.f32      d16, d1, d1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3401d10                          // vmul.f32      d17, d0, d0
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf3fb15a0                          // vrsqrte.f32   d17, d16
  .long  0xf3412db1                          // vmul.f32      d18, d17, d17
  .long  0xf2602fb2                          // vrsqrts.f32   d18, d16, d18
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf3412db1                          // vmul.f32      d18, d17, d17
  .long  0xf2602fb2                          // vrsqrts.f32   d18, d16, d18
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf3000db1                          // vmul.f32      d0, d16, d17
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_save_xy_vfp4
.globl _sk_save_xy_vfp4
FUNCTION(_sk_save_xy_vfp4)
_sk_save_xy_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xeddf7b1a                          // vldr          d23, [pc, #104]
  .long  0xf2c06010                          // vmov.i32      d22, #0
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2401d20                          // vadd.f32      d17, d0, d16
  .long  0xf2410d20                          // vadd.f32      d16, d1, d16
  .long  0xed8c0b00                          // vstr          d0, [ip]
  .long  0xed8c1b08                          // vstr          d1, [ip, #32]
  .long  0xf3fb2721                          // vcvt.s32.f32  d18, d17
  .long  0xf3fb3720                          // vcvt.s32.f32  d19, d16
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3624ea1                          // vcgt.f32      d20, d18, d17
  .long  0xf3635ea0                          // vcgt.f32      d21, d19, d16
  .long  0xf35741b6                          // vbsl          d20, d23, d22
  .long  0xf35751b6                          // vbsl          d21, d23, d22
  .long  0xf2622da4                          // vsub.f32      d18, d18, d20
  .long  0xf2633da5                          // vsub.f32      d19, d19, d21
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf2600da3                          // vsub.f32      d16, d16, d19
  .long  0xedcc1b10                          // vstr          d17, [ip, #64]
  .long  0xedcc0b18                          // vstr          d16, [ip, #96]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_accumulate_vfp4
.globl _sk_accumulate_vfp4
FUNCTION(_sk_accumulate_vfp4)
_sk_accumulate_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xedde1b28                          // vldr          d17, [lr, #160]
  .long  0xedde0b20                          // vldr          d16, [lr, #128]
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf2004c90                          // vfma.f32      d4, d16, d0
  .long  0xf2005c91                          // vfma.f32      d5, d16, d1
  .long  0xf2006c92                          // vfma.f32      d6, d16, d2
  .long  0xf2007c93                          // vfma.f32      d7, d16, d3
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_nx_vfp4
.globl _sk_bilinear_nx_vfp4
FUNCTION(_sk_bilinear_nx_vfp4)
_sk_bilinear_nx_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xf3c3261f                          // vmov.i32      d18, #-1090519040
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xedcc0b20                          // vstr          d16, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_px_vfp4
.globl _sk_bilinear_px_vfp4
FUNCTION(_sk_bilinear_px_vfp4)
_sk_bilinear_px_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xedcc2b20                          // vstr          d18, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xf2010da0                          // vadd.f32      d0, d17, d16
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_ny_vfp4
.globl _sk_bilinear_ny_vfp4
FUNCTION(_sk_bilinear_ny_vfp4)
_sk_bilinear_ny_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xf3c3261f                          // vmov.i32      d18, #-1090519040
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xedcc0b28                          // vstr          d16, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_py_vfp4
.globl _sk_bilinear_py_vfp4
FUNCTION(_sk_bilinear_py_vfp4)
_sk_bilinear_py_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xedcc2b28                          // vstr          d18, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xf2011da0                          // vadd.f32      d1, d17, d16
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_bicubic_n3x_vfp4
.globl _sk_bicubic_n3x_vfp4
FUNCTION(_sk_bicubic_n3x_vfp4)
_sk_bicubic_n3x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddf3b11                          // vldr          d19, [pc, #68]
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0c                          // vldr          d18, [pc, #48]
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3400db0                          // vmul.f32      d16, d16, d16
  .long  0xf3c72f18                          // vmov.f32      d18, #-1.5
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedcc0b20                          // vstr          d16, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n1x_vfp4
.globl _sk_bicubic_n1x_vfp4
FUNCTION(_sk_bicubic_n1x_vfp4)
_sk_bicubic_n1x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2c73f18                          // vmov.f32      d19, #1.5
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0e                          // vldr          d18, [pc, #56]
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2402cb3                          // vfma.f32      d18, d16, d19
  .long  0xeddf3b0b                          // vldr          d19, [pc, #44]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3c3061f                          // vmov.i32      d16, #-1090519040
  .long  0xf2010da0                          // vadd.f32      d0, d17, d16
  .long  0xedcc3b20                          // vstr          d19, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p1x_vfp4
.globl _sk_bicubic_p1x_vfp4
FUNCTION(_sk_bicubic_p1x_vfp4)
_sk_bicubic_p1x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c71f18                          // vmov.f32      d17, #1.5
  .long  0xeddf0b0f                          // vldr          d16, [pc, #60]
  .long  0xeddc3b10                          // vldr          d19, [ip, #64]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xeddc2b00                          // vldr          d18, [ip]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xf2020da0                          // vadd.f32      d0, d18, d16
  .long  0xf2430cb1                          // vfma.f32      d16, d19, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xedcc1b20                          // vstr          d17, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p3x_vfp4
.globl _sk_bicubic_p3x_vfp4
FUNCTION(_sk_bicubic_p3x_vfp4)
_sk_bicubic_p3x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xeddf0b0e                          // vldr          d16, [pc, #56]
  .long  0xeddf3b0f                          // vldr          d19, [pc, #60]
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xf2423cb0                          // vfma.f32      d19, d18, d16
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xf3420db2                          // vmul.f32      d16, d18, d18
  .long  0xf2c72f18                          // vmov.f32      d18, #1.5
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedcc0b20                          // vstr          d16, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n3y_vfp4
.globl _sk_bicubic_n3y_vfp4
FUNCTION(_sk_bicubic_n3y_vfp4)
_sk_bicubic_n3y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddf3b11                          // vldr          d19, [pc, #68]
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0c                          // vldr          d18, [pc, #48]
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3400db0                          // vmul.f32      d16, d16, d16
  .long  0xf3c72f18                          // vmov.f32      d18, #-1.5
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedcc0b28                          // vstr          d16, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n1y_vfp4
.globl _sk_bicubic_n1y_vfp4
FUNCTION(_sk_bicubic_n1y_vfp4)
_sk_bicubic_n1y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2c73f18                          // vmov.f32      d19, #1.5
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0e                          // vldr          d18, [pc, #56]
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2402cb3                          // vfma.f32      d18, d16, d19
  .long  0xeddf3b0b                          // vldr          d19, [pc, #44]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3c3061f                          // vmov.i32      d16, #-1090519040
  .long  0xf2011da0                          // vadd.f32      d1, d17, d16
  .long  0xedcc3b28                          // vstr          d19, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p1y_vfp4
.globl _sk_bicubic_p1y_vfp4
FUNCTION(_sk_bicubic_p1y_vfp4)
_sk_bicubic_p1y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c71f18                          // vmov.f32      d17, #1.5
  .long  0xeddf0b0f                          // vldr          d16, [pc, #60]
  .long  0xeddc3b18                          // vldr          d19, [ip, #96]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xeddc2b08                          // vldr          d18, [ip, #32]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xf2021da0                          // vadd.f32      d1, d18, d16
  .long  0xf2430cb1                          // vfma.f32      d16, d19, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xedcc1b28                          // vstr          d17, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p3y_vfp4
.globl _sk_bicubic_p3y_vfp4
FUNCTION(_sk_bicubic_p3y_vfp4)
_sk_bicubic_p3y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xeddf0b0e                          // vldr          d16, [pc, #56]
  .long  0xeddf3b0f                          // vldr          d19, [pc, #60]
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xf2423cb0                          // vfma.f32      d19, d18, d16
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xf3420db2                          // vmul.f32      d16, d18, d18
  .long  0xf2c72f18                          // vmov.f32      d18, #1.5
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedcc0b28                          // vstr          d16, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_callback_vfp4
.globl _sk_callback_vfp4
FUNCTION(_sk_callback_vfp4)
_sk_callback_vfp4:
  .long  0xe92d4df0                          // push          {r4, r5, r6, r7, r8, sl, fp, lr}
  .long  0xe28db018                          // add           fp, sp, #24
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xe1a06001                          // mov           r6, r1
  .long  0xe1a07000                          // mov           r7, r0
  .long  0xe5964000                          // ldr           r4, [r6]
  .long  0xe1a05002                          // mov           r5, r2
  .long  0xe59b1008                          // ldr           r1, [fp, #8]
  .long  0xeeb08b47                          // vmov.f64      d8, d7
  .long  0xe2840004                          // add           r0, r4, #4
  .long  0xe1a08003                          // mov           r8, r3
  .long  0xe3510000                          // cmp           r1, #0
  .long  0x03a01002                          // moveq         r1, #2
  .long  0xf400008f                          // vst4.32       {d0-d3}, [r0]
  .long  0xe1a00004                          // mov           r0, r4
  .long  0xe5942000                          // ldr           r2, [r4]
  .long  0xeeb09b46                          // vmov.f64      d9, d6
  .long  0xeeb0ab45                          // vmov.f64      d10, d5
  .long  0xeeb0bb44                          // vmov.f64      d11, d4
  .long  0xe12fff32                          // blx           r2
  .long  0xe5940084                          // ldr           r0, [r4, #132]
  .long  0xe2861008                          // add           r1, r6, #8
  .long  0xe596c004                          // ldr           ip, [r6, #4]
  .long  0xe1a02005                          // mov           r2, r5
  .long  0xe1a03008                          // mov           r3, r8
  .long  0xeeb04b4b                          // vmov.f64      d4, d11
  .long  0xf420008f                          // vld4.32       {d0-d3}, [r0]
  .long  0xe1a00007                          // mov           r0, r7
  .long  0xeeb05b4a                          // vmov.f64      d5, d10
  .long  0xeeb06b49                          // vmov.f64      d6, d9
  .long  0xeeb07b48                          // vmov.f64      d7, d8
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe8bd4df0                          // pop           {r4, r5, r6, r7, r8, sl, fp, lr}
  .long  0xe12fff1c                          // bx            ip
#elif defined(__x86_64__)
BALIGN32

HIDDEN _sk_start_pipeline_hsw
.globl _sk_start_pipeline_hsw
FUNCTION(_sk_start_pipeline_hsw)
_sk_start_pipeline_hsw:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,137,208                          // mov           %rdx,%r8
  .byte  72,137,243                          // mov           %rsi,%rbx
  .byte  73,137,254                          // mov           %rdi,%r14
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,197                          // mov           %rax,%r13
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  73,141,78,8                         // lea           0x8(%r14),%rcx
  .byte  76,57,193                           // cmp           %r8,%rcx
  .byte  118,5                               // jbe           33 <_sk_start_pipeline_hsw+0x33>
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  235,42                              // jmp           5d <_sk_start_pipeline_hsw+0x5d>
  .byte  76,137,69,208                       // mov           %r8,-0x30(%rbp)
  .byte  69,49,192                           // xor           %r8d,%r8d
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  72,137,217                          // mov           %rbx,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,139,69,208                       // mov           -0x30(%rbp),%r8
  .byte  73,141,86,8                         // lea           0x8(%r14),%rdx
  .byte  73,131,198,16                       // add           $0x10,%r14
  .byte  77,57,198                           // cmp           %r8,%r14
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  118,218                             // jbe           37 <_sk_start_pipeline_hsw+0x37>
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,12                              // je            6e <_sk_start_pipeline_hsw+0x6e>
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  72,137,217                          // mov           %rbx,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  197,248,119                         // vzeroupper
  .byte  195                                 // retq

HIDDEN _sk_just_return_hsw
.globl _sk_just_return_hsw
FUNCTION(_sk_just_return_hsw)
_sk_just_return_hsw:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_hsw
.globl _sk_seed_shader_hsw
FUNCTION(_sk_seed_shader_hsw)
_sk_seed_shader_hsw:
  .byte  197,249,110,194                     // vmovd         %edx,%xmm0
  .byte  196,226,125,88,192                  // vpbroadcastd  %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,201,82,0,0        // vbroadcastss  0x52c9(%rip),%ymm1        # 5360 <_sk_callback_hsw+0x144>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,88,7                        // vaddps        (%rdi),%ymm0,%ymm0
  .byte  197,249,110,209                     // vmovd         %ecx,%xmm2
  .byte  196,226,125,88,210                  // vpbroadcastd  %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,21,169,82,0,0        // vbroadcastss  0x52a9(%rip),%ymm2        # 5364 <_sk_callback_hsw+0x148>
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_hsw
.globl _sk_dither_hsw
FUNCTION(_sk_dither_hsw)
_sk_dither_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,194                     // vmovd         %edx,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  197,61,254,71,32                    // vpaddd        0x20(%rdi),%ymm8,%ymm8
  .byte  197,121,110,201                     // vmovd         %ecx,%xmm9
  .byte  196,66,125,88,201                   // vpbroadcastd  %xmm9,%ymm9
  .byte  196,65,53,239,200                   // vpxor         %ymm8,%ymm9,%ymm9
  .byte  196,98,125,88,21,112,82,0,0         // vpbroadcastd  0x5270(%rip),%ymm10        # 5368 <_sk_callback_hsw+0x14c>
  .byte  196,65,53,219,218                   // vpand         %ymm10,%ymm9,%ymm11
  .byte  196,193,37,114,243,5                // vpslld        $0x5,%ymm11,%ymm11
  .byte  196,65,61,219,210                   // vpand         %ymm10,%ymm8,%ymm10
  .byte  196,193,45,114,242,4                // vpslld        $0x4,%ymm10,%ymm10
  .byte  196,98,125,88,37,85,82,0,0          // vpbroadcastd  0x5255(%rip),%ymm12        # 536c <_sk_callback_hsw+0x150>
  .byte  196,98,125,88,45,80,82,0,0          // vpbroadcastd  0x5250(%rip),%ymm13        # 5370 <_sk_callback_hsw+0x154>
  .byte  196,65,53,219,245                   // vpand         %ymm13,%ymm9,%ymm14
  .byte  196,193,13,114,246,2                // vpslld        $0x2,%ymm14,%ymm14
  .byte  196,65,61,219,237                   // vpand         %ymm13,%ymm8,%ymm13
  .byte  196,65,21,254,237                   // vpaddd        %ymm13,%ymm13,%ymm13
  .byte  196,65,53,219,204                   // vpand         %ymm12,%ymm9,%ymm9
  .byte  196,193,53,114,209,1                // vpsrld        $0x1,%ymm9,%ymm9
  .byte  196,65,61,219,196                   // vpand         %ymm12,%ymm8,%ymm8
  .byte  196,193,61,114,208,2                // vpsrld        $0x2,%ymm8,%ymm8
  .byte  196,65,21,235,210                   // vpor          %ymm10,%ymm13,%ymm10
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,37,235,214                   // vpor          %ymm14,%ymm11,%ymm10
  .byte  196,65,61,235,194                   // vpor          %ymm10,%ymm8,%ymm8
  .byte  196,65,61,235,193                   // vpor          %ymm9,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,2,82,0,0           // vbroadcastss  0x5202(%rip),%ymm9        # 5374 <_sk_callback_hsw+0x158>
  .byte  196,98,125,24,21,253,81,0,0         // vbroadcastss  0x51fd(%rip),%ymm10        # 5378 <_sk_callback_hsw+0x15c>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,188,95,201                      // vmaxps        %ymm1,%ymm8,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  197,188,95,210                      // vmaxps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_hsw
.globl _sk_constant_color_hsw
FUNCTION(_sk_constant_color_hsw)
_sk_constant_color_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgba_hsw
.globl _sk_load_rgba_hsw
FUNCTION(_sk_load_rgba_hsw)
_sk_load_rgba_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,0                        // vmovups       (%rax),%ymm0
  .byte  197,252,16,72,32                    // vmovups       0x20(%rax),%ymm1
  .byte  197,252,16,80,64                    // vmovups       0x40(%rax),%ymm2
  .byte  197,252,16,88,96                    // vmovups       0x60(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_rgba_hsw
.globl _sk_store_rgba_hsw
FUNCTION(_sk_store_rgba_hsw)
_sk_store_rgba_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,252,17,80,64                    // vmovups       %ymm2,0x40(%rax)
  .byte  197,252,17,88,96                    // vmovups       %ymm3,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_hsw
.globl _sk_clear_hsw
FUNCTION(_sk_clear_hsw)
_sk_clear_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_hsw
.globl _sk_srcatop_hsw
FUNCTION(_sk_srcatop_hsw)
_sk_srcatop_hsw:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,98,125,24,5,85,81,0,0           // vbroadcastss  0x5155(%rip),%ymm8        # 537c <_sk_callback_hsw+0x160>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_hsw
.globl _sk_dstatop_hsw
FUNCTION(_sk_dstatop_hsw)
_sk_dstatop_hsw:
  .byte  196,98,125,24,5,40,81,0,0           // vbroadcastss  0x5128(%rip),%ymm8        # 5380 <_sk_callback_hsw+0x164>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,226,101,184,196                 // vfmadd231ps   %ymm4,%ymm3,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  196,226,101,184,205                 // vfmadd231ps   %ymm5,%ymm3,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  196,226,101,184,214                 // vfmadd231ps   %ymm6,%ymm3,%ymm2
  .byte  197,60,89,195                       // vmulps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_hsw
.globl _sk_srcin_hsw
FUNCTION(_sk_srcin_hsw)
_sk_srcin_hsw:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_hsw
.globl _sk_dstin_hsw
FUNCTION(_sk_dstin_hsw)
_sk_dstin_hsw:
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_hsw
.globl _sk_srcout_hsw
FUNCTION(_sk_srcout_hsw)
_sk_srcout_hsw:
  .byte  196,98,125,24,5,207,80,0,0          // vbroadcastss  0x50cf(%rip),%ymm8        # 5384 <_sk_callback_hsw+0x168>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_hsw
.globl _sk_dstout_hsw
FUNCTION(_sk_dstout_hsw)
_sk_dstout_hsw:
  .byte  196,226,125,24,5,178,80,0,0         // vbroadcastss  0x50b2(%rip),%ymm0        # 5388 <_sk_callback_hsw+0x16c>
  .byte  197,252,92,219                      // vsubps        %ymm3,%ymm0,%ymm3
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_hsw
.globl _sk_srcover_hsw
FUNCTION(_sk_srcover_hsw)
_sk_srcover_hsw:
  .byte  196,98,125,24,5,149,80,0,0          // vbroadcastss  0x5095(%rip),%ymm8        # 538c <_sk_callback_hsw+0x170>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,93,184,192                  // vfmadd231ps   %ymm8,%ymm4,%ymm0
  .byte  196,194,85,184,200                  // vfmadd231ps   %ymm8,%ymm5,%ymm1
  .byte  196,194,77,184,208                  // vfmadd231ps   %ymm8,%ymm6,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_hsw
.globl _sk_dstover_hsw
FUNCTION(_sk_dstover_hsw)
_sk_dstover_hsw:
  .byte  196,98,125,24,5,116,80,0,0          // vbroadcastss  0x5074(%rip),%ymm8        # 5390 <_sk_callback_hsw+0x174>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_hsw
.globl _sk_modulate_hsw
FUNCTION(_sk_modulate_hsw)
_sk_modulate_hsw:
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_hsw
.globl _sk_multiply_hsw
FUNCTION(_sk_multiply_hsw)
_sk_multiply_hsw:
  .byte  196,98,125,24,5,63,80,0,0           // vbroadcastss  0x503f(%rip),%ymm8        # 5394 <_sk_callback_hsw+0x178>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,208                       // vmulps        %ymm0,%ymm9,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,212                   // vfmadd231ps   %ymm4,%ymm8,%ymm10
  .byte  196,194,93,168,194                  // vfmadd213ps   %ymm10,%ymm4,%ymm0
  .byte  197,52,89,209                       // vmulps        %ymm1,%ymm9,%ymm10
  .byte  196,98,61,184,213                   // vfmadd231ps   %ymm5,%ymm8,%ymm10
  .byte  196,194,85,168,202                  // vfmadd213ps   %ymm10,%ymm5,%ymm1
  .byte  197,52,89,210                       // vmulps        %ymm2,%ymm9,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  196,194,77,168,210                  // vfmadd213ps   %ymm10,%ymm6,%ymm2
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  196,66,69,168,193                   // vfmadd213ps   %ymm9,%ymm7,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__hsw
.globl _sk_plus__hsw
FUNCTION(_sk_plus__hsw)
_sk_plus__hsw:
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_hsw
.globl _sk_screen_hsw
FUNCTION(_sk_screen_hsw)
_sk_screen_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  196,194,93,172,192                  // vfnmadd213ps  %ymm8,%ymm4,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  196,194,85,172,200                  // vfnmadd213ps  %ymm8,%ymm5,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  196,194,77,172,208                  // vfnmadd213ps  %ymm8,%ymm6,%ymm2
  .byte  197,100,88,199                      // vaddps        %ymm7,%ymm3,%ymm8
  .byte  196,194,69,172,216                  // vfnmadd213ps  %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__hsw
.globl _sk_xor__hsw
FUNCTION(_sk_xor__hsw)
_sk_xor__hsw:
  .byte  196,98,125,24,5,186,79,0,0          // vbroadcastss  0x4fba(%rip),%ymm8        # 5398 <_sk_callback_hsw+0x17c>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  196,98,69,168,195                   // vfmadd213ps   %ymm3,%ymm7,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,195                      // vmovaps       %ymm8,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_hsw
.globl _sk_darken_hsw
FUNCTION(_sk_darken_hsw)
_sk_darken_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,95,193                  // vmaxps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,95,201                  // vmaxps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,95,209                  // vmaxps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,66,79,0,0           // vbroadcastss  0x4f42(%rip),%ymm8        # 539c <_sk_callback_hsw+0x180>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_hsw
.globl _sk_lighten_hsw
FUNCTION(_sk_lighten_hsw)
_sk_lighten_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,241,78,0,0          // vbroadcastss  0x4ef1(%rip),%ymm8        # 53a0 <_sk_callback_hsw+0x184>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_hsw
.globl _sk_difference_hsw
FUNCTION(_sk_difference_hsw)
_sk_difference_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,148,78,0,0          // vbroadcastss  0x4e94(%rip),%ymm8        # 53a4 <_sk_callback_hsw+0x188>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_hsw
.globl _sk_exclusion_hsw
FUNCTION(_sk_exclusion_hsw)
_sk_exclusion_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,82,78,0,0           // vbroadcastss  0x4e52(%rip),%ymm8        # 53a8 <_sk_callback_hsw+0x18c>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_hsw
.globl _sk_colorburn_hsw
FUNCTION(_sk_colorburn_hsw)
_sk_colorburn_hsw:
  .byte  196,98,125,24,5,64,78,0,0           // vbroadcastss  0x4e40(%rip),%ymm8        # 53ac <_sk_callback_hsw+0x190>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,216                       // vmulps        %ymm0,%ymm9,%ymm11
  .byte  196,65,44,87,210                    // vxorps        %ymm10,%ymm10,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,228                       // vmulps        %ymm4,%ymm8,%ymm12
  .byte  197,68,92,236                       // vsubps        %ymm4,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,232                       // vdivps        %ymm0,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  196,66,101,168,235                  // vfmadd213ps   %ymm11,%ymm3,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,224                       // vaddps        %ymm0,%ymm12,%ymm12
  .byte  196,193,124,194,194,0               // vcmpeqps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,196,0                 // vblendvps     %ymm0,%ymm12,%ymm13,%ymm0
  .byte  197,92,194,231,0                    // vcmpeqps      %ymm7,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,52,89,217                       // vmulps        %ymm1,%ymm9,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  197,68,92,237                       // vsubps        %ymm5,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,233                       // vdivps        %ymm1,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  196,66,101,168,235                  // vfmadd213ps   %ymm11,%ymm3,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,225                       // vaddps        %ymm1,%ymm12,%ymm12
  .byte  196,193,116,194,202,0               // vcmpeqps      %ymm10,%ymm1,%ymm1
  .byte  196,195,21,74,204,16                // vblendvps     %ymm1,%ymm12,%ymm13,%ymm1
  .byte  197,84,194,231,0                    // vcmpeqps      %ymm7,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,108,194,210,0                // vcmpeqps      %ymm10,%ymm2,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  197,68,92,230                       // vsubps        %ymm6,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  197,28,94,226                       // vdivps        %ymm2,%ymm12,%ymm12
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,65,68,92,228                    // vsubps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,225                  // vfmadd213ps   %ymm9,%ymm3,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,227,37,74,210,160               // vblendvps     %ymm10,%ymm2,%ymm11,%ymm2
  .byte  197,76,194,215,0                    // vcmpeqps      %ymm7,%ymm6,%ymm10
  .byte  197,52,88,206                       // vaddps        %ymm6,%ymm9,%ymm9
  .byte  196,195,109,74,209,160              // vblendvps     %ymm10,%ymm9,%ymm2,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_hsw
.globl _sk_colordodge_hsw
FUNCTION(_sk_colordodge_hsw)
_sk_colordodge_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,13,75,77,0,0          // vbroadcastss  0x4d4b(%rip),%ymm9        # 53b0 <_sk_callback_hsw+0x194>
  .byte  197,52,92,215                       // vsubps        %ymm7,%ymm9,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,52,92,203                       // vsubps        %ymm3,%ymm9,%ymm9
  .byte  197,100,89,228                      // vmulps        %ymm4,%ymm3,%ymm12
  .byte  197,100,92,232                      // vsubps        %ymm0,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,236                       // vmulps        %ymm4,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,227                  // vfmadd213ps   %ymm11,%ymm3,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,232                       // vaddps        %ymm0,%ymm13,%ymm13
  .byte  197,252,194,195,0                   // vcmpeqps      %ymm3,%ymm0,%ymm0
  .byte  196,195,29,74,197,0                 // vblendvps     %ymm0,%ymm13,%ymm12,%ymm0
  .byte  196,65,92,194,224,0                 // vcmpeqps      %ymm8,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,100,89,229                      // vmulps        %ymm5,%ymm3,%ymm12
  .byte  197,100,92,233                      // vsubps        %ymm1,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,237                       // vmulps        %ymm5,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,227                  // vfmadd213ps   %ymm11,%ymm3,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,233                       // vaddps        %ymm1,%ymm13,%ymm13
  .byte  197,244,194,203,0                   // vcmpeqps      %ymm3,%ymm1,%ymm1
  .byte  196,195,29,74,205,16                // vblendvps     %ymm1,%ymm13,%ymm12,%ymm1
  .byte  196,65,84,194,224,0                 // vcmpeqps      %ymm8,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,100,92,226                      // vsubps        %ymm2,%ymm3,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  197,52,89,230                       // vmulps        %ymm6,%ymm9,%ymm12
  .byte  196,65,68,93,219                    // vminps        %ymm11,%ymm7,%ymm11
  .byte  196,66,101,168,218                  // vfmadd213ps   %ymm10,%ymm3,%ymm11
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  197,236,194,211,0                   // vcmpeqps      %ymm3,%ymm2,%ymm2
  .byte  196,195,37,74,212,32                // vblendvps     %ymm2,%ymm12,%ymm11,%ymm2
  .byte  196,65,76,194,192,0                 // vcmpeqps      %ymm8,%ymm6,%ymm8
  .byte  197,44,88,214                       // vaddps        %ymm6,%ymm10,%ymm10
  .byte  196,195,109,74,210,128              // vblendvps     %ymm8,%ymm10,%ymm2,%ymm2
  .byte  196,194,69,184,217                  // vfmadd231ps   %ymm9,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_hsw
.globl _sk_hardlight_hsw
FUNCTION(_sk_hardlight_hsw)
_sk_hardlight_hsw:
  .byte  196,98,125,24,5,108,76,0,0          // vbroadcastss  0x4c6c(%rip),%ymm8        # 53b4 <_sk_callback_hsw+0x198>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,220                   // vfmadd231ps   %ymm4,%ymm8,%ymm11
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  197,52,194,227,2                    // vcmpleps      %ymm3,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  196,98,61,184,221                   // vfmadd231ps   %ymm5,%ymm8,%ymm11
  .byte  197,116,88,225                      // vaddps        %ymm1,%ymm1,%ymm12
  .byte  197,28,194,227,2                    // vcmpleps      %ymm3,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  197,108,88,218                      // vaddps        %ymm2,%ymm2,%ymm11
  .byte  197,36,194,219,2                    // vcmpleps      %ymm3,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_hsw
.globl _sk_overlay_hsw
FUNCTION(_sk_overlay_hsw)
_sk_overlay_hsw:
  .byte  196,98,125,24,5,164,75,0,0          // vbroadcastss  0x4ba4(%rip),%ymm8        # 53b8 <_sk_callback_hsw+0x19c>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,220                   // vfmadd231ps   %ymm4,%ymm8,%ymm11
  .byte  197,92,88,204                       // vaddps        %ymm4,%ymm4,%ymm9
  .byte  197,52,194,231,2                    // vcmpleps      %ymm7,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  196,98,61,184,221                   // vfmadd231ps   %ymm5,%ymm8,%ymm11
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_hsw
.globl _sk_softlight_hsw
FUNCTION(_sk_softlight_hsw)
_sk_softlight_hsw:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,252,40,209                      // vmovaps       %ymm1,%ymm2
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  197,52,194,215,1                    // vcmpltps      %ymm7,%ymm9,%ymm10
  .byte  197,92,94,199                       // vdivps        %ymm7,%ymm4,%ymm8
  .byte  196,67,53,74,232,160                // vblendvps     %ymm10,%ymm8,%ymm9,%ymm13
  .byte  196,65,20,88,197                    // vaddps        %ymm13,%ymm13,%ymm8
  .byte  196,65,60,88,192                    // vaddps        %ymm8,%ymm8,%ymm8
  .byte  196,66,61,168,192                   // vfmadd213ps   %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,29,175,74,0,0         // vbroadcastss  0x4aaf(%rip),%ymm11        # 53c0 <_sk_callback_hsw+0x1a4>
  .byte  196,65,20,88,227                    // vaddps        %ymm11,%ymm13,%ymm12
  .byte  196,65,28,89,192                    // vmulps        %ymm8,%ymm12,%ymm8
  .byte  196,98,125,24,37,160,74,0,0         // vbroadcastss  0x4aa0(%rip),%ymm12        # 53c4 <_sk_callback_hsw+0x1a8>
  .byte  196,66,21,184,196                   // vfmadd231ps   %ymm12,%ymm13,%ymm8
  .byte  196,65,124,82,245                   // vrsqrtps      %ymm13,%ymm14
  .byte  196,65,124,83,246                   // vrcpps        %ymm14,%ymm14
  .byte  196,65,12,92,245                    // vsubps        %ymm13,%ymm14,%ymm14
  .byte  197,92,88,252                       // vaddps        %ymm4,%ymm4,%ymm15
  .byte  196,65,4,88,255                     // vaddps        %ymm15,%ymm15,%ymm15
  .byte  197,4,194,255,2                     // vcmpleps      %ymm7,%ymm15,%ymm15
  .byte  196,67,13,74,240,240                // vblendvps     %ymm15,%ymm8,%ymm14,%ymm14
  .byte  197,116,88,249                      // vaddps        %ymm1,%ymm1,%ymm15
  .byte  196,98,125,24,5,99,74,0,0           // vbroadcastss  0x4a63(%rip),%ymm8        # 53bc <_sk_callback_hsw+0x1a0>
  .byte  196,65,60,92,237                    // vsubps        %ymm13,%ymm8,%ymm13
  .byte  197,132,92,195                      // vsubps        %ymm3,%ymm15,%ymm0
  .byte  196,98,125,168,235                  // vfmadd213ps   %ymm3,%ymm0,%ymm13
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,20,89,236                       // vmulps        %ymm4,%ymm13,%ymm13
  .byte  196,226,101,184,196                 // vfmadd231ps   %ymm4,%ymm3,%ymm0
  .byte  197,4,194,243,2                     // vcmpleps      %ymm3,%ymm15,%ymm14
  .byte  196,195,125,74,197,224              // vblendvps     %ymm14,%ymm13,%ymm0,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,212,94,199                      // vdivps        %ymm7,%ymm5,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,240                      // vaddps        %ymm0,%ymm0,%ymm14
  .byte  196,65,12,88,246                    // vaddps        %ymm14,%ymm14,%ymm14
  .byte  196,66,13,168,246                   // vfmadd213ps   %ymm14,%ymm14,%ymm14
  .byte  196,65,124,88,251                   // vaddps        %ymm11,%ymm0,%ymm15
  .byte  196,65,4,89,246                     // vmulps        %ymm14,%ymm15,%ymm14
  .byte  196,66,125,184,244                  // vfmadd231ps   %ymm12,%ymm0,%ymm14
  .byte  197,124,82,248                      // vrsqrtps      %ymm0,%ymm15
  .byte  196,65,124,83,255                   // vrcpps        %ymm15,%ymm15
  .byte  197,4,92,248                        // vsubps        %ymm0,%ymm15,%ymm15
  .byte  197,84,88,237                       // vaddps        %ymm5,%ymm5,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,20,194,239,2                    // vcmpleps      %ymm7,%ymm13,%ymm13
  .byte  196,67,5,74,238,208                 // vblendvps     %ymm13,%ymm14,%ymm15,%ymm13
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,108,88,242                      // vaddps        %ymm2,%ymm2,%ymm14
  .byte  197,12,92,251                       // vsubps        %ymm3,%ymm14,%ymm15
  .byte  196,226,5,168,195                   // vfmadd213ps   %ymm3,%ymm15,%ymm0
  .byte  197,4,89,255                        // vmulps        %ymm7,%ymm15,%ymm15
  .byte  196,65,4,89,237                     // vmulps        %ymm13,%ymm15,%ymm13
  .byte  197,252,89,197                      // vmulps        %ymm5,%ymm0,%ymm0
  .byte  196,98,101,184,237                  // vfmadd231ps   %ymm5,%ymm3,%ymm13
  .byte  197,12,194,243,2                    // vcmpleps      %ymm3,%ymm14,%ymm14
  .byte  196,99,21,74,240,224                // vblendvps     %ymm14,%ymm0,%ymm13,%ymm14
  .byte  197,204,94,199                      // vdivps        %ymm7,%ymm6,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,66,53,168,201                   // vfmadd213ps   %ymm9,%ymm9,%ymm9
  .byte  196,65,124,88,211                   // vaddps        %ymm11,%ymm0,%ymm10
  .byte  196,65,44,89,201                    // vmulps        %ymm9,%ymm10,%ymm9
  .byte  196,66,125,184,204                  // vfmadd231ps   %ymm12,%ymm0,%ymm9
  .byte  197,124,82,208                      // vrsqrtps      %ymm0,%ymm10
  .byte  196,65,124,83,210                   // vrcpps        %ymm10,%ymm10
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  196,65,36,88,219                    // vaddps        %ymm11,%ymm11,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  196,67,45,74,201,176                // vblendvps     %ymm11,%ymm9,%ymm10,%ymm9
  .byte  197,124,16,100,36,200               // vmovups       -0x38(%rsp),%ymm12
  .byte  196,65,28,88,212                    // vaddps        %ymm12,%ymm12,%ymm10
  .byte  197,44,92,219                       // vsubps        %ymm3,%ymm10,%ymm11
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  196,226,37,168,195                  // vfmadd213ps   %ymm3,%ymm11,%ymm0
  .byte  197,36,89,223                       // vmulps        %ymm7,%ymm11,%ymm11
  .byte  196,65,36,89,201                    // vmulps        %ymm9,%ymm11,%ymm9
  .byte  197,252,89,198                      // vmulps        %ymm6,%ymm0,%ymm0
  .byte  196,98,101,184,206                  // vfmadd231ps   %ymm6,%ymm3,%ymm9
  .byte  197,44,194,211,2                    // vcmpleps      %ymm3,%ymm10,%ymm10
  .byte  196,99,53,74,200,160                // vblendvps     %ymm10,%ymm0,%ymm9,%ymm9
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,252,88,68,36,168                // vaddps        -0x58(%rsp),%ymm0,%ymm0
  .byte  197,172,89,202                      // vmulps        %ymm2,%ymm10,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  196,193,116,88,206                  // vaddps        %ymm14,%ymm1,%ymm1
  .byte  196,193,44,89,212                   // vmulps        %ymm12,%ymm10,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_hsw
.globl _sk_hue_hsw
FUNCTION(_sk_hue_hsw)
_sk_hue_hsw:
  .byte  197,124,40,194                      // vmovaps       %ymm2,%ymm8
  .byte  197,124,17,68,36,200                // vmovups       %ymm8,-0x38(%rsp)
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,108,89,203                      // vmulps        %ymm3,%ymm2,%ymm9
  .byte  197,116,89,211                      // vmulps        %ymm3,%ymm1,%ymm10
  .byte  197,60,89,219                       // vmulps        %ymm3,%ymm8,%ymm11
  .byte  197,84,95,198                       // vmaxps        %ymm6,%ymm5,%ymm8
  .byte  196,65,92,95,192                    // vmaxps        %ymm8,%ymm4,%ymm8
  .byte  197,84,93,230                       // vminps        %ymm6,%ymm5,%ymm12
  .byte  196,65,92,93,228                    // vminps        %ymm12,%ymm4,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,227                       // vmulps        %ymm3,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,195,45,74,200,240               // vblendvps     %ymm15,%ymm8,%ymm10,%ymm1
  .byte  196,65,36,92,213                    // vsubps        %ymm13,%ymm11,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm12
  .byte  196,98,125,24,53,103,72,0,0         // vbroadcastss  0x4867(%rip),%ymm14        # 53c8 <_sk_callback_hsw+0x1ac>
  .byte  196,98,125,24,61,98,72,0,0          // vbroadcastss  0x4862(%rip),%ymm15        # 53cc <_sk_callback_hsw+0x1b0>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,66,93,184,238                   // vfmadd231ps   %ymm14,%ymm4,%ymm13
  .byte  196,226,125,24,5,83,72,0,0          // vbroadcastss  0x4853(%rip),%ymm0        # 53d0 <_sk_callback_hsw+0x1b4>
  .byte  196,98,77,184,232                   // vfmadd231ps   %ymm0,%ymm6,%ymm13
  .byte  196,65,116,89,215                   // vmulps        %ymm15,%ymm1,%ymm10
  .byte  196,66,53,184,214                   // vfmadd231ps   %ymm14,%ymm9,%ymm10
  .byte  196,98,29,184,208                   // vfmadd231ps   %ymm0,%ymm12,%ymm10
  .byte  196,66,101,170,234                  // vfmsub213ps   %ymm10,%ymm3,%ymm13
  .byte  196,65,52,88,213                    // vaddps        %ymm13,%ymm9,%ymm10
  .byte  196,65,116,88,221                   // vaddps        %ymm13,%ymm1,%ymm11
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,193,36,93,204                   // vminps        %ymm12,%ymm11,%ymm1
  .byte  197,44,93,233                       // vminps        %ymm1,%ymm10,%ymm13
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  196,66,45,184,206                   // vfmadd231ps   %ymm14,%ymm10,%ymm9
  .byte  196,98,29,184,200                   // vfmadd231ps   %ymm0,%ymm12,%ymm9
  .byte  196,193,44,92,193                   // vsubps        %ymm9,%ymm10,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,193,52,92,205                   // vsubps        %ymm13,%ymm9,%ymm1
  .byte  197,252,94,193                      // vdivps        %ymm1,%ymm0,%ymm0
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  197,12,94,241                       // vdivps        %ymm1,%ymm14,%ymm14
  .byte  196,65,28,92,249                    // vsubps        %ymm9,%ymm12,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  197,132,94,201                      // vdivps        %ymm1,%ymm15,%ymm1
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,204,208              // vblendvps     %ymm13,%ymm12,%ymm1,%ymm1
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,194,208              // vblendvps     %ymm13,%ymm10,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,124,92,217                   // vsubps        %ymm9,%ymm0,%ymm11
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,250,1                 // vcmpltps      %ymm10,%ymm12,%ymm15
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,217                    // vsubps        %ymm9,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,116,92,241                   // vsubps        %ymm9,%ymm1,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,210                    // vdivps        %ymm10,%ymm13,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,195,117,74,201,240              // vblendvps     %ymm15,%ymm9,%ymm1,%ymm1
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,200                    // vmaxps        %ymm8,%ymm11,%ymm9
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  196,226,125,24,13,64,71,0,0         // vbroadcastss  0x4740(%rip),%ymm1        # 53d4 <_sk_callback_hsw+0x1b8>
  .byte  197,116,92,215                      // vsubps        %ymm7,%ymm1,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,116,92,219                      // vsubps        %ymm3,%ymm1,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,192                      // vaddps        %ymm0,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,208                   // vaddps        %ymm8,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_hsw
.globl _sk_saturation_hsw
FUNCTION(_sk_saturation_hsw)
_sk_saturation_hsw:
  .byte  197,124,40,194                      // vmovaps       %ymm2,%ymm8
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,17,68,36,200                // vmovups       %ymm0,-0x38(%rsp)
  .byte  197,116,95,192                      // vmaxps        %ymm0,%ymm1,%ymm8
  .byte  196,65,108,95,192                   // vmaxps        %ymm8,%ymm2,%ymm8
  .byte  197,116,93,224                      // vminps        %ymm0,%ymm1,%ymm12
  .byte  196,65,108,93,228                   // vminps        %ymm12,%ymm2,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,231                       // vmulps        %ymm7,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,195,45,74,200,240               // vblendvps     %ymm15,%ymm8,%ymm10,%ymm1
  .byte  196,65,36,92,213                    // vsubps        %ymm13,%ymm11,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm12
  .byte  196,98,125,24,53,87,70,0,0          // vbroadcastss  0x4657(%rip),%ymm14        # 53d8 <_sk_callback_hsw+0x1bc>
  .byte  196,98,125,24,61,82,70,0,0          // vbroadcastss  0x4652(%rip),%ymm15        # 53dc <_sk_callback_hsw+0x1c0>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,66,93,184,238                   // vfmadd231ps   %ymm14,%ymm4,%ymm13
  .byte  196,226,125,24,5,67,70,0,0          // vbroadcastss  0x4643(%rip),%ymm0        # 53e0 <_sk_callback_hsw+0x1c4>
  .byte  196,98,77,184,232                   // vfmadd231ps   %ymm0,%ymm6,%ymm13
  .byte  196,65,116,89,215                   // vmulps        %ymm15,%ymm1,%ymm10
  .byte  196,66,53,184,214                   // vfmadd231ps   %ymm14,%ymm9,%ymm10
  .byte  196,98,29,184,208                   // vfmadd231ps   %ymm0,%ymm12,%ymm10
  .byte  196,66,101,170,234                  // vfmsub213ps   %ymm10,%ymm3,%ymm13
  .byte  196,65,52,88,213                    // vaddps        %ymm13,%ymm9,%ymm10
  .byte  196,65,116,88,221                   // vaddps        %ymm13,%ymm1,%ymm11
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,193,36,93,204                   // vminps        %ymm12,%ymm11,%ymm1
  .byte  197,44,93,233                       // vminps        %ymm1,%ymm10,%ymm13
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  196,66,45,184,206                   // vfmadd231ps   %ymm14,%ymm10,%ymm9
  .byte  196,98,29,184,200                   // vfmadd231ps   %ymm0,%ymm12,%ymm9
  .byte  196,193,44,92,193                   // vsubps        %ymm9,%ymm10,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,193,52,92,205                   // vsubps        %ymm13,%ymm9,%ymm1
  .byte  197,252,94,193                      // vdivps        %ymm1,%ymm0,%ymm0
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  197,12,94,241                       // vdivps        %ymm1,%ymm14,%ymm14
  .byte  196,65,28,92,249                    // vsubps        %ymm9,%ymm12,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  197,132,94,201                      // vdivps        %ymm1,%ymm15,%ymm1
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,204,208              // vblendvps     %ymm13,%ymm12,%ymm1,%ymm1
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,194,208              // vblendvps     %ymm13,%ymm10,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,124,92,217                   // vsubps        %ymm9,%ymm0,%ymm11
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,250,1                 // vcmpltps      %ymm10,%ymm12,%ymm15
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,217                    // vsubps        %ymm9,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,116,92,241                   // vsubps        %ymm9,%ymm1,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,210                    // vdivps        %ymm10,%ymm13,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,195,117,74,201,240              // vblendvps     %ymm15,%ymm9,%ymm1,%ymm1
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,200                    // vmaxps        %ymm8,%ymm11,%ymm9
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  196,226,125,24,13,48,69,0,0         // vbroadcastss  0x4530(%rip),%ymm1        # 53e4 <_sk_callback_hsw+0x1c8>
  .byte  197,116,92,215                      // vsubps        %ymm7,%ymm1,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,116,92,219                      // vsubps        %ymm3,%ymm1,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,192                      // vaddps        %ymm0,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,208                   // vaddps        %ymm8,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_hsw
.globl _sk_color_hsw
FUNCTION(_sk_color_hsw)
_sk_color_hsw:
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,17,76,36,200                // vmovups       %ymm9,-0x38(%rsp)
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,108,89,199                      // vmulps        %ymm7,%ymm2,%ymm8
  .byte  197,116,89,215                      // vmulps        %ymm7,%ymm1,%ymm10
  .byte  197,52,89,223                       // vmulps        %ymm7,%ymm9,%ymm11
  .byte  196,98,125,24,45,201,68,0,0         // vbroadcastss  0x44c9(%rip),%ymm13        # 53e8 <_sk_callback_hsw+0x1cc>
  .byte  196,98,125,24,53,196,68,0,0         // vbroadcastss  0x44c4(%rip),%ymm14        # 53ec <_sk_callback_hsw+0x1d0>
  .byte  196,65,84,89,230                    // vmulps        %ymm14,%ymm5,%ymm12
  .byte  196,66,93,184,229                   // vfmadd231ps   %ymm13,%ymm4,%ymm12
  .byte  196,98,125,24,61,181,68,0,0         // vbroadcastss  0x44b5(%rip),%ymm15        # 53f0 <_sk_callback_hsw+0x1d4>
  .byte  196,66,77,184,231                   // vfmadd231ps   %ymm15,%ymm6,%ymm12
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,66,61,184,205                   // vfmadd231ps   %ymm13,%ymm8,%ymm9
  .byte  196,66,37,184,207                   // vfmadd231ps   %ymm15,%ymm11,%ymm9
  .byte  196,66,101,170,225                  // vfmsub213ps   %ymm9,%ymm3,%ymm12
  .byte  196,65,60,88,204                    // vaddps        %ymm12,%ymm8,%ymm9
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,224                    // vminps        %ymm8,%ymm9,%ymm12
  .byte  196,65,44,89,198                    // vmulps        %ymm14,%ymm10,%ymm8
  .byte  196,66,53,184,197                   // vfmadd231ps   %ymm13,%ymm9,%ymm8
  .byte  196,66,37,184,199                   // vfmadd231ps   %ymm15,%ymm11,%ymm8
  .byte  196,65,52,92,232                    // vsubps        %ymm8,%ymm9,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,60,92,244                    // vsubps        %ymm12,%ymm8,%ymm14
  .byte  196,193,20,94,198                   // vdivps        %ymm14,%ymm13,%ymm0
  .byte  196,65,44,92,248                    // vsubps        %ymm8,%ymm10,%ymm15
  .byte  196,65,60,89,255                    // vmulps        %ymm15,%ymm8,%ymm15
  .byte  196,65,4,94,254                     // vdivps        %ymm14,%ymm15,%ymm15
  .byte  196,65,36,92,232                    // vsubps        %ymm8,%ymm11,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,20,94,238                    // vdivps        %ymm14,%ymm13,%ymm13
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,194,228,2                 // vcmpleps      %ymm12,%ymm14,%ymm12
  .byte  196,65,60,88,255                    // vaddps        %ymm15,%ymm8,%ymm15
  .byte  196,67,5,74,250,192                 // vblendvps     %ymm12,%ymm10,%ymm15,%ymm15
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,60,88,237                    // vaddps        %ymm13,%ymm8,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  196,195,125,74,201,192              // vblendvps     %ymm12,%ymm9,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,202                    // vmaxps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,92,208                   // vsubps        %ymm8,%ymm1,%ymm10
  .byte  196,65,28,92,232                    // vsubps        %ymm8,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,193,1                // vcmpltps      %ymm9,%ymm12,%ymm0
  .byte  196,65,52,92,200                    // vsubps        %ymm8,%ymm9,%ymm9
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,4,92,208                     // vsubps        %ymm8,%ymm15,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,67,5,74,210,0                   // vblendvps     %ymm0,%ymm10,%ymm15,%ymm10
  .byte  196,65,36,92,248                    // vsubps        %ymm8,%ymm11,%ymm15
  .byte  196,65,20,89,239                    // vmulps        %ymm15,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,193,116,95,206                  // vmaxps        %ymm14,%ymm1,%ymm1
  .byte  196,65,44,95,198                    // vmaxps        %ymm14,%ymm10,%ymm8
  .byte  196,65,124,95,206                   // vmaxps        %ymm14,%ymm0,%ymm9
  .byte  196,226,125,24,5,151,67,0,0         // vbroadcastss  0x4397(%rip),%ymm0        # 53f4 <_sk_callback_hsw+0x1d8>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,193                      // vaddps        %ymm1,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,200                  // vaddps        %ymm8,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,209                   // vaddps        %ymm9,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_hsw
.globl _sk_luminosity_hsw
FUNCTION(_sk_luminosity_hsw)
_sk_luminosity_hsw:
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,17,76,36,168                // vmovups       %ymm9,-0x58(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  196,98,125,24,45,48,67,0,0          // vbroadcastss  0x4330(%rip),%ymm13        # 53f8 <_sk_callback_hsw+0x1dc>
  .byte  196,98,125,24,53,43,67,0,0          // vbroadcastss  0x432b(%rip),%ymm14        # 53fc <_sk_callback_hsw+0x1e0>
  .byte  196,65,116,89,230                   // vmulps        %ymm14,%ymm1,%ymm12
  .byte  196,66,109,184,229                  // vfmadd231ps   %ymm13,%ymm2,%ymm12
  .byte  196,98,125,24,61,28,67,0,0          // vbroadcastss  0x431c(%rip),%ymm15        # 5400 <_sk_callback_hsw+0x1e4>
  .byte  196,66,53,184,231                   // vfmadd231ps   %ymm15,%ymm9,%ymm12
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,66,61,184,205                   // vfmadd231ps   %ymm13,%ymm8,%ymm9
  .byte  196,66,37,184,207                   // vfmadd231ps   %ymm15,%ymm11,%ymm9
  .byte  196,66,69,170,225                   // vfmsub213ps   %ymm9,%ymm7,%ymm12
  .byte  196,65,60,88,204                    // vaddps        %ymm12,%ymm8,%ymm9
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,224                    // vminps        %ymm8,%ymm9,%ymm12
  .byte  196,65,44,89,198                    // vmulps        %ymm14,%ymm10,%ymm8
  .byte  196,66,53,184,197                   // vfmadd231ps   %ymm13,%ymm9,%ymm8
  .byte  196,66,37,184,199                   // vfmadd231ps   %ymm15,%ymm11,%ymm8
  .byte  196,65,52,92,232                    // vsubps        %ymm8,%ymm9,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,60,92,244                    // vsubps        %ymm12,%ymm8,%ymm14
  .byte  196,193,20,94,198                   // vdivps        %ymm14,%ymm13,%ymm0
  .byte  196,65,44,92,248                    // vsubps        %ymm8,%ymm10,%ymm15
  .byte  196,65,60,89,255                    // vmulps        %ymm15,%ymm8,%ymm15
  .byte  196,65,4,94,254                     // vdivps        %ymm14,%ymm15,%ymm15
  .byte  196,65,36,92,232                    // vsubps        %ymm8,%ymm11,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,20,94,238                    // vdivps        %ymm14,%ymm13,%ymm13
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,194,228,2                 // vcmpleps      %ymm12,%ymm14,%ymm12
  .byte  196,65,60,88,255                    // vaddps        %ymm15,%ymm8,%ymm15
  .byte  196,67,5,74,250,192                 // vblendvps     %ymm12,%ymm10,%ymm15,%ymm15
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,60,88,237                    // vaddps        %ymm13,%ymm8,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  196,195,125,74,201,192              // vblendvps     %ymm12,%ymm9,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,202                    // vmaxps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,92,208                   // vsubps        %ymm8,%ymm1,%ymm10
  .byte  196,65,28,92,232                    // vsubps        %ymm8,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,193,1                // vcmpltps      %ymm9,%ymm12,%ymm0
  .byte  196,65,52,92,200                    // vsubps        %ymm8,%ymm9,%ymm9
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,4,92,208                     // vsubps        %ymm8,%ymm15,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,67,5,74,210,0                   // vblendvps     %ymm0,%ymm10,%ymm15,%ymm10
  .byte  196,65,36,92,248                    // vsubps        %ymm8,%ymm11,%ymm15
  .byte  196,65,20,89,239                    // vmulps        %ymm15,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,193,116,95,206                  // vmaxps        %ymm14,%ymm1,%ymm1
  .byte  196,65,44,95,198                    // vmaxps        %ymm14,%ymm10,%ymm8
  .byte  196,65,124,95,206                   // vmaxps        %ymm14,%ymm0,%ymm9
  .byte  196,226,125,24,5,254,65,0,0         // vbroadcastss  0x41fe(%rip),%ymm0        # 5404 <_sk_callback_hsw+0x1e8>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,193                      // vaddps        %ymm1,%ymm2,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,200                  // vaddps        %ymm8,%ymm1,%ymm1
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,209                   // vaddps        %ymm9,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_rgba_8888_hsw
.globl _sk_srcover_rgba_8888_hsw
FUNCTION(_sk_srcover_rgba_8888_hsw)
_sk_srcover_rgba_8888_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,180,0,0,0                    // jne           1315 <_sk_srcover_rgba_8888_hsw+0xcd>
  .byte  196,193,124,16,58                   // vmovups       (%r10),%ymm7
  .byte  197,196,84,37,114,69,0,0            // vandps        0x4572(%rip),%ymm7,%ymm4        # 57e0 <_sk_callback_hsw+0x5c4>
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,69,0,45,133,69,0,0          // vpshufb       0x4585(%rip),%ymm7,%ymm5        # 5800 <_sk_callback_hsw+0x5e4>
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  196,226,69,0,53,152,69,0,0          // vpshufb       0x4598(%rip),%ymm7,%ymm6        # 5820 <_sk_callback_hsw+0x604>
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  197,197,114,215,24                  // vpsrld        $0x18,%ymm7,%ymm7
  .byte  197,252,91,255                      // vcvtdq2ps     %ymm7,%ymm7
  .byte  196,98,125,24,5,106,65,0,0          // vbroadcastss  0x416a(%rip),%ymm8        # 5408 <_sk_callback_hsw+0x1ec>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,125,24,13,97,65,0,0          // vbroadcastss  0x4161(%rip),%ymm9        # 540c <_sk_callback_hsw+0x1f0>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,194,93,184,192                  // vfmadd231ps   %ymm8,%ymm4,%ymm0
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,194,85,184,200                  // vfmadd231ps   %ymm8,%ymm5,%ymm1
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,194,77,184,208                  // vfmadd231ps   %ymm8,%ymm6,%ymm2
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  197,125,91,201                      // vcvtps2dq     %ymm1,%ymm9
  .byte  196,193,53,114,241,8                // vpslld        $0x8,%ymm9,%ymm9
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  197,125,91,202                      // vcvtps2dq     %ymm2,%ymm9
  .byte  196,193,53,114,241,16               // vpslld        $0x10,%ymm9,%ymm9
  .byte  197,125,91,211                      // vcvtps2dq     %ymm3,%ymm10
  .byte  196,193,45,114,242,24               // vpslld        $0x18,%ymm10,%ymm10
  .byte  196,65,53,235,202                   // vpor          %ymm10,%ymm9,%ymm9
  .byte  196,65,61,235,193                   // vpor          %ymm9,%ymm8,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,53                              // jne           133e <_sk_srcover_rgba_8888_hsw+0xf6>
  .byte  196,65,124,17,2                     // vmovups       %ymm8,(%r10)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,224                 // vmovq         %rax,%xmm4
  .byte  196,226,125,33,228                  // vpmovsxbd     %xmm4,%ymm4
  .byte  196,194,93,44,58                    // vmaskmovps    (%r10),%ymm4,%ymm7
  .byte  233,40,255,255,255                  // jmpq          1266 <_sk_srcover_rgba_8888_hsw+0x1e>
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,125,33,201                   // vpmovsxbd     %xmm9,%ymm9
  .byte  196,66,53,46,2                      // vmaskmovps    %ymm8,%ymm9,(%r10)
  .byte  235,170                             // jmp           130e <_sk_srcover_rgba_8888_hsw+0xc6>

HIDDEN _sk_clamp_0_hsw
.globl _sk_clamp_0_hsw
FUNCTION(_sk_clamp_0_hsw)
_sk_clamp_0_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_hsw
.globl _sk_clamp_1_hsw
FUNCTION(_sk_clamp_1_hsw)
_sk_clamp_1_hsw:
  .byte  196,98,125,24,5,134,64,0,0          // vbroadcastss  0x4086(%rip),%ymm8        # 5410 <_sk_callback_hsw+0x1f4>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_hsw
.globl _sk_clamp_a_hsw
FUNCTION(_sk_clamp_a_hsw)
_sk_clamp_a_hsw:
  .byte  196,98,125,24,5,105,64,0,0          // vbroadcastss  0x4069(%rip),%ymm8        # 5414 <_sk_callback_hsw+0x1f8>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_dst_hsw
.globl _sk_clamp_a_dst_hsw
FUNCTION(_sk_clamp_a_dst_hsw)
_sk_clamp_a_dst_hsw:
  .byte  196,98,125,24,5,79,64,0,0           // vbroadcastss  0x404f(%rip),%ymm8        # 5418 <_sk_callback_hsw+0x1fc>
  .byte  196,193,68,93,248                   // vminps        %ymm8,%ymm7,%ymm7
  .byte  197,220,93,231                      // vminps        %ymm7,%ymm4,%ymm4
  .byte  197,212,93,239                      // vminps        %ymm7,%ymm5,%ymm5
  .byte  197,204,93,247                      // vminps        %ymm7,%ymm6,%ymm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_hsw
.globl _sk_set_rgb_hsw
FUNCTION(_sk_set_rgb_hsw)
_sk_set_rgb_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_hsw
.globl _sk_swap_rb_hsw
FUNCTION(_sk_swap_rb_hsw)
_sk_swap_rb_hsw:
  .byte  197,124,40,192                      // vmovaps       %ymm0,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,194                      // vmovaps       %ymm2,%ymm0
  .byte  197,124,41,194                      // vmovaps       %ymm8,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_dst_hsw
.globl _sk_swap_rb_dst_hsw
FUNCTION(_sk_swap_rb_dst_hsw)
_sk_swap_rb_dst_hsw:
  .byte  197,124,40,196                      // vmovaps       %ymm4,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,230                      // vmovaps       %ymm6,%ymm4
  .byte  197,124,41,198                      // vmovaps       %ymm8,%ymm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_hsw
.globl _sk_move_src_dst_hsw
FUNCTION(_sk_move_src_dst_hsw)
_sk_move_src_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,242                      // vmovaps       %ymm2,%ymm6
  .byte  197,252,40,251                      // vmovaps       %ymm3,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_hsw
.globl _sk_move_dst_src_hsw
FUNCTION(_sk_move_dst_src_hsw)
_sk_move_dst_src_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_hsw
.globl _sk_premul_hsw
FUNCTION(_sk_premul_hsw)
_sk_premul_hsw:
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_hsw
.globl _sk_unpremul_hsw
FUNCTION(_sk_unpremul_hsw)
_sk_unpremul_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,100,194,200,0                // vcmpeqps      %ymm8,%ymm3,%ymm9
  .byte  196,98,125,24,21,187,63,0,0         // vbroadcastss  0x3fbb(%rip),%ymm10        # 541c <_sk_callback_hsw+0x200>
  .byte  197,44,94,211                       // vdivps        %ymm3,%ymm10,%ymm10
  .byte  196,67,45,74,192,144                // vblendvps     %ymm9,%ymm8,%ymm10,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_hsw
.globl _sk_from_srgb_hsw
FUNCTION(_sk_from_srgb_hsw)
_sk_from_srgb_hsw:
  .byte  196,98,125,24,5,156,63,0,0          // vbroadcastss  0x3f9c(%rip),%ymm8        # 5420 <_sk_callback_hsw+0x204>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  197,124,89,208                      // vmulps        %ymm0,%ymm0,%ymm10
  .byte  196,98,125,24,29,142,63,0,0         // vbroadcastss  0x3f8e(%rip),%ymm11        # 5424 <_sk_callback_hsw+0x208>
  .byte  196,98,125,24,37,137,63,0,0         // vbroadcastss  0x3f89(%rip),%ymm12        # 5428 <_sk_callback_hsw+0x20c>
  .byte  196,65,124,40,236                   // vmovaps       %ymm12,%ymm13
  .byte  196,66,125,168,235                  // vfmadd213ps   %ymm11,%ymm0,%ymm13
  .byte  196,98,125,24,53,122,63,0,0         // vbroadcastss  0x3f7a(%rip),%ymm14        # 542c <_sk_callback_hsw+0x210>
  .byte  196,66,45,168,238                   // vfmadd213ps   %ymm14,%ymm10,%ymm13
  .byte  196,98,125,24,21,112,63,0,0         // vbroadcastss  0x3f70(%rip),%ymm10        # 5430 <_sk_callback_hsw+0x214>
  .byte  196,193,124,194,194,1               // vcmpltps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,193,0                 // vblendvps     %ymm0,%ymm9,%ymm13,%ymm0
  .byte  196,65,116,89,200                   // vmulps        %ymm8,%ymm1,%ymm9
  .byte  197,116,89,233                      // vmulps        %ymm1,%ymm1,%ymm13
  .byte  196,65,124,40,252                   // vmovaps       %ymm12,%ymm15
  .byte  196,66,117,168,251                  // vfmadd213ps   %ymm11,%ymm1,%ymm15
  .byte  196,66,21,168,254                   // vfmadd213ps   %ymm14,%ymm13,%ymm15
  .byte  196,193,116,194,202,1               // vcmpltps      %ymm10,%ymm1,%ymm1
  .byte  196,195,5,74,201,16                 // vblendvps     %ymm1,%ymm9,%ymm15,%ymm1
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  197,108,89,202                      // vmulps        %ymm2,%ymm2,%ymm9
  .byte  196,66,109,168,227                  // vfmadd213ps   %ymm11,%ymm2,%ymm12
  .byte  196,66,53,168,230                   // vfmadd213ps   %ymm14,%ymm9,%ymm12
  .byte  196,193,108,194,210,1               // vcmpltps      %ymm10,%ymm2,%ymm2
  .byte  196,195,29,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm12,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_dst_hsw
.globl _sk_from_srgb_dst_hsw
FUNCTION(_sk_from_srgb_dst_hsw)
_sk_from_srgb_dst_hsw:
  .byte  196,98,125,24,5,24,63,0,0           // vbroadcastss  0x3f18(%rip),%ymm8        # 5434 <_sk_callback_hsw+0x218>
  .byte  196,65,92,89,200                    // vmulps        %ymm8,%ymm4,%ymm9
  .byte  197,92,89,212                       // vmulps        %ymm4,%ymm4,%ymm10
  .byte  196,98,125,24,29,10,63,0,0          // vbroadcastss  0x3f0a(%rip),%ymm11        # 5438 <_sk_callback_hsw+0x21c>
  .byte  196,98,125,24,37,5,63,0,0           // vbroadcastss  0x3f05(%rip),%ymm12        # 543c <_sk_callback_hsw+0x220>
  .byte  196,65,124,40,236                   // vmovaps       %ymm12,%ymm13
  .byte  196,66,93,168,235                   // vfmadd213ps   %ymm11,%ymm4,%ymm13
  .byte  196,98,125,24,53,246,62,0,0         // vbroadcastss  0x3ef6(%rip),%ymm14        # 5440 <_sk_callback_hsw+0x224>
  .byte  196,66,45,168,238                   // vfmadd213ps   %ymm14,%ymm10,%ymm13
  .byte  196,98,125,24,21,236,62,0,0         // vbroadcastss  0x3eec(%rip),%ymm10        # 5444 <_sk_callback_hsw+0x228>
  .byte  196,193,92,194,226,1                // vcmpltps      %ymm10,%ymm4,%ymm4
  .byte  196,195,21,74,225,64                // vblendvps     %ymm4,%ymm9,%ymm13,%ymm4
  .byte  196,65,84,89,200                    // vmulps        %ymm8,%ymm5,%ymm9
  .byte  197,84,89,237                       // vmulps        %ymm5,%ymm5,%ymm13
  .byte  196,65,124,40,252                   // vmovaps       %ymm12,%ymm15
  .byte  196,66,85,168,251                   // vfmadd213ps   %ymm11,%ymm5,%ymm15
  .byte  196,66,21,168,254                   // vfmadd213ps   %ymm14,%ymm13,%ymm15
  .byte  196,193,84,194,234,1                // vcmpltps      %ymm10,%ymm5,%ymm5
  .byte  196,195,5,74,233,80                 // vblendvps     %ymm5,%ymm9,%ymm15,%ymm5
  .byte  196,65,76,89,192                    // vmulps        %ymm8,%ymm6,%ymm8
  .byte  197,76,89,206                       // vmulps        %ymm6,%ymm6,%ymm9
  .byte  196,66,77,168,227                   // vfmadd213ps   %ymm11,%ymm6,%ymm12
  .byte  196,66,53,168,230                   // vfmadd213ps   %ymm14,%ymm9,%ymm12
  .byte  196,193,76,194,242,1                // vcmpltps      %ymm10,%ymm6,%ymm6
  .byte  196,195,29,74,240,96                // vblendvps     %ymm6,%ymm8,%ymm12,%ymm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_hsw
.globl _sk_to_srgb_hsw
FUNCTION(_sk_to_srgb_hsw)
_sk_to_srgb_hsw:
  .byte  197,124,82,200                      // vrsqrtps      %ymm0,%ymm9
  .byte  196,98,125,24,5,144,62,0,0          // vbroadcastss  0x3e90(%rip),%ymm8        # 5448 <_sk_callback_hsw+0x22c>
  .byte  196,65,124,89,208                   // vmulps        %ymm8,%ymm0,%ymm10
  .byte  196,98,125,24,29,134,62,0,0         // vbroadcastss  0x3e86(%rip),%ymm11        # 544c <_sk_callback_hsw+0x230>
  .byte  196,98,125,24,37,129,62,0,0         // vbroadcastss  0x3e81(%rip),%ymm12        # 5450 <_sk_callback_hsw+0x234>
  .byte  196,65,124,40,236                   // vmovaps       %ymm12,%ymm13
  .byte  196,66,53,168,235                   // vfmadd213ps   %ymm11,%ymm9,%ymm13
  .byte  196,98,125,24,53,114,62,0,0         // vbroadcastss  0x3e72(%rip),%ymm14        # 5454 <_sk_callback_hsw+0x238>
  .byte  196,66,53,168,238                   // vfmadd213ps   %ymm14,%ymm9,%ymm13
  .byte  196,98,125,24,61,104,62,0,0         // vbroadcastss  0x3e68(%rip),%ymm15        # 5458 <_sk_callback_hsw+0x23c>
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,20,89,201                    // vmulps        %ymm9,%ymm13,%ymm9
  .byte  196,98,125,24,45,84,62,0,0          // vbroadcastss  0x3e54(%rip),%ymm13        # 545c <_sk_callback_hsw+0x240>
  .byte  196,193,124,194,197,1               // vcmpltps      %ymm13,%ymm0,%ymm0
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  197,124,82,201                      // vrsqrtps      %ymm1,%ymm9
  .byte  196,65,124,40,212                   // vmovaps       %ymm12,%ymm10
  .byte  196,66,53,168,211                   // vfmadd213ps   %ymm11,%ymm9,%ymm10
  .byte  196,66,53,168,214                   // vfmadd213ps   %ymm14,%ymm9,%ymm10
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,44,89,201                    // vmulps        %ymm9,%ymm10,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,193,116,194,205,1               // vcmpltps      %ymm13,%ymm1,%ymm1
  .byte  196,195,53,74,202,16                // vblendvps     %ymm1,%ymm10,%ymm9,%ymm1
  .byte  197,124,82,202                      // vrsqrtps      %ymm2,%ymm9
  .byte  196,66,53,168,227                   // vfmadd213ps   %ymm11,%ymm9,%ymm12
  .byte  196,66,53,168,230                   // vfmadd213ps   %ymm14,%ymm9,%ymm12
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,193,108,194,213,1               // vcmpltps      %ymm13,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_hsw
.globl _sk_rgb_to_hsl_hsw
FUNCTION(_sk_rgb_to_hsl_hsw)
_sk_rgb_to_hsl_hsw:
  .byte  197,124,95,193                      // vmaxps        %ymm1,%ymm0,%ymm8
  .byte  197,60,95,194                       // vmaxps        %ymm2,%ymm8,%ymm8
  .byte  197,124,93,201                      // vminps        %ymm1,%ymm0,%ymm9
  .byte  197,52,93,202                       // vminps        %ymm2,%ymm9,%ymm9
  .byte  196,65,60,92,209                    // vsubps        %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,29,201,61,0,0         // vbroadcastss  0x3dc9(%rip),%ymm11        # 5460 <_sk_callback_hsw+0x244>
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  197,116,92,226                      // vsubps        %ymm2,%ymm1,%ymm12
  .byte  197,116,194,234,1                   // vcmpltps      %ymm2,%ymm1,%ymm13
  .byte  196,98,125,24,53,182,61,0,0         // vbroadcastss  0x3db6(%rip),%ymm14        # 5464 <_sk_callback_hsw+0x248>
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,67,5,74,238,208                 // vblendvps     %ymm13,%ymm14,%ymm15,%ymm13
  .byte  196,66,37,168,229                   // vfmadd213ps   %ymm13,%ymm11,%ymm12
  .byte  197,236,92,208                      // vsubps        %ymm0,%ymm2,%ymm2
  .byte  197,124,92,233                      // vsubps        %ymm1,%ymm0,%ymm13
  .byte  196,98,125,24,53,157,61,0,0         // vbroadcastss  0x3d9d(%rip),%ymm14        # 546c <_sk_callback_hsw+0x250>
  .byte  196,66,37,168,238                   // vfmadd213ps   %ymm14,%ymm11,%ymm13
  .byte  196,98,125,24,53,139,61,0,0         // vbroadcastss  0x3d8b(%rip),%ymm14        # 5468 <_sk_callback_hsw+0x24c>
  .byte  196,194,37,168,214                  // vfmadd213ps   %ymm14,%ymm11,%ymm2
  .byte  197,188,194,201,0                   // vcmpeqps      %ymm1,%ymm8,%ymm1
  .byte  196,227,21,74,202,16                // vblendvps     %ymm1,%ymm2,%ymm13,%ymm1
  .byte  197,188,194,192,0                   // vcmpeqps      %ymm0,%ymm8,%ymm0
  .byte  196,195,117,74,196,0                // vblendvps     %ymm0,%ymm12,%ymm1,%ymm0
  .byte  196,193,60,88,201                   // vaddps        %ymm9,%ymm8,%ymm1
  .byte  196,98,125,24,29,110,61,0,0         // vbroadcastss  0x3d6e(%rip),%ymm11        # 5474 <_sk_callback_hsw+0x258>
  .byte  196,193,116,89,211                  // vmulps        %ymm11,%ymm1,%ymm2
  .byte  197,36,194,218,1                    // vcmpltps      %ymm2,%ymm11,%ymm11
  .byte  196,65,12,92,224                    // vsubps        %ymm8,%ymm14,%ymm12
  .byte  196,65,28,92,225                    // vsubps        %ymm9,%ymm12,%ymm12
  .byte  196,195,117,74,204,176              // vblendvps     %ymm11,%ymm12,%ymm1,%ymm1
  .byte  196,65,60,194,193,0                 // vcmpeqps      %ymm9,%ymm8,%ymm8
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  196,195,125,74,199,128              // vblendvps     %ymm8,%ymm15,%ymm0,%ymm0
  .byte  196,195,117,74,207,128              // vblendvps     %ymm8,%ymm15,%ymm1,%ymm1
  .byte  196,98,125,24,5,49,61,0,0           // vbroadcastss  0x3d31(%rip),%ymm8        # 5470 <_sk_callback_hsw+0x254>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_hsw
.globl _sk_hsl_to_rgb_hsw
FUNCTION(_sk_hsl_to_rgb_hsw)
_sk_hsl_to_rgb_hsw:
  .byte  72,131,236,56                       // sub           $0x38,%rsp
  .byte  197,252,17,60,36                    // vmovups       %ymm7,(%rsp)
  .byte  197,252,17,116,36,224               // vmovups       %ymm6,-0x20(%rsp)
  .byte  197,252,17,108,36,192               // vmovups       %ymm5,-0x40(%rsp)
  .byte  197,252,17,100,36,160               // vmovups       %ymm4,-0x60(%rsp)
  .byte  197,252,17,92,36,128                // vmovups       %ymm3,-0x80(%rsp)
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  196,98,125,24,5,254,60,0,0          // vbroadcastss  0x3cfe(%rip),%ymm8        # 5478 <_sk_callback_hsw+0x25c>
  .byte  197,60,194,202,2                    // vcmpleps      %ymm2,%ymm8,%ymm9
  .byte  197,84,89,210                       // vmulps        %ymm2,%ymm5,%ymm10
  .byte  196,65,84,92,218                    // vsubps        %ymm10,%ymm5,%ymm11
  .byte  196,67,45,74,203,144                // vblendvps     %ymm9,%ymm11,%ymm10,%ymm9
  .byte  197,52,88,210                       // vaddps        %ymm2,%ymm9,%ymm10
  .byte  196,98,125,24,13,225,60,0,0         // vbroadcastss  0x3ce1(%rip),%ymm9        # 547c <_sk_callback_hsw+0x260>
  .byte  196,66,109,170,202                  // vfmsub213ps   %ymm10,%ymm2,%ymm9
  .byte  196,98,125,24,29,215,60,0,0         // vbroadcastss  0x3cd7(%rip),%ymm11        # 5480 <_sk_callback_hsw+0x264>
  .byte  196,65,92,88,219                    // vaddps        %ymm11,%ymm4,%ymm11
  .byte  196,67,125,8,227,1                  // vroundps      $0x1,%ymm11,%ymm12
  .byte  196,65,36,92,252                    // vsubps        %ymm12,%ymm11,%ymm15
  .byte  196,65,44,92,217                    // vsubps        %ymm9,%ymm10,%ymm11
  .byte  196,98,125,24,45,193,60,0,0         // vbroadcastss  0x3cc1(%rip),%ymm13        # 5488 <_sk_callback_hsw+0x26c>
  .byte  196,193,4,89,197                    // vmulps        %ymm13,%ymm15,%ymm0
  .byte  196,98,125,24,53,183,60,0,0         // vbroadcastss  0x3cb7(%rip),%ymm14        # 548c <_sk_callback_hsw+0x270>
  .byte  197,12,92,224                       // vsubps        %ymm0,%ymm14,%ymm12
  .byte  196,66,37,168,225                   // vfmadd213ps   %ymm9,%ymm11,%ymm12
  .byte  196,226,125,24,29,157,60,0,0        // vbroadcastss  0x3c9d(%rip),%ymm3        # 5484 <_sk_callback_hsw+0x268>
  .byte  196,193,100,194,255,2               // vcmpleps      %ymm15,%ymm3,%ymm7
  .byte  196,195,29,74,249,112               // vblendvps     %ymm7,%ymm9,%ymm12,%ymm7
  .byte  196,65,60,194,231,2                 // vcmpleps      %ymm15,%ymm8,%ymm12
  .byte  196,227,45,74,255,192               // vblendvps     %ymm12,%ymm7,%ymm10,%ymm7
  .byte  196,98,125,24,37,136,60,0,0         // vbroadcastss  0x3c88(%rip),%ymm12        # 5490 <_sk_callback_hsw+0x274>
  .byte  196,65,28,194,255,2                 // vcmpleps      %ymm15,%ymm12,%ymm15
  .byte  196,194,37,168,193                  // vfmadd213ps   %ymm9,%ymm11,%ymm0
  .byte  196,99,125,74,255,240               // vblendvps     %ymm15,%ymm7,%ymm0,%ymm15
  .byte  196,227,125,8,196,1                 // vroundps      $0x1,%ymm4,%ymm0
  .byte  197,220,92,192                      // vsubps        %ymm0,%ymm4,%ymm0
  .byte  196,193,124,89,253                  // vmulps        %ymm13,%ymm0,%ymm7
  .byte  197,140,92,207                      // vsubps        %ymm7,%ymm14,%ymm1
  .byte  196,194,37,168,201                  // vfmadd213ps   %ymm9,%ymm11,%ymm1
  .byte  197,228,194,240,2                   // vcmpleps      %ymm0,%ymm3,%ymm6
  .byte  196,195,117,74,201,96               // vblendvps     %ymm6,%ymm9,%ymm1,%ymm1
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,201,96                // vblendvps     %ymm6,%ymm1,%ymm10,%ymm1
  .byte  197,156,194,192,2                   // vcmpleps      %ymm0,%ymm12,%ymm0
  .byte  196,194,37,168,249                  // vfmadd213ps   %ymm9,%ymm11,%ymm7
  .byte  196,227,69,74,201,0                 // vblendvps     %ymm0,%ymm1,%ymm7,%ymm1
  .byte  196,226,125,24,5,52,60,0,0          // vbroadcastss  0x3c34(%rip),%ymm0        # 5494 <_sk_callback_hsw+0x278>
  .byte  197,220,88,192                      // vaddps        %ymm0,%ymm4,%ymm0
  .byte  196,227,125,8,224,1                 // vroundps      $0x1,%ymm0,%ymm4
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  197,228,194,216,2                   // vcmpleps      %ymm0,%ymm3,%ymm3
  .byte  196,193,124,89,229                  // vmulps        %ymm13,%ymm0,%ymm4
  .byte  197,140,92,244                      // vsubps        %ymm4,%ymm14,%ymm6
  .byte  196,194,37,168,241                  // vfmadd213ps   %ymm9,%ymm11,%ymm6
  .byte  196,195,77,74,217,48                // vblendvps     %ymm3,%ymm9,%ymm6,%ymm3
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,219,96                // vblendvps     %ymm6,%ymm3,%ymm10,%ymm3
  .byte  196,98,37,184,204                   // vfmadd231ps   %ymm4,%ymm11,%ymm9
  .byte  197,156,194,192,2                   // vcmpleps      %ymm0,%ymm12,%ymm0
  .byte  196,227,53,74,219,0                 // vblendvps     %ymm0,%ymm3,%ymm9,%ymm3
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,212,194,224,0                   // vcmpeqps      %ymm0,%ymm5,%ymm4
  .byte  196,227,5,74,194,64                 // vblendvps     %ymm4,%ymm2,%ymm15,%ymm0
  .byte  196,227,117,74,202,64               // vblendvps     %ymm4,%ymm2,%ymm1,%ymm1
  .byte  196,227,101,74,210,64               // vblendvps     %ymm4,%ymm2,%ymm3,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,92,36,128                // vmovups       -0x80(%rsp),%ymm3
  .byte  197,252,16,100,36,160               // vmovups       -0x60(%rsp),%ymm4
  .byte  197,252,16,108,36,192               // vmovups       -0x40(%rsp),%ymm5
  .byte  197,252,16,116,36,224               // vmovups       -0x20(%rsp),%ymm6
  .byte  197,252,16,60,36                    // vmovups       (%rsp),%ymm7
  .byte  72,131,196,56                       // add           $0x38,%rsp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_hsw
.globl _sk_scale_1_float_hsw
FUNCTION(_sk_scale_1_float_hsw)
_sk_scale_1_float_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_hsw
.globl _sk_scale_u8_hsw
FUNCTION(_sk_scale_u8_hsw)
_sk_scale_u8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,58                              // jne           1941 <_sk_scale_u8_hsw+0x44>
  .byte  196,66,121,48,4,19                  // vpmovzxbw     (%r11,%rdx,1),%xmm8
  .byte  197,57,219,5,11,65,0,0              // vpand         0x410b(%rip),%xmm8,%xmm8        # 5a20 <_sk_callback_hsw+0x804>
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,112,59,0,0         // vbroadcastss  0x3b70(%rip),%ymm9        # 5498 <_sk_callback_hsw+0x27c>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,183                             // ja            190d <_sk_scale_u8_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,123,0,0,0                 // lea           0x7b(%rip),%r10        # 19dc <_sk_scale_u8_hsw+0xdf>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  235,152                             // jmp           190d <_sk_scale_u8_hsw+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,2                    // vpinsrw       $0x2,%eax,%xmm8,%xmm8
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,121,110,200                     // vmovd         %eax,%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,67,57,2,193,1                   // vpblendd      $0x1,%xmm9,%xmm8,%xmm8
  .byte  233,111,255,255,255                 // jmpq          190d <_sk_scale_u8_hsw+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,6                    // vpinsrw       $0x6,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,57,196,192,5                    // vpinsrw       $0x5,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,57,196,192,4                    // vpinsrw       $0x4,%eax,%xmm8,%xmm8
  .byte  196,65,121,110,12,19                // vmovd         (%r11,%rdx,1),%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,67,49,2,192,12                  // vpblendd      $0xc,%xmm8,%xmm9,%xmm8
  .byte  233,51,255,255,255                  // jmpq          190d <_sk_scale_u8_hsw+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  142,255                             // mov           %edi,%?
  .byte  255                                 // (bad)
  .byte  255,169,255,255,255,153             // ljmp          *-0x66000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  232,255,255,255,221                 // callq         ffffffffde0019ec <_sk_callback_hsw+0xffffffffddffc7d0>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,210                             // callq         *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_1_float_hsw
.globl _sk_lerp_1_float_hsw
FUNCTION(_sk_lerp_1_float_hsw)
_sk_lerp_1_float_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_hsw
.globl _sk_lerp_u8_hsw
FUNCTION(_sk_lerp_u8_hsw)
_sk_lerp_u8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,78                              // jne           1a7f <_sk_lerp_u8_hsw+0x58>
  .byte  196,66,121,48,4,19                  // vpmovzxbw     (%r11,%rdx,1),%xmm8
  .byte  197,57,219,5,241,63,0,0             // vpand         0x3ff1(%rip),%xmm8,%xmm8        # 5a30 <_sk_callback_hsw+0x814>
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,74,58,0,0          // vbroadcastss  0x3a4a(%rip),%ymm9        # 549c <_sk_callback_hsw+0x280>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,163                             // ja            1a37 <_sk_lerp_u8_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,121,0,0,0                 // lea           0x79(%rip),%r10        # 1b18 <_sk_lerp_u8_hsw+0xf1>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  235,132                             // jmp           1a37 <_sk_lerp_u8_hsw+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,2                    // vpinsrw       $0x2,%eax,%xmm8,%xmm8
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,121,110,200                     // vmovd         %eax,%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,67,57,2,193,1                   // vpblendd      $0x1,%xmm9,%xmm8,%xmm8
  .byte  233,91,255,255,255                  // jmpq          1a37 <_sk_lerp_u8_hsw+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,6                    // vpinsrw       $0x6,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,57,196,192,5                    // vpinsrw       $0x5,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,57,196,192,4                    // vpinsrw       $0x4,%eax,%xmm8,%xmm8
  .byte  196,65,121,110,12,19                // vmovd         (%r11,%rdx,1),%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,67,49,2,192,12                  // vpblendd      $0xc,%xmm8,%xmm9,%xmm8
  .byte  233,31,255,255,255                  // jmpq          1a37 <_sk_lerp_u8_hsw+0x10>
  .byte  144                                 // nop
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,171,255,255,255,155             // ljmp          *-0x64000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,196                             // inc           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_565_hsw
.globl _sk_lerp_565_hsw
FUNCTION(_sk_lerp_565_hsw)
_sk_lerp_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,169,0,0,0                    // jne           1beb <_sk_lerp_565_hsw+0xb7>
  .byte  196,65,122,111,4,83                 // vmovdqu       (%r11,%rdx,2),%xmm8
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  196,98,125,88,13,74,57,0,0          // vpbroadcastd  0x394a(%rip),%ymm9        # 54a0 <_sk_callback_hsw+0x284>
  .byte  196,65,61,219,201                   // vpand         %ymm9,%ymm8,%ymm9
  .byte  196,65,124,91,201                   // vcvtdq2ps     %ymm9,%ymm9
  .byte  196,98,125,24,21,59,57,0,0          // vbroadcastss  0x393b(%rip),%ymm10        # 54a4 <_sk_callback_hsw+0x288>
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,88,21,49,57,0,0          // vpbroadcastd  0x3931(%rip),%ymm10        # 54a8 <_sk_callback_hsw+0x28c>
  .byte  196,65,61,219,210                   // vpand         %ymm10,%ymm8,%ymm10
  .byte  196,65,124,91,210                   // vcvtdq2ps     %ymm10,%ymm10
  .byte  196,98,125,24,29,34,57,0,0          // vbroadcastss  0x3922(%rip),%ymm11        # 54ac <_sk_callback_hsw+0x290>
  .byte  196,65,44,89,211                    // vmulps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,88,29,24,57,0,0          // vpbroadcastd  0x3918(%rip),%ymm11        # 54b0 <_sk_callback_hsw+0x294>
  .byte  196,65,61,219,195                   // vpand         %ymm11,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,29,9,57,0,0           // vbroadcastss  0x3909(%rip),%ymm11        # 54b4 <_sk_callback_hsw+0x298>
  .byte  196,65,60,89,195                    // vmulps        %ymm11,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,53,168,196                  // vfmadd213ps   %ymm4,%ymm9,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,45,168,205                  // vfmadd213ps   %ymm5,%ymm10,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,98,101,168,207                  // vfmadd213ps   %ymm7,%ymm3,%ymm9
  .byte  196,98,101,168,215                  // vfmadd213ps   %ymm7,%ymm3,%ymm10
  .byte  196,98,101,168,199                  // vfmadd213ps   %ymm7,%ymm3,%ymm8
  .byte  196,193,44,95,216                   // vmaxps        %ymm8,%ymm10,%ymm3
  .byte  197,180,95,219                      // vmaxps        %ymm3,%ymm9,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,68,255,255,255               // ja            1b48 <_sk_lerp_565_hsw+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,101,0,0,0                 // lea           0x65(%rip),%r10        # 1c74 <_sk_lerp_565_hsw+0x140>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  233,34,255,255,255                  // jmpq          1b48 <_sk_lerp_565_hsw+0x14>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,65,57,196,68,83,4,2             // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,121,110,12,83                // vmovd         (%r11,%rdx,2),%xmm9
  .byte  196,67,57,2,193,1                   // vpblendd      $0x1,%xmm9,%xmm8,%xmm8
  .byte  233,4,255,255,255                   // jmpq          1b48 <_sk_lerp_565_hsw+0x14>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,65,57,196,68,83,12,6            // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,10,5            // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,8,4             // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,122,126,12,83                // vmovq         (%r11,%rdx,2),%xmm9
  .byte  196,67,49,2,192,12                  // vpblendd      $0xc,%xmm8,%xmm9,%xmm8
  .byte  233,214,254,255,255                 // jmpq          1b48 <_sk_lerp_565_hsw+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  164                                 // movsb         %ds:(%rsi),%es:(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  191,255,255,255,178                 // mov           $0xb2ffffff,%edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_tables_hsw
.globl _sk_load_tables_hsw
FUNCTION(_sk_load_tables_hsw)
_sk_load_tables_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,105                             // jne           1d0e <_sk_load_tables_hsw+0x7e>
  .byte  196,193,124,16,26                   // vmovups       (%r10),%ymm3
  .byte  197,228,84,13,142,59,0,0            // vandps        0x3b8e(%rip),%ymm3,%ymm1        # 5840 <_sk_callback_hsw+0x624>
  .byte  196,65,61,118,192                   // vpcmpeqd      %ymm8,%ymm8,%ymm8
  .byte  72,139,72,8                         // mov           0x8(%rax),%rcx
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,226,109,146,4,137               // vgatherdps    %ymm2,(%rcx,%ymm1,4),%ymm0
  .byte  196,226,101,0,21,142,59,0,0         // vpshufb       0x3b8e(%rip),%ymm3,%ymm2        # 5860 <_sk_callback_hsw+0x644>
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,194,53,146,12,146               // vgatherdps    %ymm9,(%r10,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,98,101,0,13,150,59,0,0          // vpshufb       0x3b96(%rip),%ymm3,%ymm9        # 5880 <_sk_callback_hsw+0x664>
  .byte  196,162,61,146,20,136               // vgatherdps    %ymm8,(%rax,%ymm9,4),%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,182,55,0,0          // vbroadcastss  0x37b6(%rip),%ymm8        # 54b8 <_sk_callback_hsw+0x29c>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  73,199,195,255,255,255,255          // mov           $0xffffffffffffffff,%r11
  .byte  73,211,235                          // shr           %cl,%r11
  .byte  196,193,249,110,195                 // vmovq         %r11,%xmm0
  .byte  196,226,125,33,192                  // vpmovsxbd     %xmm0,%ymm0
  .byte  196,194,125,44,26                   // vmaskmovps    (%r10),%ymm0,%ymm3
  .byte  233,115,255,255,255                 // jmpq          1caa <_sk_load_tables_hsw+0x1a>

HIDDEN _sk_load_tables_u16_be_hsw
.globl _sk_load_tables_u16_be_hsw
FUNCTION(_sk_load_tables_u16_be_hsw)
_sk_load_tables_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,201,0,0,0                    // jne           1e16 <_sk_load_tables_u16_be_hsw+0xdf>
  .byte  196,1,121,16,4,81                   // vmovupd       (%r9,%r10,2),%xmm8
  .byte  196,129,121,16,84,81,16             // vmovupd       0x10(%r9,%r10,2),%xmm2
  .byte  196,129,121,16,92,81,32             // vmovupd       0x20(%r9,%r10,2),%xmm3
  .byte  196,1,122,111,76,81,48              // vmovdqu       0x30(%r9,%r10,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,195                      // vpunpcklwd    %xmm3,%xmm1,%xmm0
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,200                     // vpunpcklqdq   %xmm0,%xmm8,%xmm1
  .byte  197,185,109,208                     // vpunpckhqdq   %xmm0,%xmm8,%xmm2
  .byte  197,49,108,195                      // vpunpcklqdq   %xmm3,%xmm9,%xmm8
  .byte  197,121,111,21,162,60,0,0           // vmovdqa       0x3ca2(%rip),%xmm10        # 5a40 <_sk_callback_hsw+0x824>
  .byte  196,193,113,219,194                 // vpand         %xmm10,%xmm1,%xmm0
  .byte  196,226,125,51,200                  // vpmovzxwd     %xmm0,%ymm1
  .byte  196,65,37,118,219                   // vpcmpeqd      %ymm11,%ymm11,%ymm11
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  196,65,29,118,228                   // vpcmpeqd      %ymm12,%ymm12,%ymm12
  .byte  196,194,29,146,4,137                // vgatherdps    %ymm12,(%r9,%ymm1,4),%ymm0
  .byte  196,193,105,219,202                 // vpand         %xmm10,%xmm2,%xmm1
  .byte  196,226,125,51,209                  // vpmovzxwd     %xmm1,%ymm2
  .byte  196,65,29,118,228                   // vpcmpeqd      %ymm12,%ymm12,%ymm12
  .byte  196,194,29,146,12,146               // vgatherdps    %ymm12,(%r10,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,57,219,210                  // vpand         %xmm10,%xmm8,%xmm2
  .byte  196,98,125,51,194                   // vpmovzxwd     %xmm2,%ymm8
  .byte  196,162,37,146,20,128               // vgatherdps    %ymm11,(%rax,%ymm8,4),%ymm2
  .byte  197,177,109,219                     // vpunpckhqdq   %xmm3,%xmm9,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,226,125,51,219                  // vpmovzxwd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,175,54,0,0          // vbroadcastss  0x36af(%rip),%ymm8        # 54bc <_sk_callback_hsw+0x2a0>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,1,123,16,4,81                   // vmovsd        (%r9,%r10,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,85                              // je            1e7c <_sk_load_tables_u16_be_hsw+0x145>
  .byte  196,1,57,22,68,81,8                 // vmovhpd       0x8(%r9,%r10,2),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,72                              // jb            1e7c <_sk_load_tables_u16_be_hsw+0x145>
  .byte  196,129,123,16,84,81,16             // vmovsd        0x10(%r9,%r10,2),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,72                              // je            1e89 <_sk_load_tables_u16_be_hsw+0x152>
  .byte  196,129,105,22,84,81,24             // vmovhpd       0x18(%r9,%r10,2),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,59                              // jb            1e89 <_sk_load_tables_u16_be_hsw+0x152>
  .byte  196,129,123,16,92,81,32             // vmovsd        0x20(%r9,%r10,2),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,9,255,255,255                // je            1d68 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  196,129,97,22,92,81,40              // vmovhpd       0x28(%r9,%r10,2),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,248,254,255,255              // jb            1d68 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  196,1,122,126,76,81,48              // vmovq         0x30(%r9,%r10,2),%xmm9
  .byte  233,236,254,255,255                 // jmpq          1d68 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,223,254,255,255                 // jmpq          1d68 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,214,254,255,255                 // jmpq          1d68 <_sk_load_tables_u16_be_hsw+0x31>

HIDDEN _sk_load_tables_rgb_u16_be_hsw
.globl _sk_load_tables_rgb_u16_be_hsw
FUNCTION(_sk_load_tables_rgb_u16_be_hsw)
_sk_load_tables_rgb_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,82                        // lea           (%rdx,%rdx,2),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,193,0,0,0                    // jne           1f65 <_sk_load_tables_rgb_u16_be_hsw+0xd3>
  .byte  196,129,122,111,4,81                // vmovdqu       (%r9,%r10,2),%xmm0
  .byte  196,129,122,111,84,81,12            // vmovdqu       0xc(%r9,%r10,2),%xmm2
  .byte  196,129,122,111,76,81,24            // vmovdqu       0x18(%r9,%r10,2),%xmm1
  .byte  196,129,122,111,92,81,32            // vmovdqu       0x20(%r9,%r10,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,249,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm0
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,203                     // vpunpckhwd    %xmm3,%xmm1,%xmm1
  .byte  197,185,108,218                     // vpunpcklqdq   %xmm2,%xmm8,%xmm3
  .byte  197,185,109,210                     // vpunpckhqdq   %xmm2,%xmm8,%xmm2
  .byte  197,121,108,193                     // vpunpcklqdq   %xmm1,%xmm0,%xmm8
  .byte  197,121,111,13,66,59,0,0            // vmovdqa       0x3b42(%rip),%xmm9        # 5a50 <_sk_callback_hsw+0x834>
  .byte  196,193,97,219,193                  // vpand         %xmm9,%xmm3,%xmm0
  .byte  196,226,125,51,200                  // vpmovzxwd     %xmm0,%ymm1
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  196,65,45,118,210                   // vpcmpeqd      %ymm10,%ymm10,%ymm10
  .byte  196,194,45,146,4,137                // vgatherdps    %ymm10,(%r9,%ymm1,4),%ymm0
  .byte  196,193,105,219,201                 // vpand         %xmm9,%xmm2,%xmm1
  .byte  196,226,125,51,209                  // vpmovzxwd     %xmm1,%ymm2
  .byte  196,65,45,118,210                   // vpcmpeqd      %ymm10,%ymm10,%ymm10
  .byte  196,194,45,146,12,146               // vgatherdps    %ymm10,(%r10,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,57,219,209                  // vpand         %xmm9,%xmm8,%xmm2
  .byte  196,98,125,51,194                   // vpmovzxwd     %xmm2,%ymm8
  .byte  196,162,101,146,20,128              // vgatherdps    %ymm3,(%rax,%ymm8,4),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,93,53,0,0         // vbroadcastss  0x355d(%rip),%ymm3        # 54c0 <_sk_callback_hsw+0x2a4>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,129,121,110,4,81                // vmovd         (%r9,%r10,2),%xmm0
  .byte  196,129,121,196,68,81,4,2           // vpinsrw       $0x2,0x4(%r9,%r10,2),%xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,5                               // jne           1f7e <_sk_load_tables_rgb_u16_be_hsw+0xec>
  .byte  233,90,255,255,255                  // jmpq          1ed8 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,76,81,6             // vmovd         0x6(%r9,%r10,2),%xmm1
  .byte  196,1,113,196,68,81,10,2            // vpinsrw       $0x2,0xa(%r9,%r10,2),%xmm1,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,26                              // jb            1fad <_sk_load_tables_rgb_u16_be_hsw+0x11b>
  .byte  196,129,121,110,76,81,12            // vmovd         0xc(%r9,%r10,2),%xmm1
  .byte  196,129,113,196,84,81,16,2          // vpinsrw       $0x2,0x10(%r9,%r10,2),%xmm1,%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  117,10                              // jne           1fb2 <_sk_load_tables_rgb_u16_be_hsw+0x120>
  .byte  233,43,255,255,255                  // jmpq          1ed8 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,38,255,255,255                  // jmpq          1ed8 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,76,81,18            // vmovd         0x12(%r9,%r10,2),%xmm1
  .byte  196,1,113,196,76,81,22,2            // vpinsrw       $0x2,0x16(%r9,%r10,2),%xmm1,%xmm9
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,26                              // jb            1fe1 <_sk_load_tables_rgb_u16_be_hsw+0x14f>
  .byte  196,129,121,110,76,81,24            // vmovd         0x18(%r9,%r10,2),%xmm1
  .byte  196,129,113,196,76,81,28,2          // vpinsrw       $0x2,0x1c(%r9,%r10,2),%xmm1,%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  117,10                              // jne           1fe6 <_sk_load_tables_rgb_u16_be_hsw+0x154>
  .byte  233,247,254,255,255                 // jmpq          1ed8 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,242,254,255,255                 // jmpq          1ed8 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,92,81,30            // vmovd         0x1e(%r9,%r10,2),%xmm3
  .byte  196,1,97,196,92,81,34,2             // vpinsrw       $0x2,0x22(%r9,%r10,2),%xmm3,%xmm11
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,20                              // jb            200f <_sk_load_tables_rgb_u16_be_hsw+0x17d>
  .byte  196,129,121,110,92,81,36            // vmovd         0x24(%r9,%r10,2),%xmm3
  .byte  196,129,97,196,92,81,40,2           // vpinsrw       $0x2,0x28(%r9,%r10,2),%xmm3,%xmm3
  .byte  233,201,254,255,255                 // jmpq          1ed8 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,196,254,255,255                 // jmpq          1ed8 <_sk_load_tables_rgb_u16_be_hsw+0x46>

HIDDEN _sk_byte_tables_hsw
.globl _sk_byte_tables_hsw
FUNCTION(_sk_byte_tables_hsw)
_sk_byte_tables_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,165,52,0,0          // vbroadcastss  0x34a5(%rip),%ymm8        # 54c4 <_sk_callback_hsw+0x2a8>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,125,91,200                      // vcvtps2dq     %ymm0,%ymm9
  .byte  196,65,249,126,201                  // vmovq         %xmm9,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,131,121,32,4,19,0               // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm0
  .byte  196,67,249,22,202,1                 // vpextrq       $0x1,%xmm9,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,121,32,20,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm0,%xmm10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,99,125,57,200,1                 // vextracti128  $0x1,%ymm9,%xmm0
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,67,41,32,201,2                  // vpinsrb       $0x2,%r9d,%xmm10,%xmm9
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,3                  // vpinsrb       $0x3,%r10d,%xmm9,%xmm9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,4                  // vpinsrb       $0x4,%r10d,%xmm9,%xmm9
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,49,32,193,5                 // vpinsrb       $0x5,%r9d,%xmm9,%xmm0
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,121,32,193,6                // vpinsrb       $0x6,%r9d,%xmm0,%xmm0
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,121,32,202,7                 // vpinsrb       $0x7,%r10d,%xmm0,%xmm9
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,201,1                // vextracti128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,121,32,195,3                // vpinsrb       $0x3,%r11d,%xmm0,%xmm0
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,121,32,195,4                // vpinsrb       $0x4,%r11d,%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,5                // vpinsrb       $0x5,%r10d,%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,6                // vpinsrb       $0x6,%r10d,%xmm0,%xmm0
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,195,121,32,201,7                // vpinsrb       $0x7,%r9d,%xmm0,%xmm1
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,193,108,89,192                  // vmulps        %ymm8,%ymm2,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,20,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,20,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm2
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,105,32,210,2                // vpinsrb       $0x2,%r10d,%xmm2,%xmm2
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,105,32,211,3                // vpinsrb       $0x3,%r11d,%xmm2,%xmm2
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,105,32,211,4                // vpinsrb       $0x4,%r11d,%xmm2,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,105,32,194,5                // vpinsrb       $0x5,%r10d,%xmm2,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,6                // vpinsrb       $0x6,%r10d,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,195,121,32,209,7                // vpinsrb       $0x7,%r9d,%xmm0,%xmm2
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,193,100,89,192                  // vmulps        %ymm8,%ymm3,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,28,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm3
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,97,32,28,10,1               // vpinsrb       $0x1,(%r10,%r9,1),%xmm3,%xmm3
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  196,195,97,32,217,2                 // vpinsrb       $0x2,%r9d,%xmm3,%xmm3
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,97,32,216,3                 // vpinsrb       $0x3,%eax,%xmm3,%xmm3
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,97,32,216,4                 // vpinsrb       $0x4,%eax,%xmm3,%xmm3
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  67,15,182,4,10                      // movzbl        (%r10,%r9,1),%eax
  .byte  196,227,97,32,192,5                 // vpinsrb       $0x5,%eax,%xmm3,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,121,32,216,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm3
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,26                      // movzbl        (%r10,%r11,1),%eax
  .byte  196,194,125,49,193                  // vpmovzxbd     %xmm9,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,74,50,0,0           // vbroadcastss  0x324a(%rip),%ymm8        # 54c8 <_sk_callback_hsw+0x2ac>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,125,49,201                  // vpmovzxbd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,125,49,210                  // vpmovzxbd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,227,97,32,216,7                 // vpinsrb       $0x7,%eax,%xmm3,%xmm3
  .byte  196,226,125,49,219                  // vpmovzxbd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_hsw
.globl _sk_byte_tables_rgb_hsw
FUNCTION(_sk_byte_tables_rgb_hsw)
_sk_byte_tables_rgb_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,72,24                        // mov           0x18(%rax),%r9d
  .byte  65,255,201                          // dec           %r9d
  .byte  196,65,121,110,193                  // vmovd         %r9d,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,200                      // vcvtps2dq     %ymm0,%ymm9
  .byte  196,65,249,126,201                  // vmovq         %xmm9,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,131,121,32,4,19,0               // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm0
  .byte  196,67,249,22,202,1                 // vpextrq       $0x1,%xmm9,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,121,32,20,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm0,%xmm10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,99,125,57,200,1                 // vextracti128  $0x1,%ymm9,%xmm0
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,67,41,32,201,2                  // vpinsrb       $0x2,%r9d,%xmm10,%xmm9
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,3                  // vpinsrb       $0x3,%r10d,%xmm9,%xmm9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,4                  // vpinsrb       $0x4,%r10d,%xmm9,%xmm9
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,49,32,193,5                 // vpinsrb       $0x5,%r9d,%xmm9,%xmm0
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,121,32,193,6                // vpinsrb       $0x6,%r9d,%xmm0,%xmm0
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,121,32,202,7                 // vpinsrb       $0x7,%r10d,%xmm0,%xmm9
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,201,1                // vextracti128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,121,32,195,3                // vpinsrb       $0x3,%r11d,%xmm0,%xmm0
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,121,32,195,4                // vpinsrb       $0x4,%r11d,%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,5                // vpinsrb       $0x5,%r10d,%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,6                // vpinsrb       $0x6,%r10d,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,195,121,32,201,7                // vpinsrb       $0x7,%r9d,%xmm0,%xmm1
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  197,188,89,194                      // vmulps        %ymm2,%ymm8,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,20,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm2
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,105,32,20,10,1              // vpinsrb       $0x1,(%r10,%r9,1),%xmm2,%xmm2
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  196,195,105,32,209,2                // vpinsrb       $0x2,%r9d,%xmm2,%xmm2
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,105,32,208,3                // vpinsrb       $0x3,%eax,%xmm2,%xmm2
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,105,32,208,4                // vpinsrb       $0x4,%eax,%xmm2,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  67,15,182,4,10                      // movzbl        (%r10,%r9,1),%eax
  .byte  196,227,105,32,192,5                // vpinsrb       $0x5,%eax,%xmm2,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,121,32,208,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm2
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,26                      // movzbl        (%r10,%r11,1),%eax
  .byte  196,194,125,49,193                  // vpmovzxbd     %xmm9,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,54,48,0,0           // vbroadcastss  0x3036(%rip),%ymm8        # 54cc <_sk_callback_hsw+0x2b0>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,125,49,201                  // vpmovzxbd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,227,105,32,208,7                // vpinsrb       $0x7,%eax,%xmm2,%xmm2
  .byte  196,226,125,49,210                  // vpmovzxbd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_hsw
.globl _sk_table_r_hsw
FUNCTION(_sk_table_r_hsw)
_sk_table_r_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,4,129                // vgatherdps    %ymm9,(%r9,%ymm8,4),%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_hsw
.globl _sk_table_g_hsw
FUNCTION(_sk_table_g_hsw)
_sk_table_g_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,125,91,193                      // vcvtps2dq     %ymm1,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,12,129               // vgatherdps    %ymm9,(%r9,%ymm8,4),%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_hsw
.globl _sk_table_b_hsw
FUNCTION(_sk_table_b_hsw)
_sk_table_b_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,125,91,194                      // vcvtps2dq     %ymm2,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,20,129               // vgatherdps    %ymm9,(%r9,%ymm8,4),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_hsw
.globl _sk_table_a_hsw
FUNCTION(_sk_table_a_hsw)
_sk_table_a_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,125,91,195                      // vcvtps2dq     %ymm3,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,28,129               // vgatherdps    %ymm9,(%r9,%ymm8,4),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_hsw
.globl _sk_parametric_r_hsw
FUNCTION(_sk_parametric_r_hsw)
_sk_parametric_r_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,124,194,192,2                // vcmpleps      %ymm8,%ymm0,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,125,168,202                  // vfmadd213ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,125,168,211                  // vfmadd213ps   %ymm11,%ymm0,%ymm10
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,16,47,0,0          // vbroadcastss  0x2f10(%rip),%ymm12        # 54d0 <_sk_callback_hsw+0x2b4>
  .byte  196,98,125,24,45,11,47,0,0          // vbroadcastss  0x2f0b(%rip),%ymm13        # 54d4 <_sk_callback_hsw+0x2b8>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,1,47,0,0           // vbroadcastss  0x2f01(%rip),%ymm13        # 54d8 <_sk_callback_hsw+0x2bc>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,247,46,0,0         // vbroadcastss  0x2ef7(%rip),%ymm13        # 54dc <_sk_callback_hsw+0x2c0>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,237,46,0,0         // vbroadcastss  0x2eed(%rip),%ymm11        # 54e0 <_sk_callback_hsw+0x2c4>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,227,46,0,0         // vbroadcastss  0x2ee3(%rip),%ymm12        # 54e4 <_sk_callback_hsw+0x2c8>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,217,46,0,0         // vbroadcastss  0x2ed9(%rip),%ymm12        # 54e8 <_sk_callback_hsw+0x2cc>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  196,99,125,8,208,1                  // vroundps      $0x1,%ymm0,%ymm10
  .byte  196,65,124,92,210                   // vsubps        %ymm10,%ymm0,%ymm10
  .byte  196,98,125,24,29,186,46,0,0         // vbroadcastss  0x2eba(%rip),%ymm11        # 54ec <_sk_callback_hsw+0x2d0>
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,176,46,0,0         // vbroadcastss  0x2eb0(%rip),%ymm11        # 54f0 <_sk_callback_hsw+0x2d4>
  .byte  196,98,45,172,216                   // vfnmadd213ps  %ymm0,%ymm10,%ymm11
  .byte  196,226,125,24,5,166,46,0,0         // vbroadcastss  0x2ea6(%rip),%ymm0        # 54f4 <_sk_callback_hsw+0x2d8>
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  196,98,125,24,21,156,46,0,0         // vbroadcastss  0x2e9c(%rip),%ymm10        # 54f8 <_sk_callback_hsw+0x2dc>
  .byte  197,172,94,192                      // vdivps        %ymm0,%ymm10,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  196,98,125,24,21,143,46,0,0         // vbroadcastss  0x2e8f(%rip),%ymm10        # 54fc <_sk_callback_hsw+0x2e0>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,195,125,74,193,128              // vblendvps     %ymm8,%ymm9,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,102,46,0,0          // vbroadcastss  0x2e66(%rip),%ymm8        # 5500 <_sk_callback_hsw+0x2e4>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_hsw
.globl _sk_parametric_g_hsw
FUNCTION(_sk_parametric_g_hsw)
_sk_parametric_g_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,116,194,192,2                // vcmpleps      %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,117,168,202                  // vfmadd213ps   %ymm10,%ymm1,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,117,168,211                  // vfmadd213ps   %ymm11,%ymm1,%ymm10
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,30,46,0,0          // vbroadcastss  0x2e1e(%rip),%ymm12        # 5504 <_sk_callback_hsw+0x2e8>
  .byte  196,98,125,24,45,25,46,0,0          // vbroadcastss  0x2e19(%rip),%ymm13        # 5508 <_sk_callback_hsw+0x2ec>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,15,46,0,0          // vbroadcastss  0x2e0f(%rip),%ymm13        # 550c <_sk_callback_hsw+0x2f0>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,5,46,0,0           // vbroadcastss  0x2e05(%rip),%ymm13        # 5510 <_sk_callback_hsw+0x2f4>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,251,45,0,0         // vbroadcastss  0x2dfb(%rip),%ymm11        # 5514 <_sk_callback_hsw+0x2f8>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,241,45,0,0         // vbroadcastss  0x2df1(%rip),%ymm12        # 5518 <_sk_callback_hsw+0x2fc>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,231,45,0,0         // vbroadcastss  0x2de7(%rip),%ymm12        # 551c <_sk_callback_hsw+0x300>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  196,99,125,8,209,1                  // vroundps      $0x1,%ymm1,%ymm10
  .byte  196,65,116,92,210                   // vsubps        %ymm10,%ymm1,%ymm10
  .byte  196,98,125,24,29,200,45,0,0         // vbroadcastss  0x2dc8(%rip),%ymm11        # 5520 <_sk_callback_hsw+0x304>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,190,45,0,0         // vbroadcastss  0x2dbe(%rip),%ymm11        # 5524 <_sk_callback_hsw+0x308>
  .byte  196,98,45,172,217                   // vfnmadd213ps  %ymm1,%ymm10,%ymm11
  .byte  196,226,125,24,13,180,45,0,0        // vbroadcastss  0x2db4(%rip),%ymm1        # 5528 <_sk_callback_hsw+0x30c>
  .byte  196,193,116,92,202                  // vsubps        %ymm10,%ymm1,%ymm1
  .byte  196,98,125,24,21,170,45,0,0         // vbroadcastss  0x2daa(%rip),%ymm10        # 552c <_sk_callback_hsw+0x310>
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,98,125,24,21,157,45,0,0         // vbroadcastss  0x2d9d(%rip),%ymm10        # 5530 <_sk_callback_hsw+0x314>
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,195,117,74,201,128              // vblendvps     %ymm8,%ymm9,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,5,116,45,0,0          // vbroadcastss  0x2d74(%rip),%ymm8        # 5534 <_sk_callback_hsw+0x318>
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_hsw
.globl _sk_parametric_b_hsw
FUNCTION(_sk_parametric_b_hsw)
_sk_parametric_b_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,108,194,192,2                // vcmpleps      %ymm8,%ymm2,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,109,168,202                  // vfmadd213ps   %ymm10,%ymm2,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,109,168,211                  // vfmadd213ps   %ymm11,%ymm2,%ymm10
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,44,45,0,0          // vbroadcastss  0x2d2c(%rip),%ymm12        # 5538 <_sk_callback_hsw+0x31c>
  .byte  196,98,125,24,45,39,45,0,0          // vbroadcastss  0x2d27(%rip),%ymm13        # 553c <_sk_callback_hsw+0x320>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,29,45,0,0          // vbroadcastss  0x2d1d(%rip),%ymm13        # 5540 <_sk_callback_hsw+0x324>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,19,45,0,0          // vbroadcastss  0x2d13(%rip),%ymm13        # 5544 <_sk_callback_hsw+0x328>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,9,45,0,0           // vbroadcastss  0x2d09(%rip),%ymm11        # 5548 <_sk_callback_hsw+0x32c>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,255,44,0,0         // vbroadcastss  0x2cff(%rip),%ymm12        # 554c <_sk_callback_hsw+0x330>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,245,44,0,0         // vbroadcastss  0x2cf5(%rip),%ymm12        # 5550 <_sk_callback_hsw+0x334>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  196,99,125,8,210,1                  // vroundps      $0x1,%ymm2,%ymm10
  .byte  196,65,108,92,210                   // vsubps        %ymm10,%ymm2,%ymm10
  .byte  196,98,125,24,29,214,44,0,0         // vbroadcastss  0x2cd6(%rip),%ymm11        # 5554 <_sk_callback_hsw+0x338>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,204,44,0,0         // vbroadcastss  0x2ccc(%rip),%ymm11        # 5558 <_sk_callback_hsw+0x33c>
  .byte  196,98,45,172,218                   // vfnmadd213ps  %ymm2,%ymm10,%ymm11
  .byte  196,226,125,24,21,194,44,0,0        // vbroadcastss  0x2cc2(%rip),%ymm2        # 555c <_sk_callback_hsw+0x340>
  .byte  196,193,108,92,210                  // vsubps        %ymm10,%ymm2,%ymm2
  .byte  196,98,125,24,21,184,44,0,0         // vbroadcastss  0x2cb8(%rip),%ymm10        # 5560 <_sk_callback_hsw+0x344>
  .byte  197,172,94,210                      // vdivps        %ymm2,%ymm10,%ymm2
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,98,125,24,21,171,44,0,0         // vbroadcastss  0x2cab(%rip),%ymm10        # 5564 <_sk_callback_hsw+0x348>
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,195,109,74,209,128              // vblendvps     %ymm8,%ymm9,%ymm2,%ymm2
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,130,44,0,0          // vbroadcastss  0x2c82(%rip),%ymm8        # 5568 <_sk_callback_hsw+0x34c>
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_hsw
.globl _sk_parametric_a_hsw
FUNCTION(_sk_parametric_a_hsw)
_sk_parametric_a_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,100,194,192,2                // vcmpleps      %ymm8,%ymm3,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,101,168,202                  // vfmadd213ps   %ymm10,%ymm3,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,101,168,211                  // vfmadd213ps   %ymm11,%ymm3,%ymm10
  .byte  196,226,125,24,24                   // vbroadcastss  (%rax),%ymm3
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,58,44,0,0          // vbroadcastss  0x2c3a(%rip),%ymm12        # 556c <_sk_callback_hsw+0x350>
  .byte  196,98,125,24,45,53,44,0,0          // vbroadcastss  0x2c35(%rip),%ymm13        # 5570 <_sk_callback_hsw+0x354>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,43,44,0,0          // vbroadcastss  0x2c2b(%rip),%ymm13        # 5574 <_sk_callback_hsw+0x358>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,33,44,0,0          // vbroadcastss  0x2c21(%rip),%ymm13        # 5578 <_sk_callback_hsw+0x35c>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,23,44,0,0          // vbroadcastss  0x2c17(%rip),%ymm11        # 557c <_sk_callback_hsw+0x360>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,13,44,0,0          // vbroadcastss  0x2c0d(%rip),%ymm12        # 5580 <_sk_callback_hsw+0x364>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,3,44,0,0           // vbroadcastss  0x2c03(%rip),%ymm12        # 5584 <_sk_callback_hsw+0x368>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  196,99,125,8,211,1                  // vroundps      $0x1,%ymm3,%ymm10
  .byte  196,65,100,92,210                   // vsubps        %ymm10,%ymm3,%ymm10
  .byte  196,98,125,24,29,228,43,0,0         // vbroadcastss  0x2be4(%rip),%ymm11        # 5588 <_sk_callback_hsw+0x36c>
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,218,43,0,0         // vbroadcastss  0x2bda(%rip),%ymm11        # 558c <_sk_callback_hsw+0x370>
  .byte  196,98,45,172,219                   // vfnmadd213ps  %ymm3,%ymm10,%ymm11
  .byte  196,226,125,24,29,208,43,0,0        // vbroadcastss  0x2bd0(%rip),%ymm3        # 5590 <_sk_callback_hsw+0x374>
  .byte  196,193,100,92,218                  // vsubps        %ymm10,%ymm3,%ymm3
  .byte  196,98,125,24,21,198,43,0,0         // vbroadcastss  0x2bc6(%rip),%ymm10        # 5594 <_sk_callback_hsw+0x378>
  .byte  197,172,94,219                      // vdivps        %ymm3,%ymm10,%ymm3
  .byte  197,164,88,219                      // vaddps        %ymm3,%ymm11,%ymm3
  .byte  196,98,125,24,21,185,43,0,0         // vbroadcastss  0x2bb9(%rip),%ymm10        # 5598 <_sk_callback_hsw+0x37c>
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,195,101,74,217,128              // vblendvps     %ymm8,%ymm9,%ymm3,%ymm3
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  196,98,125,24,5,144,43,0,0          // vbroadcastss  0x2b90(%rip),%ymm8        # 559c <_sk_callback_hsw+0x380>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_hsw
.globl _sk_lab_to_xyz_hsw
FUNCTION(_sk_lab_to_xyz_hsw)
_sk_lab_to_xyz_hsw:
  .byte  196,98,125,24,5,130,43,0,0          // vbroadcastss  0x2b82(%rip),%ymm8        # 55a0 <_sk_callback_hsw+0x384>
  .byte  196,98,125,24,13,125,43,0,0         // vbroadcastss  0x2b7d(%rip),%ymm9        # 55a4 <_sk_callback_hsw+0x388>
  .byte  196,98,125,24,21,120,43,0,0         // vbroadcastss  0x2b78(%rip),%ymm10        # 55a8 <_sk_callback_hsw+0x38c>
  .byte  196,194,53,168,202                  // vfmadd213ps   %ymm10,%ymm9,%ymm1
  .byte  196,194,53,168,210                  // vfmadd213ps   %ymm10,%ymm9,%ymm2
  .byte  196,98,125,24,13,105,43,0,0         // vbroadcastss  0x2b69(%rip),%ymm9        # 55ac <_sk_callback_hsw+0x390>
  .byte  196,66,125,184,200                  // vfmadd231ps   %ymm8,%ymm0,%ymm9
  .byte  196,226,125,24,5,95,43,0,0          // vbroadcastss  0x2b5f(%rip),%ymm0        # 55b0 <_sk_callback_hsw+0x394>
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,98,125,24,5,86,43,0,0           // vbroadcastss  0x2b56(%rip),%ymm8        # 55b4 <_sk_callback_hsw+0x398>
  .byte  196,98,117,168,192                  // vfmadd213ps   %ymm0,%ymm1,%ymm8
  .byte  196,98,125,24,13,76,43,0,0          // vbroadcastss  0x2b4c(%rip),%ymm9        # 55b8 <_sk_callback_hsw+0x39c>
  .byte  196,98,109,172,200                  // vfnmadd213ps  %ymm0,%ymm2,%ymm9
  .byte  196,193,60,89,200                   // vmulps        %ymm8,%ymm8,%ymm1
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  196,226,125,24,21,57,43,0,0         // vbroadcastss  0x2b39(%rip),%ymm2        # 55bc <_sk_callback_hsw+0x3a0>
  .byte  197,108,194,209,1                   // vcmpltps      %ymm1,%ymm2,%ymm10
  .byte  196,98,125,24,29,47,43,0,0          // vbroadcastss  0x2b2f(%rip),%ymm11        # 55c0 <_sk_callback_hsw+0x3a4>
  .byte  196,65,60,88,195                    // vaddps        %ymm11,%ymm8,%ymm8
  .byte  196,98,125,24,37,37,43,0,0          // vbroadcastss  0x2b25(%rip),%ymm12        # 55c4 <_sk_callback_hsw+0x3a8>
  .byte  196,65,60,89,196                    // vmulps        %ymm12,%ymm8,%ymm8
  .byte  196,99,61,74,193,160                // vblendvps     %ymm10,%ymm1,%ymm8,%ymm8
  .byte  197,252,89,200                      // vmulps        %ymm0,%ymm0,%ymm1
  .byte  197,252,89,201                      // vmulps        %ymm1,%ymm0,%ymm1
  .byte  197,108,194,209,1                   // vcmpltps      %ymm1,%ymm2,%ymm10
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,193,124,89,196                  // vmulps        %ymm12,%ymm0,%ymm0
  .byte  196,227,125,74,201,160              // vblendvps     %ymm10,%ymm1,%ymm0,%ymm1
  .byte  196,193,52,89,193                   // vmulps        %ymm9,%ymm9,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,236,194,208,1                   // vcmpltps      %ymm0,%ymm2,%ymm2
  .byte  196,65,52,88,203                    // vaddps        %ymm11,%ymm9,%ymm9
  .byte  196,65,52,89,204                    // vmulps        %ymm12,%ymm9,%ymm9
  .byte  196,227,53,74,208,32                // vblendvps     %ymm2,%ymm0,%ymm9,%ymm2
  .byte  196,226,125,24,5,218,42,0,0         // vbroadcastss  0x2ada(%rip),%ymm0        # 55c8 <_sk_callback_hsw+0x3ac>
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,209,42,0,0          // vbroadcastss  0x2ad1(%rip),%ymm8        # 55cc <_sk_callback_hsw+0x3b0>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_hsw
.globl _sk_load_a8_hsw
FUNCTION(_sk_load_a8_hsw)
_sk_load_a8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,52                              // jne           2b42 <_sk_load_a8_hsw+0x3e>
  .byte  196,194,121,48,4,19                 // vpmovzxbw     (%r11,%rdx,1),%xmm0
  .byte  197,249,219,5,68,47,0,0             // vpand         0x2f44(%rip),%xmm0,%xmm0        # 5a60 <_sk_callback_hsw+0x844>
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,162,42,0,0        // vbroadcastss  0x2aa2(%rip),%ymm1        # 55d0 <_sk_callback_hsw+0x3b4>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,190                             // ja            2b14 <_sk_load_a8_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,119,0,0,0                 // lea           0x77(%rip),%r10        # 2bd8 <_sk_load_a8_hsw+0xd4>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  235,159                             // jmp           2b14 <_sk_load_a8_hsw+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,2                   // vpinsrw       $0x2,%eax,%xmm0,%xmm0
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,226,121,48,201                  // vpmovzxbw     %xmm1,%xmm1
  .byte  196,227,121,2,193,1                 // vpblendd      $0x1,%xmm1,%xmm0,%xmm0
  .byte  233,119,255,255,255                 // jmpq          2b14 <_sk_load_a8_hsw+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  196,193,121,110,12,19               // vmovd         (%r11,%rdx,1),%xmm1
  .byte  196,226,121,48,201                  // vpmovzxbw     %xmm1,%xmm1
  .byte  196,227,113,2,192,12                // vpblendd      $0xc,%xmm0,%xmm1,%xmm0
  .byte  233,60,255,255,255                  // jmpq          2b14 <_sk_load_a8_hsw+0x10>
  .byte  146                                 // xchg          %eax,%edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,172,255,255,255,157,255         // ljmp          *-0x620001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_a8_dst_hsw
.globl _sk_load_a8_dst_hsw
FUNCTION(_sk_load_a8_dst_hsw)
_sk_load_a8_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,52                              // jne           2c32 <_sk_load_a8_dst_hsw+0x3e>
  .byte  196,194,121,48,36,19                // vpmovzxbw     (%r11,%rdx,1),%xmm4
  .byte  197,217,219,37,100,46,0,0           // vpand         0x2e64(%rip),%xmm4,%xmm4        # 5a70 <_sk_callback_hsw+0x854>
  .byte  196,226,125,51,228                  // vpmovzxwd     %xmm4,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,125,24,45,182,41,0,0        // vbroadcastss  0x29b6(%rip),%ymm5        # 55d4 <_sk_callback_hsw+0x3b8>
  .byte  197,220,89,253                      // vmulps        %ymm5,%ymm4,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,190                             // ja            2c04 <_sk_load_a8_dst_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,119,0,0,0                 // lea           0x77(%rip),%r10        # 2cc8 <_sk_load_a8_dst_hsw+0xd4>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  235,159                             // jmp           2c04 <_sk_load_a8_dst_hsw+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,217,196,224,2                   // vpinsrw       $0x2,%eax,%xmm4,%xmm4
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,232                     // vmovd         %eax,%xmm5
  .byte  196,226,121,48,237                  // vpmovzxbw     %xmm5,%xmm5
  .byte  196,227,89,2,229,1                  // vpblendd      $0x1,%xmm5,%xmm4,%xmm4
  .byte  233,119,255,255,255                 // jmpq          2c04 <_sk_load_a8_dst_hsw+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,217,196,224,6                   // vpinsrw       $0x6,%eax,%xmm4,%xmm4
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,217,196,224,5                   // vpinsrw       $0x5,%eax,%xmm4,%xmm4
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,217,196,224,4                   // vpinsrw       $0x4,%eax,%xmm4,%xmm4
  .byte  196,193,121,110,44,19               // vmovd         (%r11,%rdx,1),%xmm5
  .byte  196,226,121,48,237                  // vpmovzxbw     %xmm5,%xmm5
  .byte  196,227,81,2,228,12                 // vpblendd      $0xc,%xmm4,%xmm5,%xmm4
  .byte  233,60,255,255,255                  // jmpq          2c04 <_sk_load_a8_dst_hsw+0x10>
  .byte  146                                 // xchg          %eax,%edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,172,255,255,255,157,255         // ljmp          *-0x620001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_a8_hsw
.globl _sk_gather_a8_hsw
FUNCTION(_sk_gather_a8_hsw)
_sk_gather_a8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,12,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm1
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,113,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm1,%xmm1
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,113,32,202,2                // vpinsrb       $0x2,%r10d,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,4                // vpinsrb       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,182,4,17                      // movzbl        (%r9,%r10,1),%eax
  .byte  196,227,113,32,192,5                // vpinsrb       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,121,32,192,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,227,121,32,192,7                // vpinsrb       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,62,40,0,0         // vbroadcastss  0x283e(%rip),%ymm1        # 55d8 <_sk_callback_hsw+0x3bc>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,237,239,210                     // vpxor         %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_hsw
.globl _sk_store_a8_hsw
FUNCTION(_sk_store_a8_hsw)
_sk_store_a8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,32,40,0,0           // vbroadcastss  0x2820(%rip),%ymm8        # 55dc <_sk_callback_hsw+0x3c0>
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  196,65,57,103,192                   // vpackuswb     %xmm8,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           2de5 <_sk_store_a8_hsw+0x37>
  .byte  196,65,123,17,4,19                  // vmovsd        %xmm8,(%r11,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            2de1 <_sk_store_a8_hsw+0x33>
  .byte  196,66,121,48,192                   // vpmovzxbw     %xmm8,%xmm8
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,87,0,0,0                  // lea           0x57(%rip),%r10        # 2e5c <_sk_store_a8_hsw+0xae>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,20,4,19,0                // vpextrb       $0x0,%xmm8,(%r11,%rdx,1)
  .byte  235,202                             // jmp           2de1 <_sk_store_a8_hsw+0x33>
  .byte  196,67,121,20,68,19,2,4             // vpextrb       $0x4,%xmm8,0x2(%r11,%rdx,1)
  .byte  196,98,57,0,5,88,44,0,0             // vpshufb       0x2c58(%rip),%xmm8,%xmm8        # 5a80 <_sk_callback_hsw+0x864>
  .byte  196,67,121,21,4,19,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,1)
  .byte  235,176                             // jmp           2de1 <_sk_store_a8_hsw+0x33>
  .byte  196,67,121,20,68,19,6,12            // vpextrb       $0xc,%xmm8,0x6(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,5,10            // vpextrb       $0xa,%xmm8,0x5(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,4,8             // vpextrb       $0x8,%xmm8,0x4(%r11,%rdx,1)
  .byte  196,98,57,0,5,62,44,0,0             // vpshufb       0x2c3e(%rip),%xmm8,%xmm8        # 5a90 <_sk_callback_hsw+0x874>
  .byte  196,65,121,126,4,19                 // vmovd         %xmm8,(%r11,%rdx,1)
  .byte  235,135                             // jmp           2de1 <_sk_store_a8_hsw+0x33>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  178,255                             // mov           $0xff,%dl
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  187,255,255,255,237                 // mov           $0xedffffff,%ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_hsw
.globl _sk_load_g8_hsw
FUNCTION(_sk_load_g8_hsw)
_sk_load_g8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,57                              // jne           2ebb <_sk_load_g8_hsw+0x43>
  .byte  196,194,121,48,4,19                 // vpmovzxbw     (%r11,%rdx,1),%xmm0
  .byte  197,249,219,5,16,44,0,0             // vpand         0x2c10(%rip),%xmm0,%xmm0        # 5aa0 <_sk_callback_hsw+0x884>
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,62,39,0,0         // vbroadcastss  0x273e(%rip),%ymm1        # 55e0 <_sk_callback_hsw+0x3c4>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,51,39,0,0         // vbroadcastss  0x2733(%rip),%ymm3        # 55e4 <_sk_callback_hsw+0x3c8>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,185                             // ja            2e88 <_sk_load_g8_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,122,0,0,0                 // lea           0x7a(%rip),%r10        # 2f54 <_sk_load_g8_hsw+0xdc>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  235,154                             // jmp           2e88 <_sk_load_g8_hsw+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,2                   // vpinsrw       $0x2,%eax,%xmm0,%xmm0
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,226,121,48,201                  // vpmovzxbw     %xmm1,%xmm1
  .byte  196,227,121,2,193,1                 // vpblendd      $0x1,%xmm1,%xmm0,%xmm0
  .byte  233,114,255,255,255                 // jmpq          2e88 <_sk_load_g8_hsw+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  196,193,121,110,12,19               // vmovd         (%r11,%rdx,1),%xmm1
  .byte  196,226,121,48,201                  // vpmovzxbw     %xmm1,%xmm1
  .byte  196,227,113,2,192,12                // vpblendd      $0xc,%xmm0,%xmm1,%xmm0
  .byte  233,55,255,255,255                  // jmpq          2e88 <_sk_load_g8_hsw+0x10>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  143                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,169,255,255,255,154             // ljmp          *-0x65000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_dst_hsw
.globl _sk_load_g8_dst_hsw
FUNCTION(_sk_load_g8_dst_hsw)
_sk_load_g8_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,57                              // jne           2fb3 <_sk_load_g8_dst_hsw+0x43>
  .byte  196,194,121,48,36,19                // vpmovzxbw     (%r11,%rdx,1),%xmm4
  .byte  197,217,219,37,40,43,0,0            // vpand         0x2b28(%rip),%xmm4,%xmm4        # 5ab0 <_sk_callback_hsw+0x894>
  .byte  196,226,125,51,228                  // vpmovzxwd     %xmm4,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,125,24,45,78,38,0,0         // vbroadcastss  0x264e(%rip),%ymm5        # 55e8 <_sk_callback_hsw+0x3cc>
  .byte  197,220,89,229                      // vmulps        %ymm5,%ymm4,%ymm4
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,61,67,38,0,0         // vbroadcastss  0x2643(%rip),%ymm7        # 55ec <_sk_callback_hsw+0x3d0>
  .byte  197,252,40,236                      // vmovaps       %ymm4,%ymm5
  .byte  197,252,40,244                      // vmovaps       %ymm4,%ymm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,185                             // ja            2f80 <_sk_load_g8_dst_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,122,0,0,0                 // lea           0x7a(%rip),%r10        # 304c <_sk_load_g8_dst_hsw+0xdc>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  235,154                             // jmp           2f80 <_sk_load_g8_dst_hsw+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,217,196,224,2                   // vpinsrw       $0x2,%eax,%xmm4,%xmm4
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,232                     // vmovd         %eax,%xmm5
  .byte  196,226,121,48,237                  // vpmovzxbw     %xmm5,%xmm5
  .byte  196,227,89,2,229,1                  // vpblendd      $0x1,%xmm5,%xmm4,%xmm4
  .byte  233,114,255,255,255                 // jmpq          2f80 <_sk_load_g8_dst_hsw+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,217,196,224,6                   // vpinsrw       $0x6,%eax,%xmm4,%xmm4
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,217,196,224,5                   // vpinsrw       $0x5,%eax,%xmm4,%xmm4
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,217,196,224,4                   // vpinsrw       $0x4,%eax,%xmm4,%xmm4
  .byte  196,193,121,110,44,19               // vmovd         (%r11,%rdx,1),%xmm5
  .byte  196,226,121,48,237                  // vpmovzxbw     %xmm5,%xmm5
  .byte  196,227,81,2,228,12                 // vpblendd      $0xc,%xmm4,%xmm5,%xmm4
  .byte  233,55,255,255,255                  // jmpq          2f80 <_sk_load_g8_dst_hsw+0x10>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  143                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,169,255,255,255,154             // ljmp          *-0x65000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_g8_hsw
.globl _sk_gather_g8_hsw
FUNCTION(_sk_gather_g8_hsw)
_sk_gather_g8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,12,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm1
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,113,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm1,%xmm1
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,113,32,202,2                // vpinsrb       $0x2,%r10d,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,4                // vpinsrb       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,182,4,17                      // movzbl        (%r9,%r10,1),%eax
  .byte  196,227,113,32,192,5                // vpinsrb       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,121,32,192,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,227,121,32,192,7                // vpinsrb       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,210,36,0,0        // vbroadcastss  0x24d2(%rip),%ymm1        # 55f0 <_sk_callback_hsw+0x3d4>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,199,36,0,0        // vbroadcastss  0x24c7(%rip),%ymm3        # 55f4 <_sk_callback_hsw+0x3d8>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_hsw
.globl _sk_gather_i8_hsw
FUNCTION(_sk_gather_i8_hsw)
_sk_gather_i8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,193                          // mov           %rax,%r9
  .byte  77,133,201                          // test          %r9,%r9
  .byte  116,5                               // je            3146 <_sk_gather_i8_hsw+0xf>
  .byte  76,137,200                          // mov           %r9,%rax
  .byte  235,2                               // jmp           3148 <_sk_gather_i8_hsw+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  83                                  // push          %rbx
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,121,32,12,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm1
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,131,113,32,12,26,1              // vpinsrb       $0x1,(%r10,%r11,1),%xmm1,%xmm1
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,131,113,32,12,26,2              // vpinsrb       $0x2,(%r10,%r11,1),%xmm1,%xmm1
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  196,195,113,32,12,2,3               // vpinsrb       $0x3,(%r10,%rax,1),%xmm1,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,113,32,12,2,4               // vpinsrb       $0x4,(%r10,%rax,1),%xmm1,%xmm1
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,131,113,32,4,26,5               // vpinsrb       $0x5,(%r10,%r11,1),%xmm1,%xmm0
  .byte  137,216                             // mov           %ebx,%eax
  .byte  196,195,121,32,4,2,6                // vpinsrb       $0x6,(%r10,%rax,1),%xmm0,%xmm0
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,195,121,32,4,26,7               // vpinsrb       $0x7,(%r10,%rbx,1),%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  73,139,65,8                         // mov           0x8(%r9),%rax
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,226,117,144,28,128              // vpgatherdd    %ymm1,(%rax,%ymm0,4),%ymm3
  .byte  197,229,219,5,179,38,0,0            // vpand         0x26b3(%rip),%ymm3,%ymm0        # 58a0 <_sk_callback_hsw+0x684>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,254,35,0,0          // vbroadcastss  0x23fe(%rip),%ymm8        # 55f8 <_sk_callback_hsw+0x3dc>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,184,38,0,0         // vpshufb       0x26b8(%rip),%ymm3,%ymm1        # 58c0 <_sk_callback_hsw+0x6a4>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,198,38,0,0         // vpshufb       0x26c6(%rip),%ymm3,%ymm2        # 58e0 <_sk_callback_hsw+0x6c4>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_hsw
.globl _sk_load_565_hsw
FUNCTION(_sk_load_565_hsw)
_sk_load_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,114                             // jne           32b2 <_sk_load_565_hsw+0x7c>
  .byte  196,193,122,111,4,83                // vmovdqu       (%r11,%rdx,2),%xmm0
  .byte  196,226,125,51,208                  // vpmovzxwd     %xmm0,%ymm2
  .byte  196,226,125,88,5,168,35,0,0         // vpbroadcastd  0x23a8(%rip),%ymm0        # 55fc <_sk_callback_hsw+0x3e0>
  .byte  197,237,219,192                     // vpand         %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,155,35,0,0        // vbroadcastss  0x239b(%rip),%ymm1        # 5600 <_sk_callback_hsw+0x3e4>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,146,35,0,0        // vpbroadcastd  0x2392(%rip),%ymm1        # 5604 <_sk_callback_hsw+0x3e8>
  .byte  197,237,219,201                     // vpand         %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,133,35,0,0        // vbroadcastss  0x2385(%rip),%ymm3        # 5608 <_sk_callback_hsw+0x3ec>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,88,29,124,35,0,0        // vpbroadcastd  0x237c(%rip),%ymm3        # 560c <_sk_callback_hsw+0x3f0>
  .byte  197,237,219,211                     // vpand         %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,111,35,0,0        // vbroadcastss  0x236f(%rip),%ymm3        # 5610 <_sk_callback_hsw+0x3f4>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,100,35,0,0        // vbroadcastss  0x2364(%rip),%ymm3        # 5614 <_sk_callback_hsw+0x3f8>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,128                             // ja            3246 <_sk_load_565_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,99,0,0,0                  // lea           0x63(%rip),%r10        # 3334 <_sk_load_565_hsw+0xfe>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  233,94,255,255,255                  // jmpq          3246 <_sk_load_565_hsw+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,110,12,83               // vmovd         (%r11,%rdx,2),%xmm1
  .byte  196,227,121,2,193,1                 // vpblendd      $0x1,%xmm1,%xmm0,%xmm0
  .byte  233,65,255,255,255                  // jmpq          3246 <_sk_load_565_hsw+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,122,126,12,83               // vmovq         (%r11,%rdx,2),%xmm1
  .byte  196,227,113,2,192,12                // vpblendd      $0xc,%xmm0,%xmm1,%xmm0
  .byte  233,20,255,255,255                  // jmpq          3246 <_sk_load_565_hsw+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  166                                 // cmpsb         %es:(%rdi),%ds:(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,180,255,255,255,237,255         // pushq         -0x120001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_565_dst_hsw
.globl _sk_load_565_dst_hsw
FUNCTION(_sk_load_565_dst_hsw)
_sk_load_565_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,114                             // jne           33cc <_sk_load_565_dst_hsw+0x7c>
  .byte  196,193,122,111,36,83               // vmovdqu       (%r11,%rdx,2),%xmm4
  .byte  196,226,125,51,244                  // vpmovzxwd     %xmm4,%ymm6
  .byte  196,226,125,88,37,170,34,0,0        // vpbroadcastd  0x22aa(%rip),%ymm4        # 5618 <_sk_callback_hsw+0x3fc>
  .byte  197,205,219,228                     // vpand         %ymm4,%ymm6,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,125,24,45,157,34,0,0        // vbroadcastss  0x229d(%rip),%ymm5        # 561c <_sk_callback_hsw+0x400>
  .byte  197,220,89,229                      // vmulps        %ymm5,%ymm4,%ymm4
  .byte  196,226,125,88,45,148,34,0,0        // vpbroadcastd  0x2294(%rip),%ymm5        # 5620 <_sk_callback_hsw+0x404>
  .byte  197,205,219,237                     // vpand         %ymm5,%ymm6,%ymm5
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  196,226,125,24,61,135,34,0,0        // vbroadcastss  0x2287(%rip),%ymm7        # 5624 <_sk_callback_hsw+0x408>
  .byte  197,212,89,239                      // vmulps        %ymm7,%ymm5,%ymm5
  .byte  196,226,125,88,61,126,34,0,0        // vpbroadcastd  0x227e(%rip),%ymm7        # 5628 <_sk_callback_hsw+0x40c>
  .byte  197,205,219,247                     // vpand         %ymm7,%ymm6,%ymm6
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  196,226,125,24,61,113,34,0,0        // vbroadcastss  0x2271(%rip),%ymm7        # 562c <_sk_callback_hsw+0x410>
  .byte  197,204,89,247                      // vmulps        %ymm7,%ymm6,%ymm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,61,102,34,0,0        // vbroadcastss  0x2266(%rip),%ymm7        # 5630 <_sk_callback_hsw+0x414>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,128                             // ja            3360 <_sk_load_565_dst_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,97,0,0,0                  // lea           0x61(%rip),%r10        # 344c <_sk_load_565_dst_hsw+0xfc>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  233,94,255,255,255                  // jmpq          3360 <_sk_load_565_dst_hsw+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,193,89,196,100,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,121,110,44,83               // vmovd         (%r11,%rdx,2),%xmm5
  .byte  196,227,89,2,229,1                  // vpblendd      $0x1,%xmm5,%xmm4,%xmm4
  .byte  233,65,255,255,255                  // jmpq          3360 <_sk_load_565_dst_hsw+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,193,89,196,100,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,89,196,100,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,89,196,100,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,122,126,44,83               // vmovq         (%r11,%rdx,2),%xmm5
  .byte  196,227,81,2,228,12                 // vpblendd      $0xc,%xmm4,%xmm5,%xmm4
  .byte  233,20,255,255,255                  // jmpq          3360 <_sk_load_565_dst_hsw+0x10>
  .byte  168,255                             // test          $0xff,%al
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,182,255,255,255,239             // pushq         -0x10000001(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_565_hsw
.globl _sk_gather_565_hsw
FUNCTION(_sk_gather_565_hsw)
_sk_gather_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,200,1                   // vpinsrw       $0x1,%eax,%xmm1,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,2                   // vpinsrw       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,241,196,200,3                   // vpinsrw       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,4                   // vpinsrw       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,192,5                   // vpinsrw       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,51,208                  // vpmovzxwd     %xmm0,%ymm2
  .byte  196,226,125,88,5,27,33,0,0          // vpbroadcastd  0x211b(%rip),%ymm0        # 5634 <_sk_callback_hsw+0x418>
  .byte  197,237,219,192                     // vpand         %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,14,33,0,0         // vbroadcastss  0x210e(%rip),%ymm1        # 5638 <_sk_callback_hsw+0x41c>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,5,33,0,0          // vpbroadcastd  0x2105(%rip),%ymm1        # 563c <_sk_callback_hsw+0x420>
  .byte  197,237,219,201                     // vpand         %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,248,32,0,0        // vbroadcastss  0x20f8(%rip),%ymm3        # 5640 <_sk_callback_hsw+0x424>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,88,29,239,32,0,0        // vpbroadcastd  0x20ef(%rip),%ymm3        # 5644 <_sk_callback_hsw+0x428>
  .byte  197,237,219,211                     // vpand         %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,226,32,0,0        // vbroadcastss  0x20e2(%rip),%ymm3        # 5648 <_sk_callback_hsw+0x42c>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,215,32,0,0        // vbroadcastss  0x20d7(%rip),%ymm3        # 564c <_sk_callback_hsw+0x430>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_hsw
.globl _sk_store_565_hsw
FUNCTION(_sk_store_565_hsw)
_sk_store_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,203,32,0,0          // vbroadcastss  0x20cb(%rip),%ymm8        # 5650 <_sk_callback_hsw+0x434>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,53,114,241,11               // vpslld        $0xb,%ymm9,%ymm9
  .byte  196,98,125,24,21,182,32,0,0         // vbroadcastss  0x20b6(%rip),%ymm10        # 5654 <_sk_callback_hsw+0x438>
  .byte  196,65,116,89,210                   // vmulps        %ymm10,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,5                // vpslld        $0x5,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           35dc <_sk_store_565_hsw+0x65>
  .byte  196,65,122,127,4,83                 // vmovdqu       %xmm8,(%r11,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            35d8 <_sk_store_565_hsw+0x61>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,69,0,0,0                  // lea           0x45(%rip),%r10        # 363c <_sk_store_565_hsw+0xc5>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,4,83,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,2)
  .byte  235,207                             // jmp           35d8 <_sk_store_565_hsw+0x61>
  .byte  196,67,121,21,68,83,4,2             // vpextrw       $0x2,%xmm8,0x4(%r11,%rdx,2)
  .byte  196,65,121,126,4,83                 // vmovd         %xmm8,(%r11,%rdx,2)
  .byte  235,191                             // jmp           35d8 <_sk_store_565_hsw+0x61>
  .byte  196,67,121,21,68,83,12,6            // vpextrw       $0x6,%xmm8,0xc(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,10,5            // vpextrw       $0x5,%xmm8,0xa(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,8,4             // vpextrw       $0x4,%xmm8,0x8(%r11,%rdx,2)
  .byte  196,65,121,214,4,83                 // vmovq         %xmm8,(%r11,%rdx,2)
  .byte  235,159                             // jmp           35d8 <_sk_store_565_hsw+0x61>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  196                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,245                             // push          %rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_4444_hsw
.globl _sk_load_4444_hsw
FUNCTION(_sk_load_4444_hsw)
_sk_load_4444_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,138,0,0,0                    // jne           36f0 <_sk_load_4444_hsw+0x98>
  .byte  196,193,122,111,4,83                // vmovdqu       (%r11,%rdx,2),%xmm0
  .byte  196,226,125,51,216                  // vpmovzxwd     %xmm0,%ymm3
  .byte  196,226,125,88,5,222,31,0,0         // vpbroadcastd  0x1fde(%rip),%ymm0        # 5658 <_sk_callback_hsw+0x43c>
  .byte  197,229,219,192                     // vpand         %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,209,31,0,0        // vbroadcastss  0x1fd1(%rip),%ymm1        # 565c <_sk_callback_hsw+0x440>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,200,31,0,0        // vpbroadcastd  0x1fc8(%rip),%ymm1        # 5660 <_sk_callback_hsw+0x444>
  .byte  197,229,219,201                     // vpand         %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,187,31,0,0        // vbroadcastss  0x1fbb(%rip),%ymm2        # 5664 <_sk_callback_hsw+0x448>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,88,21,178,31,0,0        // vpbroadcastd  0x1fb2(%rip),%ymm2        # 5668 <_sk_callback_hsw+0x44c>
  .byte  197,229,219,210                     // vpand         %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,165,31,0,0          // vbroadcastss  0x1fa5(%rip),%ymm8        # 566c <_sk_callback_hsw+0x450>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,88,5,155,31,0,0          // vpbroadcastd  0x1f9b(%rip),%ymm8        # 5670 <_sk_callback_hsw+0x454>
  .byte  196,193,101,219,216                 // vpand         %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,141,31,0,0          // vbroadcastss  0x1f8d(%rip),%ymm8        # 5674 <_sk_callback_hsw+0x458>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,100,255,255,255              // ja            366c <_sk_load_4444_hsw+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,97,0,0,0                  // lea           0x61(%rip),%r10        # 3774 <_sk_load_4444_hsw+0x11c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  233,66,255,255,255                  // jmpq          366c <_sk_load_4444_hsw+0x14>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,110,12,83               // vmovd         (%r11,%rdx,2),%xmm1
  .byte  196,227,121,2,193,1                 // vpblendd      $0x1,%xmm1,%xmm0,%xmm0
  .byte  233,37,255,255,255                  // jmpq          366c <_sk_load_4444_hsw+0x14>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,122,126,12,83               // vmovq         (%r11,%rdx,2),%xmm1
  .byte  196,227,113,2,192,12                // vpblendd      $0xc,%xmm0,%xmm1,%xmm0
  .byte  233,248,254,255,255                 // jmpq          366c <_sk_load_4444_hsw+0x14>
  .byte  168,255                             // test          $0xff,%al
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,182,255,255,255,239             // pushq         -0x10000001(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_4444_dst_hsw
.globl _sk_load_4444_dst_hsw
FUNCTION(_sk_load_4444_dst_hsw)
_sk_load_4444_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,138,0,0,0                    // jne           3828 <_sk_load_4444_dst_hsw+0x98>
  .byte  196,193,122,111,36,83               // vmovdqu       (%r11,%rdx,2),%xmm4
  .byte  196,226,125,51,252                  // vpmovzxwd     %xmm4,%ymm7
  .byte  196,226,125,88,37,198,30,0,0        // vpbroadcastd  0x1ec6(%rip),%ymm4        # 5678 <_sk_callback_hsw+0x45c>
  .byte  197,197,219,228                     // vpand         %ymm4,%ymm7,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,125,24,45,185,30,0,0        // vbroadcastss  0x1eb9(%rip),%ymm5        # 567c <_sk_callback_hsw+0x460>
  .byte  197,220,89,229                      // vmulps        %ymm5,%ymm4,%ymm4
  .byte  196,226,125,88,45,176,30,0,0        // vpbroadcastd  0x1eb0(%rip),%ymm5        # 5680 <_sk_callback_hsw+0x464>
  .byte  197,197,219,237                     // vpand         %ymm5,%ymm7,%ymm5
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  196,226,125,24,53,163,30,0,0        // vbroadcastss  0x1ea3(%rip),%ymm6        # 5684 <_sk_callback_hsw+0x468>
  .byte  197,212,89,238                      // vmulps        %ymm6,%ymm5,%ymm5
  .byte  196,226,125,88,53,154,30,0,0        // vpbroadcastd  0x1e9a(%rip),%ymm6        # 5688 <_sk_callback_hsw+0x46c>
  .byte  197,197,219,246                     // vpand         %ymm6,%ymm7,%ymm6
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  196,98,125,24,5,141,30,0,0          // vbroadcastss  0x1e8d(%rip),%ymm8        # 568c <_sk_callback_hsw+0x470>
  .byte  196,193,76,89,240                   // vmulps        %ymm8,%ymm6,%ymm6
  .byte  196,98,125,88,5,131,30,0,0          // vpbroadcastd  0x1e83(%rip),%ymm8        # 5690 <_sk_callback_hsw+0x474>
  .byte  196,193,69,219,248                  // vpand         %ymm8,%ymm7,%ymm7
  .byte  197,252,91,255                      // vcvtdq2ps     %ymm7,%ymm7
  .byte  196,98,125,24,5,117,30,0,0          // vbroadcastss  0x1e75(%rip),%ymm8        # 5694 <_sk_callback_hsw+0x478>
  .byte  196,193,68,89,248                   // vmulps        %ymm8,%ymm7,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,100,255,255,255              // ja            37a4 <_sk_load_4444_dst_hsw+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,97,0,0,0                  // lea           0x61(%rip),%r10        # 38ac <_sk_load_4444_dst_hsw+0x11c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  233,66,255,255,255                  // jmpq          37a4 <_sk_load_4444_dst_hsw+0x14>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,193,89,196,100,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,121,110,44,83               // vmovd         (%r11,%rdx,2),%xmm5
  .byte  196,227,89,2,229,1                  // vpblendd      $0x1,%xmm5,%xmm4,%xmm4
  .byte  233,37,255,255,255                  // jmpq          37a4 <_sk_load_4444_dst_hsw+0x14>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,193,89,196,100,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,89,196,100,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,89,196,100,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,122,126,44,83               // vmovq         (%r11,%rdx,2),%xmm5
  .byte  196,227,81,2,228,12                 // vpblendd      $0xc,%xmm4,%xmm5,%xmm4
  .byte  233,248,254,255,255                 // jmpq          37a4 <_sk_load_4444_dst_hsw+0x14>
  .byte  168,255                             // test          $0xff,%al
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,182,255,255,255,239             // pushq         -0x10000001(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_4444_hsw
.globl _sk_gather_4444_hsw
FUNCTION(_sk_gather_4444_hsw)
_sk_gather_4444_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,200,1                   // vpinsrw       $0x1,%eax,%xmm1,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,2                   // vpinsrw       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,241,196,200,3                   // vpinsrw       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,4                   // vpinsrw       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,192,5                   // vpinsrw       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,51,216                  // vpmovzxwd     %xmm0,%ymm3
  .byte  196,226,125,88,5,31,29,0,0          // vpbroadcastd  0x1d1f(%rip),%ymm0        # 5698 <_sk_callback_hsw+0x47c>
  .byte  197,229,219,192                     // vpand         %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,18,29,0,0         // vbroadcastss  0x1d12(%rip),%ymm1        # 569c <_sk_callback_hsw+0x480>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,9,29,0,0          // vpbroadcastd  0x1d09(%rip),%ymm1        # 56a0 <_sk_callback_hsw+0x484>
  .byte  197,229,219,201                     // vpand         %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,252,28,0,0        // vbroadcastss  0x1cfc(%rip),%ymm2        # 56a4 <_sk_callback_hsw+0x488>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,88,21,243,28,0,0        // vpbroadcastd  0x1cf3(%rip),%ymm2        # 56a8 <_sk_callback_hsw+0x48c>
  .byte  197,229,219,210                     // vpand         %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,230,28,0,0          // vbroadcastss  0x1ce6(%rip),%ymm8        # 56ac <_sk_callback_hsw+0x490>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,88,5,220,28,0,0          // vpbroadcastd  0x1cdc(%rip),%ymm8        # 56b0 <_sk_callback_hsw+0x494>
  .byte  196,193,101,219,216                 // vpand         %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,206,28,0,0          // vbroadcastss  0x1cce(%rip),%ymm8        # 56b4 <_sk_callback_hsw+0x498>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_hsw
.globl _sk_store_4444_hsw
FUNCTION(_sk_store_4444_hsw)
_sk_store_4444_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,187,28,0,0          // vbroadcastss  0x1cbb(%rip),%ymm8        # 56b8 <_sk_callback_hsw+0x49c>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,53,114,241,12               // vpslld        $0xc,%ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,8                // vpslld        $0x8,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,4                // vpslld        $0x4,%ymm10,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3a60 <_sk_store_4444_hsw+0x71>
  .byte  196,65,122,127,4,83                 // vmovdqu       %xmm8,(%r11,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            3a5c <_sk_store_4444_hsw+0x6d>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,69,0,0,0                  // lea           0x45(%rip),%r10        # 3ac0 <_sk_store_4444_hsw+0xd1>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,4,83,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,2)
  .byte  235,207                             // jmp           3a5c <_sk_store_4444_hsw+0x6d>
  .byte  196,67,121,21,68,83,4,2             // vpextrw       $0x2,%xmm8,0x4(%r11,%rdx,2)
  .byte  196,65,121,126,4,83                 // vmovd         %xmm8,(%r11,%rdx,2)
  .byte  235,191                             // jmp           3a5c <_sk_store_4444_hsw+0x6d>
  .byte  196,67,121,21,68,83,12,6            // vpextrw       $0x6,%xmm8,0xc(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,10,5            // vpextrw       $0x5,%xmm8,0xa(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,8,4             // vpextrw       $0x4,%xmm8,0x8(%r11,%rdx,2)
  .byte  196,65,121,214,4,83                 // vmovq         %xmm8,(%r11,%rdx,2)
  .byte  235,159                             // jmp           3a5c <_sk_store_4444_hsw+0x6d>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  196                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,245                             // push          %rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_8888_hsw
.globl _sk_load_8888_hsw
FUNCTION(_sk_load_8888_hsw)
_sk_load_8888_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,88                              // jne           3b49 <_sk_load_8888_hsw+0x6d>
  .byte  196,193,124,16,26                   // vmovups       (%r10),%ymm3
  .byte  197,228,84,5,2,30,0,0               // vandps        0x1e02(%rip),%ymm3,%ymm0        # 5900 <_sk_callback_hsw+0x6e4>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,177,27,0,0          // vbroadcastss  0x1bb1(%rip),%ymm8        # 56bc <_sk_callback_hsw+0x4a0>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,7,30,0,0           // vpshufb       0x1e07(%rip),%ymm3,%ymm1        # 5920 <_sk_callback_hsw+0x704>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,21,30,0,0          // vpshufb       0x1e15(%rip),%ymm3,%ymm2        # 5940 <_sk_callback_hsw+0x724>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,192                 // vmovq         %rax,%xmm0
  .byte  196,226,125,33,192                  // vpmovsxbd     %xmm0,%ymm0
  .byte  196,194,125,44,26                   // vmaskmovps    (%r10),%ymm0,%ymm3
  .byte  235,135                             // jmp           3af6 <_sk_load_8888_hsw+0x1a>

HIDDEN _sk_load_8888_dst_hsw
.globl _sk_load_8888_dst_hsw
FUNCTION(_sk_load_8888_dst_hsw)
_sk_load_8888_dst_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,88                              // jne           3bdc <_sk_load_8888_dst_hsw+0x6d>
  .byte  196,193,124,16,58                   // vmovups       (%r10),%ymm7
  .byte  197,196,84,37,207,29,0,0            // vandps        0x1dcf(%rip),%ymm7,%ymm4        # 5960 <_sk_callback_hsw+0x744>
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,98,125,24,5,34,27,0,0           // vbroadcastss  0x1b22(%rip),%ymm8        # 56c0 <_sk_callback_hsw+0x4a4>
  .byte  196,193,92,89,224                   // vmulps        %ymm8,%ymm4,%ymm4
  .byte  196,226,69,0,45,212,29,0,0          // vpshufb       0x1dd4(%rip),%ymm7,%ymm5        # 5980 <_sk_callback_hsw+0x764>
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  196,193,84,89,232                   // vmulps        %ymm8,%ymm5,%ymm5
  .byte  196,226,69,0,53,226,29,0,0          // vpshufb       0x1de2(%rip),%ymm7,%ymm6        # 59a0 <_sk_callback_hsw+0x784>
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  196,193,76,89,240                   // vmulps        %ymm8,%ymm6,%ymm6
  .byte  197,197,114,215,24                  // vpsrld        $0x18,%ymm7,%ymm7
  .byte  197,252,91,255                      // vcvtdq2ps     %ymm7,%ymm7
  .byte  196,193,68,89,248                   // vmulps        %ymm8,%ymm7,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,224                 // vmovq         %rax,%xmm4
  .byte  196,226,125,33,228                  // vpmovsxbd     %xmm4,%ymm4
  .byte  196,194,93,44,58                    // vmaskmovps    (%r10),%ymm4,%ymm7
  .byte  235,135                             // jmp           3b89 <_sk_load_8888_dst_hsw+0x1a>

HIDDEN _sk_gather_8888_hsw
.globl _sk_gather_8888_hsw
FUNCTION(_sk_gather_8888_hsw)
_sk_gather_8888_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,194,117,144,28,129              // vpgatherdd    %ymm1,(%r9,%ymm0,4),%ymm3
  .byte  197,229,219,5,144,29,0,0            // vpand         0x1d90(%rip),%ymm3,%ymm0        # 59c0 <_sk_callback_hsw+0x7a4>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,135,26,0,0          // vbroadcastss  0x1a87(%rip),%ymm8        # 56c4 <_sk_callback_hsw+0x4a8>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,149,29,0,0         // vpshufb       0x1d95(%rip),%ymm3,%ymm1        # 59e0 <_sk_callback_hsw+0x7c4>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,163,29,0,0         // vpshufb       0x1da3(%rip),%ymm3,%ymm2        # 5a00 <_sk_callback_hsw+0x7e4>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_hsw
.globl _sk_store_8888_hsw
FUNCTION(_sk_store_8888_hsw)
_sk_store_8888_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  196,98,125,24,5,55,26,0,0           // vbroadcastss  0x1a37(%rip),%ymm8        # 56c8 <_sk_callback_hsw+0x4ac>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,8                // vpslld        $0x8,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,16               // vpslld        $0x10,%ymm10,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,193,61,114,240,24               // vpslld        $0x18,%ymm8,%ymm8
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,12                              // jne           3ceb <_sk_store_8888_hsw+0x73>
  .byte  196,65,124,17,2                     // vmovups       %ymm8,(%r10)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,125,33,201                   // vpmovsxbd     %xmm9,%ymm9
  .byte  196,66,53,46,2                      // vmaskmovps    %ymm8,%ymm9,(%r10)
  .byte  235,211                             // jmp           3ce4 <_sk_store_8888_hsw+0x6c>

HIDDEN _sk_load_f16_hsw
.globl _sk_load_f16_hsw
FUNCTION(_sk_load_f16_hsw)
_sk_load_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,97                              // jne           3d7c <_sk_load_f16_hsw+0x6b>
  .byte  197,121,16,4,208                    // vmovupd       (%rax,%rdx,8),%xmm8
  .byte  197,249,16,84,208,16                // vmovupd       0x10(%rax,%rdx,8),%xmm2
  .byte  197,249,16,92,208,32                // vmovupd       0x20(%rax,%rdx,8),%xmm3
  .byte  197,122,111,76,208,48               // vmovdqu       0x30(%rax,%rdx,8),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  196,226,125,19,192                  // vcvtph2ps     %xmm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  196,226,125,19,201                  // vcvtph2ps     %xmm1,%ymm1
  .byte  197,177,108,211                     // vpunpcklqdq   %xmm3,%xmm9,%xmm2
  .byte  196,226,125,19,210                  // vcvtph2ps     %xmm2,%ymm2
  .byte  197,177,109,219                     // vpunpckhqdq   %xmm3,%xmm9,%xmm3
  .byte  196,226,125,19,219                  // vcvtph2ps     %xmm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,123,16,4,208                    // vmovsd        (%rax,%rdx,8),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,79                              // je            3ddb <_sk_load_f16_hsw+0xca>
  .byte  197,57,22,68,208,8                  // vmovhpd       0x8(%rax,%rdx,8),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,67                              // jb            3ddb <_sk_load_f16_hsw+0xca>
  .byte  197,251,16,84,208,16                // vmovsd        0x10(%rax,%rdx,8),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,68                              // je            3de8 <_sk_load_f16_hsw+0xd7>
  .byte  197,233,22,84,208,24                // vmovhpd       0x18(%rax,%rdx,8),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,56                              // jb            3de8 <_sk_load_f16_hsw+0xd7>
  .byte  197,251,16,92,208,32                // vmovsd        0x20(%rax,%rdx,8),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,114,255,255,255              // je            3d32 <_sk_load_f16_hsw+0x21>
  .byte  197,225,22,92,208,40                // vmovhpd       0x28(%rax,%rdx,8),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,98,255,255,255               // jb            3d32 <_sk_load_f16_hsw+0x21>
  .byte  197,122,126,76,208,48               // vmovq         0x30(%rax,%rdx,8),%xmm9
  .byte  233,87,255,255,255                  // jmpq          3d32 <_sk_load_f16_hsw+0x21>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,74,255,255,255                  // jmpq          3d32 <_sk_load_f16_hsw+0x21>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,65,255,255,255                  // jmpq          3d32 <_sk_load_f16_hsw+0x21>

HIDDEN _sk_load_f16_dst_hsw
.globl _sk_load_f16_dst_hsw
FUNCTION(_sk_load_f16_dst_hsw)
_sk_load_f16_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,97                              // jne           3e5c <_sk_load_f16_dst_hsw+0x6b>
  .byte  197,121,16,4,208                    // vmovupd       (%rax,%rdx,8),%xmm8
  .byte  197,249,16,116,208,16               // vmovupd       0x10(%rax,%rdx,8),%xmm6
  .byte  197,249,16,124,208,32               // vmovupd       0x20(%rax,%rdx,8),%xmm7
  .byte  197,122,111,76,208,48               // vmovdqu       0x30(%rax,%rdx,8),%xmm9
  .byte  197,185,97,230                      // vpunpcklwd    %xmm6,%xmm8,%xmm4
  .byte  197,185,105,246                     // vpunpckhwd    %xmm6,%xmm8,%xmm6
  .byte  196,193,65,97,233                   // vpunpcklwd    %xmm9,%xmm7,%xmm5
  .byte  196,193,65,105,249                  // vpunpckhwd    %xmm9,%xmm7,%xmm7
  .byte  197,89,97,198                       // vpunpcklwd    %xmm6,%xmm4,%xmm8
  .byte  197,89,105,206                      // vpunpckhwd    %xmm6,%xmm4,%xmm9
  .byte  197,209,97,247                      // vpunpcklwd    %xmm7,%xmm5,%xmm6
  .byte  197,209,105,255                     // vpunpckhwd    %xmm7,%xmm5,%xmm7
  .byte  197,185,108,230                     // vpunpcklqdq   %xmm6,%xmm8,%xmm4
  .byte  196,226,125,19,228                  // vcvtph2ps     %xmm4,%ymm4
  .byte  197,185,109,238                     // vpunpckhqdq   %xmm6,%xmm8,%xmm5
  .byte  196,226,125,19,237                  // vcvtph2ps     %xmm5,%ymm5
  .byte  197,177,108,247                     // vpunpcklqdq   %xmm7,%xmm9,%xmm6
  .byte  196,226,125,19,246                  // vcvtph2ps     %xmm6,%ymm6
  .byte  197,177,109,255                     // vpunpckhqdq   %xmm7,%xmm9,%xmm7
  .byte  196,226,125,19,255                  // vcvtph2ps     %xmm7,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,123,16,4,208                    // vmovsd        (%rax,%rdx,8),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,79                              // je            3ebb <_sk_load_f16_dst_hsw+0xca>
  .byte  197,57,22,68,208,8                  // vmovhpd       0x8(%rax,%rdx,8),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,67                              // jb            3ebb <_sk_load_f16_dst_hsw+0xca>
  .byte  197,251,16,116,208,16               // vmovsd        0x10(%rax,%rdx,8),%xmm6
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,68                              // je            3ec8 <_sk_load_f16_dst_hsw+0xd7>
  .byte  197,201,22,116,208,24               // vmovhpd       0x18(%rax,%rdx,8),%xmm6,%xmm6
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,56                              // jb            3ec8 <_sk_load_f16_dst_hsw+0xd7>
  .byte  197,251,16,124,208,32               // vmovsd        0x20(%rax,%rdx,8),%xmm7
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,114,255,255,255              // je            3e12 <_sk_load_f16_dst_hsw+0x21>
  .byte  197,193,22,124,208,40               // vmovhpd       0x28(%rax,%rdx,8),%xmm7,%xmm7
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,98,255,255,255               // jb            3e12 <_sk_load_f16_dst_hsw+0x21>
  .byte  197,122,126,76,208,48               // vmovq         0x30(%rax,%rdx,8),%xmm9
  .byte  233,87,255,255,255                  // jmpq          3e12 <_sk_load_f16_dst_hsw+0x21>
  .byte  197,193,87,255                      // vxorpd        %xmm7,%xmm7,%xmm7
  .byte  197,201,87,246                      // vxorpd        %xmm6,%xmm6,%xmm6
  .byte  233,74,255,255,255                  // jmpq          3e12 <_sk_load_f16_dst_hsw+0x21>
  .byte  197,193,87,255                      // vxorpd        %xmm7,%xmm7,%xmm7
  .byte  233,65,255,255,255                  // jmpq          3e12 <_sk_load_f16_dst_hsw+0x21>

HIDDEN _sk_gather_f16_hsw
.globl _sk_gather_f16_hsw
FUNCTION(_sk_gather_f16_hsw)
_sk_gather_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,194,237,144,28,193              // vpgatherdq    %ymm2,(%r9,%xmm0,8),%ymm3
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,194,245,144,20,193              // vpgatherdq    %ymm1,(%r9,%xmm0,8),%ymm2
  .byte  196,227,125,57,216,1                // vextracti128  $0x1,%ymm3,%xmm0
  .byte  196,227,125,57,209,1                // vextracti128  $0x1,%ymm2,%xmm1
  .byte  197,97,97,192                       // vpunpcklwd    %xmm0,%xmm3,%xmm8
  .byte  197,225,105,192                     // vpunpckhwd    %xmm0,%xmm3,%xmm0
  .byte  197,233,97,217                      // vpunpcklwd    %xmm1,%xmm2,%xmm3
  .byte  197,233,105,201                     // vpunpckhwd    %xmm1,%xmm2,%xmm1
  .byte  197,57,97,200                       // vpunpcklwd    %xmm0,%xmm8,%xmm9
  .byte  197,57,105,192                      // vpunpckhwd    %xmm0,%xmm8,%xmm8
  .byte  197,225,97,209                      // vpunpcklwd    %xmm1,%xmm3,%xmm2
  .byte  197,225,105,217                     // vpunpckhwd    %xmm1,%xmm3,%xmm3
  .byte  197,177,108,194                     // vpunpcklqdq   %xmm2,%xmm9,%xmm0
  .byte  196,226,125,19,192                  // vcvtph2ps     %xmm0,%ymm0
  .byte  197,177,109,202                     // vpunpckhqdq   %xmm2,%xmm9,%xmm1
  .byte  196,226,125,19,201                  // vcvtph2ps     %xmm1,%ymm1
  .byte  197,185,108,211                     // vpunpcklqdq   %xmm3,%xmm8,%xmm2
  .byte  196,226,125,19,210                  // vcvtph2ps     %xmm2,%ymm2
  .byte  197,185,109,219                     // vpunpckhqdq   %xmm3,%xmm8,%xmm3
  .byte  196,226,125,19,219                  // vcvtph2ps     %xmm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_hsw
.globl _sk_store_f16_hsw
FUNCTION(_sk_store_f16_hsw)
_sk_store_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  196,195,125,29,192,4                // vcvtps2ph     $0x4,%ymm0,%xmm8
  .byte  196,195,125,29,201,4                // vcvtps2ph     $0x4,%ymm1,%xmm9
  .byte  196,195,125,29,210,4                // vcvtps2ph     $0x4,%ymm2,%xmm10
  .byte  196,195,125,29,219,4                // vcvtps2ph     $0x4,%ymm3,%xmm11
  .byte  196,65,57,97,225                    // vpunpcklwd    %xmm9,%xmm8,%xmm12
  .byte  196,65,57,105,193                   // vpunpckhwd    %xmm9,%xmm8,%xmm8
  .byte  196,65,41,97,203                    // vpunpcklwd    %xmm11,%xmm10,%xmm9
  .byte  196,65,41,105,235                   // vpunpckhwd    %xmm11,%xmm10,%xmm13
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,57,98,205                    // vpunpckldq    %xmm13,%xmm8,%xmm9
  .byte  196,65,57,106,197                   // vpunpckhdq    %xmm13,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,27                              // jne           3fc0 <_sk_store_f16_hsw+0x65>
  .byte  197,120,17,28,208                   // vmovups       %xmm11,(%rax,%rdx,8)
  .byte  197,120,17,84,208,16                // vmovups       %xmm10,0x10(%rax,%rdx,8)
  .byte  197,120,17,76,208,32                // vmovups       %xmm9,0x20(%rax,%rdx,8)
  .byte  197,122,127,68,208,48               // vmovdqu       %xmm8,0x30(%rax,%rdx,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,121,214,28,208                  // vmovq         %xmm11,(%rax,%rdx,8)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,241                             // je            3fbc <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,92,208,8                 // vmovhpd       %xmm11,0x8(%rax,%rdx,8)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,229                             // jb            3fbc <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,84,208,16               // vmovq         %xmm10,0x10(%rax,%rdx,8)
  .byte  116,221                             // je            3fbc <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,84,208,24                // vmovhpd       %xmm10,0x18(%rax,%rdx,8)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,209                             // jb            3fbc <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,76,208,32               // vmovq         %xmm9,0x20(%rax,%rdx,8)
  .byte  116,201                             // je            3fbc <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,76,208,40                // vmovhpd       %xmm9,0x28(%rax,%rdx,8)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,189                             // jb            3fbc <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,68,208,48               // vmovq         %xmm8,0x30(%rax,%rdx,8)
  .byte  235,181                             // jmp           3fbc <_sk_store_f16_hsw+0x61>

HIDDEN _sk_load_u16_be_hsw
.globl _sk_load_u16_be_hsw
FUNCTION(_sk_load_u16_be_hsw)
_sk_load_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,204,0,0,0                    // jne           40e9 <_sk_load_u16_be_hsw+0xe2>
  .byte  196,65,121,16,4,65                  // vmovupd       (%r9,%rax,2),%xmm8
  .byte  196,193,121,16,84,65,16             // vmovupd       0x10(%r9,%rax,2),%xmm2
  .byte  196,193,121,16,92,65,32             // vmovupd       0x20(%r9,%rax,2),%xmm3
  .byte  196,65,122,111,76,65,48             // vmovdqu       0x30(%r9,%rax,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm11
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,21,78,22,0,0          // vbroadcastss  0x164e(%rip),%ymm10        # 56cc <_sk_callback_hsw+0x4b0>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,226,125,51,201                  // vpmovzxwd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  196,193,49,108,211                  // vpunpcklqdq   %xmm11,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,226,125,51,210                  // vpmovzxwd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  196,193,49,109,219                  // vpunpckhqdq   %xmm11,%xmm9,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,226,125,51,219                  // vpmovzxwd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,123,16,4,65                  // vmovsd        (%r9,%rax,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,85                              // je            414f <_sk_load_u16_be_hsw+0x148>
  .byte  196,65,57,22,68,65,8                // vmovhpd       0x8(%r9,%rax,2),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,72                              // jb            414f <_sk_load_u16_be_hsw+0x148>
  .byte  196,193,123,16,84,65,16             // vmovsd        0x10(%r9,%rax,2),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,72                              // je            415c <_sk_load_u16_be_hsw+0x155>
  .byte  196,193,105,22,84,65,24             // vmovhpd       0x18(%r9,%rax,2),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,59                              // jb            415c <_sk_load_u16_be_hsw+0x155>
  .byte  196,193,123,16,92,65,32             // vmovsd        0x20(%r9,%rax,2),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,6,255,255,255                // je            4038 <_sk_load_u16_be_hsw+0x31>
  .byte  196,193,97,22,92,65,40              // vmovhpd       0x28(%r9,%rax,2),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,245,254,255,255              // jb            4038 <_sk_load_u16_be_hsw+0x31>
  .byte  196,65,122,126,76,65,48             // vmovq         0x30(%r9,%rax,2),%xmm9
  .byte  233,233,254,255,255                 // jmpq          4038 <_sk_load_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,220,254,255,255                 // jmpq          4038 <_sk_load_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,211,254,255,255                 // jmpq          4038 <_sk_load_u16_be_hsw+0x31>

HIDDEN _sk_load_rgb_u16_be_hsw
.globl _sk_load_rgb_u16_be_hsw
FUNCTION(_sk_load_rgb_u16_be_hsw)
_sk_load_rgb_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,82                         // lea           (%rdx,%rdx,2),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,204,0,0,0                    // jne           4243 <_sk_load_rgb_u16_be_hsw+0xde>
  .byte  196,193,122,111,4,65                // vmovdqu       (%r9,%rax,2),%xmm0
  .byte  196,193,122,111,84,65,12            // vmovdqu       0xc(%r9,%rax,2),%xmm2
  .byte  196,193,122,111,76,65,24            // vmovdqu       0x18(%r9,%rax,2),%xmm1
  .byte  196,193,122,111,92,65,32            // vmovdqu       0x20(%r9,%rax,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,21,223,20,0,0         // vbroadcastss  0x14df(%rip),%ymm10        # 56d0 <_sk_callback_hsw+0x4b4>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,226,125,51,201                  // vpmovzxwd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,177,108,211                     // vpunpcklqdq   %xmm3,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,226,125,51,210                  // vpmovzxwd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,147,20,0,0        // vbroadcastss  0x1493(%rip),%ymm3        # 56d4 <_sk_callback_hsw+0x4b8>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,193,121,110,4,65                // vmovd         (%r9,%rax,2),%xmm0
  .byte  196,193,121,196,68,65,4,2           // vpinsrw       $0x2,0x4(%r9,%rax,2),%xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,5                               // jne           425c <_sk_load_rgb_u16_be_hsw+0xf7>
  .byte  233,79,255,255,255                  // jmpq          41ab <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,76,65,6             // vmovd         0x6(%r9,%rax,2),%xmm1
  .byte  196,65,113,196,68,65,10,2           // vpinsrw       $0x2,0xa(%r9,%rax,2),%xmm1,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,26                              // jb            428b <_sk_load_rgb_u16_be_hsw+0x126>
  .byte  196,193,121,110,76,65,12            // vmovd         0xc(%r9,%rax,2),%xmm1
  .byte  196,193,113,196,84,65,16,2          // vpinsrw       $0x2,0x10(%r9,%rax,2),%xmm1,%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  117,10                              // jne           4290 <_sk_load_rgb_u16_be_hsw+0x12b>
  .byte  233,32,255,255,255                  // jmpq          41ab <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,27,255,255,255                  // jmpq          41ab <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,76,65,18            // vmovd         0x12(%r9,%rax,2),%xmm1
  .byte  196,65,113,196,76,65,22,2           // vpinsrw       $0x2,0x16(%r9,%rax,2),%xmm1,%xmm9
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,26                              // jb            42bf <_sk_load_rgb_u16_be_hsw+0x15a>
  .byte  196,193,121,110,76,65,24            // vmovd         0x18(%r9,%rax,2),%xmm1
  .byte  196,193,113,196,76,65,28,2          // vpinsrw       $0x2,0x1c(%r9,%rax,2),%xmm1,%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  117,10                              // jne           42c4 <_sk_load_rgb_u16_be_hsw+0x15f>
  .byte  233,236,254,255,255                 // jmpq          41ab <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,231,254,255,255                 // jmpq          41ab <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,92,65,30            // vmovd         0x1e(%r9,%rax,2),%xmm3
  .byte  196,65,97,196,92,65,34,2            // vpinsrw       $0x2,0x22(%r9,%rax,2),%xmm3,%xmm11
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,20                              // jb            42ed <_sk_load_rgb_u16_be_hsw+0x188>
  .byte  196,193,121,110,92,65,36            // vmovd         0x24(%r9,%rax,2),%xmm3
  .byte  196,193,97,196,92,65,40,2           // vpinsrw       $0x2,0x28(%r9,%rax,2),%xmm3,%xmm3
  .byte  233,190,254,255,255                 // jmpq          41ab <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,185,254,255,255                 // jmpq          41ab <_sk_load_rgb_u16_be_hsw+0x46>

HIDDEN _sk_store_u16_be_hsw
.globl _sk_store_u16_be_hsw
FUNCTION(_sk_store_u16_be_hsw)
_sk_store_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  196,98,125,24,5,208,19,0,0          // vbroadcastss  0x13d0(%rip),%ymm8        # 56d8 <_sk_callback_hsw+0x4bc>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,67,125,25,202,1                 // vextractf128  $0x1,%ymm9,%xmm10
  .byte  196,66,49,43,202                    // vpackusdw     %xmm10,%xmm9,%xmm9
  .byte  196,193,41,113,241,8                // vpsllw        $0x8,%xmm9,%xmm10
  .byte  196,193,49,113,209,8                // vpsrlw        $0x8,%xmm9,%xmm9
  .byte  196,65,41,235,201                   // vpor          %xmm9,%xmm10,%xmm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,67,125,25,211,1                 // vextractf128  $0x1,%ymm10,%xmm11
  .byte  196,66,41,43,211                    // vpackusdw     %xmm11,%xmm10,%xmm10
  .byte  196,193,33,113,242,8                // vpsllw        $0x8,%xmm10,%xmm11
  .byte  196,193,41,113,210,8                // vpsrlw        $0x8,%xmm10,%xmm10
  .byte  196,65,33,235,210                   // vpor          %xmm10,%xmm11,%xmm10
  .byte  196,65,108,89,216                   // vmulps        %ymm8,%ymm2,%ymm11
  .byte  196,65,125,91,219                   // vcvtps2dq     %ymm11,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,66,33,43,220                    // vpackusdw     %xmm12,%xmm11,%xmm11
  .byte  196,193,25,113,243,8                // vpsllw        $0x8,%xmm11,%xmm12
  .byte  196,193,33,113,211,8                // vpsrlw        $0x8,%xmm11,%xmm11
  .byte  196,65,25,235,219                   // vpor          %xmm11,%xmm12,%xmm11
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,196,1                 // vextractf128  $0x1,%ymm8,%xmm12
  .byte  196,66,57,43,196                    // vpackusdw     %xmm12,%xmm8,%xmm8
  .byte  196,193,25,113,240,8                // vpsllw        $0x8,%xmm8,%xmm12
  .byte  196,193,57,113,208,8                // vpsrlw        $0x8,%xmm8,%xmm8
  .byte  196,65,25,235,192                   // vpor          %xmm8,%xmm12,%xmm8
  .byte  196,65,49,97,226                    // vpunpcklwd    %xmm10,%xmm9,%xmm12
  .byte  196,65,49,105,234                   // vpunpckhwd    %xmm10,%xmm9,%xmm13
  .byte  196,65,33,97,200                    // vpunpcklwd    %xmm8,%xmm11,%xmm9
  .byte  196,65,33,105,192                   // vpunpckhwd    %xmm8,%xmm11,%xmm8
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,17,98,200                    // vpunpckldq    %xmm8,%xmm13,%xmm9
  .byte  196,65,17,106,192                   // vpunpckhdq    %xmm8,%xmm13,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,31                              // jne           43ec <_sk_store_u16_be_hsw+0xfa>
  .byte  196,65,120,17,28,65                 // vmovups       %xmm11,(%r9,%rax,2)
  .byte  196,65,120,17,84,65,16              // vmovups       %xmm10,0x10(%r9,%rax,2)
  .byte  196,65,120,17,76,65,32              // vmovups       %xmm9,0x20(%r9,%rax,2)
  .byte  196,65,122,127,68,65,48             // vmovdqu       %xmm8,0x30(%r9,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,214,28,65                // vmovq         %xmm11,(%r9,%rax,2)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            43e8 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,92,65,8               // vmovhpd       %xmm11,0x8(%r9,%rax,2)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            43e8 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,84,65,16             // vmovq         %xmm10,0x10(%r9,%rax,2)
  .byte  116,218                             // je            43e8 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,84,65,24              // vmovhpd       %xmm10,0x18(%r9,%rax,2)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,205                             // jb            43e8 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,76,65,32             // vmovq         %xmm9,0x20(%r9,%rax,2)
  .byte  116,196                             // je            43e8 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,76,65,40              // vmovhpd       %xmm9,0x28(%r9,%rax,2)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,183                             // jb            43e8 <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,68,65,48             // vmovq         %xmm8,0x30(%r9,%rax,2)
  .byte  235,174                             // jmp           43e8 <_sk_store_u16_be_hsw+0xf6>

HIDDEN _sk_load_f32_hsw
.globl _sk_load_f32_hsw
FUNCTION(_sk_load_f32_hsw)
_sk_load_f32_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  119,110                             // ja            44b0 <_sk_load_f32_hsw+0x76>
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,141,29,132,0,0,0                 // lea           0x84(%rip),%r11        # 44d8 <_sk_load_f32_hsw+0x9e>
  .byte  75,99,4,131                         // movslq        (%r11,%r8,4),%rax
  .byte  76,1,216                            // add           %r11,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,3,125,24,68,145,112,1           // vinsertf128   $0x1,0x70(%r9,%r10,4),%ymm0,%ymm8
  .byte  196,131,125,24,92,145,96,1          // vinsertf128   $0x1,0x60(%r9,%r10,4),%ymm0,%ymm3
  .byte  196,131,125,24,76,145,80,1          // vinsertf128   $0x1,0x50(%r9,%r10,4),%ymm0,%ymm1
  .byte  196,131,125,24,84,145,64,1          // vinsertf128   $0x1,0x40(%r9,%r10,4),%ymm0,%ymm2
  .byte  196,129,121,16,68,145,48            // vmovupd       0x30(%r9,%r10,4),%xmm0
  .byte  196,195,125,13,192,12               // vblendpd      $0xc,%ymm8,%ymm0,%ymm0
  .byte  196,1,121,16,68,145,32              // vmovupd       0x20(%r9,%r10,4),%xmm8
  .byte  196,99,61,13,203,12                 // vblendpd      $0xc,%ymm3,%ymm8,%ymm9
  .byte  196,129,121,16,92,145,16            // vmovupd       0x10(%r9,%r10,4),%xmm3
  .byte  196,99,101,13,209,12                // vblendpd      $0xc,%ymm1,%ymm3,%ymm10
  .byte  196,129,121,16,12,145               // vmovupd       (%r9,%r10,4),%xmm1
  .byte  196,227,117,13,202,12               // vblendpd      $0xc,%ymm2,%ymm1,%ymm1
  .byte  196,193,116,20,210                  // vunpcklps     %ymm10,%ymm1,%ymm2
  .byte  196,193,116,21,218                  // vunpckhps     %ymm10,%ymm1,%ymm3
  .byte  197,180,20,200                      // vunpcklps     %ymm0,%ymm9,%ymm1
  .byte  197,52,21,192                       // vunpckhps     %ymm0,%ymm9,%ymm8
  .byte  197,237,20,193                      // vunpcklpd     %ymm1,%ymm2,%ymm0
  .byte  197,237,21,201                      // vunpckhpd     %ymm1,%ymm2,%ymm1
  .byte  196,193,101,20,208                  // vunpcklpd     %ymm8,%ymm3,%ymm2
  .byte  196,193,101,21,216                  // vunpckhpd     %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  133,255                             // test          %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  191,255,255,255,178                 // mov           $0xb2ffffff,%edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,165,255,255,255,157             // jmpq          *-0x62000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,149,255,255,255,141             // callq         *-0x72000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_f32_dst_hsw
.globl _sk_load_f32_dst_hsw
FUNCTION(_sk_load_f32_dst_hsw)
_sk_load_f32_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  119,110                             // ja            456e <_sk_load_f32_dst_hsw+0x76>
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,141,29,134,0,0,0                 // lea           0x86(%rip),%r11        # 4598 <_sk_load_f32_dst_hsw+0xa0>
  .byte  75,99,4,131                         // movslq        (%r11,%r8,4),%rax
  .byte  76,1,216                            // add           %r11,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,3,125,24,68,145,112,1           // vinsertf128   $0x1,0x70(%r9,%r10,4),%ymm0,%ymm8
  .byte  196,131,125,24,124,145,96,1         // vinsertf128   $0x1,0x60(%r9,%r10,4),%ymm0,%ymm7
  .byte  196,131,125,24,108,145,80,1         // vinsertf128   $0x1,0x50(%r9,%r10,4),%ymm0,%ymm5
  .byte  196,131,125,24,116,145,64,1         // vinsertf128   $0x1,0x40(%r9,%r10,4),%ymm0,%ymm6
  .byte  196,129,121,16,100,145,48           // vmovupd       0x30(%r9,%r10,4),%xmm4
  .byte  196,195,93,13,224,12                // vblendpd      $0xc,%ymm8,%ymm4,%ymm4
  .byte  196,1,121,16,68,145,32              // vmovupd       0x20(%r9,%r10,4),%xmm8
  .byte  196,99,61,13,207,12                 // vblendpd      $0xc,%ymm7,%ymm8,%ymm9
  .byte  196,129,121,16,124,145,16           // vmovupd       0x10(%r9,%r10,4),%xmm7
  .byte  196,99,69,13,213,12                 // vblendpd      $0xc,%ymm5,%ymm7,%ymm10
  .byte  196,129,121,16,44,145               // vmovupd       (%r9,%r10,4),%xmm5
  .byte  196,227,85,13,238,12                // vblendpd      $0xc,%ymm6,%ymm5,%ymm5
  .byte  196,193,84,20,242                   // vunpcklps     %ymm10,%ymm5,%ymm6
  .byte  196,193,84,21,250                   // vunpckhps     %ymm10,%ymm5,%ymm7
  .byte  197,180,20,236                      // vunpcklps     %ymm4,%ymm9,%ymm5
  .byte  197,52,21,196                       // vunpckhps     %ymm4,%ymm9,%ymm8
  .byte  197,205,20,229                      // vunpcklpd     %ymm5,%ymm6,%ymm4
  .byte  197,205,21,237                      // vunpckhpd     %ymm5,%ymm6,%ymm5
  .byte  196,193,69,20,240                   // vunpcklpd     %ymm8,%ymm7,%ymm6
  .byte  196,193,69,21,248                   // vunpckhpd     %ymm8,%ymm7,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,144                             // xchg          %ax,%ax
  .byte  131,255,255                         // cmp           $0xffffffff,%edi
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  189,255,255,255,176                 // mov           $0xb0ffffff,%ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,163,255,255,255,155             // jmpq          *-0x64000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,147,255,255,255,139             // callq         *-0x74000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_f32_hsw
.globl _sk_store_f32_hsw
FUNCTION(_sk_store_f32_hsw)
_sk_store_f32_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  197,124,20,193                      // vunpcklps     %ymm1,%ymm0,%ymm8
  .byte  197,124,21,217                      // vunpckhps     %ymm1,%ymm0,%ymm11
  .byte  197,108,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm9
  .byte  197,108,21,227                      // vunpckhps     %ymm3,%ymm2,%ymm12
  .byte  196,65,61,20,209                    // vunpcklpd     %ymm9,%ymm8,%ymm10
  .byte  196,65,61,21,201                    // vunpckhpd     %ymm9,%ymm8,%ymm9
  .byte  196,65,37,20,196                    // vunpcklpd     %ymm12,%ymm11,%ymm8
  .byte  196,65,37,21,220                    // vunpckhpd     %ymm12,%ymm11,%ymm11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,55                              // jne           4625 <_sk_store_f32_hsw+0x6d>
  .byte  196,67,45,24,225,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm12
  .byte  196,67,61,24,235,1                  // vinsertf128   $0x1,%xmm11,%ymm8,%ymm13
  .byte  196,67,45,6,201,49                  // vperm2f128    $0x31,%ymm9,%ymm10,%ymm9
  .byte  196,67,61,6,195,49                  // vperm2f128    $0x31,%ymm11,%ymm8,%ymm8
  .byte  196,65,125,17,36,129                // vmovupd       %ymm12,(%r9,%rax,4)
  .byte  196,65,125,17,108,129,32            // vmovupd       %ymm13,0x20(%r9,%rax,4)
  .byte  196,65,125,17,76,129,64             // vmovupd       %ymm9,0x40(%r9,%rax,4)
  .byte  196,65,125,17,68,129,96             // vmovupd       %ymm8,0x60(%r9,%rax,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,17,20,129                // vmovupd       %xmm10,(%r9,%rax,4)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            4621 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,76,129,16             // vmovupd       %xmm9,0x10(%r9,%rax,4)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            4621 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,68,129,32             // vmovupd       %xmm8,0x20(%r9,%rax,4)
  .byte  116,218                             // je            4621 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,92,129,48             // vmovupd       %xmm11,0x30(%r9,%rax,4)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,205                             // jb            4621 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,84,129,64,1           // vextractf128  $0x1,%ymm10,0x40(%r9,%rax,4)
  .byte  116,195                             // je            4621 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,76,129,80,1           // vextractf128  $0x1,%ymm9,0x50(%r9,%rax,4)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,181                             // jb            4621 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,68,129,96,1           // vextractf128  $0x1,%ymm8,0x60(%r9,%rax,4)
  .byte  235,171                             // jmp           4621 <_sk_store_f32_hsw+0x69>

HIDDEN _sk_clamp_x_hsw
.globl _sk_clamp_x_hsw
FUNCTION(_sk_clamp_x_hsw)
_sk_clamp_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,88,0                     // vpbroadcastd  (%rax),%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,65,61,254,193                   // vpaddd        %ymm9,%ymm8,%ymm8
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_hsw
.globl _sk_clamp_y_hsw
FUNCTION(_sk_clamp_y_hsw)
_sk_clamp_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,201                      // vmaxps        %ymm1,%ymm8,%ymm1
  .byte  196,98,125,88,0                     // vpbroadcastd  (%rax),%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,65,61,254,193                   // vpaddd        %ymm9,%ymm8,%ymm8
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_hsw
.globl _sk_repeat_x_hsw
FUNCTION(_sk_repeat_x_hsw)
_sk_repeat_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,4                  // vbroadcastss  0x4(%rax),%ymm8
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,53,172,192                   // vfnmadd213ps  %ymm0,%ymm9,%ymm8
  .byte  197,253,118,192                     // vpcmpeqd      %ymm0,%ymm0,%ymm0
  .byte  197,181,254,192                     // vpaddd        %ymm0,%ymm9,%ymm0
  .byte  197,188,93,192                      // vminps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_hsw
.globl _sk_repeat_y_hsw
FUNCTION(_sk_repeat_y_hsw)
_sk_repeat_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,4                  // vbroadcastss  0x4(%rax),%ymm8
  .byte  197,60,89,193                       // vmulps        %ymm1,%ymm8,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,53,172,193                   // vfnmadd213ps  %ymm1,%ymm9,%ymm8
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  197,181,254,201                     // vpaddd        %ymm1,%ymm9,%ymm1
  .byte  197,188,93,201                      // vminps        %ymm1,%ymm8,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_hsw
.globl _sk_mirror_x_hsw
FUNCTION(_sk_mirror_x_hsw)
_sk_mirror_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,122,16,0                        // vmovss        (%rax),%xmm8
  .byte  197,122,16,72,4                     // vmovss        0x4(%rax),%xmm9
  .byte  196,66,125,24,208                   // vbroadcastss  %xmm8,%ymm10
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,193,58,88,192                   // vaddss        %xmm8,%xmm8,%xmm0
  .byte  196,98,125,24,192                   // vbroadcastss  %xmm0,%ymm8
  .byte  197,178,89,5,161,15,0,0             // vmulss        0xfa1(%rip),%xmm9,%xmm0        # 56dc <_sk_callback_hsw+0x4c0>
  .byte  196,226,125,24,192                  // vbroadcastss  %xmm0,%ymm0
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  196,227,125,8,192,1                 // vroundps      $0x1,%ymm0,%ymm0
  .byte  196,194,61,172,195                  // vfnmadd213ps  %ymm11,%ymm8,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,188,84,192                      // vandps        %ymm0,%ymm8,%ymm0
  .byte  196,65,61,118,192                   // vpcmpeqd      %ymm8,%ymm8,%ymm8
  .byte  196,65,45,254,192                   // vpaddd        %ymm8,%ymm10,%ymm8
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_hsw
.globl _sk_mirror_y_hsw
FUNCTION(_sk_mirror_y_hsw)
_sk_mirror_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,122,16,0                        // vmovss        (%rax),%xmm8
  .byte  197,122,16,72,4                     // vmovss        0x4(%rax),%xmm9
  .byte  196,66,125,24,208                   // vbroadcastss  %xmm8,%ymm10
  .byte  196,65,116,92,218                   // vsubps        %ymm10,%ymm1,%ymm11
  .byte  196,193,58,88,200                   // vaddss        %xmm8,%xmm8,%xmm1
  .byte  196,98,125,24,193                   // vbroadcastss  %xmm1,%ymm8
  .byte  197,178,89,13,69,15,0,0             // vmulss        0xf45(%rip),%xmm9,%xmm1        # 56e0 <_sk_callback_hsw+0x4c4>
  .byte  196,226,125,24,201                  // vbroadcastss  %xmm1,%ymm1
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  196,227,125,8,201,1                 // vroundps      $0x1,%ymm1,%ymm1
  .byte  196,194,61,172,203                  // vfnmadd213ps  %ymm11,%ymm8,%ymm1
  .byte  196,193,116,92,202                  // vsubps        %ymm10,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,193                       // vsubps        %ymm1,%ymm8,%ymm8
  .byte  197,188,84,201                      // vandps        %ymm1,%ymm8,%ymm1
  .byte  196,65,61,118,192                   // vpcmpeqd      %ymm8,%ymm8,%ymm8
  .byte  196,65,45,254,192                   // vpaddd        %ymm8,%ymm10,%ymm8
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_1_hsw
.globl _sk_clamp_x_1_hsw
FUNCTION(_sk_clamp_x_1_hsw)
_sk_clamp_x_1_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,254,14,0,0          // vbroadcastss  0xefe(%rip),%ymm8        # 56e4 <_sk_callback_hsw+0x4c8>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_1_hsw
.globl _sk_repeat_x_1_hsw
FUNCTION(_sk_repeat_x_1_hsw)
_sk_repeat_x_1_hsw:
  .byte  196,99,125,8,192,1                  // vroundps      $0x1,%ymm0,%ymm8
  .byte  196,193,124,92,192                  // vsubps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_1_hsw
.globl _sk_mirror_x_1_hsw
FUNCTION(_sk_mirror_x_1_hsw)
_sk_mirror_x_1_hsw:
  .byte  196,98,125,24,5,225,14,0,0          // vbroadcastss  0xee1(%rip),%ymm8        # 56e8 <_sk_callback_hsw+0x4cc>
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,13,215,14,0,0         // vbroadcastss  0xed7(%rip),%ymm9        # 56ec <_sk_callback_hsw+0x4d0>
  .byte  196,65,124,89,201                   // vmulps        %ymm9,%ymm0,%ymm9
  .byte  196,67,125,8,201,1                  // vroundps      $0x1,%ymm9,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,193,124,92,193                  // vsubps        %ymm9,%ymm0,%ymm0
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,188,84,192                      // vandps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_hsw
.globl _sk_luminance_to_alpha_hsw
FUNCTION(_sk_luminance_to_alpha_hsw)
_sk_luminance_to_alpha_hsw:
  .byte  196,226,125,24,29,167,14,0,0        // vbroadcastss  0xea7(%rip),%ymm3        # 56f0 <_sk_callback_hsw+0x4d4>
  .byte  196,98,125,24,5,162,14,0,0          // vbroadcastss  0xea2(%rip),%ymm8        # 56f4 <_sk_callback_hsw+0x4d8>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,125,184,203                 // vfmadd231ps   %ymm3,%ymm0,%ymm1
  .byte  196,226,125,24,29,147,14,0,0        // vbroadcastss  0xe93(%rip),%ymm3        # 56f8 <_sk_callback_hsw+0x4dc>
  .byte  196,226,109,168,217                 // vfmadd213ps   %ymm1,%ymm2,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_hsw
.globl _sk_matrix_2x3_hsw
FUNCTION(_sk_matrix_2x3_hsw)
_sk_matrix_2x3_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,12                 // vbroadcastss  0xc(%rax),%ymm11
  .byte  196,98,125,24,72,20                 // vbroadcastss  0x14(%rax),%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_hsw
.globl _sk_matrix_3x4_hsw
FUNCTION(_sk_matrix_3x4_hsw)
_sk_matrix_3x4_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,12                 // vbroadcastss  0xc(%rax),%ymm10
  .byte  196,98,125,24,88,24                 // vbroadcastss  0x18(%rax),%ymm11
  .byte  196,98,125,24,64,36                 // vbroadcastss  0x24(%rax),%ymm8
  .byte  196,66,109,184,195                  // vfmadd231ps   %ymm11,%ymm2,%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,16                 // vbroadcastss  0x10(%rax),%ymm11
  .byte  196,98,125,24,96,28                 // vbroadcastss  0x1c(%rax),%ymm12
  .byte  196,98,125,24,72,40                 // vbroadcastss  0x28(%rax),%ymm9
  .byte  196,66,109,184,204                  // vfmadd231ps   %ymm12,%ymm2,%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,98,125,24,96,20                 // vbroadcastss  0x14(%rax),%ymm12
  .byte  196,98,125,24,104,32                // vbroadcastss  0x20(%rax),%ymm13
  .byte  196,98,125,24,80,44                 // vbroadcastss  0x2c(%rax),%ymm10
  .byte  196,66,109,184,213                  // vfmadd231ps   %ymm13,%ymm2,%ymm10
  .byte  196,66,117,184,212                  // vfmadd231ps   %ymm12,%ymm1,%ymm10
  .byte  196,66,125,184,211                  // vfmadd231ps   %ymm11,%ymm0,%ymm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_hsw
.globl _sk_matrix_4x5_hsw
FUNCTION(_sk_matrix_4x5_hsw)
_sk_matrix_4x5_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,32                 // vbroadcastss  0x20(%rax),%ymm11
  .byte  196,98,125,24,96,48                 // vbroadcastss  0x30(%rax),%ymm12
  .byte  196,98,125,24,64,64                 // vbroadcastss  0x40(%rax),%ymm8
  .byte  196,66,101,184,196                  // vfmadd231ps   %ymm12,%ymm3,%ymm8
  .byte  196,66,109,184,195                  // vfmadd231ps   %ymm11,%ymm2,%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,98,125,24,96,36                 // vbroadcastss  0x24(%rax),%ymm12
  .byte  196,98,125,24,104,52                // vbroadcastss  0x34(%rax),%ymm13
  .byte  196,98,125,24,72,68                 // vbroadcastss  0x44(%rax),%ymm9
  .byte  196,66,101,184,205                  // vfmadd231ps   %ymm13,%ymm3,%ymm9
  .byte  196,66,109,184,204                  // vfmadd231ps   %ymm12,%ymm2,%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,98,125,24,96,24                 // vbroadcastss  0x18(%rax),%ymm12
  .byte  196,98,125,24,104,40                // vbroadcastss  0x28(%rax),%ymm13
  .byte  196,98,125,24,112,56                // vbroadcastss  0x38(%rax),%ymm14
  .byte  196,98,125,24,80,72                 // vbroadcastss  0x48(%rax),%ymm10
  .byte  196,66,101,184,214                  // vfmadd231ps   %ymm14,%ymm3,%ymm10
  .byte  196,66,109,184,213                  // vfmadd231ps   %ymm13,%ymm2,%ymm10
  .byte  196,66,117,184,212                  // vfmadd231ps   %ymm12,%ymm1,%ymm10
  .byte  196,66,125,184,211                  // vfmadd231ps   %ymm11,%ymm0,%ymm10
  .byte  196,98,125,24,96,12                 // vbroadcastss  0xc(%rax),%ymm12
  .byte  196,98,125,24,104,28                // vbroadcastss  0x1c(%rax),%ymm13
  .byte  196,98,125,24,112,44                // vbroadcastss  0x2c(%rax),%ymm14
  .byte  196,98,125,24,120,60                // vbroadcastss  0x3c(%rax),%ymm15
  .byte  196,98,125,24,88,76                 // vbroadcastss  0x4c(%rax),%ymm11
  .byte  196,66,101,184,223                  // vfmadd231ps   %ymm15,%ymm3,%ymm11
  .byte  196,66,109,184,222                  // vfmadd231ps   %ymm14,%ymm2,%ymm11
  .byte  196,66,117,184,221                  // vfmadd231ps   %ymm13,%ymm1,%ymm11
  .byte  196,66,125,184,220                  // vfmadd231ps   %ymm12,%ymm0,%ymm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  197,124,41,219                      // vmovaps       %ymm11,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x3_hsw
.globl _sk_matrix_4x3_hsw
FUNCTION(_sk_matrix_4x3_hsw)
_sk_matrix_4x3_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  196,226,125,24,88,16                // vbroadcastss  0x10(%rax),%ymm3
  .byte  196,98,125,24,64,32                 // vbroadcastss  0x20(%rax),%ymm8
  .byte  196,98,117,184,195                  // vfmadd231ps   %ymm3,%ymm1,%ymm8
  .byte  196,98,125,184,194                  // vfmadd231ps   %ymm2,%ymm0,%ymm8
  .byte  196,226,125,24,80,4                 // vbroadcastss  0x4(%rax),%ymm2
  .byte  196,226,125,24,88,20                // vbroadcastss  0x14(%rax),%ymm3
  .byte  196,98,125,24,72,36                 // vbroadcastss  0x24(%rax),%ymm9
  .byte  196,98,117,184,203                  // vfmadd231ps   %ymm3,%ymm1,%ymm9
  .byte  196,98,125,184,202                  // vfmadd231ps   %ymm2,%ymm0,%ymm9
  .byte  196,226,125,24,88,8                 // vbroadcastss  0x8(%rax),%ymm3
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,226,125,24,80,40                // vbroadcastss  0x28(%rax),%ymm2
  .byte  196,194,117,184,210                 // vfmadd231ps   %ymm10,%ymm1,%ymm2
  .byte  196,226,125,184,211                 // vfmadd231ps   %ymm3,%ymm0,%ymm2
  .byte  196,98,125,24,80,12                 // vbroadcastss  0xc(%rax),%ymm10
  .byte  196,98,125,24,88,28                 // vbroadcastss  0x1c(%rax),%ymm11
  .byte  196,226,125,24,88,44                // vbroadcastss  0x2c(%rax),%ymm3
  .byte  196,194,117,184,219                 // vfmadd231ps   %ymm11,%ymm1,%ymm3
  .byte  196,194,125,184,218                 // vfmadd231ps   %ymm10,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_hsw
.globl _sk_matrix_perspective_hsw
FUNCTION(_sk_matrix_perspective_hsw)
_sk_matrix_perspective_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,66,117,184,209                  // vfmadd231ps   %ymm9,%ymm1,%ymm10
  .byte  196,66,125,184,208                  // vfmadd231ps   %ymm8,%ymm0,%ymm10
  .byte  196,98,125,24,64,12                 // vbroadcastss  0xc(%rax),%ymm8
  .byte  196,98,125,24,72,16                 // vbroadcastss  0x10(%rax),%ymm9
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,66,117,184,217                  // vfmadd231ps   %ymm9,%ymm1,%ymm11
  .byte  196,66,125,184,216                  // vfmadd231ps   %ymm8,%ymm0,%ymm11
  .byte  196,98,125,24,64,24                 // vbroadcastss  0x18(%rax),%ymm8
  .byte  196,98,125,24,72,28                 // vbroadcastss  0x1c(%rax),%ymm9
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  196,66,117,184,225                  // vfmadd231ps   %ymm9,%ymm1,%ymm12
  .byte  196,66,125,184,224                  // vfmadd231ps   %ymm8,%ymm0,%ymm12
  .byte  196,193,124,83,204                  // vrcpps        %ymm12,%ymm1
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_gradient_hsw
.globl _sk_evenly_spaced_gradient_hsw
FUNCTION(_sk_evenly_spaced_gradient_hsw)
_sk_evenly_spaced_gradient_hsw:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  77,137,211                          // mov           %r10,%r11
  .byte  73,255,203                          // dec           %r11
  .byte  120,7                               // js            4b1e <_sk_evenly_spaced_gradient_hsw+0x19>
  .byte  196,193,242,42,203                  // vcvtsi2ss     %r11,%xmm1,%xmm1
  .byte  235,22                              // jmp           4b34 <_sk_evenly_spaced_gradient_hsw+0x2f>
  .byte  76,137,219                          // mov           %r11,%rbx
  .byte  72,209,235                          // shr           %rbx
  .byte  65,131,227,1                        // and           $0x1,%r11d
  .byte  73,9,219                            // or            %rbx,%r11
  .byte  196,193,242,42,203                  // vcvtsi2ss     %r11,%xmm1,%xmm1
  .byte  197,242,88,201                      // vaddss        %xmm1,%xmm1,%xmm1
  .byte  196,226,125,24,201                  // vbroadcastss  %xmm1,%ymm1
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,126,91,217                      // vcvttps2dq    %ymm1,%ymm11
  .byte  73,131,250,8                        // cmp           $0x8,%r10
  .byte  119,70                              // ja            4b8d <_sk_evenly_spaced_gradient_hsw+0x88>
  .byte  196,66,37,22,1                      // vpermps       (%r9),%ymm11,%ymm8
  .byte  72,139,88,40                        // mov           0x28(%rax),%rbx
  .byte  196,98,37,22,11                     // vpermps       (%rbx),%ymm11,%ymm9
  .byte  72,139,88,16                        // mov           0x10(%rax),%rbx
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  196,226,37,22,11                    // vpermps       (%rbx),%ymm11,%ymm1
  .byte  72,139,88,48                        // mov           0x30(%rax),%rbx
  .byte  196,98,37,22,19                     // vpermps       (%rbx),%ymm11,%ymm10
  .byte  196,194,37,22,17                    // vpermps       (%r9),%ymm11,%ymm2
  .byte  72,139,88,56                        // mov           0x38(%rax),%rbx
  .byte  196,98,37,22,35                     // vpermps       (%rbx),%ymm11,%ymm12
  .byte  72,139,88,32                        // mov           0x20(%rax),%rbx
  .byte  196,226,37,22,27                    // vpermps       (%rbx),%ymm11,%ymm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,98,37,22,40                     // vpermps       (%rax),%ymm11,%ymm13
  .byte  235,110                             // jmp           4bfb <_sk_evenly_spaced_gradient_hsw+0xf6>
  .byte  196,65,13,118,246                   // vpcmpeqd      %ymm14,%ymm14,%ymm14
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,2,117,146,4,153                 // vgatherdps    %ymm1,(%r9,%ymm11,4),%ymm8
  .byte  72,139,88,40                        // mov           0x28(%rax),%rbx
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,34,117,146,12,155               // vgatherdps    %ymm1,(%rbx,%ymm11,4),%ymm9
  .byte  72,139,88,16                        // mov           0x10(%rax),%rbx
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,162,109,146,12,155              // vgatherdps    %ymm2,(%rbx,%ymm11,4),%ymm1
  .byte  72,139,88,48                        // mov           0x30(%rax),%rbx
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,34,109,146,20,155               // vgatherdps    %ymm2,(%rbx,%ymm11,4),%ymm10
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  196,130,101,146,20,153              // vgatherdps    %ymm3,(%r9,%ymm11,4),%ymm2
  .byte  72,139,88,56                        // mov           0x38(%rax),%rbx
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  196,34,101,146,36,155               // vgatherdps    %ymm3,(%rbx,%ymm11,4),%ymm12
  .byte  72,139,88,32                        // mov           0x20(%rax),%rbx
  .byte  196,65,21,118,237                   // vpcmpeqd      %ymm13,%ymm13,%ymm13
  .byte  196,162,21,146,28,155               // vgatherdps    %ymm13,(%rbx,%ymm11,4),%ymm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,34,13,146,44,152                // vgatherdps    %ymm14,(%rax,%ymm11,4),%ymm13
  .byte  196,66,125,168,193                  // vfmadd213ps   %ymm9,%ymm0,%ymm8
  .byte  196,194,125,168,202                 // vfmadd213ps   %ymm10,%ymm0,%ymm1
  .byte  196,194,125,168,212                 // vfmadd213ps   %ymm12,%ymm0,%ymm2
  .byte  196,194,125,168,221                 // vfmadd213ps   %ymm13,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gauss_a_to_rgba_hsw
.globl _sk_gauss_a_to_rgba_hsw
FUNCTION(_sk_gauss_a_to_rgba_hsw)
_sk_gauss_a_to_rgba_hsw:
  .byte  196,226,125,24,5,219,10,0,0         // vbroadcastss  0xadb(%rip),%ymm0        # 56fc <_sk_callback_hsw+0x4e0>
  .byte  196,226,125,24,13,214,10,0,0        // vbroadcastss  0xad6(%rip),%ymm1        # 5700 <_sk_callback_hsw+0x4e4>
  .byte  196,226,101,168,200                 // vfmadd213ps   %ymm0,%ymm3,%ymm1
  .byte  196,226,125,24,5,204,10,0,0         // vbroadcastss  0xacc(%rip),%ymm0        # 5704 <_sk_callback_hsw+0x4e8>
  .byte  196,226,101,184,193                 // vfmadd231ps   %ymm1,%ymm3,%ymm0
  .byte  196,226,125,24,13,194,10,0,0        // vbroadcastss  0xac2(%rip),%ymm1        # 5708 <_sk_callback_hsw+0x4ec>
  .byte  196,226,101,184,200                 // vfmadd231ps   %ymm0,%ymm3,%ymm1
  .byte  196,226,125,24,5,184,10,0,0         // vbroadcastss  0xab8(%rip),%ymm0        # 570c <_sk_callback_hsw+0x4f0>
  .byte  196,226,101,184,193                 // vfmadd231ps   %ymm1,%ymm3,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,252,40,216                      // vmovaps       %ymm0,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_hsw
.globl _sk_gradient_hsw
FUNCTION(_sk_gradient_hsw)
_sk_gradient_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  73,131,249,1                        // cmp           $0x1,%r9
  .byte  15,134,180,0,0,0                    // jbe           4d2c <_sk_gradient_hsw+0xc3>
  .byte  76,139,80,72                        // mov           0x48(%rax),%r10
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  65,187,1,0,0,0                      // mov           $0x1,%r11d
  .byte  196,226,125,24,21,129,10,0,0        // vbroadcastss  0xa81(%rip),%ymm2        # 5710 <_sk_callback_hsw+0x4f4>
  .byte  196,65,53,239,201                   // vpxor         %ymm9,%ymm9,%ymm9
  .byte  196,130,125,24,28,154               // vbroadcastss  (%r10,%r11,4),%ymm3
  .byte  197,228,194,216,2                   // vcmpleps      %ymm0,%ymm3,%ymm3
  .byte  196,227,117,74,218,48               // vblendvps     %ymm3,%ymm2,%ymm1,%ymm3
  .byte  196,65,101,254,201                  // vpaddd        %ymm9,%ymm3,%ymm9
  .byte  73,255,195                          // inc           %r11
  .byte  77,57,217                           // cmp           %r11,%r9
  .byte  117,226                             // jne           4c94 <_sk_gradient_hsw+0x2b>
  .byte  76,139,80,8                         // mov           0x8(%rax),%r10
  .byte  73,131,249,8                        // cmp           $0x8,%r9
  .byte  118,121                             // jbe           4d35 <_sk_gradient_hsw+0xcc>
  .byte  196,65,13,118,246                   // vpcmpeqd      %ymm14,%ymm14,%ymm14
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,2,117,146,4,138                 // vgatherdps    %ymm1,(%r10,%ymm9,4),%ymm8
  .byte  76,139,72,40                        // mov           0x28(%rax),%r9
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,2,117,146,20,137                // vgatherdps    %ymm1,(%r9,%ymm9,4),%ymm10
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,130,109,146,12,137              // vgatherdps    %ymm2,(%r9,%ymm9,4),%ymm1
  .byte  76,139,72,48                        // mov           0x30(%rax),%r9
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,2,109,146,28,137                // vgatherdps    %ymm2,(%r9,%ymm9,4),%ymm11
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  196,130,101,146,20,138              // vgatherdps    %ymm3,(%r10,%ymm9,4),%ymm2
  .byte  76,139,72,56                        // mov           0x38(%rax),%r9
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  196,2,101,146,36,137                // vgatherdps    %ymm3,(%r9,%ymm9,4),%ymm12
  .byte  76,139,72,32                        // mov           0x20(%rax),%r9
  .byte  196,65,21,118,237                   // vpcmpeqd      %ymm13,%ymm13,%ymm13
  .byte  196,130,21,146,28,137               // vgatherdps    %ymm13,(%r9,%ymm9,4),%ymm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,34,13,146,44,136                // vgatherdps    %ymm14,(%rax,%ymm9,4),%ymm13
  .byte  235,77                              // jmp           4d79 <_sk_gradient_hsw+0x110>
  .byte  76,139,80,8                         // mov           0x8(%rax),%r10
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  196,66,53,22,2                      // vpermps       (%r10),%ymm9,%ymm8
  .byte  76,139,72,40                        // mov           0x28(%rax),%r9
  .byte  196,66,53,22,17                     // vpermps       (%r9),%ymm9,%ymm10
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,194,53,22,9                     // vpermps       (%r9),%ymm9,%ymm1
  .byte  76,139,72,48                        // mov           0x30(%rax),%r9
  .byte  196,66,53,22,25                     // vpermps       (%r9),%ymm9,%ymm11
  .byte  196,194,53,22,18                    // vpermps       (%r10),%ymm9,%ymm2
  .byte  76,139,72,56                        // mov           0x38(%rax),%r9
  .byte  196,66,53,22,33                     // vpermps       (%r9),%ymm9,%ymm12
  .byte  76,139,72,32                        // mov           0x20(%rax),%r9
  .byte  196,194,53,22,25                    // vpermps       (%r9),%ymm9,%ymm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,98,53,22,40                     // vpermps       (%rax),%ymm9,%ymm13
  .byte  196,66,125,168,194                  // vfmadd213ps   %ymm10,%ymm0,%ymm8
  .byte  196,194,125,168,203                 // vfmadd213ps   %ymm11,%ymm0,%ymm1
  .byte  196,194,125,168,212                 // vfmadd213ps   %ymm12,%ymm0,%ymm2
  .byte  196,194,125,168,221                 // vfmadd213ps   %ymm13,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_hsw
.globl _sk_evenly_spaced_2_stop_gradient_hsw
FUNCTION(_sk_evenly_spaced_2_stop_gradient_hsw)
_sk_evenly_spaced_2_stop_gradient_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,98,125,184,193                  // vfmadd231ps   %ymm1,%ymm0,%ymm8
  .byte  196,226,125,24,80,4                 // vbroadcastss  0x4(%rax),%ymm2
  .byte  196,226,125,24,72,20                // vbroadcastss  0x14(%rax),%ymm1
  .byte  196,226,125,184,202                 // vfmadd231ps   %ymm2,%ymm0,%ymm1
  .byte  196,226,125,24,88,8                 // vbroadcastss  0x8(%rax),%ymm3
  .byte  196,226,125,24,80,24                // vbroadcastss  0x18(%rax),%ymm2
  .byte  196,226,125,184,211                 // vfmadd231ps   %ymm3,%ymm0,%ymm2
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,226,125,24,88,28                // vbroadcastss  0x1c(%rax),%ymm3
  .byte  196,194,125,184,217                 // vfmadd231ps   %ymm9,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_hsw
.globl _sk_xy_to_unit_angle_hsw
FUNCTION(_sk_xy_to_unit_angle_hsw)
_sk_xy_to_unit_angle_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,200                       // vsubps        %ymm0,%ymm8,%ymm9
  .byte  197,52,84,200                       // vandps        %ymm0,%ymm9,%ymm9
  .byte  197,60,92,209                       // vsubps        %ymm1,%ymm8,%ymm10
  .byte  197,44,84,209                       // vandps        %ymm1,%ymm10,%ymm10
  .byte  196,65,52,93,218                    // vminps        %ymm10,%ymm9,%ymm11
  .byte  196,65,52,95,226                    // vmaxps        %ymm10,%ymm9,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  196,65,36,89,227                    // vmulps        %ymm11,%ymm11,%ymm12
  .byte  196,98,125,24,45,0,9,0,0            // vbroadcastss  0x900(%rip),%ymm13        # 5714 <_sk_callback_hsw+0x4f8>
  .byte  196,98,125,24,53,251,8,0,0          // vbroadcastss  0x8fb(%rip),%ymm14        # 5718 <_sk_callback_hsw+0x4fc>
  .byte  196,66,29,184,245                   // vfmadd231ps   %ymm13,%ymm12,%ymm14
  .byte  196,98,125,24,45,241,8,0,0          // vbroadcastss  0x8f1(%rip),%ymm13        # 571c <_sk_callback_hsw+0x500>
  .byte  196,66,29,184,238                   // vfmadd231ps   %ymm14,%ymm12,%ymm13
  .byte  196,98,125,24,53,231,8,0,0          // vbroadcastss  0x8e7(%rip),%ymm14        # 5720 <_sk_callback_hsw+0x504>
  .byte  196,66,29,184,245                   // vfmadd231ps   %ymm13,%ymm12,%ymm14
  .byte  196,65,36,89,222                    // vmulps        %ymm14,%ymm11,%ymm11
  .byte  196,65,52,194,202,1                 // vcmpltps      %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,210,8,0,0          // vbroadcastss  0x8d2(%rip),%ymm10        # 5724 <_sk_callback_hsw+0x508>
  .byte  196,65,44,92,211                    // vsubps        %ymm11,%ymm10,%ymm10
  .byte  196,67,37,74,202,144                // vblendvps     %ymm9,%ymm10,%ymm11,%ymm9
  .byte  196,193,124,194,192,1               // vcmpltps      %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,21,188,8,0,0          // vbroadcastss  0x8bc(%rip),%ymm10        # 5728 <_sk_callback_hsw+0x50c>
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  196,65,116,194,200,1                // vcmpltps      %ymm8,%ymm1,%ymm9
  .byte  196,98,125,24,21,166,8,0,0          // vbroadcastss  0x8a6(%rip),%ymm10        # 572c <_sk_callback_hsw+0x510>
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  196,195,125,74,194,144              // vblendvps     %ymm9,%ymm10,%ymm0,%ymm0
  .byte  196,65,124,194,200,3                // vcmpunordps   %ymm8,%ymm0,%ymm9
  .byte  196,195,125,74,192,144              // vblendvps     %ymm9,%ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_hsw
.globl _sk_xy_to_radius_hsw
FUNCTION(_sk_xy_to_radius_hsw)
_sk_xy_to_radius_hsw:
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,98,125,184,192                  // vfmadd231ps   %ymm0,%ymm0,%ymm8
  .byte  196,193,124,81,192                  // vsqrtps       %ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_hsw
.globl _sk_save_xy_hsw
FUNCTION(_sk_save_xy_hsw)
_sk_save_xy_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,115,8,0,0           // vbroadcastss  0x873(%rip),%ymm8        # 5730 <_sk_callback_hsw+0x514>
  .byte  196,65,124,88,200                   // vaddps        %ymm8,%ymm0,%ymm9
  .byte  196,67,125,8,209,1                  // vroundps      $0x1,%ymm9,%ymm10
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,88,192                   // vaddps        %ymm8,%ymm1,%ymm8
  .byte  196,67,125,8,208,1                  // vroundps      $0x1,%ymm8,%ymm10
  .byte  196,65,60,92,194                    // vsubps        %ymm10,%ymm8,%ymm8
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,124,17,72,64                    // vmovups       %ymm9,0x40(%rax)
  .byte  197,124,17,64,96                    // vmovups       %ymm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_hsw
.globl _sk_accumulate_hsw
FUNCTION(_sk_accumulate_hsw)
_sk_accumulate_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,16,128,128,0,0,0            // vmovups       0x80(%rax),%ymm8
  .byte  197,60,89,128,160,0,0,0             // vmulps        0xa0(%rax),%ymm8,%ymm8
  .byte  196,226,61,184,224                  // vfmadd231ps   %ymm0,%ymm8,%ymm4
  .byte  196,226,61,184,233                  // vfmadd231ps   %ymm1,%ymm8,%ymm5
  .byte  196,226,61,184,242                  // vfmadd231ps   %ymm2,%ymm8,%ymm6
  .byte  196,98,101,168,199                  // vfmadd213ps   %ymm7,%ymm3,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,199                      // vmovaps       %ymm8,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_hsw
.globl _sk_bilinear_nx_hsw
FUNCTION(_sk_bilinear_nx_hsw)
_sk_bilinear_nx_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,7,8,0,0            // vbroadcastss  0x807(%rip),%ymm0        # 5734 <_sk_callback_hsw+0x518>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,254,7,0,0           // vbroadcastss  0x7fe(%rip),%ymm8        # 5738 <_sk_callback_hsw+0x51c>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_hsw
.globl _sk_bilinear_px_hsw
FUNCTION(_sk_bilinear_px_hsw)
_sk_bilinear_px_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,230,7,0,0          // vbroadcastss  0x7e6(%rip),%ymm0        # 573c <_sk_callback_hsw+0x520>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_hsw
.globl _sk_bilinear_ny_hsw
FUNCTION(_sk_bilinear_ny_hsw)
_sk_bilinear_ny_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,202,7,0,0         // vbroadcastss  0x7ca(%rip),%ymm1        # 5740 <_sk_callback_hsw+0x524>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,192,7,0,0           // vbroadcastss  0x7c0(%rip),%ymm8        # 5744 <_sk_callback_hsw+0x528>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_hsw
.globl _sk_bilinear_py_hsw
FUNCTION(_sk_bilinear_py_hsw)
_sk_bilinear_py_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,168,7,0,0         // vbroadcastss  0x7a8(%rip),%ymm1        # 5748 <_sk_callback_hsw+0x52c>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_hsw
.globl _sk_bicubic_n3x_hsw
FUNCTION(_sk_bicubic_n3x_hsw)
_sk_bicubic_n3x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,139,7,0,0          // vbroadcastss  0x78b(%rip),%ymm0        # 574c <_sk_callback_hsw+0x530>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,130,7,0,0           // vbroadcastss  0x782(%rip),%ymm8        # 5750 <_sk_callback_hsw+0x534>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,115,7,0,0          // vbroadcastss  0x773(%rip),%ymm10        # 5754 <_sk_callback_hsw+0x538>
  .byte  196,98,125,24,29,110,7,0,0          // vbroadcastss  0x76e(%rip),%ymm11        # 5758 <_sk_callback_hsw+0x53c>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,36,89,193                    // vmulps        %ymm9,%ymm11,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_hsw
.globl _sk_bicubic_n1x_hsw
FUNCTION(_sk_bicubic_n1x_hsw)
_sk_bicubic_n1x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,81,7,0,0           // vbroadcastss  0x751(%rip),%ymm0        # 575c <_sk_callback_hsw+0x540>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,72,7,0,0            // vbroadcastss  0x748(%rip),%ymm8        # 5760 <_sk_callback_hsw+0x544>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,62,7,0,0           // vbroadcastss  0x73e(%rip),%ymm9        # 5764 <_sk_callback_hsw+0x548>
  .byte  196,98,125,24,21,57,7,0,0           // vbroadcastss  0x739(%rip),%ymm10        # 5768 <_sk_callback_hsw+0x54c>
  .byte  196,66,61,168,209                   // vfmadd213ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,13,47,7,0,0           // vbroadcastss  0x72f(%rip),%ymm9        # 576c <_sk_callback_hsw+0x550>
  .byte  196,66,61,184,202                   // vfmadd231ps   %ymm10,%ymm8,%ymm9
  .byte  196,98,125,24,21,37,7,0,0           // vbroadcastss  0x725(%rip),%ymm10        # 5770 <_sk_callback_hsw+0x554>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  197,124,17,144,128,0,0,0            // vmovups       %ymm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_hsw
.globl _sk_bicubic_p1x_hsw
FUNCTION(_sk_bicubic_p1x_hsw)
_sk_bicubic_p1x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,13,7,0,0            // vbroadcastss  0x70d(%rip),%ymm8        # 5774 <_sk_callback_hsw+0x558>
  .byte  197,188,88,0                        // vaddps        (%rax),%ymm8,%ymm0
  .byte  197,124,16,72,64                    // vmovups       0x40(%rax),%ymm9
  .byte  196,98,125,24,21,255,6,0,0          // vbroadcastss  0x6ff(%rip),%ymm10        # 5778 <_sk_callback_hsw+0x55c>
  .byte  196,98,125,24,29,250,6,0,0          // vbroadcastss  0x6fa(%rip),%ymm11        # 577c <_sk_callback_hsw+0x560>
  .byte  196,66,53,168,218                   // vfmadd213ps   %ymm10,%ymm9,%ymm11
  .byte  196,66,53,168,216                   // vfmadd213ps   %ymm8,%ymm9,%ymm11
  .byte  196,98,125,24,5,235,6,0,0           // vbroadcastss  0x6eb(%rip),%ymm8        # 5780 <_sk_callback_hsw+0x564>
  .byte  196,66,53,184,195                   // vfmadd231ps   %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_hsw
.globl _sk_bicubic_p3x_hsw
FUNCTION(_sk_bicubic_p3x_hsw)
_sk_bicubic_p3x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,211,6,0,0          // vbroadcastss  0x6d3(%rip),%ymm0        # 5784 <_sk_callback_hsw+0x568>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,192,6,0,0          // vbroadcastss  0x6c0(%rip),%ymm10        # 5788 <_sk_callback_hsw+0x56c>
  .byte  196,98,125,24,29,187,6,0,0          // vbroadcastss  0x6bb(%rip),%ymm11        # 578c <_sk_callback_hsw+0x570>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,52,89,195                    // vmulps        %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_hsw
.globl _sk_bicubic_n3y_hsw
FUNCTION(_sk_bicubic_n3y_hsw)
_sk_bicubic_n3y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,158,6,0,0         // vbroadcastss  0x69e(%rip),%ymm1        # 5790 <_sk_callback_hsw+0x574>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,148,6,0,0           // vbroadcastss  0x694(%rip),%ymm8        # 5794 <_sk_callback_hsw+0x578>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,133,6,0,0          // vbroadcastss  0x685(%rip),%ymm10        # 5798 <_sk_callback_hsw+0x57c>
  .byte  196,98,125,24,29,128,6,0,0          // vbroadcastss  0x680(%rip),%ymm11        # 579c <_sk_callback_hsw+0x580>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,36,89,193                    // vmulps        %ymm9,%ymm11,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_hsw
.globl _sk_bicubic_n1y_hsw
FUNCTION(_sk_bicubic_n1y_hsw)
_sk_bicubic_n1y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,99,6,0,0          // vbroadcastss  0x663(%rip),%ymm1        # 57a0 <_sk_callback_hsw+0x584>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,89,6,0,0            // vbroadcastss  0x659(%rip),%ymm8        # 57a4 <_sk_callback_hsw+0x588>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,79,6,0,0           // vbroadcastss  0x64f(%rip),%ymm9        # 57a8 <_sk_callback_hsw+0x58c>
  .byte  196,98,125,24,21,74,6,0,0           // vbroadcastss  0x64a(%rip),%ymm10        # 57ac <_sk_callback_hsw+0x590>
  .byte  196,66,61,168,209                   // vfmadd213ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,13,64,6,0,0           // vbroadcastss  0x640(%rip),%ymm9        # 57b0 <_sk_callback_hsw+0x594>
  .byte  196,66,61,184,202                   // vfmadd231ps   %ymm10,%ymm8,%ymm9
  .byte  196,98,125,24,21,54,6,0,0           // vbroadcastss  0x636(%rip),%ymm10        # 57b4 <_sk_callback_hsw+0x598>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  197,124,17,144,160,0,0,0            // vmovups       %ymm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_hsw
.globl _sk_bicubic_p1y_hsw
FUNCTION(_sk_bicubic_p1y_hsw)
_sk_bicubic_p1y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,30,6,0,0            // vbroadcastss  0x61e(%rip),%ymm8        # 57b8 <_sk_callback_hsw+0x59c>
  .byte  197,188,88,72,32                    // vaddps        0x20(%rax),%ymm8,%ymm1
  .byte  197,124,16,72,96                    // vmovups       0x60(%rax),%ymm9
  .byte  196,98,125,24,21,15,6,0,0           // vbroadcastss  0x60f(%rip),%ymm10        # 57bc <_sk_callback_hsw+0x5a0>
  .byte  196,98,125,24,29,10,6,0,0           // vbroadcastss  0x60a(%rip),%ymm11        # 57c0 <_sk_callback_hsw+0x5a4>
  .byte  196,66,53,168,218                   // vfmadd213ps   %ymm10,%ymm9,%ymm11
  .byte  196,66,53,168,216                   // vfmadd213ps   %ymm8,%ymm9,%ymm11
  .byte  196,98,125,24,5,251,5,0,0           // vbroadcastss  0x5fb(%rip),%ymm8        # 57c4 <_sk_callback_hsw+0x5a8>
  .byte  196,66,53,184,195                   // vfmadd231ps   %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_hsw
.globl _sk_bicubic_p3y_hsw
FUNCTION(_sk_bicubic_p3y_hsw)
_sk_bicubic_p3y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,227,5,0,0         // vbroadcastss  0x5e3(%rip),%ymm1        # 57c8 <_sk_callback_hsw+0x5ac>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,207,5,0,0          // vbroadcastss  0x5cf(%rip),%ymm10        # 57cc <_sk_callback_hsw+0x5b0>
  .byte  196,98,125,24,29,202,5,0,0          // vbroadcastss  0x5ca(%rip),%ymm11        # 57d0 <_sk_callback_hsw+0x5b4>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,52,89,195                    // vmulps        %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_hsw
.globl _sk_callback_hsw
FUNCTION(_sk_callback_hsw)
_sk_callback_hsw:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,228,224                      // and           $0xffffffffffffffe0,%rsp
  .byte  72,129,236,192,0,0,0                // sub           $0xc0,%rsp
  .byte  197,252,41,188,36,128,0,0,0         // vmovaps       %ymm7,0x80(%rsp)
  .byte  197,252,41,116,36,96                // vmovaps       %ymm6,0x60(%rsp)
  .byte  197,252,41,108,36,64                // vmovaps       %ymm5,0x40(%rsp)
  .byte  197,252,41,100,36,32                // vmovaps       %ymm4,0x20(%rsp)
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  72,137,76,36,24                     // mov           %rcx,0x18(%rsp)
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,252                          // mov           %rdi,%r12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,193                      // vunpckhps     %ymm1,%ymm0,%ymm0
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,211                      // vunpckhps     %ymm3,%ymm2,%ymm2
  .byte  197,221,20,217                      // vunpcklpd     %ymm1,%ymm4,%ymm3
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,253,20,226                      // vunpcklpd     %ymm2,%ymm0,%ymm4
  .byte  197,253,21,194                      // vunpckhpd     %ymm2,%ymm0,%ymm0
  .byte  196,227,101,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm2
  .byte  196,227,93,24,232,1                 // vinsertf128   $0x1,%xmm0,%ymm4,%ymm5
  .byte  196,227,101,6,201,49                // vperm2f128    $0x31,%ymm1,%ymm3,%ymm1
  .byte  196,227,93,6,192,49                 // vperm2f128    $0x31,%ymm0,%ymm4,%ymm0
  .byte  196,193,125,17,86,8                 // vmovupd       %ymm2,0x8(%r14)
  .byte  196,193,125,17,110,40               // vmovupd       %ymm5,0x28(%r14)
  .byte  196,193,125,17,78,72                // vmovupd       %ymm1,0x48(%r14)
  .byte  196,193,125,17,70,104               // vmovupd       %ymm0,0x68(%r14)
  .byte  72,133,219                          // test          %rbx,%rbx
  .byte  190,8,0,0,0                         // mov           $0x8,%esi
  .byte  15,69,243                           // cmovne        %ebx,%esi
  .byte  76,137,247                          // mov           %r14,%rdi
  .byte  197,248,119                         // vzeroupper
  .byte  65,255,22                           // callq         *(%r14)
  .byte  73,139,134,136,0,0,0                // mov           0x88(%r14),%rax
  .byte  197,248,16,0                        // vmovups       (%rax),%xmm0
  .byte  197,248,16,72,16                    // vmovups       0x10(%rax),%xmm1
  .byte  197,248,16,80,32                    // vmovups       0x20(%rax),%xmm2
  .byte  197,248,16,88,48                    // vmovups       0x30(%rax),%xmm3
  .byte  196,227,101,24,88,112,1             // vinsertf128   $0x1,0x70(%rax),%ymm3,%ymm3
  .byte  196,227,109,24,80,96,1              // vinsertf128   $0x1,0x60(%rax),%ymm2,%ymm2
  .byte  196,227,117,24,72,80,1              // vinsertf128   $0x1,0x50(%rax),%ymm1,%ymm1
  .byte  196,227,125,24,64,64,1              // vinsertf128   $0x1,0x40(%rax),%ymm0,%ymm0
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,233                      // vunpckhps     %ymm1,%ymm0,%ymm5
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,219                      // vunpckhps     %ymm3,%ymm2,%ymm3
  .byte  197,221,20,193                      // vunpcklpd     %ymm1,%ymm4,%ymm0
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,213,20,211                      // vunpcklpd     %ymm3,%ymm5,%ymm2
  .byte  197,213,21,219                      // vunpckhpd     %ymm3,%ymm5,%ymm3
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,250                          // mov           %r15,%rdx
  .byte  72,139,76,36,24                     // mov           0x18(%rsp),%rcx
  .byte  73,137,216                          // mov           %rbx,%r8
  .byte  197,252,40,100,36,32                // vmovaps       0x20(%rsp),%ymm4
  .byte  197,252,40,108,36,64                // vmovaps       0x40(%rsp),%ymm5
  .byte  197,252,40,116,36,96                // vmovaps       0x60(%rsp),%ymm6
  .byte  197,252,40,188,36,128,0,0,0         // vmovaps       0x80(%rsp),%ymm7
  .byte  72,141,101,216                      // lea           -0x28(%rbp),%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,128,63                      // mov           $0x3f800000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,224                   // add           %al,-0x1fffff41(%rax)
  .byte  64,154                              // rex           (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 5411 <.literal4+0xb1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 5421 <.literal4+0xc1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 5431 <.literal4+0xd1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 5441 <.literal4+0xe1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%rax)
  .byte  67,0,0                              // rex.XB        add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,145                          // cmpb          $0x91,(%rdi)
  .byte  131,158,61,92,143,50,63             // sbbl          $0x3f,0x328f5c3d(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,10,215                           // ds            or  %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,145,131,158,61                   // cmp           $0x3d9e8391,%eax
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,10,215                           // ds            or  %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,82,184,78,65                     // cmp           $0x414eb852,%eax
  .byte  186,159,98,60,57                    // mov           $0x393c629f,%edx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  32,187,109,165,144,63               // and           %bh,0x3f90a56d(%rbx)
  .byte  252                                 // cld
  .byte  191,16,62,168,177                   // mov           $0xb1a83e10,%edi
  .byte  152                                 // cwtl
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,128,64,171,170,42                 // add           %al,0x2aaaab40(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,64,171                            // add           %al,-0x55(%rax)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,129,128,128,59                  // mov           $0x3b808081,%esi
  .byte  129,128,128,59,0,248,0,0,8,33       // addl          $0x21080000,-0x7ffc480(%rax)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        54b1 <.literal4+0x151>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,129,128,128,59              // and           %eax,0x3b808081(,%rdi,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  0,52,255                            // add           %dh,(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            54d8 <.literal4+0x178>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5551 <.literal4+0x1f1>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            550c <.literal4+0x1ac>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5585 <.literal4+0x225>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5540 <.literal4+0x1e0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            55b9 <.literal4+0x259>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5574 <.literal4+0x214>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            55ed <.literal4+0x28d>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,200                    // add           %al,-0x37ffffc1(%rax)
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  127,67                              // jg            55eb <.literal4+0x28b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,203,61,13       // movabs        %eax,0xd3dcb3c1118c23b
  .byte  190,80,128,3,62                     // mov           $0x3e038050,%esi
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           560b <.literal4+0x2ab>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  129,128,128,59,0,0,128,63,129,128   // addl          $0x80813f80,0x3b80(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,128,63,129,128,128                // add           %al,-0x7f7f7ec1(%rax)
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  0,128,63,129,128,128                // add           %al,-0x7f7f7ec1(%rax)
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        560d <.literal4+0x2ad>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5629 <.literal4+0x2c9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5645 <.literal4+0x2e5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            569a <.literal4+0x33a>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,240                // mov           %ecx,-0xfffc278(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,240                // mov           %ecx,-0xfffc278(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,0                  // mov           %ecx,0x3d88(%rax)
  .byte  112,65                              // jo            56fd <.literal4+0x39d>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            5723 <.literal4+0x3c3>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,0                     // add           %al,0xbf(%rax)
  .byte  63                                  // (bad)
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,18,120,57                // fstl          0x3978123d(%rbx)
  .byte  64,45,16,17,192,32                  // rex           sub $0x20c01110,%eax
  .byte  148                                 // xchg          %eax,%esp
  .byte  90                                  // pop           %rdx
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,0,24                             // add           %bl,%ds:(%rax)
  .byte  161,57,1,0,0,0,111,43,231           // movabs        0xe72b6f0000000139,%eax
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,169,240,34,62                   // mov           $0x3e22f0a9,%ebp
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,171              // sarb          $0xab,0x3f800000(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,57,142,99,61                    // mov           $0x3d638e39,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,171                          // sarb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,171              // sarb          $0xab,0x3f800000(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,57,142,99,61                    // mov           $0x3d638e39,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,171                          // sarb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi

BALIGN32
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005808 <_sk_callback_hsw+0xa0005ec>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12005810 <_sk_callback_hsw+0x120005f4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a005818 <_sk_callback_hsw+0x1a0005fc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3005820 <_sk_callback_hsw+0x3000604>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005868 <_sk_callback_hsw+0xa00064c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12005870 <_sk_callback_hsw+0x12000654>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a005878 <_sk_callback_hsw+0x1a00065c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3005880 <_sk_callback_hsw+0x3000664>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a0058c8 <_sk_callback_hsw+0xa0006ac>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 120058d0 <_sk_callback_hsw+0x120006b4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a0058d8 <_sk_callback_hsw+0x1a0006bc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 30058e0 <_sk_callback_hsw+0x30006c4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005928 <_sk_callback_hsw+0xa00070c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12005930 <_sk_callback_hsw+0x12000714>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a005938 <_sk_callback_hsw+0x1a00071c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3005940 <_sk_callback_hsw+0x3000724>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005988 <_sk_callback_hsw+0xa00076c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12005990 <_sk_callback_hsw+0x12000774>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a005998 <_sk_callback_hsw+0x1a00077c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 30059a0 <_sk_callback_hsw+0x3000784>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a0059e8 <_sk_callback_hsw+0xa0007cc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 120059f0 <_sk_callback_hsw+0x120007d4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a0059f8 <_sk_callback_hsw+0x1a0007dc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3005a00 <_sk_callback_hsw+0x30007e4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

BALIGN16
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
BALIGN32

HIDDEN _sk_start_pipeline_avx
.globl _sk_start_pipeline_avx
FUNCTION(_sk_start_pipeline_avx)
_sk_start_pipeline_avx:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,137,208                          // mov           %rdx,%r8
  .byte  72,137,243                          // mov           %rsi,%rbx
  .byte  73,137,254                          // mov           %rdi,%r14
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,197                          // mov           %rax,%r13
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  73,141,78,8                         // lea           0x8(%r14),%rcx
  .byte  76,57,193                           // cmp           %r8,%rcx
  .byte  118,5                               // jbe           33 <_sk_start_pipeline_avx+0x33>
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  235,42                              // jmp           5d <_sk_start_pipeline_avx+0x5d>
  .byte  76,137,69,208                       // mov           %r8,-0x30(%rbp)
  .byte  69,49,192                           // xor           %r8d,%r8d
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  72,137,217                          // mov           %rbx,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,139,69,208                       // mov           -0x30(%rbp),%r8
  .byte  73,141,86,8                         // lea           0x8(%r14),%rdx
  .byte  73,131,198,16                       // add           $0x10,%r14
  .byte  77,57,198                           // cmp           %r8,%r14
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  118,218                             // jbe           37 <_sk_start_pipeline_avx+0x37>
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,12                              // je            6e <_sk_start_pipeline_avx+0x6e>
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  72,137,217                          // mov           %rbx,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  197,248,119                         // vzeroupper
  .byte  195                                 // retq

HIDDEN _sk_just_return_avx
.globl _sk_just_return_avx
FUNCTION(_sk_just_return_avx)
_sk_just_return_avx:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_avx
.globl _sk_seed_shader_avx
FUNCTION(_sk_seed_shader_avx)
_sk_seed_shader_avx:
  .byte  197,249,110,194                     // vmovd         %edx,%xmm0
  .byte  197,249,112,192,0                   // vpshufd       $0x0,%xmm0,%xmm0
  .byte  196,227,125,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,223,113,0,0       // vbroadcastss  0x71df(%rip),%ymm1        # 727c <_sk_callback_avx+0x142>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,88,7                        // vaddps        (%rdi),%ymm0,%ymm0
  .byte  197,249,110,209                     // vmovd         %ecx,%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,227,109,24,210,1                // vinsertf128   $0x1,%xmm2,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,21,185,113,0,0       // vbroadcastss  0x71b9(%rip),%ymm2        # 7280 <_sk_callback_avx+0x146>
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_avx
.globl _sk_dither_avx
FUNCTION(_sk_dither_avx)
_sk_dither_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,16,71,32                    // vmovups       0x20(%rdi),%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  197,121,110,210                     // vmovd         %edx,%xmm10
  .byte  196,65,121,112,210,0                // vpshufd       $0x0,%xmm10,%xmm10
  .byte  196,65,49,254,202                   // vpaddd        %xmm10,%xmm9,%xmm9
  .byte  196,65,57,254,194                   // vpaddd        %xmm10,%xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  197,121,110,201                     // vmovd         %ecx,%xmm9
  .byte  196,65,121,112,201,0                // vpshufd       $0x0,%xmm9,%xmm9
  .byte  196,67,53,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm9,%ymm9
  .byte  196,65,52,87,208                    // vxorps        %ymm8,%ymm9,%ymm10
  .byte  196,98,125,24,29,98,113,0,0         // vbroadcastss  0x7162(%rip),%ymm11        # 7284 <_sk_callback_avx+0x14a>
  .byte  196,65,44,84,203                    // vandps        %ymm11,%ymm10,%ymm9
  .byte  196,193,25,114,241,5                // vpslld        $0x5,%xmm9,%xmm12
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,5                // vpslld        $0x5,%xmm9,%xmm9
  .byte  196,67,29,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm12,%ymm9
  .byte  196,65,60,84,219                    // vandps        %ymm11,%ymm8,%ymm11
  .byte  196,193,25,114,243,4                // vpslld        $0x4,%xmm11,%xmm12
  .byte  196,67,125,25,219,1                 // vextractf128  $0x1,%ymm11,%xmm11
  .byte  196,193,33,114,243,4                // vpslld        $0x4,%xmm11,%xmm11
  .byte  196,67,29,24,219,1                  // vinsertf128   $0x1,%xmm11,%ymm12,%ymm11
  .byte  196,98,125,24,37,35,113,0,0         // vbroadcastss  0x7123(%rip),%ymm12        # 7288 <_sk_callback_avx+0x14e>
  .byte  196,98,125,24,45,30,113,0,0         // vbroadcastss  0x711e(%rip),%ymm13        # 728c <_sk_callback_avx+0x152>
  .byte  196,65,44,84,245                    // vandps        %ymm13,%ymm10,%ymm14
  .byte  196,193,1,114,246,2                 // vpslld        $0x2,%xmm14,%xmm15
  .byte  196,67,125,25,246,1                 // vextractf128  $0x1,%ymm14,%xmm14
  .byte  196,193,9,114,246,2                 // vpslld        $0x2,%xmm14,%xmm14
  .byte  196,67,5,24,246,1                   // vinsertf128   $0x1,%xmm14,%ymm15,%ymm14
  .byte  196,65,60,84,237                    // vandps        %ymm13,%ymm8,%ymm13
  .byte  196,65,17,254,253                   // vpaddd        %xmm13,%xmm13,%xmm15
  .byte  196,67,125,25,237,1                 // vextractf128  $0x1,%ymm13,%xmm13
  .byte  196,65,17,254,237                   // vpaddd        %xmm13,%xmm13,%xmm13
  .byte  196,67,5,24,237,1                   // vinsertf128   $0x1,%xmm13,%ymm15,%ymm13
  .byte  196,65,44,84,212                    // vandps        %ymm12,%ymm10,%ymm10
  .byte  196,193,1,114,210,1                 // vpsrld        $0x1,%xmm10,%xmm15
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,210,1                // vpsrld        $0x1,%xmm10,%xmm10
  .byte  196,67,5,24,210,1                   // vinsertf128   $0x1,%xmm10,%ymm15,%ymm10
  .byte  196,65,60,84,196                    // vandps        %ymm12,%ymm8,%ymm8
  .byte  196,193,25,114,208,2                // vpsrld        $0x2,%xmm8,%xmm12
  .byte  196,67,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm8
  .byte  196,193,57,114,208,2                // vpsrld        $0x2,%xmm8,%xmm8
  .byte  196,67,29,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm12,%ymm8
  .byte  196,65,20,86,219                    // vorps         %ymm11,%ymm13,%ymm11
  .byte  196,65,36,86,192                    // vorps         %ymm8,%ymm11,%ymm8
  .byte  196,65,52,86,206                    // vorps         %ymm14,%ymm9,%ymm9
  .byte  196,65,60,86,193                    // vorps         %ymm9,%ymm8,%ymm8
  .byte  196,65,60,86,194                    // vorps         %ymm10,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,137,112,0,0        // vbroadcastss  0x7089(%rip),%ymm9        # 7290 <_sk_callback_avx+0x156>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,127,112,0,0        // vbroadcastss  0x707f(%rip),%ymm9        # 7294 <_sk_callback_avx+0x15a>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,188,95,201                      // vmaxps        %ymm1,%ymm8,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  197,188,95,210                      // vmaxps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_avx
.globl _sk_constant_color_avx
FUNCTION(_sk_constant_color_avx)
_sk_constant_color_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgba_avx
.globl _sk_load_rgba_avx
FUNCTION(_sk_load_rgba_avx)
_sk_load_rgba_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,0                        // vmovups       (%rax),%ymm0
  .byte  197,252,16,72,32                    // vmovups       0x20(%rax),%ymm1
  .byte  197,252,16,80,64                    // vmovups       0x40(%rax),%ymm2
  .byte  197,252,16,88,96                    // vmovups       0x60(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_rgba_avx
.globl _sk_store_rgba_avx
FUNCTION(_sk_store_rgba_avx)
_sk_store_rgba_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,252,17,80,64                    // vmovups       %ymm2,0x40(%rax)
  .byte  197,252,17,88,96                    // vmovups       %ymm3,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_avx
.globl _sk_clear_avx
FUNCTION(_sk_clear_avx)
_sk_clear_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_avx
.globl _sk_srcatop_avx
FUNCTION(_sk_srcatop_avx)
_sk_srcatop_avx:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,98,125,24,5,215,111,0,0         // vbroadcastss  0x6fd7(%rip),%ymm8        # 7298 <_sk_callback_avx+0x15e>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,204                       // vmulps        %ymm4,%ymm8,%ymm9
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,60,89,205                       // vmulps        %ymm5,%ymm8,%ymm9
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,60,89,206                       // vmulps        %ymm6,%ymm8,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_avx
.globl _sk_dstatop_avx
FUNCTION(_sk_dstatop_avx)
_sk_dstatop_avx:
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  196,98,125,24,13,153,111,0,0        // vbroadcastss  0x6f99(%rip),%ymm9        # 729c <_sk_callback_avx+0x162>
  .byte  197,52,92,207                       // vsubps        %ymm7,%ymm9,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,100,89,197                      // vmulps        %ymm5,%ymm3,%ymm8
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,100,89,198                      // vmulps        %ymm6,%ymm3,%ymm8
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,100,89,199                      // vmulps        %ymm7,%ymm3,%ymm8
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_avx
.globl _sk_srcin_avx
FUNCTION(_sk_srcin_avx)
_sk_srcin_avx:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_avx
.globl _sk_dstin_avx
FUNCTION(_sk_dstin_avx)
_sk_dstin_avx:
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_avx
.globl _sk_srcout_avx
FUNCTION(_sk_srcout_avx)
_sk_srcout_avx:
  .byte  196,98,125,24,5,56,111,0,0          // vbroadcastss  0x6f38(%rip),%ymm8        # 72a0 <_sk_callback_avx+0x166>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_avx
.globl _sk_dstout_avx
FUNCTION(_sk_dstout_avx)
_sk_dstout_avx:
  .byte  196,226,125,24,5,27,111,0,0         // vbroadcastss  0x6f1b(%rip),%ymm0        # 72a4 <_sk_callback_avx+0x16a>
  .byte  197,252,92,219                      // vsubps        %ymm3,%ymm0,%ymm3
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_avx
.globl _sk_srcover_avx
FUNCTION(_sk_srcover_avx)
_sk_srcover_avx:
  .byte  196,98,125,24,5,254,110,0,0         // vbroadcastss  0x6efe(%rip),%ymm8        # 72a8 <_sk_callback_avx+0x16e>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,204                       // vmulps        %ymm4,%ymm8,%ymm9
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  197,60,89,205                       // vmulps        %ymm5,%ymm8,%ymm9
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  197,60,89,206                       // vmulps        %ymm6,%ymm8,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_avx
.globl _sk_dstover_avx
FUNCTION(_sk_dstover_avx)
_sk_dstover_avx:
  .byte  196,98,125,24,5,209,110,0,0         // vbroadcastss  0x6ed1(%rip),%ymm8        # 72ac <_sk_callback_avx+0x172>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_avx
.globl _sk_modulate_avx
FUNCTION(_sk_modulate_avx)
_sk_modulate_avx:
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_avx
.globl _sk_multiply_avx
FUNCTION(_sk_multiply_avx)
_sk_multiply_avx:
  .byte  196,98,125,24,5,144,110,0,0         // vbroadcastss  0x6e90(%rip),%ymm8        # 72b0 <_sk_callback_avx+0x176>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,208                       // vmulps        %ymm0,%ymm9,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  197,52,89,209                       // vmulps        %ymm1,%ymm9,%ymm10
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,210                       // vmulps        %ymm2,%ymm9,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__avx
.globl _sk_plus__avx
FUNCTION(_sk_plus__avx)
_sk_plus__avx:
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_avx
.globl _sk_screen_avx
FUNCTION(_sk_screen_avx)
_sk_screen_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  197,100,88,199                      // vaddps        %ymm7,%ymm3,%ymm8
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  197,188,92,219                      // vsubps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__avx
.globl _sk_xor__avx
FUNCTION(_sk_xor__avx)
_sk_xor__avx:
  .byte  196,98,125,24,5,223,109,0,0         // vbroadcastss  0x6ddf(%rip),%ymm8        # 72b4 <_sk_callback_avx+0x17a>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,212                       // vmulps        %ymm4,%ymm8,%ymm10
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,89,213                       // vmulps        %ymm5,%ymm8,%ymm10
  .byte  197,172,88,201                      // vaddps        %ymm1,%ymm10,%ymm1
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  197,60,89,214                       // vmulps        %ymm6,%ymm8,%ymm10
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_avx
.globl _sk_darken_avx
FUNCTION(_sk_darken_avx)
_sk_darken_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,95,193                  // vmaxps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,95,201                  // vmaxps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,95,209                  // vmaxps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,95,109,0,0          // vbroadcastss  0x6d5f(%rip),%ymm8        # 72b8 <_sk_callback_avx+0x17e>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_avx
.globl _sk_lighten_avx
FUNCTION(_sk_lighten_avx)
_sk_lighten_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,11,109,0,0          // vbroadcastss  0x6d0b(%rip),%ymm8        # 72bc <_sk_callback_avx+0x182>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_avx
.globl _sk_difference_avx
FUNCTION(_sk_difference_avx)
_sk_difference_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,171,108,0,0         // vbroadcastss  0x6cab(%rip),%ymm8        # 72c0 <_sk_callback_avx+0x186>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_avx
.globl _sk_exclusion_avx
FUNCTION(_sk_exclusion_avx)
_sk_exclusion_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,102,108,0,0         // vbroadcastss  0x6c66(%rip),%ymm8        # 72c4 <_sk_callback_avx+0x18a>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_avx
.globl _sk_colorburn_avx
FUNCTION(_sk_colorburn_avx)
_sk_colorburn_avx:
  .byte  196,98,125,24,5,81,108,0,0          // vbroadcastss  0x6c51(%rip),%ymm8        # 72c8 <_sk_callback_avx+0x18e>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,216                       // vmulps        %ymm0,%ymm9,%ymm11
  .byte  196,65,44,87,210                    // vxorps        %ymm10,%ymm10,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,228                       // vmulps        %ymm4,%ymm8,%ymm12
  .byte  197,68,92,236                       // vsubps        %ymm4,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,232                       // vdivps        %ymm0,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,36,88,237                    // vaddps        %ymm13,%ymm11,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,224                       // vaddps        %ymm0,%ymm12,%ymm12
  .byte  196,193,124,194,194,0               // vcmpeqps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,196,0                 // vblendvps     %ymm0,%ymm12,%ymm13,%ymm0
  .byte  197,92,194,231,0                    // vcmpeqps      %ymm7,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,52,89,217                       // vmulps        %ymm1,%ymm9,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  197,68,92,237                       // vsubps        %ymm5,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,233                       // vdivps        %ymm1,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,36,88,237                    // vaddps        %ymm13,%ymm11,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,225                       // vaddps        %ymm1,%ymm12,%ymm12
  .byte  196,193,116,194,202,0               // vcmpeqps      %ymm10,%ymm1,%ymm1
  .byte  196,195,21,74,204,16                // vblendvps     %ymm1,%ymm12,%ymm13,%ymm1
  .byte  197,84,194,231,0                    // vcmpeqps      %ymm7,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,108,194,210,0                // vcmpeqps      %ymm10,%ymm2,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  197,68,92,230                       // vsubps        %ymm6,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  197,28,94,226                       // vdivps        %ymm2,%ymm12,%ymm12
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,65,68,92,228                    // vsubps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,52,88,228                    // vaddps        %ymm12,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,227,37,74,210,160               // vblendvps     %ymm10,%ymm2,%ymm11,%ymm2
  .byte  197,76,194,215,0                    // vcmpeqps      %ymm7,%ymm6,%ymm10
  .byte  197,52,88,206                       // vaddps        %ymm6,%ymm9,%ymm9
  .byte  196,195,109,74,209,160              // vblendvps     %ymm10,%ymm9,%ymm2,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_avx
.globl _sk_colordodge_avx
FUNCTION(_sk_colordodge_avx)
_sk_colordodge_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,13,77,107,0,0         // vbroadcastss  0x6b4d(%rip),%ymm9        # 72cc <_sk_callback_avx+0x192>
  .byte  197,52,92,215                       // vsubps        %ymm7,%ymm9,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,52,92,203                       // vsubps        %ymm3,%ymm9,%ymm9
  .byte  197,100,89,228                      // vmulps        %ymm4,%ymm3,%ymm12
  .byte  197,100,92,232                      // vsubps        %ymm0,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,236                       // vmulps        %ymm4,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,36,88,228                    // vaddps        %ymm12,%ymm11,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,232                       // vaddps        %ymm0,%ymm13,%ymm13
  .byte  197,252,194,195,0                   // vcmpeqps      %ymm3,%ymm0,%ymm0
  .byte  196,195,29,74,197,0                 // vblendvps     %ymm0,%ymm13,%ymm12,%ymm0
  .byte  196,65,92,194,224,0                 // vcmpeqps      %ymm8,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,100,89,229                      // vmulps        %ymm5,%ymm3,%ymm12
  .byte  197,100,92,233                      // vsubps        %ymm1,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,237                       // vmulps        %ymm5,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,36,88,228                    // vaddps        %ymm12,%ymm11,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,233                       // vaddps        %ymm1,%ymm13,%ymm13
  .byte  197,244,194,203,0                   // vcmpeqps      %ymm3,%ymm1,%ymm1
  .byte  196,195,29,74,205,16                // vblendvps     %ymm1,%ymm13,%ymm12,%ymm1
  .byte  196,65,84,194,224,0                 // vcmpeqps      %ymm8,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,100,92,226                      // vsubps        %ymm2,%ymm3,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  197,52,89,230                       // vmulps        %ymm6,%ymm9,%ymm12
  .byte  196,65,68,93,219                    // vminps        %ymm11,%ymm7,%ymm11
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  197,236,194,211,0                   // vcmpeqps      %ymm3,%ymm2,%ymm2
  .byte  196,195,37,74,212,32                // vblendvps     %ymm2,%ymm12,%ymm11,%ymm2
  .byte  196,65,76,194,192,0                 // vcmpeqps      %ymm8,%ymm6,%ymm8
  .byte  197,44,88,214                       // vaddps        %ymm6,%ymm10,%ymm10
  .byte  196,195,109,74,210,128              // vblendvps     %ymm8,%ymm10,%ymm2,%ymm2
  .byte  197,52,89,199                       // vmulps        %ymm7,%ymm9,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_avx
.globl _sk_hardlight_avx
FUNCTION(_sk_hardlight_avx)
_sk_hardlight_avx:
  .byte  196,98,125,24,5,95,106,0,0          // vbroadcastss  0x6a5f(%rip),%ymm8        # 72d0 <_sk_callback_avx+0x196>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,200                       // vmulps        %ymm0,%ymm10,%ymm9
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,217                    // vaddps        %ymm9,%ymm11,%ymm11
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  197,52,194,227,2                    // vcmpleps      %ymm3,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,116,88,225                      // vaddps        %ymm1,%ymm1,%ymm12
  .byte  197,28,194,227,2                    // vcmpleps      %ymm3,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,108,88,218                      // vaddps        %ymm2,%ymm2,%ymm11
  .byte  197,36,194,219,2                    // vcmpleps      %ymm3,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_avx
.globl _sk_overlay_avx
FUNCTION(_sk_overlay_avx)
_sk_overlay_avx:
  .byte  196,98,125,24,5,136,105,0,0         // vbroadcastss  0x6988(%rip),%ymm8        # 72d4 <_sk_callback_avx+0x19a>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,200                       // vmulps        %ymm0,%ymm10,%ymm9
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,217                    // vaddps        %ymm9,%ymm11,%ymm11
  .byte  197,92,88,204                       // vaddps        %ymm4,%ymm4,%ymm9
  .byte  197,52,194,231,2                    // vcmpleps      %ymm7,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_avx
.globl _sk_softlight_avx
FUNCTION(_sk_softlight_avx)
_sk_softlight_avx:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,252,40,209                      // vmovaps       %ymm1,%ymm2
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  197,52,194,215,1                    // vcmpltps      %ymm7,%ymm9,%ymm10
  .byte  197,92,94,199                       // vdivps        %ymm7,%ymm4,%ymm8
  .byte  196,67,53,74,224,160                // vblendvps     %ymm10,%ymm8,%ymm9,%ymm12
  .byte  196,65,28,88,196                    // vaddps        %ymm12,%ymm12,%ymm8
  .byte  196,65,60,88,192                    // vaddps        %ymm8,%ymm8,%ymm8
  .byte  196,65,60,89,216                    // vmulps        %ymm8,%ymm8,%ymm11
  .byte  196,65,60,88,195                    // vaddps        %ymm11,%ymm8,%ymm8
  .byte  196,98,125,24,29,127,104,0,0        // vbroadcastss  0x687f(%rip),%ymm11        # 72dc <_sk_callback_avx+0x1a2>
  .byte  196,65,28,88,235                    // vaddps        %ymm11,%ymm12,%ymm13
  .byte  196,65,20,89,192                    // vmulps        %ymm8,%ymm13,%ymm8
  .byte  196,98,125,24,45,112,104,0,0        // vbroadcastss  0x6870(%rip),%ymm13        # 72e0 <_sk_callback_avx+0x1a6>
  .byte  196,65,28,89,245                    // vmulps        %ymm13,%ymm12,%ymm14
  .byte  196,65,12,88,192                    // vaddps        %ymm8,%ymm14,%ymm8
  .byte  196,65,124,82,244                   // vrsqrtps      %ymm12,%ymm14
  .byte  196,65,124,83,246                   // vrcpps        %ymm14,%ymm14
  .byte  196,65,12,92,244                    // vsubps        %ymm12,%ymm14,%ymm14
  .byte  197,92,88,252                       // vaddps        %ymm4,%ymm4,%ymm15
  .byte  196,65,4,88,255                     // vaddps        %ymm15,%ymm15,%ymm15
  .byte  197,4,194,255,2                     // vcmpleps      %ymm7,%ymm15,%ymm15
  .byte  196,67,13,74,240,240                // vblendvps     %ymm15,%ymm8,%ymm14,%ymm14
  .byte  197,116,88,249                      // vaddps        %ymm1,%ymm1,%ymm15
  .byte  196,98,125,24,5,46,104,0,0          // vbroadcastss  0x682e(%rip),%ymm8        # 72d8 <_sk_callback_avx+0x19e>
  .byte  196,65,60,92,228                    // vsubps        %ymm12,%ymm8,%ymm12
  .byte  197,132,92,195                      // vsubps        %ymm3,%ymm15,%ymm0
  .byte  196,65,124,89,228                   // vmulps        %ymm12,%ymm0,%ymm12
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,100,89,244                      // vmulps        %ymm4,%ymm3,%ymm14
  .byte  197,140,88,192                      // vaddps        %ymm0,%ymm14,%ymm0
  .byte  197,28,88,227                       // vaddps        %ymm3,%ymm12,%ymm12
  .byte  197,28,89,228                       // vmulps        %ymm4,%ymm12,%ymm12
  .byte  197,4,194,243,2                     // vcmpleps      %ymm3,%ymm15,%ymm14
  .byte  196,195,125,74,196,224              // vblendvps     %ymm14,%ymm12,%ymm0,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,212,94,199                      // vdivps        %ymm7,%ymm5,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,240                      // vaddps        %ymm0,%ymm0,%ymm14
  .byte  196,65,12,88,246                    // vaddps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,89,254                    // vmulps        %ymm14,%ymm14,%ymm15
  .byte  196,65,12,88,247                    // vaddps        %ymm15,%ymm14,%ymm14
  .byte  196,65,124,88,251                   // vaddps        %ymm11,%ymm0,%ymm15
  .byte  196,65,4,89,246                     // vmulps        %ymm14,%ymm15,%ymm14
  .byte  196,65,124,89,253                   // vmulps        %ymm13,%ymm0,%ymm15
  .byte  196,65,4,88,246                     // vaddps        %ymm14,%ymm15,%ymm14
  .byte  197,124,82,248                      // vrsqrtps      %ymm0,%ymm15
  .byte  196,65,124,83,255                   // vrcpps        %ymm15,%ymm15
  .byte  197,4,92,248                        // vsubps        %ymm0,%ymm15,%ymm15
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  196,67,5,74,230,192                 // vblendvps     %ymm12,%ymm14,%ymm15,%ymm12
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,108,88,242                      // vaddps        %ymm2,%ymm2,%ymm14
  .byte  197,12,92,251                       // vsubps        %ymm3,%ymm14,%ymm15
  .byte  197,132,89,192                      // vmulps        %ymm0,%ymm15,%ymm0
  .byte  197,4,89,255                        // vmulps        %ymm7,%ymm15,%ymm15
  .byte  196,65,4,89,228                     // vmulps        %ymm12,%ymm15,%ymm12
  .byte  197,100,89,253                      // vmulps        %ymm5,%ymm3,%ymm15
  .byte  196,65,4,88,228                     // vaddps        %ymm12,%ymm15,%ymm12
  .byte  197,252,88,195                      // vaddps        %ymm3,%ymm0,%ymm0
  .byte  197,252,89,197                      // vmulps        %ymm5,%ymm0,%ymm0
  .byte  197,12,194,243,2                    // vcmpleps      %ymm3,%ymm14,%ymm14
  .byte  196,99,29,74,240,224                // vblendvps     %ymm14,%ymm0,%ymm12,%ymm14
  .byte  197,204,94,199                      // vdivps        %ymm7,%ymm6,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,65,52,89,209                    // vmulps        %ymm9,%ymm9,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,124,88,211                   // vaddps        %ymm11,%ymm0,%ymm10
  .byte  196,65,44,89,201                    // vmulps        %ymm9,%ymm10,%ymm9
  .byte  196,65,124,89,213                   // vmulps        %ymm13,%ymm0,%ymm10
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  197,124,82,208                      // vrsqrtps      %ymm0,%ymm10
  .byte  196,65,124,83,210                   // vrcpps        %ymm10,%ymm10
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  196,65,36,88,219                    // vaddps        %ymm11,%ymm11,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  196,67,45,74,201,176                // vblendvps     %ymm11,%ymm9,%ymm10,%ymm9
  .byte  197,124,16,100,36,200               // vmovups       -0x38(%rsp),%ymm12
  .byte  196,65,28,88,212                    // vaddps        %ymm12,%ymm12,%ymm10
  .byte  197,44,92,219                       // vsubps        %ymm3,%ymm10,%ymm11
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  197,36,89,223                       // vmulps        %ymm7,%ymm11,%ymm11
  .byte  196,65,36,89,201                    // vmulps        %ymm9,%ymm11,%ymm9
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  196,65,36,88,201                    // vaddps        %ymm9,%ymm11,%ymm9
  .byte  197,252,88,195                      // vaddps        %ymm3,%ymm0,%ymm0
  .byte  197,252,89,198                      // vmulps        %ymm6,%ymm0,%ymm0
  .byte  197,44,194,211,2                    // vcmpleps      %ymm3,%ymm10,%ymm10
  .byte  196,99,53,74,200,160                // vblendvps     %ymm10,%ymm0,%ymm9,%ymm9
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,188,89,204                      // vmulps        %ymm4,%ymm8,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,252,88,68,36,168                // vaddps        -0x58(%rsp),%ymm0,%ymm0
  .byte  197,172,89,202                      // vmulps        %ymm2,%ymm10,%ymm1
  .byte  197,188,89,213                      // vmulps        %ymm5,%ymm8,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,206                  // vaddps        %ymm14,%ymm1,%ymm1
  .byte  196,193,44,89,212                   // vmulps        %ymm12,%ymm10,%ymm2
  .byte  197,60,89,214                       // vmulps        %ymm6,%ymm8,%ymm10
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_avx
.globl _sk_hue_avx
FUNCTION(_sk_hue_avx)
_sk_hue_avx:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,124,40,193                      // vmovaps       %ymm1,%ymm8
  .byte  197,124,17,68,36,168                // vmovups       %ymm8,-0x58(%rsp)
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,116,89,203                      // vmulps        %ymm3,%ymm1,%ymm9
  .byte  197,60,89,211                       // vmulps        %ymm3,%ymm8,%ymm10
  .byte  197,108,89,219                      // vmulps        %ymm3,%ymm2,%ymm11
  .byte  197,84,95,198                       // vmaxps        %ymm6,%ymm5,%ymm8
  .byte  196,65,92,95,192                    // vmaxps        %ymm8,%ymm4,%ymm8
  .byte  197,84,93,230                       // vminps        %ymm6,%ymm5,%ymm12
  .byte  196,65,92,93,228                    // vminps        %ymm12,%ymm4,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,227                       // vmulps        %ymm3,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,208,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm10
  .byte  196,65,36,92,221                    // vsubps        %ymm13,%ymm11,%ymm11
  .byte  196,65,28,89,219                    // vmulps        %ymm11,%ymm12,%ymm11
  .byte  196,65,36,94,222                    // vdivps        %ymm14,%ymm11,%ymm11
  .byte  196,67,37,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm11,%ymm12
  .byte  196,98,125,24,53,253,101,0,0        // vbroadcastss  0x65fd(%rip),%ymm14        # 72e4 <_sk_callback_avx+0x1aa>
  .byte  196,65,92,89,222                    // vmulps        %ymm14,%ymm4,%ymm11
  .byte  196,98,125,24,61,243,101,0,0        // vbroadcastss  0x65f3(%rip),%ymm15        # 72e8 <_sk_callback_avx+0x1ae>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,226,125,24,5,228,101,0,0        // vbroadcastss  0x65e4(%rip),%ymm0        # 72ec <_sk_callback_avx+0x1b2>
  .byte  197,76,89,232                       // vmulps        %ymm0,%ymm6,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,65,52,89,238                    // vmulps        %ymm14,%ymm9,%ymm13
  .byte  196,193,44,89,215                   // vmulps        %ymm15,%ymm10,%ymm2
  .byte  197,148,88,210                      // vaddps        %ymm2,%ymm13,%ymm2
  .byte  197,28,89,232                       // vmulps        %ymm0,%ymm12,%ymm13
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,52,88,202                       // vaddps        %ymm2,%ymm9,%ymm9
  .byte  197,44,88,218                       // vaddps        %ymm2,%ymm10,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  196,193,36,93,212                   // vminps        %ymm12,%ymm11,%ymm2
  .byte  197,52,93,234                       // vminps        %ymm2,%ymm9,%ymm13
  .byte  196,193,52,89,214                   // vmulps        %ymm14,%ymm9,%ymm2
  .byte  196,65,36,89,215                    // vmulps        %ymm15,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,124,88,210                      // vaddps        %ymm2,%ymm0,%ymm10
  .byte  196,193,52,92,194                   // vsubps        %ymm10,%ymm9,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,44,92,213                   // vsubps        %ymm13,%ymm10,%ymm2
  .byte  197,252,94,194                      // vdivps        %ymm2,%ymm0,%ymm0
  .byte  196,65,36,92,242                    // vsubps        %ymm10,%ymm11,%ymm14
  .byte  196,65,44,89,246                    // vmulps        %ymm14,%ymm10,%ymm14
  .byte  197,12,94,242                       // vdivps        %ymm2,%ymm14,%ymm14
  .byte  196,65,28,92,250                    // vsubps        %ymm10,%ymm12,%ymm15
  .byte  196,65,44,89,255                    // vmulps        %ymm15,%ymm10,%ymm15
  .byte  197,132,94,210                      // vdivps        %ymm2,%ymm15,%ymm2
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,44,88,246                    // vaddps        %ymm14,%ymm10,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,195,109,74,212,208              // vblendvps     %ymm13,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  196,195,125,74,193,208              // vblendvps     %ymm13,%ymm9,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,203                    // vmaxps        %ymm11,%ymm9,%ymm9
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,65,28,92,234                    // vsubps        %ymm10,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,249,1                 // vcmpltps      %ymm9,%ymm12,%ymm15
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,218                    // vsubps        %ymm10,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,108,92,242                   // vsubps        %ymm10,%ymm2,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,208                    // vmaxps        %ymm8,%ymm11,%ymm10
  .byte  196,195,109,74,209,240              // vblendvps     %ymm15,%ymm9,%ymm2,%ymm2
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,189,100,0,0         // vbroadcastss  0x64bd(%rip),%ymm8        # 72f0 <_sk_callback_avx+0x1b6>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,180,89,76,36,168                // vmulps        -0x58(%rsp),%ymm9,%ymm1
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,76,36,200                 // vmulps        -0x38(%rsp),%ymm9,%ymm9
  .byte  197,60,89,198                       // vmulps        %ymm6,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_avx
.globl _sk_saturation_avx
FUNCTION(_sk_saturation_avx)
_sk_saturation_avx:
  .byte  197,124,40,193                      // vmovaps       %ymm1,%ymm8
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,124,95,194                      // vmaxps        %ymm2,%ymm0,%ymm8
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  197,124,93,226                      // vminps        %ymm2,%ymm0,%ymm12
  .byte  196,65,116,93,228                   // vminps        %ymm12,%ymm1,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,231                       // vmulps        %ymm7,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,208,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm10
  .byte  196,65,36,92,221                    // vsubps        %ymm13,%ymm11,%ymm11
  .byte  196,65,28,89,219                    // vmulps        %ymm11,%ymm12,%ymm11
  .byte  196,65,36,94,222                    // vdivps        %ymm14,%ymm11,%ymm11
  .byte  196,67,37,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm11,%ymm12
  .byte  196,98,125,24,53,203,99,0,0         // vbroadcastss  0x63cb(%rip),%ymm14        # 72f4 <_sk_callback_avx+0x1ba>
  .byte  196,65,92,89,222                    // vmulps        %ymm14,%ymm4,%ymm11
  .byte  196,98,125,24,61,193,99,0,0         // vbroadcastss  0x63c1(%rip),%ymm15        # 72f8 <_sk_callback_avx+0x1be>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,226,125,24,5,178,99,0,0         // vbroadcastss  0x63b2(%rip),%ymm0        # 72fc <_sk_callback_avx+0x1c2>
  .byte  197,76,89,232                       // vmulps        %ymm0,%ymm6,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,65,52,89,238                    // vmulps        %ymm14,%ymm9,%ymm13
  .byte  196,193,44,89,215                   // vmulps        %ymm15,%ymm10,%ymm2
  .byte  197,148,88,210                      // vaddps        %ymm2,%ymm13,%ymm2
  .byte  197,28,89,232                       // vmulps        %ymm0,%ymm12,%ymm13
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,52,88,202                       // vaddps        %ymm2,%ymm9,%ymm9
  .byte  197,44,88,218                       // vaddps        %ymm2,%ymm10,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  196,193,36,93,212                   // vminps        %ymm12,%ymm11,%ymm2
  .byte  197,52,93,234                       // vminps        %ymm2,%ymm9,%ymm13
  .byte  196,193,52,89,214                   // vmulps        %ymm14,%ymm9,%ymm2
  .byte  196,65,36,89,215                    // vmulps        %ymm15,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,124,88,210                      // vaddps        %ymm2,%ymm0,%ymm10
  .byte  196,193,52,92,194                   // vsubps        %ymm10,%ymm9,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,44,92,213                   // vsubps        %ymm13,%ymm10,%ymm2
  .byte  197,252,94,194                      // vdivps        %ymm2,%ymm0,%ymm0
  .byte  196,65,36,92,242                    // vsubps        %ymm10,%ymm11,%ymm14
  .byte  196,65,44,89,246                    // vmulps        %ymm14,%ymm10,%ymm14
  .byte  197,12,94,242                       // vdivps        %ymm2,%ymm14,%ymm14
  .byte  196,65,28,92,250                    // vsubps        %ymm10,%ymm12,%ymm15
  .byte  196,65,44,89,255                    // vmulps        %ymm15,%ymm10,%ymm15
  .byte  197,132,94,210                      // vdivps        %ymm2,%ymm15,%ymm2
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,44,88,246                    // vaddps        %ymm14,%ymm10,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,195,109,74,212,208              // vblendvps     %ymm13,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  196,195,125,74,193,208              // vblendvps     %ymm13,%ymm9,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,203                    // vmaxps        %ymm11,%ymm9,%ymm9
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,65,28,92,234                    // vsubps        %ymm10,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,249,1                 // vcmpltps      %ymm9,%ymm12,%ymm15
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,218                    // vsubps        %ymm10,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,108,92,242                   // vsubps        %ymm10,%ymm2,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,208                    // vmaxps        %ymm8,%ymm11,%ymm10
  .byte  196,195,109,74,209,240              // vblendvps     %ymm15,%ymm9,%ymm2,%ymm2
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,139,98,0,0          // vbroadcastss  0x628b(%rip),%ymm8        # 7300 <_sk_callback_avx+0x1c6>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,180,89,76,36,168                // vmulps        -0x58(%rsp),%ymm9,%ymm1
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,76,36,200                 // vmulps        -0x38(%rsp),%ymm9,%ymm9
  .byte  197,60,89,198                       // vmulps        %ymm6,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_avx
.globl _sk_color_avx
FUNCTION(_sk_color_avx)
_sk_color_avx:
  .byte  197,252,17,84,36,136                // vmovups       %ymm2,-0x78(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,124,89,199                      // vmulps        %ymm7,%ymm0,%ymm8
  .byte  197,116,89,207                      // vmulps        %ymm7,%ymm1,%ymm9
  .byte  196,98,125,24,45,33,98,0,0          // vbroadcastss  0x6221(%rip),%ymm13        # 7304 <_sk_callback_avx+0x1ca>
  .byte  196,65,92,89,213                    // vmulps        %ymm13,%ymm4,%ymm10
  .byte  196,98,125,24,53,23,98,0,0          // vbroadcastss  0x6217(%rip),%ymm14        # 7308 <_sk_callback_avx+0x1ce>
  .byte  196,65,84,89,222                    // vmulps        %ymm14,%ymm5,%ymm11
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,61,8,98,0,0           // vbroadcastss  0x6208(%rip),%ymm15        # 730c <_sk_callback_avx+0x1d2>
  .byte  196,65,76,89,223                    // vmulps        %ymm15,%ymm6,%ymm11
  .byte  196,193,44,88,195                   // vaddps        %ymm11,%ymm10,%ymm0
  .byte  196,65,60,89,221                    // vmulps        %ymm13,%ymm8,%ymm11
  .byte  196,65,52,89,230                    // vmulps        %ymm14,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,108,89,231                      // vmulps        %ymm7,%ymm2,%ymm12
  .byte  196,65,28,89,215                    // vmulps        %ymm15,%ymm12,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  197,60,88,192                       // vaddps        %ymm0,%ymm8,%ymm8
  .byte  197,52,88,208                       // vaddps        %ymm0,%ymm9,%ymm10
  .byte  197,28,88,216                       // vaddps        %ymm0,%ymm12,%ymm11
  .byte  196,193,44,93,195                   // vminps        %ymm11,%ymm10,%ymm0
  .byte  197,60,93,224                       // vminps        %ymm0,%ymm8,%ymm12
  .byte  196,193,60,89,197                   // vmulps        %ymm13,%ymm8,%ymm0
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,193,124,88,193                  // vaddps        %ymm9,%ymm0,%ymm0
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  197,52,88,200                       // vaddps        %ymm0,%ymm9,%ymm9
  .byte  196,193,60,92,193                   // vsubps        %ymm9,%ymm8,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,65,52,92,236                    // vsubps        %ymm12,%ymm9,%ymm13
  .byte  196,193,124,94,197                  // vdivps        %ymm13,%ymm0,%ymm0
  .byte  196,65,44,92,241                    // vsubps        %ymm9,%ymm10,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  196,65,12,94,245                    // vdivps        %ymm13,%ymm14,%ymm14
  .byte  196,65,36,92,249                    // vsubps        %ymm9,%ymm11,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  196,65,4,94,237                     // vdivps        %ymm13,%ymm15,%ymm13
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,65,4,194,228,2                  // vcmpleps      %ymm12,%ymm15,%ymm12
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,242,192                // vblendvps     %ymm12,%ymm10,%ymm14,%ymm14
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,88,237                    // vaddps        %ymm13,%ymm9,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,200,192              // vblendvps     %ymm12,%ymm8,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,60,95,194                    // vmaxps        %ymm10,%ymm8,%ymm8
  .byte  196,65,116,92,209                   // vsubps        %ymm9,%ymm1,%ymm10
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,192,1                // vcmpltps      %ymm8,%ymm12,%ymm0
  .byte  196,65,60,92,193                    // vsubps        %ymm9,%ymm8,%ymm8
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,12,92,209                    // vsubps        %ymm9,%ymm14,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,67,13,74,210,0                  // vblendvps     %ymm0,%ymm10,%ymm14,%ymm10
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,192                    // vdivps        %ymm8,%ymm13,%ymm8
  .byte  196,65,52,88,192                    // vaddps        %ymm8,%ymm9,%ymm8
  .byte  196,193,116,95,207                  // vmaxps        %ymm15,%ymm1,%ymm1
  .byte  196,65,44,95,207                    // vmaxps        %ymm15,%ymm10,%ymm9
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,65,124,95,199                   // vmaxps        %ymm15,%ymm0,%ymm8
  .byte  196,226,125,24,5,207,96,0,0         // vbroadcastss  0x60cf(%rip),%ymm0        # 7310 <_sk_callback_avx+0x1d6>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  197,164,89,196                      // vmulps        %ymm4,%ymm11,%ymm0
  .byte  197,252,88,194                      // vaddps        %ymm2,%ymm0,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  197,164,89,213                      // vmulps        %ymm5,%ymm11,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,136                // vmulps        -0x78(%rsp),%ymm10,%ymm2
  .byte  197,36,89,206                       // vmulps        %ymm6,%ymm11,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  196,193,108,88,208                  // vaddps        %ymm8,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_avx
.globl _sk_luminosity_avx
FUNCTION(_sk_luminosity_avx)
_sk_luminosity_avx:
  .byte  197,124,40,226                      // vmovaps       %ymm2,%ymm12
  .byte  197,124,17,100,36,168               // vmovups       %ymm12,-0x58(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,98,125,24,45,97,96,0,0          // vbroadcastss  0x6061(%rip),%ymm13        # 7314 <_sk_callback_avx+0x1da>
  .byte  196,65,108,89,213                   // vmulps        %ymm13,%ymm2,%ymm10
  .byte  196,98,125,24,53,87,96,0,0          // vbroadcastss  0x6057(%rip),%ymm14        # 7318 <_sk_callback_avx+0x1de>
  .byte  196,65,116,89,222                   // vmulps        %ymm14,%ymm1,%ymm11
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,61,72,96,0,0          // vbroadcastss  0x6048(%rip),%ymm15        # 731c <_sk_callback_avx+0x1e2>
  .byte  196,65,28,89,223                    // vmulps        %ymm15,%ymm12,%ymm11
  .byte  196,193,44,88,195                   // vaddps        %ymm11,%ymm10,%ymm0
  .byte  196,65,60,89,221                    // vmulps        %ymm13,%ymm8,%ymm11
  .byte  196,65,52,89,230                    // vmulps        %ymm14,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,100,89,230                      // vmulps        %ymm6,%ymm3,%ymm12
  .byte  196,65,28,89,215                    // vmulps        %ymm15,%ymm12,%ymm10
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  197,60,88,192                       // vaddps        %ymm0,%ymm8,%ymm8
  .byte  197,52,88,208                       // vaddps        %ymm0,%ymm9,%ymm10
  .byte  197,28,88,216                       // vaddps        %ymm0,%ymm12,%ymm11
  .byte  196,193,44,93,195                   // vminps        %ymm11,%ymm10,%ymm0
  .byte  197,60,93,224                       // vminps        %ymm0,%ymm8,%ymm12
  .byte  196,193,60,89,197                   // vmulps        %ymm13,%ymm8,%ymm0
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,193,124,88,193                  // vaddps        %ymm9,%ymm0,%ymm0
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  197,52,88,200                       // vaddps        %ymm0,%ymm9,%ymm9
  .byte  196,193,60,92,193                   // vsubps        %ymm9,%ymm8,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,65,52,92,236                    // vsubps        %ymm12,%ymm9,%ymm13
  .byte  196,193,124,94,197                  // vdivps        %ymm13,%ymm0,%ymm0
  .byte  196,65,44,92,241                    // vsubps        %ymm9,%ymm10,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  196,65,12,94,245                    // vdivps        %ymm13,%ymm14,%ymm14
  .byte  196,65,36,92,249                    // vsubps        %ymm9,%ymm11,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  196,65,4,94,237                     // vdivps        %ymm13,%ymm15,%ymm13
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,65,4,194,228,2                  // vcmpleps      %ymm12,%ymm15,%ymm12
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,242,192                // vblendvps     %ymm12,%ymm10,%ymm14,%ymm14
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,88,237                    // vaddps        %ymm13,%ymm9,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,200,192              // vblendvps     %ymm12,%ymm8,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,60,95,194                    // vmaxps        %ymm10,%ymm8,%ymm8
  .byte  196,65,116,92,209                   // vsubps        %ymm9,%ymm1,%ymm10
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,192,1                // vcmpltps      %ymm8,%ymm12,%ymm0
  .byte  196,65,60,92,193                    // vsubps        %ymm9,%ymm8,%ymm8
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,12,92,209                    // vsubps        %ymm9,%ymm14,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,67,13,74,210,0                  // vblendvps     %ymm0,%ymm10,%ymm14,%ymm10
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,192                    // vdivps        %ymm8,%ymm13,%ymm8
  .byte  196,65,52,88,192                    // vaddps        %ymm8,%ymm9,%ymm8
  .byte  196,193,116,95,207                  // vmaxps        %ymm15,%ymm1,%ymm1
  .byte  196,65,44,95,207                    // vmaxps        %ymm15,%ymm10,%ymm9
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,65,124,95,199                   // vmaxps        %ymm15,%ymm0,%ymm8
  .byte  196,226,125,24,5,15,95,0,0          // vbroadcastss  0x5f0f(%rip),%ymm0        # 7320 <_sk_callback_avx+0x1e6>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  197,164,89,196                      // vmulps        %ymm4,%ymm11,%ymm0
  .byte  197,252,88,194                      // vaddps        %ymm2,%ymm0,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  197,164,89,213                      // vmulps        %ymm5,%ymm11,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  197,36,89,206                       // vmulps        %ymm6,%ymm11,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  196,193,108,88,208                  // vaddps        %ymm8,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_rgba_8888_avx
.globl _sk_srcover_rgba_8888_avx
FUNCTION(_sk_srcover_rgba_8888_avx)
_sk_srcover_rgba_8888_avx:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,43,1,0,0                     // jne           15a0 <_sk_srcover_rgba_8888_avx+0x144>
  .byte  196,193,124,16,58                   // vmovups       (%r10),%ymm7
  .byte  197,124,40,13,254,99,0,0            // vmovaps       0x63fe(%rip),%ymm9        # 7880 <_sk_callback_avx+0x746>
  .byte  196,193,68,84,225                   // vandps        %ymm9,%ymm7,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  197,209,114,215,8                   // vpsrld        $0x8,%xmm7,%xmm5
  .byte  196,195,125,25,248,1                // vextractf128  $0x1,%ymm7,%xmm8
  .byte  196,193,73,114,208,8                // vpsrld        $0x8,%xmm8,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  196,193,84,84,233                   // vandps        %ymm9,%ymm5,%ymm5
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  197,169,114,215,16                  // vpsrld        $0x10,%xmm7,%xmm10
  .byte  196,193,73,114,208,16               // vpsrld        $0x10,%xmm8,%xmm6
  .byte  196,227,45,24,246,1                 // vinsertf128   $0x1,%xmm6,%ymm10,%ymm6
  .byte  196,193,76,84,241                   // vandps        %ymm9,%ymm6,%ymm6
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  197,177,114,215,24                  // vpsrld        $0x18,%xmm7,%xmm9
  .byte  196,193,65,114,208,24               // vpsrld        $0x18,%xmm8,%xmm7
  .byte  196,227,53,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm9,%ymm7
  .byte  197,252,91,255                      // vcvtdq2ps     %ymm7,%ymm7
  .byte  196,98,125,24,5,65,94,0,0           // vbroadcastss  0x5e41(%rip),%ymm8        # 7324 <_sk_callback_avx+0x1ea>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,125,24,13,56,94,0,0          // vbroadcastss  0x5e38(%rip),%ymm9        # 7328 <_sk_callback_avx+0x1ee>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,60,89,212                       // vmulps        %ymm4,%ymm8,%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  197,60,89,213                       // vmulps        %ymm5,%ymm8,%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  197,60,89,214                       // vmulps        %ymm6,%ymm8,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  197,125,91,201                      // vcvtps2dq     %ymm1,%ymm9
  .byte  196,193,41,114,241,8                // vpslld        $0x8,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,8                // vpslld        $0x8,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  197,125,91,202                      // vcvtps2dq     %ymm2,%ymm9
  .byte  196,193,41,114,241,16               // vpslld        $0x10,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,16               // vpslld        $0x10,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  197,125,91,211                      // vcvtps2dq     %ymm3,%ymm10
  .byte  196,193,33,114,242,24               // vpslld        $0x18,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,24               // vpslld        $0x18,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,53,86,202                    // vorpd         %ymm10,%ymm9,%ymm9
  .byte  196,65,61,86,193                    // vorpd         %ymm9,%ymm8,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,87                              // jne           15eb <_sk_srcover_rgba_8888_avx+0x18f>
  .byte  196,65,124,17,2                     // vmovups       %ymm8,(%r10)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,224                 // vmovq         %rax,%xmm4
  .byte  196,226,121,48,228                  // vpmovzxbw     %xmm4,%xmm4
  .byte  196,226,89,0,45,104,97,0,0          // vpshufb       0x6168(%rip),%xmm4,%xmm5        # 7730 <_sk_callback_avx+0x5f6>
  .byte  196,226,121,33,237                  // vpmovsxbd     %xmm5,%xmm5
  .byte  196,226,89,0,37,106,97,0,0          // vpshufb       0x616a(%rip),%xmm4,%xmm4        # 7740 <_sk_callback_avx+0x606>
  .byte  196,226,121,33,228                  // vpmovsxbd     %xmm4,%xmm4
  .byte  196,227,85,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm5,%ymm4
  .byte  196,194,93,44,58                    // vmaskmovps    (%r10),%ymm4,%ymm7
  .byte  233,143,254,255,255                 // jmpq          147a <_sk_srcover_rgba_8888_avx+0x1e>
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,98,49,0,21,29,97,0,0            // vpshufb       0x611d(%rip),%xmm9,%xmm10        # 7730 <_sk_callback_avx+0x5f6>
  .byte  196,66,121,33,210                   // vpmovsxbd     %xmm10,%xmm10
  .byte  196,98,49,0,13,31,97,0,0            // vpshufb       0x611f(%rip),%xmm9,%xmm9        # 7740 <_sk_callback_avx+0x606>
  .byte  196,66,121,33,201                   // vpmovsxbd     %xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,66,53,46,2                      // vmaskmovps    %ymm8,%ymm9,(%r10)
  .byte  233,99,255,255,255                  // jmpq          1599 <_sk_srcover_rgba_8888_avx+0x13d>

HIDDEN _sk_clamp_0_avx
.globl _sk_clamp_0_avx
FUNCTION(_sk_clamp_0_avx)
_sk_clamp_0_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_avx
.globl _sk_clamp_1_avx
FUNCTION(_sk_clamp_1_avx)
_sk_clamp_1_avx:
  .byte  196,98,125,24,5,208,92,0,0          // vbroadcastss  0x5cd0(%rip),%ymm8        # 732c <_sk_callback_avx+0x1f2>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_avx
.globl _sk_clamp_a_avx
FUNCTION(_sk_clamp_a_avx)
_sk_clamp_a_avx:
  .byte  196,98,125,24,5,179,92,0,0          // vbroadcastss  0x5cb3(%rip),%ymm8        # 7330 <_sk_callback_avx+0x1f6>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_dst_avx
.globl _sk_clamp_a_dst_avx
FUNCTION(_sk_clamp_a_dst_avx)
_sk_clamp_a_dst_avx:
  .byte  196,98,125,24,5,153,92,0,0          // vbroadcastss  0x5c99(%rip),%ymm8        # 7334 <_sk_callback_avx+0x1fa>
  .byte  196,193,68,93,248                   // vminps        %ymm8,%ymm7,%ymm7
  .byte  197,220,93,231                      // vminps        %ymm7,%ymm4,%ymm4
  .byte  197,212,93,239                      // vminps        %ymm7,%ymm5,%ymm5
  .byte  197,204,93,247                      // vminps        %ymm7,%ymm6,%ymm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_avx
.globl _sk_set_rgb_avx
FUNCTION(_sk_set_rgb_avx)
_sk_set_rgb_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_avx
.globl _sk_swap_rb_avx
FUNCTION(_sk_swap_rb_avx)
_sk_swap_rb_avx:
  .byte  197,124,40,192                      // vmovaps       %ymm0,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,194                      // vmovaps       %ymm2,%ymm0
  .byte  197,124,41,194                      // vmovaps       %ymm8,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_dst_avx
.globl _sk_swap_rb_dst_avx
FUNCTION(_sk_swap_rb_dst_avx)
_sk_swap_rb_dst_avx:
  .byte  197,124,40,196                      // vmovaps       %ymm4,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,230                      // vmovaps       %ymm6,%ymm4
  .byte  197,124,41,198                      // vmovaps       %ymm8,%ymm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_avx
.globl _sk_move_src_dst_avx
FUNCTION(_sk_move_src_dst_avx)
_sk_move_src_dst_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,242                      // vmovaps       %ymm2,%ymm6
  .byte  197,252,40,251                      // vmovaps       %ymm3,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_avx
.globl _sk_move_dst_src_avx
FUNCTION(_sk_move_dst_src_avx)
_sk_move_dst_src_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_avx
.globl _sk_premul_avx
FUNCTION(_sk_premul_avx)
_sk_premul_avx:
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_avx
.globl _sk_unpremul_avx
FUNCTION(_sk_unpremul_avx)
_sk_unpremul_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,100,194,200,0                // vcmpeqps      %ymm8,%ymm3,%ymm9
  .byte  196,98,125,24,21,5,92,0,0           // vbroadcastss  0x5c05(%rip),%ymm10        # 7338 <_sk_callback_avx+0x1fe>
  .byte  197,44,94,211                       // vdivps        %ymm3,%ymm10,%ymm10
  .byte  196,67,45,74,192,144                // vblendvps     %ymm9,%ymm8,%ymm10,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_avx
.globl _sk_from_srgb_avx
FUNCTION(_sk_from_srgb_avx)
_sk_from_srgb_avx:
  .byte  196,98,125,24,5,230,91,0,0          // vbroadcastss  0x5be6(%rip),%ymm8        # 733c <_sk_callback_avx+0x202>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  197,124,89,208                      // vmulps        %ymm0,%ymm0,%ymm10
  .byte  196,98,125,24,29,216,91,0,0         // vbroadcastss  0x5bd8(%rip),%ymm11        # 7340 <_sk_callback_avx+0x206>
  .byte  196,65,124,89,227                   // vmulps        %ymm11,%ymm0,%ymm12
  .byte  196,98,125,24,45,206,91,0,0         // vbroadcastss  0x5bce(%rip),%ymm13        # 7344 <_sk_callback_avx+0x20a>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,44,89,212                    // vmulps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,191,91,0,0         // vbroadcastss  0x5bbf(%rip),%ymm12        # 7348 <_sk_callback_avx+0x20e>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,53,181,91,0,0         // vbroadcastss  0x5bb5(%rip),%ymm14        # 734c <_sk_callback_avx+0x212>
  .byte  196,193,124,194,198,1               // vcmpltps      %ymm14,%ymm0,%ymm0
  .byte  196,195,45,74,193,0                 // vblendvps     %ymm0,%ymm9,%ymm10,%ymm0
  .byte  196,65,116,89,200                   // vmulps        %ymm8,%ymm1,%ymm9
  .byte  197,116,89,209                      // vmulps        %ymm1,%ymm1,%ymm10
  .byte  196,65,116,89,251                   // vmulps        %ymm11,%ymm1,%ymm15
  .byte  196,65,4,88,253                     // vaddps        %ymm13,%ymm15,%ymm15
  .byte  196,65,44,89,215                    // vmulps        %ymm15,%ymm10,%ymm10
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,193,116,194,206,1               // vcmpltps      %ymm14,%ymm1,%ymm1
  .byte  196,195,45,74,201,16                // vblendvps     %ymm1,%ymm9,%ymm10,%ymm1
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  197,108,89,202                      // vmulps        %ymm2,%ymm2,%ymm9
  .byte  196,65,108,89,211                   // vmulps        %ymm11,%ymm2,%ymm10
  .byte  196,65,44,88,213                    // vaddps        %ymm13,%ymm10,%ymm10
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,65,52,88,204                    // vaddps        %ymm12,%ymm9,%ymm9
  .byte  196,193,108,194,214,1               // vcmpltps      %ymm14,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_dst_avx
.globl _sk_from_srgb_dst_avx
FUNCTION(_sk_from_srgb_dst_avx)
_sk_from_srgb_dst_avx:
  .byte  196,98,125,24,5,78,91,0,0           // vbroadcastss  0x5b4e(%rip),%ymm8        # 7350 <_sk_callback_avx+0x216>
  .byte  196,65,92,89,200                    // vmulps        %ymm8,%ymm4,%ymm9
  .byte  197,92,89,212                       // vmulps        %ymm4,%ymm4,%ymm10
  .byte  196,98,125,24,29,64,91,0,0          // vbroadcastss  0x5b40(%rip),%ymm11        # 7354 <_sk_callback_avx+0x21a>
  .byte  196,65,92,89,227                    // vmulps        %ymm11,%ymm4,%ymm12
  .byte  196,98,125,24,45,54,91,0,0          // vbroadcastss  0x5b36(%rip),%ymm13        # 7358 <_sk_callback_avx+0x21e>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,44,89,212                    // vmulps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,39,91,0,0          // vbroadcastss  0x5b27(%rip),%ymm12        # 735c <_sk_callback_avx+0x222>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,53,29,91,0,0          // vbroadcastss  0x5b1d(%rip),%ymm14        # 7360 <_sk_callback_avx+0x226>
  .byte  196,193,92,194,230,1                // vcmpltps      %ymm14,%ymm4,%ymm4
  .byte  196,195,45,74,225,64                // vblendvps     %ymm4,%ymm9,%ymm10,%ymm4
  .byte  196,65,84,89,200                    // vmulps        %ymm8,%ymm5,%ymm9
  .byte  197,84,89,213                       // vmulps        %ymm5,%ymm5,%ymm10
  .byte  196,65,84,89,251                    // vmulps        %ymm11,%ymm5,%ymm15
  .byte  196,65,4,88,253                     // vaddps        %ymm13,%ymm15,%ymm15
  .byte  196,65,44,89,215                    // vmulps        %ymm15,%ymm10,%ymm10
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,193,84,194,238,1                // vcmpltps      %ymm14,%ymm5,%ymm5
  .byte  196,195,45,74,233,80                // vblendvps     %ymm5,%ymm9,%ymm10,%ymm5
  .byte  196,65,76,89,192                    // vmulps        %ymm8,%ymm6,%ymm8
  .byte  197,76,89,206                       // vmulps        %ymm6,%ymm6,%ymm9
  .byte  196,65,76,89,211                    // vmulps        %ymm11,%ymm6,%ymm10
  .byte  196,65,44,88,213                    // vaddps        %ymm13,%ymm10,%ymm10
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,65,52,88,204                    // vaddps        %ymm12,%ymm9,%ymm9
  .byte  196,193,76,194,246,1                // vcmpltps      %ymm14,%ymm6,%ymm6
  .byte  196,195,53,74,240,96                // vblendvps     %ymm6,%ymm8,%ymm9,%ymm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_avx
.globl _sk_to_srgb_avx
FUNCTION(_sk_to_srgb_avx)
_sk_to_srgb_avx:
  .byte  197,124,82,200                      // vrsqrtps      %ymm0,%ymm9
  .byte  196,98,125,24,5,178,90,0,0          // vbroadcastss  0x5ab2(%rip),%ymm8        # 7364 <_sk_callback_avx+0x22a>
  .byte  196,65,124,89,208                   // vmulps        %ymm8,%ymm0,%ymm10
  .byte  196,98,125,24,29,168,90,0,0         // vbroadcastss  0x5aa8(%rip),%ymm11        # 7368 <_sk_callback_avx+0x22e>
  .byte  196,65,52,89,227                    // vmulps        %ymm11,%ymm9,%ymm12
  .byte  196,98,125,24,45,158,90,0,0         // vbroadcastss  0x5a9e(%rip),%ymm13        # 736c <_sk_callback_avx+0x232>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,52,89,228                    // vmulps        %ymm12,%ymm9,%ymm12
  .byte  196,98,125,24,53,143,90,0,0         // vbroadcastss  0x5a8f(%rip),%ymm14        # 7370 <_sk_callback_avx+0x236>
  .byte  196,65,28,88,230                    // vaddps        %ymm14,%ymm12,%ymm12
  .byte  196,98,125,24,61,133,90,0,0         // vbroadcastss  0x5a85(%rip),%ymm15        # 7374 <_sk_callback_avx+0x23a>
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,52,89,204                    // vmulps        %ymm12,%ymm9,%ymm9
  .byte  196,98,125,24,37,113,90,0,0         // vbroadcastss  0x5a71(%rip),%ymm12        # 7378 <_sk_callback_avx+0x23e>
  .byte  196,193,124,194,196,1               // vcmpltps      %ymm12,%ymm0,%ymm0
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  197,124,82,201                      // vrsqrtps      %ymm1,%ymm9
  .byte  196,65,52,89,211                    // vmulps        %ymm11,%ymm9,%ymm10
  .byte  196,65,44,88,213                    // vaddps        %ymm13,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,214                    // vaddps        %ymm14,%ymm10,%ymm10
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,193,116,194,204,1               // vcmpltps      %ymm12,%ymm1,%ymm1
  .byte  196,195,53,74,202,16                // vblendvps     %ymm1,%ymm10,%ymm9,%ymm1
  .byte  197,124,82,202                      // vrsqrtps      %ymm2,%ymm9
  .byte  196,65,52,89,211                    // vmulps        %ymm11,%ymm9,%ymm10
  .byte  196,65,44,88,213                    // vaddps        %ymm13,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,214                    // vaddps        %ymm14,%ymm10,%ymm10
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,193,108,194,212,1               // vcmpltps      %ymm12,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_avx
.globl _sk_rgb_to_hsl_avx
FUNCTION(_sk_rgb_to_hsl_avx)
_sk_rgb_to_hsl_avx:
  .byte  197,124,95,193                      // vmaxps        %ymm1,%ymm0,%ymm8
  .byte  197,60,95,194                       // vmaxps        %ymm2,%ymm8,%ymm8
  .byte  197,124,93,201                      // vminps        %ymm1,%ymm0,%ymm9
  .byte  197,52,93,202                       // vminps        %ymm2,%ymm9,%ymm9
  .byte  196,65,60,92,209                    // vsubps        %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,29,215,89,0,0         // vbroadcastss  0x59d7(%rip),%ymm11        # 737c <_sk_callback_avx+0x242>
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  197,116,92,226                      // vsubps        %ymm2,%ymm1,%ymm12
  .byte  196,65,28,89,227                    // vmulps        %ymm11,%ymm12,%ymm12
  .byte  197,116,194,234,1                   // vcmpltps      %ymm2,%ymm1,%ymm13
  .byte  197,60,194,241,0                    // vcmpeqps      %ymm1,%ymm8,%ymm14
  .byte  197,236,92,208                      // vsubps        %ymm0,%ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  197,252,92,201                      // vsubps        %ymm1,%ymm0,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,176,89,0,0         // vbroadcastss  0x59b0(%rip),%ymm11        # 7388 <_sk_callback_avx+0x24e>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,158,89,0,0         // vbroadcastss  0x599e(%rip),%ymm11        # 7384 <_sk_callback_avx+0x24a>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,227,117,74,202,224              // vblendvps     %ymm14,%ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,134,89,0,0        // vbroadcastss  0x5986(%rip),%ymm2        # 7380 <_sk_callback_avx+0x246>
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,227,13,74,210,208               // vblendvps     %ymm13,%ymm2,%ymm14,%ymm2
  .byte  197,188,194,192,0                   // vcmpeqps      %ymm0,%ymm8,%ymm0
  .byte  196,193,108,88,212                  // vaddps        %ymm12,%ymm2,%ymm2
  .byte  196,227,117,74,194,0                // vblendvps     %ymm0,%ymm2,%ymm1,%ymm0
  .byte  196,193,60,88,201                   // vaddps        %ymm9,%ymm8,%ymm1
  .byte  196,98,125,24,37,109,89,0,0         // vbroadcastss  0x596d(%rip),%ymm12        # 7390 <_sk_callback_avx+0x256>
  .byte  196,193,116,89,212                  // vmulps        %ymm12,%ymm1,%ymm2
  .byte  197,28,194,226,1                    // vcmpltps      %ymm2,%ymm12,%ymm12
  .byte  196,65,36,92,216                    // vsubps        %ymm8,%ymm11,%ymm11
  .byte  196,65,36,92,217                    // vsubps        %ymm9,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  196,65,60,194,193,0                 // vcmpeqps      %ymm9,%ymm8,%ymm8
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  196,195,125,74,198,128              // vblendvps     %ymm8,%ymm14,%ymm0,%ymm0
  .byte  196,195,117,74,206,128              // vblendvps     %ymm8,%ymm14,%ymm1,%ymm1
  .byte  196,98,125,24,5,48,89,0,0           // vbroadcastss  0x5930(%rip),%ymm8        # 738c <_sk_callback_avx+0x252>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_avx
.globl _sk_hsl_to_rgb_avx
FUNCTION(_sk_hsl_to_rgb_avx)
_sk_hsl_to_rgb_avx:
  .byte  72,131,236,56                       // sub           $0x38,%rsp
  .byte  197,252,17,60,36                    // vmovups       %ymm7,(%rsp)
  .byte  197,252,17,116,36,224               // vmovups       %ymm6,-0x20(%rsp)
  .byte  197,252,17,108,36,192               // vmovups       %ymm5,-0x40(%rsp)
  .byte  197,252,17,100,36,160               // vmovups       %ymm4,-0x60(%rsp)
  .byte  197,252,17,92,36,128                // vmovups       %ymm3,-0x80(%rsp)
  .byte  197,252,40,225                      // vmovaps       %ymm1,%ymm4
  .byte  197,252,40,216                      // vmovaps       %ymm0,%ymm3
  .byte  196,98,125,24,5,253,88,0,0          // vbroadcastss  0x58fd(%rip),%ymm8        # 7394 <_sk_callback_avx+0x25a>
  .byte  197,60,194,202,2                    // vcmpleps      %ymm2,%ymm8,%ymm9
  .byte  197,92,89,210                       // vmulps        %ymm2,%ymm4,%ymm10
  .byte  196,65,92,92,218                    // vsubps        %ymm10,%ymm4,%ymm11
  .byte  196,67,45,74,203,144                // vblendvps     %ymm9,%ymm11,%ymm10,%ymm9
  .byte  197,52,88,210                       // vaddps        %ymm2,%ymm9,%ymm10
  .byte  197,108,88,202                      // vaddps        %ymm2,%ymm2,%ymm9
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,29,215,88,0,0         // vbroadcastss  0x58d7(%rip),%ymm11        # 7398 <_sk_callback_avx+0x25e>
  .byte  196,65,100,88,219                   // vaddps        %ymm11,%ymm3,%ymm11
  .byte  196,67,125,8,227,1                  // vroundps      $0x1,%ymm11,%ymm12
  .byte  196,65,36,92,252                    // vsubps        %ymm12,%ymm11,%ymm15
  .byte  196,65,44,92,217                    // vsubps        %ymm9,%ymm10,%ymm11
  .byte  196,98,125,24,37,193,88,0,0         // vbroadcastss  0x58c1(%rip),%ymm12        # 73a0 <_sk_callback_avx+0x266>
  .byte  196,193,4,89,196                    // vmulps        %ymm12,%ymm15,%ymm0
  .byte  196,98,125,24,45,183,88,0,0         // vbroadcastss  0x58b7(%rip),%ymm13        # 73a4 <_sk_callback_avx+0x26a>
  .byte  197,20,92,240                       // vsubps        %ymm0,%ymm13,%ymm14
  .byte  196,65,36,89,246                    // vmulps        %ymm14,%ymm11,%ymm14
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,226,125,24,13,152,88,0,0        // vbroadcastss  0x5898(%rip),%ymm1        # 739c <_sk_callback_avx+0x262>
  .byte  196,193,116,194,255,2               // vcmpleps      %ymm15,%ymm1,%ymm7
  .byte  196,195,13,74,249,112               // vblendvps     %ymm7,%ymm9,%ymm14,%ymm7
  .byte  196,65,60,194,247,2                 // vcmpleps      %ymm15,%ymm8,%ymm14
  .byte  196,227,45,74,255,224               // vblendvps     %ymm14,%ymm7,%ymm10,%ymm7
  .byte  196,98,125,24,53,131,88,0,0         // vbroadcastss  0x5883(%rip),%ymm14        # 73a8 <_sk_callback_avx+0x26e>
  .byte  196,65,12,194,255,2                 // vcmpleps      %ymm15,%ymm14,%ymm15
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,99,125,74,255,240               // vblendvps     %ymm15,%ymm7,%ymm0,%ymm15
  .byte  196,227,125,8,195,1                 // vroundps      $0x1,%ymm3,%ymm0
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,252                  // vmulps        %ymm12,%ymm0,%ymm7
  .byte  197,148,92,247                      // vsubps        %ymm7,%ymm13,%ymm6
  .byte  197,164,89,246                      // vmulps        %ymm6,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  197,244,194,232,2                   // vcmpleps      %ymm0,%ymm1,%ymm5
  .byte  196,195,77,74,233,80                // vblendvps     %ymm5,%ymm9,%ymm6,%ymm5
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,237,96                // vblendvps     %ymm6,%ymm5,%ymm10,%ymm5
  .byte  197,140,194,192,2                   // vcmpleps      %ymm0,%ymm14,%ymm0
  .byte  197,164,89,247                      // vmulps        %ymm7,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  196,227,77,74,237,0                 // vblendvps     %ymm0,%ymm5,%ymm6,%ymm5
  .byte  196,226,125,24,5,37,88,0,0          // vbroadcastss  0x5825(%rip),%ymm0        # 73ac <_sk_callback_avx+0x272>
  .byte  197,228,88,192                      // vaddps        %ymm0,%ymm3,%ymm0
  .byte  196,227,125,8,216,1                 // vroundps      $0x1,%ymm0,%ymm3
  .byte  197,252,92,195                      // vsubps        %ymm3,%ymm0,%ymm0
  .byte  197,244,194,200,2                   // vcmpleps      %ymm0,%ymm1,%ymm1
  .byte  196,193,124,89,220                  // vmulps        %ymm12,%ymm0,%ymm3
  .byte  197,148,92,243                      // vsubps        %ymm3,%ymm13,%ymm6
  .byte  197,164,89,246                      // vmulps        %ymm6,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  196,195,77,74,201,16                // vblendvps     %ymm1,%ymm9,%ymm6,%ymm1
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,201,96                // vblendvps     %ymm6,%ymm1,%ymm10,%ymm1
  .byte  197,140,194,192,2                   // vcmpleps      %ymm0,%ymm14,%ymm0
  .byte  197,164,89,219                      // vmulps        %ymm3,%ymm11,%ymm3
  .byte  197,180,88,219                      // vaddps        %ymm3,%ymm9,%ymm3
  .byte  196,227,101,74,217,0                // vblendvps     %ymm0,%ymm1,%ymm3,%ymm3
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,220,194,224,0                   // vcmpeqps      %ymm0,%ymm4,%ymm4
  .byte  196,227,5,74,194,64                 // vblendvps     %ymm4,%ymm2,%ymm15,%ymm0
  .byte  196,227,85,74,202,64                // vblendvps     %ymm4,%ymm2,%ymm5,%ymm1
  .byte  196,227,101,74,210,64               // vblendvps     %ymm4,%ymm2,%ymm3,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,92,36,128                // vmovups       -0x80(%rsp),%ymm3
  .byte  197,252,16,100,36,160               // vmovups       -0x60(%rsp),%ymm4
  .byte  197,252,16,108,36,192               // vmovups       -0x40(%rsp),%ymm5
  .byte  197,252,16,116,36,224               // vmovups       -0x20(%rsp),%ymm6
  .byte  197,252,16,60,36                    // vmovups       (%rsp),%ymm7
  .byte  72,131,196,56                       // add           $0x38,%rsp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_avx
.globl _sk_scale_1_float_avx
FUNCTION(_sk_scale_1_float_avx)
_sk_scale_1_float_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_avx
.globl _sk_scale_u8_avx
FUNCTION(_sk_scale_u8_avx)
_sk_scale_u8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,74                              // jne           1c7e <_sk_scale_u8_avx+0x54>
  .byte  196,66,121,48,4,19                  // vpmovzxbw     (%r11,%rdx,1),%xmm8
  .byte  197,57,219,5,14,91,0,0              // vpand         0x5b0e(%rip),%xmm8,%xmm8        # 7750 <_sk_callback_avx+0x616>
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,65,57,105,201                   // vpunpckhwd    %xmm9,%xmm8,%xmm9
  .byte  196,66,121,51,192                   // vpmovzxwd     %xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,75,87,0,0          // vbroadcastss  0x574b(%rip),%ymm9        # 73b0 <_sk_callback_avx+0x276>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,167                             // ja            1c3a <_sk_scale_u8_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,122,0,0,0                 // lea           0x7a(%rip),%r10        # 1d18 <_sk_scale_u8_avx+0xee>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  235,136                             // jmp           1c3a <_sk_scale_u8_avx+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,2                    // vpinsrw       $0x2,%eax,%xmm8,%xmm8
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,121,110,200                     // vmovd         %eax,%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,67,57,14,193,3                  // vpblendw      $0x3,%xmm9,%xmm8,%xmm8
  .byte  233,95,255,255,255                  // jmpq          1c3a <_sk_scale_u8_avx+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,6                    // vpinsrw       $0x6,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,57,196,192,5                    // vpinsrw       $0x5,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,57,196,192,4                    // vpinsrw       $0x4,%eax,%xmm8,%xmm8
  .byte  196,65,121,110,12,19                // vmovd         (%r11,%rdx,1),%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,67,49,14,192,240                // vpblendw      $0xf0,%xmm8,%xmm9,%xmm8
  .byte  233,35,255,255,255                  // jmpq          1c3a <_sk_scale_u8_avx+0x10>
  .byte  144                                 // nop
  .byte  143                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,170,255,255,255,154             // ljmp          *-0x65000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  233,255,255,255,222                 // jmpq          ffffffffdf001d28 <_sk_callback_avx+0xffffffffdeffabee>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_1_float_avx
.globl _sk_lerp_1_float_avx
FUNCTION(_sk_lerp_1_float_avx)
_sk_lerp_1_float_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_avx
.globl _sk_lerp_u8_avx
FUNCTION(_sk_lerp_u8_avx)
_sk_lerp_u8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,110                             // jne           1deb <_sk_lerp_u8_avx+0x78>
  .byte  196,66,121,48,4,19                  // vpmovzxbw     (%r11,%rdx,1),%xmm8
  .byte  197,57,219,5,213,89,0,0             // vpand         0x59d5(%rip),%xmm8,%xmm8        # 7760 <_sk_callback_avx+0x626>
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,65,57,105,201                   // vpunpckhwd    %xmm9,%xmm8,%xmm9
  .byte  196,66,121,51,192                   // vpmovzxwd     %xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,6,86,0,0           // vbroadcastss  0x5606(%rip),%ymm9        # 73b4 <_sk_callback_avx+0x27a>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,131                             // ja            1d83 <_sk_lerp_u8_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,125,0,0,0                 // lea           0x7d(%rip),%r10        # 1e88 <_sk_lerp_u8_avx+0x115>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  233,97,255,255,255                  // jmpq          1d83 <_sk_lerp_u8_avx+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,2                    // vpinsrw       $0x2,%eax,%xmm8,%xmm8
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,121,110,200                     // vmovd         %eax,%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,67,57,14,193,3                  // vpblendw      $0x3,%xmm9,%xmm8,%xmm8
  .byte  233,56,255,255,255                  // jmpq          1d83 <_sk_lerp_u8_avx+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,6                    // vpinsrw       $0x6,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,57,196,192,5                    // vpinsrw       $0x5,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,57,196,192,4                    // vpinsrw       $0x4,%eax,%xmm8,%xmm8
  .byte  196,65,121,110,12,19                // vmovd         (%r11,%rdx,1),%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,67,49,14,192,240                // vpblendw      $0xf0,%xmm8,%xmm9,%xmm8
  .byte  233,252,254,255,255                 // jmpq          1d83 <_sk_lerp_u8_avx+0x10>
  .byte  144                                 // nop
  .byte  140,255                             // mov           %?,%edi
  .byte  255                                 // (bad)
  .byte  255,170,255,255,255,154             // ljmp          *-0x65000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  233,255,255,255,222                 // jmpq          ffffffffdf001e98 <_sk_callback_avx+0xffffffffdeffad5e>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_565_avx
.globl _sk_lerp_565_avx
FUNCTION(_sk_lerp_565_avx)
_sk_lerp_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,208,0,0,0                    // jne           1f82 <_sk_lerp_565_avx+0xde>
  .byte  196,65,122,111,4,83                 // vmovdqu       (%r11,%rdx,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,65,57,105,201                   // vpunpckhwd    %xmm9,%xmm8,%xmm9
  .byte  196,66,121,51,192                   // vpmovzxwd     %xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,226,84,0,0         // vbroadcastss  0x54e2(%rip),%ymm9        # 73b8 <_sk_callback_avx+0x27e>
  .byte  196,65,60,84,201                    // vandps        %ymm9,%ymm8,%ymm9
  .byte  196,65,124,91,201                   // vcvtdq2ps     %ymm9,%ymm9
  .byte  196,98,125,24,21,211,84,0,0         // vbroadcastss  0x54d3(%rip),%ymm10        # 73bc <_sk_callback_avx+0x282>
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,201,84,0,0         // vbroadcastss  0x54c9(%rip),%ymm10        # 73c0 <_sk_callback_avx+0x286>
  .byte  196,65,60,84,210                    // vandps        %ymm10,%ymm8,%ymm10
  .byte  196,65,124,91,210                   // vcvtdq2ps     %ymm10,%ymm10
  .byte  196,98,125,24,29,186,84,0,0         // vbroadcastss  0x54ba(%rip),%ymm11        # 73c4 <_sk_callback_avx+0x28a>
  .byte  196,65,44,89,211                    // vmulps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,29,176,84,0,0         // vbroadcastss  0x54b0(%rip),%ymm11        # 73c8 <_sk_callback_avx+0x28e>
  .byte  196,65,60,84,195                    // vandps        %ymm11,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,29,161,84,0,0         // vbroadcastss  0x54a1(%rip),%ymm11        # 73cc <_sk_callback_avx+0x292>
  .byte  196,65,60,89,195                    // vmulps        %ymm11,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,65,100,89,201                   // vmulps        %ymm9,%ymm3,%ymm9
  .byte  197,52,88,207                       // vaddps        %ymm7,%ymm9,%ymm9
  .byte  196,65,100,89,210                   // vmulps        %ymm10,%ymm3,%ymm10
  .byte  197,44,88,215                       // vaddps        %ymm7,%ymm10,%ymm10
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  197,172,95,219                      // vmaxps        %ymm3,%ymm10,%ymm3
  .byte  197,180,95,219                      // vmaxps        %ymm3,%ymm9,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,29,255,255,255               // ja            1eb8 <_sk_lerp_565_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,102,0,0,0                 // lea           0x66(%rip),%r10        # 200c <_sk_lerp_565_avx+0x168>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  233,251,254,255,255                 // jmpq          1eb8 <_sk_lerp_565_avx+0x14>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,65,57,196,68,83,4,2             // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,121,110,12,83                // vmovd         (%r11,%rdx,2),%xmm9
  .byte  196,67,57,14,193,3                  // vpblendw      $0x3,%xmm9,%xmm8,%xmm8
  .byte  233,221,254,255,255                 // jmpq          1eb8 <_sk_lerp_565_avx+0x14>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,65,57,196,68,83,12,6            // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,10,5            // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,8,4             // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,122,126,12,83                // vmovq         (%r11,%rdx,2),%xmm9
  .byte  196,67,49,14,192,240                // vpblendw      $0xf0,%xmm8,%xmm9,%xmm8
  .byte  233,175,254,255,255                 // jmpq          1eb8 <_sk_lerp_565_avx+0x14>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  163,255,255,255,190,255,255,255,177 // movabs        %eax,0xb1ffffffbeffffff
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,207                             // dec           %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_tables_avx
.globl _sk_load_tables_avx
FUNCTION(_sk_load_tables_avx)
_sk_load_tables_avx:
  .byte  83                                  // push          %rbx
  .byte  197,252,17,124,36,208               // vmovups       %ymm7,-0x30(%rsp)
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,248,1,0,0                    // jne           2240 <_sk_load_tables_avx+0x218>
  .byte  196,65,124,16,18                    // vmovups       (%r10),%ymm10
  .byte  197,124,40,13,75,88,0,0             // vmovaps       0x584b(%rip),%ymm9        # 78a0 <_sk_callback_avx+0x766>
  .byte  196,193,44,84,201                   // vandps        %ymm9,%ymm10,%ymm1
  .byte  196,227,125,25,200,1                // vextractf128  $0x1,%ymm1,%xmm0
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  196,161,122,16,20,147               // vmovss        (%rbx,%r10,4),%xmm2
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,163,105,33,4,155,16             // vinsertps     $0x10,(%rbx,%r11,4),%xmm2,%xmm0
  .byte  68,137,209                          // mov           %r10d,%ecx
  .byte  196,227,121,33,4,139,32             // vinsertps     $0x20,(%rbx,%rcx,4),%xmm0,%xmm0
  .byte  196,193,249,126,203                 // vmovq         %xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,35,121,33,44,147,48             // vinsertps     $0x30,(%rbx,%r10,4),%xmm0,%xmm13
  .byte  68,137,217                          // mov           %r11d,%ecx
  .byte  197,250,16,20,139                   // vmovss        (%rbx,%rcx,4),%xmm2
  .byte  196,227,249,22,201,1                // vpextrq       $0x1,%xmm1,%rcx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,163,105,33,12,155,16            // vinsertps     $0x10,(%rbx,%r11,4),%xmm2,%xmm1
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,163,113,33,12,147,32            // vinsertps     $0x20,(%rbx,%r10,4),%xmm1,%xmm1
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  196,99,113,33,36,139,48             // vinsertps     $0x30,(%rbx,%rcx,4),%xmm1,%xmm12
  .byte  196,193,105,114,210,8               // vpsrld        $0x8,%xmm10,%xmm2
  .byte  196,67,125,25,208,1                 // vextractf128  $0x1,%ymm10,%xmm8
  .byte  196,193,121,114,208,8               // vpsrld        $0x8,%xmm8,%xmm0
  .byte  196,227,109,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm2,%ymm0
  .byte  196,193,124,84,209                  // vandps        %ymm9,%ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  196,225,249,126,193                 // vmovq         %xmm0,%rcx
  .byte  137,203                             // mov           %ecx,%ebx
  .byte  196,193,122,16,12,154               // vmovss        (%r10,%rbx,4),%xmm1
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,67,113,33,52,138,16             // vinsertps     $0x10,(%r10,%rcx,4),%xmm1,%xmm14
  .byte  137,217                             // mov           %ebx,%ecx
  .byte  196,193,122,16,28,138               // vmovss        (%r10,%rcx,4),%xmm3
  .byte  196,225,249,126,209                 // vmovq         %xmm2,%rcx
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,122,16,12,154               // vmovss        (%r10,%rbx,4),%xmm1
  .byte  137,203                             // mov           %ecx,%ebx
  .byte  196,193,122,16,4,154                // vmovss        (%r10,%rbx,4),%xmm0
  .byte  196,227,249,22,211,1                // vpextrq       $0x1,%xmm2,%rbx
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,67,121,33,28,138,16             // vinsertps     $0x10,(%r10,%rcx,4),%xmm0,%xmm11
  .byte  137,217                             // mov           %ebx,%ecx
  .byte  196,65,122,16,60,138                // vmovss        (%r10,%rcx,4),%xmm15
  .byte  196,195,29,24,197,1                 // vinsertf128   $0x1,%xmm13,%ymm12,%ymm0
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,9,33,219,32                 // vinsertps     $0x20,%xmm3,%xmm14,%xmm3
  .byte  196,227,97,33,249,48                // vinsertps     $0x30,%xmm1,%xmm3,%xmm7
  .byte  196,65,122,16,52,154                // vmovss        (%r10,%rbx,4),%xmm14
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,97,114,210,16               // vpsrld        $0x10,%xmm10,%xmm3
  .byte  196,193,105,114,208,16              // vpsrld        $0x10,%xmm8,%xmm2
  .byte  196,227,101,24,210,1                // vinsertf128   $0x1,%xmm2,%ymm3,%ymm2
  .byte  196,65,108,84,201                   // vandps        %ymm9,%ymm2,%ymm9
  .byte  196,99,125,25,202,1                 // vextractf128  $0x1,%ymm9,%xmm2
  .byte  196,225,249,126,209                 // vmovq         %xmm2,%rcx
  .byte  137,203                             // mov           %ecx,%ebx
  .byte  197,250,16,28,152                   // vmovss        (%rax,%rbx,4),%xmm3
  .byte  196,227,249,22,211,1                // vpextrq       $0x1,%xmm2,%rbx
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,99,97,33,36,136,16              // vinsertps     $0x10,(%rax,%rcx,4),%xmm3,%xmm12
  .byte  137,217                             // mov           %ebx,%ecx
  .byte  197,250,16,28,136                   // vmovss        (%rax,%rcx,4),%xmm3
  .byte  196,97,249,126,201                  // vmovq         %xmm9,%rcx
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  197,250,16,20,152                   // vmovss        (%rax,%rbx,4),%xmm2
  .byte  137,203                             // mov           %ecx,%ebx
  .byte  197,250,16,12,152                   // vmovss        (%rax,%rbx,4),%xmm1
  .byte  196,99,249,22,203,1                 // vpextrq       $0x1,%xmm9,%rbx
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,99,113,33,12,136,16             // vinsertps     $0x10,(%rax,%rcx,4),%xmm1,%xmm9
  .byte  137,217                             // mov           %ebx,%ecx
  .byte  197,122,16,44,136                   // vmovss        (%rax,%rcx,4),%xmm13
  .byte  196,195,33,33,207,32                // vinsertps     $0x20,%xmm15,%xmm11,%xmm1
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  197,122,16,28,152                   // vmovss        (%rax,%rbx,4),%xmm11
  .byte  196,195,113,33,206,48               // vinsertps     $0x30,%xmm14,%xmm1,%xmm1
  .byte  196,227,117,24,207,1                // vinsertf128   $0x1,%xmm7,%ymm1,%ymm1
  .byte  196,227,25,33,219,32                // vinsertps     $0x20,%xmm3,%xmm12,%xmm3
  .byte  196,227,97,33,210,48                // vinsertps     $0x30,%xmm2,%xmm3,%xmm2
  .byte  196,195,49,33,221,32                // vinsertps     $0x20,%xmm13,%xmm9,%xmm3
  .byte  196,195,97,33,219,48                // vinsertps     $0x30,%xmm11,%xmm3,%xmm3
  .byte  196,227,101,24,210,1                // vinsertf128   $0x1,%xmm2,%ymm3,%ymm2
  .byte  196,193,97,114,210,24               // vpsrld        $0x18,%xmm10,%xmm3
  .byte  196,193,65,114,208,24               // vpsrld        $0x18,%xmm8,%xmm7
  .byte  196,227,101,24,223,1                // vinsertf128   $0x1,%xmm7,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,226,125,24,61,162,81,0,0        // vbroadcastss  0x51a2(%rip),%ymm7        # 73d0 <_sk_callback_avx+0x296>
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  197,252,16,124,36,208               // vmovups       -0x30(%rsp),%ymm7
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  73,199,195,255,255,255,255          // mov           $0xffffffffffffffff,%r11
  .byte  73,211,235                          // shr           %cl,%r11
  .byte  196,193,249,110,195                 // vmovq         %r11,%xmm0
  .byte  196,226,121,48,192                  // vpmovzxbw     %xmm0,%xmm0
  .byte  196,226,121,0,13,8,85,0,0           // vpshufb       0x5508(%rip),%xmm0,%xmm1        # 7770 <_sk_callback_avx+0x636>
  .byte  196,226,121,33,201                  // vpmovsxbd     %xmm1,%xmm1
  .byte  196,226,121,0,5,10,85,0,0           // vpshufb       0x550a(%rip),%xmm0,%xmm0        # 7780 <_sk_callback_avx+0x646>
  .byte  196,226,121,33,192                  // vpmovsxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  196,66,125,44,18                    // vmaskmovps    (%r10),%ymm0,%ymm10
  .byte  233,194,253,255,255                 // jmpq          204d <_sk_load_tables_avx+0x25>

HIDDEN _sk_load_tables_u16_be_avx
.globl _sk_load_tables_u16_be_avx
FUNCTION(_sk_load_tables_u16_be_avx)
_sk_load_tables_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  197,252,17,124,36,200               // vmovups       %ymm7,-0x38(%rsp)
  .byte  15,133,84,2,0,0                     // jne           24fb <_sk_load_tables_u16_be_avx+0x270>
  .byte  196,1,121,16,4,81                   // vmovupd       (%r9,%r10,2),%xmm8
  .byte  196,129,121,16,84,81,16             // vmovupd       0x10(%r9,%r10,2),%xmm2
  .byte  196,129,121,16,92,81,32             // vmovupd       0x20(%r9,%r10,2),%xmm3
  .byte  196,1,122,111,76,81,48              // vmovdqu       0x30(%r9,%r10,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,202                      // vpunpcklwd    %xmm2,%xmm0,%xmm9
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,241,97,195                      // vpunpcklwd    %xmm3,%xmm1,%xmm0
  .byte  197,113,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm11
  .byte  197,177,108,200                     // vpunpcklqdq   %xmm0,%xmm9,%xmm1
  .byte  197,49,109,224                      // vpunpckhqdq   %xmm0,%xmm9,%xmm12
  .byte  197,121,111,21,156,84,0,0           // vmovdqa       0x549c(%rip),%xmm10        # 7790 <_sk_callback_avx+0x656>
  .byte  196,193,113,219,202                 // vpand         %xmm10,%xmm1,%xmm1
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,193,113,105,209                 // vpunpckhwd    %xmm9,%xmm1,%xmm2
  .byte  196,193,249,126,209                 // vmovq         %xmm2,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,88,8                         // mov           0x8(%rax),%r11
  .byte  196,129,122,16,28,147               // vmovss        (%r11,%r10,4),%xmm3
  .byte  196,195,249,22,210,1                // vpextrq       $0x1,%xmm2,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,97,33,44,139,16               // vinsertps     $0x10,(%r11,%r9,4),%xmm3,%xmm13
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,129,122,16,28,139               // vmovss        (%r11,%r9,4),%xmm3
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  196,129,122,16,4,147                // vmovss        (%r11,%r10,4),%xmm0
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,129,122,16,20,147               // vmovss        (%r11,%r10,4),%xmm2
  .byte  196,195,249,22,202,1                // vpextrq       $0x1,%xmm1,%r10
  .byte  196,131,105,33,12,11,16             // vinsertps     $0x10,(%r11,%r9,1),%xmm2,%xmm1
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,129,122,16,20,139               // vmovss        (%r11,%r9,4),%xmm2
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,227,17,33,219,32                // vinsertps     $0x20,%xmm3,%xmm13,%xmm3
  .byte  196,99,97,33,232,48                 // vinsertps     $0x30,%xmm0,%xmm3,%xmm13
  .byte  196,99,113,33,242,32                // vinsertps     $0x20,%xmm2,%xmm1,%xmm14
  .byte  196,1,122,16,60,19                  // vmovss        (%r11,%r10,1),%xmm15
  .byte  196,193,25,219,210                  // vpand         %xmm10,%xmm12,%xmm2
  .byte  196,193,105,105,193                 // vpunpckhwd    %xmm9,%xmm2,%xmm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,129,122,16,12,153               // vmovss        (%r9,%r11,4),%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,113,33,36,145,16              // vinsertps     $0x10,(%r9,%r10,4),%xmm1,%xmm12
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,226,121,51,194                  // vpmovzxwd     %xmm2,%xmm0
  .byte  196,129,122,16,20,145               // vmovss        (%r9,%r10,4),%xmm2
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  196,129,122,16,28,153               // vmovss        (%r9,%r11,4),%xmm3
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,129,122,16,12,153               // vmovss        (%r9,%r11,4),%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  196,131,113,33,12,17,16             // vinsertps     $0x10,(%r9,%r10,1),%xmm1,%xmm1
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  196,129,122,16,60,145               // vmovss        (%r9,%r10,4),%xmm7
  .byte  196,195,9,33,199,48                 // vinsertps     $0x30,%xmm15,%xmm14,%xmm0
  .byte  196,65,57,108,243                   // vpunpcklqdq   %xmm11,%xmm8,%xmm14
  .byte  196,195,125,24,197,1                // vinsertf128   $0x1,%xmm13,%ymm0,%ymm0
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,227,25,33,210,32                // vinsertps     $0x20,%xmm2,%xmm12,%xmm2
  .byte  196,227,105,33,219,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm3
  .byte  196,99,113,33,239,32                // vinsertps     $0x20,%xmm7,%xmm1,%xmm13
  .byte  196,1,122,16,60,25                  // vmovss        (%r9,%r11,1),%xmm15
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,193,9,219,250                   // vpand         %xmm10,%xmm14,%xmm7
  .byte  196,193,65,105,209                  // vpunpckhwd    %xmm9,%xmm7,%xmm2
  .byte  196,193,249,126,209                 // vmovq         %xmm2,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,193,122,16,12,130               // vmovss        (%r10,%rax,4),%xmm1
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,113,33,20,138,16              // vinsertps     $0x10,(%r10,%r9,4),%xmm1,%xmm10
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,226,121,51,207                  // vpmovzxwd     %xmm7,%xmm1
  .byte  196,1,122,16,52,138                 // vmovss        (%r10,%r9,4),%xmm14
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  196,65,122,16,36,130                // vmovss        (%r10,%rax,4),%xmm12
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,193,122,16,20,130               // vmovss        (%r10,%rax,4),%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  196,131,105,33,20,10,16             // vinsertps     $0x10,(%r10,%r9,1),%xmm2,%xmm2
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,193,122,16,60,130               // vmovss        (%r10,%rax,4),%xmm7
  .byte  196,195,17,33,207,48                // vinsertps     $0x30,%xmm15,%xmm13,%xmm1
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,1,122,16,44,26                  // vmovss        (%r10,%r11,1),%xmm13
  .byte  196,227,117,24,203,1                // vinsertf128   $0x1,%xmm3,%ymm1,%ymm1
  .byte  196,195,41,33,222,32                // vinsertps     $0x20,%xmm14,%xmm10,%xmm3
  .byte  196,195,97,33,220,48                // vinsertps     $0x30,%xmm12,%xmm3,%xmm3
  .byte  196,227,105,33,215,32               // vinsertps     $0x20,%xmm7,%xmm2,%xmm2
  .byte  196,195,105,33,213,48               // vinsertps     $0x30,%xmm13,%xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  196,193,57,109,219                  // vpunpckhqdq   %xmm11,%xmm8,%xmm3
  .byte  197,193,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm7
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,193,235,219                     // vpor          %xmm3,%xmm7,%xmm3
  .byte  196,193,97,105,249                  // vpunpckhwd    %xmm9,%xmm3,%xmm7
  .byte  196,226,121,51,219                  // vpmovzxwd     %xmm3,%xmm3
  .byte  196,227,101,24,223,1                // vinsertf128   $0x1,%xmm7,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,226,125,24,61,231,78,0,0        // vbroadcastss  0x4ee7(%rip),%ymm7        # 73d4 <_sk_callback_avx+0x29a>
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,124,36,200               // vmovups       -0x38(%rsp),%ymm7
  .byte  255,224                             // jmpq          *%rax
  .byte  196,1,123,16,4,81                   // vmovsd        (%r9,%r10,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,85                              // je            2561 <_sk_load_tables_u16_be_avx+0x2d6>
  .byte  196,1,57,22,68,81,8                 // vmovhpd       0x8(%r9,%r10,2),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,72                              // jb            2561 <_sk_load_tables_u16_be_avx+0x2d6>
  .byte  196,129,123,16,84,81,16             // vmovsd        0x10(%r9,%r10,2),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,72                              // je            256e <_sk_load_tables_u16_be_avx+0x2e3>
  .byte  196,129,105,22,84,81,24             // vmovhpd       0x18(%r9,%r10,2),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,59                              // jb            256e <_sk_load_tables_u16_be_avx+0x2e3>
  .byte  196,129,123,16,92,81,32             // vmovsd        0x20(%r9,%r10,2),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,126,253,255,255              // je            22c2 <_sk_load_tables_u16_be_avx+0x37>
  .byte  196,129,97,22,92,81,40              // vmovhpd       0x28(%r9,%r10,2),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,109,253,255,255              // jb            22c2 <_sk_load_tables_u16_be_avx+0x37>
  .byte  196,1,122,126,76,81,48              // vmovq         0x30(%r9,%r10,2),%xmm9
  .byte  233,97,253,255,255                  // jmpq          22c2 <_sk_load_tables_u16_be_avx+0x37>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,84,253,255,255                  // jmpq          22c2 <_sk_load_tables_u16_be_avx+0x37>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,75,253,255,255                  // jmpq          22c2 <_sk_load_tables_u16_be_avx+0x37>

HIDDEN _sk_load_tables_rgb_u16_be_avx
.globl _sk_load_tables_rgb_u16_be_avx
FUNCTION(_sk_load_tables_rgb_u16_be_avx)
_sk_load_tables_rgb_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,82                        // lea           (%rdx,%rdx,2),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  197,252,17,124,36,200               // vmovups       %ymm7,-0x38(%rsp)
  .byte  197,252,17,116,36,168               // vmovups       %ymm6,-0x58(%rsp)
  .byte  15,133,71,2,0,0                     // jne           27dc <_sk_load_tables_rgb_u16_be_avx+0x265>
  .byte  196,129,122,111,4,81                // vmovdqu       (%r9,%r10,2),%xmm0
  .byte  196,129,122,111,84,81,12            // vmovdqu       0xc(%r9,%r10,2),%xmm2
  .byte  196,129,122,111,76,81,24            // vmovdqu       0x18(%r9,%r10,2),%xmm1
  .byte  196,129,122,111,92,81,32            // vmovdqu       0x20(%r9,%r10,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,249,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm0
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,203                     // vpunpckhwd    %xmm3,%xmm1,%xmm1
  .byte  197,185,108,218                     // vpunpcklqdq   %xmm2,%xmm8,%xmm3
  .byte  197,57,109,218                      // vpunpckhqdq   %xmm2,%xmm8,%xmm11
  .byte  197,121,108,193                     // vpunpcklqdq   %xmm1,%xmm0,%xmm8
  .byte  197,121,111,13,161,81,0,0           // vmovdqa       0x51a1(%rip),%xmm9        # 77a0 <_sk_callback_avx+0x666>
  .byte  196,193,97,219,193                  // vpand         %xmm9,%xmm3,%xmm0
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,193,121,105,202                 // vpunpckhwd    %xmm10,%xmm0,%xmm1
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,88,8                         // mov           0x8(%rax),%r11
  .byte  196,129,122,16,20,147               // vmovss        (%r11,%r10,4),%xmm2
  .byte  196,195,249,22,202,1                // vpextrq       $0x1,%xmm1,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,105,33,36,139,16              // vinsertps     $0x10,(%r11,%r9,4),%xmm2,%xmm12
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,129,122,16,20,139               // vmovss        (%r11,%r9,4),%xmm2
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  196,129,122,16,12,147               // vmovss        (%r11,%r10,4),%xmm1
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,129,122,16,28,147               // vmovss        (%r11,%r10,4),%xmm3
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  196,131,97,33,28,11,16              // vinsertps     $0x10,(%r11,%r9,1),%xmm3,%xmm3
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,129,122,16,4,139                // vmovss        (%r11,%r9,4),%xmm0
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,227,25,33,210,32                // vinsertps     $0x20,%xmm2,%xmm12,%xmm2
  .byte  196,227,105,33,201,48               // vinsertps     $0x30,%xmm1,%xmm2,%xmm1
  .byte  196,129,122,16,20,19                // vmovss        (%r11,%r10,1),%xmm2
  .byte  196,65,33,219,225                   // vpand         %xmm9,%xmm11,%xmm12
  .byte  196,65,25,105,218                   // vpunpckhwd    %xmm10,%xmm12,%xmm11
  .byte  196,65,249,126,218                  // vmovq         %xmm11,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,67,249,22,219,1                 // vpextrq       $0x1,%xmm11,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,17,33,28,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm13,%xmm11
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,66,121,51,244                   // vpmovzxwd     %xmm12,%xmm14
  .byte  196,1,122,16,44,145                 // vmovss        (%r9,%r10,4),%xmm13
  .byte  196,65,249,126,242                  // vmovq         %xmm14,%r10
  .byte  196,1,122,16,36,153                 // vmovss        (%r9,%r11,4),%xmm12
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,1,122,16,60,153                 // vmovss        (%r9,%r11,4),%xmm15
  .byte  196,67,249,22,243,1                 // vpextrq       $0x1,%xmm14,%r11
  .byte  196,3,1,33,52,17,16                 // vinsertps     $0x10,(%r9,%r10,1),%xmm15,%xmm14
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  196,1,122,16,60,145                 // vmovss        (%r9,%r10,4),%xmm15
  .byte  196,227,97,33,192,32                // vinsertps     $0x20,%xmm0,%xmm3,%xmm0
  .byte  196,227,121,33,194,48               // vinsertps     $0x30,%xmm2,%xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,129,122,16,52,25                // vmovss        (%r9,%r11,1),%xmm6
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,65,57,219,193                   // vpand         %xmm9,%xmm8,%xmm8
  .byte  196,193,57,105,210                  // vpunpckhwd    %xmm10,%xmm8,%xmm2
  .byte  196,193,249,126,209                 // vmovq         %xmm2,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,193,122,16,12,130               // vmovss        (%r10,%rax,4),%xmm1
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,113,33,12,138,16              // vinsertps     $0x10,(%r10,%r9,4),%xmm1,%xmm9
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,194,121,51,200                  // vpmovzxwd     %xmm8,%xmm1
  .byte  196,1,122,16,4,138                  // vmovss        (%r10,%r9,4),%xmm8
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  196,65,122,16,20,130                // vmovss        (%r10,%rax,4),%xmm10
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,193,122,16,20,130               // vmovss        (%r10,%rax,4),%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  196,131,105,33,20,10,16             // vinsertps     $0x10,(%r10,%r9,1),%xmm2,%xmm2
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,193,122,16,60,130               // vmovss        (%r10,%rax,4),%xmm7
  .byte  196,195,33,33,205,32                // vinsertps     $0x20,%xmm13,%xmm11,%xmm1
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,1,122,16,28,26                  // vmovss        (%r10,%r11,1),%xmm11
  .byte  196,195,113,33,204,48               // vinsertps     $0x30,%xmm12,%xmm1,%xmm1
  .byte  196,195,9,33,223,32                 // vinsertps     $0x20,%xmm15,%xmm14,%xmm3
  .byte  196,227,97,33,222,48                // vinsertps     $0x30,%xmm6,%xmm3,%xmm3
  .byte  196,227,101,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm1
  .byte  196,195,49,33,216,32                // vinsertps     $0x20,%xmm8,%xmm9,%xmm3
  .byte  196,195,97,33,218,48                // vinsertps     $0x30,%xmm10,%xmm3,%xmm3
  .byte  196,227,105,33,215,32               // vinsertps     $0x20,%xmm7,%xmm2,%xmm2
  .byte  196,195,105,33,211,48               // vinsertps     $0x30,%xmm11,%xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,10,76,0,0         // vbroadcastss  0x4c0a(%rip),%ymm3        # 73d8 <_sk_callback_avx+0x29e>
  .byte  197,252,16,116,36,168               // vmovups       -0x58(%rsp),%ymm6
  .byte  197,252,16,124,36,200               // vmovups       -0x38(%rsp),%ymm7
  .byte  255,224                             // jmpq          *%rax
  .byte  196,129,121,110,4,81                // vmovd         (%r9,%r10,2),%xmm0
  .byte  196,129,121,196,68,81,4,2           // vpinsrw       $0x2,0x4(%r9,%r10,2),%xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,5                               // jne           27f5 <_sk_load_tables_rgb_u16_be_avx+0x27e>
  .byte  233,212,253,255,255                 // jmpq          25c9 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  196,129,121,110,76,81,6             // vmovd         0x6(%r9,%r10,2),%xmm1
  .byte  196,1,113,196,68,81,10,2            // vpinsrw       $0x2,0xa(%r9,%r10,2),%xmm1,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,26                              // jb            2824 <_sk_load_tables_rgb_u16_be_avx+0x2ad>
  .byte  196,129,121,110,76,81,12            // vmovd         0xc(%r9,%r10,2),%xmm1
  .byte  196,129,113,196,84,81,16,2          // vpinsrw       $0x2,0x10(%r9,%r10,2),%xmm1,%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  117,10                              // jne           2829 <_sk_load_tables_rgb_u16_be_avx+0x2b2>
  .byte  233,165,253,255,255                 // jmpq          25c9 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  233,160,253,255,255                 // jmpq          25c9 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  196,129,121,110,76,81,18            // vmovd         0x12(%r9,%r10,2),%xmm1
  .byte  196,1,113,196,76,81,22,2            // vpinsrw       $0x2,0x16(%r9,%r10,2),%xmm1,%xmm9
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,26                              // jb            2858 <_sk_load_tables_rgb_u16_be_avx+0x2e1>
  .byte  196,129,121,110,76,81,24            // vmovd         0x18(%r9,%r10,2),%xmm1
  .byte  196,129,113,196,76,81,28,2          // vpinsrw       $0x2,0x1c(%r9,%r10,2),%xmm1,%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  117,10                              // jne           285d <_sk_load_tables_rgb_u16_be_avx+0x2e6>
  .byte  233,113,253,255,255                 // jmpq          25c9 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  233,108,253,255,255                 // jmpq          25c9 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  196,129,121,110,92,81,30            // vmovd         0x1e(%r9,%r10,2),%xmm3
  .byte  196,1,97,196,92,81,34,2             // vpinsrw       $0x2,0x22(%r9,%r10,2),%xmm3,%xmm11
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,20                              // jb            2886 <_sk_load_tables_rgb_u16_be_avx+0x30f>
  .byte  196,129,121,110,92,81,36            // vmovd         0x24(%r9,%r10,2),%xmm3
  .byte  196,129,97,196,92,81,40,2           // vpinsrw       $0x2,0x28(%r9,%r10,2),%xmm3,%xmm3
  .byte  233,67,253,255,255                  // jmpq          25c9 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  233,62,253,255,255                  // jmpq          25c9 <_sk_load_tables_rgb_u16_be_avx+0x52>

HIDDEN _sk_byte_tables_avx
.globl _sk_byte_tables_avx
FUNCTION(_sk_byte_tables_avx)
_sk_byte_tables_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,70,75,0,0           // vbroadcastss  0x4b46(%rip),%ymm8        # 73dc <_sk_callback_avx+0x2a2>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,125,91,200                      // vcvtps2dq     %ymm0,%ymm9
  .byte  196,65,249,126,201                  // vmovq         %xmm9,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,131,121,32,4,19,0               // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm0
  .byte  196,67,249,22,202,1                 // vpextrq       $0x1,%xmm9,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,121,32,20,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm0,%xmm10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,99,125,25,200,1                 // vextractf128  $0x1,%ymm9,%xmm0
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,67,41,32,201,2                  // vpinsrb       $0x2,%r9d,%xmm10,%xmm9
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,3                  // vpinsrb       $0x3,%r10d,%xmm9,%xmm9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  196,3,121,32,20,19,0                // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm10
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,41,32,4,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm10,%xmm0
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,121,32,193,2                // vpinsrb       $0x2,%r9d,%xmm0,%xmm0
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,121,32,210,3                 // vpinsrb       $0x3,%r10d,%xmm0,%xmm10
  .byte  196,193,116,89,192                  // vmulps        %ymm8,%ymm1,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,12,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,113,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm1,%xmm1
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,192,1                // vextractf128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,113,32,202,2                // vpinsrb       $0x2,%r10d,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,67,113,32,227,3                 // vpinsrb       $0x3,%r11d,%xmm1,%xmm12
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,12,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,113,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm1,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,67,121,32,233,3                 // vpinsrb       $0x3,%r9d,%xmm0,%xmm13
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,193,108,89,200                  // vmulps        %ymm8,%ymm2,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,20,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,20,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm2
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,105,32,210,2                // vpinsrb       $0x2,%r10d,%xmm2,%xmm2
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,67,105,32,219,3                 // vpinsrb       $0x3,%r11d,%xmm2,%xmm11
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,20,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm1
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,113,32,202,2                // vpinsrb       $0x2,%r10d,%xmm1,%xmm1
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,67,113,32,241,3                 // vpinsrb       $0x3,%r9d,%xmm1,%xmm14
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,193,100,89,200                  // vmulps        %ymm8,%ymm3,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,28,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm3
  .byte  196,227,249,22,200,1                // vpextrq       $0x1,%xmm1,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,97,32,28,10,1               // vpinsrb       $0x1,(%r10,%r9,1),%xmm3,%xmm3
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  196,195,97,32,217,2                 // vpinsrb       $0x2,%r9d,%xmm3,%xmm3
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,99,97,32,192,3                  // vpinsrb       $0x3,%eax,%xmm3,%xmm8
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,4,2,0                // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,121,32,4,10,1               // vpinsrb       $0x1,(%r10,%r9,1),%xmm0,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,99,121,32,248,2                 // vpinsrb       $0x2,%eax,%xmm0,%xmm15
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,26                      // movzbl        (%r10,%r11,1),%eax
  .byte  196,194,121,49,193                  // vpmovzxbd     %xmm9,%xmm0
  .byte  196,194,121,49,202                  // vpmovzxbd     %xmm10,%xmm1
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,194,121,49,204                  // vpmovzxbd     %xmm12,%xmm1
  .byte  196,194,121,49,213                  // vpmovzxbd     %xmm13,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,98,125,24,13,240,72,0,0         // vbroadcastss  0x48f0(%rip),%ymm9        # 73e0 <_sk_callback_avx+0x2a6>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,194,121,49,211                  // vpmovzxbd     %xmm11,%xmm2
  .byte  196,194,121,49,222                  // vpmovzxbd     %xmm14,%xmm3
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,66,121,49,192                   // vpmovzxbd     %xmm8,%xmm8
  .byte  196,227,1,32,216,3                  // vpinsrb       $0x3,%eax,%xmm15,%xmm3
  .byte  196,226,121,49,219                  // vpmovzxbd     %xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_avx
.globl _sk_byte_tables_rgb_avx
FUNCTION(_sk_byte_tables_rgb_avx)
_sk_byte_tables_rgb_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,72,24                        // mov           0x18(%rax),%r9d
  .byte  65,255,201                          // dec           %r9d
  .byte  196,65,121,110,193                  // vmovd         %r9d,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,200                      // vcvtps2dq     %ymm0,%ymm9
  .byte  196,65,249,126,201                  // vmovq         %xmm9,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,131,121,32,4,19,0               // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm0
  .byte  196,67,249,22,202,1                 // vpextrq       $0x1,%xmm9,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,121,32,20,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm0,%xmm10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,99,125,25,200,1                 // vextractf128  $0x1,%ymm9,%xmm0
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,67,41,32,201,2                  // vpinsrb       $0x2,%r9d,%xmm10,%xmm9
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,3                  // vpinsrb       $0x3,%r10d,%xmm9,%xmm9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  196,3,121,32,20,19,0                // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm10
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,41,32,4,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm10,%xmm0
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,121,32,193,2                // vpinsrb       $0x2,%r9d,%xmm0,%xmm0
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,121,32,218,3                 // vpinsrb       $0x3,%r10d,%xmm0,%xmm11
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,67,121,32,211,3                 // vpinsrb       $0x3,%r11d,%xmm0,%xmm10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,67,121,32,225,3                 // vpinsrb       $0x3,%r9d,%xmm0,%xmm12
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  197,188,89,194                      // vmulps        %ymm2,%ymm8,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,20,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm2
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,105,32,20,10,1              // vpinsrb       $0x1,(%r10,%r9,1),%xmm2,%xmm2
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,25,192,1                // vextractf128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  196,195,105,32,209,2                // vpinsrb       $0x2,%r9d,%xmm2,%xmm2
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,99,105,32,192,3                 // vpinsrb       $0x3,%eax,%xmm2,%xmm8
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,12,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,113,32,4,10,1               // vpinsrb       $0x1,(%r10,%r9,1),%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,99,121,32,232,2                 // vpinsrb       $0x2,%eax,%xmm0,%xmm13
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,26                      // movzbl        (%r10,%r11,1),%eax
  .byte  196,194,121,49,193                  // vpmovzxbd     %xmm9,%xmm0
  .byte  196,194,121,49,203                  // vpmovzxbd     %xmm11,%xmm1
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,209,70,0,0         // vbroadcastss  0x46d1(%rip),%ymm9        # 73e4 <_sk_callback_avx+0x2aa>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,194,121,49,202                  // vpmovzxbd     %xmm10,%xmm1
  .byte  196,194,121,49,212                  // vpmovzxbd     %xmm12,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,66,121,49,192                   // vpmovzxbd     %xmm8,%xmm8
  .byte  196,227,17,32,208,3                 // vpinsrb       $0x3,%eax,%xmm13,%xmm2
  .byte  196,226,121,49,210                  // vpmovzxbd     %xmm2,%xmm2
  .byte  196,227,61,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm8,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_avx
.globl _sk_table_r_avx
FUNCTION(_sk_table_r_avx)
_sk_table_r_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  196,99,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,65,122,16,12,129                // vmovss        (%r9,%rax,4),%xmm9
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,49,33,12,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm9,%xmm9
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,20,129                // vmovss        (%r9,%rax,4),%xmm10
  .byte  196,65,249,126,194                  // vmovq         %xmm8,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,28,153                 // vmovss        (%r9,%r11,4),%xmm11
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,122,16,4,129                // vmovss        (%r9,%rax,4),%xmm0
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,121,33,4,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm0,%xmm8
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,36,129                // vmovss        (%r9,%rax,4),%xmm12
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,195,49,33,194,32                // vinsertps     $0x20,%xmm10,%xmm9,%xmm0
  .byte  196,67,121,33,203,48                // vinsertps     $0x30,%xmm11,%xmm0,%xmm9
  .byte  196,195,57,33,196,32                // vinsertps     $0x20,%xmm12,%xmm8,%xmm0
  .byte  196,195,121,33,197,48               // vinsertps     $0x30,%xmm13,%xmm0,%xmm0
  .byte  196,195,125,24,193,1                // vinsertf128   $0x1,%xmm9,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_avx
.globl _sk_table_g_avx
FUNCTION(_sk_table_g_avx)
_sk_table_g_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,125,91,193                      // vcvtps2dq     %ymm1,%ymm8
  .byte  196,99,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,65,122,16,12,129                // vmovss        (%r9,%rax,4),%xmm9
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,49,33,12,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm9,%xmm9
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,20,129                // vmovss        (%r9,%rax,4),%xmm10
  .byte  196,65,249,126,194                  // vmovq         %xmm8,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,28,153                 // vmovss        (%r9,%r11,4),%xmm11
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,122,16,12,129               // vmovss        (%r9,%rax,4),%xmm1
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,113,33,4,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm1,%xmm8
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,36,129                // vmovss        (%r9,%rax,4),%xmm12
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,195,49,33,202,32                // vinsertps     $0x20,%xmm10,%xmm9,%xmm1
  .byte  196,67,113,33,203,48                // vinsertps     $0x30,%xmm11,%xmm1,%xmm9
  .byte  196,195,57,33,204,32                // vinsertps     $0x20,%xmm12,%xmm8,%xmm1
  .byte  196,195,113,33,205,48               // vinsertps     $0x30,%xmm13,%xmm1,%xmm1
  .byte  196,195,117,24,201,1                // vinsertf128   $0x1,%xmm9,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_avx
.globl _sk_table_b_avx
FUNCTION(_sk_table_b_avx)
_sk_table_b_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,125,91,194                      // vcvtps2dq     %ymm2,%ymm8
  .byte  196,99,125,25,194,1                 // vextractf128  $0x1,%ymm8,%xmm2
  .byte  196,193,249,126,210                 // vmovq         %xmm2,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,65,122,16,12,129                // vmovss        (%r9,%rax,4),%xmm9
  .byte  196,195,249,22,211,1                // vpextrq       $0x1,%xmm2,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,49,33,12,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm9,%xmm9
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,20,129                // vmovss        (%r9,%rax,4),%xmm10
  .byte  196,65,249,126,194                  // vmovq         %xmm8,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,28,153                 // vmovss        (%r9,%r11,4),%xmm11
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,122,16,20,129               // vmovss        (%r9,%rax,4),%xmm2
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,105,33,4,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm2,%xmm8
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,36,129                // vmovss        (%r9,%rax,4),%xmm12
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,195,49,33,210,32                // vinsertps     $0x20,%xmm10,%xmm9,%xmm2
  .byte  196,67,105,33,203,48                // vinsertps     $0x30,%xmm11,%xmm2,%xmm9
  .byte  196,195,57,33,212,32                // vinsertps     $0x20,%xmm12,%xmm8,%xmm2
  .byte  196,195,105,33,213,48               // vinsertps     $0x30,%xmm13,%xmm2,%xmm2
  .byte  196,195,109,24,209,1                // vinsertf128   $0x1,%xmm9,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_avx
.globl _sk_table_a_avx
FUNCTION(_sk_table_a_avx)
_sk_table_a_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,125,91,195                      // vcvtps2dq     %ymm3,%ymm8
  .byte  196,99,125,25,195,1                 // vextractf128  $0x1,%ymm8,%xmm3
  .byte  196,193,249,126,218                 // vmovq         %xmm3,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,65,122,16,12,129                // vmovss        (%r9,%rax,4),%xmm9
  .byte  196,195,249,22,219,1                // vpextrq       $0x1,%xmm3,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,49,33,12,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm9,%xmm9
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,20,129                // vmovss        (%r9,%rax,4),%xmm10
  .byte  196,65,249,126,194                  // vmovq         %xmm8,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,28,153                 // vmovss        (%r9,%r11,4),%xmm11
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,122,16,28,129               // vmovss        (%r9,%rax,4),%xmm3
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,97,33,4,145,16                // vinsertps     $0x10,(%r9,%r10,4),%xmm3,%xmm8
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,36,129                // vmovss        (%r9,%rax,4),%xmm12
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,195,49,33,218,32                // vinsertps     $0x20,%xmm10,%xmm9,%xmm3
  .byte  196,67,97,33,203,48                 // vinsertps     $0x30,%xmm11,%xmm3,%xmm9
  .byte  196,195,57,33,220,32                // vinsertps     $0x20,%xmm12,%xmm8,%xmm3
  .byte  196,195,97,33,221,48                // vinsertps     $0x30,%xmm13,%xmm3,%xmm3
  .byte  196,195,101,24,217,1                // vinsertf128   $0x1,%xmm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_avx
.globl _sk_parametric_r_avx
FUNCTION(_sk_parametric_r_avx)
_sk_parametric_r_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,124,194,192,2                // vcmpleps      %ymm8,%ymm0,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,216                      // vcvtdq2ps     %ymm0,%ymm11
  .byte  196,98,125,24,37,126,67,0,0         // vbroadcastss  0x437e(%rip),%ymm12        # 73e8 <_sk_callback_avx+0x2ae>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,116,67,0,0         // vbroadcastss  0x4374(%rip),%ymm12        # 73ec <_sk_callback_avx+0x2b2>
  .byte  196,193,124,84,196                  // vandps        %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,106,67,0,0         // vbroadcastss  0x436a(%rip),%ymm12        # 73f0 <_sk_callback_avx+0x2b6>
  .byte  196,193,124,86,196                  // vorps         %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,96,67,0,0          // vbroadcastss  0x4360(%rip),%ymm12        # 73f4 <_sk_callback_avx+0x2ba>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,86,67,0,0          // vbroadcastss  0x4356(%rip),%ymm12        # 73f8 <_sk_callback_avx+0x2be>
  .byte  196,65,124,89,228                   // vmulps        %ymm12,%ymm0,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,71,67,0,0          // vbroadcastss  0x4347(%rip),%ymm12        # 73fc <_sk_callback_avx+0x2c2>
  .byte  196,193,124,88,196                  // vaddps        %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,61,67,0,0          // vbroadcastss  0x433d(%rip),%ymm12        # 7400 <_sk_callback_avx+0x2c6>
  .byte  197,156,94,192                      // vdivps        %ymm0,%ymm12,%ymm0
  .byte  197,164,92,192                      // vsubps        %ymm0,%ymm11,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,99,125,8,208,1                  // vroundps      $0x1,%ymm0,%ymm10
  .byte  196,65,124,92,210                   // vsubps        %ymm10,%ymm0,%ymm10
  .byte  196,98,125,24,29,33,67,0,0          // vbroadcastss  0x4321(%rip),%ymm11        # 7404 <_sk_callback_avx+0x2ca>
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,23,67,0,0          // vbroadcastss  0x4317(%rip),%ymm11        # 7408 <_sk_callback_avx+0x2ce>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,124,92,195                  // vsubps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,8,67,0,0           // vbroadcastss  0x4308(%rip),%ymm11        # 740c <_sk_callback_avx+0x2d2>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,254,66,0,0         // vbroadcastss  0x42fe(%rip),%ymm11        # 7410 <_sk_callback_avx+0x2d6>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,98,125,24,21,239,66,0,0         // vbroadcastss  0x42ef(%rip),%ymm10        # 7414 <_sk_callback_avx+0x2da>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,195,125,74,193,128              // vblendvps     %ymm8,%ymm9,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,198,66,0,0          // vbroadcastss  0x42c6(%rip),%ymm8        # 7418 <_sk_callback_avx+0x2de>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_avx
.globl _sk_parametric_g_avx
FUNCTION(_sk_parametric_g_avx)
_sk_parametric_g_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,116,194,192,2                // vcmpleps      %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,217                      // vcvtdq2ps     %ymm1,%ymm11
  .byte  196,98,125,24,37,119,66,0,0         // vbroadcastss  0x4277(%rip),%ymm12        # 741c <_sk_callback_avx+0x2e2>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,109,66,0,0         // vbroadcastss  0x426d(%rip),%ymm12        # 7420 <_sk_callback_avx+0x2e6>
  .byte  196,193,116,84,204                  // vandps        %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,99,66,0,0          // vbroadcastss  0x4263(%rip),%ymm12        # 7424 <_sk_callback_avx+0x2ea>
  .byte  196,193,116,86,204                  // vorps         %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,89,66,0,0          // vbroadcastss  0x4259(%rip),%ymm12        # 7428 <_sk_callback_avx+0x2ee>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,79,66,0,0          // vbroadcastss  0x424f(%rip),%ymm12        # 742c <_sk_callback_avx+0x2f2>
  .byte  196,65,116,89,228                   // vmulps        %ymm12,%ymm1,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,64,66,0,0          // vbroadcastss  0x4240(%rip),%ymm12        # 7430 <_sk_callback_avx+0x2f6>
  .byte  196,193,116,88,204                  // vaddps        %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,54,66,0,0          // vbroadcastss  0x4236(%rip),%ymm12        # 7434 <_sk_callback_avx+0x2fa>
  .byte  197,156,94,201                      // vdivps        %ymm1,%ymm12,%ymm1
  .byte  197,164,92,201                      // vsubps        %ymm1,%ymm11,%ymm1
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,99,125,8,209,1                  // vroundps      $0x1,%ymm1,%ymm10
  .byte  196,65,116,92,210                   // vsubps        %ymm10,%ymm1,%ymm10
  .byte  196,98,125,24,29,26,66,0,0          // vbroadcastss  0x421a(%rip),%ymm11        # 7438 <_sk_callback_avx+0x2fe>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,16,66,0,0          // vbroadcastss  0x4210(%rip),%ymm11        # 743c <_sk_callback_avx+0x302>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,116,92,203                  // vsubps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,1,66,0,0           // vbroadcastss  0x4201(%rip),%ymm11        # 7440 <_sk_callback_avx+0x306>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,247,65,0,0         // vbroadcastss  0x41f7(%rip),%ymm11        # 7444 <_sk_callback_avx+0x30a>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,98,125,24,21,232,65,0,0         // vbroadcastss  0x41e8(%rip),%ymm10        # 7448 <_sk_callback_avx+0x30e>
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,195,117,74,201,128              // vblendvps     %ymm8,%ymm9,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,5,191,65,0,0          // vbroadcastss  0x41bf(%rip),%ymm8        # 744c <_sk_callback_avx+0x312>
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_avx
.globl _sk_parametric_b_avx
FUNCTION(_sk_parametric_b_avx)
_sk_parametric_b_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,108,194,192,2                // vcmpleps      %ymm8,%ymm2,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,218                      // vcvtdq2ps     %ymm2,%ymm11
  .byte  196,98,125,24,37,112,65,0,0         // vbroadcastss  0x4170(%rip),%ymm12        # 7450 <_sk_callback_avx+0x316>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,102,65,0,0         // vbroadcastss  0x4166(%rip),%ymm12        # 7454 <_sk_callback_avx+0x31a>
  .byte  196,193,108,84,212                  // vandps        %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,92,65,0,0          // vbroadcastss  0x415c(%rip),%ymm12        # 7458 <_sk_callback_avx+0x31e>
  .byte  196,193,108,86,212                  // vorps         %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,82,65,0,0          // vbroadcastss  0x4152(%rip),%ymm12        # 745c <_sk_callback_avx+0x322>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,72,65,0,0          // vbroadcastss  0x4148(%rip),%ymm12        # 7460 <_sk_callback_avx+0x326>
  .byte  196,65,108,89,228                   // vmulps        %ymm12,%ymm2,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,57,65,0,0          // vbroadcastss  0x4139(%rip),%ymm12        # 7464 <_sk_callback_avx+0x32a>
  .byte  196,193,108,88,212                  // vaddps        %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,47,65,0,0          // vbroadcastss  0x412f(%rip),%ymm12        # 7468 <_sk_callback_avx+0x32e>
  .byte  197,156,94,210                      // vdivps        %ymm2,%ymm12,%ymm2
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  196,99,125,8,210,1                  // vroundps      $0x1,%ymm2,%ymm10
  .byte  196,65,108,92,210                   // vsubps        %ymm10,%ymm2,%ymm10
  .byte  196,98,125,24,29,19,65,0,0          // vbroadcastss  0x4113(%rip),%ymm11        # 746c <_sk_callback_avx+0x332>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,9,65,0,0           // vbroadcastss  0x4109(%rip),%ymm11        # 7470 <_sk_callback_avx+0x336>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,108,92,211                  // vsubps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,250,64,0,0         // vbroadcastss  0x40fa(%rip),%ymm11        # 7474 <_sk_callback_avx+0x33a>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,240,64,0,0         // vbroadcastss  0x40f0(%rip),%ymm11        # 7478 <_sk_callback_avx+0x33e>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,98,125,24,21,225,64,0,0         // vbroadcastss  0x40e1(%rip),%ymm10        # 747c <_sk_callback_avx+0x342>
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,195,109,74,209,128              // vblendvps     %ymm8,%ymm9,%ymm2,%ymm2
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,184,64,0,0          // vbroadcastss  0x40b8(%rip),%ymm8        # 7480 <_sk_callback_avx+0x346>
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_avx
.globl _sk_parametric_a_avx
FUNCTION(_sk_parametric_a_avx)
_sk_parametric_a_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,100,194,192,2                // vcmpleps      %ymm8,%ymm3,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,219                      // vmulps        %ymm3,%ymm10,%ymm3
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,219                      // vcvtdq2ps     %ymm3,%ymm11
  .byte  196,98,125,24,37,105,64,0,0         // vbroadcastss  0x4069(%rip),%ymm12        # 7484 <_sk_callback_avx+0x34a>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,95,64,0,0          // vbroadcastss  0x405f(%rip),%ymm12        # 7488 <_sk_callback_avx+0x34e>
  .byte  196,193,100,84,220                  // vandps        %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,85,64,0,0          // vbroadcastss  0x4055(%rip),%ymm12        # 748c <_sk_callback_avx+0x352>
  .byte  196,193,100,86,220                  // vorps         %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,75,64,0,0          // vbroadcastss  0x404b(%rip),%ymm12        # 7490 <_sk_callback_avx+0x356>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,65,64,0,0          // vbroadcastss  0x4041(%rip),%ymm12        # 7494 <_sk_callback_avx+0x35a>
  .byte  196,65,100,89,228                   // vmulps        %ymm12,%ymm3,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,50,64,0,0          // vbroadcastss  0x4032(%rip),%ymm12        # 7498 <_sk_callback_avx+0x35e>
  .byte  196,193,100,88,220                  // vaddps        %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,40,64,0,0          // vbroadcastss  0x4028(%rip),%ymm12        # 749c <_sk_callback_avx+0x362>
  .byte  197,156,94,219                      // vdivps        %ymm3,%ymm12,%ymm3
  .byte  197,164,92,219                      // vsubps        %ymm3,%ymm11,%ymm3
  .byte  197,172,89,219                      // vmulps        %ymm3,%ymm10,%ymm3
  .byte  196,99,125,8,211,1                  // vroundps      $0x1,%ymm3,%ymm10
  .byte  196,65,100,92,210                   // vsubps        %ymm10,%ymm3,%ymm10
  .byte  196,98,125,24,29,12,64,0,0          // vbroadcastss  0x400c(%rip),%ymm11        # 74a0 <_sk_callback_avx+0x366>
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,2,64,0,0           // vbroadcastss  0x4002(%rip),%ymm11        # 74a4 <_sk_callback_avx+0x36a>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,100,92,219                  // vsubps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,243,63,0,0         // vbroadcastss  0x3ff3(%rip),%ymm11        # 74a8 <_sk_callback_avx+0x36e>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,233,63,0,0         // vbroadcastss  0x3fe9(%rip),%ymm11        # 74ac <_sk_callback_avx+0x372>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,98,125,24,21,218,63,0,0         // vbroadcastss  0x3fda(%rip),%ymm10        # 74b0 <_sk_callback_avx+0x376>
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,195,101,74,217,128              // vblendvps     %ymm8,%ymm9,%ymm3,%ymm3
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  196,98,125,24,5,177,63,0,0          // vbroadcastss  0x3fb1(%rip),%ymm8        # 74b4 <_sk_callback_avx+0x37a>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_avx
.globl _sk_lab_to_xyz_avx
FUNCTION(_sk_lab_to_xyz_avx)
_sk_lab_to_xyz_avx:
  .byte  196,98,125,24,5,163,63,0,0          // vbroadcastss  0x3fa3(%rip),%ymm8        # 74b8 <_sk_callback_avx+0x37e>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,153,63,0,0          // vbroadcastss  0x3f99(%rip),%ymm8        # 74bc <_sk_callback_avx+0x382>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,13,143,63,0,0         // vbroadcastss  0x3f8f(%rip),%ymm9        # 74c0 <_sk_callback_avx+0x386>
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  196,98,125,24,5,123,63,0,0          // vbroadcastss  0x3f7b(%rip),%ymm8        # 74c4 <_sk_callback_avx+0x38a>
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,113,63,0,0          // vbroadcastss  0x3f71(%rip),%ymm8        # 74c8 <_sk_callback_avx+0x38e>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,103,63,0,0          // vbroadcastss  0x3f67(%rip),%ymm8        # 74cc <_sk_callback_avx+0x392>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,252,88,201                      // vaddps        %ymm1,%ymm0,%ymm1
  .byte  196,98,125,24,5,89,63,0,0           // vbroadcastss  0x3f59(%rip),%ymm8        # 74d0 <_sk_callback_avx+0x396>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,252,92,210                      // vsubps        %ymm2,%ymm0,%ymm2
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,65,116,89,192                   // vmulps        %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,13,66,63,0,0          // vbroadcastss  0x3f42(%rip),%ymm9        # 74d4 <_sk_callback_avx+0x39a>
  .byte  196,65,52,194,208,1                 // vcmpltps      %ymm8,%ymm9,%ymm10
  .byte  196,98,125,24,29,55,63,0,0          // vbroadcastss  0x3f37(%rip),%ymm11        # 74d8 <_sk_callback_avx+0x39e>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,37,45,63,0,0          // vbroadcastss  0x3f2d(%rip),%ymm12        # 74dc <_sk_callback_avx+0x3a2>
  .byte  196,193,116,89,204                  // vmulps        %ymm12,%ymm1,%ymm1
  .byte  196,67,117,74,192,160               // vblendvps     %ymm10,%ymm8,%ymm1,%ymm8
  .byte  197,252,89,200                      // vmulps        %ymm0,%ymm0,%ymm1
  .byte  197,252,89,201                      // vmulps        %ymm1,%ymm0,%ymm1
  .byte  197,52,194,209,1                    // vcmpltps      %ymm1,%ymm9,%ymm10
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,193,124,89,196                  // vmulps        %ymm12,%ymm0,%ymm0
  .byte  196,227,125,74,201,160              // vblendvps     %ymm10,%ymm1,%ymm0,%ymm1
  .byte  197,236,89,194                      // vmulps        %ymm2,%ymm2,%ymm0
  .byte  197,236,89,192                      // vmulps        %ymm0,%ymm2,%ymm0
  .byte  197,52,194,200,1                    // vcmpltps      %ymm0,%ymm9,%ymm9
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,193,108,89,212                  // vmulps        %ymm12,%ymm2,%ymm2
  .byte  196,227,109,74,208,144              // vblendvps     %ymm9,%ymm0,%ymm2,%ymm2
  .byte  196,226,125,24,5,227,62,0,0         // vbroadcastss  0x3ee3(%rip),%ymm0        # 74e0 <_sk_callback_avx+0x3a6>
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,218,62,0,0          // vbroadcastss  0x3eda(%rip),%ymm8        # 74e4 <_sk_callback_avx+0x3aa>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_avx
.globl _sk_load_a8_avx
FUNCTION(_sk_load_a8_avx)
_sk_load_a8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           365f <_sk_load_a8_avx+0x4c>
  .byte  196,194,121,48,4,19                 // vpmovzxbw     (%r11,%rdx,1),%xmm0
  .byte  197,249,219,5,133,65,0,0            // vpand         0x4185(%rip),%xmm0,%xmm0        # 77b0 <_sk_callback_avx+0x676>
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,157,62,0,0        // vbroadcastss  0x3e9d(%rip),%ymm1        # 74e8 <_sk_callback_avx+0x3ae>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,176                             // ja            3623 <_sk_load_a8_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,122,0,0,0                 // lea           0x7a(%rip),%r10        # 36f8 <_sk_load_a8_avx+0xe5>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  235,145                             // jmp           3623 <_sk_load_a8_avx+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,2                   // vpinsrw       $0x2,%eax,%xmm0,%xmm0
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,226,121,48,201                  // vpmovzxbw     %xmm1,%xmm1
  .byte  196,227,121,14,193,3                // vpblendw      $0x3,%xmm1,%xmm0,%xmm0
  .byte  233,105,255,255,255                 // jmpq          3623 <_sk_load_a8_avx+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  196,193,121,110,12,19               // vmovd         (%r11,%rdx,1),%xmm1
  .byte  196,226,121,48,201                  // vpmovzxbw     %xmm1,%xmm1
  .byte  196,227,113,14,192,240              // vpblendw      $0xf0,%xmm0,%xmm1,%xmm0
  .byte  233,46,255,255,255                  // jmpq          3623 <_sk_load_a8_avx+0x10>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  143                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,169,255,255,255,154             // ljmp          *-0x65000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_a8_dst_avx
.globl _sk_load_a8_dst_avx
FUNCTION(_sk_load_a8_dst_avx)
_sk_load_a8_dst_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           3760 <_sk_load_a8_dst_avx+0x4c>
  .byte  196,194,121,48,36,19                // vpmovzxbw     (%r11,%rdx,1),%xmm4
  .byte  197,217,219,37,148,64,0,0           // vpand         0x4094(%rip),%xmm4,%xmm4        # 77c0 <_sk_callback_avx+0x686>
  .byte  197,209,239,237                     // vpxor         %xmm5,%xmm5,%xmm5
  .byte  197,217,105,237                     // vpunpckhwd    %xmm5,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,125,24,45,160,61,0,0        // vbroadcastss  0x3da0(%rip),%ymm5        # 74ec <_sk_callback_avx+0x3b2>
  .byte  197,220,89,253                      // vmulps        %ymm5,%ymm4,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,176                             // ja            3724 <_sk_load_a8_dst_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,121,0,0,0                 // lea           0x79(%rip),%r10        # 37f8 <_sk_load_a8_dst_avx+0xe4>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  235,145                             // jmp           3724 <_sk_load_a8_dst_avx+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,217,196,224,2                   // vpinsrw       $0x2,%eax,%xmm4,%xmm4
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,232                     // vmovd         %eax,%xmm5
  .byte  196,226,121,48,237                  // vpmovzxbw     %xmm5,%xmm5
  .byte  196,227,89,14,229,3                 // vpblendw      $0x3,%xmm5,%xmm4,%xmm4
  .byte  233,105,255,255,255                 // jmpq          3724 <_sk_load_a8_dst_avx+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,217,196,224,6                   // vpinsrw       $0x6,%eax,%xmm4,%xmm4
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,217,196,224,5                   // vpinsrw       $0x5,%eax,%xmm4,%xmm4
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,217,196,224,4                   // vpinsrw       $0x4,%eax,%xmm4,%xmm4
  .byte  196,193,121,110,44,19               // vmovd         (%r11,%rdx,1),%xmm5
  .byte  196,226,121,48,237                  // vpmovzxbw     %xmm5,%xmm5
  .byte  196,227,81,14,228,240               // vpblendw      $0xf0,%xmm4,%xmm5,%xmm4
  .byte  233,46,255,255,255                  // jmpq          3724 <_sk_load_a8_dst_avx+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  144                                 // nop
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,170,255,255,255,155             // ljmp          *-0x64000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  232,255,255,255,221                 // callq         ffffffffde003808 <_sk_callback_avx+0xffffffffddffc6ce>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,210                             // callq         *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_a8_avx
.globl _sk_gather_a8_avx
FUNCTION(_sk_gather_a8_avx)
_sk_gather_a8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,20,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,2                // vpinsrb       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,20,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,121,32,192,2                // vpinsrb       $0x2,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,227,121,32,192,3                // vpinsrb       $0x3,%eax,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,16,60,0,0         // vbroadcastss  0x3c10(%rip),%ymm1        # 74f0 <_sk_callback_avx+0x3b6>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_avx
.globl _sk_store_a8_avx
FUNCTION(_sk_store_a8_avx)
_sk_store_a8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,242,59,0,0          // vbroadcastss  0x3bf2(%rip),%ymm8        # 74f4 <_sk_callback_avx+0x3ba>
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  196,65,57,103,192                   // vpackuswb     %xmm8,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           392b <_sk_store_a8_avx+0x37>
  .byte  196,65,123,17,4,19                  // vmovsd        %xmm8,(%r11,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            3927 <_sk_store_a8_avx+0x33>
  .byte  196,66,121,48,192                   // vpmovzxbw     %xmm8,%xmm8
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,85,0,0,0                  // lea           0x55(%rip),%r10        # 39a0 <_sk_store_a8_avx+0xac>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,20,4,19,0                // vpextrb       $0x0,%xmm8,(%r11,%rdx,1)
  .byte  235,202                             // jmp           3927 <_sk_store_a8_avx+0x33>
  .byte  196,67,121,20,68,19,2,4             // vpextrb       $0x4,%xmm8,0x2(%r11,%rdx,1)
  .byte  196,98,57,0,5,98,62,0,0             // vpshufb       0x3e62(%rip),%xmm8,%xmm8        # 77d0 <_sk_callback_avx+0x696>
  .byte  196,67,121,21,4,19,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,1)
  .byte  235,176                             // jmp           3927 <_sk_store_a8_avx+0x33>
  .byte  196,67,121,20,68,19,6,12            // vpextrb       $0xc,%xmm8,0x6(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,5,10            // vpextrb       $0xa,%xmm8,0x5(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,4,8             // vpextrb       $0x8,%xmm8,0x4(%r11,%rdx,1)
  .byte  196,98,57,0,5,72,62,0,0             // vpshufb       0x3e48(%rip),%xmm8,%xmm8        # 77e0 <_sk_callback_avx+0x6a6>
  .byte  196,65,121,126,4,19                 // vmovd         %xmm8,(%r11,%rdx,1)
  .byte  235,135                             // jmp           3927 <_sk_store_a8_avx+0x33>
  .byte  180,255                             // mov           $0xff,%ah
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  189,255,255,255,239                 // mov           $0xefffffff,%ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,215                             // callq         *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_avx
.globl _sk_load_g8_avx
FUNCTION(_sk_load_g8_avx)
_sk_load_g8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,71                              // jne           3a0d <_sk_load_g8_avx+0x51>
  .byte  196,194,121,48,4,19                 // vpmovzxbw     (%r11,%rdx,1),%xmm0
  .byte  197,249,219,5,28,62,0,0             // vpand         0x3e1c(%rip),%xmm0,%xmm0        # 77f0 <_sk_callback_avx+0x6b6>
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,4,59,0,0          // vbroadcastss  0x3b04(%rip),%ymm1        # 74f8 <_sk_callback_avx+0x3be>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,249,58,0,0        // vbroadcastss  0x3af9(%rip),%ymm3        # 74fc <_sk_callback_avx+0x3c2>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,171                             // ja            39cc <_sk_load_g8_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,120,0,0,0                 // lea           0x78(%rip),%r10        # 3aa4 <_sk_load_g8_avx+0xe8>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  235,140                             // jmp           39cc <_sk_load_g8_avx+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,2                   // vpinsrw       $0x2,%eax,%xmm0,%xmm0
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,226,121,48,201                  // vpmovzxbw     %xmm1,%xmm1
  .byte  196,227,121,14,193,3                // vpblendw      $0x3,%xmm1,%xmm0,%xmm0
  .byte  233,100,255,255,255                 // jmpq          39cc <_sk_load_g8_avx+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  196,193,121,110,12,19               // vmovd         (%r11,%rdx,1),%xmm1
  .byte  196,226,121,48,201                  // vpmovzxbw     %xmm1,%xmm1
  .byte  196,227,113,14,192,240              // vpblendw      $0xf0,%xmm0,%xmm1,%xmm0
  .byte  233,41,255,255,255                  // jmpq          39cc <_sk_load_g8_avx+0x10>
  .byte  144                                 // nop
  .byte  145                                 // xchg          %eax,%ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,171,255,255,255,156             // ljmp          *-0x63000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  233,255,255,255,222                 // jmpq          ffffffffdf003ab4 <_sk_callback_avx+0xffffffffdeffc97a>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,196                             // inc           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_dst_avx
.globl _sk_load_g8_dst_avx
FUNCTION(_sk_load_g8_dst_avx)
_sk_load_g8_dst_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,71                              // jne           3b11 <_sk_load_g8_dst_avx+0x51>
  .byte  196,194,121,48,36,19                // vpmovzxbw     (%r11,%rdx,1),%xmm4
  .byte  197,217,219,37,40,61,0,0            // vpand         0x3d28(%rip),%xmm4,%xmm4        # 7800 <_sk_callback_avx+0x6c6>
  .byte  197,209,239,237                     // vpxor         %xmm5,%xmm5,%xmm5
  .byte  197,217,105,237                     // vpunpckhwd    %xmm5,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,125,24,45,8,58,0,0          // vbroadcastss  0x3a08(%rip),%ymm5        # 7500 <_sk_callback_avx+0x3c6>
  .byte  197,220,89,229                      // vmulps        %ymm5,%ymm4,%ymm4
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,61,253,57,0,0        // vbroadcastss  0x39fd(%rip),%ymm7        # 7504 <_sk_callback_avx+0x3ca>
  .byte  197,252,40,236                      // vmovaps       %ymm4,%ymm5
  .byte  197,252,40,244                      // vmovaps       %ymm4,%ymm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,171                             // ja            3ad0 <_sk_load_g8_dst_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,120,0,0,0                 // lea           0x78(%rip),%r10        # 3ba8 <_sk_load_g8_dst_avx+0xe8>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  235,140                             // jmp           3ad0 <_sk_load_g8_dst_avx+0x10>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,217,196,224,2                   // vpinsrw       $0x2,%eax,%xmm4,%xmm4
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,232                     // vmovd         %eax,%xmm5
  .byte  196,226,121,48,237                  // vpmovzxbw     %xmm5,%xmm5
  .byte  196,227,89,14,229,3                 // vpblendw      $0x3,%xmm5,%xmm4,%xmm4
  .byte  233,100,255,255,255                 // jmpq          3ad0 <_sk_load_g8_dst_avx+0x10>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,217,196,224,6                   // vpinsrw       $0x6,%eax,%xmm4,%xmm4
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,217,196,224,5                   // vpinsrw       $0x5,%eax,%xmm4,%xmm4
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,217,196,224,4                   // vpinsrw       $0x4,%eax,%xmm4,%xmm4
  .byte  196,193,121,110,44,19               // vmovd         (%r11,%rdx,1),%xmm5
  .byte  196,226,121,48,237                  // vpmovzxbw     %xmm5,%xmm5
  .byte  196,227,81,14,228,240               // vpblendw      $0xf0,%xmm4,%xmm5,%xmm4
  .byte  233,41,255,255,255                  // jmpq          3ad0 <_sk_load_g8_dst_avx+0x10>
  .byte  144                                 // nop
  .byte  145                                 // xchg          %eax,%ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,171,255,255,255,156             // ljmp          *-0x63000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  233,255,255,255,222                 // jmpq          ffffffffdf003bb8 <_sk_callback_avx+0xffffffffdeffca7e>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,196                             // inc           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_g8_avx
.globl _sk_gather_g8_avx
FUNCTION(_sk_gather_g8_avx)
_sk_gather_g8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,20,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,2                // vpinsrb       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,20,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,121,32,192,2                // vpinsrb       $0x2,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,227,121,32,192,3                // vpinsrb       $0x3,%eax,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,120,56,0,0        // vbroadcastss  0x3878(%rip),%ymm1        # 7508 <_sk_callback_avx+0x3ce>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,109,56,0,0        // vbroadcastss  0x386d(%rip),%ymm3        # 750c <_sk_callback_avx+0x3d2>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_avx
.globl _sk_gather_i8_avx
FUNCTION(_sk_gather_i8_avx)
_sk_gather_i8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,193                          // mov           %rax,%r9
  .byte  77,133,201                          // test          %r9,%r9
  .byte  116,5                               // je            3cb8 <_sk_gather_i8_avx+0xf>
  .byte  76,137,200                          // mov           %r9,%rax
  .byte  235,2                               // jmp           3cba <_sk_gather_i8_avx+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  83                                  // push          %rbx
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  197,254,91,209                      // vcvttps2dq    %ymm1,%ymm2
  .byte  197,249,110,72,16                   // vmovd         0x10(%rax),%xmm1
  .byte  197,249,112,217,0                   // vpshufd       $0x0,%xmm1,%xmm3
  .byte  196,226,97,64,202                   // vpmulld       %xmm2,%xmm3,%xmm1
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,226,97,64,210                   // vpmulld       %xmm2,%xmm3,%xmm2
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,195,1                // vextractf128  $0x1,%ymm0,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,193,249,126,211                 // vmovq         %xmm2,%r11
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,121,32,28,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm3
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,131,97,32,20,26,1               // vpinsrb       $0x1,(%r10,%r11,1),%xmm3,%xmm2
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  196,131,105,32,12,26,2              // vpinsrb       $0x2,(%r10,%r11,1),%xmm2,%xmm1
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  196,195,113,32,12,2,3               // vpinsrb       $0x3,(%r10,%rax,1),%xmm1,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,121,32,20,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm2
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,131,105,32,4,26,1               // vpinsrb       $0x1,(%r10,%r11,1),%xmm2,%xmm0
  .byte  137,216                             // mov           %ebx,%eax
  .byte  196,195,121,32,4,2,2                // vpinsrb       $0x2,(%r10,%rax,1),%xmm0,%xmm0
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,195,121,32,4,26,3               // vpinsrb       $0x3,(%r10,%rbx,1),%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  77,139,89,8                         // mov           0x8(%r9),%r11
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,129,121,110,20,139              // vmovd         (%r11,%r9,4),%xmm2
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  196,131,105,34,4,19,1               // vpinsrd       $0x1,(%r11,%r10,1),%xmm2,%xmm0
  .byte  137,216                             // mov           %ebx,%eax
  .byte  196,195,121,34,4,131,2              // vpinsrd       $0x2,(%r11,%rax,4),%xmm0,%xmm0
  .byte  196,225,249,126,200                 // vmovq         %xmm1,%rax
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  196,67,121,34,4,27,3                // vpinsrd       $0x3,(%r11,%rbx,1),%xmm0,%xmm8
  .byte  137,195                             // mov           %eax,%ebx
  .byte  196,193,121,110,4,155               // vmovd         (%r11,%rbx,4),%xmm0
  .byte  196,227,249,22,203,1                // vpextrq       $0x1,%xmm1,%rbx
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  196,195,121,34,4,3,1                // vpinsrd       $0x1,(%r11,%rax,1),%xmm0,%xmm0
  .byte  137,216                             // mov           %ebx,%eax
  .byte  196,195,121,34,4,131,2              // vpinsrd       $0x2,(%r11,%rax,4),%xmm0,%xmm0
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  196,195,121,34,28,27,3              // vpinsrd       $0x3,(%r11,%rbx,1),%xmm0,%xmm3
  .byte  196,227,61,24,195,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm0
  .byte  197,124,40,21,232,58,0,0            // vmovaps       0x3ae8(%rip),%ymm10        # 78c0 <_sk_callback_avx+0x786>
  .byte  196,193,124,84,194                  // vandps        %ymm10,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,38,55,0,0          // vbroadcastss  0x3726(%rip),%ymm9        # 7510 <_sk_callback_avx+0x3d6>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,193,113,114,208,8               // vpsrld        $0x8,%xmm8,%xmm1
  .byte  197,233,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,193,33,114,208,16               // vpsrld        $0x10,%xmm8,%xmm11
  .byte  197,233,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,193,57,114,208,24               // vpsrld        $0x18,%xmm8,%xmm8
  .byte  197,225,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_avx
.globl _sk_load_565_avx
FUNCTION(_sk_load_565_avx)
_sk_load_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,128,0,0,0                    // jne           3eda <_sk_load_565_avx+0x8e>
  .byte  196,193,122,111,4,83                // vmovdqu       (%r11,%rdx,2),%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm2
  .byte  196,226,125,24,5,152,54,0,0         // vbroadcastss  0x3698(%rip),%ymm0        # 7514 <_sk_callback_avx+0x3da>
  .byte  197,236,84,192                      // vandps        %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,139,54,0,0        // vbroadcastss  0x368b(%rip),%ymm1        # 7518 <_sk_callback_avx+0x3de>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,130,54,0,0        // vbroadcastss  0x3682(%rip),%ymm1        # 751c <_sk_callback_avx+0x3e2>
  .byte  197,236,84,201                      // vandps        %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,117,54,0,0        // vbroadcastss  0x3675(%rip),%ymm3        # 7520 <_sk_callback_avx+0x3e6>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,24,29,108,54,0,0        // vbroadcastss  0x366c(%rip),%ymm3        # 7524 <_sk_callback_avx+0x3ea>
  .byte  197,236,84,211                      // vandps        %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,95,54,0,0         // vbroadcastss  0x365f(%rip),%ymm3        # 7528 <_sk_callback_avx+0x3ee>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,84,54,0,0         // vbroadcastss  0x3654(%rip),%ymm3        # 752c <_sk_callback_avx+0x3f2>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,110,255,255,255              // ja            3e60 <_sk_load_565_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,99,0,0,0                  // lea           0x63(%rip),%r10        # 3f60 <_sk_load_565_avx+0x114>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  233,76,255,255,255                  // jmpq          3e60 <_sk_load_565_avx+0x14>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,110,12,83               // vmovd         (%r11,%rdx,2),%xmm1
  .byte  196,227,121,14,193,3                // vpblendw      $0x3,%xmm1,%xmm0,%xmm0
  .byte  233,47,255,255,255                  // jmpq          3e60 <_sk_load_565_avx+0x14>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,122,126,12,83               // vmovq         (%r11,%rdx,2),%xmm1
  .byte  196,227,113,14,192,240              // vpblendw      $0xf0,%xmm0,%xmm1,%xmm0
  .byte  233,2,255,255,255                   // jmpq          3e60 <_sk_load_565_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  166                                 // cmpsb         %es:(%rdi),%ds:(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,180,255,255,255,237,255         // pushq         -0x120001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_565_dst_avx
.globl _sk_load_565_dst_avx
FUNCTION(_sk_load_565_dst_avx)
_sk_load_565_dst_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,128,0,0,0                    // jne           400a <_sk_load_565_dst_avx+0x8e>
  .byte  196,193,122,111,36,83               // vmovdqu       (%r11,%rdx,2),%xmm4
  .byte  197,209,239,237                     // vpxor         %xmm5,%xmm5,%xmm5
  .byte  197,217,105,237                     // vpunpckhwd    %xmm5,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,245,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm6
  .byte  196,226,125,24,37,132,53,0,0        // vbroadcastss  0x3584(%rip),%ymm4        # 7530 <_sk_callback_avx+0x3f6>
  .byte  197,204,84,228                      // vandps        %ymm4,%ymm6,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,125,24,45,119,53,0,0        // vbroadcastss  0x3577(%rip),%ymm5        # 7534 <_sk_callback_avx+0x3fa>
  .byte  197,220,89,229                      // vmulps        %ymm5,%ymm4,%ymm4
  .byte  196,226,125,24,45,110,53,0,0        // vbroadcastss  0x356e(%rip),%ymm5        # 7538 <_sk_callback_avx+0x3fe>
  .byte  197,204,84,237                      // vandps        %ymm5,%ymm6,%ymm5
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  196,226,125,24,61,97,53,0,0         // vbroadcastss  0x3561(%rip),%ymm7        # 753c <_sk_callback_avx+0x402>
  .byte  197,212,89,239                      // vmulps        %ymm7,%ymm5,%ymm5
  .byte  196,226,125,24,61,88,53,0,0         // vbroadcastss  0x3558(%rip),%ymm7        # 7540 <_sk_callback_avx+0x406>
  .byte  197,204,84,247                      // vandps        %ymm7,%ymm6,%ymm6
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  196,226,125,24,61,75,53,0,0         // vbroadcastss  0x354b(%rip),%ymm7        # 7544 <_sk_callback_avx+0x40a>
  .byte  197,204,89,247                      // vmulps        %ymm7,%ymm6,%ymm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,61,64,53,0,0         // vbroadcastss  0x3540(%rip),%ymm7        # 7548 <_sk_callback_avx+0x40e>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,110,255,255,255              // ja            3f90 <_sk_load_565_dst_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,99,0,0,0                  // lea           0x63(%rip),%r10        # 4090 <_sk_load_565_dst_avx+0x114>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  233,76,255,255,255                  // jmpq          3f90 <_sk_load_565_dst_avx+0x14>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,193,89,196,100,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,121,110,44,83               // vmovd         (%r11,%rdx,2),%xmm5
  .byte  196,227,89,14,229,3                 // vpblendw      $0x3,%xmm5,%xmm4,%xmm4
  .byte  233,47,255,255,255                  // jmpq          3f90 <_sk_load_565_dst_avx+0x14>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,193,89,196,100,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,89,196,100,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,89,196,100,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,122,126,44,83               // vmovq         (%r11,%rdx,2),%xmm5
  .byte  196,227,81,14,228,240               // vpblendw      $0xf0,%xmm4,%xmm5,%xmm4
  .byte  233,2,255,255,255                   // jmpq          3f90 <_sk_load_565_dst_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  166                                 // cmpsb         %es:(%rdi),%ds:(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,180,255,255,255,237,255         // pushq         -0x120001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_565_avx
.globl _sk_gather_565_avx
FUNCTION(_sk_gather_565_avx)
_sk_gather_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,110,208                     // vmovd         %eax,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,233,196,200,1                   // vpinsrw       $0x1,%eax,%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,2                   // vpinsrw       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,241,196,200,3                   // vpinsrw       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,4                   // vpinsrw       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,192,5                   // vpinsrw       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm2
  .byte  196,226,125,24,5,206,51,0,0         // vbroadcastss  0x33ce(%rip),%ymm0        # 754c <_sk_callback_avx+0x412>
  .byte  197,236,84,192                      // vandps        %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,193,51,0,0        // vbroadcastss  0x33c1(%rip),%ymm1        # 7550 <_sk_callback_avx+0x416>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,184,51,0,0        // vbroadcastss  0x33b8(%rip),%ymm1        # 7554 <_sk_callback_avx+0x41a>
  .byte  197,236,84,201                      // vandps        %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,171,51,0,0        // vbroadcastss  0x33ab(%rip),%ymm3        # 7558 <_sk_callback_avx+0x41e>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,24,29,162,51,0,0        // vbroadcastss  0x33a2(%rip),%ymm3        # 755c <_sk_callback_avx+0x422>
  .byte  197,236,84,211                      // vandps        %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,149,51,0,0        // vbroadcastss  0x3395(%rip),%ymm3        # 7560 <_sk_callback_avx+0x426>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,138,51,0,0        // vbroadcastss  0x338a(%rip),%ymm3        # 7564 <_sk_callback_avx+0x42a>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_avx
.globl _sk_store_565_avx
FUNCTION(_sk_store_565_avx)
_sk_store_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,126,51,0,0          // vbroadcastss  0x337e(%rip),%ymm8        # 7568 <_sk_callback_avx+0x42e>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,41,114,241,11               // vpslld        $0xb,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,11               // vpslld        $0xb,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,98,125,24,21,87,51,0,0          // vbroadcastss  0x3357(%rip),%ymm10        # 756c <_sk_callback_avx+0x432>
  .byte  196,65,116,89,210                   // vmulps        %ymm10,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,5                // vpslld        $0x5,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,5                // vpslld        $0x5,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           4265 <_sk_store_565_avx+0x89>
  .byte  196,65,122,127,4,83                 // vmovdqu       %xmm8,(%r11,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            4261 <_sk_store_565_avx+0x85>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,68,0,0,0                  // lea           0x44(%rip),%r10        # 42c4 <_sk_store_565_avx+0xe8>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,4,83,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,2)
  .byte  235,207                             // jmp           4261 <_sk_store_565_avx+0x85>
  .byte  196,67,121,21,68,83,4,2             // vpextrw       $0x2,%xmm8,0x4(%r11,%rdx,2)
  .byte  196,65,121,126,4,83                 // vmovd         %xmm8,(%r11,%rdx,2)
  .byte  235,191                             // jmp           4261 <_sk_store_565_avx+0x85>
  .byte  196,67,121,21,68,83,12,6            // vpextrw       $0x6,%xmm8,0xc(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,10,5            // vpextrw       $0x5,%xmm8,0xa(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,8,4             // vpextrw       $0x4,%xmm8,0x8(%r11,%rdx,2)
  .byte  196,65,121,214,4,83                 // vmovq         %xmm8,(%r11,%rdx,2)
  .byte  235,159                             // jmp           4261 <_sk_store_565_avx+0x85>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  197,255,255                         // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,206                             // dec           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,246                             // push          %rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_4444_avx
.globl _sk_load_4444_avx
FUNCTION(_sk_load_4444_avx)
_sk_load_4444_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,152,0,0,0                    // jne           4386 <_sk_load_4444_avx+0xa6>
  .byte  196,193,122,111,4,83                // vmovdqu       (%r11,%rdx,2),%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm3
  .byte  196,226,125,24,5,96,50,0,0          // vbroadcastss  0x3260(%rip),%ymm0        # 7570 <_sk_callback_avx+0x436>
  .byte  197,228,84,192                      // vandps        %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,83,50,0,0         // vbroadcastss  0x3253(%rip),%ymm1        # 7574 <_sk_callback_avx+0x43a>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,74,50,0,0         // vbroadcastss  0x324a(%rip),%ymm1        # 7578 <_sk_callback_avx+0x43e>
  .byte  197,228,84,201                      // vandps        %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,61,50,0,0         // vbroadcastss  0x323d(%rip),%ymm2        # 757c <_sk_callback_avx+0x442>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,52,50,0,0         // vbroadcastss  0x3234(%rip),%ymm2        # 7580 <_sk_callback_avx+0x446>
  .byte  197,228,84,210                      // vandps        %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,39,50,0,0           // vbroadcastss  0x3227(%rip),%ymm8        # 7584 <_sk_callback_avx+0x44a>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,29,50,0,0           // vbroadcastss  0x321d(%rip),%ymm8        # 7588 <_sk_callback_avx+0x44e>
  .byte  196,193,100,84,216                  // vandps        %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,15,50,0,0           // vbroadcastss  0x320f(%rip),%ymm8        # 758c <_sk_callback_avx+0x452>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,86,255,255,255               // ja            42f4 <_sk_load_4444_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,99,0,0,0                  // lea           0x63(%rip),%r10        # 440c <_sk_load_4444_avx+0x12c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  233,52,255,255,255                  // jmpq          42f4 <_sk_load_4444_avx+0x14>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,110,12,83               // vmovd         (%r11,%rdx,2),%xmm1
  .byte  196,227,121,14,193,3                // vpblendw      $0x3,%xmm1,%xmm0,%xmm0
  .byte  233,23,255,255,255                  // jmpq          42f4 <_sk_load_4444_avx+0x14>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,122,126,12,83               // vmovq         (%r11,%rdx,2),%xmm1
  .byte  196,227,113,14,192,240              // vpblendw      $0xf0,%xmm0,%xmm1,%xmm0
  .byte  233,234,254,255,255                 // jmpq          42f4 <_sk_load_4444_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  166                                 // cmpsb         %es:(%rdi),%ds:(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,180,255,255,255,237,255         // pushq         -0x120001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_4444_dst_avx
.globl _sk_load_4444_dst_avx
FUNCTION(_sk_load_4444_dst_avx)
_sk_load_4444_dst_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,152,0,0,0                    // jne           44ce <_sk_load_4444_dst_avx+0xa6>
  .byte  196,193,122,111,36,83               // vmovdqu       (%r11,%rdx,2),%xmm4
  .byte  197,209,239,237                     // vpxor         %xmm5,%xmm5,%xmm5
  .byte  197,217,105,237                     // vpunpckhwd    %xmm5,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,253,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm7
  .byte  196,226,125,24,37,56,49,0,0         // vbroadcastss  0x3138(%rip),%ymm4        # 7590 <_sk_callback_avx+0x456>
  .byte  197,196,84,228                      // vandps        %ymm4,%ymm7,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,125,24,45,43,49,0,0         // vbroadcastss  0x312b(%rip),%ymm5        # 7594 <_sk_callback_avx+0x45a>
  .byte  197,220,89,229                      // vmulps        %ymm5,%ymm4,%ymm4
  .byte  196,226,125,24,45,34,49,0,0         // vbroadcastss  0x3122(%rip),%ymm5        # 7598 <_sk_callback_avx+0x45e>
  .byte  197,196,84,237                      // vandps        %ymm5,%ymm7,%ymm5
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  196,226,125,24,53,21,49,0,0         // vbroadcastss  0x3115(%rip),%ymm6        # 759c <_sk_callback_avx+0x462>
  .byte  197,212,89,238                      // vmulps        %ymm6,%ymm5,%ymm5
  .byte  196,226,125,24,53,12,49,0,0         // vbroadcastss  0x310c(%rip),%ymm6        # 75a0 <_sk_callback_avx+0x466>
  .byte  197,196,84,246                      // vandps        %ymm6,%ymm7,%ymm6
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  196,98,125,24,5,255,48,0,0          // vbroadcastss  0x30ff(%rip),%ymm8        # 75a4 <_sk_callback_avx+0x46a>
  .byte  196,193,76,89,240                   // vmulps        %ymm8,%ymm6,%ymm6
  .byte  196,98,125,24,5,245,48,0,0          // vbroadcastss  0x30f5(%rip),%ymm8        # 75a8 <_sk_callback_avx+0x46e>
  .byte  196,193,68,84,248                   // vandps        %ymm8,%ymm7,%ymm7
  .byte  197,252,91,255                      // vcvtdq2ps     %ymm7,%ymm7
  .byte  196,98,125,24,5,231,48,0,0          // vbroadcastss  0x30e7(%rip),%ymm8        # 75ac <_sk_callback_avx+0x472>
  .byte  196,193,68,89,248                   // vmulps        %ymm8,%ymm7,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,86,255,255,255               // ja            443c <_sk_load_4444_dst_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,99,0,0,0                  // lea           0x63(%rip),%r10        # 4554 <_sk_load_4444_dst_avx+0x12c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,183,4,83                      // movzwl        (%r11,%rdx,2),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  233,52,255,255,255                  // jmpq          443c <_sk_load_4444_dst_avx+0x14>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,193,89,196,100,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,121,110,44,83               // vmovd         (%r11,%rdx,2),%xmm5
  .byte  196,227,89,14,229,3                 // vpblendw      $0x3,%xmm5,%xmm4,%xmm4
  .byte  233,23,255,255,255                  // jmpq          443c <_sk_load_4444_dst_avx+0x14>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,193,89,196,100,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,89,196,100,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,89,196,100,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm4,%xmm4
  .byte  196,193,122,126,44,83               // vmovq         (%r11,%rdx,2),%xmm5
  .byte  196,227,81,14,228,240               // vpblendw      $0xf0,%xmm4,%xmm5,%xmm4
  .byte  233,234,254,255,255                 // jmpq          443c <_sk_load_4444_dst_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  166                                 // cmpsb         %es:(%rdi),%ds:(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,180,255,255,255,237,255         // pushq         -0x120001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_4444_avx
.globl _sk_gather_4444_avx
FUNCTION(_sk_gather_4444_avx)
_sk_gather_4444_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,110,208                     // vmovd         %eax,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,233,196,200,1                   // vpinsrw       $0x1,%eax,%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,2                   // vpinsrw       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,241,196,200,3                   // vpinsrw       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,4                   // vpinsrw       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,192,5                   // vpinsrw       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm3
  .byte  196,226,125,24,5,110,47,0,0         // vbroadcastss  0x2f6e(%rip),%ymm0        # 75b0 <_sk_callback_avx+0x476>
  .byte  197,228,84,192                      // vandps        %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,97,47,0,0         // vbroadcastss  0x2f61(%rip),%ymm1        # 75b4 <_sk_callback_avx+0x47a>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,88,47,0,0         // vbroadcastss  0x2f58(%rip),%ymm1        # 75b8 <_sk_callback_avx+0x47e>
  .byte  197,228,84,201                      // vandps        %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,75,47,0,0         // vbroadcastss  0x2f4b(%rip),%ymm2        # 75bc <_sk_callback_avx+0x482>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,66,47,0,0         // vbroadcastss  0x2f42(%rip),%ymm2        # 75c0 <_sk_callback_avx+0x486>
  .byte  197,228,84,210                      // vandps        %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,53,47,0,0           // vbroadcastss  0x2f35(%rip),%ymm8        # 75c4 <_sk_callback_avx+0x48a>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,43,47,0,0           // vbroadcastss  0x2f2b(%rip),%ymm8        # 75c8 <_sk_callback_avx+0x48e>
  .byte  196,193,100,84,216                  // vandps        %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,29,47,0,0           // vbroadcastss  0x2f1d(%rip),%ymm8        # 75cc <_sk_callback_avx+0x492>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_avx
.globl _sk_store_4444_avx
FUNCTION(_sk_store_4444_avx)
_sk_store_4444_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,10,47,0,0           // vbroadcastss  0x2f0a(%rip),%ymm8        # 75d0 <_sk_callback_avx+0x496>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,41,114,241,12               // vpslld        $0xc,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,12               // vpslld        $0xc,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,8                // vpslld        $0x8,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,8                // vpslld        $0x8,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,4                // vpslld        $0x4,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,4                // vpslld        $0x4,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,45,86,192                    // vorpd         %ymm8,%ymm10,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           475f <_sk_store_4444_avx+0xa7>
  .byte  196,65,122,127,4,83                 // vmovdqu       %xmm8,(%r11,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            475b <_sk_store_4444_avx+0xa3>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,66,0,0,0                  // lea           0x42(%rip),%r10        # 47bc <_sk_store_4444_avx+0x104>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,4,83,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,2)
  .byte  235,207                             // jmp           475b <_sk_store_4444_avx+0xa3>
  .byte  196,67,121,21,68,83,4,2             // vpextrw       $0x2,%xmm8,0x4(%r11,%rdx,2)
  .byte  196,65,121,126,4,83                 // vmovd         %xmm8,(%r11,%rdx,2)
  .byte  235,191                             // jmp           475b <_sk_store_4444_avx+0xa3>
  .byte  196,67,121,21,68,83,12,6            // vpextrw       $0x6,%xmm8,0xc(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,10,5            // vpextrw       $0x5,%xmm8,0xa(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,8,4             // vpextrw       $0x4,%xmm8,0x8(%r11,%rdx,2)
  .byte  196,65,121,214,4,83                 // vmovq         %xmm8,(%r11,%rdx,2)
  .byte  235,159                             // jmp           475b <_sk_store_4444_avx+0xa3>
  .byte  199                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  216,255                             // fdivr         %st(7),%st
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  248                                 // clc
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,240                             // push          %rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  232,255,255,255,224                 // callq         ffffffffe10047d4 <_sk_callback_avx+0xffffffffe0ffd69a>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_8888_avx
.globl _sk_load_8888_avx
FUNCTION(_sk_load_8888_avx)
_sk_load_8888_avx:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,137,0,0,0                    // jne           487a <_sk_load_8888_avx+0xa2>
  .byte  196,193,124,16,26                   // vmovups       (%r10),%ymm3
  .byte  197,124,40,21,226,48,0,0            // vmovaps       0x30e2(%rip),%ymm10        # 78e0 <_sk_callback_avx+0x7a6>
  .byte  196,193,100,84,194                  // vandps        %ymm10,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,196,45,0,0          // vbroadcastss  0x2dc4(%rip),%ymm8        # 75d4 <_sk_callback_avx+0x49a>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,241,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm1
  .byte  196,195,125,25,217,1                // vextractf128  $0x1,%ymm3,%xmm9
  .byte  196,193,105,114,209,8               // vpsrld        $0x8,%xmm9,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,161,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm11
  .byte  196,193,105,114,209,16              // vpsrld        $0x10,%xmm9,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,169,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm10
  .byte  196,193,97,114,209,24               // vpsrld        $0x18,%xmm9,%xmm3
  .byte  196,227,45,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm10,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,192                 // vmovq         %rax,%xmm0
  .byte  196,226,121,48,192                  // vpmovzxbw     %xmm0,%xmm0
  .byte  196,226,121,0,13,110,47,0,0         // vpshufb       0x2f6e(%rip),%xmm0,%xmm1        # 7810 <_sk_callback_avx+0x6d6>
  .byte  196,226,121,33,201                  // vpmovsxbd     %xmm1,%xmm1
  .byte  196,226,121,0,5,112,47,0,0          // vpshufb       0x2f70(%rip),%xmm0,%xmm0        # 7820 <_sk_callback_avx+0x6e6>
  .byte  196,226,121,33,192                  // vpmovsxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  196,194,125,44,26                   // vmaskmovps    (%r10),%ymm0,%ymm3
  .byte  233,49,255,255,255                  // jmpq          47f6 <_sk_load_8888_avx+0x1e>

HIDDEN _sk_load_8888_dst_avx
.globl _sk_load_8888_dst_avx
FUNCTION(_sk_load_8888_dst_avx)
_sk_load_8888_dst_avx:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,137,0,0,0                    // jne           4967 <_sk_load_8888_dst_avx+0xa2>
  .byte  196,193,124,16,58                   // vmovups       (%r10),%ymm7
  .byte  197,124,40,21,21,48,0,0             // vmovaps       0x3015(%rip),%ymm10        # 7900 <_sk_callback_avx+0x7c6>
  .byte  196,193,68,84,226                   // vandps        %ymm10,%ymm7,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,98,125,24,5,219,44,0,0          // vbroadcastss  0x2cdb(%rip),%ymm8        # 75d8 <_sk_callback_avx+0x49e>
  .byte  196,193,92,89,224                   // vmulps        %ymm8,%ymm4,%ymm4
  .byte  197,209,114,215,8                   // vpsrld        $0x8,%xmm7,%xmm5
  .byte  196,195,125,25,249,1                // vextractf128  $0x1,%ymm7,%xmm9
  .byte  196,193,73,114,209,8                // vpsrld        $0x8,%xmm9,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  196,193,84,84,234                   // vandps        %ymm10,%ymm5,%ymm5
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  196,193,84,89,232                   // vmulps        %ymm8,%ymm5,%ymm5
  .byte  197,161,114,215,16                  // vpsrld        $0x10,%xmm7,%xmm11
  .byte  196,193,73,114,209,16               // vpsrld        $0x10,%xmm9,%xmm6
  .byte  196,227,37,24,246,1                 // vinsertf128   $0x1,%xmm6,%ymm11,%ymm6
  .byte  196,193,76,84,242                   // vandps        %ymm10,%ymm6,%ymm6
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  196,193,76,89,240                   // vmulps        %ymm8,%ymm6,%ymm6
  .byte  197,169,114,215,24                  // vpsrld        $0x18,%xmm7,%xmm10
  .byte  196,193,65,114,209,24               // vpsrld        $0x18,%xmm9,%xmm7
  .byte  196,227,45,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm10,%ymm7
  .byte  197,252,91,255                      // vcvtdq2ps     %ymm7,%ymm7
  .byte  196,193,68,89,248                   // vmulps        %ymm8,%ymm7,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,224                 // vmovq         %rax,%xmm4
  .byte  196,226,121,48,228                  // vpmovzxbw     %xmm4,%xmm4
  .byte  196,226,89,0,45,161,46,0,0          // vpshufb       0x2ea1(%rip),%xmm4,%xmm5        # 7830 <_sk_callback_avx+0x6f6>
  .byte  196,226,121,33,237                  // vpmovsxbd     %xmm5,%xmm5
  .byte  196,226,89,0,37,163,46,0,0          // vpshufb       0x2ea3(%rip),%xmm4,%xmm4        # 7840 <_sk_callback_avx+0x706>
  .byte  196,226,121,33,228                  // vpmovsxbd     %xmm4,%xmm4
  .byte  196,227,85,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm5,%ymm4
  .byte  196,194,93,44,58                    // vmaskmovps    (%r10),%ymm4,%ymm7
  .byte  233,49,255,255,255                  // jmpq          48e3 <_sk_load_8888_dst_avx+0x1e>

HIDDEN _sk_gather_8888_avx
.globl _sk_gather_8888_avx
FUNCTION(_sk_gather_8888_avx)
_sk_gather_8888_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,121,110,20,129              // vmovd         (%r9,%rax,4),%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,34,12,145,1             // vpinsrd       $0x1,(%r9,%r10,4),%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,113,34,12,129,2             // vpinsrd       $0x2,(%r9,%rax,4),%xmm1,%xmm1
  .byte  196,225,249,126,192                 // vmovq         %xmm0,%rax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,3,113,34,4,153,3                // vpinsrd       $0x3,(%r9,%r11,4),%xmm1,%xmm8
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,129,121,110,12,145              // vmovd         (%r9,%r10,4),%xmm1
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  196,195,113,34,4,129,1              // vpinsrd       $0x1,(%r9,%rax,4),%xmm1,%xmm0
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,34,4,129,2              // vpinsrd       $0x2,(%r9,%rax,4),%xmm0,%xmm0
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,34,28,145,3             // vpinsrd       $0x3,(%r9,%r10,4),%xmm0,%xmm3
  .byte  196,227,61,24,195,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm0
  .byte  197,124,40,21,195,46,0,0            // vmovaps       0x2ec3(%rip),%ymm10        # 7920 <_sk_callback_avx+0x7e6>
  .byte  196,193,124,84,194                  // vandps        %ymm10,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,109,43,0,0         // vbroadcastss  0x2b6d(%rip),%ymm9        # 75dc <_sk_callback_avx+0x4a2>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,193,113,114,208,8               // vpsrld        $0x8,%xmm8,%xmm1
  .byte  197,233,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,193,33,114,208,16               // vpsrld        $0x10,%xmm8,%xmm11
  .byte  197,233,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,193,57,114,208,24               // vpsrld        $0x18,%xmm8,%xmm8
  .byte  197,225,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_avx
.globl _sk_store_8888_avx
FUNCTION(_sk_store_8888_avx)
_sk_store_8888_avx:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  196,98,125,24,5,247,42,0,0          // vbroadcastss  0x2af7(%rip),%ymm8        # 75e0 <_sk_callback_avx+0x4a6>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,8                // vpslld        $0x8,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,8                // vpslld        $0x8,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,16               // vpslld        $0x10,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,16               // vpslld        $0x10,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,193,33,114,240,24               // vpslld        $0x18,%xmm8,%xmm11
  .byte  196,67,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm8
  .byte  196,193,57,114,240,24               // vpslld        $0x18,%xmm8,%xmm8
  .byte  196,67,37,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm11,%ymm8
  .byte  196,65,45,86,192                    // vorpd         %ymm8,%ymm10,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,12                              // jne           4b79 <_sk_store_8888_avx+0xa9>
  .byte  196,65,124,17,2                     // vmovups       %ymm8,(%r10)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,98,49,0,21,175,44,0,0           // vpshufb       0x2caf(%rip),%xmm9,%xmm10        # 7850 <_sk_callback_avx+0x716>
  .byte  196,66,121,33,210                   // vpmovsxbd     %xmm10,%xmm10
  .byte  196,98,49,0,13,177,44,0,0           // vpshufb       0x2cb1(%rip),%xmm9,%xmm9        # 7860 <_sk_callback_avx+0x726>
  .byte  196,66,121,33,201                   // vpmovsxbd     %xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,66,53,46,2                      // vmaskmovps    %ymm8,%ymm9,(%r10)
  .byte  235,177                             // jmp           4b72 <_sk_store_8888_avx+0xa2>

HIDDEN _sk_load_f16_avx
.globl _sk_load_f16_avx
FUNCTION(_sk_load_f16_avx)
_sk_load_f16_avx:
  .byte  72,131,236,24                       // sub           $0x18,%rsp
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  197,252,17,124,36,224               // vmovups       %ymm7,-0x20(%rsp)
  .byte  197,252,17,116,36,192               // vmovups       %ymm6,-0x40(%rsp)
  .byte  197,252,17,108,36,160               // vmovups       %ymm5,-0x60(%rsp)
  .byte  197,254,127,100,36,128              // vmovdqu       %ymm4,-0x80(%rsp)
  .byte  15,133,141,2,0,0                    // jne           4e78 <_sk_load_f16_avx+0x2b7>
  .byte  197,121,16,4,208                    // vmovupd       (%rax,%rdx,8),%xmm8
  .byte  197,249,16,84,208,16                // vmovupd       0x10(%rax,%rdx,8),%xmm2
  .byte  197,249,16,76,208,32                // vmovupd       0x20(%rax,%rdx,8),%xmm1
  .byte  197,122,111,76,208,48               // vmovdqu       0x30(%rax,%rdx,8),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,113,97,217                  // vpunpcklwd    %xmm9,%xmm1,%xmm3
  .byte  196,193,113,105,201                 // vpunpckhwd    %xmm9,%xmm1,%xmm1
  .byte  197,121,97,250                      // vpunpcklwd    %xmm2,%xmm0,%xmm15
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,225,97,209                      // vpunpcklwd    %xmm1,%xmm3,%xmm2
  .byte  197,97,105,201                      // vpunpckhwd    %xmm1,%xmm3,%xmm9
  .byte  197,129,108,194                     // vpunpcklqdq   %xmm2,%xmm15,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,98,125,24,37,160,41,0,0         // vbroadcastss  0x29a0(%rip),%ymm12        # 75e4 <_sk_callback_avx+0x4aa>
  .byte  196,193,124,84,204                  // vandps        %ymm12,%ymm0,%ymm1
  .byte  197,252,87,193                      // vxorps        %ymm1,%ymm0,%ymm0
  .byte  196,195,125,25,198,1                // vextractf128  $0x1,%ymm0,%xmm14
  .byte  196,98,121,24,29,140,41,0,0         // vbroadcastss  0x298c(%rip),%xmm11        # 75e8 <_sk_callback_avx+0x4ae>
  .byte  196,193,8,87,219                    // vxorps        %xmm11,%xmm14,%xmm3
  .byte  196,98,121,24,45,130,41,0,0         // vbroadcastss  0x2982(%rip),%xmm13        # 75ec <_sk_callback_avx+0x4b2>
  .byte  197,145,102,219                     // vpcmpgtd      %xmm3,%xmm13,%xmm3
  .byte  196,65,120,87,211                   // vxorps        %xmm11,%xmm0,%xmm10
  .byte  196,65,17,102,210                   // vpcmpgtd      %xmm10,%xmm13,%xmm10
  .byte  196,99,45,24,211,1                  // vinsertf128   $0x1,%xmm3,%ymm10,%ymm10
  .byte  197,225,114,241,16                  // vpslld        $0x10,%xmm1,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  197,241,114,241,16                  // vpslld        $0x10,%xmm1,%xmm1
  .byte  196,227,101,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm1
  .byte  197,249,114,240,13                  // vpslld        $0xd,%xmm0,%xmm0
  .byte  196,193,97,114,246,13               // vpslld        $0xd,%xmm14,%xmm3
  .byte  196,227,125,24,195,1                // vinsertf128   $0x1,%xmm3,%ymm0,%ymm0
  .byte  197,252,86,193                      // vorps         %ymm1,%ymm0,%ymm0
  .byte  196,227,125,25,193,1                // vextractf128  $0x1,%ymm0,%xmm1
  .byte  196,226,121,24,29,56,41,0,0         // vbroadcastss  0x2938(%rip),%xmm3        # 75f0 <_sk_callback_avx+0x4b6>
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  197,249,254,195                     // vpaddd        %xmm3,%xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,195,125,74,198,160              // vblendvps     %ymm10,%ymm14,%ymm0,%ymm0
  .byte  197,129,109,202                     // vpunpckhqdq   %xmm2,%xmm15,%xmm1
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,241,105,212                     // vpunpckhwd    %xmm4,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,212                  // vandps        %ymm12,%ymm1,%ymm2
  .byte  197,244,87,202                      // vxorps        %ymm2,%ymm1,%ymm1
  .byte  196,195,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm10
  .byte  196,193,40,87,251                   // vxorps        %xmm11,%xmm10,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,193,112,87,243                  // vxorps        %xmm11,%xmm1,%xmm6
  .byte  197,145,102,246                     // vpcmpgtd      %xmm6,%xmm13,%xmm6
  .byte  196,227,77,24,247,1                 // vinsertf128   $0x1,%xmm7,%ymm6,%ymm6
  .byte  197,193,114,242,16                  // vpslld        $0x10,%xmm2,%xmm7
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  197,233,114,242,16                  // vpslld        $0x10,%xmm2,%xmm2
  .byte  196,227,69,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm7,%ymm2
  .byte  197,241,114,241,13                  // vpslld        $0xd,%xmm1,%xmm1
  .byte  196,193,65,114,242,13               // vpslld        $0xd,%xmm10,%xmm7
  .byte  196,227,117,24,207,1                // vinsertf128   $0x1,%xmm7,%ymm1,%ymm1
  .byte  197,244,86,202                      // vorps         %ymm2,%ymm1,%ymm1
  .byte  196,227,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm2
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,195,117,74,206,96               // vblendvps     %ymm6,%ymm14,%ymm1,%ymm1
  .byte  196,193,57,108,209                  // vpunpcklqdq   %xmm9,%xmm8,%xmm2
  .byte  197,233,105,244                     // vpunpckhwd    %xmm4,%xmm2,%xmm6
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  196,193,108,84,244                  // vandps        %ymm12,%ymm2,%ymm6
  .byte  197,236,87,214                      // vxorps        %ymm6,%ymm2,%ymm2
  .byte  196,227,125,25,215,1                // vextractf128  $0x1,%ymm2,%xmm7
  .byte  196,193,64,87,235                   // vxorps        %xmm11,%xmm7,%xmm5
  .byte  197,145,102,237                     // vpcmpgtd      %xmm5,%xmm13,%xmm5
  .byte  196,193,104,87,227                  // vxorps        %xmm11,%xmm2,%xmm4
  .byte  197,145,102,228                     // vpcmpgtd      %xmm4,%xmm13,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  197,209,114,246,16                  // vpslld        $0x10,%xmm6,%xmm5
  .byte  196,227,125,25,246,1                // vextractf128  $0x1,%ymm6,%xmm6
  .byte  197,201,114,246,16                  // vpslld        $0x10,%xmm6,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  197,233,114,242,13                  // vpslld        $0xd,%xmm2,%xmm2
  .byte  197,201,114,247,13                  // vpslld        $0xd,%xmm7,%xmm6
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  197,236,86,213                      // vorps         %ymm5,%ymm2,%ymm2
  .byte  196,227,125,25,213,1                // vextractf128  $0x1,%ymm2,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,213,1                // vinsertf128   $0x1,%xmm5,%ymm2,%ymm2
  .byte  196,195,109,74,214,64               // vblendvps     %ymm4,%ymm14,%ymm2,%ymm2
  .byte  196,193,57,109,225                  // vpunpckhqdq   %xmm9,%xmm8,%xmm4
  .byte  196,193,89,105,234                  // vpunpckhwd    %xmm10,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,193,92,84,236                   // vandps        %ymm12,%ymm4,%ymm5
  .byte  197,220,87,229                      // vxorps        %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,230,1                // vextractf128  $0x1,%ymm4,%xmm6
  .byte  196,193,72,87,251                   // vxorps        %xmm11,%xmm6,%xmm7
  .byte  197,17,102,199                      // vpcmpgtd      %xmm7,%xmm13,%xmm8
  .byte  196,193,88,87,251                   // vxorps        %xmm11,%xmm4,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,195,69,24,248,1                 // vinsertf128   $0x1,%xmm8,%ymm7,%ymm7
  .byte  197,185,114,245,16                  // vpslld        $0x10,%xmm5,%xmm8
  .byte  196,227,125,25,237,1                // vextractf128  $0x1,%ymm5,%xmm5
  .byte  197,209,114,245,16                  // vpslld        $0x10,%xmm5,%xmm5
  .byte  196,227,61,24,237,1                 // vinsertf128   $0x1,%xmm5,%ymm8,%ymm5
  .byte  197,217,114,244,13                  // vpslld        $0xd,%xmm4,%xmm4
  .byte  197,201,114,246,13                  // vpslld        $0xd,%xmm6,%xmm6
  .byte  196,227,93,24,230,1                 // vinsertf128   $0x1,%xmm6,%ymm4,%ymm4
  .byte  197,220,86,229                      // vorps         %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,229,1                // vextractf128  $0x1,%ymm4,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,217,254,219                     // vpaddd        %xmm3,%xmm4,%xmm3
  .byte  196,227,101,24,221,1                // vinsertf128   $0x1,%xmm5,%ymm3,%ymm3
  .byte  196,195,101,74,222,112              // vblendvps     %ymm7,%ymm14,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,100,36,128               // vmovups       -0x80(%rsp),%ymm4
  .byte  197,252,16,108,36,160               // vmovups       -0x60(%rsp),%ymm5
  .byte  197,252,16,116,36,192               // vmovups       -0x40(%rsp),%ymm6
  .byte  197,252,16,124,36,224               // vmovups       -0x20(%rsp),%ymm7
  .byte  72,131,196,24                       // add           $0x18,%rsp
  .byte  255,224                             // jmpq          *%rax
  .byte  197,123,16,4,208                    // vmovsd        (%rax,%rdx,8),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,79                              // je            4ed7 <_sk_load_f16_avx+0x316>
  .byte  197,57,22,68,208,8                  // vmovhpd       0x8(%rax,%rdx,8),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,67                              // jb            4ed7 <_sk_load_f16_avx+0x316>
  .byte  197,251,16,84,208,16                // vmovsd        0x10(%rax,%rdx,8),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,68                              // je            4ee4 <_sk_load_f16_avx+0x323>
  .byte  197,233,22,84,208,24                // vmovhpd       0x18(%rax,%rdx,8),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,56                              // jb            4ee4 <_sk_load_f16_avx+0x323>
  .byte  197,251,16,76,208,32                // vmovsd        0x20(%rax,%rdx,8),%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,70,253,255,255               // je            4c02 <_sk_load_f16_avx+0x41>
  .byte  197,241,22,76,208,40                // vmovhpd       0x28(%rax,%rdx,8),%xmm1,%xmm1
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,54,253,255,255               // jb            4c02 <_sk_load_f16_avx+0x41>
  .byte  197,122,126,76,208,48               // vmovq         0x30(%rax,%rdx,8),%xmm9
  .byte  233,43,253,255,255                  // jmpq          4c02 <_sk_load_f16_avx+0x41>
  .byte  197,241,87,201                      // vxorpd        %xmm1,%xmm1,%xmm1
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,30,253,255,255                  // jmpq          4c02 <_sk_load_f16_avx+0x41>
  .byte  197,241,87,201                      // vxorpd        %xmm1,%xmm1,%xmm1
  .byte  233,21,253,255,255                  // jmpq          4c02 <_sk_load_f16_avx+0x41>

HIDDEN _sk_load_f16_dst_avx
.globl _sk_load_f16_dst_avx
FUNCTION(_sk_load_f16_dst_avx)
_sk_load_f16_dst_avx:
  .byte  72,131,236,24                       // sub           $0x18,%rsp
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  197,252,17,92,36,224                // vmovups       %ymm3,-0x20(%rsp)
  .byte  197,252,17,84,36,192                // vmovups       %ymm2,-0x40(%rsp)
  .byte  197,252,17,76,36,160                // vmovups       %ymm1,-0x60(%rsp)
  .byte  197,254,127,68,36,128               // vmovdqu       %ymm0,-0x80(%rsp)
  .byte  15,133,141,2,0,0                    // jne           51a4 <_sk_load_f16_dst_avx+0x2b7>
  .byte  197,121,16,4,208                    // vmovupd       (%rax,%rdx,8),%xmm8
  .byte  197,249,16,116,208,16               // vmovupd       0x10(%rax,%rdx,8),%xmm6
  .byte  197,249,16,108,208,32               // vmovupd       0x20(%rax,%rdx,8),%xmm5
  .byte  197,122,111,76,208,48               // vmovdqu       0x30(%rax,%rdx,8),%xmm9
  .byte  197,185,97,230                      // vpunpcklwd    %xmm6,%xmm8,%xmm4
  .byte  197,185,105,246                     // vpunpckhwd    %xmm6,%xmm8,%xmm6
  .byte  196,193,81,97,249                   // vpunpcklwd    %xmm9,%xmm5,%xmm7
  .byte  196,193,81,105,233                  // vpunpckhwd    %xmm9,%xmm5,%xmm5
  .byte  197,89,97,254                       // vpunpcklwd    %xmm6,%xmm4,%xmm15
  .byte  197,89,105,198                      // vpunpckhwd    %xmm6,%xmm4,%xmm8
  .byte  197,193,97,245                      // vpunpcklwd    %xmm5,%xmm7,%xmm6
  .byte  197,65,105,205                      // vpunpckhwd    %xmm5,%xmm7,%xmm9
  .byte  197,129,108,230                     // vpunpcklqdq   %xmm6,%xmm15,%xmm4
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,217,105,232                     // vpunpckhwd    %xmm0,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,98,125,24,37,132,38,0,0         // vbroadcastss  0x2684(%rip),%ymm12        # 75f4 <_sk_callback_avx+0x4ba>
  .byte  196,193,92,84,236                   // vandps        %ymm12,%ymm4,%ymm5
  .byte  197,220,87,229                      // vxorps        %ymm5,%ymm4,%ymm4
  .byte  196,195,125,25,230,1                // vextractf128  $0x1,%ymm4,%xmm14
  .byte  196,98,121,24,29,112,38,0,0         // vbroadcastss  0x2670(%rip),%xmm11        # 75f8 <_sk_callback_avx+0x4be>
  .byte  196,193,8,87,251                    // vxorps        %xmm11,%xmm14,%xmm7
  .byte  196,98,121,24,45,102,38,0,0         // vbroadcastss  0x2666(%rip),%xmm13        # 75fc <_sk_callback_avx+0x4c2>
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,65,88,87,211                    // vxorps        %xmm11,%xmm4,%xmm10
  .byte  196,65,17,102,210                   // vpcmpgtd      %xmm10,%xmm13,%xmm10
  .byte  196,99,45,24,215,1                  // vinsertf128   $0x1,%xmm7,%ymm10,%ymm10
  .byte  197,193,114,245,16                  // vpslld        $0x10,%xmm5,%xmm7
  .byte  196,227,125,25,237,1                // vextractf128  $0x1,%ymm5,%xmm5
  .byte  197,209,114,245,16                  // vpslld        $0x10,%xmm5,%xmm5
  .byte  196,227,69,24,237,1                 // vinsertf128   $0x1,%xmm5,%ymm7,%ymm5
  .byte  197,217,114,244,13                  // vpslld        $0xd,%xmm4,%xmm4
  .byte  196,193,65,114,246,13               // vpslld        $0xd,%xmm14,%xmm7
  .byte  196,227,93,24,231,1                 // vinsertf128   $0x1,%xmm7,%ymm4,%ymm4
  .byte  197,220,86,229                      // vorps         %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,229,1                // vextractf128  $0x1,%ymm4,%xmm5
  .byte  196,226,121,24,61,28,38,0,0         // vbroadcastss  0x261c(%rip),%xmm7        # 7600 <_sk_callback_avx+0x4c6>
  .byte  197,209,254,239                     // vpaddd        %xmm7,%xmm5,%xmm5
  .byte  197,217,254,231                     // vpaddd        %xmm7,%xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,195,93,74,230,160               // vblendvps     %ymm10,%ymm14,%ymm4,%ymm4
  .byte  197,129,109,238                     // vpunpckhqdq   %xmm6,%xmm15,%xmm5
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,209,105,240                     // vpunpckhwd    %xmm0,%xmm5,%xmm6
  .byte  196,226,121,51,237                  // vpmovzxwd     %xmm5,%xmm5
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  196,193,84,84,244                   // vandps        %ymm12,%ymm5,%ymm6
  .byte  197,212,87,238                      // vxorps        %ymm6,%ymm5,%ymm5
  .byte  196,195,125,25,234,1                // vextractf128  $0x1,%ymm5,%xmm10
  .byte  196,193,40,87,219                   // vxorps        %xmm11,%xmm10,%xmm3
  .byte  197,145,102,219                     // vpcmpgtd      %xmm3,%xmm13,%xmm3
  .byte  196,193,80,87,211                   // vxorps        %xmm11,%xmm5,%xmm2
  .byte  197,145,102,210                     // vpcmpgtd      %xmm2,%xmm13,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,225,114,246,16                  // vpslld        $0x10,%xmm6,%xmm3
  .byte  196,227,125,25,246,1                // vextractf128  $0x1,%ymm6,%xmm6
  .byte  197,201,114,246,16                  // vpslld        $0x10,%xmm6,%xmm6
  .byte  196,227,101,24,222,1                // vinsertf128   $0x1,%xmm6,%ymm3,%ymm3
  .byte  197,209,114,245,13                  // vpslld        $0xd,%xmm5,%xmm5
  .byte  196,193,73,114,242,13               // vpslld        $0xd,%xmm10,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  197,212,86,219                      // vorps         %ymm3,%ymm5,%ymm3
  .byte  196,227,125,25,221,1                // vextractf128  $0x1,%ymm3,%xmm5
  .byte  197,209,254,239                     // vpaddd        %xmm7,%xmm5,%xmm5
  .byte  197,225,254,223                     // vpaddd        %xmm7,%xmm3,%xmm3
  .byte  196,227,101,24,221,1                // vinsertf128   $0x1,%xmm5,%ymm3,%ymm3
  .byte  196,195,101,74,238,32               // vblendvps     %ymm2,%ymm14,%ymm3,%ymm5
  .byte  196,193,57,108,209                  // vpunpcklqdq   %xmm9,%xmm8,%xmm2
  .byte  197,233,105,216                     // vpunpckhwd    %xmm0,%xmm2,%xmm3
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  196,193,108,84,220                  // vandps        %ymm12,%ymm2,%ymm3
  .byte  197,236,87,211                      // vxorps        %ymm3,%ymm2,%ymm2
  .byte  196,227,125,25,214,1                // vextractf128  $0x1,%ymm2,%xmm6
  .byte  196,193,72,87,203                   // vxorps        %xmm11,%xmm6,%xmm1
  .byte  197,145,102,201                     // vpcmpgtd      %xmm1,%xmm13,%xmm1
  .byte  196,193,104,87,195                  // vxorps        %xmm11,%xmm2,%xmm0
  .byte  197,145,102,192                     // vpcmpgtd      %xmm0,%xmm13,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,241,114,243,16                  // vpslld        $0x10,%xmm3,%xmm1
  .byte  196,227,125,25,219,1                // vextractf128  $0x1,%ymm3,%xmm3
  .byte  197,225,114,243,16                  // vpslld        $0x10,%xmm3,%xmm3
  .byte  196,227,117,24,203,1                // vinsertf128   $0x1,%xmm3,%ymm1,%ymm1
  .byte  197,233,114,242,13                  // vpslld        $0xd,%xmm2,%xmm2
  .byte  197,225,114,246,13                  // vpslld        $0xd,%xmm6,%xmm3
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,236,86,201                      // vorps         %ymm1,%ymm2,%ymm1
  .byte  196,227,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm2
  .byte  197,233,254,215                     // vpaddd        %xmm7,%xmm2,%xmm2
  .byte  197,241,254,207                     // vpaddd        %xmm7,%xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,195,117,74,246,0                // vblendvps     %ymm0,%ymm14,%ymm1,%ymm6
  .byte  196,193,57,109,193                  // vpunpckhqdq   %xmm9,%xmm8,%xmm0
  .byte  196,193,121,105,202                 // vpunpckhwd    %xmm10,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,193,124,84,204                  // vandps        %ymm12,%ymm0,%ymm1
  .byte  197,252,87,193                      // vxorps        %ymm1,%ymm0,%ymm0
  .byte  196,227,125,25,194,1                // vextractf128  $0x1,%ymm0,%xmm2
  .byte  196,193,104,87,219                  // vxorps        %xmm11,%xmm2,%xmm3
  .byte  197,17,102,195                      // vpcmpgtd      %xmm3,%xmm13,%xmm8
  .byte  196,193,120,87,219                  // vxorps        %xmm11,%xmm0,%xmm3
  .byte  197,145,102,219                     // vpcmpgtd      %xmm3,%xmm13,%xmm3
  .byte  196,195,101,24,216,1                // vinsertf128   $0x1,%xmm8,%ymm3,%ymm3
  .byte  197,185,114,241,16                  // vpslld        $0x10,%xmm1,%xmm8
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  197,241,114,241,16                  // vpslld        $0x10,%xmm1,%xmm1
  .byte  196,227,61,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm8,%ymm1
  .byte  197,249,114,240,13                  // vpslld        $0xd,%xmm0,%xmm0
  .byte  197,233,114,242,13                  // vpslld        $0xd,%xmm2,%xmm2
  .byte  196,227,125,24,194,1                // vinsertf128   $0x1,%xmm2,%ymm0,%ymm0
  .byte  197,252,86,193                      // vorps         %ymm1,%ymm0,%ymm0
  .byte  196,227,125,25,193,1                // vextractf128  $0x1,%ymm0,%xmm1
  .byte  197,241,254,207                     // vpaddd        %xmm7,%xmm1,%xmm1
  .byte  197,249,254,199                     // vpaddd        %xmm7,%xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,195,125,74,254,48               // vblendvps     %ymm3,%ymm14,%ymm0,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,68,36,128                // vmovups       -0x80(%rsp),%ymm0
  .byte  197,252,16,76,36,160                // vmovups       -0x60(%rsp),%ymm1
  .byte  197,252,16,84,36,192                // vmovups       -0x40(%rsp),%ymm2
  .byte  197,252,16,92,36,224                // vmovups       -0x20(%rsp),%ymm3
  .byte  72,131,196,24                       // add           $0x18,%rsp
  .byte  255,224                             // jmpq          *%rax
  .byte  197,123,16,4,208                    // vmovsd        (%rax,%rdx,8),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,79                              // je            5203 <_sk_load_f16_dst_avx+0x316>
  .byte  197,57,22,68,208,8                  // vmovhpd       0x8(%rax,%rdx,8),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,67                              // jb            5203 <_sk_load_f16_dst_avx+0x316>
  .byte  197,251,16,116,208,16               // vmovsd        0x10(%rax,%rdx,8),%xmm6
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,68                              // je            5210 <_sk_load_f16_dst_avx+0x323>
  .byte  197,201,22,116,208,24               // vmovhpd       0x18(%rax,%rdx,8),%xmm6,%xmm6
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,56                              // jb            5210 <_sk_load_f16_dst_avx+0x323>
  .byte  197,251,16,108,208,32               // vmovsd        0x20(%rax,%rdx,8),%xmm5
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,70,253,255,255               // je            4f2e <_sk_load_f16_dst_avx+0x41>
  .byte  197,209,22,108,208,40               // vmovhpd       0x28(%rax,%rdx,8),%xmm5,%xmm5
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,54,253,255,255               // jb            4f2e <_sk_load_f16_dst_avx+0x41>
  .byte  197,122,126,76,208,48               // vmovq         0x30(%rax,%rdx,8),%xmm9
  .byte  233,43,253,255,255                  // jmpq          4f2e <_sk_load_f16_dst_avx+0x41>
  .byte  197,209,87,237                      // vxorpd        %xmm5,%xmm5,%xmm5
  .byte  197,201,87,246                      // vxorpd        %xmm6,%xmm6,%xmm6
  .byte  233,30,253,255,255                  // jmpq          4f2e <_sk_load_f16_dst_avx+0x41>
  .byte  197,209,87,237                      // vxorpd        %xmm5,%xmm5,%xmm5
  .byte  233,21,253,255,255                  // jmpq          4f2e <_sk_load_f16_dst_avx+0x41>

HIDDEN _sk_gather_f16_avx
.globl _sk_gather_f16_avx
FUNCTION(_sk_gather_f16_avx)
_sk_gather_f16_avx:
  .byte  72,131,236,24                       // sub           $0x18,%rsp
  .byte  197,252,17,124,36,224               // vmovups       %ymm7,-0x20(%rsp)
  .byte  197,252,17,116,36,192               // vmovups       %ymm6,-0x40(%rsp)
  .byte  197,252,17,108,36,160               // vmovups       %ymm5,-0x60(%rsp)
  .byte  197,254,127,100,36,128              // vmovdqu       %ymm4,-0x80(%rsp)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,113,254,192                     // vpaddd        %xmm0,%xmm1,%xmm8
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,225,249,126,200                 // vmovq         %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,65,122,126,12,193               // vmovq         (%r9,%rax,8),%xmm9
  .byte  196,227,249,22,200,1                // vpextrq       $0x1,%xmm1,%rax
  .byte  196,1,122,126,20,209                // vmovq         (%r9,%r10,8),%xmm10
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,65,122,126,28,193               // vmovq         (%r9,%rax,8),%xmm11
  .byte  196,97,249,126,192                  // vmovq         %xmm8,%rax
  .byte  196,1,122,126,36,209                // vmovq         (%r9,%r10,8),%xmm12
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,65,122,126,44,193               // vmovq         (%r9,%rax,8),%xmm13
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  196,1,122,126,4,209                 // vmovq         (%r9,%r10,8),%xmm8
  .byte  76,137,216                          // mov           %r11,%rax
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,65,122,126,52,193               // vmovq         (%r9,%rax,8),%xmm14
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,193,122,126,4,193               // vmovq         (%r9,%rax,8),%xmm0
  .byte  196,193,41,108,209                  // vpunpcklqdq   %xmm9,%xmm10,%xmm2
  .byte  196,193,25,108,203                  // vpunpcklqdq   %xmm11,%xmm12,%xmm1
  .byte  196,193,57,108,221                  // vpunpcklqdq   %xmm13,%xmm8,%xmm3
  .byte  196,193,121,108,198                 // vpunpcklqdq   %xmm14,%xmm0,%xmm0
  .byte  197,105,97,193                      // vpunpcklwd    %xmm1,%xmm2,%xmm8
  .byte  197,233,105,209                     // vpunpckhwd    %xmm1,%xmm2,%xmm2
  .byte  197,225,97,200                      // vpunpcklwd    %xmm0,%xmm3,%xmm1
  .byte  197,225,105,192                     // vpunpckhwd    %xmm0,%xmm3,%xmm0
  .byte  197,57,97,250                       // vpunpcklwd    %xmm2,%xmm8,%xmm15
  .byte  197,57,105,194                      // vpunpckhwd    %xmm2,%xmm8,%xmm8
  .byte  197,241,97,208                      // vpunpcklwd    %xmm0,%xmm1,%xmm2
  .byte  197,113,105,200                     // vpunpckhwd    %xmm0,%xmm1,%xmm9
  .byte  197,129,108,194                     // vpunpcklqdq   %xmm2,%xmm15,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,98,125,24,37,225,34,0,0         // vbroadcastss  0x22e1(%rip),%ymm12        # 7604 <_sk_callback_avx+0x4ca>
  .byte  196,193,124,84,204                  // vandps        %ymm12,%ymm0,%ymm1
  .byte  197,252,87,193                      // vxorps        %ymm1,%ymm0,%ymm0
  .byte  196,195,125,25,198,1                // vextractf128  $0x1,%ymm0,%xmm14
  .byte  196,98,121,24,29,205,34,0,0         // vbroadcastss  0x22cd(%rip),%xmm11        # 7608 <_sk_callback_avx+0x4ce>
  .byte  196,193,8,87,219                    // vxorps        %xmm11,%xmm14,%xmm3
  .byte  196,98,121,24,45,195,34,0,0         // vbroadcastss  0x22c3(%rip),%xmm13        # 760c <_sk_callback_avx+0x4d2>
  .byte  197,145,102,219                     // vpcmpgtd      %xmm3,%xmm13,%xmm3
  .byte  196,65,120,87,211                   // vxorps        %xmm11,%xmm0,%xmm10
  .byte  196,65,17,102,210                   // vpcmpgtd      %xmm10,%xmm13,%xmm10
  .byte  196,99,45,24,211,1                  // vinsertf128   $0x1,%xmm3,%ymm10,%ymm10
  .byte  197,225,114,241,16                  // vpslld        $0x10,%xmm1,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  197,241,114,241,16                  // vpslld        $0x10,%xmm1,%xmm1
  .byte  196,227,101,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm1
  .byte  197,249,114,240,13                  // vpslld        $0xd,%xmm0,%xmm0
  .byte  196,193,97,114,246,13               // vpslld        $0xd,%xmm14,%xmm3
  .byte  196,227,125,24,195,1                // vinsertf128   $0x1,%xmm3,%ymm0,%ymm0
  .byte  197,252,86,193                      // vorps         %ymm1,%ymm0,%ymm0
  .byte  196,227,125,25,193,1                // vextractf128  $0x1,%ymm0,%xmm1
  .byte  196,226,121,24,29,121,34,0,0        // vbroadcastss  0x2279(%rip),%xmm3        # 7610 <_sk_callback_avx+0x4d6>
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  197,249,254,195                     // vpaddd        %xmm3,%xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,195,125,74,198,160              // vblendvps     %ymm10,%ymm14,%ymm0,%ymm0
  .byte  197,129,109,202                     // vpunpckhqdq   %xmm2,%xmm15,%xmm1
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,241,105,212                     // vpunpckhwd    %xmm4,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,212                  // vandps        %ymm12,%ymm1,%ymm2
  .byte  197,244,87,202                      // vxorps        %ymm2,%ymm1,%ymm1
  .byte  196,195,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm10
  .byte  196,193,40,87,251                   // vxorps        %xmm11,%xmm10,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,193,112,87,243                  // vxorps        %xmm11,%xmm1,%xmm6
  .byte  197,145,102,246                     // vpcmpgtd      %xmm6,%xmm13,%xmm6
  .byte  196,227,77,24,247,1                 // vinsertf128   $0x1,%xmm7,%ymm6,%ymm6
  .byte  197,193,114,242,16                  // vpslld        $0x10,%xmm2,%xmm7
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  197,233,114,242,16                  // vpslld        $0x10,%xmm2,%xmm2
  .byte  196,227,69,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm7,%ymm2
  .byte  197,241,114,241,13                  // vpslld        $0xd,%xmm1,%xmm1
  .byte  196,193,65,114,242,13               // vpslld        $0xd,%xmm10,%xmm7
  .byte  196,227,117,24,207,1                // vinsertf128   $0x1,%xmm7,%ymm1,%ymm1
  .byte  197,244,86,202                      // vorps         %ymm2,%ymm1,%ymm1
  .byte  196,227,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm2
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,195,117,74,206,96               // vblendvps     %ymm6,%ymm14,%ymm1,%ymm1
  .byte  196,193,57,108,209                  // vpunpcklqdq   %xmm9,%xmm8,%xmm2
  .byte  197,233,105,244                     // vpunpckhwd    %xmm4,%xmm2,%xmm6
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  196,193,108,84,244                  // vandps        %ymm12,%ymm2,%ymm6
  .byte  197,236,87,214                      // vxorps        %ymm6,%ymm2,%ymm2
  .byte  196,227,125,25,215,1                // vextractf128  $0x1,%ymm2,%xmm7
  .byte  196,193,64,87,235                   // vxorps        %xmm11,%xmm7,%xmm5
  .byte  197,145,102,237                     // vpcmpgtd      %xmm5,%xmm13,%xmm5
  .byte  196,193,104,87,227                  // vxorps        %xmm11,%xmm2,%xmm4
  .byte  197,145,102,228                     // vpcmpgtd      %xmm4,%xmm13,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  197,209,114,246,16                  // vpslld        $0x10,%xmm6,%xmm5
  .byte  196,227,125,25,246,1                // vextractf128  $0x1,%ymm6,%xmm6
  .byte  197,201,114,246,16                  // vpslld        $0x10,%xmm6,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  197,233,114,242,13                  // vpslld        $0xd,%xmm2,%xmm2
  .byte  197,201,114,247,13                  // vpslld        $0xd,%xmm7,%xmm6
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  197,236,86,213                      // vorps         %ymm5,%ymm2,%ymm2
  .byte  196,227,125,25,213,1                // vextractf128  $0x1,%ymm2,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,213,1                // vinsertf128   $0x1,%xmm5,%ymm2,%ymm2
  .byte  196,195,109,74,214,64               // vblendvps     %ymm4,%ymm14,%ymm2,%ymm2
  .byte  196,193,57,109,225                  // vpunpckhqdq   %xmm9,%xmm8,%xmm4
  .byte  196,193,89,105,234                  // vpunpckhwd    %xmm10,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,193,92,84,236                   // vandps        %ymm12,%ymm4,%ymm5
  .byte  197,220,87,229                      // vxorps        %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,230,1                // vextractf128  $0x1,%ymm4,%xmm6
  .byte  196,193,72,87,251                   // vxorps        %xmm11,%xmm6,%xmm7
  .byte  197,17,102,199                      // vpcmpgtd      %xmm7,%xmm13,%xmm8
  .byte  196,193,88,87,251                   // vxorps        %xmm11,%xmm4,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,195,69,24,248,1                 // vinsertf128   $0x1,%xmm8,%ymm7,%ymm7
  .byte  197,185,114,245,16                  // vpslld        $0x10,%xmm5,%xmm8
  .byte  196,227,125,25,237,1                // vextractf128  $0x1,%ymm5,%xmm5
  .byte  197,209,114,245,16                  // vpslld        $0x10,%xmm5,%xmm5
  .byte  196,227,61,24,237,1                 // vinsertf128   $0x1,%xmm5,%ymm8,%ymm5
  .byte  197,217,114,244,13                  // vpslld        $0xd,%xmm4,%xmm4
  .byte  197,201,114,246,13                  // vpslld        $0xd,%xmm6,%xmm6
  .byte  196,227,93,24,230,1                 // vinsertf128   $0x1,%xmm6,%ymm4,%ymm4
  .byte  197,220,86,229                      // vorps         %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,229,1                // vextractf128  $0x1,%ymm4,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,217,254,219                     // vpaddd        %xmm3,%xmm4,%xmm3
  .byte  196,227,101,24,221,1                // vinsertf128   $0x1,%xmm5,%ymm3,%ymm3
  .byte  196,195,101,74,222,112              // vblendvps     %ymm7,%ymm14,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,100,36,128               // vmovups       -0x80(%rsp),%ymm4
  .byte  197,252,16,108,36,160               // vmovups       -0x60(%rsp),%ymm5
  .byte  197,252,16,116,36,192               // vmovups       -0x40(%rsp),%ymm6
  .byte  197,252,16,124,36,224               // vmovups       -0x20(%rsp),%ymm7
  .byte  72,131,196,24                       // add           $0x18,%rsp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_avx
.globl _sk_store_f16_avx
FUNCTION(_sk_store_f16_avx)
_sk_store_f16_avx:
  .byte  72,131,236,88                       // sub           $0x58,%rsp
  .byte  197,252,17,124,36,32                // vmovups       %ymm7,0x20(%rsp)
  .byte  197,252,17,52,36                    // vmovups       %ymm6,(%rsp)
  .byte  197,252,17,108,36,224               // vmovups       %ymm5,-0x20(%rsp)
  .byte  197,252,17,100,36,192               // vmovups       %ymm4,-0x40(%rsp)
  .byte  196,98,125,24,13,153,32,0,0         // vbroadcastss  0x2099(%rip),%ymm9        # 7614 <_sk_callback_avx+0x4da>
  .byte  196,65,124,84,209                   // vandps        %ymm9,%ymm0,%ymm10
  .byte  197,252,17,68,36,128                // vmovups       %ymm0,-0x80(%rsp)
  .byte  196,65,124,87,218                   // vxorps        %ymm10,%ymm0,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,98,121,24,5,126,32,0,0          // vbroadcastss  0x207e(%rip),%xmm8        # 7618 <_sk_callback_avx+0x4de>
  .byte  196,65,57,102,236                   // vpcmpgtd      %xmm12,%xmm8,%xmm13
  .byte  196,65,57,102,243                   // vpcmpgtd      %xmm11,%xmm8,%xmm14
  .byte  196,67,13,24,237,1                  // vinsertf128   $0x1,%xmm13,%ymm14,%ymm13
  .byte  196,193,9,114,210,16                // vpsrld        $0x10,%xmm10,%xmm14
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,210,16               // vpsrld        $0x10,%xmm10,%xmm10
  .byte  196,67,13,24,242,1                  // vinsertf128   $0x1,%xmm10,%ymm14,%ymm14
  .byte  196,193,33,114,211,13               // vpsrld        $0xd,%xmm11,%xmm11
  .byte  196,193,25,114,212,13               // vpsrld        $0xd,%xmm12,%xmm12
  .byte  196,98,125,24,21,69,32,0,0          // vbroadcastss  0x2045(%rip),%ymm10        # 761c <_sk_callback_avx+0x4e2>
  .byte  196,65,12,86,242                    // vorps         %ymm10,%ymm14,%ymm14
  .byte  196,67,125,25,247,1                 // vextractf128  $0x1,%ymm14,%xmm15
  .byte  196,65,1,254,228                    // vpaddd        %xmm12,%xmm15,%xmm12
  .byte  196,65,9,254,219                    // vpaddd        %xmm11,%xmm14,%xmm11
  .byte  196,67,37,24,228,1                  // vinsertf128   $0x1,%xmm12,%ymm11,%ymm12
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  196,99,29,74,224,208                // vblendvps     %ymm13,%ymm0,%ymm12,%ymm12
  .byte  196,65,116,84,233                   // vandps        %ymm9,%ymm1,%ymm13
  .byte  197,252,17,76,36,160                // vmovups       %ymm1,-0x60(%rsp)
  .byte  196,65,116,87,245                   // vxorps        %ymm13,%ymm1,%ymm14
  .byte  196,67,125,25,247,1                 // vextractf128  $0x1,%ymm14,%xmm15
  .byte  196,193,57,102,255                  // vpcmpgtd      %xmm15,%xmm8,%xmm7
  .byte  196,65,57,102,222                   // vpcmpgtd      %xmm14,%xmm8,%xmm11
  .byte  196,227,37,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm11,%ymm7
  .byte  196,193,33,114,213,16               // vpsrld        $0x10,%xmm13,%xmm11
  .byte  196,99,125,25,238,1                 // vextractf128  $0x1,%ymm13,%xmm6
  .byte  197,201,114,214,16                  // vpsrld        $0x10,%xmm6,%xmm6
  .byte  196,227,37,24,246,1                 // vinsertf128   $0x1,%xmm6,%ymm11,%ymm6
  .byte  196,193,33,114,215,13               // vpsrld        $0xd,%xmm15,%xmm11
  .byte  196,193,76,86,242                   // vorps         %ymm10,%ymm6,%ymm6
  .byte  196,227,125,25,245,1                // vextractf128  $0x1,%ymm6,%xmm5
  .byte  196,193,81,254,235                  // vpaddd        %xmm11,%xmm5,%xmm5
  .byte  196,193,89,114,214,13               // vpsrld        $0xd,%xmm14,%xmm4
  .byte  197,201,254,228                     // vpaddd        %xmm4,%xmm6,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,99,93,74,232,112                // vblendvps     %ymm7,%ymm0,%ymm4,%ymm13
  .byte  196,193,108,84,225                  // vandps        %ymm9,%ymm2,%ymm4
  .byte  197,236,87,236                      // vxorps        %ymm4,%ymm2,%ymm5
  .byte  196,227,125,25,238,1                // vextractf128  $0x1,%ymm5,%xmm6
  .byte  197,185,102,254                     // vpcmpgtd      %xmm6,%xmm8,%xmm7
  .byte  197,57,102,221                      // vpcmpgtd      %xmm5,%xmm8,%xmm11
  .byte  196,227,37,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm11,%ymm7
  .byte  197,161,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm11
  .byte  196,227,125,25,228,1                // vextractf128  $0x1,%ymm4,%xmm4
  .byte  197,217,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm4
  .byte  196,227,37,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm11,%ymm4
  .byte  197,201,114,214,13                  // vpsrld        $0xd,%xmm6,%xmm6
  .byte  196,193,92,86,226                   // vorps         %ymm10,%ymm4,%ymm4
  .byte  196,227,125,25,225,1                // vextractf128  $0x1,%ymm4,%xmm1
  .byte  197,241,254,206                     // vpaddd        %xmm6,%xmm1,%xmm1
  .byte  197,209,114,213,13                  // vpsrld        $0xd,%xmm5,%xmm5
  .byte  197,217,254,229                     // vpaddd        %xmm5,%xmm4,%xmm4
  .byte  196,227,93,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm4,%ymm1
  .byte  196,99,117,74,216,112               // vblendvps     %ymm7,%ymm0,%ymm1,%ymm11
  .byte  196,193,100,84,225                  // vandps        %ymm9,%ymm3,%ymm4
  .byte  197,228,87,236                      // vxorps        %ymm4,%ymm3,%ymm5
  .byte  196,227,125,25,238,1                // vextractf128  $0x1,%ymm5,%xmm6
  .byte  197,185,102,254                     // vpcmpgtd      %xmm6,%xmm8,%xmm7
  .byte  197,57,102,197                      // vpcmpgtd      %xmm5,%xmm8,%xmm8
  .byte  196,227,61,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm8,%ymm7
  .byte  197,185,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm8
  .byte  196,227,125,25,228,1                // vextractf128  $0x1,%ymm4,%xmm4
  .byte  197,217,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm4
  .byte  196,227,61,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm8,%ymm4
  .byte  196,193,92,86,226                   // vorps         %ymm10,%ymm4,%ymm4
  .byte  197,201,114,214,13                  // vpsrld        $0xd,%xmm6,%xmm6
  .byte  196,227,125,25,225,1                // vextractf128  $0x1,%ymm4,%xmm1
  .byte  197,241,254,206                     // vpaddd        %xmm6,%xmm1,%xmm1
  .byte  197,209,114,213,13                  // vpsrld        $0xd,%xmm5,%xmm5
  .byte  197,217,254,229                     // vpaddd        %xmm5,%xmm4,%xmm4
  .byte  196,227,93,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm4,%ymm1
  .byte  196,227,117,74,200,112              // vblendvps     %ymm7,%ymm0,%ymm1,%ymm1
  .byte  196,99,125,25,224,1                 // vextractf128  $0x1,%ymm12,%xmm0
  .byte  196,226,25,43,192                   // vpackusdw     %xmm0,%xmm12,%xmm0
  .byte  196,99,125,25,236,1                 // vextractf128  $0x1,%ymm13,%xmm4
  .byte  196,226,17,43,228                   // vpackusdw     %xmm4,%xmm13,%xmm4
  .byte  196,99,125,25,221,1                 // vextractf128  $0x1,%ymm11,%xmm5
  .byte  196,226,33,43,245                   // vpackusdw     %xmm5,%xmm11,%xmm6
  .byte  196,227,125,25,205,1                // vextractf128  $0x1,%ymm1,%xmm5
  .byte  196,226,113,43,205                  // vpackusdw     %xmm5,%xmm1,%xmm1
  .byte  197,249,97,236                      // vpunpcklwd    %xmm4,%xmm0,%xmm5
  .byte  197,249,105,196                     // vpunpckhwd    %xmm4,%xmm0,%xmm0
  .byte  197,201,97,225                      // vpunpcklwd    %xmm1,%xmm6,%xmm4
  .byte  197,201,105,201                     // vpunpckhwd    %xmm1,%xmm6,%xmm1
  .byte  197,81,98,220                       // vpunpckldq    %xmm4,%xmm5,%xmm11
  .byte  197,81,106,212                      // vpunpckhdq    %xmm4,%xmm5,%xmm10
  .byte  197,121,98,201                      // vpunpckldq    %xmm1,%xmm0,%xmm9
  .byte  197,121,106,193                     // vpunpckhdq    %xmm1,%xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           57b5 <_sk_store_f16_avx+0x25e>
  .byte  197,120,17,28,208                   // vmovups       %xmm11,(%rax,%rdx,8)
  .byte  197,120,17,84,208,16                // vmovups       %xmm10,0x10(%rax,%rdx,8)
  .byte  197,120,17,76,208,32                // vmovups       %xmm9,0x20(%rax,%rdx,8)
  .byte  197,122,127,68,208,48               // vmovdqu       %xmm8,0x30(%rax,%rdx,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,68,36,128                // vmovups       -0x80(%rsp),%ymm0
  .byte  197,252,16,76,36,160                // vmovups       -0x60(%rsp),%ymm1
  .byte  197,252,16,100,36,192               // vmovups       -0x40(%rsp),%ymm4
  .byte  197,252,16,108,36,224               // vmovups       -0x20(%rsp),%ymm5
  .byte  197,252,16,52,36                    // vmovups       (%rsp),%ymm6
  .byte  197,252,16,124,36,32                // vmovups       0x20(%rsp),%ymm7
  .byte  72,131,196,88                       // add           $0x58,%rsp
  .byte  255,224                             // jmpq          *%rax
  .byte  197,121,214,28,208                  // vmovq         %xmm11,(%rax,%rdx,8)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,202                             // je            578a <_sk_store_f16_avx+0x233>
  .byte  197,121,23,92,208,8                 // vmovhpd       %xmm11,0x8(%rax,%rdx,8)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,190                             // jb            578a <_sk_store_f16_avx+0x233>
  .byte  197,121,214,84,208,16               // vmovq         %xmm10,0x10(%rax,%rdx,8)
  .byte  116,182                             // je            578a <_sk_store_f16_avx+0x233>
  .byte  197,121,23,84,208,24                // vmovhpd       %xmm10,0x18(%rax,%rdx,8)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,170                             // jb            578a <_sk_store_f16_avx+0x233>
  .byte  197,121,214,76,208,32               // vmovq         %xmm9,0x20(%rax,%rdx,8)
  .byte  116,162                             // je            578a <_sk_store_f16_avx+0x233>
  .byte  197,121,23,76,208,40                // vmovhpd       %xmm9,0x28(%rax,%rdx,8)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,150                             // jb            578a <_sk_store_f16_avx+0x233>
  .byte  197,121,214,68,208,48               // vmovq         %xmm8,0x30(%rax,%rdx,8)
  .byte  235,142                             // jmp           578a <_sk_store_f16_avx+0x233>

HIDDEN _sk_load_u16_be_avx
.globl _sk_load_u16_be_avx
FUNCTION(_sk_load_u16_be_avx)
_sk_load_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,253,0,0,0                    // jne           590f <_sk_load_u16_be_avx+0x113>
  .byte  196,65,121,16,4,65                  // vmovupd       (%r9,%rax,2),%xmm8
  .byte  196,193,121,16,84,65,16             // vmovupd       0x10(%r9,%rax,2),%xmm2
  .byte  196,193,121,16,92,65,32             // vmovupd       0x20(%r9,%rax,2),%xmm3
  .byte  196,65,122,111,76,65,48             // vmovdqu       0x30(%r9,%rax,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,202                      // vpunpcklwd    %xmm2,%xmm0,%xmm9
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,227                     // vpunpckhwd    %xmm3,%xmm1,%xmm12
  .byte  197,177,108,194                     // vpunpcklqdq   %xmm2,%xmm9,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,193,121,105,202                 // vpunpckhwd    %xmm10,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,29,157,29,0,0         // vbroadcastss  0x1d9d(%rip),%ymm11        # 7620 <_sk_callback_avx+0x4e6>
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,177,109,202                     // vpunpckhqdq   %xmm2,%xmm9,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,193,113,105,210                 // vpunpckhwd    %xmm10,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,193,57,108,212                  // vpunpcklqdq   %xmm12,%xmm8,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,193,105,105,218                 // vpunpckhwd    %xmm10,%xmm2,%xmm3
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  196,193,57,109,220                  // vpunpckhqdq   %xmm12,%xmm8,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,65,97,105,194                   // vpunpckhwd    %xmm10,%xmm3,%xmm8
  .byte  196,226,121,51,219                  // vpmovzxwd     %xmm3,%xmm3
  .byte  196,195,101,24,216,1                // vinsertf128   $0x1,%xmm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,219                  // vmulps        %ymm11,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,123,16,4,65                  // vmovsd        (%r9,%rax,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,85                              // je            5975 <_sk_load_u16_be_avx+0x179>
  .byte  196,65,57,22,68,65,8                // vmovhpd       0x8(%r9,%rax,2),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,72                              // jb            5975 <_sk_load_u16_be_avx+0x179>
  .byte  196,193,123,16,84,65,16             // vmovsd        0x10(%r9,%rax,2),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,72                              // je            5982 <_sk_load_u16_be_avx+0x186>
  .byte  196,193,105,22,84,65,24             // vmovhpd       0x18(%r9,%rax,2),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,59                              // jb            5982 <_sk_load_u16_be_avx+0x186>
  .byte  196,193,123,16,92,65,32             // vmovsd        0x20(%r9,%rax,2),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,213,254,255,255              // je            582d <_sk_load_u16_be_avx+0x31>
  .byte  196,193,97,22,92,65,40              // vmovhpd       0x28(%r9,%rax,2),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,196,254,255,255              // jb            582d <_sk_load_u16_be_avx+0x31>
  .byte  196,65,122,126,76,65,48             // vmovq         0x30(%r9,%rax,2),%xmm9
  .byte  233,184,254,255,255                 // jmpq          582d <_sk_load_u16_be_avx+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,171,254,255,255                 // jmpq          582d <_sk_load_u16_be_avx+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,162,254,255,255                 // jmpq          582d <_sk_load_u16_be_avx+0x31>

HIDDEN _sk_load_rgb_u16_be_avx
.globl _sk_load_rgb_u16_be_avx
FUNCTION(_sk_load_rgb_u16_be_avx)
_sk_load_rgb_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,82                         // lea           (%rdx,%rdx,2),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,243,0,0,0                    // jne           5a90 <_sk_load_rgb_u16_be_avx+0x105>
  .byte  196,193,122,111,4,65                // vmovdqu       (%r9,%rax,2),%xmm0
  .byte  196,193,122,111,84,65,12            // vmovdqu       0xc(%r9,%rax,2),%xmm2
  .byte  196,193,122,111,76,65,24            // vmovdqu       0x18(%r9,%rax,2),%xmm1
  .byte  196,193,122,111,92,65,32            // vmovdqu       0x20(%r9,%rax,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,211                     // vpunpckhwd    %xmm3,%xmm1,%xmm10
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,65,25,239,228                   // vpxor         %xmm12,%xmm12,%xmm12
  .byte  196,193,121,105,204                 // vpunpckhwd    %xmm12,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,29,253,27,0,0         // vbroadcastss  0x1bfd(%rip),%ymm11        # 7624 <_sk_callback_avx+0x4ea>
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,193,113,105,212                 // vpunpckhwd    %xmm12,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,193,49,108,210                  // vpunpcklqdq   %xmm10,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,193,105,105,220                 // vpunpckhwd    %xmm12,%xmm2,%xmm3
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,154,27,0,0        // vbroadcastss  0x1b9a(%rip),%ymm3        # 7628 <_sk_callback_avx+0x4ee>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,193,121,110,4,65                // vmovd         (%r9,%rax,2),%xmm0
  .byte  196,193,121,196,68,65,4,2           // vpinsrw       $0x2,0x4(%r9,%rax,2),%xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,5                               // jne           5aa9 <_sk_load_rgb_u16_be_avx+0x11e>
  .byte  233,40,255,255,255                  // jmpq          59d1 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,76,65,6             // vmovd         0x6(%r9,%rax,2),%xmm1
  .byte  196,65,113,196,68,65,10,2           // vpinsrw       $0x2,0xa(%r9,%rax,2),%xmm1,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,26                              // jb            5ad8 <_sk_load_rgb_u16_be_avx+0x14d>
  .byte  196,193,121,110,76,65,12            // vmovd         0xc(%r9,%rax,2),%xmm1
  .byte  196,193,113,196,84,65,16,2          // vpinsrw       $0x2,0x10(%r9,%rax,2),%xmm1,%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  117,10                              // jne           5add <_sk_load_rgb_u16_be_avx+0x152>
  .byte  233,249,254,255,255                 // jmpq          59d1 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,244,254,255,255                 // jmpq          59d1 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,76,65,18            // vmovd         0x12(%r9,%rax,2),%xmm1
  .byte  196,65,113,196,76,65,22,2           // vpinsrw       $0x2,0x16(%r9,%rax,2),%xmm1,%xmm9
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,26                              // jb            5b0c <_sk_load_rgb_u16_be_avx+0x181>
  .byte  196,193,121,110,76,65,24            // vmovd         0x18(%r9,%rax,2),%xmm1
  .byte  196,193,113,196,76,65,28,2          // vpinsrw       $0x2,0x1c(%r9,%rax,2),%xmm1,%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  117,10                              // jne           5b11 <_sk_load_rgb_u16_be_avx+0x186>
  .byte  233,197,254,255,255                 // jmpq          59d1 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,192,254,255,255                 // jmpq          59d1 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,92,65,30            // vmovd         0x1e(%r9,%rax,2),%xmm3
  .byte  196,65,97,196,92,65,34,2            // vpinsrw       $0x2,0x22(%r9,%rax,2),%xmm3,%xmm11
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,20                              // jb            5b3a <_sk_load_rgb_u16_be_avx+0x1af>
  .byte  196,193,121,110,92,65,36            // vmovd         0x24(%r9,%rax,2),%xmm3
  .byte  196,193,97,196,92,65,40,2           // vpinsrw       $0x2,0x28(%r9,%rax,2),%xmm3,%xmm3
  .byte  233,151,254,255,255                 // jmpq          59d1 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,146,254,255,255                 // jmpq          59d1 <_sk_load_rgb_u16_be_avx+0x46>

HIDDEN _sk_store_u16_be_avx
.globl _sk_store_u16_be_avx
FUNCTION(_sk_store_u16_be_avx)
_sk_store_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  196,98,125,24,5,215,26,0,0          // vbroadcastss  0x1ad7(%rip),%ymm8        # 762c <_sk_callback_avx+0x4f2>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,67,125,25,202,1                 // vextractf128  $0x1,%ymm9,%xmm10
  .byte  196,66,49,43,202                    // vpackusdw     %xmm10,%xmm9,%xmm9
  .byte  196,193,41,113,241,8                // vpsllw        $0x8,%xmm9,%xmm10
  .byte  196,193,49,113,209,8                // vpsrlw        $0x8,%xmm9,%xmm9
  .byte  196,65,41,235,201                   // vpor          %xmm9,%xmm10,%xmm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,67,125,25,211,1                 // vextractf128  $0x1,%ymm10,%xmm11
  .byte  196,66,41,43,211                    // vpackusdw     %xmm11,%xmm10,%xmm10
  .byte  196,193,33,113,242,8                // vpsllw        $0x8,%xmm10,%xmm11
  .byte  196,193,41,113,210,8                // vpsrlw        $0x8,%xmm10,%xmm10
  .byte  196,65,33,235,210                   // vpor          %xmm10,%xmm11,%xmm10
  .byte  196,65,108,89,216                   // vmulps        %ymm8,%ymm2,%ymm11
  .byte  196,65,125,91,219                   // vcvtps2dq     %ymm11,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,66,33,43,220                    // vpackusdw     %xmm12,%xmm11,%xmm11
  .byte  196,193,25,113,243,8                // vpsllw        $0x8,%xmm11,%xmm12
  .byte  196,193,33,113,211,8                // vpsrlw        $0x8,%xmm11,%xmm11
  .byte  196,65,25,235,219                   // vpor          %xmm11,%xmm12,%xmm11
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,196,1                 // vextractf128  $0x1,%ymm8,%xmm12
  .byte  196,66,57,43,196                    // vpackusdw     %xmm12,%xmm8,%xmm8
  .byte  196,193,25,113,240,8                // vpsllw        $0x8,%xmm8,%xmm12
  .byte  196,193,57,113,208,8                // vpsrlw        $0x8,%xmm8,%xmm8
  .byte  196,65,25,235,192                   // vpor          %xmm8,%xmm12,%xmm8
  .byte  196,65,49,97,226                    // vpunpcklwd    %xmm10,%xmm9,%xmm12
  .byte  196,65,49,105,234                   // vpunpckhwd    %xmm10,%xmm9,%xmm13
  .byte  196,65,33,97,200                    // vpunpcklwd    %xmm8,%xmm11,%xmm9
  .byte  196,65,33,105,192                   // vpunpckhwd    %xmm8,%xmm11,%xmm8
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,17,98,200                    // vpunpckldq    %xmm8,%xmm13,%xmm9
  .byte  196,65,17,106,192                   // vpunpckhdq    %xmm8,%xmm13,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,31                              // jne           5c39 <_sk_store_u16_be_avx+0xfa>
  .byte  196,65,120,17,28,65                 // vmovups       %xmm11,(%r9,%rax,2)
  .byte  196,65,120,17,84,65,16              // vmovups       %xmm10,0x10(%r9,%rax,2)
  .byte  196,65,120,17,76,65,32              // vmovups       %xmm9,0x20(%r9,%rax,2)
  .byte  196,65,122,127,68,65,48             // vmovdqu       %xmm8,0x30(%r9,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,214,28,65                // vmovq         %xmm11,(%r9,%rax,2)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            5c35 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,92,65,8               // vmovhpd       %xmm11,0x8(%r9,%rax,2)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            5c35 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,84,65,16             // vmovq         %xmm10,0x10(%r9,%rax,2)
  .byte  116,218                             // je            5c35 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,84,65,24              // vmovhpd       %xmm10,0x18(%r9,%rax,2)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,205                             // jb            5c35 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,76,65,32             // vmovq         %xmm9,0x20(%r9,%rax,2)
  .byte  116,196                             // je            5c35 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,76,65,40              // vmovhpd       %xmm9,0x28(%r9,%rax,2)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,183                             // jb            5c35 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,68,65,48             // vmovq         %xmm8,0x30(%r9,%rax,2)
  .byte  235,174                             // jmp           5c35 <_sk_store_u16_be_avx+0xf6>

HIDDEN _sk_load_f32_avx
.globl _sk_load_f32_avx
FUNCTION(_sk_load_f32_avx)
_sk_load_f32_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  119,110                             // ja            5cfd <_sk_load_f32_avx+0x76>
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,141,29,135,0,0,0                 // lea           0x87(%rip),%r11        # 5d28 <_sk_load_f32_avx+0xa1>
  .byte  75,99,4,131                         // movslq        (%r11,%r8,4),%rax
  .byte  76,1,216                            // add           %r11,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,3,125,24,68,145,112,1           // vinsertf128   $0x1,0x70(%r9,%r10,4),%ymm0,%ymm8
  .byte  196,131,125,24,92,145,96,1          // vinsertf128   $0x1,0x60(%r9,%r10,4),%ymm0,%ymm3
  .byte  196,131,125,24,76,145,80,1          // vinsertf128   $0x1,0x50(%r9,%r10,4),%ymm0,%ymm1
  .byte  196,131,125,24,84,145,64,1          // vinsertf128   $0x1,0x40(%r9,%r10,4),%ymm0,%ymm2
  .byte  196,129,121,16,68,145,48            // vmovupd       0x30(%r9,%r10,4),%xmm0
  .byte  196,195,125,13,192,12               // vblendpd      $0xc,%ymm8,%ymm0,%ymm0
  .byte  196,1,121,16,68,145,32              // vmovupd       0x20(%r9,%r10,4),%xmm8
  .byte  196,99,61,13,203,12                 // vblendpd      $0xc,%ymm3,%ymm8,%ymm9
  .byte  196,129,121,16,92,145,16            // vmovupd       0x10(%r9,%r10,4),%xmm3
  .byte  196,99,101,13,209,12                // vblendpd      $0xc,%ymm1,%ymm3,%ymm10
  .byte  196,129,121,16,12,145               // vmovupd       (%r9,%r10,4),%xmm1
  .byte  196,227,117,13,202,12               // vblendpd      $0xc,%ymm2,%ymm1,%ymm1
  .byte  196,193,116,20,210                  // vunpcklps     %ymm10,%ymm1,%ymm2
  .byte  196,193,116,21,218                  // vunpckhps     %ymm10,%ymm1,%ymm3
  .byte  197,180,20,200                      // vunpcklps     %ymm0,%ymm9,%ymm1
  .byte  197,52,21,192                       // vunpckhps     %ymm0,%ymm9,%ymm8
  .byte  197,237,20,193                      // vunpcklpd     %ymm1,%ymm2,%ymm0
  .byte  197,237,21,201                      // vunpckhpd     %ymm1,%ymm2,%ymm1
  .byte  196,193,101,20,208                  // vunpcklpd     %ymm8,%ymm3,%ymm2
  .byte  196,193,101,21,216                  // vunpckhpd     %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  15,31,0                             // nopl          (%rax)
  .byte  130                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  188,255,255,255,175                 // mov           $0xafffffff,%esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,162,255,255,255,154             // jmpq          *-0x65000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,146,255,255,255,138             // callq         *-0x75000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_f32_dst_avx
.globl _sk_load_f32_dst_avx
FUNCTION(_sk_load_f32_dst_avx)
_sk_load_f32_dst_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  119,110                             // ja            5dbe <_sk_load_f32_dst_avx+0x76>
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,141,29,134,0,0,0                 // lea           0x86(%rip),%r11        # 5de8 <_sk_load_f32_dst_avx+0xa0>
  .byte  75,99,4,131                         // movslq        (%r11,%r8,4),%rax
  .byte  76,1,216                            // add           %r11,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,3,125,24,68,145,112,1           // vinsertf128   $0x1,0x70(%r9,%r10,4),%ymm0,%ymm8
  .byte  196,131,125,24,124,145,96,1         // vinsertf128   $0x1,0x60(%r9,%r10,4),%ymm0,%ymm7
  .byte  196,131,125,24,108,145,80,1         // vinsertf128   $0x1,0x50(%r9,%r10,4),%ymm0,%ymm5
  .byte  196,131,125,24,116,145,64,1         // vinsertf128   $0x1,0x40(%r9,%r10,4),%ymm0,%ymm6
  .byte  196,129,121,16,100,145,48           // vmovupd       0x30(%r9,%r10,4),%xmm4
  .byte  196,195,93,13,224,12                // vblendpd      $0xc,%ymm8,%ymm4,%ymm4
  .byte  196,1,121,16,68,145,32              // vmovupd       0x20(%r9,%r10,4),%xmm8
  .byte  196,99,61,13,207,12                 // vblendpd      $0xc,%ymm7,%ymm8,%ymm9
  .byte  196,129,121,16,124,145,16           // vmovupd       0x10(%r9,%r10,4),%xmm7
  .byte  196,99,69,13,213,12                 // vblendpd      $0xc,%ymm5,%ymm7,%ymm10
  .byte  196,129,121,16,44,145               // vmovupd       (%r9,%r10,4),%xmm5
  .byte  196,227,85,13,238,12                // vblendpd      $0xc,%ymm6,%ymm5,%ymm5
  .byte  196,193,84,20,242                   // vunpcklps     %ymm10,%ymm5,%ymm6
  .byte  196,193,84,21,250                   // vunpckhps     %ymm10,%ymm5,%ymm7
  .byte  197,180,20,236                      // vunpcklps     %ymm4,%ymm9,%ymm5
  .byte  197,52,21,196                       // vunpckhps     %ymm4,%ymm9,%ymm8
  .byte  197,205,20,229                      // vunpcklpd     %ymm5,%ymm6,%ymm4
  .byte  197,205,21,237                      // vunpckhpd     %ymm5,%ymm6,%ymm5
  .byte  196,193,69,20,240                   // vunpcklpd     %ymm8,%ymm7,%ymm6
  .byte  196,193,69,21,248                   // vunpckhpd     %ymm8,%ymm7,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,144                             // xchg          %ax,%ax
  .byte  131,255,255                         // cmp           $0xffffffff,%edi
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  189,255,255,255,176                 // mov           $0xb0ffffff,%ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,163,255,255,255,155             // jmpq          *-0x64000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,147,255,255,255,139             // callq         *-0x74000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_f32_avx
.globl _sk_store_f32_avx
FUNCTION(_sk_store_f32_avx)
_sk_store_f32_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  197,124,20,193                      // vunpcklps     %ymm1,%ymm0,%ymm8
  .byte  197,124,21,217                      // vunpckhps     %ymm1,%ymm0,%ymm11
  .byte  197,108,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm9
  .byte  197,108,21,227                      // vunpckhps     %ymm3,%ymm2,%ymm12
  .byte  196,65,61,20,209                    // vunpcklpd     %ymm9,%ymm8,%ymm10
  .byte  196,65,61,21,201                    // vunpckhpd     %ymm9,%ymm8,%ymm9
  .byte  196,65,37,20,196                    // vunpcklpd     %ymm12,%ymm11,%ymm8
  .byte  196,65,37,21,220                    // vunpckhpd     %ymm12,%ymm11,%ymm11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,55                              // jne           5e75 <_sk_store_f32_avx+0x6d>
  .byte  196,67,45,24,225,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm12
  .byte  196,67,61,24,235,1                  // vinsertf128   $0x1,%xmm11,%ymm8,%ymm13
  .byte  196,67,45,6,201,49                  // vperm2f128    $0x31,%ymm9,%ymm10,%ymm9
  .byte  196,67,61,6,195,49                  // vperm2f128    $0x31,%ymm11,%ymm8,%ymm8
  .byte  196,65,125,17,36,129                // vmovupd       %ymm12,(%r9,%rax,4)
  .byte  196,65,125,17,108,129,32            // vmovupd       %ymm13,0x20(%r9,%rax,4)
  .byte  196,65,125,17,76,129,64             // vmovupd       %ymm9,0x40(%r9,%rax,4)
  .byte  196,65,125,17,68,129,96             // vmovupd       %ymm8,0x60(%r9,%rax,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,17,20,129                // vmovupd       %xmm10,(%r9,%rax,4)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            5e71 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,76,129,16             // vmovupd       %xmm9,0x10(%r9,%rax,4)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            5e71 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,68,129,32             // vmovupd       %xmm8,0x20(%r9,%rax,4)
  .byte  116,218                             // je            5e71 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,92,129,48             // vmovupd       %xmm11,0x30(%r9,%rax,4)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,205                             // jb            5e71 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,84,129,64,1           // vextractf128  $0x1,%ymm10,0x40(%r9,%rax,4)
  .byte  116,195                             // je            5e71 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,76,129,80,1           // vextractf128  $0x1,%ymm9,0x50(%r9,%rax,4)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,181                             // jb            5e71 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,68,129,96,1           // vextractf128  $0x1,%ymm8,0x60(%r9,%rax,4)
  .byte  235,171                             // jmp           5e71 <_sk_store_f32_avx+0x69>

HIDDEN _sk_clamp_x_avx
.globl _sk_clamp_x_avx
FUNCTION(_sk_clamp_x_avx)
_sk_clamp_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,95,200                       // vmaxps        %ymm0,%ymm8,%ymm9
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,99,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm0
  .byte  196,65,41,118,210                   // vpcmpeqd      %xmm10,%xmm10,%xmm10
  .byte  196,193,121,254,194                 // vpaddd        %xmm10,%xmm0,%xmm0
  .byte  196,65,57,254,194                   // vpaddd        %xmm10,%xmm8,%xmm8
  .byte  196,227,61,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm8,%ymm0
  .byte  197,180,93,192                      // vminps        %ymm0,%ymm9,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_avx
.globl _sk_clamp_y_avx
FUNCTION(_sk_clamp_y_avx)
_sk_clamp_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,95,201                       // vmaxps        %ymm1,%ymm8,%ymm9
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,99,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm1
  .byte  196,65,41,118,210                   // vpcmpeqd      %xmm10,%xmm10,%xmm10
  .byte  196,193,113,254,202                 // vpaddd        %xmm10,%xmm1,%xmm1
  .byte  196,65,57,254,194                   // vpaddd        %xmm10,%xmm8,%xmm8
  .byte  196,227,61,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm8,%ymm1
  .byte  197,180,93,201                      // vminps        %ymm1,%ymm9,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_avx
.globl _sk_repeat_x_avx
FUNCTION(_sk_repeat_x_avx)
_sk_repeat_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,4                  // vbroadcastss  0x4(%rax),%ymm8
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,65,124,92,192                   // vsubps        %ymm8,%ymm0,%ymm8
  .byte  196,99,125,25,200,1                 // vextractf128  $0x1,%ymm9,%xmm0
  .byte  196,65,41,118,210                   // vpcmpeqd      %xmm10,%xmm10,%xmm10
  .byte  196,193,121,254,194                 // vpaddd        %xmm10,%xmm0,%xmm0
  .byte  196,65,49,254,202                   // vpaddd        %xmm10,%xmm9,%xmm9
  .byte  196,227,53,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm9,%ymm0
  .byte  197,188,93,192                      // vminps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_avx
.globl _sk_repeat_y_avx
FUNCTION(_sk_repeat_y_avx)
_sk_repeat_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,4                  // vbroadcastss  0x4(%rax),%ymm8
  .byte  197,60,89,193                       // vmulps        %ymm1,%ymm8,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,65,116,92,192                   // vsubps        %ymm8,%ymm1,%ymm8
  .byte  196,99,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm1
  .byte  196,65,41,118,210                   // vpcmpeqd      %xmm10,%xmm10,%xmm10
  .byte  196,193,113,254,202                 // vpaddd        %xmm10,%xmm1,%xmm1
  .byte  196,65,49,254,202                   // vpaddd        %xmm10,%xmm9,%xmm9
  .byte  196,227,53,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm9,%ymm1
  .byte  197,188,93,201                      // vminps        %ymm1,%ymm8,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_avx
.globl _sk_mirror_x_avx
FUNCTION(_sk_mirror_x_avx)
_sk_mirror_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,0                       // vmovd         (%rax),%xmm8
  .byte  197,122,16,72,4                     // vmovss        0x4(%rax),%xmm9
  .byte  196,65,121,112,208,0                // vpshufd       $0x0,%xmm8,%xmm10
  .byte  196,67,45,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm10,%ymm10
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,193,58,88,192                   // vaddss        %xmm8,%xmm8,%xmm0
  .byte  196,227,121,4,192,0                 // vpermilps     $0x0,%xmm0,%xmm0
  .byte  196,99,125,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm0,%ymm8
  .byte  197,178,89,5,71,22,0,0              // vmulss        0x1647(%rip),%xmm9,%xmm0        # 7630 <_sk_callback_avx+0x4f6>
  .byte  196,227,121,4,192,0                 // vpermilps     $0x0,%xmm0,%xmm0
  .byte  196,227,125,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm0,%ymm0
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  196,227,125,8,192,1                 // vroundps      $0x1,%ymm0,%ymm0
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,164,92,192                      // vsubps        %ymm0,%ymm11,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,60,84,192                       // vandps        %ymm0,%ymm8,%ymm8
  .byte  196,99,125,25,208,1                 // vextractf128  $0x1,%ymm10,%xmm0
  .byte  196,65,49,118,201                   // vpcmpeqd      %xmm9,%xmm9,%xmm9
  .byte  196,193,121,254,193                 // vpaddd        %xmm9,%xmm0,%xmm0
  .byte  196,65,41,254,201                   // vpaddd        %xmm9,%xmm10,%xmm9
  .byte  196,227,53,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm9,%ymm0
  .byte  197,188,93,192                      // vminps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_avx
.globl _sk_mirror_y_avx
FUNCTION(_sk_mirror_y_avx)
_sk_mirror_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,0                       // vmovd         (%rax),%xmm8
  .byte  197,122,16,72,4                     // vmovss        0x4(%rax),%xmm9
  .byte  196,65,121,112,208,0                // vpshufd       $0x0,%xmm8,%xmm10
  .byte  196,67,45,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm10,%ymm10
  .byte  196,65,116,92,218                   // vsubps        %ymm10,%ymm1,%ymm11
  .byte  196,193,58,88,200                   // vaddss        %xmm8,%xmm8,%xmm1
  .byte  196,227,121,4,201,0                 // vpermilps     $0x0,%xmm1,%xmm1
  .byte  196,99,117,24,193,1                 // vinsertf128   $0x1,%xmm1,%ymm1,%ymm8
  .byte  197,178,89,13,194,21,0,0            // vmulss        0x15c2(%rip),%xmm9,%xmm1        # 7634 <_sk_callback_avx+0x4fa>
  .byte  196,227,121,4,201,0                 // vpermilps     $0x0,%xmm1,%xmm1
  .byte  196,227,117,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm1,%ymm1
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  196,227,125,8,201,1                 // vroundps      $0x1,%ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,164,92,201                      // vsubps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,92,202                  // vsubps        %ymm10,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,193                       // vsubps        %ymm1,%ymm8,%ymm8
  .byte  197,60,84,193                       // vandps        %ymm1,%ymm8,%ymm8
  .byte  196,99,125,25,209,1                 // vextractf128  $0x1,%ymm10,%xmm1
  .byte  196,65,49,118,201                   // vpcmpeqd      %xmm9,%xmm9,%xmm9
  .byte  196,193,113,254,201                 // vpaddd        %xmm9,%xmm1,%xmm1
  .byte  196,65,41,254,201                   // vpaddd        %xmm9,%xmm10,%xmm9
  .byte  196,227,53,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm9,%ymm1
  .byte  197,188,93,201                      // vminps        %ymm1,%ymm8,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_1_avx
.globl _sk_clamp_x_1_avx
FUNCTION(_sk_clamp_x_1_avx)
_sk_clamp_x_1_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,96,21,0,0           // vbroadcastss  0x1560(%rip),%ymm8        # 7638 <_sk_callback_avx+0x4fe>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_1_avx
.globl _sk_repeat_x_1_avx
FUNCTION(_sk_repeat_x_1_avx)
_sk_repeat_x_1_avx:
  .byte  196,99,125,8,192,1                  // vroundps      $0x1,%ymm0,%ymm8
  .byte  196,193,124,92,192                  // vsubps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_1_avx
.globl _sk_mirror_x_1_avx
FUNCTION(_sk_mirror_x_1_avx)
_sk_mirror_x_1_avx:
  .byte  196,98,125,24,5,67,21,0,0           // vbroadcastss  0x1543(%rip),%ymm8        # 763c <_sk_callback_avx+0x502>
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,13,57,21,0,0          // vbroadcastss  0x1539(%rip),%ymm9        # 7640 <_sk_callback_avx+0x506>
  .byte  196,65,124,89,201                   // vmulps        %ymm9,%ymm0,%ymm9
  .byte  196,67,125,8,201,1                  // vroundps      $0x1,%ymm9,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,193,124,92,193                  // vsubps        %ymm9,%ymm0,%ymm0
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,188,84,192                      // vandps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_avx
.globl _sk_luminance_to_alpha_avx
FUNCTION(_sk_luminance_to_alpha_avx)
_sk_luminance_to_alpha_avx:
  .byte  196,226,125,24,29,9,21,0,0          // vbroadcastss  0x1509(%rip),%ymm3        # 7644 <_sk_callback_avx+0x50a>
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,29,0,21,0,0          // vbroadcastss  0x1500(%rip),%ymm3        # 7648 <_sk_callback_avx+0x50e>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,243,20,0,0        // vbroadcastss  0x14f3(%rip),%ymm1        # 764c <_sk_callback_avx+0x512>
  .byte  197,236,89,201                      // vmulps        %ymm1,%ymm2,%ymm1
  .byte  197,252,88,217                      // vaddps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_avx
.globl _sk_matrix_2x3_avx
FUNCTION(_sk_matrix_2x3_avx)
_sk_matrix_2x3_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,8                  // vbroadcastss  0x8(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,12                 // vbroadcastss  0xc(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,252,88,201                      // vaddps        %ymm1,%ymm0,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_avx
.globl _sk_matrix_3x4_avx
FUNCTION(_sk_matrix_3x4_avx)
_sk_matrix_3x4_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,98,125,24,88,36                 // vbroadcastss  0x24(%rax),%ymm11
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,28                 // vbroadcastss  0x1c(%rax),%ymm11
  .byte  196,98,125,24,96,40                 // vbroadcastss  0x28(%rax),%ymm12
  .byte  197,36,89,218                       // vmulps        %ymm2,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  196,98,125,24,104,44                // vbroadcastss  0x2c(%rax),%ymm13
  .byte  197,156,89,210                      // vmulps        %ymm2,%ymm12,%ymm2
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  197,252,88,209                      // vaddps        %ymm1,%ymm0,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_avx
.globl _sk_matrix_4x5_avx
FUNCTION(_sk_matrix_4x5_avx)
_sk_matrix_4x5_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,16                 // vbroadcastss  0x10(%rax),%ymm9
  .byte  196,98,125,24,80,32                 // vbroadcastss  0x20(%rax),%ymm10
  .byte  196,98,125,24,88,48                 // vbroadcastss  0x30(%rax),%ymm11
  .byte  196,98,125,24,96,64                 // vbroadcastss  0x40(%rax),%ymm12
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,98,125,24,88,36                 // vbroadcastss  0x24(%rax),%ymm11
  .byte  196,98,125,24,96,52                 // vbroadcastss  0x34(%rax),%ymm12
  .byte  196,98,125,24,104,68                // vbroadcastss  0x44(%rax),%ymm13
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  197,36,89,218                       // vmulps        %ymm2,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,88,24                 // vbroadcastss  0x18(%rax),%ymm11
  .byte  196,98,125,24,96,40                 // vbroadcastss  0x28(%rax),%ymm12
  .byte  196,98,125,24,104,56                // vbroadcastss  0x38(%rax),%ymm13
  .byte  196,98,125,24,112,72                // vbroadcastss  0x48(%rax),%ymm14
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  197,28,89,226                       // vmulps        %ymm2,%ymm12,%ymm12
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  197,36,89,217                       // vmulps        %ymm1,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,208                       // vmulps        %ymm0,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,88,12                 // vbroadcastss  0xc(%rax),%ymm11
  .byte  196,98,125,24,96,28                 // vbroadcastss  0x1c(%rax),%ymm12
  .byte  196,98,125,24,104,44                // vbroadcastss  0x2c(%rax),%ymm13
  .byte  196,98,125,24,112,60                // vbroadcastss  0x3c(%rax),%ymm14
  .byte  196,98,125,24,120,76                // vbroadcastss  0x4c(%rax),%ymm15
  .byte  197,140,89,219                      // vmulps        %ymm3,%ymm14,%ymm3
  .byte  196,193,100,88,223                  // vaddps        %ymm15,%ymm3,%ymm3
  .byte  197,148,89,210                      // vmulps        %ymm2,%ymm13,%ymm2
  .byte  197,236,88,211                      // vaddps        %ymm3,%ymm2,%ymm2
  .byte  197,156,89,201                      // vmulps        %ymm1,%ymm12,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  197,252,88,217                      // vaddps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x3_avx
.globl _sk_matrix_4x3_avx
FUNCTION(_sk_matrix_4x3_avx)
_sk_matrix_4x3_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  196,226,125,24,88,16                // vbroadcastss  0x10(%rax),%ymm3
  .byte  196,98,125,24,64,32                 // vbroadcastss  0x20(%rax),%ymm8
  .byte  197,228,89,217                      // vmulps        %ymm1,%ymm3,%ymm3
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,108,88,195                      // vaddps        %ymm3,%ymm2,%ymm8
  .byte  196,226,125,24,80,4                 // vbroadcastss  0x4(%rax),%ymm2
  .byte  196,226,125,24,88,20                // vbroadcastss  0x14(%rax),%ymm3
  .byte  196,98,125,24,72,36                 // vbroadcastss  0x24(%rax),%ymm9
  .byte  197,228,89,217                      // vmulps        %ymm1,%ymm3,%ymm3
  .byte  196,193,100,88,217                  // vaddps        %ymm9,%ymm3,%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,108,88,203                      // vaddps        %ymm3,%ymm2,%ymm9
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,24                // vbroadcastss  0x18(%rax),%ymm3
  .byte  196,98,125,24,80,40                 // vbroadcastss  0x28(%rax),%ymm10
  .byte  197,228,89,217                      // vmulps        %ymm1,%ymm3,%ymm3
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,236,88,211                      // vaddps        %ymm3,%ymm2,%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  196,98,125,24,80,28                 // vbroadcastss  0x1c(%rax),%ymm10
  .byte  196,98,125,24,88,44                 // vbroadcastss  0x2c(%rax),%ymm11
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  197,228,89,192                      // vmulps        %ymm0,%ymm3,%ymm0
  .byte  197,252,88,217                      // vaddps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_avx
.globl _sk_matrix_perspective_avx
FUNCTION(_sk_matrix_perspective_avx)
_sk_matrix_perspective_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,98,125,24,88,28                 // vbroadcastss  0x1c(%rax),%ymm11
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,204                  // vaddps        %ymm12,%ymm1,%ymm1
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,83,200                      // vrcpps        %ymm0,%ymm1
  .byte  197,188,89,193                      // vmulps        %ymm1,%ymm8,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_gradient_avx
.globl _sk_evenly_spaced_gradient_avx
FUNCTION(_sk_evenly_spaced_gradient_avx)
_sk_evenly_spaced_gradient_avx:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  197,252,17,124,36,216               // vmovups       %ymm7,-0x28(%rsp)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  72,139,104,8                        // mov           0x8(%rax),%rbp
  .byte  72,255,203                          // dec           %rbx
  .byte  120,7                               // js            64b5 <_sk_evenly_spaced_gradient_avx+0x25>
  .byte  196,225,242,42,203                  // vcvtsi2ss     %rbx,%xmm1,%xmm1
  .byte  235,21                              // jmp           64ca <_sk_evenly_spaced_gradient_avx+0x3a>
  .byte  73,137,217                          // mov           %rbx,%r9
  .byte  73,209,233                          // shr           %r9
  .byte  131,227,1                           // and           $0x1,%ebx
  .byte  76,9,203                            // or            %r9,%rbx
  .byte  196,225,242,42,203                  // vcvtsi2ss     %rbx,%xmm1,%xmm1
  .byte  197,242,88,201                      // vaddss        %xmm1,%xmm1,%xmm1
  .byte  196,227,121,4,201,0                 // vpermilps     $0x0,%xmm1,%xmm1
  .byte  196,227,117,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm1,%ymm1
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,195,249,22,201,1                // vpextrq       $0x1,%xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,193,249,126,203                 // vmovq         %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,195,249,22,204,1                // vpextrq       $0x1,%xmm1,%r12
  .byte  69,137,231                          // mov           %r12d,%r15d
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,225,249,126,203                 // vmovq         %xmm1,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,227,113,33,76,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm1
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,33,122,16,68,165,0              // vmovss        0x0(%rbp,%r12,4),%xmm8
  .byte  196,161,122,16,92,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm3
  .byte  196,35,97,33,76,157,0,16            // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm3,%xmm9
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,33,122,16,92,141,0              // vmovss        0x0(%rbp,%r9,4),%xmm11
  .byte  196,99,113,33,226,32                // vinsertps     $0x20,%xmm2,%xmm1,%xmm12
  .byte  72,139,104,40                       // mov           0x28(%rax),%rbp
  .byte  196,161,122,16,84,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm2
  .byte  196,99,105,33,108,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm2,%xmm13
  .byte  196,161,122,16,92,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm3
  .byte  196,161,122,16,76,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm1
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,35,105,33,116,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm14
  .byte  196,33,122,16,124,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm15
  .byte  196,33,122,16,84,141,0              // vmovss        0x0(%rbp,%r9,4),%xmm10
  .byte  196,67,25,33,192,48                 // vinsertps     $0x30,%xmm8,%xmm12,%xmm8
  .byte  196,227,49,33,215,32                // vinsertps     $0x20,%xmm7,%xmm9,%xmm2
  .byte  196,195,105,33,211,48               // vinsertps     $0x30,%xmm11,%xmm2,%xmm2
  .byte  196,67,109,24,192,1                 // vinsertf128   $0x1,%xmm8,%ymm2,%ymm8
  .byte  196,227,17,33,211,32                // vinsertps     $0x20,%xmm3,%xmm13,%xmm2
  .byte  196,99,105,33,201,48                // vinsertps     $0x30,%xmm1,%xmm2,%xmm9
  .byte  72,139,104,16                       // mov           0x10(%rax),%rbp
  .byte  196,161,122,16,84,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm2
  .byte  196,99,105,33,92,157,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm2,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,161,122,16,76,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm1
  .byte  196,161,122,16,124,181,0            // vmovss        0x0(%rbp,%r14,4),%xmm7
  .byte  196,163,65,33,124,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm7,%xmm7
  .byte  196,161,122,16,92,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm3
  .byte  196,33,122,16,108,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm13
  .byte  196,195,9,33,215,32                 // vinsertps     $0x20,%xmm15,%xmm14,%xmm2
  .byte  196,195,105,33,210,48               // vinsertps     $0x30,%xmm10,%xmm2,%xmm2
  .byte  196,67,109,24,241,1                 // vinsertf128   $0x1,%xmm9,%ymm2,%ymm14
  .byte  196,195,33,33,212,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm2
  .byte  196,99,105,33,201,48                // vinsertps     $0x30,%xmm1,%xmm2,%xmm9
  .byte  196,99,65,33,211,32                 // vinsertps     $0x20,%xmm3,%xmm7,%xmm10
  .byte  72,139,104,48                       // mov           0x30(%rax),%rbp
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,99,97,33,92,157,0,16            // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm3,%xmm11
  .byte  196,33,122,16,124,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm15
  .byte  196,33,122,16,100,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm12
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,163,105,33,84,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm2
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,161,122,16,92,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm3
  .byte  196,67,41,33,213,48                 // vinsertps     $0x30,%xmm13,%xmm10,%xmm10
  .byte  196,67,45,24,233,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm13
  .byte  196,195,33,33,207,32                // vinsertps     $0x20,%xmm15,%xmm11,%xmm1
  .byte  196,67,113,33,204,48                // vinsertps     $0x30,%xmm12,%xmm1,%xmm9
  .byte  196,227,105,33,215,32               // vinsertps     $0x20,%xmm7,%xmm2,%xmm2
  .byte  196,99,105,33,211,48                // vinsertps     $0x30,%xmm3,%xmm2,%xmm10
  .byte  72,139,104,24                       // mov           0x18(%rax),%rbp
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,99,97,33,92,157,0,16            // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm3,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,33,122,16,124,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm15
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,163,105,33,84,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm2
  .byte  196,161,122,16,92,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm3
  .byte  196,161,122,16,124,141,0            // vmovss        0x0(%rbp,%r9,4),%xmm7
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,195,33,33,204,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm1
  .byte  196,195,113,33,207,48               // vinsertps     $0x30,%xmm15,%xmm1,%xmm1
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,227,105,33,215,48               // vinsertps     $0x30,%xmm7,%xmm2,%xmm2
  .byte  196,99,109,24,209,1                 // vinsertf128   $0x1,%xmm1,%ymm2,%ymm10
  .byte  72,139,104,56                       // mov           0x38(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,99,113,33,92,157,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,33,122,16,124,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm15
  .byte  196,161,122,16,124,181,0            // vmovss        0x0(%rbp,%r14,4),%xmm7
  .byte  196,163,65,33,124,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm7,%xmm7
  .byte  196,161,122,16,76,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm1
  .byte  196,161,122,16,84,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm2
  .byte  196,195,33,33,220,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm3
  .byte  196,195,97,33,223,48                // vinsertps     $0x30,%xmm15,%xmm3,%xmm3
  .byte  196,227,65,33,201,32                // vinsertps     $0x20,%xmm1,%xmm7,%xmm1
  .byte  196,227,113,33,202,48               // vinsertps     $0x30,%xmm2,%xmm1,%xmm1
  .byte  196,99,117,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm1,%ymm11
  .byte  72,139,104,32                       // mov           0x20(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,227,113,33,76,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm1
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,227,113,33,202,32               // vinsertps     $0x20,%xmm2,%xmm1,%xmm1
  .byte  196,161,122,16,84,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm2
  .byte  196,161,122,16,92,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm3
  .byte  196,35,97,33,100,157,0,16           // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm3,%xmm12
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,161,122,16,92,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm3
  .byte  196,99,113,33,250,48                // vinsertps     $0x30,%xmm2,%xmm1,%xmm15
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,161,122,16,20,168               // vmovss        (%rax,%r13,4),%xmm2
  .byte  196,227,105,33,20,152,16            // vinsertps     $0x10,(%rax,%rbx,4),%xmm2,%xmm2
  .byte  196,227,25,33,255,32                // vinsertps     $0x20,%xmm7,%xmm12,%xmm7
  .byte  196,161,122,16,12,184               // vmovss        (%rax,%r15,4),%xmm1
  .byte  196,227,65,33,219,48                // vinsertps     $0x30,%xmm3,%xmm7,%xmm3
  .byte  196,161,122,16,60,160               // vmovss        (%rax,%r12,4),%xmm7
  .byte  196,67,101,24,231,1                 // vinsertf128   $0x1,%xmm15,%ymm3,%ymm12
  .byte  196,161,122,16,28,176               // vmovss        (%rax,%r14,4),%xmm3
  .byte  196,163,97,33,28,152,16             // vinsertps     $0x10,(%rax,%r11,4),%xmm3,%xmm3
  .byte  196,227,105,33,201,32               // vinsertps     $0x20,%xmm1,%xmm2,%xmm1
  .byte  196,161,122,16,20,144               // vmovss        (%rax,%r10,4),%xmm2
  .byte  196,227,113,33,207,48               // vinsertps     $0x30,%xmm7,%xmm1,%xmm1
  .byte  196,161,122,16,60,136               // vmovss        (%rax,%r9,4),%xmm7
  .byte  196,227,97,33,210,32                // vinsertps     $0x20,%xmm2,%xmm3,%xmm2
  .byte  196,227,105,33,215,48               // vinsertps     $0x30,%xmm7,%xmm2,%xmm2
  .byte  196,227,109,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm2,%ymm3
  .byte  197,188,89,200                      // vmulps        %ymm0,%ymm8,%ymm1
  .byte  196,65,116,88,198                   // vaddps        %ymm14,%ymm1,%ymm8
  .byte  197,148,89,200                      // vmulps        %ymm0,%ymm13,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,208                      // vmulps        %ymm0,%ymm10,%ymm2
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,252,88,219                      // vaddps        %ymm3,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,16,124,36,216               // vmovups       -0x28(%rsp),%ymm7
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gauss_a_to_rgba_avx
.globl _sk_gauss_a_to_rgba_avx
FUNCTION(_sk_gauss_a_to_rgba_avx)
_sk_gauss_a_to_rgba_avx:
  .byte  196,226,125,24,5,34,14,0,0          // vbroadcastss  0xe22(%rip),%ymm0        # 7650 <_sk_callback_avx+0x516>
  .byte  197,228,89,192                      // vmulps        %ymm0,%ymm3,%ymm0
  .byte  196,226,125,24,13,25,14,0,0         // vbroadcastss  0xe19(%rip),%ymm1        # 7654 <_sk_callback_avx+0x51a>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,13,12,14,0,0         // vbroadcastss  0xe0c(%rip),%ymm1        # 7658 <_sk_callback_avx+0x51e>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,13,255,13,0,0        // vbroadcastss  0xdff(%rip),%ymm1        # 765c <_sk_callback_avx+0x522>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,13,242,13,0,0        // vbroadcastss  0xdf2(%rip),%ymm1        # 7660 <_sk_callback_avx+0x526>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,252,40,216                      // vmovaps       %ymm0,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_avx
.globl _sk_gradient_avx
FUNCTION(_sk_gradient_avx)
_sk_gradient_avx:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  197,252,17,124,36,216               // vmovups       %ymm7,-0x28(%rsp)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  73,131,249,2                        // cmp           $0x2,%r9
  .byte  114,80                              // jb            68f1 <_sk_gradient_avx+0x6f>
  .byte  72,139,88,72                        // mov           0x48(%rax),%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  196,98,125,24,21,170,13,0,0         // vbroadcastss  0xdaa(%rip),%ymm10        # 7664 <_sk_callback_avx+0x52a>
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  196,98,125,24,3                     // vbroadcastss  (%rbx),%ymm8
  .byte  197,60,194,192,2                    // vcmpleps      %ymm0,%ymm8,%ymm8
  .byte  196,67,53,74,194,128                // vblendvps     %ymm8,%ymm10,%ymm9,%ymm8
  .byte  196,99,125,25,194,1                 // vextractf128  $0x1,%ymm8,%xmm2
  .byte  196,227,125,25,203,1                // vextractf128  $0x1,%ymm1,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,185,254,201                     // vpaddd        %xmm1,%xmm8,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  117,205                             // jne           68be <_sk_gradient_avx+0x3c>
  .byte  196,195,249,22,201,1                // vpextrq       $0x1,%xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,193,249,126,203                 // vmovq         %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,195,249,22,204,1                // vpextrq       $0x1,%xmm1,%r12
  .byte  69,137,231                          // mov           %r12d,%r15d
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,225,249,126,203                 // vmovq         %xmm1,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  72,139,104,8                        // mov           0x8(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,227,113,33,76,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm1
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,33,122,16,68,165,0              // vmovss        0x0(%rbp,%r12,4),%xmm8
  .byte  196,161,122,16,92,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm3
  .byte  196,35,97,33,76,157,0,16            // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm3,%xmm9
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,33,122,16,92,141,0              // vmovss        0x0(%rbp,%r9,4),%xmm11
  .byte  196,99,113,33,226,32                // vinsertps     $0x20,%xmm2,%xmm1,%xmm12
  .byte  72,139,104,40                       // mov           0x28(%rax),%rbp
  .byte  196,161,122,16,84,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm2
  .byte  196,99,105,33,108,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm2,%xmm13
  .byte  196,161,122,16,92,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm3
  .byte  196,161,122,16,76,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm1
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,35,105,33,116,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm14
  .byte  196,33,122,16,124,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm15
  .byte  196,33,122,16,84,141,0              // vmovss        0x0(%rbp,%r9,4),%xmm10
  .byte  196,67,25,33,192,48                 // vinsertps     $0x30,%xmm8,%xmm12,%xmm8
  .byte  196,227,49,33,215,32                // vinsertps     $0x20,%xmm7,%xmm9,%xmm2
  .byte  196,195,105,33,211,48               // vinsertps     $0x30,%xmm11,%xmm2,%xmm2
  .byte  196,67,109,24,192,1                 // vinsertf128   $0x1,%xmm8,%ymm2,%ymm8
  .byte  196,227,17,33,211,32                // vinsertps     $0x20,%xmm3,%xmm13,%xmm2
  .byte  196,99,105,33,201,48                // vinsertps     $0x30,%xmm1,%xmm2,%xmm9
  .byte  72,139,104,16                       // mov           0x10(%rax),%rbp
  .byte  196,161,122,16,84,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm2
  .byte  196,99,105,33,92,157,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm2,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,161,122,16,76,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm1
  .byte  196,161,122,16,124,181,0            // vmovss        0x0(%rbp,%r14,4),%xmm7
  .byte  196,163,65,33,124,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm7,%xmm7
  .byte  196,161,122,16,92,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm3
  .byte  196,33,122,16,108,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm13
  .byte  196,195,9,33,215,32                 // vinsertps     $0x20,%xmm15,%xmm14,%xmm2
  .byte  196,195,105,33,210,48               // vinsertps     $0x30,%xmm10,%xmm2,%xmm2
  .byte  196,67,109,24,241,1                 // vinsertf128   $0x1,%xmm9,%ymm2,%ymm14
  .byte  196,195,33,33,212,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm2
  .byte  196,99,105,33,201,48                // vinsertps     $0x30,%xmm1,%xmm2,%xmm9
  .byte  196,99,65,33,211,32                 // vinsertps     $0x20,%xmm3,%xmm7,%xmm10
  .byte  72,139,104,48                       // mov           0x30(%rax),%rbp
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,99,97,33,92,157,0,16            // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm3,%xmm11
  .byte  196,33,122,16,124,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm15
  .byte  196,33,122,16,100,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm12
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,163,105,33,84,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm2
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,161,122,16,92,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm3
  .byte  196,67,41,33,213,48                 // vinsertps     $0x30,%xmm13,%xmm10,%xmm10
  .byte  196,67,45,24,233,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm13
  .byte  196,195,33,33,207,32                // vinsertps     $0x20,%xmm15,%xmm11,%xmm1
  .byte  196,67,113,33,204,48                // vinsertps     $0x30,%xmm12,%xmm1,%xmm9
  .byte  196,227,105,33,215,32               // vinsertps     $0x20,%xmm7,%xmm2,%xmm2
  .byte  196,99,105,33,211,48                // vinsertps     $0x30,%xmm3,%xmm2,%xmm10
  .byte  72,139,104,24                       // mov           0x18(%rax),%rbp
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,99,97,33,92,157,0,16            // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm3,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,33,122,16,124,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm15
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,163,105,33,84,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm2
  .byte  196,161,122,16,92,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm3
  .byte  196,161,122,16,124,141,0            // vmovss        0x0(%rbp,%r9,4),%xmm7
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,195,33,33,204,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm1
  .byte  196,195,113,33,207,48               // vinsertps     $0x30,%xmm15,%xmm1,%xmm1
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,227,105,33,215,48               // vinsertps     $0x30,%xmm7,%xmm2,%xmm2
  .byte  196,99,109,24,209,1                 // vinsertf128   $0x1,%xmm1,%ymm2,%ymm10
  .byte  72,139,104,56                       // mov           0x38(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,99,113,33,92,157,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,33,122,16,124,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm15
  .byte  196,161,122,16,124,181,0            // vmovss        0x0(%rbp,%r14,4),%xmm7
  .byte  196,163,65,33,124,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm7,%xmm7
  .byte  196,161,122,16,76,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm1
  .byte  196,161,122,16,84,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm2
  .byte  196,195,33,33,220,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm3
  .byte  196,195,97,33,223,48                // vinsertps     $0x30,%xmm15,%xmm3,%xmm3
  .byte  196,227,65,33,201,32                // vinsertps     $0x20,%xmm1,%xmm7,%xmm1
  .byte  196,227,113,33,202,48               // vinsertps     $0x30,%xmm2,%xmm1,%xmm1
  .byte  196,99,117,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm1,%ymm11
  .byte  72,139,104,32                       // mov           0x20(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,227,113,33,76,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm1
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,227,113,33,202,32               // vinsertps     $0x20,%xmm2,%xmm1,%xmm1
  .byte  196,161,122,16,84,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm2
  .byte  196,161,122,16,92,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm3
  .byte  196,35,97,33,100,157,0,16           // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm3,%xmm12
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,161,122,16,92,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm3
  .byte  196,99,113,33,250,48                // vinsertps     $0x30,%xmm2,%xmm1,%xmm15
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,161,122,16,20,168               // vmovss        (%rax,%r13,4),%xmm2
  .byte  196,227,105,33,20,152,16            // vinsertps     $0x10,(%rax,%rbx,4),%xmm2,%xmm2
  .byte  196,227,25,33,255,32                // vinsertps     $0x20,%xmm7,%xmm12,%xmm7
  .byte  196,161,122,16,12,184               // vmovss        (%rax,%r15,4),%xmm1
  .byte  196,227,65,33,219,48                // vinsertps     $0x30,%xmm3,%xmm7,%xmm3
  .byte  196,161,122,16,60,160               // vmovss        (%rax,%r12,4),%xmm7
  .byte  196,67,101,24,231,1                 // vinsertf128   $0x1,%xmm15,%ymm3,%ymm12
  .byte  196,161,122,16,28,176               // vmovss        (%rax,%r14,4),%xmm3
  .byte  196,163,97,33,28,152,16             // vinsertps     $0x10,(%rax,%r11,4),%xmm3,%xmm3
  .byte  196,227,105,33,201,32               // vinsertps     $0x20,%xmm1,%xmm2,%xmm1
  .byte  196,161,122,16,20,144               // vmovss        (%rax,%r10,4),%xmm2
  .byte  196,227,113,33,207,48               // vinsertps     $0x30,%xmm7,%xmm1,%xmm1
  .byte  196,161,122,16,60,136               // vmovss        (%rax,%r9,4),%xmm7
  .byte  196,227,97,33,210,32                // vinsertps     $0x20,%xmm2,%xmm3,%xmm2
  .byte  196,227,105,33,215,48               // vinsertps     $0x30,%xmm7,%xmm2,%xmm2
  .byte  196,227,109,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm2,%ymm3
  .byte  197,188,89,200                      // vmulps        %ymm0,%ymm8,%ymm1
  .byte  196,65,116,88,198                   // vaddps        %ymm14,%ymm1,%ymm8
  .byte  197,148,89,200                      // vmulps        %ymm0,%ymm13,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,208                      // vmulps        %ymm0,%ymm10,%ymm2
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,252,88,219                      // vaddps        %ymm3,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,16,124,36,216               // vmovups       -0x28(%rsp),%ymm7
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_avx
.globl _sk_evenly_spaced_2_stop_gradient_avx
FUNCTION(_sk_evenly_spaced_2_stop_gradient_avx)
_sk_evenly_spaced_2_stop_gradient_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,226,125,24,80,16                // vbroadcastss  0x10(%rax),%ymm2
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,116,88,194                      // vaddps        %ymm2,%ymm1,%ymm8
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,20                // vbroadcastss  0x14(%rax),%ymm2
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,24                // vbroadcastss  0x18(%rax),%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,236,88,211                      // vaddps        %ymm3,%ymm2,%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  196,98,125,24,72,28                 // vbroadcastss  0x1c(%rax),%ymm9
  .byte  197,228,89,192                      // vmulps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,88,217                  // vaddps        %ymm9,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_avx
.globl _sk_xy_to_unit_angle_avx
FUNCTION(_sk_xy_to_unit_angle_avx)
_sk_xy_to_unit_angle_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,200                       // vsubps        %ymm0,%ymm8,%ymm9
  .byte  197,52,84,200                       // vandps        %ymm0,%ymm9,%ymm9
  .byte  197,60,92,209                       // vsubps        %ymm1,%ymm8,%ymm10
  .byte  197,44,84,209                       // vandps        %ymm1,%ymm10,%ymm10
  .byte  196,65,52,93,218                    // vminps        %ymm10,%ymm9,%ymm11
  .byte  196,65,52,95,226                    // vmaxps        %ymm10,%ymm9,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  196,65,36,89,227                    // vmulps        %ymm11,%ymm11,%ymm12
  .byte  196,98,125,24,45,160,9,0,0          // vbroadcastss  0x9a0(%rip),%ymm13        # 7668 <_sk_callback_avx+0x52e>
  .byte  196,65,28,89,237                    // vmulps        %ymm13,%ymm12,%ymm13
  .byte  196,98,125,24,53,150,9,0,0          // vbroadcastss  0x996(%rip),%ymm14        # 766c <_sk_callback_avx+0x532>
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  196,65,28,89,237                    // vmulps        %ymm13,%ymm12,%ymm13
  .byte  196,98,125,24,53,135,9,0,0          // vbroadcastss  0x987(%rip),%ymm14        # 7670 <_sk_callback_avx+0x536>
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  196,65,28,89,229                    // vmulps        %ymm13,%ymm12,%ymm12
  .byte  196,98,125,24,45,120,9,0,0          // vbroadcastss  0x978(%rip),%ymm13        # 7674 <_sk_callback_avx+0x53a>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,65,52,194,202,1                 // vcmpltps      %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,99,9,0,0           // vbroadcastss  0x963(%rip),%ymm10        # 7678 <_sk_callback_avx+0x53e>
  .byte  196,65,44,92,211                    // vsubps        %ymm11,%ymm10,%ymm10
  .byte  196,67,37,74,202,144                // vblendvps     %ymm9,%ymm10,%ymm11,%ymm9
  .byte  196,193,124,194,192,1               // vcmpltps      %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,21,77,9,0,0           // vbroadcastss  0x94d(%rip),%ymm10        # 767c <_sk_callback_avx+0x542>
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  196,65,116,194,200,1                // vcmpltps      %ymm8,%ymm1,%ymm9
  .byte  196,98,125,24,21,55,9,0,0           // vbroadcastss  0x937(%rip),%ymm10        # 7680 <_sk_callback_avx+0x546>
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  196,195,125,74,194,144              // vblendvps     %ymm9,%ymm10,%ymm0,%ymm0
  .byte  196,65,124,194,200,3                // vcmpunordps   %ymm8,%ymm0,%ymm9
  .byte  196,195,125,74,192,144              // vblendvps     %ymm9,%ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_avx
.globl _sk_xy_to_radius_avx
FUNCTION(_sk_xy_to_radius_avx)
_sk_xy_to_radius_avx:
  .byte  197,252,89,192                      // vmulps        %ymm0,%ymm0,%ymm0
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  197,252,81,192                      // vsqrtps       %ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_avx
.globl _sk_save_xy_avx
FUNCTION(_sk_save_xy_avx)
_sk_save_xy_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,1,9,0,0             // vbroadcastss  0x901(%rip),%ymm8        # 7684 <_sk_callback_avx+0x54a>
  .byte  196,65,124,88,200                   // vaddps        %ymm8,%ymm0,%ymm9
  .byte  196,67,125,8,209,1                  // vroundps      $0x1,%ymm9,%ymm10
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,88,192                   // vaddps        %ymm8,%ymm1,%ymm8
  .byte  196,67,125,8,208,1                  // vroundps      $0x1,%ymm8,%ymm10
  .byte  196,65,60,92,194                    // vsubps        %ymm10,%ymm8,%ymm8
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,124,17,72,64                    // vmovups       %ymm9,0x40(%rax)
  .byte  197,124,17,64,96                    // vmovups       %ymm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_avx
.globl _sk_accumulate_avx
FUNCTION(_sk_accumulate_avx)
_sk_accumulate_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,16,128,128,0,0,0            // vmovups       0x80(%rax),%ymm8
  .byte  197,60,89,128,160,0,0,0             // vmulps        0xa0(%rax),%ymm8,%ymm8
  .byte  197,60,89,200                       // vmulps        %ymm0,%ymm8,%ymm9
  .byte  197,180,88,228                      // vaddps        %ymm4,%ymm9,%ymm4
  .byte  197,60,89,201                       // vmulps        %ymm1,%ymm8,%ymm9
  .byte  197,180,88,237                      // vaddps        %ymm5,%ymm9,%ymm5
  .byte  197,60,89,202                       // vmulps        %ymm2,%ymm8,%ymm9
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  197,60,89,195                       // vmulps        %ymm3,%ymm8,%ymm8
  .byte  197,188,88,255                      // vaddps        %ymm7,%ymm8,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_avx
.globl _sk_bilinear_nx_avx
FUNCTION(_sk_bilinear_nx_avx)
_sk_bilinear_nx_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,141,8,0,0          // vbroadcastss  0x88d(%rip),%ymm0        # 7688 <_sk_callback_avx+0x54e>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,132,8,0,0           // vbroadcastss  0x884(%rip),%ymm8        # 768c <_sk_callback_avx+0x552>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_avx
.globl _sk_bilinear_px_avx
FUNCTION(_sk_bilinear_px_avx)
_sk_bilinear_px_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,108,8,0,0          // vbroadcastss  0x86c(%rip),%ymm0        # 7690 <_sk_callback_avx+0x556>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_avx
.globl _sk_bilinear_ny_avx
FUNCTION(_sk_bilinear_ny_avx)
_sk_bilinear_ny_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,80,8,0,0          // vbroadcastss  0x850(%rip),%ymm1        # 7694 <_sk_callback_avx+0x55a>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,70,8,0,0            // vbroadcastss  0x846(%rip),%ymm8        # 7698 <_sk_callback_avx+0x55e>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_avx
.globl _sk_bilinear_py_avx
FUNCTION(_sk_bilinear_py_avx)
_sk_bilinear_py_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,46,8,0,0          // vbroadcastss  0x82e(%rip),%ymm1        # 769c <_sk_callback_avx+0x562>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_avx
.globl _sk_bicubic_n3x_avx
FUNCTION(_sk_bicubic_n3x_avx)
_sk_bicubic_n3x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,17,8,0,0           // vbroadcastss  0x811(%rip),%ymm0        # 76a0 <_sk_callback_avx+0x566>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,8,8,0,0             // vbroadcastss  0x808(%rip),%ymm8        # 76a4 <_sk_callback_avx+0x56a>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,249,7,0,0          // vbroadcastss  0x7f9(%rip),%ymm10        # 76a8 <_sk_callback_avx+0x56e>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,239,7,0,0          // vbroadcastss  0x7ef(%rip),%ymm10        # 76ac <_sk_callback_avx+0x572>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_avx
.globl _sk_bicubic_n1x_avx
FUNCTION(_sk_bicubic_n1x_avx)
_sk_bicubic_n1x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,210,7,0,0          // vbroadcastss  0x7d2(%rip),%ymm0        # 76b0 <_sk_callback_avx+0x576>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,201,7,0,0           // vbroadcastss  0x7c9(%rip),%ymm8        # 76b4 <_sk_callback_avx+0x57a>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,191,7,0,0          // vbroadcastss  0x7bf(%rip),%ymm9        # 76b8 <_sk_callback_avx+0x57e>
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,181,7,0,0          // vbroadcastss  0x7b5(%rip),%ymm10        # 76bc <_sk_callback_avx+0x582>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,166,7,0,0          // vbroadcastss  0x7a6(%rip),%ymm10        # 76c0 <_sk_callback_avx+0x586>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,151,7,0,0          // vbroadcastss  0x797(%rip),%ymm9        # 76c4 <_sk_callback_avx+0x58a>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_avx
.globl _sk_bicubic_p1x_avx
FUNCTION(_sk_bicubic_p1x_avx)
_sk_bicubic_p1x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,127,7,0,0           // vbroadcastss  0x77f(%rip),%ymm8        # 76c8 <_sk_callback_avx+0x58e>
  .byte  197,188,88,0                        // vaddps        (%rax),%ymm8,%ymm0
  .byte  197,124,16,72,64                    // vmovups       0x40(%rax),%ymm9
  .byte  196,98,125,24,21,113,7,0,0          // vbroadcastss  0x771(%rip),%ymm10        # 76cc <_sk_callback_avx+0x592>
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,98,125,24,29,103,7,0,0          // vbroadcastss  0x767(%rip),%ymm11        # 76d0 <_sk_callback_avx+0x596>
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,192                    // vaddps        %ymm8,%ymm10,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  196,98,125,24,13,78,7,0,0           // vbroadcastss  0x74e(%rip),%ymm9        # 76d4 <_sk_callback_avx+0x59a>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_avx
.globl _sk_bicubic_p3x_avx
FUNCTION(_sk_bicubic_p3x_avx)
_sk_bicubic_p3x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,54,7,0,0           // vbroadcastss  0x736(%rip),%ymm0        # 76d8 <_sk_callback_avx+0x59e>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,35,7,0,0           // vbroadcastss  0x723(%rip),%ymm10        # 76dc <_sk_callback_avx+0x5a2>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,25,7,0,0           // vbroadcastss  0x719(%rip),%ymm10        # 76e0 <_sk_callback_avx+0x5a6>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_avx
.globl _sk_bicubic_n3y_avx
FUNCTION(_sk_bicubic_n3y_avx)
_sk_bicubic_n3y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,252,6,0,0         // vbroadcastss  0x6fc(%rip),%ymm1        # 76e4 <_sk_callback_avx+0x5aa>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,242,6,0,0           // vbroadcastss  0x6f2(%rip),%ymm8        # 76e8 <_sk_callback_avx+0x5ae>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,227,6,0,0          // vbroadcastss  0x6e3(%rip),%ymm10        # 76ec <_sk_callback_avx+0x5b2>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,217,6,0,0          // vbroadcastss  0x6d9(%rip),%ymm10        # 76f0 <_sk_callback_avx+0x5b6>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_avx
.globl _sk_bicubic_n1y_avx
FUNCTION(_sk_bicubic_n1y_avx)
_sk_bicubic_n1y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,188,6,0,0         // vbroadcastss  0x6bc(%rip),%ymm1        # 76f4 <_sk_callback_avx+0x5ba>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,178,6,0,0           // vbroadcastss  0x6b2(%rip),%ymm8        # 76f8 <_sk_callback_avx+0x5be>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,168,6,0,0          // vbroadcastss  0x6a8(%rip),%ymm9        # 76fc <_sk_callback_avx+0x5c2>
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,158,6,0,0          // vbroadcastss  0x69e(%rip),%ymm10        # 7700 <_sk_callback_avx+0x5c6>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,143,6,0,0          // vbroadcastss  0x68f(%rip),%ymm10        # 7704 <_sk_callback_avx+0x5ca>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,128,6,0,0          // vbroadcastss  0x680(%rip),%ymm9        # 7708 <_sk_callback_avx+0x5ce>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_avx
.globl _sk_bicubic_p1y_avx
FUNCTION(_sk_bicubic_p1y_avx)
_sk_bicubic_p1y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,104,6,0,0           // vbroadcastss  0x668(%rip),%ymm8        # 770c <_sk_callback_avx+0x5d2>
  .byte  197,188,88,72,32                    // vaddps        0x20(%rax),%ymm8,%ymm1
  .byte  197,124,16,72,96                    // vmovups       0x60(%rax),%ymm9
  .byte  196,98,125,24,21,89,6,0,0           // vbroadcastss  0x659(%rip),%ymm10        # 7710 <_sk_callback_avx+0x5d6>
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,98,125,24,29,79,6,0,0           // vbroadcastss  0x64f(%rip),%ymm11        # 7714 <_sk_callback_avx+0x5da>
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,192                    // vaddps        %ymm8,%ymm10,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  196,98,125,24,13,54,6,0,0           // vbroadcastss  0x636(%rip),%ymm9        # 7718 <_sk_callback_avx+0x5de>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_avx
.globl _sk_bicubic_p3y_avx
FUNCTION(_sk_bicubic_p3y_avx)
_sk_bicubic_p3y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,30,6,0,0          // vbroadcastss  0x61e(%rip),%ymm1        # 771c <_sk_callback_avx+0x5e2>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,10,6,0,0           // vbroadcastss  0x60a(%rip),%ymm10        # 7720 <_sk_callback_avx+0x5e6>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,0,6,0,0            // vbroadcastss  0x600(%rip),%ymm10        # 7724 <_sk_callback_avx+0x5ea>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_avx
.globl _sk_callback_avx
FUNCTION(_sk_callback_avx)
_sk_callback_avx:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,228,224                      // and           $0xffffffffffffffe0,%rsp
  .byte  72,129,236,192,0,0,0                // sub           $0xc0,%rsp
  .byte  197,252,41,188,36,128,0,0,0         // vmovaps       %ymm7,0x80(%rsp)
  .byte  197,252,41,116,36,96                // vmovaps       %ymm6,0x60(%rsp)
  .byte  197,252,41,108,36,64                // vmovaps       %ymm5,0x40(%rsp)
  .byte  197,252,41,100,36,32                // vmovaps       %ymm4,0x20(%rsp)
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  72,137,76,36,24                     // mov           %rcx,0x18(%rsp)
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,252                          // mov           %rdi,%r12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,193                      // vunpckhps     %ymm1,%ymm0,%ymm0
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,211                      // vunpckhps     %ymm3,%ymm2,%ymm2
  .byte  197,221,20,217                      // vunpcklpd     %ymm1,%ymm4,%ymm3
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,253,20,226                      // vunpcklpd     %ymm2,%ymm0,%ymm4
  .byte  197,253,21,194                      // vunpckhpd     %ymm2,%ymm0,%ymm0
  .byte  196,227,101,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm2
  .byte  196,227,93,24,232,1                 // vinsertf128   $0x1,%xmm0,%ymm4,%ymm5
  .byte  196,227,101,6,201,49                // vperm2f128    $0x31,%ymm1,%ymm3,%ymm1
  .byte  196,227,93,6,192,49                 // vperm2f128    $0x31,%ymm0,%ymm4,%ymm0
  .byte  196,193,125,17,86,8                 // vmovupd       %ymm2,0x8(%r14)
  .byte  196,193,125,17,110,40               // vmovupd       %ymm5,0x28(%r14)
  .byte  196,193,125,17,78,72                // vmovupd       %ymm1,0x48(%r14)
  .byte  196,193,125,17,70,104               // vmovupd       %ymm0,0x68(%r14)
  .byte  72,133,219                          // test          %rbx,%rbx
  .byte  190,8,0,0,0                         // mov           $0x8,%esi
  .byte  15,69,243                           // cmovne        %ebx,%esi
  .byte  76,137,247                          // mov           %r14,%rdi
  .byte  197,248,119                         // vzeroupper
  .byte  65,255,22                           // callq         *(%r14)
  .byte  73,139,134,136,0,0,0                // mov           0x88(%r14),%rax
  .byte  197,248,16,0                        // vmovups       (%rax),%xmm0
  .byte  197,248,16,72,16                    // vmovups       0x10(%rax),%xmm1
  .byte  197,248,16,80,32                    // vmovups       0x20(%rax),%xmm2
  .byte  197,248,16,88,48                    // vmovups       0x30(%rax),%xmm3
  .byte  196,227,101,24,88,112,1             // vinsertf128   $0x1,0x70(%rax),%ymm3,%ymm3
  .byte  196,227,109,24,80,96,1              // vinsertf128   $0x1,0x60(%rax),%ymm2,%ymm2
  .byte  196,227,117,24,72,80,1              // vinsertf128   $0x1,0x50(%rax),%ymm1,%ymm1
  .byte  196,227,125,24,64,64,1              // vinsertf128   $0x1,0x40(%rax),%ymm0,%ymm0
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,233                      // vunpckhps     %ymm1,%ymm0,%ymm5
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,219                      // vunpckhps     %ymm3,%ymm2,%ymm3
  .byte  197,221,20,193                      // vunpcklpd     %ymm1,%ymm4,%ymm0
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,213,20,211                      // vunpcklpd     %ymm3,%ymm5,%ymm2
  .byte  197,213,21,219                      // vunpckhpd     %ymm3,%ymm5,%ymm3
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,250                          // mov           %r15,%rdx
  .byte  72,139,76,36,24                     // mov           0x18(%rsp),%rcx
  .byte  73,137,216                          // mov           %rbx,%r8
  .byte  197,252,40,100,36,32                // vmovaps       0x20(%rsp),%ymm4
  .byte  197,252,40,108,36,64                // vmovaps       0x40(%rsp),%ymm5
  .byte  197,252,40,116,36,96                // vmovaps       0x60(%rsp),%ymm6
  .byte  197,252,40,188,36,128,0,0,0         // vmovaps       0x80(%rsp),%ymm7
  .byte  72,141,101,216                      // lea           -0x28(%rbp),%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,128,63                      // mov           $0x3f800000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,224                   // add           %al,-0x1fffff41(%rax)
  .byte  64,154                              // rex           (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 732d <.literal4+0xb1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 733d <.literal4+0xc1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 734d <.literal4+0xd1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 735d <.literal4+0xe1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%rax)
  .byte  67,0,0                              // rex.XB        add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,145                          // cmpb          $0x91,(%rdi)
  .byte  131,158,61,154,153,153,62           // sbbl          $0x3e,-0x666665c3(%rsi)
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,145,131,158,61                   // cmp           $0x3d9e8391,%eax
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,82,184,78,65                     // cmp           $0x414eb852,%eax
  .byte  57,215                              // cmp           %edx,%edi
  .byte  32,187,186,159,98,60                // and           %bh,0x3c629fba(%rbx)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  252                                 // cld
  .byte  191,16,62,168,177                   // mov           $0xb1a83e10,%edi
  .byte  152                                 // cwtl
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,128,64,171,170,42                 // add           %al,0x2aaaab40(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,129,128,128,59                  // mov           $0x3b808081,%esi
  .byte  129,128,128,59,0,248,0,0,8,33       // addl          $0x21080000,-0x7ffc480(%rax)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        73c9 <.literal4+0x14d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,129,128,128,59              // and           %eax,0x3b808081(,%rdi,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  0,52,255                            // add           %dh,(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            73f0 <.literal4+0x174>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            7469 <.literal4+0x1ed>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            7424 <.literal4+0x1a8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            749d <.literal4+0x221>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            7458 <.literal4+0x1dc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            74d1 <.literal4+0x255>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            748c <.literal4+0x210>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            7505 <.literal4+0x289>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,200                    // add           %al,-0x37ffffc1(%rax)
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  127,67                              // jg            7503 <.literal4+0x287>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,203,61,13       // movabs        %eax,0xd3dcb3c1118c23b
  .byte  190,80,128,3,62                     // mov           $0x3e038050,%esi
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           7523 <.literal4+0x2a7>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  129,128,128,59,0,0,128,63,129,128   // addl          $0x80813f80,0x3b80(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,128,63,129,128,128                // add           %al,-0x7f7f7ec1(%rax)
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  0,128,63,129,128,128                // add           %al,-0x7f7f7ec1(%rax)
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        7525 <.literal4+0x2a9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        7541 <.literal4+0x2c5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        755d <.literal4+0x2e1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            75b2 <.literal4+0x336>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,240                // mov           %ecx,-0xfffc278(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,240                // mov           %ecx,-0xfffc278(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,0                  // mov           %ecx,0x3d88(%rax)
  .byte  112,65                              // jo            7615 <.literal4+0x399>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,128,56                    // add           %al,0x38800000(%rax)
  .byte  0,64,254                            // add           %al,-0x2(%rax)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,0,0,128                    // add           %al,-0x7fffffc9(%rax)
  .byte  63                                  // (bad)
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            7677 <.literal4+0x3fb>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,0                     // add           %al,0xbf(%rax)
  .byte  63                                  // (bad)
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,45,16,17                 // fstl          0x11102d3d(%rbx)
  .byte  192,18,120                          // rclb          $0x78,(%rdx)
  .byte  57,64,32                            // cmp           %eax,0x20(%rax)
  .byte  148                                 // xchg          %eax,%esp
  .byte  90                                  // pop           %rdx
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,0,24                             // add           %bl,%ds:(%rax)
  .byte  161,57,1,0,0,0,111,43,231           // movabs        0xe72b6f0000000139,%eax
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,169,240,34,62                   // mov           $0x3e22f0a9,%ebp
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,114              // sarb          $0x72,0x3f800000(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,0,191                       // mov           $0xbf000000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,114                          // sarb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,192,191                     // mov           $0xbfc00000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,0,191                       // mov           $0xbf000000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,114                          // sarb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190                                 // .byte         0xbe

BALIGN16
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)

BALIGN32
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
BALIGN32

HIDDEN _sk_start_pipeline_sse41
.globl _sk_start_pipeline_sse41
FUNCTION(_sk_start_pipeline_sse41)
_sk_start_pipeline_sse41:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,137,208                          // mov           %rdx,%r8
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  72,141,75,4                         // lea           0x4(%rbx),%rcx
  .byte  76,57,193                           // cmp           %r8,%rcx
  .byte  118,5                               // jbe           30 <_sk_start_pipeline_sse41+0x30>
  .byte  72,137,218                          // mov           %rbx,%rdx
  .byte  235,48                              // jmp           60 <_sk_start_pipeline_sse41+0x60>
  .byte  76,137,69,208                       // mov           %r8,-0x30(%rbp)
  .byte  69,49,192                           // xor           %r8d,%r8d
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,137,218                          // mov           %rbx,%rdx
  .byte  76,137,249                          // mov           %r15,%rcx
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  65,255,214                          // callq         *%r14
  .byte  76,139,69,208                       // mov           -0x30(%rbp),%r8
  .byte  76,137,240                          // mov           %r14,%rax
  .byte  72,141,83,4                         // lea           0x4(%rbx),%rdx
  .byte  72,131,195,8                        // add           $0x8,%rbx
  .byte  76,57,195                           // cmp           %r8,%rbx
  .byte  72,137,211                          // mov           %rdx,%rbx
  .byte  118,212                             // jbe           34 <_sk_start_pipeline_sse41+0x34>
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,25                              // je            7e <_sk_start_pipeline_sse41+0x7e>
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  76,137,249                          // mov           %r15,%rcx
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  195                                 // retq

HIDDEN _sk_just_return_sse41
.globl _sk_just_return_sse41
FUNCTION(_sk_just_return_sse41)
_sk_just_return_sse41:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_sse41
.globl _sk_seed_shader_sse41
FUNCTION(_sk_seed_shader_sse41)
_sk_seed_shader_sse41:
  .byte  102,15,110,194                      // movd          %edx,%xmm0
  .byte  102,15,112,192,0                    // pshufd        $0x0,%xmm0,%xmm0
  .byte  15,91,200                           // cvtdq2ps      %xmm0,%xmm1
  .byte  15,40,21,175,86,0,0                 // movaps        0x56af(%rip),%xmm2        # 5750 <_sk_callback_sse41+0xf4>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,16,7                             // movups        (%rdi),%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  102,15,110,201                      // movd          %ecx,%xmm1
  .byte  102,15,112,201,0                    // pshufd        $0x0,%xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,21,158,86,0,0                 // movaps        0x569e(%rip),%xmm2        # 5760 <_sk_callback_sse41+0x104>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_sse41
.globl _sk_dither_sse41
FUNCTION(_sk_dither_sse41)
_sk_dither_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,68,15,110,194                   // movd          %edx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  243,68,15,111,79,32                 // movdqu        0x20(%rdi),%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  102,68,15,110,193                   // movd          %ecx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,68,15,111,21,108,86,0,0         // movdqa        0x566c(%rip),%xmm10        # 5770 <_sk_callback_sse41+0x114>
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,65,15,114,243,5                 // pslld         $0x5,%xmm11
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,65,15,114,242,4                 // pslld         $0x4,%xmm10
  .byte  102,68,15,111,37,88,86,0,0          // movdqa        0x5658(%rip),%xmm12        # 5780 <_sk_callback_sse41+0x124>
  .byte  102,68,15,111,45,95,86,0,0          // movdqa        0x565f(%rip),%xmm13        # 5790 <_sk_callback_sse41+0x134>
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,69,15,219,245                   // pand          %xmm13,%xmm14
  .byte  102,65,15,114,246,2                 // pslld         $0x2,%xmm14
  .byte  102,69,15,219,233                   // pand          %xmm9,%xmm13
  .byte  102,69,15,254,237                   // paddd         %xmm13,%xmm13
  .byte  102,69,15,219,196                   // pand          %xmm12,%xmm8
  .byte  102,65,15,114,208,1                 // psrld         $0x1,%xmm8
  .byte  102,69,15,219,204                   // pand          %xmm12,%xmm9
  .byte  102,65,15,114,209,2                 // psrld         $0x2,%xmm9
  .byte  102,69,15,235,234                   // por           %xmm10,%xmm13
  .byte  102,69,15,235,233                   // por           %xmm9,%xmm13
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,235,245                   // por           %xmm13,%xmm14
  .byte  102,69,15,235,240                   // por           %xmm8,%xmm14
  .byte  69,15,91,198                        // cvtdq2ps      %xmm14,%xmm8
  .byte  68,15,89,5,26,86,0,0                // mulps         0x561a(%rip),%xmm8        # 57a0 <_sk_callback_sse41+0x144>
  .byte  68,15,88,5,34,86,0,0                // addps         0x5622(%rip),%xmm8        # 57b0 <_sk_callback_sse41+0x154>
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,88,210                        // addps         %xmm2,%xmm10
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  68,15,93,211                        // minps         %xmm3,%xmm10
  .byte  65,15,95,210                        // maxps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_sse41
.globl _sk_constant_color_sse41
FUNCTION(_sk_constant_color_sse41)
_sk_constant_color_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgba_sse41
.globl _sk_load_rgba_sse41
FUNCTION(_sk_load_rgba_sse41)
_sk_load_rgba_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  15,16,72,16                         // movups        0x10(%rax),%xmm1
  .byte  15,16,80,32                         // movups        0x20(%rax),%xmm2
  .byte  15,16,88,48                         // movups        0x30(%rax),%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_rgba_sse41
.globl _sk_store_rgba_sse41
FUNCTION(_sk_store_rgba_sse41)
_sk_store_rgba_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  15,17,72,16                         // movups        %xmm1,0x10(%rax)
  .byte  15,17,80,32                         // movups        %xmm2,0x20(%rax)
  .byte  15,17,88,48                         // movups        %xmm3,0x30(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_sse41
.globl _sk_clear_sse41
FUNCTION(_sk_clear_sse41)
_sk_clear_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_sse41
.globl _sk_srcatop_sse41
FUNCTION(_sk_srcatop_sse41)
_sk_srcatop_sse41:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  68,15,40,5,124,85,0,0               // movaps        0x557c(%rip),%xmm8        # 57c0 <_sk_callback_sse41+0x164>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_sse41
.globl _sk_dstatop_sse41
FUNCTION(_sk_dstatop_sse41)
_sk_dstatop_sse41:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,40,13,63,85,0,0               // movaps        0x553f(%rip),%xmm9        # 57d0 <_sk_callback_sse41+0x174>
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_sse41
.globl _sk_srcin_sse41
FUNCTION(_sk_srcin_sse41)
_sk_srcin_sse41:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_sse41
.globl _sk_dstin_sse41
FUNCTION(_sk_dstin_sse41)
_sk_dstin_sse41:
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_sse41
.globl _sk_srcout_sse41
FUNCTION(_sk_srcout_sse41)
_sk_srcout_sse41:
  .byte  68,15,40,5,227,84,0,0               // movaps        0x54e3(%rip),%xmm8        # 57e0 <_sk_callback_sse41+0x184>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_sse41
.globl _sk_dstout_sse41
FUNCTION(_sk_dstout_sse41)
_sk_dstout_sse41:
  .byte  68,15,40,5,211,84,0,0               // movaps        0x54d3(%rip),%xmm8        # 57f0 <_sk_callback_sse41+0x194>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_sse41
.globl _sk_srcover_sse41
FUNCTION(_sk_srcover_sse41)
_sk_srcover_sse41:
  .byte  68,15,40,5,182,84,0,0               // movaps        0x54b6(%rip),%xmm8        # 5800 <_sk_callback_sse41+0x1a4>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_sse41
.globl _sk_dstover_sse41
FUNCTION(_sk_dstover_sse41)
_sk_dstover_sse41:
  .byte  68,15,40,5,138,84,0,0               // movaps        0x548a(%rip),%xmm8        # 5810 <_sk_callback_sse41+0x1b4>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_sse41
.globl _sk_modulate_sse41
FUNCTION(_sk_modulate_sse41)
_sk_modulate_sse41:
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_sse41
.globl _sk_multiply_sse41
FUNCTION(_sk_multiply_sse41)
_sk_multiply_sse41:
  .byte  68,15,40,5,94,84,0,0                // movaps        0x545e(%rip),%xmm8        # 5820 <_sk_callback_sse41+0x1c4>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,221                        // mulps         %xmm5,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__sse41
.globl _sk_plus__sse41
FUNCTION(_sk_plus__sse41)
_sk_plus__sse41:
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_sse41
.globl _sk_screen_sse41
FUNCTION(_sk_screen_sse41)
_sk_screen_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,88,215                        // addps         %xmm7,%xmm10
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__sse41
.globl _sk_xor__sse41
FUNCTION(_sk_xor__sse41)
_sk_xor__sse41:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,40,29,147,83,0,0                 // movaps        0x5393(%rip),%xmm3        # 5830 <_sk_callback_sse41+0x1d4>
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_sse41
.globl _sk_darken_sse41
FUNCTION(_sk_darken_sse41)
_sk_darken_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,95,209                        // maxps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,254,82,0,0                 // movaps        0x52fe(%rip),%xmm2        # 5840 <_sk_callback_sse41+0x1e4>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_sse41
.globl _sk_lighten_sse41
FUNCTION(_sk_lighten_sse41)
_sk_lighten_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,163,82,0,0                 // movaps        0x52a3(%rip),%xmm2        # 5850 <_sk_callback_sse41+0x1f4>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_sse41
.globl _sk_difference_sse41
FUNCTION(_sk_difference_sse41)
_sk_difference_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,61,82,0,0                  // movaps        0x523d(%rip),%xmm2        # 5860 <_sk_callback_sse41+0x204>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_sse41
.globl _sk_exclusion_sse41
FUNCTION(_sk_exclusion_sse41)
_sk_exclusion_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,253,81,0,0                 // movaps        0x51fd(%rip),%xmm2        # 5870 <_sk_callback_sse41+0x214>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_sse41
.globl _sk_colorburn_sse41
FUNCTION(_sk_colorburn_sse41)
_sk_colorburn_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,240,81,0,0              // movaps        0x51f0(%rip),%xmm10        # 5880 <_sk_callback_sse41+0x224>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,94,192                        // divps         %xmm8,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  68,15,88,228                        // addps         %xmm4,%xmm12
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  102,69,15,56,20,232                 // blendvps      %xmm0,%xmm8,%xmm13
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  102,69,15,56,20,196                 // blendvps      %xmm0,%xmm12,%xmm8
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,197                           // subps         %xmm5,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,94,193                           // divps         %xmm1,%xmm0
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,93,232                        // minps         %xmm0,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  68,15,88,229                        // addps         %xmm5,%xmm12
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  102,65,15,56,20,204                 // blendvps      %xmm0,%xmm12,%xmm1
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,94,194                           // divps         %xmm2,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,194,202,0                     // cmpeqps       %xmm2,%xmm9
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_sse41
.globl _sk_colordodge_sse41
FUNCTION(_sk_colordodge_sse41)
_sk_colordodge_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,206,80,0,0              // movaps        0x50ce(%rip),%xmm10        # 5890 <_sk_callback_sse41+0x234>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,224                        // mulps         %xmm8,%xmm12
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,94,200                        // divps         %xmm0,%xmm9
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  69,15,93,241                        // minps         %xmm9,%xmm14
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  102,69,15,56,20,240                 // blendvps      %xmm0,%xmm8,%xmm14
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,88,228                        // addps         %xmm4,%xmm12
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  69,15,88,198                        // addps         %xmm14,%xmm8
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  102,69,15,56,20,196                 // blendvps      %xmm0,%xmm12,%xmm8
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,229                        // mulps         %xmm5,%xmm12
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,94,224                        // divps         %xmm0,%xmm12
  .byte  69,15,40,243                        // movaps        %xmm11,%xmm14
  .byte  68,15,89,241                        // mulps         %xmm1,%xmm14
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  102,68,15,56,20,233                 // blendvps      %xmm0,%xmm1,%xmm13
  .byte  68,15,88,245                        // addps         %xmm5,%xmm14
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  102,65,15,56,20,206                 // blendvps      %xmm0,%xmm14,%xmm1
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  68,15,94,224                        // divps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  68,15,194,206,0                     // cmpeqps       %xmm6,%xmm9
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_sse41
.globl _sk_hardlight_sse41
FUNCTION(_sk_hardlight_sse41)
_sk_hardlight_sse41:
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,40,21,167,79,0,0              // movaps        0x4fa7(%rip),%xmm10        # 58a0 <_sk_callback_sse41+0x244>
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  15,92,239                           // subps         %xmm7,%xmm5
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  68,15,92,212                        // subps         %xmm4,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  68,15,40,252                        // movaps        %xmm4,%xmm15
  .byte  69,15,92,249                        // subps         %xmm9,%xmm15
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  65,15,89,199                        // mulps         %xmm15,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  68,15,40,251                        // movaps        %xmm3,%xmm15
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  102,69,15,56,20,249                 // blendvps      %xmm0,%xmm9,%xmm15
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  69,15,40,204                        // movaps        %xmm12,%xmm9
  .byte  69,15,92,233                        // subps         %xmm9,%xmm13
  .byte  68,15,89,232                        // mulps         %xmm0,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  69,15,88,199                        // addps         %xmm15,%xmm8
  .byte  65,15,89,205                        // mulps         %xmm13,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  68,15,40,92,36,232                  // movaps        -0x18(%rsp),%xmm11
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  68,15,88,205                        // addps         %xmm5,%xmm9
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,92,234                           // subps         %xmm2,%xmm5
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  68,15,89,245                        // mulps         %xmm5,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  65,15,92,222                        // subps         %xmm14,%xmm3
  .byte  102,15,56,20,218                    // blendvps      %xmm0,%xmm2,%xmm3
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  65,15,88,226                        // addps         %xmm10,%xmm4
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  65,15,40,237                        // movaps        %xmm13,%xmm5
  .byte  65,15,40,243                        // movaps        %xmm11,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_sse41
.globl _sk_overlay_sse41
FUNCTION(_sk_overlay_sse41)
_sk_overlay_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  68,15,40,21,140,78,0,0              // movaps        0x4e8c(%rip),%xmm10        # 58b0 <_sk_callback_sse41+0x254>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  68,15,40,235                        // movaps        %xmm3,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,231                        // mulps         %xmm7,%xmm12
  .byte  65,15,89,205                        // mulps         %xmm13,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  68,15,92,233                        // subps         %xmm1,%xmm13
  .byte  102,69,15,56,20,238                 // blendvps      %xmm0,%xmm14,%xmm13
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  68,15,40,235                        // movaps        %xmm3,%xmm13
  .byte  69,15,92,233                        // subps         %xmm9,%xmm13
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,92,245                        // subps         %xmm5,%xmm14
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  102,69,15,56,20,233                 // blendvps      %xmm0,%xmm9,%xmm13
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  68,15,92,218                        // subps         %xmm2,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,92,238                        // subps         %xmm6,%xmm13
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  102,68,15,56,20,226                 // blendvps      %xmm0,%xmm2,%xmm12
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_sse41
.globl _sk_softlight_sse41
FUNCTION(_sk_softlight_sse41)
_sk_softlight_sse41:
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,41,76,36,200                     // movaps        %xmm1,-0x38(%rsp)
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,207,1                     // cmpltps       %xmm7,%xmm9
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,94,199                           // divps         %xmm7,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  15,40,13,99,77,0,0                  // movaps        0x4d63(%rip),%xmm1        # 58c0 <_sk_callback_sse41+0x264>
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,92,208                        // subps         %xmm0,%xmm10
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  68,15,40,248                        // movaps        %xmm0,%xmm15
  .byte  15,82,208                           // rsqrtps       %xmm0,%xmm2
  .byte  68,15,83,218                        // rcpps         %xmm2,%xmm11
  .byte  68,15,92,216                        // subps         %xmm0,%xmm11
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,40,45,65,77,0,0               // movaps        0x4d41(%rip),%xmm13        # 58d0 <_sk_callback_sse41+0x274>
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  68,15,89,242                        // mulps         %xmm2,%xmm14
  .byte  68,15,40,37,65,77,0,0               // movaps        0x4d41(%rip),%xmm12        # 58e0 <_sk_callback_sse41+0x284>
  .byte  69,15,89,252                        // mulps         %xmm12,%xmm15
  .byte  69,15,88,254                        // addps         %xmm14,%xmm15
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,69,15,56,20,223                 // blendvps      %xmm0,%xmm15,%xmm11
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,88,211                        // addps         %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,69,15,56,20,218                 // blendvps      %xmm0,%xmm10,%xmm11
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,88,197                        // addps         %xmm13,%xmm0
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  65,15,82,194                        // rsqrtps       %xmm10,%xmm0
  .byte  68,15,83,240                        // rcpps         %xmm0,%xmm14
  .byte  69,15,92,242                        // subps         %xmm10,%xmm14
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,68,15,56,20,242                 // blendvps      %xmm0,%xmm2,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  69,15,92,250                        // subps         %xmm10,%xmm15
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  68,15,89,250                        // mulps         %xmm2,%xmm15
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,242                        // mulps         %xmm2,%xmm14
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,242                        // addps         %xmm2,%xmm14
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,252                        // mulps         %xmm4,%xmm15
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,69,15,56,20,247                 // blendvps      %xmm0,%xmm15,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  15,40,100,36,216                    // movaps        -0x28(%rsp),%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,94,199                           // divps         %xmm7,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,82,208                           // rsqrtps       %xmm0,%xmm2
  .byte  68,15,83,202                        // rcpps         %xmm2,%xmm9
  .byte  68,15,92,200                        // subps         %xmm0,%xmm9
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,69,15,56,20,204                 // blendvps      %xmm0,%xmm12,%xmm9
  .byte  68,15,40,100,36,232                 // movaps        -0x18(%rsp),%xmm12
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,68,15,56,20,201                 // blendvps      %xmm0,%xmm1,%xmm9
  .byte  68,15,92,255                        // subps         %xmm7,%xmm15
  .byte  69,15,89,199                        // mulps         %xmm15,%xmm8
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  69,15,89,252                        // mulps         %xmm12,%xmm15
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  69,15,88,195                        // addps         %xmm11,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,40,108,36,184                    // movaps        -0x48(%rsp),%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_sse41
.globl _sk_hue_sse41
FUNCTION(_sk_hue_sse41)
_sk_hue_sse41:
  .byte  15,41,124,36,152                    // movaps        %xmm7,-0x68(%rsp)
  .byte  68,15,40,246                        // movaps        %xmm6,%xmm14
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,41,76,36,216                     // movaps        %xmm1,-0x28(%rsp)
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,41,84,36,200                  // movaps        %xmm10,-0x38(%rsp)
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  68,15,40,234                        // movaps        %xmm2,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,205                        // movaps        %xmm5,%xmm9
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  15,41,108,36,184                    // movaps        %xmm5,-0x48(%rsp)
  .byte  69,15,95,222                        // maxps         %xmm14,%xmm11
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  65,15,95,211                        // maxps         %xmm11,%xmm2
  .byte  65,15,40,230                        // movaps        %xmm14,%xmm4
  .byte  15,41,100,36,168                    // movaps        %xmm4,-0x58(%rsp)
  .byte  68,15,93,204                        // minps         %xmm4,%xmm9
  .byte  65,15,93,249                        // minps         %xmm9,%xmm7
  .byte  15,92,215                           // subps         %xmm7,%xmm2
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,93,253                        // minps         %xmm13,%xmm7
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,223                           // minps         %xmm7,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,95,253                        // maxps         %xmm13,%xmm7
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,95,199                           // maxps         %xmm7,%xmm0
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  68,15,92,235                        // subps         %xmm3,%xmm13
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,94,208                        // divps         %xmm0,%xmm10
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,94,200                           // divps         %xmm0,%xmm1
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  68,15,94,232                        // divps         %xmm0,%xmm13
  .byte  15,194,195,4                        // cmpneqps      %xmm3,%xmm0
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  15,84,200                           // andps         %xmm0,%xmm1
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  15,40,5,172,74,0,0                  // movaps        0x4aac(%rip),%xmm0        # 58f0 <_sk_callback_sse41+0x294>
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,40,21,177,74,0,0                 // movaps        0x4ab1(%rip),%xmm2        # 5900 <_sk_callback_sse41+0x2a4>
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  65,15,88,252                        // addps         %xmm12,%xmm7
  .byte  68,15,40,53,178,74,0,0              // movaps        0x4ab2(%rip),%xmm14        # 5910 <_sk_callback_sse41+0x2b4>
  .byte  68,15,40,252                        // movaps        %xmm4,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  68,15,88,255                        // addps         %xmm7,%xmm15
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  65,15,40,221                        // movaps        %xmm13,%xmm3
  .byte  65,15,89,222                        // mulps         %xmm14,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  69,15,89,248                        // mulps         %xmm8,%xmm15
  .byte  68,15,92,251                        // subps         %xmm3,%xmm15
  .byte  69,15,88,215                        // addps         %xmm15,%xmm10
  .byte  65,15,88,207                        // addps         %xmm15,%xmm1
  .byte  69,15,88,253                        // addps         %xmm13,%xmm15
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  65,15,93,223                        // minps         %xmm15,%xmm3
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  15,93,251                           // minps         %xmm3,%xmm7
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  69,15,89,247                        // mulps         %xmm15,%xmm14
  .byte  68,15,88,242                        // addps         %xmm2,%xmm14
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,207,2                     // cmpleps       %xmm7,%xmm9
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,94,235                        // divps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,234                 // blendvps      %xmm0,%xmm10,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,95,199                        // maxps         %xmm15,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  65,15,40,248                        // movaps        %xmm8,%xmm7
  .byte  15,40,108,36,152                    // movaps        -0x68(%rsp),%xmm5
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  65,15,194,226,1                     // cmpltps       %xmm10,%xmm4
  .byte  65,15,40,213                        // movaps        %xmm13,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  68,15,40,223                        // movaps        %xmm7,%xmm11
  .byte  69,15,92,222                        // subps         %xmm14,%xmm11
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  69,15,92,214                        // subps         %xmm14,%xmm10
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,92,230                        // subps         %xmm14,%xmm12
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  68,15,94,227                        // divps         %xmm3,%xmm12
  .byte  69,15,88,230                        // addps         %xmm14,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,202                        // divps         %xmm10,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  15,94,203                           // divps         %xmm3,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,207                 // blendvps      %xmm0,%xmm15,%xmm1
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,15,56,20,202                    // blendvps      %xmm0,%xmm2,%xmm1
  .byte  68,15,40,13,118,73,0,0              // movaps        0x4976(%rip),%xmm9        # 5920 <_sk_callback_sse41+0x2c4>
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  15,92,229                           // subps         %xmm5,%xmm4
  .byte  15,40,68,36,200                     // movaps        -0x38(%rsp),%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,92,36,216                     // movaps        -0x28(%rsp),%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,89,100,36,232                    // mulps         -0x18(%rsp),%xmm4
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  68,15,95,234                        // maxps         %xmm2,%xmm13
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  15,95,202                           // maxps         %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  65,15,88,197                        // addps         %xmm13,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,108,36,184                    // movaps        -0x48(%rsp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,88,204                        // addps         %xmm4,%xmm9
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_sse41
.globl _sk_saturation_sse41
FUNCTION(_sk_saturation_sse41)
_sk_saturation_sse41:
  .byte  68,15,40,206                        // movaps        %xmm6,%xmm9
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,41,76,36,216                     // movaps        %xmm1,-0x28(%rsp)
  .byte  15,41,68,36,200                     // movaps        %xmm0,-0x38(%rsp)
  .byte  68,15,40,212                        // movaps        %xmm4,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  68,15,40,220                        // movaps        %xmm4,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,41,116,36,184                 // movaps        %xmm14,-0x48(%rsp)
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,41,76,36,232                  // movaps        %xmm9,-0x18(%rsp)
  .byte  65,15,95,217                        // maxps         %xmm9,%xmm3
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,95,211                           // maxps         %xmm3,%xmm2
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,93,225                        // minps         %xmm9,%xmm12
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,93,220                        // minps         %xmm12,%xmm3
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,41,100,36,168                 // movaps        %xmm12,-0x58(%rsp)
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  15,95,248                           // maxps         %xmm0,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,94,223                        // divps         %xmm7,%xmm11
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  68,15,94,199                        // divps         %xmm7,%xmm8
  .byte  15,194,248,4                        // cmpneqps      %xmm0,%xmm7
  .byte  68,15,84,215                        // andps         %xmm7,%xmm10
  .byte  68,15,84,223                        // andps         %xmm7,%xmm11
  .byte  68,15,84,199                        // andps         %xmm7,%xmm8
  .byte  15,40,21,48,72,0,0                  // movaps        0x4830(%rip),%xmm2        # 5930 <_sk_callback_sse41+0x2d4>
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  15,40,13,51,72,0,0                  // movaps        0x4833(%rip),%xmm1        # 5940 <_sk_callback_sse41+0x2e4>
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  68,15,40,45,50,72,0,0               // movaps        0x4832(%rip),%xmm13        # 5950 <_sk_callback_sse41+0x2f4>
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  68,15,88,247                        // addps         %xmm7,%xmm14
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  65,15,89,221                        // mulps         %xmm13,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  68,15,92,243                        // subps         %xmm3,%xmm14
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,88,240                        // addps         %xmm8,%xmm14
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,93,198                        // minps         %xmm14,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,88,233                        // addps         %xmm1,%xmm13
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  65,15,40,253                        // movaps        %xmm13,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,92,253                        // subps         %xmm13,%xmm15
  .byte  69,15,89,253                        // mulps         %xmm13,%xmm15
  .byte  68,15,94,255                        // divps         %xmm7,%xmm15
  .byte  69,15,88,253                        // addps         %xmm13,%xmm15
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,250                 // blendvps      %xmm0,%xmm10,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,95,198                        // maxps         %xmm14,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,194,194,1                     // cmpltps       %xmm10,%xmm8
  .byte  65,15,40,223                        // movaps        %xmm15,%xmm3
  .byte  65,15,92,221                        // subps         %xmm13,%xmm3
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,92,205                        // subps         %xmm13,%xmm1
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,251                 // blendvps      %xmm0,%xmm3,%xmm15
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  68,15,94,231                        // divps         %xmm7,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,227                 // blendvps      %xmm0,%xmm11,%xmm12
  .byte  65,15,40,220                        // movaps        %xmm12,%xmm3
  .byte  65,15,92,221                        // subps         %xmm13,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,227                 // blendvps      %xmm0,%xmm3,%xmm12
  .byte  69,15,40,222                        // movaps        %xmm14,%xmm11
  .byte  69,15,92,221                        // subps         %xmm13,%xmm11
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  68,15,94,223                        // divps         %xmm7,%xmm11
  .byte  69,15,88,221                        // addps         %xmm13,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,222                 // blendvps      %xmm0,%xmm14,%xmm11
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  65,15,92,253                        // subps         %xmm13,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  65,15,94,250                        // divps         %xmm10,%xmm7
  .byte  65,15,88,253                        // addps         %xmm13,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,223                 // blendvps      %xmm0,%xmm7,%xmm11
  .byte  68,15,40,13,248,70,0,0              // movaps        0x46f8(%rip),%xmm9        # 5960 <_sk_callback_sse41+0x304>
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,92,204                        // subps         %xmm4,%xmm9
  .byte  15,40,124,36,168                    // movaps        -0x58(%rsp),%xmm7
  .byte  15,88,231                           // addps         %xmm7,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,248                        // maxps         %xmm0,%xmm15
  .byte  68,15,95,224                        // maxps         %xmm0,%xmm12
  .byte  68,15,95,216                        // maxps         %xmm0,%xmm11
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,40,68,36,200                     // movaps        -0x38(%rsp),%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,40,84,36,216                     // movaps        -0x28(%rsp),%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,209                           // addps         %xmm1,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  68,15,89,68,36,232                  // mulps         -0x18(%rsp),%xmm8
  .byte  15,40,84,36,184                     // movaps        -0x48(%rsp),%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_sse41
.globl _sk_color_sse41
FUNCTION(_sk_color_sse41)
_sk_color_sse41:
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,41,100,36,200                 // movaps        %xmm12,-0x38(%rsp)
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,41,92,36,216                  // movaps        %xmm11,-0x28(%rsp)
  .byte  68,15,40,212                        // movaps        %xmm4,%xmm10
  .byte  68,15,41,84,36,232                  // movaps        %xmm10,-0x18(%rsp)
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,240                        // movaps        %xmm8,%xmm14
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,40,13,67,70,0,0               // movaps        0x4643(%rip),%xmm9        # 5970 <_sk_callback_sse41+0x314>
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  65,15,89,249                        // mulps         %xmm9,%xmm7
  .byte  68,15,40,21,67,70,0,0               // movaps        0x4643(%rip),%xmm10        # 5980 <_sk_callback_sse41+0x324>
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,40,29,64,70,0,0               // movaps        0x4640(%rip),%xmm11        # 5990 <_sk_callback_sse41+0x334>
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  68,15,88,235                        // addps         %xmm3,%xmm13
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,89,250                        // mulps         %xmm10,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,89,238                        // mulps         %xmm6,%xmm13
  .byte  68,15,92,235                        // subps         %xmm3,%xmm13
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,93,197                        // minps         %xmm13,%xmm0
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  69,15,89,206                        // mulps         %xmm14,%xmm9
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  69,15,40,230                        // movaps        %xmm14,%xmm12
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  68,15,94,231                        // divps         %xmm7,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,230                 // blendvps      %xmm0,%xmm14,%xmm12
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,95,197                        // maxps         %xmm13,%xmm0
  .byte  65,15,40,214                        // movaps        %xmm14,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,194,210,1                     // cmpltps       %xmm2,%xmm10
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  68,15,40,251                        // movaps        %xmm3,%xmm15
  .byte  69,15,92,251                        // subps         %xmm11,%xmm15
  .byte  69,15,89,247                        // mulps         %xmm15,%xmm14
  .byte  65,15,92,211                        // subps         %xmm11,%xmm2
  .byte  68,15,94,242                        // divps         %xmm2,%xmm14
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,230                 // blendvps      %xmm0,%xmm14,%xmm12
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  68,15,94,247                        // divps         %xmm7,%xmm14
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  65,15,40,206                        // movaps        %xmm14,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  65,15,40,205                        // movaps        %xmm13,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,94,207                           // divps         %xmm7,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,205                 // blendvps      %xmm0,%xmm13,%xmm1
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,92,251                        // subps         %xmm11,%xmm7
  .byte  65,15,89,255                        // mulps         %xmm15,%xmm7
  .byte  15,94,250                           // divps         %xmm2,%xmm7
  .byte  65,15,88,251                        // addps         %xmm11,%xmm7
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,15,56,20,207                    // blendvps      %xmm0,%xmm7,%xmm1
  .byte  68,15,40,13,252,68,0,0              // movaps        0x44fc(%rip),%xmm9        # 59a0 <_sk_callback_sse41+0x344>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,89,68,36,184                     // mulps         -0x48(%rsp),%xmm0
  .byte  68,15,92,206                        // subps         %xmm6,%xmm9
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  68,15,95,242                        // maxps         %xmm2,%xmm14
  .byte  15,95,202                           // maxps         %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,100,36,232                    // movaps        -0x18(%rsp),%xmm4
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,88,210                        // addps         %xmm2,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  15,40,84,36,200                     // movaps        -0x38(%rsp),%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_sse41
.globl _sk_luminosity_sse41
FUNCTION(_sk_luminosity_sse41)
_sk_luminosity_sse41:
  .byte  15,41,116,36,200                    // movaps        %xmm6,-0x38(%rsp)
  .byte  15,41,108,36,232                    // movaps        %xmm5,-0x18(%rsp)
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  68,15,41,68,36,216                  // movaps        %xmm8,-0x28(%rsp)
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,5,84,68,0,0                // movaps        0x4454(%rip),%xmm8        # 59b0 <_sk_callback_sse41+0x354>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  68,15,40,21,88,68,0,0               // movaps        0x4458(%rip),%xmm10        # 59c0 <_sk_callback_sse41+0x364>
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  65,15,89,234                        // mulps         %xmm10,%xmm5
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  68,15,40,37,86,68,0,0               // movaps        0x4456(%rip),%xmm12        # 59d0 <_sk_callback_sse41+0x374>
  .byte  68,15,40,242                        // movaps        %xmm2,%xmm14
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  68,15,88,245                        // addps         %xmm5,%xmm14
  .byte  65,15,40,235                        // movaps        %xmm11,%xmm5
  .byte  65,15,89,232                        // mulps         %xmm8,%xmm5
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  15,88,213                           // addps         %xmm5,%xmm2
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  65,15,89,236                        // mulps         %xmm12,%xmm5
  .byte  15,88,234                           // addps         %xmm2,%xmm5
  .byte  68,15,89,247                        // mulps         %xmm7,%xmm14
  .byte  68,15,92,245                        // subps         %xmm5,%xmm14
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  68,15,88,240                        // addps         %xmm0,%xmm14
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,93,198                        // minps         %xmm14,%xmm0
  .byte  65,15,40,235                        // movaps        %xmm11,%xmm5
  .byte  15,93,232                           // minps         %xmm0,%xmm5
  .byte  69,15,89,195                        // mulps         %xmm11,%xmm8
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  69,15,88,226                        // addps         %xmm10,%xmm12
  .byte  69,15,87,210                        // xorps         %xmm10,%xmm10
  .byte  68,15,194,213,2                     // cmpleps       %xmm5,%xmm10
  .byte  69,15,40,235                        // movaps        %xmm11,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  65,15,40,244                        // movaps        %xmm12,%xmm6
  .byte  15,92,245                           // subps         %xmm5,%xmm6
  .byte  68,15,94,238                        // divps         %xmm6,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,235                 // blendvps      %xmm0,%xmm11,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,95,198                        // maxps         %xmm14,%xmm0
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,89,239                           // mulps         %xmm7,%xmm5
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,194,218,1                     // cmpltps       %xmm2,%xmm11
  .byte  69,15,40,197                        // movaps        %xmm13,%xmm8
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  69,15,92,252                        // subps         %xmm12,%xmm15
  .byte  69,15,89,199                        // mulps         %xmm15,%xmm8
  .byte  65,15,92,212                        // subps         %xmm12,%xmm2
  .byte  68,15,94,194                        // divps         %xmm2,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,69,15,56,20,232                 // blendvps      %xmm0,%xmm8,%xmm13
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,94,198                        // divps         %xmm6,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  68,15,94,202                        // divps         %xmm2,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  69,15,40,206                        // movaps        %xmm14,%xmm9
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,204                        // mulps         %xmm12,%xmm9
  .byte  68,15,94,206                        // divps         %xmm6,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,206                 // blendvps      %xmm0,%xmm14,%xmm9
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,92,244                        // subps         %xmm12,%xmm6
  .byte  65,15,89,247                        // mulps         %xmm15,%xmm6
  .byte  15,94,242                           // divps         %xmm2,%xmm6
  .byte  65,15,88,244                        // addps         %xmm12,%xmm6
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,68,15,56,20,206                 // blendvps      %xmm0,%xmm6,%xmm9
  .byte  15,40,5,12,67,0,0                   // movaps        0x430c(%rip),%xmm0        # 59e0 <_sk_callback_sse41+0x384>
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,215                           // subps         %xmm7,%xmm2
  .byte  15,89,226                           // mulps         %xmm2,%xmm4
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,89,84,36,184                     // mulps         -0x48(%rsp),%xmm2
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  68,15,95,237                        // maxps         %xmm5,%xmm13
  .byte  68,15,95,197                        // maxps         %xmm5,%xmm8
  .byte  68,15,95,205                        // maxps         %xmm5,%xmm9
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  68,15,40,84,36,216                  // movaps        -0x28(%rsp),%xmm10
  .byte  65,15,89,234                        // mulps         %xmm10,%xmm5
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  65,15,88,229                        // addps         %xmm13,%xmm4
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,40,108,36,232                    // movaps        -0x18(%rsp),%xmm5
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,226                        // movaps        %xmm10,%xmm4
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_rgba_8888_sse41
.globl _sk_srcover_rgba_8888_sse41
FUNCTION(_sk_srcover_rgba_8888_sse41)
_sk_srcover_rgba_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,217,0,0,0                    // jne           1828 <_sk_srcover_rgba_8888_sse41+0xe7>
  .byte  243,15,111,60,144                   // movdqu        (%rax,%rdx,4),%xmm7
  .byte  77,133,192                          // test          %r8,%r8
  .byte  102,15,111,37,145,66,0,0            // movdqa        0x4291(%rip),%xmm4        # 59f0 <_sk_callback_sse41+0x394>
  .byte  102,15,219,231                      // pand          %xmm7,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  102,15,111,239                      // movdqa        %xmm7,%xmm5
  .byte  102,15,56,0,45,141,66,0,0           // pshufb        0x428d(%rip),%xmm5        # 5a00 <_sk_callback_sse41+0x3a4>
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  102,15,111,247                      // movdqa        %xmm7,%xmm6
  .byte  102,15,56,0,53,141,66,0,0           // pshufb        0x428d(%rip),%xmm6        # 5a10 <_sk_callback_sse41+0x3b4>
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  102,15,114,215,24                   // psrld         $0x18,%xmm7
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  68,15,40,5,138,66,0,0               // movaps        0x428a(%rip),%xmm8        # 5a20 <_sk_callback_sse41+0x3c4>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  68,15,40,37,142,66,0,0              // movaps        0x428e(%rip),%xmm12        # 5a30 <_sk_callback_sse41+0x3d4>
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  68,15,88,209                        // addps         %xmm1,%xmm10
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  65,15,89,220                        // mulps         %xmm12,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,88,195                        // addps         %xmm3,%xmm8
  .byte  102,65,15,91,193                    // cvtps2dq      %xmm9,%xmm0
  .byte  102,65,15,91,202                    // cvtps2dq      %xmm10,%xmm1
  .byte  102,15,114,241,8                    // pslld         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,65,15,91,211                    // cvtps2dq      %xmm11,%xmm2
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,91,192                    // cvtps2dq      %xmm8,%xmm0
  .byte  102,15,114,240,24                   // pslld         $0x18,%xmm0
  .byte  102,15,235,194                      // por           %xmm2,%xmm0
  .byte  102,15,235,193                      // por           %xmm1,%xmm0
  .byte  117,85                              // jne           1864 <_sk_srcover_rgba_8888_sse41+0x123>
  .byte  243,15,127,4,144                    // movdqu        %xmm0,(%rax,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,87                              // je            188c <_sk_srcover_rgba_8888_sse41+0x14b>
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            1854 <_sk_srcover_rgba_8888_sse41+0x113>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  15,133,11,255,255,255               // jne           1754 <_sk_srcover_rgba_8888_sse41+0x13>
  .byte  102,15,110,100,144,8                // movd          0x8(%rax,%rdx,4),%xmm4
  .byte  102,15,112,252,69                   // pshufd        $0x45,%xmm4,%xmm7
  .byte  243,15,126,36,144                   // movq          (%rax,%rdx,4),%xmm4
  .byte  102,15,58,14,252,15                 // pblendw       $0xf,%xmm4,%xmm7
  .byte  233,240,254,255,255                 // jmpq          1754 <_sk_srcover_rgba_8888_sse41+0x13>
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,37                              // je            1896 <_sk_srcover_rgba_8888_sse41+0x155>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,14                              // je            1885 <_sk_srcover_rgba_8888_sse41+0x144>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,151                             // jne           1814 <_sk_srcover_rgba_8888_sse41+0xd3>
  .byte  102,15,58,22,68,144,8,2             // pextrd        $0x2,%xmm0,0x8(%rax,%rdx,4)
  .byte  102,15,214,4,144                    // movq          %xmm0,(%rax,%rdx,4)
  .byte  235,136                             // jmp           1814 <_sk_srcover_rgba_8888_sse41+0xd3>
  .byte  102,15,110,60,144                   // movd          (%rax,%rdx,4),%xmm7
  .byte  233,190,254,255,255                 // jmpq          1754 <_sk_srcover_rgba_8888_sse41+0x13>
  .byte  102,15,126,4,144                    // movd          %xmm0,(%rax,%rdx,4)
  .byte  233,116,255,255,255                 // jmpq          1814 <_sk_srcover_rgba_8888_sse41+0xd3>

HIDDEN _sk_clamp_0_sse41
.globl _sk_clamp_0_sse41
FUNCTION(_sk_clamp_0_sse41)
_sk_clamp_0_sse41:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,95,200                        // maxps         %xmm8,%xmm1
  .byte  65,15,95,208                        // maxps         %xmm8,%xmm2
  .byte  65,15,95,216                        // maxps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_sse41
.globl _sk_clamp_1_sse41
FUNCTION(_sk_clamp_1_sse41)
_sk_clamp_1_sse41:
  .byte  68,15,40,5,128,65,0,0               // movaps        0x4180(%rip),%xmm8        # 5a40 <_sk_callback_sse41+0x3e4>
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  65,15,93,208                        // minps         %xmm8,%xmm2
  .byte  65,15,93,216                        // minps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_sse41
.globl _sk_clamp_a_sse41
FUNCTION(_sk_clamp_a_sse41)
_sk_clamp_a_sse41:
  .byte  15,93,29,117,65,0,0                 // minps         0x4175(%rip),%xmm3        # 5a50 <_sk_callback_sse41+0x3f4>
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_dst_sse41
.globl _sk_clamp_a_dst_sse41
FUNCTION(_sk_clamp_a_dst_sse41)
_sk_clamp_a_dst_sse41:
  .byte  15,93,61,113,65,0,0                 // minps         0x4171(%rip),%xmm7        # 5a60 <_sk_callback_sse41+0x404>
  .byte  15,93,231                           // minps         %xmm7,%xmm4
  .byte  15,93,239                           // minps         %xmm7,%xmm5
  .byte  15,93,247                           // minps         %xmm7,%xmm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_sse41
.globl _sk_set_rgb_sse41
FUNCTION(_sk_set_rgb_sse41)
_sk_set_rgb_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_sse41
.globl _sk_swap_rb_sse41
FUNCTION(_sk_swap_rb_sse41)
_sk_swap_rb_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_dst_sse41
.globl _sk_swap_rb_dst_sse41
FUNCTION(_sk_swap_rb_dst_sse41)
_sk_swap_rb_dst_sse41:
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  65,15,40,240                        // movaps        %xmm8,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_sse41
.globl _sk_move_src_dst_sse41
FUNCTION(_sk_move_src_dst_sse41)
_sk_move_src_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_sse41
.globl _sk_move_dst_src_sse41
FUNCTION(_sk_move_dst_src_sse41)
_sk_move_dst_src_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_sse41
.globl _sk_premul_sse41
FUNCTION(_sk_premul_sse41)
_sk_premul_sse41:
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_sse41
.globl _sk_unpremul_sse41
FUNCTION(_sk_unpremul_sse41)
_sk_unpremul_sse41:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,40,13,253,64,0,0              // movaps        0x40fd(%rip),%xmm9        # 5a70 <_sk_callback_sse41+0x414>
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  68,15,194,195,4                     // cmpneqps      %xmm3,%xmm8
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_sse41
.globl _sk_from_srgb_sse41
FUNCTION(_sk_from_srgb_sse41)
_sk_from_srgb_sse41:
  .byte  68,15,40,29,232,64,0,0              // movaps        0x40e8(%rip),%xmm11        # 5a80 <_sk_callback_sse41+0x424>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  69,15,89,210                        // mulps         %xmm10,%xmm10
  .byte  68,15,40,37,224,64,0,0              // movaps        0x40e0(%rip),%xmm12        # 5a90 <_sk_callback_sse41+0x434>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,40,45,224,64,0,0              // movaps        0x40e0(%rip),%xmm13        # 5aa0 <_sk_callback_sse41+0x444>
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  68,15,40,53,224,64,0,0              // movaps        0x40e0(%rip),%xmm14        # 5ab0 <_sk_callback_sse41+0x454>
  .byte  69,15,88,198                        // addps         %xmm14,%xmm8
  .byte  68,15,40,61,228,64,0,0              // movaps        0x40e4(%rip),%xmm15        # 5ac0 <_sk_callback_sse41+0x464>
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,211                        // mulps         %xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,89,204                        // mulps         %xmm12,%xmm9
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  65,15,194,207,1                     // cmpltps       %xmm15,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  102,69,15,56,20,202                 // blendvps      %xmm0,%xmm10,%xmm9
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  69,15,89,210                        // mulps         %xmm10,%xmm10
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  65,15,194,215,1                     // cmpltps       %xmm15,%xmm2
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_dst_sse41
.globl _sk_from_srgb_dst_sse41
FUNCTION(_sk_from_srgb_dst_sse41)
_sk_from_srgb_dst_sse41:
  .byte  68,15,40,204                        // movaps        %xmm4,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,29,111,64,0,0              // movaps        0x406f(%rip),%xmm11        # 5ad0 <_sk_callback_sse41+0x474>
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  69,15,89,211                        // mulps         %xmm11,%xmm10
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,37,104,64,0,0              // movaps        0x4068(%rip),%xmm12        # 5ae0 <_sk_callback_sse41+0x484>
  .byte  65,15,89,228                        // mulps         %xmm12,%xmm4
  .byte  68,15,40,45,108,64,0,0              // movaps        0x406c(%rip),%xmm13        # 5af0 <_sk_callback_sse41+0x494>
  .byte  65,15,88,229                        // addps         %xmm13,%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  68,15,40,53,109,64,0,0              // movaps        0x406d(%rip),%xmm14        # 5b00 <_sk_callback_sse41+0x4a4>
  .byte  65,15,88,230                        // addps         %xmm14,%xmm4
  .byte  68,15,40,61,113,64,0,0              // movaps        0x4071(%rip),%xmm15        # 5b10 <_sk_callback_sse41+0x4b4>
  .byte  69,15,194,207,1                     // cmpltps       %xmm15,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,226                 // blendvps      %xmm0,%xmm10,%xmm4
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  69,15,89,211                        // mulps         %xmm11,%xmm10
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,205                        // movaps        %xmm5,%xmm9
  .byte  69,15,89,204                        // mulps         %xmm12,%xmm9
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  65,15,194,239,1                     // cmpltps       %xmm15,%xmm5
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  102,69,15,56,20,202                 // blendvps      %xmm0,%xmm10,%xmm9
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  68,15,40,214                        // movaps        %xmm6,%xmm10
  .byte  69,15,89,210                        // mulps         %xmm10,%xmm10
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  65,15,194,247,1                     // cmpltps       %xmm15,%xmm6
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,233                        // movaps        %xmm9,%xmm5
  .byte  65,15,40,242                        // movaps        %xmm10,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_sse41
.globl _sk_to_srgb_sse41
FUNCTION(_sk_to_srgb_sse41)
_sk_to_srgb_sse41:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  68,15,82,192                        // rsqrtps       %xmm0,%xmm8
  .byte  68,15,40,29,229,63,0,0              // movaps        0x3fe5(%rip),%xmm11        # 5b20 <_sk_callback_sse41+0x4c4>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  68,15,40,37,229,63,0,0              // movaps        0x3fe5(%rip),%xmm12        # 5b30 <_sk_callback_sse41+0x4d4>
  .byte  69,15,40,248                        // movaps        %xmm8,%xmm15
  .byte  69,15,89,252                        // mulps         %xmm12,%xmm15
  .byte  68,15,40,21,229,63,0,0              // movaps        0x3fe5(%rip),%xmm10        # 5b40 <_sk_callback_sse41+0x4e4>
  .byte  69,15,88,250                        // addps         %xmm10,%xmm15
  .byte  69,15,89,248                        // mulps         %xmm8,%xmm15
  .byte  68,15,40,45,229,63,0,0              // movaps        0x3fe5(%rip),%xmm13        # 5b50 <_sk_callback_sse41+0x4f4>
  .byte  69,15,88,253                        // addps         %xmm13,%xmm15
  .byte  68,15,40,53,233,63,0,0              // movaps        0x3fe9(%rip),%xmm14        # 5b60 <_sk_callback_sse41+0x504>
  .byte  69,15,88,198                        // addps         %xmm14,%xmm8
  .byte  69,15,83,192                        // rcpps         %xmm8,%xmm8
  .byte  69,15,89,199                        // mulps         %xmm15,%xmm8
  .byte  68,15,40,61,229,63,0,0              // movaps        0x3fe5(%rip),%xmm15        # 5b70 <_sk_callback_sse41+0x514>
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  68,15,82,202                        // rsqrtps       %xmm2,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,88,197                        // addps         %xmm13,%xmm0
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  69,15,83,201                        // rcpps         %xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,194,215,1                     // cmpltps       %xmm15,%xmm2
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,68,15,56,20,201                 // blendvps      %xmm0,%xmm1,%xmm9
  .byte  15,82,195                           // rsqrtps       %xmm3,%xmm0
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  69,15,88,226                        // addps         %xmm10,%xmm12
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  65,15,88,198                        // addps         %xmm14,%xmm0
  .byte  68,15,83,208                        // rcpps         %xmm0,%xmm10
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  68,15,89,219                        // mulps         %xmm3,%xmm11
  .byte  65,15,194,223,1                     // cmpltps       %xmm15,%xmm3
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_sse41
.globl _sk_rgb_to_hsl_sse41
FUNCTION(_sk_rgb_to_hsl_sse41)
_sk_rgb_to_hsl_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,95,217                        // maxps         %xmm9,%xmm11
  .byte  68,15,95,218                        // maxps         %xmm2,%xmm11
  .byte  69,15,40,224                        // movaps        %xmm8,%xmm12
  .byte  69,15,93,225                        // minps         %xmm9,%xmm12
  .byte  68,15,93,226                        // minps         %xmm2,%xmm12
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,40,53,50,63,0,0               // movaps        0x3f32(%rip),%xmm14        # 5b80 <_sk_callback_sse41+0x524>
  .byte  68,15,94,241                        // divps         %xmm1,%xmm14
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  69,15,194,208,0                     // cmpeqps       %xmm8,%xmm10
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  68,15,194,250,1                     // cmpltps       %xmm2,%xmm15
  .byte  68,15,84,61,25,63,0,0               // andps         0x3f19(%rip),%xmm15        # 5b90 <_sk_callback_sse41+0x534>
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  65,15,92,208                        // subps         %xmm8,%xmm2
  .byte  65,15,89,214                        // mulps         %xmm14,%xmm2
  .byte  68,15,40,45,12,63,0,0               // movaps        0x3f0c(%rip),%xmm13        # 5ba0 <_sk_callback_sse41+0x544>
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  69,15,92,193                        // subps         %xmm9,%xmm8
  .byte  69,15,89,198                        // mulps         %xmm14,%xmm8
  .byte  68,15,88,5,8,63,0,0                 // addps         0x3f08(%rip),%xmm8        # 5bb0 <_sk_callback_sse41+0x554>
  .byte  102,68,15,56,20,194                 // blendvps      %xmm0,%xmm2,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,199                 // blendvps      %xmm0,%xmm15,%xmm8
  .byte  68,15,89,5,0,63,0,0                 // mulps         0x3f00(%rip),%xmm8        # 5bc0 <_sk_callback_sse41+0x564>
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  69,15,194,204,4                     // cmpneqps      %xmm12,%xmm9
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  15,40,5,244,62,0,0                  // movaps        0x3ef4(%rip),%xmm0        # 5bd0 <_sk_callback_sse41+0x574>
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,194,194,1                        // cmpltps       %xmm2,%xmm0
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  102,69,15,56,20,221                 // blendvps      %xmm0,%xmm13,%xmm11
  .byte  65,15,94,203                        // divps         %xmm11,%xmm1
  .byte  65,15,84,201                        // andps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_sse41
.globl _sk_hsl_to_rgb_sse41
FUNCTION(_sk_hsl_to_rgb_sse41)
_sk_hsl_to_rgb_sse41:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,41,92,36,168                     // movaps        %xmm3,-0x58(%rsp)
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,40,13,186,62,0,0              // movaps        0x3eba(%rip),%xmm9        # 5be0 <_sk_callback_sse41+0x584>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,194,194,2                        // cmpleps       %xmm2,%xmm0
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  102,15,56,20,235                    // blendvps      %xmm0,%xmm3,%xmm5
  .byte  15,88,234                           // addps         %xmm2,%xmm5
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  15,41,84,36,152                     // movaps        %xmm2,-0x68(%rsp)
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  68,15,92,197                        // subps         %xmm5,%xmm8
  .byte  68,15,40,53,149,62,0,0              // movaps        0x3e95(%rip),%xmm14        # 5bf0 <_sk_callback_sse41+0x594>
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  102,65,15,58,8,198,1                // roundps       $0x1,%xmm14,%xmm0
  .byte  68,15,92,240                        // subps         %xmm0,%xmm14
  .byte  68,15,40,29,142,62,0,0              // movaps        0x3e8e(%rip),%xmm11        # 5c00 <_sk_callback_sse41+0x5a4>
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  65,15,92,240                        // subps         %xmm8,%xmm6
  .byte  15,40,61,135,62,0,0                 // movaps        0x3e87(%rip),%xmm7        # 5c10 <_sk_callback_sse41+0x5b4>
  .byte  69,15,40,238                        // movaps        %xmm14,%xmm13
  .byte  68,15,89,239                        // mulps         %xmm7,%xmm13
  .byte  15,40,29,136,62,0,0                 // movaps        0x3e88(%rip),%xmm3        # 5c20 <_sk_callback_sse41+0x5c4>
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  69,15,88,224                        // addps         %xmm8,%xmm12
  .byte  102,69,15,56,20,224                 // blendvps      %xmm0,%xmm8,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  102,69,15,56,20,252                 // blendvps      %xmm0,%xmm12,%xmm15
  .byte  68,15,40,37,103,62,0,0              // movaps        0x3e67(%rip),%xmm12        # 5c30 <_sk_callback_sse41+0x5d4>
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  68,15,89,238                        // mulps         %xmm6,%xmm13
  .byte  69,15,88,232                        // addps         %xmm8,%xmm13
  .byte  102,69,15,56,20,239                 // blendvps      %xmm0,%xmm15,%xmm13
  .byte  69,15,87,246                        // xorps         %xmm14,%xmm14
  .byte  68,15,194,241,0                     // cmpeqps       %xmm1,%xmm14
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  102,65,15,58,8,194,1                // roundps       $0x1,%xmm10,%xmm0
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  102,65,15,56,20,208                 // blendvps      %xmm0,%xmm8,%xmm2
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  102,15,56,20,226                    // blendvps      %xmm0,%xmm2,%xmm4
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  102,15,56,20,204                    // blendvps      %xmm0,%xmm4,%xmm1
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  15,40,84,36,152                     // movaps        -0x68(%rsp),%xmm2
  .byte  102,15,56,20,202                    // blendvps      %xmm0,%xmm2,%xmm1
  .byte  68,15,88,21,223,61,0,0              // addps         0x3ddf(%rip),%xmm10        # 5c40 <_sk_callback_sse41+0x5e4>
  .byte  102,65,15,58,8,194,1                // roundps       $0x1,%xmm10,%xmm0
  .byte  68,15,92,208                        // subps         %xmm0,%xmm10
  .byte  69,15,194,218,2                     // cmpleps       %xmm10,%xmm11
  .byte  65,15,89,250                        // mulps         %xmm10,%xmm7
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,65,15,56,20,216                 // blendvps      %xmm0,%xmm8,%xmm3
  .byte  69,15,194,202,2                     // cmpleps       %xmm10,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,15,56,20,235                    // blendvps      %xmm0,%xmm3,%xmm5
  .byte  69,15,194,226,2                     // cmpleps       %xmm10,%xmm12
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  102,68,15,56,20,197                 // blendvps      %xmm0,%xmm5,%xmm8
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  102,68,15,56,20,194                 // blendvps      %xmm0,%xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  15,40,100,36,184                    // movaps        -0x48(%rsp),%xmm4
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_sse41
.globl _sk_scale_1_float_sse41
FUNCTION(_sk_scale_1_float_sse41)
_sk_scale_1_float_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_sse41
.globl _sk_scale_u8_sse41
FUNCTION(_sk_scale_u8_sse41)
_sk_scale_u8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,52                              // jne           1f3a <_sk_scale_u8_sse41+0x3e>
  .byte  102,69,15,56,49,4,18                // pmovzxbd      (%r10,%rdx,1),%xmm8
  .byte  102,68,15,219,5,58,61,0,0           // pand          0x3d3a(%rip),%xmm8        # 5c50 <_sk_callback_sse41+0x5f4>
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,62,61,0,0                // mulps         0x3d3e(%rip),%xmm8        # 5c60 <_sk_callback_sse41+0x604>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,59                              // je            1f82 <_sk_scale_u8_sse41+0x86>
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,23                              // je            1f69 <_sk_scale_u8_sse41+0x6d>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,181                             // jne           1f0d <_sk_scale_u8_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,69                // pshufd        $0x45,%xmm8,%xmm8
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  102,69,15,56,49,201                 // pmovzxbd      %xmm9,%xmm9
  .byte  102,69,15,58,14,193,15              // pblendw       $0xf,%xmm9,%xmm8
  .byte  235,139                             // jmp           1f0d <_sk_scale_u8_sse41+0x11>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  233,124,255,255,255                 // jmpq          1f0d <_sk_scale_u8_sse41+0x11>

HIDDEN _sk_lerp_1_float_sse41
.globl _sk_lerp_1_float_sse41
FUNCTION(_sk_lerp_1_float_sse41)
_sk_lerp_1_float_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_sse41
.globl _sk_lerp_u8_sse41
FUNCTION(_sk_lerp_u8_sse41)
_sk_lerp_u8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,72                              // jne           201b <_sk_lerp_u8_sse41+0x52>
  .byte  102,69,15,56,49,4,18                // pmovzxbd      (%r10,%rdx,1),%xmm8
  .byte  102,68,15,219,5,141,60,0,0          // pand          0x3c8d(%rip),%xmm8        # 5c70 <_sk_callback_sse41+0x614>
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,145,60,0,0               // mulps         0x3c91(%rip),%xmm8        # 5c80 <_sk_callback_sse41+0x624>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,62                              // je            2066 <_sk_lerp_u8_sse41+0x9d>
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,23                              // je            204a <_sk_lerp_u8_sse41+0x81>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,161                             // jne           1fda <_sk_lerp_u8_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,69                // pshufd        $0x45,%xmm8,%xmm8
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  102,69,15,56,49,201                 // pmovzxbd      %xmm9,%xmm9
  .byte  102,69,15,58,14,193,15              // pblendw       $0xf,%xmm9,%xmm8
  .byte  233,116,255,255,255                 // jmpq          1fda <_sk_lerp_u8_sse41+0x11>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  233,101,255,255,255                 // jmpq          1fda <_sk_lerp_u8_sse41+0x11>

HIDDEN _sk_lerp_565_sse41
.globl _sk_lerp_565_sse41
FUNCTION(_sk_lerp_565_sse41)
_sk_lerp_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,152,0,0,0                    // jne           211b <_sk_lerp_565_sse41+0xa6>
  .byte  102,69,15,56,51,20,82               // pmovzxwd      (%r10,%rdx,2),%xmm10
  .byte  102,68,15,111,5,253,59,0,0          // movdqa        0x3bfd(%rip),%xmm8        # 5c90 <_sk_callback_sse41+0x634>
  .byte  102,69,15,219,194                   // pand          %xmm10,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,252,59,0,0               // mulps         0x3bfc(%rip),%xmm8        # 5ca0 <_sk_callback_sse41+0x644>
  .byte  102,68,15,111,13,3,60,0,0           // movdqa        0x3c03(%rip),%xmm9        # 5cb0 <_sk_callback_sse41+0x654>
  .byte  102,69,15,219,202                   // pand          %xmm10,%xmm9
  .byte  69,15,91,201                        // cvtdq2ps      %xmm9,%xmm9
  .byte  68,15,89,13,2,60,0,0                // mulps         0x3c02(%rip),%xmm9        # 5cc0 <_sk_callback_sse41+0x664>
  .byte  102,68,15,219,21,9,60,0,0           // pand          0x3c09(%rip),%xmm10        # 5cd0 <_sk_callback_sse41+0x674>
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  68,15,89,21,13,60,0,0               // mulps         0x3c0d(%rip),%xmm10        # 5ce0 <_sk_callback_sse41+0x684>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,88,207                        // addps         %xmm7,%xmm9
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,95,203                        // maxps         %xmm3,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,62                              // je            2166 <_sk_lerp_565_sse41+0xf1>
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,27                              // je            214e <_sk_lerp_565_sse41+0xd9>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  15,133,77,255,255,255               // jne           208a <_sk_lerp_565_sse41+0x15>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,208,69                // pshufd        $0x45,%xmm8,%xmm10
  .byte  102,69,15,110,4,82                  // movd          (%r10,%rdx,2),%xmm8
  .byte  102,69,15,56,51,192                 // pmovzxwd      %xmm8,%xmm8
  .byte  102,69,15,58,14,208,15              // pblendw       $0xf,%xmm8,%xmm10
  .byte  233,36,255,255,255                  // jmpq          208a <_sk_lerp_565_sse41+0x15>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,68,15,110,208                   // movd          %eax,%xmm10
  .byte  233,21,255,255,255                  // jmpq          208a <_sk_lerp_565_sse41+0x15>

HIDDEN _sk_load_tables_sse41
.globl _sk_load_tables_sse41
FUNCTION(_sk_load_tables_sse41)
_sk_load_tables_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,24,1,0,0                     // jne           229b <_sk_load_tables_sse41+0x126>
  .byte  243,69,15,111,4,145                 // movdqu        (%r9,%rdx,4),%xmm8
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,15,111,5,90,59,0,0              // movdqa        0x3b5a(%rip),%xmm0        # 5cf0 <_sk_callback_sse41+0x694>
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  69,15,182,241                       // movzbl        %r9b,%r14d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,4,155                  // movss         (%rbx,%r11,4),%xmm0
  .byte  102,66,15,58,33,4,19,16             // insertps      $0x10,(%rbx,%r10,1),%xmm0
  .byte  102,66,15,58,33,4,179,32            // insertps      $0x20,(%rbx,%r14,4),%xmm0
  .byte  102,66,15,58,33,4,11,48             // insertps      $0x30,(%rbx,%r9,1),%xmm0
  .byte  102,65,15,111,200                   // movdqa        %xmm8,%xmm1
  .byte  102,15,56,0,13,21,59,0,0            // pshufb        0x3b15(%rip),%xmm1        # 5d00 <_sk_callback_sse41+0x6a4>
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  68,15,182,211                       // movzbl        %bl,%r10d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,31,16            // insertps      $0x10,(%r15,%rbx,1),%xmm1
  .byte  243,67,15,16,20,159                 // movss         (%r15,%r11,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,67,15,16,20,15                  // movss         (%r15,%r9,1),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,65,15,111,208                   // movdqa        %xmm8,%xmm2
  .byte  102,15,56,0,21,209,58,0,0           // pshufb        0x3ad1(%rip),%xmm2        # 5d10 <_sk_callback_sse41+0x6b4>
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,219                       // movzbl        %bl,%r11d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  102,65,15,58,33,20,1,16             // insertps      $0x10,(%r9,%rax,1),%xmm2
  .byte  243,67,15,16,28,153                 // movss         (%r9,%r11,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,25                  // movss         (%r9,%rbx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  102,65,15,114,208,24                // psrld         $0x18,%xmm8
  .byte  65,15,91,216                        // cvtdq2ps      %xmm8,%xmm3
  .byte  15,89,29,142,58,0,0                 // mulps         0x3a8e(%rip),%xmm3        # 5d20 <_sk_callback_sse41+0x6c4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,194                          // mov           %r8d,%r10d
  .byte  65,128,226,3                        // and           $0x3,%r10b
  .byte  65,128,250,1                        // cmp           $0x1,%r10b
  .byte  116,52                              // je            22dc <_sk_load_tables_sse41+0x167>
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,250,2                        // cmp           $0x2,%r10b
  .byte  116,23                              // je            22ca <_sk_load_tables_sse41+0x155>
  .byte  65,128,250,3                        // cmp           $0x3,%r10b
  .byte  15,133,204,254,255,255              // jne           2189 <_sk_load_tables_sse41+0x14>
  .byte  102,65,15,110,68,145,8              // movd          0x8(%r9,%rdx,4),%xmm0
  .byte  102,68,15,112,192,69                // pshufd        $0x45,%xmm0,%xmm8
  .byte  243,65,15,126,4,145                 // movq          (%r9,%rdx,4),%xmm0
  .byte  102,68,15,58,14,192,15              // pblendw       $0xf,%xmm0,%xmm8
  .byte  233,173,254,255,255                 // jmpq          2189 <_sk_load_tables_sse41+0x14>
  .byte  102,69,15,110,4,145                 // movd          (%r9,%rdx,4),%xmm8
  .byte  233,162,254,255,255                 // jmpq          2189 <_sk_load_tables_sse41+0x14>

HIDDEN _sk_load_tables_u16_be_sse41
.globl _sk_load_tables_u16_be_sse41
FUNCTION(_sk_load_tables_u16_be_sse41)
_sk_load_tables_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,99,1,0,0                     // jne           2460 <_sk_load_tables_u16_be_sse41+0x179>
  .byte  102,67,15,16,4,81                   // movupd        (%r9,%r10,2),%xmm0
  .byte  243,67,15,111,76,81,16              // movdqu        0x10(%r9,%r10,2),%xmm1
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,68,15,40,200                    // movapd        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,68,15,111,5,252,57,0,0          // movdqa        0x39fc(%rip),%xmm8        # 5d30 <_sk_callback_sse41+0x6d4>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  69,15,182,241                       // movzbl        %r9b,%r14d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,4,155                  // movss         (%rbx,%r11,4),%xmm0
  .byte  102,66,15,58,33,4,19,16             // insertps      $0x10,(%rbx,%r10,1),%xmm0
  .byte  243,66,15,16,20,179                 // movss         (%rbx,%r14,4),%xmm2
  .byte  102,15,58,33,194,32                 // insertps      $0x20,%xmm2,%xmm0
  .byte  243,66,15,16,20,11                  // movss         (%rbx,%r9,1),%xmm2
  .byte  102,15,58,33,194,48                 // insertps      $0x30,%xmm2,%xmm0
  .byte  102,15,56,0,13,171,57,0,0           // pshufb        0x39ab(%rip),%xmm1        # 5d40 <_sk_callback_sse41+0x6e4>
  .byte  102,15,56,51,201                    // pmovzxwd      %xmm1,%xmm1
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  68,15,182,211                       // movzbl        %bl,%r10d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,31,16            // insertps      $0x10,(%r15,%rbx,1),%xmm1
  .byte  243,67,15,16,20,159                 // movss         (%r15,%r11,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,67,15,16,20,15                  // movss         (%r15,%r9,1),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,65,15,56,51,208                 // pmovzxwd      %xmm8,%xmm2
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,219                       // movzbl        %bl,%r11d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  102,65,15,58,33,20,1,16             // insertps      $0x10,(%r9,%rax,1),%xmm2
  .byte  243,67,15,16,28,153                 // movss         (%r9,%r11,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,25                  // movss         (%r9,%rbx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  102,65,15,112,217,78                // pshufd        $0x4e,%xmm9,%xmm3
  .byte  102,68,15,111,195                   // movdqa        %xmm3,%xmm8
  .byte  102,65,15,113,240,8                 // psllw         $0x8,%xmm8
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,216                   // por           %xmm8,%xmm3
  .byte  102,15,56,51,219                    // pmovzxwd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,249,56,0,0                 // mulps         0x38f9(%rip),%xmm3        # 5d50 <_sk_callback_sse41+0x6f4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  242,67,15,16,4,81                   // movsd         (%r9,%r10,2),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           2479 <_sk_load_tables_u16_be_sse41+0x192>
  .byte  243,15,126,192                      // movq          %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,145,254,255,255                 // jmpq          230a <_sk_load_tables_u16_be_sse41+0x23>
  .byte  102,67,15,22,68,81,8                // movhpd        0x8(%r9,%r10,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,124,254,255,255              // jb            230a <_sk_load_tables_u16_be_sse41+0x23>
  .byte  243,67,15,126,76,81,16              // movq          0x10(%r9,%r10,2),%xmm1
  .byte  233,112,254,255,255                 // jmpq          230a <_sk_load_tables_u16_be_sse41+0x23>

HIDDEN _sk_load_tables_rgb_u16_be_sse41
.globl _sk_load_tables_rgb_u16_be_sse41
FUNCTION(_sk_load_tables_rgb_u16_be_sse41)
_sk_load_tables_rgb_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,82                        // lea           (%rdx,%rdx,2),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,83,1,0,0                     // jne           25ff <_sk_load_tables_rgb_u16_be_sse41+0x165>
  .byte  243,67,15,111,20,81                 // movdqu        (%r9,%r10,2),%xmm2
  .byte  243,67,15,111,76,81,8               // movdqu        0x8(%r9,%r10,2),%xmm1
  .byte  102,15,115,217,4                    // psrldq        $0x4,%xmm1
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,65,15,115,217,6                 // psrldq        $0x6,%xmm9
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,68,15,97,200                    // punpcklwd     %xmm0,%xmm9
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  102,68,15,111,5,110,56,0,0          // movdqa        0x386e(%rip),%xmm8        # 5d60 <_sk_callback_sse41+0x704>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  69,15,182,241                       // movzbl        %r9b,%r14d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,4,155                  // movss         (%rbx,%r11,4),%xmm0
  .byte  102,66,15,58,33,4,19,16             // insertps      $0x10,(%rbx,%r10,1),%xmm0
  .byte  243,66,15,16,28,179                 // movss         (%rbx,%r14,4),%xmm3
  .byte  102,15,58,33,195,32                 // insertps      $0x20,%xmm3,%xmm0
  .byte  243,66,15,16,28,11                  // movss         (%rbx,%r9,1),%xmm3
  .byte  102,15,58,33,195,48                 // insertps      $0x30,%xmm3,%xmm0
  .byte  102,15,56,0,13,29,56,0,0            // pshufb        0x381d(%rip),%xmm1        # 5d70 <_sk_callback_sse41+0x714>
  .byte  102,15,56,51,201                    // pmovzxwd      %xmm1,%xmm1
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  68,15,182,211                       // movzbl        %bl,%r10d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,31,16            // insertps      $0x10,(%r15,%rbx,1),%xmm1
  .byte  243,67,15,16,28,159                 // movss         (%r15,%r11,4),%xmm3
  .byte  102,15,58,33,203,32                 // insertps      $0x20,%xmm3,%xmm1
  .byte  243,67,15,16,28,15                  // movss         (%r15,%r9,1),%xmm3
  .byte  102,15,58,33,203,48                 // insertps      $0x30,%xmm3,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,65,15,105,209                   // punpckhwd     %xmm9,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,219                       // movzbl        %bl,%r11d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  102,65,15,58,33,20,1,16             // insertps      $0x10,(%r9,%rax,1),%xmm2
  .byte  243,67,15,16,28,153                 // movss         (%r9,%r11,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,25                  // movss         (%r9,%rbx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,136,55,0,0                 // movaps        0x3788(%rip),%xmm3        # 5d80 <_sk_callback_sse41+0x724>
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  102,67,15,110,20,81                 // movd          (%r9,%r10,2),%xmm2
  .byte  102,67,15,196,84,81,4,2             // pinsrw        $0x2,0x4(%r9,%r10,2),%xmm2
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,14                              // jne           2625 <_sk_load_tables_rgb_u16_be_sse41+0x18b>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  233,173,254,255,255                 // jmpq          24d2 <_sk_load_tables_rgb_u16_be_sse41+0x38>
  .byte  102,71,15,110,76,81,6               // movd          0x6(%r9,%r10,2),%xmm9
  .byte  102,71,15,196,76,81,10,2            // pinsrw        $0x2,0xa(%r9,%r10,2),%xmm9
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,24                              // jb            2656 <_sk_load_tables_rgb_u16_be_sse41+0x1bc>
  .byte  102,67,15,110,76,81,12              // movd          0xc(%r9,%r10,2),%xmm1
  .byte  102,67,15,196,76,81,16,2            // pinsrw        $0x2,0x10(%r9,%r10,2),%xmm1
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,124,254,255,255                 // jmpq          24d2 <_sk_load_tables_rgb_u16_be_sse41+0x38>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,115,254,255,255                 // jmpq          24d2 <_sk_load_tables_rgb_u16_be_sse41+0x38>

HIDDEN _sk_byte_tables_sse41
.globl _sk_byte_tables_sse41
FUNCTION(_sk_byte_tables_sse41)
_sk_byte_tables_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,32,55,0,0                // movaps        0x3720(%rip),%xmm8        # 5d90 <_sk_callback_sse41+0x734>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  76,139,32                           // mov           (%rax),%r12
  .byte  76,139,120,8                        // mov           0x8(%rax),%r15
  .byte  102,67,15,58,32,4,52,0              // pinsrb        $0x0,(%r12,%r14,1),%xmm0
  .byte  102,67,15,58,32,4,28,1              // pinsrb        $0x1,(%r12,%r11,1),%xmm0
  .byte  67,15,182,28,20                     // movzbl        (%r12,%r10,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  67,15,182,28,12                     // movzbl        (%r12,%r9,1),%ebx
  .byte  102,15,58,32,195,3                  // pinsrb        $0x3,%ebx,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,13,209,54,0,0              // movaps        0x36d1(%rip),%xmm9        # 5da0 <_sk_callback_sse41+0x744>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,58,22,203,1               // pextrq        $0x1,%xmm1,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,73,15,126,202                   // movq          %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  102,67,15,58,32,12,31,0             // pinsrb        $0x0,(%r15,%r11,1),%xmm1
  .byte  102,67,15,58,32,12,23,1             // pinsrb        $0x1,(%r15,%r10,1),%xmm1
  .byte  71,15,182,12,15                     // movzbl        (%r15,%r9,1),%r9d
  .byte  102,65,15,58,32,201,2               // pinsrb        $0x2,%r9d,%xmm1
  .byte  65,15,182,28,31                     // movzbl        (%r15,%rbx,1),%ebx
  .byte  102,15,58,32,203,3                  // pinsrb        $0x3,%ebx,%xmm1
  .byte  102,15,56,49,201                    // pmovzxbd      %xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  76,139,88,16                        // mov           0x10(%rax),%r11
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,73,15,58,22,209,1               // pextrq        $0x1,%xmm2,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,67,15,58,32,20,51,0             // pinsrb        $0x0,(%r11,%r14,1),%xmm2
  .byte  102,65,15,58,32,20,27,1             // pinsrb        $0x1,(%r11,%rbx,1),%xmm2
  .byte  67,15,182,28,19                     // movzbl        (%r11,%r10,1),%ebx
  .byte  102,15,58,32,211,2                  // pinsrb        $0x2,%ebx,%xmm2
  .byte  67,15,182,28,11                     // movzbl        (%r11,%r9,1),%ebx
  .byte  102,15,58,32,211,3                  // pinsrb        $0x3,%ebx,%xmm2
  .byte  102,15,56,49,210                    // pmovzxbd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  102,15,91,219                       // cvtps2dq      %xmm3,%xmm3
  .byte  102,72,15,58,22,219,1               // pextrq        $0x1,%xmm3,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,72,15,126,216                   // movq          %xmm3,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,67,15,58,32,28,26,0             // pinsrb        $0x0,(%r10,%r11,1),%xmm3
  .byte  102,65,15,58,32,28,2,1              // pinsrb        $0x1,(%r10,%rax,1),%xmm3
  .byte  67,15,182,4,10                      // movzbl        (%r10,%r9,1),%eax
  .byte  102,15,58,32,216,2                  // pinsrb        $0x2,%eax,%xmm3
  .byte  65,15,182,4,26                      // movzbl        (%r10,%rbx,1),%eax
  .byte  102,15,58,32,216,3                  // pinsrb        $0x3,%eax,%xmm3
  .byte  102,15,56,49,219                    // pmovzxbd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_sse41
.globl _sk_byte_tables_rgb_sse41
FUNCTION(_sk_byte_tables_rgb_sse41)
_sk_byte_tables_rgb_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,72,24                        // mov           0x18(%rax),%r9d
  .byte  65,255,201                          // dec           %r9d
  .byte  102,69,15,110,193                   // movd          %r9d,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,206                          // mov           %r9d,%r14d
  .byte  77,137,207                          // mov           %r9,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  76,139,32                           // mov           (%rax),%r12
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  102,67,15,58,32,4,52,0              // pinsrb        $0x0,(%r12,%r14,1),%xmm0
  .byte  102,67,15,58,32,4,60,1              // pinsrb        $0x1,(%r12,%r15,1),%xmm0
  .byte  67,15,182,28,20                     // movzbl        (%r12,%r10,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  67,15,182,28,28                     // movzbl        (%r12,%r11,1),%ebx
  .byte  102,15,58,32,195,3                  // pinsrb        $0x3,%ebx,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,13,73,53,0,0               // movaps        0x3549(%rip),%xmm9        # 5db0 <_sk_callback_sse41+0x754>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,58,22,203,1               // pextrq        $0x1,%xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,73,15,126,203                   // movq          %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,67,15,58,32,12,49,0             // pinsrb        $0x0,(%r9,%r14,1),%xmm1
  .byte  102,67,15,58,32,12,25,1             // pinsrb        $0x1,(%r9,%r11,1),%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  102,65,15,58,32,202,2               // pinsrb        $0x2,%r10d,%xmm1
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  102,15,58,32,203,3                  // pinsrb        $0x3,%ebx,%xmm1
  .byte  102,15,56,49,201                    // pmovzxbd      %xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,67,15,58,32,20,26,0             // pinsrb        $0x0,(%r10,%r11,1),%xmm2
  .byte  102,65,15,58,32,20,2,1              // pinsrb        $0x1,(%r10,%rax,1),%xmm2
  .byte  67,15,182,4,10                      // movzbl        (%r10,%r9,1),%eax
  .byte  102,15,58,32,208,2                  // pinsrb        $0x2,%eax,%xmm2
  .byte  65,15,182,4,26                      // movzbl        (%r10,%rbx,1),%eax
  .byte  102,15,58,32,208,3                  // pinsrb        $0x3,%eax,%xmm2
  .byte  102,15,56,49,210                    // pmovzxbd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_sse41
.globl _sk_table_r_sse41
FUNCTION(_sk_table_r_sse41)
_sk_table_r_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  102,65,15,91,192                    // cvtps2dq      %xmm8,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,65,15,16,4,153                  // movss         (%r9,%rbx,4),%xmm0
  .byte  102,67,15,58,33,4,153,16            // insertps      $0x10,(%r9,%r11,4),%xmm0
  .byte  243,71,15,16,4,145                  // movss         (%r9,%r10,4),%xmm8
  .byte  102,65,15,58,33,192,32              // insertps      $0x20,%xmm8,%xmm0
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,192,48              // insertps      $0x30,%xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_sse41
.globl _sk_table_g_sse41
FUNCTION(_sk_table_g_sse41)
_sk_table_g_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  102,65,15,91,200                    // cvtps2dq      %xmm8,%xmm1
  .byte  102,72,15,58,22,200,1               // pextrq        $0x1,%xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,203                   // movq          %xmm1,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,65,15,16,12,153                 // movss         (%r9,%rbx,4),%xmm1
  .byte  102,67,15,58,33,12,153,16           // insertps      $0x10,(%r9,%r11,4),%xmm1
  .byte  243,71,15,16,4,145                  // movss         (%r9,%r10,4),%xmm8
  .byte  102,65,15,58,33,200,32              // insertps      $0x20,%xmm8,%xmm1
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,200,48              // insertps      $0x30,%xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_sse41
.globl _sk_table_b_sse41
FUNCTION(_sk_table_b_sse41)
_sk_table_b_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,65,15,91,208                    // cvtps2dq      %xmm8,%xmm2
  .byte  102,72,15,58,22,208,1               // pextrq        $0x1,%xmm2,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,211                   // movq          %xmm2,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,65,15,16,20,153                 // movss         (%r9,%rbx,4),%xmm2
  .byte  102,67,15,58,33,20,153,16           // insertps      $0x10,(%r9,%r11,4),%xmm2
  .byte  243,71,15,16,4,145                  // movss         (%r9,%r10,4),%xmm8
  .byte  102,65,15,58,33,208,32              // insertps      $0x20,%xmm8,%xmm2
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,208,48              // insertps      $0x30,%xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_sse41
.globl _sk_table_a_sse41
FUNCTION(_sk_table_a_sse41)
_sk_table_a_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,65,15,91,216                    // cvtps2dq      %xmm8,%xmm3
  .byte  102,72,15,58,22,216,1               // pextrq        $0x1,%xmm3,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,219                   // movq          %xmm3,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,65,15,16,28,153                 // movss         (%r9,%rbx,4),%xmm3
  .byte  102,67,15,58,33,28,153,16           // insertps      $0x10,(%r9,%r11,4),%xmm3
  .byte  243,71,15,16,4,145                  // movss         (%r9,%r10,4),%xmm8
  .byte  102,65,15,58,33,216,32              // insertps      $0x20,%xmm8,%xmm3
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,216,48              // insertps      $0x30,%xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_sse41
.globl _sk_parametric_r_sse41
FUNCTION(_sk_parametric_r_sse41)
_sk_parametric_r_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,64,16                  // movss         0x10(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  65,15,194,192,2                     // cmpleps       %xmm8,%xmm0
  .byte  243,68,15,16,64,24                  // movss         0x18(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,64,8                   // movss         0x8(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,194                        // cvtdq2ps      %xmm10,%xmm8
  .byte  68,15,89,5,145,50,0,0               // mulps         0x3291(%rip),%xmm8        # 5dc0 <_sk_callback_sse41+0x764>
  .byte  68,15,84,21,153,50,0,0              // andps         0x3299(%rip),%xmm10        # 5dd0 <_sk_callback_sse41+0x774>
  .byte  68,15,86,21,161,50,0,0              // orps          0x32a1(%rip),%xmm10        # 5de0 <_sk_callback_sse41+0x784>
  .byte  68,15,88,5,169,50,0,0               // addps         0x32a9(%rip),%xmm8        # 5df0 <_sk_callback_sse41+0x794>
  .byte  68,15,40,37,177,50,0,0              // movaps        0x32b1(%rip),%xmm12        # 5e00 <_sk_callback_sse41+0x7a4>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  68,15,88,21,177,50,0,0              // addps         0x32b1(%rip),%xmm10        # 5e10 <_sk_callback_sse41+0x7b4>
  .byte  68,15,40,37,185,50,0,0              // movaps        0x32b9(%rip),%xmm12        # 5e20 <_sk_callback_sse41+0x7c4>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  69,15,89,195                        // mulps         %xmm11,%xmm8
  .byte  102,69,15,58,8,208,1                // roundps       $0x1,%xmm8,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,5,166,50,0,0               // addps         0x32a6(%rip),%xmm8        # 5e30 <_sk_callback_sse41+0x7d4>
  .byte  68,15,40,21,174,50,0,0              // movaps        0x32ae(%rip),%xmm10        # 5e40 <_sk_callback_sse41+0x7e4>
  .byte  69,15,89,211                        // mulps         %xmm11,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  68,15,40,21,174,50,0,0              // movaps        0x32ae(%rip),%xmm10        # 5e50 <_sk_callback_sse41+0x7f4>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  68,15,40,29,178,50,0,0              // movaps        0x32b2(%rip),%xmm11        # 5e60 <_sk_callback_sse41+0x804>
  .byte  69,15,94,218                        // divps         %xmm10,%xmm11
  .byte  69,15,88,216                        // addps         %xmm8,%xmm11
  .byte  68,15,89,29,178,50,0,0              // mulps         0x32b2(%rip),%xmm11        # 5e70 <_sk_callback_sse41+0x814>
  .byte  102,69,15,91,211                    // cvtps2dq      %xmm11,%xmm10
  .byte  243,68,15,16,64,20                  // movss         0x14(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,194                        // addps         %xmm10,%xmm8
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  68,15,93,5,153,50,0,0               // minps         0x3299(%rip),%xmm8        # 5e80 <_sk_callback_sse41+0x824>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_sse41
.globl _sk_parametric_g_sse41
FUNCTION(_sk_parametric_g_sse41)
_sk_parametric_g_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,72,24                     // movss         0x18(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,72,8                      // movss         0x8(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  68,15,88,217                        // addps         %xmm1,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,58,50,0,0               // mulps         0x323a(%rip),%xmm12        # 5e90 <_sk_callback_sse41+0x834>
  .byte  68,15,84,29,66,50,0,0               // andps         0x3242(%rip),%xmm11        # 5ea0 <_sk_callback_sse41+0x844>
  .byte  68,15,86,29,74,50,0,0               // orps          0x324a(%rip),%xmm11        # 5eb0 <_sk_callback_sse41+0x854>
  .byte  68,15,88,37,82,50,0,0               // addps         0x3252(%rip),%xmm12        # 5ec0 <_sk_callback_sse41+0x864>
  .byte  15,40,13,91,50,0,0                  // movaps        0x325b(%rip),%xmm1        # 5ed0 <_sk_callback_sse41+0x874>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  68,15,88,29,91,50,0,0               // addps         0x325b(%rip),%xmm11        # 5ee0 <_sk_callback_sse41+0x884>
  .byte  15,40,13,100,50,0,0                 // movaps        0x3264(%rip),%xmm1        # 5ef0 <_sk_callback_sse41+0x894>
  .byte  65,15,94,203                        // divps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,81,50,0,0               // addps         0x3251(%rip),%xmm12        # 5f00 <_sk_callback_sse41+0x8a4>
  .byte  15,40,13,90,50,0,0                  // movaps        0x325a(%rip),%xmm1        # 5f10 <_sk_callback_sse41+0x8b4>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  68,15,40,21,90,50,0,0               // movaps        0x325a(%rip),%xmm10        # 5f20 <_sk_callback_sse41+0x8c4>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,13,95,50,0,0                  // movaps        0x325f(%rip),%xmm1        # 5f30 <_sk_callback_sse41+0x8d4>
  .byte  65,15,94,202                        // divps         %xmm10,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  15,89,13,96,50,0,0                  // mulps         0x3260(%rip),%xmm1        # 5f40 <_sk_callback_sse41+0x8e4>
  .byte  102,68,15,91,209                    // cvtps2dq      %xmm1,%xmm10
  .byte  243,15,16,72,20                     // movss         0x14(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  102,65,15,56,20,201                 // blendvps      %xmm0,%xmm9,%xmm1
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,200                           // maxps         %xmm0,%xmm1
  .byte  15,93,13,75,50,0,0                  // minps         0x324b(%rip),%xmm1        # 5f50 <_sk_callback_sse41+0x8f4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_sse41
.globl _sk_parametric_b_sse41
FUNCTION(_sk_parametric_b_sse41)
_sk_parametric_b_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,80,24                     // movss         0x18(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,236,49,0,0              // mulps         0x31ec(%rip),%xmm12        # 5f60 <_sk_callback_sse41+0x904>
  .byte  68,15,84,29,244,49,0,0              // andps         0x31f4(%rip),%xmm11        # 5f70 <_sk_callback_sse41+0x914>
  .byte  68,15,86,29,252,49,0,0              // orps          0x31fc(%rip),%xmm11        # 5f80 <_sk_callback_sse41+0x924>
  .byte  68,15,88,37,4,50,0,0                // addps         0x3204(%rip),%xmm12        # 5f90 <_sk_callback_sse41+0x934>
  .byte  15,40,21,13,50,0,0                  // movaps        0x320d(%rip),%xmm2        # 5fa0 <_sk_callback_sse41+0x944>
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  68,15,88,29,13,50,0,0               // addps         0x320d(%rip),%xmm11        # 5fb0 <_sk_callback_sse41+0x954>
  .byte  15,40,21,22,50,0,0                  // movaps        0x3216(%rip),%xmm2        # 5fc0 <_sk_callback_sse41+0x964>
  .byte  65,15,94,211                        // divps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,3,50,0,0                // addps         0x3203(%rip),%xmm12        # 5fd0 <_sk_callback_sse41+0x974>
  .byte  15,40,21,12,50,0,0                  // movaps        0x320c(%rip),%xmm2        # 5fe0 <_sk_callback_sse41+0x984>
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  68,15,40,21,12,50,0,0               // movaps        0x320c(%rip),%xmm10        # 5ff0 <_sk_callback_sse41+0x994>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,21,17,50,0,0                  // movaps        0x3211(%rip),%xmm2        # 6000 <_sk_callback_sse41+0x9a4>
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,89,21,18,50,0,0                  // mulps         0x3212(%rip),%xmm2        # 6010 <_sk_callback_sse41+0x9b4>
  .byte  102,68,15,91,210                    // cvtps2dq      %xmm2,%xmm10
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  102,65,15,56,20,209                 // blendvps      %xmm0,%xmm9,%xmm2
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,93,21,253,49,0,0                 // minps         0x31fd(%rip),%xmm2        # 6020 <_sk_callback_sse41+0x9c4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_sse41
.globl _sk_parametric_a_sse41
FUNCTION(_sk_parametric_a_sse41)
_sk_parametric_a_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,219                        // mulps         %xmm3,%xmm11
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,88,8                      // movss         0x8(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  68,15,88,219                        // addps         %xmm3,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,158,49,0,0              // mulps         0x319e(%rip),%xmm12        # 6030 <_sk_callback_sse41+0x9d4>
  .byte  68,15,84,29,166,49,0,0              // andps         0x31a6(%rip),%xmm11        # 6040 <_sk_callback_sse41+0x9e4>
  .byte  68,15,86,29,174,49,0,0              // orps          0x31ae(%rip),%xmm11        # 6050 <_sk_callback_sse41+0x9f4>
  .byte  68,15,88,37,182,49,0,0              // addps         0x31b6(%rip),%xmm12        # 6060 <_sk_callback_sse41+0xa04>
  .byte  15,40,29,191,49,0,0                 // movaps        0x31bf(%rip),%xmm3        # 6070 <_sk_callback_sse41+0xa14>
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  68,15,88,29,191,49,0,0              // addps         0x31bf(%rip),%xmm11        # 6080 <_sk_callback_sse41+0xa24>
  .byte  15,40,29,200,49,0,0                 // movaps        0x31c8(%rip),%xmm3        # 6090 <_sk_callback_sse41+0xa34>
  .byte  65,15,94,219                        // divps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,181,49,0,0              // addps         0x31b5(%rip),%xmm12        # 60a0 <_sk_callback_sse41+0xa44>
  .byte  15,40,29,190,49,0,0                 // movaps        0x31be(%rip),%xmm3        # 60b0 <_sk_callback_sse41+0xa54>
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  68,15,40,21,190,49,0,0              // movaps        0x31be(%rip),%xmm10        # 60c0 <_sk_callback_sse41+0xa64>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,29,195,49,0,0                 // movaps        0x31c3(%rip),%xmm3        # 60d0 <_sk_callback_sse41+0xa74>
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  15,89,29,196,49,0,0                 // mulps         0x31c4(%rip),%xmm3        # 60e0 <_sk_callback_sse41+0xa84>
  .byte  102,68,15,91,211                    // cvtps2dq      %xmm3,%xmm10
  .byte  243,15,16,88,20                     // movss         0x14(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  102,65,15,56,20,217                 // blendvps      %xmm0,%xmm9,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  15,93,29,175,49,0,0                 // minps         0x31af(%rip),%xmm3        # 60f0 <_sk_callback_sse41+0xa94>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_sse41
.globl _sk_lab_to_xyz_sse41
FUNCTION(_sk_lab_to_xyz_sse41)
_sk_lab_to_xyz_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,89,5,171,49,0,0               // mulps         0x31ab(%rip),%xmm8        # 6100 <_sk_callback_sse41+0xaa4>
  .byte  68,15,40,13,179,49,0,0              // movaps        0x31b3(%rip),%xmm9        # 6110 <_sk_callback_sse41+0xab4>
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  15,40,5,184,49,0,0                  // movaps        0x31b8(%rip),%xmm0        # 6120 <_sk_callback_sse41+0xac4>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,88,5,182,49,0,0               // addps         0x31b6(%rip),%xmm8        # 6130 <_sk_callback_sse41+0xad4>
  .byte  68,15,89,5,190,49,0,0               // mulps         0x31be(%rip),%xmm8        # 6140 <_sk_callback_sse41+0xae4>
  .byte  15,89,13,199,49,0,0                 // mulps         0x31c7(%rip),%xmm1        # 6150 <_sk_callback_sse41+0xaf4>
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  15,89,21,204,49,0,0                 // mulps         0x31cc(%rip),%xmm2        # 6160 <_sk_callback_sse41+0xb04>
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  68,15,92,210                        // subps         %xmm2,%xmm10
  .byte  68,15,40,217                        // movaps        %xmm1,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  68,15,40,13,192,49,0,0              // movaps        0x31c0(%rip),%xmm9        # 6170 <_sk_callback_sse41+0xb14>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  15,40,21,192,49,0,0                 // movaps        0x31c0(%rip),%xmm2        # 6180 <_sk_callback_sse41+0xb24>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  68,15,40,37,197,49,0,0              // movaps        0x31c5(%rip),%xmm12        # 6190 <_sk_callback_sse41+0xb34>
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  102,65,15,56,20,203                 // blendvps      %xmm0,%xmm11,%xmm1
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  102,69,15,56,20,195                 // blendvps      %xmm0,%xmm11,%xmm8
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  69,15,89,218                        // mulps         %xmm10,%xmm11
  .byte  69,15,194,203,1                     // cmpltps       %xmm11,%xmm9
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  15,89,13,126,49,0,0                 // mulps         0x317e(%rip),%xmm1        # 61a0 <_sk_callback_sse41+0xb44>
  .byte  15,89,21,135,49,0,0                 // mulps         0x3187(%rip),%xmm2        # 61b0 <_sk_callback_sse41+0xb54>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_sse41
.globl _sk_load_a8_sse41
FUNCTION(_sk_load_a8_sse41)
_sk_load_a8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,39                              // jne           3065 <_sk_load_a8_sse41+0x31>
  .byte  102,65,15,56,49,4,18                // pmovzxbd      (%r10,%rdx,1),%xmm0
  .byte  102,15,219,5,115,49,0,0             // pand          0x3173(%rip),%xmm0        # 61c0 <_sk_callback_sse41+0xb64>
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,121,49,0,0                 // mulps         0x3179(%rip),%xmm3        # 61d0 <_sk_callback_sse41+0xb74>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,53                              // je            30a7 <_sk_load_a8_sse41+0x73>
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3091 <_sk_load_a8_sse41+0x5d>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,195                             // jne           3045 <_sk_load_a8_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  102,15,56,49,201                    // pmovzxbd      %xmm1,%xmm1
  .byte  102,15,58,14,193,15                 // pblendw       $0xf,%xmm1,%xmm0
  .byte  235,158                             // jmp           3045 <_sk_load_a8_sse41+0x11>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  235,147                             // jmp           3045 <_sk_load_a8_sse41+0x11>

HIDDEN _sk_load_a8_dst_sse41
.globl _sk_load_a8_dst_sse41
FUNCTION(_sk_load_a8_dst_sse41)
_sk_load_a8_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,39                              // jne           30e3 <_sk_load_a8_dst_sse41+0x31>
  .byte  102,65,15,56,49,36,18               // pmovzxbd      (%r10,%rdx,1),%xmm4
  .byte  102,15,219,37,21,49,0,0             // pand          0x3115(%rip),%xmm4        # 61e0 <_sk_callback_sse41+0xb84>
  .byte  15,91,252                           // cvtdq2ps      %xmm4,%xmm7
  .byte  15,89,61,27,49,0,0                  // mulps         0x311b(%rip),%xmm7        # 61f0 <_sk_callback_sse41+0xb94>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  102,15,239,237                      // pxor          %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,53                              // je            3125 <_sk_load_a8_dst_sse41+0x73>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            310f <_sk_load_a8_dst_sse41+0x5d>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,195                             // jne           30c3 <_sk_load_a8_dst_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,15,110,232                      // movd          %eax,%xmm5
  .byte  102,15,56,49,237                    // pmovzxbd      %xmm5,%xmm5
  .byte  102,15,58,14,229,15                 // pblendw       $0xf,%xmm5,%xmm4
  .byte  235,158                             // jmp           30c3 <_sk_load_a8_dst_sse41+0x11>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  235,147                             // jmp           30c3 <_sk_load_a8_dst_sse41+0x11>

HIDDEN _sk_gather_a8_sse41
.globl _sk_gather_a8_sse41
FUNCTION(_sk_gather_a8_sse41)
_sk_gather_a8_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,58,32,4,25,0              // pinsrb        $0x0,(%r9,%rbx,1),%xmm0
  .byte  102,67,15,58,32,4,25,1              // pinsrb        $0x1,(%r9,%r11,1),%xmm0
  .byte  67,15,182,28,17                     // movzbl        (%r9,%r10,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  102,15,58,32,192,3                  // pinsrb        $0x3,%eax,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,96,48,0,0                  // mulps         0x3060(%rip),%xmm3        # 6200 <_sk_callback_sse41+0xba4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_sse41
.globl _sk_store_a8_sse41
FUNCTION(_sk_store_a8_sse41)
_sk_store_a8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  68,15,40,5,83,48,0,0                // movaps        0x3053(%rip),%xmm8        # 6210 <_sk_callback_sse41+0xbb4>
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,13                              // jne           31e3 <_sk_store_a8_sse41+0x33>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  65,137,4,18                         // mov           %eax,(%r10,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,56,49,192                 // pmovzxbd      %xmm8,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,41                              // je            321f <_sk_store_a8_sse41+0x6f>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,15                              // je            320b <_sk_store_a8_sse41+0x5b>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,221                             // jne           31df <_sk_store_a8_sse41+0x2f>
  .byte  102,69,15,58,20,68,18,2,8           // pextrb        $0x8,%xmm8,0x2(%r10,%rdx,1)
  .byte  102,68,15,56,0,5,11,48,0,0          // pshufb        0x300b(%rip),%xmm8        # 6220 <_sk_callback_sse41+0xbc4>
  .byte  102,69,15,58,21,4,18,0              // pextrw        $0x0,%xmm8,(%r10,%rdx,1)
  .byte  235,192                             // jmp           31df <_sk_store_a8_sse41+0x2f>
  .byte  102,69,15,58,20,4,18,0              // pextrb        $0x0,%xmm8,(%r10,%rdx,1)
  .byte  235,182                             // jmp           31df <_sk_store_a8_sse41+0x2f>

HIDDEN _sk_load_g8_sse41
.globl _sk_load_g8_sse41
FUNCTION(_sk_load_g8_sse41)
_sk_load_g8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,42                              // jne           325d <_sk_load_g8_sse41+0x34>
  .byte  102,65,15,56,49,4,18                // pmovzxbd      (%r10,%rdx,1),%xmm0
  .byte  102,15,219,5,238,47,0,0             // pand          0x2fee(%rip),%xmm0        # 6230 <_sk_callback_sse41+0xbd4>
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,244,47,0,0                  // mulps         0x2ff4(%rip),%xmm0        # 6240 <_sk_callback_sse41+0xbe4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,251,47,0,0                 // movaps        0x2ffb(%rip),%xmm3        # 6250 <_sk_callback_sse41+0xbf4>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,53                              // je            329f <_sk_load_g8_sse41+0x76>
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3289 <_sk_load_g8_sse41+0x60>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,192                             // jne           323a <_sk_load_g8_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  102,15,56,49,201                    // pmovzxbd      %xmm1,%xmm1
  .byte  102,15,58,14,193,15                 // pblendw       $0xf,%xmm1,%xmm0
  .byte  235,155                             // jmp           323a <_sk_load_g8_sse41+0x11>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  235,144                             // jmp           323a <_sk_load_g8_sse41+0x11>

HIDDEN _sk_load_g8_dst_sse41
.globl _sk_load_g8_dst_sse41
FUNCTION(_sk_load_g8_dst_sse41)
_sk_load_g8_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,42                              // jne           32de <_sk_load_g8_dst_sse41+0x34>
  .byte  102,65,15,56,49,36,18               // pmovzxbd      (%r10,%rdx,1),%xmm4
  .byte  102,15,219,37,157,47,0,0            // pand          0x2f9d(%rip),%xmm4        # 6260 <_sk_callback_sse41+0xc04>
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,37,163,47,0,0                 // mulps         0x2fa3(%rip),%xmm4        # 6270 <_sk_callback_sse41+0xc14>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,61,170,47,0,0                 // movaps        0x2faa(%rip),%xmm7        # 6280 <_sk_callback_sse41+0xc24>
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,53                              // je            3320 <_sk_load_g8_dst_sse41+0x76>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            330a <_sk_load_g8_dst_sse41+0x60>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,192                             // jne           32bb <_sk_load_g8_dst_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,15,110,232                      // movd          %eax,%xmm5
  .byte  102,15,56,49,237                    // pmovzxbd      %xmm5,%xmm5
  .byte  102,15,58,14,229,15                 // pblendw       $0xf,%xmm5,%xmm4
  .byte  235,155                             // jmp           32bb <_sk_load_g8_dst_sse41+0x11>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  235,144                             // jmp           32bb <_sk_load_g8_dst_sse41+0x11>

HIDDEN _sk_gather_g8_sse41
.globl _sk_gather_g8_sse41
FUNCTION(_sk_gather_g8_sse41)
_sk_gather_g8_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,58,32,4,25,0              // pinsrb        $0x0,(%r9,%rbx,1),%xmm0
  .byte  102,67,15,58,32,4,25,1              // pinsrb        $0x1,(%r9,%r11,1),%xmm0
  .byte  67,15,182,28,17                     // movzbl        (%r9,%r10,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  102,15,58,32,192,3                  // pinsrb        $0x3,%eax,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,245,46,0,0                  // mulps         0x2ef5(%rip),%xmm0        # 6290 <_sk_callback_sse41+0xc34>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,252,46,0,0                 // movaps        0x2efc(%rip),%xmm3        # 62a0 <_sk_callback_sse41+0xc44>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_sse41
.globl _sk_gather_i8_sse41
FUNCTION(_sk_gather_i8_sse41)
_sk_gather_i8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,193                          // mov           %rax,%r9
  .byte  77,133,201                          // test          %r9,%r9
  .byte  116,5                               // je            33bc <_sk_gather_i8_sse41+0xf>
  .byte  76,137,200                          // mov           %r9,%rax
  .byte  235,2                               // jmp           33be <_sk_gather_i8_sse41+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,195                   // movq          %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,67,15,58,32,4,50,0              // pinsrb        $0x0,(%r10,%r14,1),%xmm0
  .byte  102,65,15,58,32,4,26,1              // pinsrb        $0x1,(%r10,%rbx,1),%xmm0
  .byte  102,67,15,58,32,4,26,2              // pinsrb        $0x2,(%r10,%r11,1),%xmm0
  .byte  102,65,15,58,32,4,2,3               // pinsrb        $0x3,(%r10,%rax,1),%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  102,73,15,58,22,194,1               // pextrq        $0x1,%xmm0,%r10
  .byte  102,72,15,126,195                   // movq          %xmm0,%rbx
  .byte  73,139,65,8                         // mov           0x8(%r9),%rax
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  102,66,15,110,28,136                // movd          (%rax,%r9,4),%xmm3
  .byte  102,15,58,34,28,24,1                // pinsrd        $0x1,(%rax,%rbx,1),%xmm3
  .byte  102,66,15,58,34,28,152,2            // pinsrd        $0x2,(%rax,%r11,4),%xmm3
  .byte  102,66,15,58,34,28,16,3             // pinsrd        $0x3,(%rax,%r10,1),%xmm3
  .byte  102,15,111,5,79,46,0,0              // movdqa        0x2e4f(%rip),%xmm0        # 62b0 <_sk_callback_sse41+0xc54>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,80,46,0,0                // movaps        0x2e50(%rip),%xmm8        # 62c0 <_sk_callback_sse41+0xc64>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,56,0,13,79,46,0,0            // pshufb        0x2e4f(%rip),%xmm1        # 62d0 <_sk_callback_sse41+0xc74>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,56,0,21,75,46,0,0            // pshufb        0x2e4b(%rip),%xmm2        # 62e0 <_sk_callback_sse41+0xc84>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_sse41
.globl _sk_load_565_sse41
FUNCTION(_sk_load_565_sse41)
_sk_load_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,80                              // jne           3509 <_sk_load_565_sse41+0x5a>
  .byte  102,65,15,56,51,20,82               // pmovzxwd      (%r10,%rdx,2),%xmm2
  .byte  102,15,111,5,40,46,0,0              // movdqa        0x2e28(%rip),%xmm0        # 62f0 <_sk_callback_sse41+0xc94>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,42,46,0,0                   // mulps         0x2e2a(%rip),%xmm0        # 6300 <_sk_callback_sse41+0xca4>
  .byte  102,15,111,13,50,46,0,0             // movdqa        0x2e32(%rip),%xmm1        # 6310 <_sk_callback_sse41+0xcb4>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,52,46,0,0                  // mulps         0x2e34(%rip),%xmm1        # 6320 <_sk_callback_sse41+0xcc4>
  .byte  102,15,219,21,60,46,0,0             // pand          0x2e3c(%rip),%xmm2        # 6330 <_sk_callback_sse41+0xcd4>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,66,46,0,0                  // mulps         0x2e42(%rip),%xmm2        # 6340 <_sk_callback_sse41+0xce4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,73,46,0,0                  // movaps        0x2e49(%rip),%xmm3        # 6350 <_sk_callback_sse41+0xcf4>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,53                              // je            354b <_sk_load_565_sse41+0x9c>
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3535 <_sk_load_565_sse41+0x86>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,154                             // jne           34c0 <_sk_load_565_sse41+0x11>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,208,69                   // pshufd        $0x45,%xmm0,%xmm2
  .byte  102,65,15,110,4,82                  // movd          (%r10,%rdx,2),%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  102,15,58,14,208,15                 // pblendw       $0xf,%xmm0,%xmm2
  .byte  233,117,255,255,255                 // jmpq          34c0 <_sk_load_565_sse41+0x11>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,208                      // movd          %eax,%xmm2
  .byte  233,103,255,255,255                 // jmpq          34c0 <_sk_load_565_sse41+0x11>

HIDDEN _sk_load_565_dst_sse41
.globl _sk_load_565_dst_sse41
FUNCTION(_sk_load_565_dst_sse41)
_sk_load_565_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,80                              // jne           35b3 <_sk_load_565_dst_sse41+0x5a>
  .byte  102,65,15,56,51,52,82               // pmovzxwd      (%r10,%rdx,2),%xmm6
  .byte  102,15,111,37,238,45,0,0            // movdqa        0x2dee(%rip),%xmm4        # 6360 <_sk_callback_sse41+0xd04>
  .byte  102,15,219,230                      // pand          %xmm6,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,37,240,45,0,0                 // mulps         0x2df0(%rip),%xmm4        # 6370 <_sk_callback_sse41+0xd14>
  .byte  102,15,111,45,248,45,0,0            // movdqa        0x2df8(%rip),%xmm5        # 6380 <_sk_callback_sse41+0xd24>
  .byte  102,15,219,238                      // pand          %xmm6,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  15,89,45,250,45,0,0                 // mulps         0x2dfa(%rip),%xmm5        # 6390 <_sk_callback_sse41+0xd34>
  .byte  102,15,219,53,2,46,0,0              // pand          0x2e02(%rip),%xmm6        # 63a0 <_sk_callback_sse41+0xd44>
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,89,53,8,46,0,0                   // mulps         0x2e08(%rip),%xmm6        # 63b0 <_sk_callback_sse41+0xd54>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,61,15,46,0,0                  // movaps        0x2e0f(%rip),%xmm7        # 63c0 <_sk_callback_sse41+0xd64>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,53                              // je            35f5 <_sk_load_565_dst_sse41+0x9c>
  .byte  102,15,239,246                      // pxor          %xmm6,%xmm6
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            35df <_sk_load_565_dst_sse41+0x86>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,154                             // jne           356a <_sk_load_565_dst_sse41+0x11>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,112,244,69                   // pshufd        $0x45,%xmm4,%xmm6
  .byte  102,65,15,110,36,82                 // movd          (%r10,%rdx,2),%xmm4
  .byte  102,15,56,51,228                    // pmovzxwd      %xmm4,%xmm4
  .byte  102,15,58,14,244,15                 // pblendw       $0xf,%xmm4,%xmm6
  .byte  233,117,255,255,255                 // jmpq          356a <_sk_load_565_dst_sse41+0x11>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,240                      // movd          %eax,%xmm6
  .byte  233,103,255,255,255                 // jmpq          356a <_sk_load_565_dst_sse41+0x11>

HIDDEN _sk_gather_565_sse41
.globl _sk_gather_565_sse41
FUNCTION(_sk_gather_565_sse41)
_sk_gather_565_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,196,4,89,0                // pinsrw        $0x0,(%r9,%rbx,2),%xmm0
  .byte  102,67,15,196,4,89,1                // pinsrw        $0x1,(%r9,%r11,2),%xmm0
  .byte  67,15,183,28,81                     // movzwl        (%r9,%r10,2),%ebx
  .byte  102,15,196,195,2                    // pinsrw        $0x2,%ebx,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,192,3                    // pinsrw        $0x3,%eax,%xmm0
  .byte  102,15,56,51,208                    // pmovzxwd      %xmm0,%xmm2
  .byte  102,15,111,5,99,45,0,0              // movdqa        0x2d63(%rip),%xmm0        # 63d0 <_sk_callback_sse41+0xd74>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,101,45,0,0                  // mulps         0x2d65(%rip),%xmm0        # 63e0 <_sk_callback_sse41+0xd84>
  .byte  102,15,111,13,109,45,0,0            // movdqa        0x2d6d(%rip),%xmm1        # 63f0 <_sk_callback_sse41+0xd94>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,111,45,0,0                 // mulps         0x2d6f(%rip),%xmm1        # 6400 <_sk_callback_sse41+0xda4>
  .byte  102,15,219,21,119,45,0,0            // pand          0x2d77(%rip),%xmm2        # 6410 <_sk_callback_sse41+0xdb4>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,125,45,0,0                 // mulps         0x2d7d(%rip),%xmm2        # 6420 <_sk_callback_sse41+0xdc4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,132,45,0,0                 // movaps        0x2d84(%rip),%xmm3        # 6430 <_sk_callback_sse41+0xdd4>
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_sse41
.globl _sk_store_565_sse41
FUNCTION(_sk_store_565_sse41)
_sk_store_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,132,45,0,0               // movaps        0x2d84(%rip),%xmm8        # 6440 <_sk_callback_sse41+0xde4>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,11                // pslld         $0xb,%xmm9
  .byte  68,15,40,21,121,45,0,0              // movaps        0x2d79(%rip),%xmm10        # 6450 <_sk_callback_sse41+0xdf4>
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,5                 // pslld         $0x5,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           370e <_sk_store_565_sse41+0x5f>
  .byte  242,68,15,17,4,80                   // movsd         %xmm8,(%rax,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,56,51,192                 // pmovzxwd      %xmm8,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,35                              // je            3744 <_sk_store_565_sse41+0x95>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,15                              // je            3736 <_sk_store_565_sse41+0x87>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,221                             // jne           370a <_sk_store_565_sse41+0x5b>
  .byte  102,68,15,58,21,68,80,4,4           // pextrw        $0x4,%xmm8,0x4(%rax,%rdx,2)
  .byte  242,69,15,112,192,232               // pshuflw       $0xe8,%xmm8,%xmm8
  .byte  102,68,15,126,4,80                  // movd          %xmm8,(%rax,%rdx,2)
  .byte  235,198                             // jmp           370a <_sk_store_565_sse41+0x5b>
  .byte  102,68,15,58,21,4,80,0              // pextrw        $0x0,%xmm8,(%rax,%rdx,2)
  .byte  235,188                             // jmp           370a <_sk_store_565_sse41+0x5b>

HIDDEN _sk_load_4444_sse41
.globl _sk_load_4444_sse41
FUNCTION(_sk_load_4444_sse41)
_sk_load_4444_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,95                              // jne           37b7 <_sk_load_4444_sse41+0x69>
  .byte  102,65,15,56,51,28,82               // pmovzxwd      (%r10,%rdx,2),%xmm3
  .byte  102,15,111,5,249,44,0,0             // movdqa        0x2cf9(%rip),%xmm0        # 6460 <_sk_callback_sse41+0xe04>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,251,44,0,0                  // mulps         0x2cfb(%rip),%xmm0        # 6470 <_sk_callback_sse41+0xe14>
  .byte  102,15,111,13,3,45,0,0              // movdqa        0x2d03(%rip),%xmm1        # 6480 <_sk_callback_sse41+0xe24>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,5,45,0,0                   // mulps         0x2d05(%rip),%xmm1        # 6490 <_sk_callback_sse41+0xe34>
  .byte  102,15,111,21,13,45,0,0             // movdqa        0x2d0d(%rip),%xmm2        # 64a0 <_sk_callback_sse41+0xe44>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,15,45,0,0                  // mulps         0x2d0f(%rip),%xmm2        # 64b0 <_sk_callback_sse41+0xe54>
  .byte  102,15,219,29,23,45,0,0             // pand          0x2d17(%rip),%xmm3        # 64c0 <_sk_callback_sse41+0xe64>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,29,45,0,0                  // mulps         0x2d1d(%rip),%xmm3        # 64d0 <_sk_callback_sse41+0xe74>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,53                              // je            37f9 <_sk_load_4444_sse41+0xab>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            37e3 <_sk_load_4444_sse41+0x95>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,139                             // jne           375f <_sk_load_4444_sse41+0x11>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  102,65,15,110,4,82                  // movd          (%r10,%rdx,2),%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  102,15,58,14,216,15                 // pblendw       $0xf,%xmm0,%xmm3
  .byte  233,102,255,255,255                 // jmpq          375f <_sk_load_4444_sse41+0x11>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,216                      // movd          %eax,%xmm3
  .byte  233,88,255,255,255                  // jmpq          375f <_sk_load_4444_sse41+0x11>

HIDDEN _sk_load_4444_dst_sse41
.globl _sk_load_4444_dst_sse41
FUNCTION(_sk_load_4444_dst_sse41)
_sk_load_4444_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,95                              // jne           3870 <_sk_load_4444_dst_sse41+0x69>
  .byte  102,65,15,56,51,60,82               // pmovzxwd      (%r10,%rdx,2),%xmm7
  .byte  102,15,111,37,192,44,0,0            // movdqa        0x2cc0(%rip),%xmm4        # 64e0 <_sk_callback_sse41+0xe84>
  .byte  102,15,219,231                      // pand          %xmm7,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,37,194,44,0,0                 // mulps         0x2cc2(%rip),%xmm4        # 64f0 <_sk_callback_sse41+0xe94>
  .byte  102,15,111,45,202,44,0,0            // movdqa        0x2cca(%rip),%xmm5        # 6500 <_sk_callback_sse41+0xea4>
  .byte  102,15,219,239                      // pand          %xmm7,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  15,89,45,204,44,0,0                 // mulps         0x2ccc(%rip),%xmm5        # 6510 <_sk_callback_sse41+0xeb4>
  .byte  102,15,111,53,212,44,0,0            // movdqa        0x2cd4(%rip),%xmm6        # 6520 <_sk_callback_sse41+0xec4>
  .byte  102,15,219,247                      // pand          %xmm7,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,89,53,214,44,0,0                 // mulps         0x2cd6(%rip),%xmm6        # 6530 <_sk_callback_sse41+0xed4>
  .byte  102,15,219,61,222,44,0,0            // pand          0x2cde(%rip),%xmm7        # 6540 <_sk_callback_sse41+0xee4>
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  15,89,61,228,44,0,0                 // mulps         0x2ce4(%rip),%xmm7        # 6550 <_sk_callback_sse41+0xef4>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,53                              // je            38b2 <_sk_load_4444_dst_sse41+0xab>
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            389c <_sk_load_4444_dst_sse41+0x95>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,139                             // jne           3818 <_sk_load_4444_dst_sse41+0x11>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,112,252,69                   // pshufd        $0x45,%xmm4,%xmm7
  .byte  102,65,15,110,36,82                 // movd          (%r10,%rdx,2),%xmm4
  .byte  102,15,56,51,228                    // pmovzxwd      %xmm4,%xmm4
  .byte  102,15,58,14,252,15                 // pblendw       $0xf,%xmm4,%xmm7
  .byte  233,102,255,255,255                 // jmpq          3818 <_sk_load_4444_dst_sse41+0x11>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,248                      // movd          %eax,%xmm7
  .byte  233,88,255,255,255                  // jmpq          3818 <_sk_load_4444_dst_sse41+0x11>

HIDDEN _sk_gather_4444_sse41
.globl _sk_gather_4444_sse41
FUNCTION(_sk_gather_4444_sse41)
_sk_gather_4444_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,196,4,89,0                // pinsrw        $0x0,(%r9,%rbx,2),%xmm0
  .byte  102,67,15,196,4,89,1                // pinsrw        $0x1,(%r9,%r11,2),%xmm0
  .byte  67,15,183,28,81                     // movzwl        (%r9,%r10,2),%ebx
  .byte  102,15,196,195,2                    // pinsrw        $0x2,%ebx,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,192,3                    // pinsrw        $0x3,%eax,%xmm0
  .byte  102,15,56,51,216                    // pmovzxwd      %xmm0,%xmm3
  .byte  102,15,111,5,54,44,0,0              // movdqa        0x2c36(%rip),%xmm0        # 6560 <_sk_callback_sse41+0xf04>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,56,44,0,0                   // mulps         0x2c38(%rip),%xmm0        # 6570 <_sk_callback_sse41+0xf14>
  .byte  102,15,111,13,64,44,0,0             // movdqa        0x2c40(%rip),%xmm1        # 6580 <_sk_callback_sse41+0xf24>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,66,44,0,0                  // mulps         0x2c42(%rip),%xmm1        # 6590 <_sk_callback_sse41+0xf34>
  .byte  102,15,111,21,74,44,0,0             // movdqa        0x2c4a(%rip),%xmm2        # 65a0 <_sk_callback_sse41+0xf44>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,76,44,0,0                  // mulps         0x2c4c(%rip),%xmm2        # 65b0 <_sk_callback_sse41+0xf54>
  .byte  102,15,219,29,84,44,0,0             // pand          0x2c54(%rip),%xmm3        # 65c0 <_sk_callback_sse41+0xf64>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,90,44,0,0                  // mulps         0x2c5a(%rip),%xmm3        # 65d0 <_sk_callback_sse41+0xf74>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_sse41
.globl _sk_store_4444_sse41
FUNCTION(_sk_store_4444_sse41)
_sk_store_4444_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,88,44,0,0                // movaps        0x2c58(%rip),%xmm8        # 65e0 <_sk_callback_sse41+0xf84>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,12                // pslld         $0xc,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,4                 // pslld         $0x4,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,193                    // orpd          %xmm9,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           39ee <_sk_store_4444_sse41+0x73>
  .byte  242,68,15,17,4,80                   // movsd         %xmm8,(%rax,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,56,51,192                 // pmovzxwd      %xmm8,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,35                              // je            3a24 <_sk_store_4444_sse41+0xa9>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,15                              // je            3a16 <_sk_store_4444_sse41+0x9b>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,221                             // jne           39ea <_sk_store_4444_sse41+0x6f>
  .byte  102,68,15,58,21,68,80,4,4           // pextrw        $0x4,%xmm8,0x4(%rax,%rdx,2)
  .byte  242,69,15,112,192,232               // pshuflw       $0xe8,%xmm8,%xmm8
  .byte  102,68,15,126,4,80                  // movd          %xmm8,(%rax,%rdx,2)
  .byte  235,198                             // jmp           39ea <_sk_store_4444_sse41+0x6f>
  .byte  102,68,15,58,21,4,80,0              // pextrw        $0x0,%xmm8,(%rax,%rdx,2)
  .byte  235,188                             // jmp           39ea <_sk_store_4444_sse41+0x6f>

HIDDEN _sk_load_8888_sse41
.globl _sk_load_8888_sse41
FUNCTION(_sk_load_8888_sse41)
_sk_load_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,88                              // jne           3a90 <_sk_load_8888_sse41+0x62>
  .byte  243,15,111,28,144                   // movdqu        (%rax,%rdx,4),%xmm3
  .byte  102,15,111,5,171,43,0,0             // movdqa        0x2bab(%rip),%xmm0        # 65f0 <_sk_callback_sse41+0xf94>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,172,43,0,0               // movaps        0x2bac(%rip),%xmm8        # 6600 <_sk_callback_sse41+0xfa4>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,56,0,13,171,43,0,0           // pshufb        0x2bab(%rip),%xmm1        # 6610 <_sk_callback_sse41+0xfb4>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,56,0,21,167,43,0,0           // pshufb        0x2ba7(%rip),%xmm2        # 6620 <_sk_callback_sse41+0xfc4>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,43                              // je            3ac8 <_sk_load_8888_sse41+0x9a>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,17                              // je            3ab8 <_sk_load_8888_sse41+0x8a>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,144                             // jne           3a3d <_sk_load_8888_sse41+0xf>
  .byte  102,15,110,68,144,8                 // movd          0x8(%rax,%rdx,4),%xmm0
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  243,15,126,4,144                    // movq          (%rax,%rdx,4),%xmm0
  .byte  102,15,58,14,216,15                 // pblendw       $0xf,%xmm0,%xmm3
  .byte  233,117,255,255,255                 // jmpq          3a3d <_sk_load_8888_sse41+0xf>
  .byte  102,15,110,28,144                   // movd          (%rax,%rdx,4),%xmm3
  .byte  233,107,255,255,255                 // jmpq          3a3d <_sk_load_8888_sse41+0xf>

HIDDEN _sk_load_8888_dst_sse41
.globl _sk_load_8888_dst_sse41
FUNCTION(_sk_load_8888_dst_sse41)
_sk_load_8888_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,88                              // jne           3b34 <_sk_load_8888_dst_sse41+0x62>
  .byte  243,15,111,60,144                   // movdqu        (%rax,%rdx,4),%xmm7
  .byte  102,15,111,37,71,43,0,0             // movdqa        0x2b47(%rip),%xmm4        # 6630 <_sk_callback_sse41+0xfd4>
  .byte  102,15,219,231                      // pand          %xmm7,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  68,15,40,5,72,43,0,0                // movaps        0x2b48(%rip),%xmm8        # 6640 <_sk_callback_sse41+0xfe4>
  .byte  65,15,89,224                        // mulps         %xmm8,%xmm4
  .byte  102,15,111,239                      // movdqa        %xmm7,%xmm5
  .byte  102,15,56,0,45,71,43,0,0            // pshufb        0x2b47(%rip),%xmm5        # 6650 <_sk_callback_sse41+0xff4>
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  65,15,89,232                        // mulps         %xmm8,%xmm5
  .byte  102,15,111,247                      // movdqa        %xmm7,%xmm6
  .byte  102,15,56,0,53,67,43,0,0            // pshufb        0x2b43(%rip),%xmm6        # 6660 <_sk_callback_sse41+0x1004>
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  65,15,89,240                        // mulps         %xmm8,%xmm6
  .byte  102,15,114,215,24                   // psrld         $0x18,%xmm7
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  65,15,89,248                        // mulps         %xmm8,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,43                              // je            3b6c <_sk_load_8888_dst_sse41+0x9a>
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,17                              // je            3b5c <_sk_load_8888_dst_sse41+0x8a>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,144                             // jne           3ae1 <_sk_load_8888_dst_sse41+0xf>
  .byte  102,15,110,100,144,8                // movd          0x8(%rax,%rdx,4),%xmm4
  .byte  102,15,112,252,69                   // pshufd        $0x45,%xmm4,%xmm7
  .byte  243,15,126,36,144                   // movq          (%rax,%rdx,4),%xmm4
  .byte  102,15,58,14,252,15                 // pblendw       $0xf,%xmm4,%xmm7
  .byte  233,117,255,255,255                 // jmpq          3ae1 <_sk_load_8888_dst_sse41+0xf>
  .byte  102,15,110,60,144                   // movd          (%rax,%rdx,4),%xmm7
  .byte  233,107,255,255,255                 // jmpq          3ae1 <_sk_load_8888_dst_sse41+0xf>

HIDDEN _sk_gather_8888_sse41
.globl _sk_gather_8888_sse41
FUNCTION(_sk_gather_8888_sse41)
_sk_gather_8888_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,58,22,195,1               // pextrq        $0x1,%xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,67,15,110,28,145                // movd          (%r9,%r10,4),%xmm3
  .byte  102,65,15,58,34,28,129,1            // pinsrd        $0x1,(%r9,%rax,4),%xmm3
  .byte  102,65,15,58,34,28,153,2            // pinsrd        $0x2,(%r9,%rbx,4),%xmm3
  .byte  102,67,15,58,34,28,153,3            // pinsrd        $0x3,(%r9,%r11,4),%xmm3
  .byte  102,15,111,5,153,42,0,0             // movdqa        0x2a99(%rip),%xmm0        # 6670 <_sk_callback_sse41+0x1014>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,154,42,0,0               // movaps        0x2a9a(%rip),%xmm8        # 6680 <_sk_callback_sse41+0x1024>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,56,0,13,153,42,0,0           // pshufb        0x2a99(%rip),%xmm1        # 6690 <_sk_callback_sse41+0x1034>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,56,0,21,149,42,0,0           // pshufb        0x2a95(%rip),%xmm2        # 66a0 <_sk_callback_sse41+0x1044>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_sse41
.globl _sk_store_8888_sse41
FUNCTION(_sk_store_8888_sse41)
_sk_store_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,128,42,0,0               // movaps        0x2a80(%rip),%xmm8        # 66b0 <_sk_callback_sse41+0x1054>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,24                // pslld         $0x18,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  102,69,15,235,194                   // por           %xmm10,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3c90 <_sk_store_8888_sse41+0x6d>
  .byte  243,68,15,127,4,144                 // movdqu        %xmm8,(%rax,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,29                              // je            3cba <_sk_store_8888_sse41+0x97>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,15                              // je            3cb2 <_sk_store_8888_sse41+0x8f>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,227                             // jne           3c8c <_sk_store_8888_sse41+0x69>
  .byte  102,68,15,58,22,68,144,8,2          // pextrd        $0x2,%xmm8,0x8(%rax,%rdx,4)
  .byte  102,68,15,214,4,144                 // movq          %xmm8,(%rax,%rdx,4)
  .byte  235,210                             // jmp           3c8c <_sk_store_8888_sse41+0x69>
  .byte  102,68,15,126,4,144                 // movd          %xmm8,(%rax,%rdx,4)
  .byte  235,202                             // jmp           3c8c <_sk_store_8888_sse41+0x69>

HIDDEN _sk_load_f16_sse41
.globl _sk_load_f16_sse41
FUNCTION(_sk_load_f16_sse41)
_sk_load_f16_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,60,1,0,0                     // jne           3e0c <_sk_load_f16_sse41+0x14a>
  .byte  102,15,16,4,208                     // movupd        (%rax,%rdx,8),%xmm0
  .byte  243,15,111,76,208,16                // movdqu        0x10(%rax,%rdx,8),%xmm1
  .byte  102,68,15,40,200                    // movapd        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,68,15,97,216                    // punpcklwd     %xmm0,%xmm11
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,65,15,56,51,203                 // pmovzxwd      %xmm11,%xmm1
  .byte  102,68,15,111,5,185,41,0,0          // movdqa        0x29b9(%rip),%xmm8        # 66c0 <_sk_callback_sse41+0x1064>
  .byte  102,15,111,209                      // movdqa        %xmm1,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,239,202                      // pxor          %xmm2,%xmm1
  .byte  102,15,111,29,180,41,0,0            // movdqa        0x29b4(%rip),%xmm3        # 66d0 <_sk_callback_sse41+0x1074>
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,56,63,195                    // pmaxud        %xmm3,%xmm0
  .byte  102,15,118,193                      // pcmpeqd       %xmm1,%xmm0
  .byte  102,15,114,241,13                   // pslld         $0xd,%xmm1
  .byte  102,15,235,202                      // por           %xmm2,%xmm1
  .byte  102,68,15,111,21,160,41,0,0         // movdqa        0x29a0(%rip),%xmm10        # 66e0 <_sk_callback_sse41+0x1084>
  .byte  102,65,15,254,202                   // paddd         %xmm10,%xmm1
  .byte  102,15,219,193                      // pand          %xmm1,%xmm0
  .byte  102,65,15,115,219,8                 // psrldq        $0x8,%xmm11
  .byte  102,69,15,56,51,219                 // pmovzxwd      %xmm11,%xmm11
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,68,15,239,218                   // pxor          %xmm2,%xmm11
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,111,203                   // movdqa        %xmm11,%xmm1
  .byte  102,15,56,63,203                    // pmaxud        %xmm3,%xmm1
  .byte  102,65,15,118,203                   // pcmpeqd       %xmm11,%xmm1
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,68,15,235,218                   // por           %xmm2,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,203                   // pand          %xmm11,%xmm1
  .byte  102,69,15,56,51,217                 // pmovzxwd      %xmm9,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,69,15,219,224                   // pand          %xmm8,%xmm12
  .byte  102,69,15,239,220                   // pxor          %xmm12,%xmm11
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,15,56,63,211                    // pmaxud        %xmm3,%xmm2
  .byte  102,65,15,118,211                   // pcmpeqd       %xmm11,%xmm2
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,211                   // pand          %xmm11,%xmm2
  .byte  102,65,15,115,217,8                 // psrldq        $0x8,%xmm9
  .byte  102,69,15,56,51,201                 // pmovzxwd      %xmm9,%xmm9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,69,15,239,200                   // pxor          %xmm8,%xmm9
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,56,63,217                 // pmaxud        %xmm9,%xmm3
  .byte  102,65,15,118,217                   // pcmpeqd       %xmm9,%xmm3
  .byte  102,65,15,114,241,13                // pslld         $0xd,%xmm9
  .byte  102,69,15,235,200                   // por           %xmm8,%xmm9
  .byte  102,69,15,254,202                   // paddd         %xmm10,%xmm9
  .byte  102,65,15,219,217                   // pand          %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,15,16,4,208                     // movsd         (%rax,%rdx,8),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           3e24 <_sk_load_f16_sse41+0x162>
  .byte  243,15,126,192                      // movq          %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,183,254,255,255                 // jmpq          3cdb <_sk_load_f16_sse41+0x19>
  .byte  102,15,22,68,208,8                  // movhpd        0x8(%rax,%rdx,8),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,163,254,255,255              // jb            3cdb <_sk_load_f16_sse41+0x19>
  .byte  243,15,126,76,208,16                // movq          0x10(%rax,%rdx,8),%xmm1
  .byte  233,152,254,255,255                 // jmpq          3cdb <_sk_load_f16_sse41+0x19>

HIDDEN _sk_load_f16_dst_sse41
.globl _sk_load_f16_dst_sse41
FUNCTION(_sk_load_f16_dst_sse41)
_sk_load_f16_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,60,1,0,0                     // jne           3f8d <_sk_load_f16_dst_sse41+0x14a>
  .byte  102,15,16,36,208                    // movupd        (%rax,%rdx,8),%xmm4
  .byte  243,15,111,108,208,16               // movdqu        0x10(%rax,%rdx,8),%xmm5
  .byte  102,68,15,40,204                    // movapd        %xmm4,%xmm9
  .byte  102,68,15,97,205                    // punpcklwd     %xmm5,%xmm9
  .byte  102,15,105,229                      // punpckhwd     %xmm5,%xmm4
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,68,15,97,220                    // punpcklwd     %xmm4,%xmm11
  .byte  102,68,15,105,204                   // punpckhwd     %xmm4,%xmm9
  .byte  102,65,15,56,51,235                 // pmovzxwd      %xmm11,%xmm5
  .byte  102,68,15,111,5,104,40,0,0          // movdqa        0x2868(%rip),%xmm8        # 66f0 <_sk_callback_sse41+0x1094>
  .byte  102,15,111,245                      // movdqa        %xmm5,%xmm6
  .byte  102,65,15,219,240                   // pand          %xmm8,%xmm6
  .byte  102,15,239,238                      // pxor          %xmm6,%xmm5
  .byte  102,15,111,61,99,40,0,0             // movdqa        0x2863(%rip),%xmm7        # 6700 <_sk_callback_sse41+0x10a4>
  .byte  102,15,114,246,16                   // pslld         $0x10,%xmm6
  .byte  102,15,111,229                      // movdqa        %xmm5,%xmm4
  .byte  102,15,56,63,231                    // pmaxud        %xmm7,%xmm4
  .byte  102,15,118,229                      // pcmpeqd       %xmm5,%xmm4
  .byte  102,15,114,245,13                   // pslld         $0xd,%xmm5
  .byte  102,15,235,238                      // por           %xmm6,%xmm5
  .byte  102,68,15,111,21,79,40,0,0          // movdqa        0x284f(%rip),%xmm10        # 6710 <_sk_callback_sse41+0x10b4>
  .byte  102,65,15,254,234                   // paddd         %xmm10,%xmm5
  .byte  102,15,219,229                      // pand          %xmm5,%xmm4
  .byte  102,65,15,115,219,8                 // psrldq        $0x8,%xmm11
  .byte  102,69,15,56,51,219                 // pmovzxwd      %xmm11,%xmm11
  .byte  102,65,15,111,243                   // movdqa        %xmm11,%xmm6
  .byte  102,65,15,219,240                   // pand          %xmm8,%xmm6
  .byte  102,68,15,239,222                   // pxor          %xmm6,%xmm11
  .byte  102,15,114,246,16                   // pslld         $0x10,%xmm6
  .byte  102,65,15,111,235                   // movdqa        %xmm11,%xmm5
  .byte  102,15,56,63,239                    // pmaxud        %xmm7,%xmm5
  .byte  102,65,15,118,235                   // pcmpeqd       %xmm11,%xmm5
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,68,15,235,222                   // por           %xmm6,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,235                   // pand          %xmm11,%xmm5
  .byte  102,69,15,56,51,217                 // pmovzxwd      %xmm9,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,69,15,219,224                   // pand          %xmm8,%xmm12
  .byte  102,69,15,239,220                   // pxor          %xmm12,%xmm11
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,111,243                   // movdqa        %xmm11,%xmm6
  .byte  102,15,56,63,247                    // pmaxud        %xmm7,%xmm6
  .byte  102,65,15,118,243                   // pcmpeqd       %xmm11,%xmm6
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,243                   // pand          %xmm11,%xmm6
  .byte  102,65,15,115,217,8                 // psrldq        $0x8,%xmm9
  .byte  102,69,15,56,51,201                 // pmovzxwd      %xmm9,%xmm9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,69,15,239,200                   // pxor          %xmm8,%xmm9
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,56,63,249                 // pmaxud        %xmm9,%xmm7
  .byte  102,65,15,118,249                   // pcmpeqd       %xmm9,%xmm7
  .byte  102,65,15,114,241,13                // pslld         $0xd,%xmm9
  .byte  102,69,15,235,200                   // por           %xmm8,%xmm9
  .byte  102,69,15,254,202                   // paddd         %xmm10,%xmm9
  .byte  102,65,15,219,249                   // pand          %xmm9,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,15,16,36,208                    // movsd         (%rax,%rdx,8),%xmm4
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           3fa5 <_sk_load_f16_dst_sse41+0x162>
  .byte  243,15,126,228                      // movq          %xmm4,%xmm4
  .byte  102,15,239,237                      // pxor          %xmm5,%xmm5
  .byte  233,183,254,255,255                 // jmpq          3e5c <_sk_load_f16_dst_sse41+0x19>
  .byte  102,15,22,100,208,8                 // movhpd        0x8(%rax,%rdx,8),%xmm4
  .byte  102,15,239,237                      // pxor          %xmm5,%xmm5
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,163,254,255,255              // jb            3e5c <_sk_load_f16_dst_sse41+0x19>
  .byte  243,15,126,108,208,16               // movq          0x10(%rax,%rdx,8),%xmm5
  .byte  233,152,254,255,255                 // jmpq          3e5c <_sk_load_f16_dst_sse41+0x19>

HIDDEN _sk_gather_f16_sse41
.globl _sk_gather_f16_sse41
FUNCTION(_sk_gather_f16_sse41)
_sk_gather_f16_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,58,22,195,1               // pextrq        $0x1,%xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,67,15,126,4,217                 // movq          (%r9,%r11,8),%xmm0
  .byte  243,65,15,126,12,217                // movq          (%r9,%rbx,8),%xmm1
  .byte  102,15,108,200                      // punpcklqdq    %xmm0,%xmm1
  .byte  243,65,15,126,4,193                 // movq          (%r9,%rax,8),%xmm0
  .byte  243,67,15,126,20,209                // movq          (%r9,%r10,8),%xmm2
  .byte  102,15,108,208                      // punpcklqdq    %xmm0,%xmm2
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,209                      // punpckhwd     %xmm1,%xmm2
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,68,15,97,218                    // punpcklwd     %xmm2,%xmm11
  .byte  102,68,15,105,202                   // punpckhwd     %xmm2,%xmm9
  .byte  102,65,15,56,51,203                 // pmovzxwd      %xmm11,%xmm1
  .byte  102,68,15,111,5,213,38,0,0          // movdqa        0x26d5(%rip),%xmm8        # 6720 <_sk_callback_sse41+0x10c4>
  .byte  102,15,111,209                      // movdqa        %xmm1,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,239,202                      // pxor          %xmm2,%xmm1
  .byte  102,15,111,29,208,38,0,0            // movdqa        0x26d0(%rip),%xmm3        # 6730 <_sk_callback_sse41+0x10d4>
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,56,63,195                    // pmaxud        %xmm3,%xmm0
  .byte  102,15,118,193                      // pcmpeqd       %xmm1,%xmm0
  .byte  102,15,114,241,13                   // pslld         $0xd,%xmm1
  .byte  102,15,235,202                      // por           %xmm2,%xmm1
  .byte  102,68,15,111,21,188,38,0,0         // movdqa        0x26bc(%rip),%xmm10        # 6740 <_sk_callback_sse41+0x10e4>
  .byte  102,65,15,254,202                   // paddd         %xmm10,%xmm1
  .byte  102,15,219,193                      // pand          %xmm1,%xmm0
  .byte  102,65,15,115,219,8                 // psrldq        $0x8,%xmm11
  .byte  102,69,15,56,51,219                 // pmovzxwd      %xmm11,%xmm11
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,68,15,239,218                   // pxor          %xmm2,%xmm11
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,111,203                   // movdqa        %xmm11,%xmm1
  .byte  102,15,56,63,203                    // pmaxud        %xmm3,%xmm1
  .byte  102,65,15,118,203                   // pcmpeqd       %xmm11,%xmm1
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,68,15,235,218                   // por           %xmm2,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,203                   // pand          %xmm11,%xmm1
  .byte  102,69,15,56,51,217                 // pmovzxwd      %xmm9,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,69,15,219,224                   // pand          %xmm8,%xmm12
  .byte  102,69,15,239,220                   // pxor          %xmm12,%xmm11
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,15,56,63,211                    // pmaxud        %xmm3,%xmm2
  .byte  102,65,15,118,211                   // pcmpeqd       %xmm11,%xmm2
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,211                   // pand          %xmm11,%xmm2
  .byte  102,65,15,115,217,8                 // psrldq        $0x8,%xmm9
  .byte  102,69,15,56,51,201                 // pmovzxwd      %xmm9,%xmm9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,69,15,239,200                   // pxor          %xmm8,%xmm9
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,56,63,217                 // pmaxud        %xmm9,%xmm3
  .byte  102,65,15,118,217                   // pcmpeqd       %xmm9,%xmm3
  .byte  102,65,15,114,241,13                // pslld         $0xd,%xmm9
  .byte  102,69,15,235,200                   // por           %xmm8,%xmm9
  .byte  102,69,15,254,202                   // paddd         %xmm10,%xmm9
  .byte  102,65,15,219,217                   // pand          %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_sse41
.globl _sk_store_f16_sse41
FUNCTION(_sk_store_f16_sse41)
_sk_store_f16_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,111,21,241,37,0,0         // movdqa        0x25f1(%rip),%xmm10        # 6750 <_sk_callback_sse41+0x10f4>
  .byte  102,68,15,111,216                   // movdqa        %xmm0,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,68,15,111,232                   // movdqa        %xmm0,%xmm13
  .byte  102,69,15,239,235                   // pxor          %xmm11,%xmm13
  .byte  102,68,15,111,13,228,37,0,0         // movdqa        0x25e4(%rip),%xmm9        # 6760 <_sk_callback_sse41+0x1104>
  .byte  102,65,15,114,211,16                // psrld         $0x10,%xmm11
  .byte  102,69,15,111,193                   // movdqa        %xmm9,%xmm8
  .byte  102,69,15,102,197                   // pcmpgtd       %xmm13,%xmm8
  .byte  102,65,15,114,213,13                // psrld         $0xd,%xmm13
  .byte  102,68,15,111,37,213,37,0,0         // movdqa        0x25d5(%rip),%xmm12        # 6770 <_sk_callback_sse41+0x1114>
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,221                   // paddd         %xmm13,%xmm11
  .byte  102,69,15,223,195                   // pandn         %xmm11,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,68,15,111,217                   // movdqa        %xmm1,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,68,15,111,241                   // movdqa        %xmm1,%xmm14
  .byte  102,69,15,239,243                   // pxor          %xmm11,%xmm14
  .byte  102,65,15,114,211,16                // psrld         $0x10,%xmm11
  .byte  102,69,15,111,233                   // movdqa        %xmm9,%xmm13
  .byte  102,69,15,102,238                   // pcmpgtd       %xmm14,%xmm13
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,222                   // paddd         %xmm14,%xmm11
  .byte  102,69,15,223,235                   // pandn         %xmm11,%xmm13
  .byte  102,69,15,56,43,237                 // packusdw      %xmm13,%xmm13
  .byte  102,68,15,111,242                   // movdqa        %xmm2,%xmm14
  .byte  102,69,15,219,242                   // pand          %xmm10,%xmm14
  .byte  102,68,15,111,250                   // movdqa        %xmm2,%xmm15
  .byte  102,69,15,239,254                   // pxor          %xmm14,%xmm15
  .byte  102,65,15,114,214,16                // psrld         $0x10,%xmm14
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,69,15,102,223                   // pcmpgtd       %xmm15,%xmm11
  .byte  102,65,15,114,215,13                // psrld         $0xd,%xmm15
  .byte  102,69,15,235,244                   // por           %xmm12,%xmm14
  .byte  102,69,15,254,247                   // paddd         %xmm15,%xmm14
  .byte  102,69,15,223,222                   // pandn         %xmm14,%xmm11
  .byte  102,69,15,56,43,219                 // packusdw      %xmm11,%xmm11
  .byte  102,68,15,219,211                   // pand          %xmm3,%xmm10
  .byte  102,68,15,111,243                   // movdqa        %xmm3,%xmm14
  .byte  102,69,15,239,242                   // pxor          %xmm10,%xmm14
  .byte  102,65,15,114,210,16                // psrld         $0x10,%xmm10
  .byte  102,69,15,102,206                   // pcmpgtd       %xmm14,%xmm9
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,212                   // por           %xmm12,%xmm10
  .byte  102,69,15,254,214                   // paddd         %xmm14,%xmm10
  .byte  102,69,15,223,202                   // pandn         %xmm10,%xmm9
  .byte  102,69,15,56,43,201                 // packusdw      %xmm9,%xmm9
  .byte  102,69,15,97,197                    // punpcklwd     %xmm13,%xmm8
  .byte  102,69,15,97,217                    // punpcklwd     %xmm9,%xmm11
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,69,15,98,203                    // punpckldq     %xmm11,%xmm9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,21                              // jne           4291 <_sk_store_f16_sse41+0x140>
  .byte  68,15,17,12,208                     // movups        %xmm9,(%rax,%rdx,8)
  .byte  102,69,15,106,195                   // punpckhdq     %xmm11,%xmm8
  .byte  243,68,15,127,68,208,16             // movdqu        %xmm8,0x10(%rax,%rdx,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,214,12,208                // movq          %xmm9,(%rax,%rdx,8)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            428d <_sk_store_f16_sse41+0x13c>
  .byte  102,68,15,23,76,208,8               // movhpd        %xmm9,0x8(%rax,%rdx,8)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            428d <_sk_store_f16_sse41+0x13c>
  .byte  102,69,15,106,195                   // punpckhdq     %xmm11,%xmm8
  .byte  102,68,15,214,68,208,16             // movq          %xmm8,0x10(%rax,%rdx,8)
  .byte  235,213                             // jmp           428d <_sk_store_f16_sse41+0x13c>

HIDDEN _sk_load_u16_be_sse41
.globl _sk_load_u16_be_sse41
FUNCTION(_sk_load_u16_be_sse41)
_sk_load_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,185,0,0,0                    // jne           4387 <_sk_load_u16_be_sse41+0xcf>
  .byte  102,65,15,16,4,65                   // movupd        (%r9,%rax,2),%xmm0
  .byte  243,65,15,111,76,65,16              // movdqu        0x10(%r9,%rax,2),%xmm1
  .byte  102,15,40,208                       // movapd        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,15,56,51,193                    // pmovzxwd      %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,102,36,0,0               // movaps        0x2466(%rip),%xmm8        # 6780 <_sk_callback_sse41+0x1124>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,15,56,51,203                    // pmovzxwd      %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,65,15,235,209                   // por           %xmm9,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,68,15,111,203                   // movdqa        %xmm3,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,217                   // por           %xmm9,%xmm3
  .byte  102,15,56,51,219                    // pmovzxwd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,65,15,16,4,65                   // movsd         (%r9,%rax,2),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           43a0 <_sk_load_u16_be_sse41+0xe8>
  .byte  243,15,126,192                      // movq          %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,59,255,255,255                  // jmpq          42db <_sk_load_u16_be_sse41+0x23>
  .byte  102,65,15,22,68,65,8                // movhpd        0x8(%r9,%rax,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,38,255,255,255               // jb            42db <_sk_load_u16_be_sse41+0x23>
  .byte  243,65,15,126,76,65,16              // movq          0x10(%r9,%rax,2),%xmm1
  .byte  233,26,255,255,255                  // jmpq          42db <_sk_load_u16_be_sse41+0x23>

HIDDEN _sk_load_rgb_u16_be_sse41
.globl _sk_load_rgb_u16_be_sse41
FUNCTION(_sk_load_rgb_u16_be_sse41)
_sk_load_rgb_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,82                         // lea           (%rdx,%rdx,2),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,170,0,0,0                    // jne           447d <_sk_load_rgb_u16_be_sse41+0xbc>
  .byte  243,65,15,111,20,65                 // movdqu        (%r9,%rax,2),%xmm2
  .byte  243,65,15,111,92,65,8               // movdqu        0x8(%r9,%rax,2),%xmm3
  .byte  102,15,115,219,4                    // psrldq        $0x4,%xmm3
  .byte  102,15,111,194                      // movdqa        %xmm2,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,115,217,6                    // psrldq        $0x6,%xmm1
  .byte  102,15,97,211                       // punpcklwd     %xmm3,%xmm2
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,15,56,51,193                    // pmovzxwd      %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,94,35,0,0                // movaps        0x235e(%rip),%xmm8        # 6790 <_sk_callback_sse41+0x1134>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,15,56,51,203                    // pmovzxwd      %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,218                      // movdqa        %xmm2,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,15,235,211                      // por           %xmm3,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,37,35,0,0                  // movaps        0x2325(%rip),%xmm3        # 67a0 <_sk_callback_sse41+0x1144>
  .byte  255,224                             // jmpq          *%rax
  .byte  102,65,15,110,20,65                 // movd          (%r9,%rax,2),%xmm2
  .byte  102,65,15,196,84,65,4,2             // pinsrw        $0x2,0x4(%r9,%rax,2),%xmm2
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           44a2 <_sk_load_rgb_u16_be_sse41+0xe1>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,85,255,255,255                  // jmpq          43f7 <_sk_load_rgb_u16_be_sse41+0x36>
  .byte  102,65,15,110,68,65,6               // movd          0x6(%r9,%rax,2),%xmm0
  .byte  102,65,15,196,68,65,10,2            // pinsrw        $0x2,0xa(%r9,%rax,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,24                              // jb            44d3 <_sk_load_rgb_u16_be_sse41+0x112>
  .byte  102,65,15,110,92,65,12              // movd          0xc(%r9,%rax,2),%xmm3
  .byte  102,65,15,196,92,65,16,2            // pinsrw        $0x2,0x10(%r9,%rax,2),%xmm3
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,36,255,255,255                  // jmpq          43f7 <_sk_load_rgb_u16_be_sse41+0x36>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  233,27,255,255,255                  // jmpq          43f7 <_sk_load_rgb_u16_be_sse41+0x36>

HIDDEN _sk_store_u16_be_sse41
.globl _sk_store_u16_be_sse41
FUNCTION(_sk_store_u16_be_sse41)
_sk_store_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  68,15,40,21,191,34,0,0              // movaps        0x22bf(%rip),%xmm10        # 67b0 <_sk_callback_sse41+0x1154>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,65,15,113,208,8                 // psrlw         $0x8,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  102,69,15,91,217                    // cvtps2dq      %xmm9,%xmm11
  .byte  102,69,15,56,43,219                 // packusdw      %xmm11,%xmm11
  .byte  102,69,15,111,203                   // movdqa        %xmm11,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,65,15,113,211,8                 // psrlw         $0x8,%xmm11
  .byte  102,69,15,235,217                   // por           %xmm9,%xmm11
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,69,15,56,43,201                 // packusdw      %xmm9,%xmm9
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,209,8                 // psrlw         $0x8,%xmm9
  .byte  102,69,15,235,204                   // por           %xmm12,%xmm9
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,69,15,56,43,210                 // packusdw      %xmm10,%xmm10
  .byte  102,69,15,111,226                   // movdqa        %xmm10,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,210,8                 // psrlw         $0x8,%xmm10
  .byte  102,69,15,235,212                   // por           %xmm12,%xmm10
  .byte  102,69,15,97,195                    // punpcklwd     %xmm11,%xmm8
  .byte  102,69,15,97,202                    // punpcklwd     %xmm10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,69,15,98,209                    // punpckldq     %xmm9,%xmm10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,21                              // jne           45bf <_sk_store_u16_be_sse41+0xe3>
  .byte  69,15,17,20,65                      // movups        %xmm10,(%r9,%rax,2)
  .byte  102,69,15,106,193                   // punpckhdq     %xmm9,%xmm8
  .byte  243,69,15,127,68,65,16              // movdqu        %xmm8,0x10(%r9,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,214,20,65                 // movq          %xmm10,(%r9,%rax,2)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            45bb <_sk_store_u16_be_sse41+0xdf>
  .byte  102,69,15,23,84,65,8                // movhpd        %xmm10,0x8(%r9,%rax,2)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            45bb <_sk_store_u16_be_sse41+0xdf>
  .byte  102,69,15,106,193                   // punpckhdq     %xmm9,%xmm8
  .byte  102,69,15,214,68,65,16              // movq          %xmm8,0x10(%r9,%rax,2)
  .byte  235,213                             // jmp           45bb <_sk_store_u16_be_sse41+0xdf>

HIDDEN _sk_load_f32_sse41
.globl _sk_load_f32_sse41
FUNCTION(_sk_load_f32_sse41)
_sk_load_f32_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  69,15,16,4,2                        // movups        (%r10,%rax,1),%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           4646 <_sk_load_f32_sse41+0x60>
  .byte  67,15,16,68,138,16                  // movups        0x10(%r10,%r9,4),%xmm0
  .byte  67,15,16,92,138,32                  // movups        0x20(%r10,%r9,4),%xmm3
  .byte  71,15,16,76,138,48                  // movups        0x30(%r10,%r9,4),%xmm9
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,20,208                           // unpcklps      %xmm0,%xmm2
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  68,15,21,192                        // unpckhps      %xmm0,%xmm8
  .byte  65,15,21,217                        // unpckhps      %xmm9,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,202                           // movhlps       %xmm2,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  65,15,18,216                        // movhlps       %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,8                               // jne           4658 <_sk_load_f32_sse41+0x72>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  235,190                             // jmp           4616 <_sk_load_f32_sse41+0x30>
  .byte  67,15,16,68,138,16                  // movups        0x10(%r10,%r9,4),%xmm0
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,8                               // jb            466c <_sk_load_f32_sse41+0x86>
  .byte  67,15,16,92,138,32                  // movups        0x20(%r10,%r9,4),%xmm3
  .byte  235,170                             // jmp           4616 <_sk_load_f32_sse41+0x30>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  235,165                             // jmp           4616 <_sk_load_f32_sse41+0x30>

HIDDEN _sk_load_f32_dst_sse41
.globl _sk_load_f32_dst_sse41
FUNCTION(_sk_load_f32_dst_sse41)
_sk_load_f32_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  69,15,16,4,2                        // movups        (%r10,%rax,1),%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           46d1 <_sk_load_f32_dst_sse41+0x60>
  .byte  67,15,16,100,138,16                 // movups        0x10(%r10,%r9,4),%xmm4
  .byte  67,15,16,124,138,32                 // movups        0x20(%r10,%r9,4),%xmm7
  .byte  71,15,16,76,138,48                  // movups        0x30(%r10,%r9,4),%xmm9
  .byte  65,15,40,240                        // movaps        %xmm8,%xmm6
  .byte  15,20,244                           // unpcklps      %xmm4,%xmm6
  .byte  15,40,239                           // movaps        %xmm7,%xmm5
  .byte  65,15,20,233                        // unpcklps      %xmm9,%xmm5
  .byte  68,15,21,196                        // unpckhps      %xmm4,%xmm8
  .byte  65,15,21,249                        // unpckhps      %xmm9,%xmm7
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  102,15,20,229                       // unpcklpd      %xmm5,%xmm4
  .byte  15,18,238                           // movhlps       %xmm6,%xmm5
  .byte  65,15,40,240                        // movaps        %xmm8,%xmm6
  .byte  102,15,20,247                       // unpcklpd      %xmm7,%xmm6
  .byte  65,15,18,248                        // movhlps       %xmm8,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,8                               // jne           46e3 <_sk_load_f32_dst_sse41+0x72>
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  235,190                             // jmp           46a1 <_sk_load_f32_dst_sse41+0x30>
  .byte  67,15,16,100,138,16                 // movups        0x10(%r10,%r9,4),%xmm4
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,8                               // jb            46f7 <_sk_load_f32_dst_sse41+0x86>
  .byte  67,15,16,124,138,32                 // movups        0x20(%r10,%r9,4),%xmm7
  .byte  235,170                             // jmp           46a1 <_sk_load_f32_dst_sse41+0x30>
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  235,165                             // jmp           46a1 <_sk_load_f32_dst_sse41+0x30>

HIDDEN _sk_store_f32_sse41
.globl _sk_store_f32_sse41
FUNCTION(_sk_store_f32_sse41)
_sk_store_f32_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,20,195                        // unpcklps      %xmm3,%xmm8
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,21,209                        // unpckhps      %xmm1,%xmm10
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  68,15,21,219                        // unpckhps      %xmm3,%xmm11
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  102,69,15,20,224                    // unpcklpd      %xmm8,%xmm12
  .byte  69,15,18,193                        // movhlps       %xmm9,%xmm8
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  102,69,15,20,203                    // unpcklpd      %xmm11,%xmm9
  .byte  102,69,15,17,36,2                   // movupd        %xmm12,(%r10,%rax,1)
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,29                              // jne           476e <_sk_store_f32_sse41+0x72>
  .byte  102,69,15,21,211                    // unpckhpd      %xmm11,%xmm10
  .byte  71,15,17,68,138,16                  // movups        %xmm8,0x10(%r10,%r9,4)
  .byte  102,71,15,17,76,138,32              // movupd        %xmm9,0x20(%r10,%r9,4)
  .byte  102,71,15,17,84,138,48              // movupd        %xmm10,0x30(%r10,%r9,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,246                             // je            476a <_sk_store_f32_sse41+0x6e>
  .byte  71,15,17,68,138,16                  // movups        %xmm8,0x10(%r10,%r9,4)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,234                             // jb            476a <_sk_store_f32_sse41+0x6e>
  .byte  102,71,15,17,76,138,32              // movupd        %xmm9,0x20(%r10,%r9,4)
  .byte  235,225                             // jmp           476a <_sk_store_f32_sse41+0x6e>

HIDDEN _sk_clamp_x_sse41
.globl _sk_clamp_x_sse41
FUNCTION(_sk_clamp_x_sse41)
_sk_clamp_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,15,118,192                      // pcmpeqd       %xmm0,%xmm0
  .byte  102,65,15,254,193                   // paddd         %xmm9,%xmm0
  .byte  68,15,93,192                        // minps         %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_sse41
.globl _sk_clamp_y_sse41
FUNCTION(_sk_clamp_y_sse41)
_sk_clamp_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,193                        // maxps         %xmm1,%xmm8
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,15,118,201                      // pcmpeqd       %xmm1,%xmm1
  .byte  102,65,15,254,201                   // paddd         %xmm9,%xmm1
  .byte  68,15,93,193                        // minps         %xmm1,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_sse41
.globl _sk_repeat_x_sse41
FUNCTION(_sk_repeat_x_sse41)
_sk_repeat_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,193                        // minps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_sse41
.globl _sk_repeat_y_sse41
FUNCTION(_sk_repeat_y_sse41)
_sk_repeat_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,201                        // minps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_sse41
.globl _sk_mirror_x_sse41
FUNCTION(_sk_mirror_x_sse41)
_sk_mirror_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  243,69,15,88,192                    // addss         %xmm8,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  243,68,15,89,13,0,35,0,0            // mulss         0x2300(%rip),%xmm9        # 6b80 <_sk_callback_sse41+0x1524>
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  102,69,15,118,192                   // pcmpeqd       %xmm8,%xmm8
  .byte  102,69,15,254,194                   // paddd         %xmm10,%xmm8
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_sse41
.globl _sk_mirror_y_sse41
FUNCTION(_sk_mirror_y_sse41)
_sk_mirror_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  243,69,15,88,192                    // addss         %xmm8,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  243,68,15,89,13,157,34,0,0          // mulss         0x229d(%rip),%xmm9        # 6b84 <_sk_callback_sse41+0x1528>
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  65,15,84,200                        // andps         %xmm8,%xmm1
  .byte  102,69,15,118,192                   // pcmpeqd       %xmm8,%xmm8
  .byte  102,69,15,254,194                   // paddd         %xmm10,%xmm8
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_1_sse41
.globl _sk_clamp_x_1_sse41
FUNCTION(_sk_clamp_x_1_sse41)
_sk_clamp_x_1_sse41:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  68,15,93,5,143,30,0,0               // minps         0x1e8f(%rip),%xmm8        # 67c0 <_sk_callback_sse41+0x1164>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_1_sse41
.globl _sk_repeat_x_1_sse41
FUNCTION(_sk_repeat_x_1_sse41)
_sk_repeat_x_1_sse41:
  .byte  102,68,15,58,8,192,1                // roundps       $0x1,%xmm0,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_1_sse41
.globl _sk_mirror_x_1_sse41
FUNCTION(_sk_mirror_x_1_sse41)
_sk_mirror_x_1_sse41:
  .byte  68,15,40,5,128,30,0,0               // movaps        0x1e80(%rip),%xmm8        # 67d0 <_sk_callback_sse41+0x1174>
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,13,132,30,0,0              // movaps        0x1e84(%rip),%xmm9        # 67e0 <_sk_callback_sse41+0x1184>
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_sse41
.globl _sk_luminance_to_alpha_sse41
FUNCTION(_sk_luminance_to_alpha_sse41)
_sk_luminance_to_alpha_sse41:
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,89,5,99,30,0,0                   // mulps         0x1e63(%rip),%xmm0        # 67f0 <_sk_callback_sse41+0x1194>
  .byte  15,89,13,108,30,0,0                 // mulps         0x1e6c(%rip),%xmm1        # 6800 <_sk_callback_sse41+0x11a4>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,29,114,30,0,0                 // mulps         0x1e72(%rip),%xmm3        # 6810 <_sk_callback_sse41+0x11b4>
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_sse41
.globl _sk_matrix_2x3_sse41
FUNCTION(_sk_matrix_2x3_sse41)
_sk_matrix_2x3_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,16                  // movss         0x10(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_sse41
.globl _sk_matrix_3x4_sse41
FUNCTION(_sk_matrix_3x4_sse41)
_sk_matrix_3x4_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,36                  // movss         0x24(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_sse41
.globl _sk_matrix_4x5_sse41
FUNCTION(_sk_matrix_4x5_sse41)
_sk_matrix_4x5_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,32                  // movss         0x20(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,48                  // movss         0x30(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,64                 // movss         0x40(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,20                  // movss         0x14(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,36                  // movss         0x24(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,52                  // movss         0x34(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,68                 // movss         0x44(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,56                 // movss         0x38(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,72                 // movss         0x48(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  243,68,15,16,88,12                  // movss         0xc(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,28                  // movss         0x1c(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,60                 // movss         0x3c(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  243,68,15,16,120,76                 // movss         0x4c(%rax),%xmm15
  .byte  69,15,198,255,0                     // shufps        $0x0,%xmm15,%xmm15
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,247                        // addps         %xmm15,%xmm14
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x3_sse41
.globl _sk_matrix_4x3_sse41
FUNCTION(_sk_matrix_4x3_sse41)
_sk_matrix_4x3_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,32                     // movss         0x20(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,36                     // movss         0x24(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,80,40                  // movss         0x28(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,80,28                  // movss         0x1c(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,44                  // movss         0x2c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_sse41
.globl _sk_matrix_perspective_sse41
FUNCTION(_sk_matrix_perspective_sse41)
_sk_matrix_perspective_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  243,68,15,16,80,24                  // movss         0x18(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,83,202                        // rcpps         %xmm10,%xmm1
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_gradient_sse41
.globl _sk_evenly_spaced_gradient_sse41
FUNCTION(_sk_evenly_spaced_gradient_sse41)
_sk_evenly_spaced_gradient_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  76,139,112,8                        // mov           0x8(%rax),%r14
  .byte  72,255,203                          // dec           %rbx
  .byte  120,7                               // js            4ddc <_sk_evenly_spaced_gradient_sse41+0x1a>
  .byte  243,72,15,42,203                    // cvtsi2ss      %rbx,%xmm1
  .byte  235,21                              // jmp           4df1 <_sk_evenly_spaced_gradient_sse41+0x2f>
  .byte  73,137,217                          // mov           %rbx,%r9
  .byte  73,209,233                          // shr           %r9
  .byte  131,227,1                           // and           $0x1,%ebx
  .byte  76,9,203                            // or            %r9,%rbx
  .byte  243,72,15,42,203                    // cvtsi2ss      %rbx,%xmm1
  .byte  243,15,88,201                       // addss         %xmm1,%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,203                   // movq          %xmm1,%r11
  .byte  69,137,223                          // mov           %r11d,%r15d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,190                  // movss         (%r14,%r15,4),%xmm8
  .byte  102,71,15,58,33,4,158,16            // insertps      $0x10,(%r14,%r11,4),%xmm8
  .byte  243,67,15,16,12,150                 // movss         (%r14,%r10,4),%xmm1
  .byte  102,68,15,58,33,193,32              // insertps      $0x20,%xmm1,%xmm8
  .byte  243,67,15,16,12,142                 // movss         (%r14,%r9,4),%xmm1
  .byte  102,68,15,58,33,193,48              // insertps      $0x30,%xmm1,%xmm8
  .byte  72,139,88,40                        // mov           0x28(%rax),%rbx
  .byte  243,70,15,16,12,187                 // movss         (%rbx,%r15,4),%xmm9
  .byte  102,70,15,58,33,12,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm9
  .byte  243,66,15,16,12,147                 // movss         (%rbx,%r10,4),%xmm1
  .byte  102,68,15,58,33,201,32              // insertps      $0x20,%xmm1,%xmm9
  .byte  243,66,15,16,12,139                 // movss         (%rbx,%r9,4),%xmm1
  .byte  102,68,15,58,33,201,48              // insertps      $0x30,%xmm1,%xmm9
  .byte  72,139,88,16                        // mov           0x10(%rax),%rbx
  .byte  243,66,15,16,12,187                 // movss         (%rbx,%r15,4),%xmm1
  .byte  102,66,15,58,33,12,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm1
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,66,15,16,20,139                 // movss         (%rbx,%r9,4),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  72,139,88,48                        // mov           0x30(%rax),%rbx
  .byte  243,70,15,16,20,187                 // movss         (%rbx,%r15,4),%xmm10
  .byte  102,70,15,58,33,20,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm10
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  102,68,15,58,33,210,32              // insertps      $0x20,%xmm2,%xmm10
  .byte  243,66,15,16,20,139                 // movss         (%rbx,%r9,4),%xmm2
  .byte  102,68,15,58,33,210,48              // insertps      $0x30,%xmm2,%xmm10
  .byte  72,139,88,24                        // mov           0x18(%rax),%rbx
  .byte  243,66,15,16,20,187                 // movss         (%rbx,%r15,4),%xmm2
  .byte  102,66,15,58,33,20,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm2
  .byte  243,66,15,16,28,147                 // movss         (%rbx,%r10,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,66,15,16,28,139                 // movss         (%rbx,%r9,4),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  72,139,88,56                        // mov           0x38(%rax),%rbx
  .byte  243,70,15,16,28,187                 // movss         (%rbx,%r15,4),%xmm11
  .byte  102,70,15,58,33,28,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm11
  .byte  243,66,15,16,28,147                 // movss         (%rbx,%r10,4),%xmm3
  .byte  102,68,15,58,33,219,32              // insertps      $0x20,%xmm3,%xmm11
  .byte  243,66,15,16,28,139                 // movss         (%rbx,%r9,4),%xmm3
  .byte  102,68,15,58,33,219,48              // insertps      $0x30,%xmm3,%xmm11
  .byte  72,139,88,32                        // mov           0x20(%rax),%rbx
  .byte  243,66,15,16,28,187                 // movss         (%rbx,%r15,4),%xmm3
  .byte  102,66,15,58,33,28,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm3
  .byte  243,70,15,16,36,147                 // movss         (%rbx,%r10,4),%xmm12
  .byte  102,65,15,58,33,220,32              // insertps      $0x20,%xmm12,%xmm3
  .byte  243,70,15,16,36,139                 // movss         (%rbx,%r9,4),%xmm12
  .byte  102,65,15,58,33,220,48              // insertps      $0x30,%xmm12,%xmm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  243,70,15,16,36,184                 // movss         (%rax,%r15,4),%xmm12
  .byte  102,70,15,58,33,36,152,16           // insertps      $0x10,(%rax,%r11,4),%xmm12
  .byte  243,70,15,16,44,144                 // movss         (%rax,%r10,4),%xmm13
  .byte  102,69,15,58,33,229,32              // insertps      $0x20,%xmm13,%xmm12
  .byte  243,70,15,16,44,136                 // movss         (%rax,%r9,4),%xmm13
  .byte  102,69,15,58,33,229,48              // insertps      $0x30,%xmm13,%xmm12
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gauss_a_to_rgba_sse41
.globl _sk_gauss_a_to_rgba_sse41
FUNCTION(_sk_gauss_a_to_rgba_sse41)
_sk_gauss_a_to_rgba_sse41:
  .byte  15,40,5,129,24,0,0                  // movaps        0x1881(%rip),%xmm0        # 6820 <_sk_callback_sse41+0x11c4>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,135,24,0,0                  // addps         0x1887(%rip),%xmm0        # 6830 <_sk_callback_sse41+0x11d4>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,141,24,0,0                  // addps         0x188d(%rip),%xmm0        # 6840 <_sk_callback_sse41+0x11e4>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,147,24,0,0                  // addps         0x1893(%rip),%xmm0        # 6850 <_sk_callback_sse41+0x11f4>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,153,24,0,0                  // addps         0x1899(%rip),%xmm0        # 6860 <_sk_callback_sse41+0x1204>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_sse41
.globl _sk_gradient_sse41
FUNCTION(_sk_gradient_sse41)
_sk_gradient_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,249,2                        // cmp           $0x2,%r9
  .byte  114,50                              // jb            501a <_sk_gradient_sse41+0x46>
  .byte  72,139,88,72                        // mov           0x48(%rax),%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  15,40,21,114,24,0,0                 // movaps        0x1872(%rip),%xmm2        # 6870 <_sk_callback_sse41+0x1214>
  .byte  243,15,16,27                        // movss         (%rbx),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,194,216,2                        // cmpleps       %xmm0,%xmm3
  .byte  15,84,218                           // andps         %xmm2,%xmm3
  .byte  102,15,254,203                      // paddd         %xmm3,%xmm1
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  117,228                             // jne           4ffe <_sk_gradient_sse41+0x2a>
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,203                   // movq          %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,70,15,16,4,179                  // movss         (%rbx,%r14,4),%xmm8
  .byte  102,70,15,58,33,4,155,16            // insertps      $0x10,(%rbx,%r11,4),%xmm8
  .byte  243,66,15,16,12,147                 // movss         (%rbx,%r10,4),%xmm1
  .byte  102,68,15,58,33,193,32              // insertps      $0x20,%xmm1,%xmm8
  .byte  243,66,15,16,12,139                 // movss         (%rbx,%r9,4),%xmm1
  .byte  102,68,15,58,33,193,48              // insertps      $0x30,%xmm1,%xmm8
  .byte  72,139,88,40                        // mov           0x28(%rax),%rbx
  .byte  243,70,15,16,12,179                 // movss         (%rbx,%r14,4),%xmm9
  .byte  102,70,15,58,33,12,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm9
  .byte  243,66,15,16,12,147                 // movss         (%rbx,%r10,4),%xmm1
  .byte  102,68,15,58,33,201,32              // insertps      $0x20,%xmm1,%xmm9
  .byte  243,66,15,16,12,139                 // movss         (%rbx,%r9,4),%xmm1
  .byte  102,68,15,58,33,201,48              // insertps      $0x30,%xmm1,%xmm9
  .byte  243,67,15,16,12,183                 // movss         (%r15,%r14,4),%xmm1
  .byte  102,67,15,58,33,12,159,16           // insertps      $0x10,(%r15,%r11,4),%xmm1
  .byte  243,67,15,16,20,151                 // movss         (%r15,%r10,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,67,15,16,20,143                 // movss         (%r15,%r9,4),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  72,139,88,48                        // mov           0x30(%rax),%rbx
  .byte  243,70,15,16,20,179                 // movss         (%rbx,%r14,4),%xmm10
  .byte  102,70,15,58,33,20,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm10
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  102,68,15,58,33,210,32              // insertps      $0x20,%xmm2,%xmm10
  .byte  243,66,15,16,20,139                 // movss         (%rbx,%r9,4),%xmm2
  .byte  102,68,15,58,33,210,48              // insertps      $0x30,%xmm2,%xmm10
  .byte  72,139,88,24                        // mov           0x18(%rax),%rbx
  .byte  243,66,15,16,20,179                 // movss         (%rbx,%r14,4),%xmm2
  .byte  102,66,15,58,33,20,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm2
  .byte  243,66,15,16,28,147                 // movss         (%rbx,%r10,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,66,15,16,28,139                 // movss         (%rbx,%r9,4),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  72,139,88,56                        // mov           0x38(%rax),%rbx
  .byte  243,70,15,16,28,179                 // movss         (%rbx,%r14,4),%xmm11
  .byte  102,70,15,58,33,28,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm11
  .byte  243,66,15,16,28,147                 // movss         (%rbx,%r10,4),%xmm3
  .byte  102,68,15,58,33,219,32              // insertps      $0x20,%xmm3,%xmm11
  .byte  243,66,15,16,28,139                 // movss         (%rbx,%r9,4),%xmm3
  .byte  102,68,15,58,33,219,48              // insertps      $0x30,%xmm3,%xmm11
  .byte  72,139,88,32                        // mov           0x20(%rax),%rbx
  .byte  243,66,15,16,28,179                 // movss         (%rbx,%r14,4),%xmm3
  .byte  102,66,15,58,33,28,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm3
  .byte  243,70,15,16,36,147                 // movss         (%rbx,%r10,4),%xmm12
  .byte  102,65,15,58,33,220,32              // insertps      $0x20,%xmm12,%xmm3
  .byte  243,70,15,16,36,139                 // movss         (%rbx,%r9,4),%xmm12
  .byte  102,65,15,58,33,220,48              // insertps      $0x30,%xmm12,%xmm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  243,70,15,16,36,176                 // movss         (%rax,%r14,4),%xmm12
  .byte  102,70,15,58,33,36,152,16           // insertps      $0x10,(%rax,%r11,4),%xmm12
  .byte  243,70,15,16,44,144                 // movss         (%rax,%r10,4),%xmm13
  .byte  102,69,15,58,33,229,32              // insertps      $0x20,%xmm13,%xmm12
  .byte  243,70,15,16,44,136                 // movss         (%rax,%r9,4),%xmm13
  .byte  102,69,15,58,33,229,48              // insertps      $0x30,%xmm13,%xmm12
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_sse41
.globl _sk_evenly_spaced_2_stop_gradient_sse41
FUNCTION(_sk_evenly_spaced_2_stop_gradient_sse41)
_sk_evenly_spaced_2_stop_gradient_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,72,28                  // movss         0x1c(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_sse41
.globl _sk_xy_to_unit_angle_sse41
FUNCTION(_sk_xy_to_unit_angle_sse41)
_sk_xy_to_unit_angle_sse41:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  68,15,92,217                        // subps         %xmm1,%xmm11
  .byte  68,15,84,217                        // andps         %xmm1,%xmm11
  .byte  68,15,40,224                        // movaps        %xmm0,%xmm12
  .byte  69,15,93,227                        // minps         %xmm11,%xmm12
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  69,15,95,211                        // maxps         %xmm11,%xmm10
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,89,237                        // mulps         %xmm13,%xmm13
  .byte  68,15,40,21,19,22,0,0               // movaps        0x1613(%rip),%xmm10        # 6880 <_sk_callback_sse41+0x1224>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,23,22,0,0               // addps         0x1617(%rip),%xmm10        # 6890 <_sk_callback_sse41+0x1234>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,27,22,0,0               // addps         0x161b(%rip),%xmm10        # 68a0 <_sk_callback_sse41+0x1244>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,31,22,0,0               // addps         0x161f(%rip),%xmm10        # 68b0 <_sk_callback_sse41+0x1254>
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  68,15,40,29,30,22,0,0               // movaps        0x161e(%rip),%xmm11        # 68c0 <_sk_callback_sse41+0x1264>
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  69,15,194,200,1                     // cmpltps       %xmm8,%xmm9
  .byte  68,15,40,29,23,22,0,0               // movaps        0x1617(%rip),%xmm11        # 68d0 <_sk_callback_sse41+0x1274>
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,192,1                     // cmpltps       %xmm8,%xmm0
  .byte  68,15,40,13,9,22,0,0                // movaps        0x1609(%rip),%xmm9        # 68e0 <_sk_callback_sse41+0x1284>
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  102,69,15,56,20,209                 // blendvps      %xmm0,%xmm9,%xmm10
  .byte  69,15,194,194,7                     // cmpordps      %xmm10,%xmm8
  .byte  69,15,84,194                        // andps         %xmm10,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_sse41
.globl _sk_xy_to_radius_sse41
FUNCTION(_sk_xy_to_radius_sse41)
_sk_xy_to_radius_sse41:
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  65,15,81,192                        // sqrtps        %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_sse41
.globl _sk_save_xy_sse41
FUNCTION(_sk_save_xy_sse41)
_sk_save_xy_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,221,21,0,0               // movaps        0x15dd(%rip),%xmm8        # 68f0 <_sk_callback_sse41+0x1294>
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  102,69,15,58,8,209,1                // roundps       $0x1,%xmm9,%xmm10
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  102,69,15,58,8,208,1                // roundps       $0x1,%xmm8,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  15,17,72,32                         // movups        %xmm1,0x20(%rax)
  .byte  68,15,17,72,64                      // movups        %xmm9,0x40(%rax)
  .byte  68,15,17,64,96                      // movups        %xmm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_sse41
.globl _sk_accumulate_sse41
FUNCTION(_sk_accumulate_sse41)
_sk_accumulate_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,16,128,128,0,0,0              // movups        0x80(%rax),%xmm8
  .byte  68,15,16,136,160,0,0,0              // movups        0xa0(%rax),%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  65,15,88,224                        // addps         %xmm8,%xmm4
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  65,15,88,232                        // addps         %xmm8,%xmm5
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,88,240                        // addps         %xmm8,%xmm6
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_sse41
.globl _sk_bilinear_nx_sse41
FUNCTION(_sk_bilinear_nx_sse41)
_sk_bilinear_nx_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,95,21,0,0                   // addps         0x155f(%rip),%xmm0        # 6900 <_sk_callback_sse41+0x12a4>
  .byte  68,15,40,13,103,21,0,0              // movaps        0x1567(%rip),%xmm9        # 6910 <_sk_callback_sse41+0x12b4>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_sse41
.globl _sk_bilinear_px_sse41
FUNCTION(_sk_bilinear_px_sse41)
_sk_bilinear_px_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,86,21,0,0                   // addps         0x1556(%rip),%xmm0        # 6920 <_sk_callback_sse41+0x12c4>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_sse41
.globl _sk_bilinear_ny_sse41
FUNCTION(_sk_bilinear_ny_sse41)
_sk_bilinear_ny_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,72,21,0,0                  // addps         0x1548(%rip),%xmm1        # 6930 <_sk_callback_sse41+0x12d4>
  .byte  68,15,40,13,80,21,0,0               // movaps        0x1550(%rip),%xmm9        # 6940 <_sk_callback_sse41+0x12e4>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_sse41
.globl _sk_bilinear_py_sse41
FUNCTION(_sk_bilinear_py_sse41)
_sk_bilinear_py_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,62,21,0,0                  // addps         0x153e(%rip),%xmm1        # 6950 <_sk_callback_sse41+0x12f4>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_sse41
.globl _sk_bicubic_n3x_sse41
FUNCTION(_sk_bicubic_n3x_sse41)
_sk_bicubic_n3x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,49,21,0,0                   // addps         0x1531(%rip),%xmm0        # 6960 <_sk_callback_sse41+0x1304>
  .byte  68,15,40,13,57,21,0,0               // movaps        0x1539(%rip),%xmm9        # 6970 <_sk_callback_sse41+0x1314>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,53,21,0,0               // mulps         0x1535(%rip),%xmm9        # 6980 <_sk_callback_sse41+0x1324>
  .byte  68,15,88,13,61,21,0,0               // addps         0x153d(%rip),%xmm9        # 6990 <_sk_callback_sse41+0x1334>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_sse41
.globl _sk_bicubic_n1x_sse41
FUNCTION(_sk_bicubic_n1x_sse41)
_sk_bicubic_n1x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,44,21,0,0                   // addps         0x152c(%rip),%xmm0        # 69a0 <_sk_callback_sse41+0x1344>
  .byte  68,15,40,13,52,21,0,0               // movaps        0x1534(%rip),%xmm9        # 69b0 <_sk_callback_sse41+0x1354>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,56,21,0,0                // movaps        0x1538(%rip),%xmm8        # 69c0 <_sk_callback_sse41+0x1364>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,60,21,0,0                // addps         0x153c(%rip),%xmm8        # 69d0 <_sk_callback_sse41+0x1374>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,64,21,0,0                // addps         0x1540(%rip),%xmm8        # 69e0 <_sk_callback_sse41+0x1384>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,68,21,0,0                // addps         0x1544(%rip),%xmm8        # 69f0 <_sk_callback_sse41+0x1394>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_sse41
.globl _sk_bicubic_p1x_sse41
FUNCTION(_sk_bicubic_p1x_sse41)
_sk_bicubic_p1x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,62,21,0,0                // movaps        0x153e(%rip),%xmm8        # 6a00 <_sk_callback_sse41+0x13a4>
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,72,64                      // movups        0x40(%rax),%xmm9
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,21,58,21,0,0               // movaps        0x153a(%rip),%xmm10        # 6a10 <_sk_callback_sse41+0x13b4>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,62,21,0,0               // addps         0x153e(%rip),%xmm10        # 6a20 <_sk_callback_sse41+0x13c4>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,58,21,0,0               // addps         0x153a(%rip),%xmm10        # 6a30 <_sk_callback_sse41+0x13d4>
  .byte  68,15,17,144,128,0,0,0              // movups        %xmm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_sse41
.globl _sk_bicubic_p3x_sse41
FUNCTION(_sk_bicubic_p3x_sse41)
_sk_bicubic_p3x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,45,21,0,0                   // addps         0x152d(%rip),%xmm0        # 6a40 <_sk_callback_sse41+0x13e4>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,45,21,0,0                // mulps         0x152d(%rip),%xmm8        # 6a50 <_sk_callback_sse41+0x13f4>
  .byte  68,15,88,5,53,21,0,0                // addps         0x1535(%rip),%xmm8        # 6a60 <_sk_callback_sse41+0x1404>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_sse41
.globl _sk_bicubic_n3y_sse41
FUNCTION(_sk_bicubic_n3y_sse41)
_sk_bicubic_n3y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,35,21,0,0                  // addps         0x1523(%rip),%xmm1        # 6a70 <_sk_callback_sse41+0x1414>
  .byte  68,15,40,13,43,21,0,0               // movaps        0x152b(%rip),%xmm9        # 6a80 <_sk_callback_sse41+0x1424>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,39,21,0,0               // mulps         0x1527(%rip),%xmm9        # 6a90 <_sk_callback_sse41+0x1434>
  .byte  68,15,88,13,47,21,0,0               // addps         0x152f(%rip),%xmm9        # 6aa0 <_sk_callback_sse41+0x1444>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_sse41
.globl _sk_bicubic_n1y_sse41
FUNCTION(_sk_bicubic_n1y_sse41)
_sk_bicubic_n1y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,29,21,0,0                  // addps         0x151d(%rip),%xmm1        # 6ab0 <_sk_callback_sse41+0x1454>
  .byte  68,15,40,13,37,21,0,0               // movaps        0x1525(%rip),%xmm9        # 6ac0 <_sk_callback_sse41+0x1464>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,41,21,0,0                // movaps        0x1529(%rip),%xmm8        # 6ad0 <_sk_callback_sse41+0x1474>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,45,21,0,0                // addps         0x152d(%rip),%xmm8        # 6ae0 <_sk_callback_sse41+0x1484>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,49,21,0,0                // addps         0x1531(%rip),%xmm8        # 6af0 <_sk_callback_sse41+0x1494>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,53,21,0,0                // addps         0x1535(%rip),%xmm8        # 6b00 <_sk_callback_sse41+0x14a4>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_sse41
.globl _sk_bicubic_p1y_sse41
FUNCTION(_sk_bicubic_p1y_sse41)
_sk_bicubic_p1y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,47,21,0,0                // movaps        0x152f(%rip),%xmm8        # 6b10 <_sk_callback_sse41+0x14b4>
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,72,96                      // movups        0x60(%rax),%xmm9
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,21,42,21,0,0               // movaps        0x152a(%rip),%xmm10        # 6b20 <_sk_callback_sse41+0x14c4>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,46,21,0,0               // addps         0x152e(%rip),%xmm10        # 6b30 <_sk_callback_sse41+0x14d4>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,42,21,0,0               // addps         0x152a(%rip),%xmm10        # 6b40 <_sk_callback_sse41+0x14e4>
  .byte  68,15,17,144,160,0,0,0              // movups        %xmm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_sse41
.globl _sk_bicubic_p3y_sse41
FUNCTION(_sk_bicubic_p3y_sse41)
_sk_bicubic_p3y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,28,21,0,0                  // addps         0x151c(%rip),%xmm1        # 6b50 <_sk_callback_sse41+0x14f4>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,28,21,0,0                // mulps         0x151c(%rip),%xmm8        # 6b60 <_sk_callback_sse41+0x1504>
  .byte  68,15,88,5,36,21,0,0                // addps         0x1524(%rip),%xmm8        # 6b70 <_sk_callback_sse41+0x1514>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_sse41
.globl _sk_callback_sse41
FUNCTION(_sk_callback_sse41)
_sk_callback_sse41:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,236,72                       // sub           $0x48,%rsp
  .byte  15,41,125,144                       // movaps        %xmm7,-0x70(%rbp)
  .byte  15,41,117,160                       // movaps        %xmm6,-0x60(%rbp)
  .byte  15,41,109,176                       // movaps        %xmm5,-0x50(%rbp)
  .byte  15,41,101,192                       // movaps        %xmm4,-0x40(%rbp)
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  72,137,77,208                       // mov           %rcx,-0x30(%rbp)
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,252                          // mov           %rdi,%r12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,20,225                           // unpcklps      %xmm1,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,20,235                           // unpcklps      %xmm3,%xmm5
  .byte  15,21,193                           // unpckhps      %xmm1,%xmm0
  .byte  15,21,211                           // unpckhps      %xmm3,%xmm2
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  102,15,20,205                       // unpcklpd      %xmm5,%xmm1
  .byte  15,18,236                           // movhlps       %xmm4,%xmm5
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  102,15,20,218                       // unpcklpd      %xmm2,%xmm3
  .byte  102,65,15,17,78,8                   // movupd        %xmm1,0x8(%r14)
  .byte  15,18,208                           // movhlps       %xmm0,%xmm2
  .byte  65,15,17,110,24                     // movups        %xmm5,0x18(%r14)
  .byte  102,65,15,17,94,40                  // movupd        %xmm3,0x28(%r14)
  .byte  65,15,17,86,56                      // movups        %xmm2,0x38(%r14)
  .byte  72,133,219                          // test          %rbx,%rbx
  .byte  190,4,0,0,0                         // mov           $0x4,%esi
  .byte  15,69,243                           // cmovne        %ebx,%esi
  .byte  76,137,247                          // mov           %r14,%rdi
  .byte  65,255,22                           // callq         *(%r14)
  .byte  73,139,134,136,0,0,0                // mov           0x88(%r14),%rax
  .byte  15,16,32                            // movups        (%rax),%xmm4
  .byte  15,16,64,16                         // movups        0x10(%rax),%xmm0
  .byte  15,16,88,32                         // movups        0x20(%rax),%xmm3
  .byte  15,16,80,48                         // movups        0x30(%rax),%xmm2
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,20,232                           // unpcklps      %xmm0,%xmm5
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  15,21,224                           // unpckhps      %xmm0,%xmm4
  .byte  15,21,218                           // unpckhps      %xmm2,%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,205                           // movhlps       %xmm5,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  15,18,220                           // movhlps       %xmm4,%xmm3
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,250                          // mov           %r15,%rdx
  .byte  72,139,77,208                       // mov           -0x30(%rbp),%rcx
  .byte  73,137,216                          // mov           %rbx,%r8
  .byte  15,40,101,192                       // movaps        -0x40(%rbp),%xmm4
  .byte  15,40,109,176                       // movaps        -0x50(%rbp),%xmm5
  .byte  15,40,117,160                       // movaps        -0x60(%rbp),%xmm6
  .byte  15,40,125,144                       // movaps        -0x70(%rbp),%xmm7
  .byte  72,131,196,72                       // add           $0x48,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

BALIGN16
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%rdi)
  .byte  0,224                               // add           %ah,%al
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  224,64                              // loopne        5928 <.literal16+0x1d8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        592c <.literal16+0x1dc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        5930 <.literal16+0x1e0>
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5951 <.literal16+0x201>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5955 <.literal16+0x205>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5959 <.literal16+0x209>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 595d <.literal16+0x20d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5991 <.literal16+0x241>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5995 <.literal16+0x245>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5999 <.literal16+0x249>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 599d <.literal16+0x24d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 59d1 <.literal16+0x281>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 59d5 <.literal16+0x285>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 59d9 <.literal16+0x289>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 59dd <.literal16+0x28d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5a11 <.literal16+0x2c1>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5a15 <.literal16+0x2c5>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5a19 <.literal16+0x2c9>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5a1d <.literal16+0x2cd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,255                          // cmpb          $0xff,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005a08 <_sk_callback_sse41+0xa0003ac>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3005a10 <_sk_callback_sse41+0x30003b4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%rax)
  .byte  67,0,0                              // rex.XB        add %al,(%r8)
  .byte  127,67                              // jg            5a7b <.literal16+0x32b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5a7f <.literal16+0x32f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5a83 <.literal16+0x333>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,145                          // cmpb          $0x91,(%rdi)
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  82                                  // push          %rdx
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // rex.WRX
  .byte  65,82                               // push          %r10
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // rex.WRX
  .byte  65,57,215                           // cmp           %edx,%r15d
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%rbx)
  .byte  57,215                              // cmp           %edx,%edi
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%rbx)
  .byte  186,159,98,60,186                   // mov           $0xba3c629f,%edx
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,186                              // cmp           $0xba,%al
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,186                              // cmp           $0xba,%al
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,109                              // cmp           $0x6d,%al
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%rsi)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%rsi)
  .byte  168,177                             // test          $0xb1,%al
  .byte  152                                 // cwtl
  .byte  59,168,177,152,59,168               // cmp           -0x57c4674f(%rax),%ebp
  .byte  177,152                             // mov           $0x98,%cl
  .byte  59,168,177,152,59,0                 // cmp           0x3b98b1(%rax),%ebp
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5cb9 <.literal16+0x569>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5cbd <.literal16+0x56d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5cc1 <.literal16+0x571>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5cc5 <.literal16+0x575>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005d08 <_sk_callback_sse41+0xa0006ac>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3005d10 <_sk_callback_sse41+0x30006b4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,129,128,128,59,129              // incl          -0x7ec47f80(%rcx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,255,0,255,0,255,0    // addl          $0xff00ff,0xff3b80(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,255                               // or            %bh,%bh
  .byte  10,255                              // or            %bh,%bh
  .byte  12,255                              // or            $0xff,%al
  .byte  14                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,128,55,128                  // add           %al,-0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,128,10,128,12,128                 // or            %al,-0x7ff37ff6(%rax)
  .byte  14                                  // (bad)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5ddb <.literal16+0x68b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5ddf <.literal16+0x68f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5de3 <.literal16+0x693>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5dd4 <.literal16+0x684>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5dd8 <.literal16+0x688>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5ddc <.literal16+0x68c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5de0 <.literal16+0x690>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5e65 <.literal16+0x715>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5dc9 <.literal16+0x679>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a39e0a <_sk_callback_sse41+0xffffffffe9a347ae>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5ea4 <.literal16+0x754>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5ea8 <.literal16+0x758>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5eac <.literal16+0x75c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5eb0 <.literal16+0x760>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5f35 <.literal16+0x7e5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5e99 <.literal16+0x749>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a39eda <_sk_callback_sse41+0xffffffffe9a3487e>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5f74 <.literal16+0x824>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5f78 <.literal16+0x828>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5f7c <.literal16+0x82c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5f80 <.literal16+0x830>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            6005 <.literal16+0x8b5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5f69 <.literal16+0x819>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a39faa <_sk_callback_sse41+0xffffffffe9a3494e>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6044 <.literal16+0x8f4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6048 <.literal16+0x8f8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            604c <.literal16+0x8fc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6050 <.literal16+0x900>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            60d5 <.literal16+0x985>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           6039 <.literal16+0x8e9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3a07a <_sk_callback_sse41+0xffffffffe9a34a1e>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,200                               // add           %cl,%al
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  127,67                              // jg            6157 <.literal16+0xa07>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            615b <.literal16+0xa0b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            615f <.literal16+0xa0f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6163 <.literal16+0xa13>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,203,61,13                     // or            $0xd3dcb3c,%eax
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,60,203,61                     // cmp           $0x3dcb3c0d,%eax
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  18,3                                // adc           (%rbx),%al
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  163,59,10,215,163,59,10,215,163     // movabs        %eax,0xa3d70a3ba3d70a3b
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,194,24,17       // movabs        %eax,0x1118c23c1118c23b
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,190,203,61                    // cmp           $0x3dcbbe0d,%eax
  .byte  13,190,203,61,13                    // or            $0xd3dcbbe,%eax
  .byte  190,203,61,13,190                   // mov           $0xbe0d3dcb,%esi
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           61e3 <.literal16+0xa93>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           61e7 <.literal16+0xa97>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           61eb <.literal16+0xa9b>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           61ef <.literal16+0xa9f>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            625b <.literal16+0xb0b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            625f <.literal16+0xb0f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6263 <.literal16+0xb13>
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,129,128,128,59,129                // add           %al,-0x7ec47f80(%rcx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,0,0,128,63,0,0       // addl          $0x3f80,0x3b80(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 30062e0 <_sk_callback_sse41+0x3000c84>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6319 <.literal16+0xbc9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        631d <.literal16+0xbcd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6321 <.literal16+0xbd1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6325 <.literal16+0xbd5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6389 <.literal16+0xc39>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        638d <.literal16+0xc3d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6391 <.literal16+0xc41>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6395 <.literal16+0xc45>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        63f9 <.literal16+0xca9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        63fd <.literal16+0xcad>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6401 <.literal16+0xcb1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6405 <.literal16+0xcb5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,248                               // add           %bh,%al
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            6496 <.literal16+0xd46>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            649a <.literal16+0xd4a>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            649e <.literal16+0xd4e>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            64a2 <.literal16+0xd52>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6625 <.literal16+0xed5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6629 <.literal16+0xed9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            662d <.literal16+0xedd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6631 <.literal16+0xee1>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3006620 <_sk_callback_sse41+0x3000fc4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3006660 <_sk_callback_sse41+0x3001004>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 30066a0 <_sk_callback_sse41+0x3001044>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            66fb <.literal16+0xfab>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            66ff <.literal16+0xfaf>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6703 <.literal16+0xfb3>
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,4                       // add           %al,0x4000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,4                       // add           %al,0x4000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,128,56                    // add           %al,0x38800000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,56,0                            // cmpb          $0x0,(%rax)
  .byte  0,128,56,0,0,128                    // add           %al,-0x7fffffc8(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            67fb <.literal16+0x10ab>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            67ff <.literal16+0x10af>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            6803 <.literal16+0x10b3>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            6807 <.literal16+0x10b7>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,128                   // add           %al,-0x7fffff41(%rax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,0,63,0                  // cmpb          $0x0,0x3f000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,152,221,147              // fstl          -0x6c2267c3(%rbx)
  .byte  61,152,221,147,61                   // cmp           $0x3d93dd98,%eax
  .byte  152                                 // cwtl
  .byte  221,147,61,45,16,17                 // fstl          0x11102d3d(%rbx)
  .byte  192,45,16,17,192,45,16              // shrb          $0x10,0x2dc01110(%rip)        # 2dc0793a <_sk_callback_sse41+0x2dc022de>
  .byte  17,192                              // adc           %eax,%eax
  .byte  45,16,17,192,18                     // sub           $0x12c01110,%eax
  .byte  120,57                              // js            686c <.literal16+0x111c>
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,32,148,90,62,32,148,90           // and           %dl,0x5a94203e(%rdx,%rbx,2)
  .byte  62,32,148,90,62,32,148,90           // and           %dl,%ds:0x5a94203e(%rdx,%rbx,2)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,0,24                             // add           %bl,%ds:(%rax)
  .byte  161,57,0,24,161,57,0,24,161         // movabs        0xa1180039a1180039,%eax
  .byte  57,0                                // cmp           %eax,(%rax)
  .byte  24,161,57,1,0,0                     // sbb           %ah,0x139(%rcx)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,111,43                            // add           %ch,0x2b(%rdi)
  .byte  231,187                             // out           %eax,$0xbb
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  159                                 // lahf
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,212                          // lret          $0xd43c
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,128,62,0,0,128                    // add           %al,-0x7fffffc2(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         69a2 <.literal16+0x1252>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         69a6 <.literal16+0x1256>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         69aa <.literal16+0x125a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f835 <_sk_callback_sse41+0x3d63a1d9>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f875 <_sk_callback_sse41+0x3d63a219>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            6a6e <.literal16+0x131e>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6a72 <.literal16+0x1322>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6a76 <.literal16+0x1326>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6a7a <.literal16+0x132a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         6ab2 <.literal16+0x1362>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6ab6 <.literal16+0x1366>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6aba <.literal16+0x136a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f945 <_sk_callback_sse41+0x3d63a2e9>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f985 <_sk_callback_sse41+0x3d63a329>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            6b7e <.literal16+0x142e>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6b82 <_sk_callback_sse41+0x1526>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6b86 <_sk_callback_sse41+0x152a>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6b8a <_sk_callback_sse41+0x152e>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
BALIGN32

HIDDEN _sk_start_pipeline_sse2
.globl _sk_start_pipeline_sse2
FUNCTION(_sk_start_pipeline_sse2)
_sk_start_pipeline_sse2:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,137,208                          // mov           %rdx,%r8
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  72,141,75,4                         // lea           0x4(%rbx),%rcx
  .byte  76,57,193                           // cmp           %r8,%rcx
  .byte  118,5                               // jbe           30 <_sk_start_pipeline_sse2+0x30>
  .byte  72,137,218                          // mov           %rbx,%rdx
  .byte  235,48                              // jmp           60 <_sk_start_pipeline_sse2+0x60>
  .byte  76,137,69,208                       // mov           %r8,-0x30(%rbp)
  .byte  69,49,192                           // xor           %r8d,%r8d
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,137,218                          // mov           %rbx,%rdx
  .byte  76,137,249                          // mov           %r15,%rcx
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  65,255,214                          // callq         *%r14
  .byte  76,139,69,208                       // mov           -0x30(%rbp),%r8
  .byte  76,137,240                          // mov           %r14,%rax
  .byte  72,141,83,4                         // lea           0x4(%rbx),%rdx
  .byte  72,131,195,8                        // add           $0x8,%rbx
  .byte  76,57,195                           // cmp           %r8,%rbx
  .byte  72,137,211                          // mov           %rdx,%rbx
  .byte  118,212                             // jbe           34 <_sk_start_pipeline_sse2+0x34>
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,25                              // je            7e <_sk_start_pipeline_sse2+0x7e>
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  76,137,249                          // mov           %r15,%rcx
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  195                                 // retq

HIDDEN _sk_just_return_sse2
.globl _sk_just_return_sse2
FUNCTION(_sk_just_return_sse2)
_sk_just_return_sse2:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_sse2
.globl _sk_seed_shader_sse2
FUNCTION(_sk_seed_shader_sse2)
_sk_seed_shader_sse2:
  .byte  102,15,110,194                      // movd          %edx,%xmm0
  .byte  102,15,112,192,0                    // pshufd        $0x0,%xmm0,%xmm0
  .byte  15,91,200                           // cvtdq2ps      %xmm0,%xmm1
  .byte  15,40,21,159,91,0,0                 // movaps        0x5b9f(%rip),%xmm2        # 5c40 <_sk_callback_sse2+0xf5>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,16,7                             // movups        (%rdi),%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  102,15,110,201                      // movd          %ecx,%xmm1
  .byte  102,15,112,201,0                    // pshufd        $0x0,%xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,21,142,91,0,0                 // movaps        0x5b8e(%rip),%xmm2        # 5c50 <_sk_callback_sse2+0x105>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_sse2
.globl _sk_dither_sse2
FUNCTION(_sk_dither_sse2)
_sk_dither_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,68,15,110,194                   // movd          %edx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  243,68,15,111,79,32                 // movdqu        0x20(%rdi),%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  102,68,15,110,193                   // movd          %ecx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,68,15,111,21,92,91,0,0          // movdqa        0x5b5c(%rip),%xmm10        # 5c60 <_sk_callback_sse2+0x115>
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,65,15,114,243,5                 // pslld         $0x5,%xmm11
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,65,15,114,242,4                 // pslld         $0x4,%xmm10
  .byte  102,68,15,111,37,72,91,0,0          // movdqa        0x5b48(%rip),%xmm12        # 5c70 <_sk_callback_sse2+0x125>
  .byte  102,68,15,111,45,79,91,0,0          // movdqa        0x5b4f(%rip),%xmm13        # 5c80 <_sk_callback_sse2+0x135>
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,69,15,219,245                   // pand          %xmm13,%xmm14
  .byte  102,65,15,114,246,2                 // pslld         $0x2,%xmm14
  .byte  102,69,15,219,233                   // pand          %xmm9,%xmm13
  .byte  102,69,15,254,237                   // paddd         %xmm13,%xmm13
  .byte  102,69,15,219,196                   // pand          %xmm12,%xmm8
  .byte  102,65,15,114,208,1                 // psrld         $0x1,%xmm8
  .byte  102,69,15,219,204                   // pand          %xmm12,%xmm9
  .byte  102,65,15,114,209,2                 // psrld         $0x2,%xmm9
  .byte  102,69,15,235,234                   // por           %xmm10,%xmm13
  .byte  102,69,15,235,233                   // por           %xmm9,%xmm13
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,235,245                   // por           %xmm13,%xmm14
  .byte  102,69,15,235,240                   // por           %xmm8,%xmm14
  .byte  69,15,91,198                        // cvtdq2ps      %xmm14,%xmm8
  .byte  68,15,89,5,10,91,0,0                // mulps         0x5b0a(%rip),%xmm8        # 5c90 <_sk_callback_sse2+0x145>
  .byte  68,15,88,5,18,91,0,0                // addps         0x5b12(%rip),%xmm8        # 5ca0 <_sk_callback_sse2+0x155>
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,88,210                        // addps         %xmm2,%xmm10
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  68,15,93,211                        // minps         %xmm3,%xmm10
  .byte  65,15,95,210                        // maxps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_sse2
.globl _sk_constant_color_sse2
FUNCTION(_sk_constant_color_sse2)
_sk_constant_color_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgba_sse2
.globl _sk_load_rgba_sse2
FUNCTION(_sk_load_rgba_sse2)
_sk_load_rgba_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  15,16,72,16                         // movups        0x10(%rax),%xmm1
  .byte  15,16,80,32                         // movups        0x20(%rax),%xmm2
  .byte  15,16,88,48                         // movups        0x30(%rax),%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_rgba_sse2
.globl _sk_store_rgba_sse2
FUNCTION(_sk_store_rgba_sse2)
_sk_store_rgba_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  15,17,72,16                         // movups        %xmm1,0x10(%rax)
  .byte  15,17,80,32                         // movups        %xmm2,0x20(%rax)
  .byte  15,17,88,48                         // movups        %xmm3,0x30(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_sse2
.globl _sk_clear_sse2
FUNCTION(_sk_clear_sse2)
_sk_clear_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_sse2
.globl _sk_srcatop_sse2
FUNCTION(_sk_srcatop_sse2)
_sk_srcatop_sse2:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  68,15,40,5,108,90,0,0               // movaps        0x5a6c(%rip),%xmm8        # 5cb0 <_sk_callback_sse2+0x165>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_sse2
.globl _sk_dstatop_sse2
FUNCTION(_sk_dstatop_sse2)
_sk_dstatop_sse2:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,40,13,47,90,0,0               // movaps        0x5a2f(%rip),%xmm9        # 5cc0 <_sk_callback_sse2+0x175>
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_sse2
.globl _sk_srcin_sse2
FUNCTION(_sk_srcin_sse2)
_sk_srcin_sse2:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_sse2
.globl _sk_dstin_sse2
FUNCTION(_sk_dstin_sse2)
_sk_dstin_sse2:
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_sse2
.globl _sk_srcout_sse2
FUNCTION(_sk_srcout_sse2)
_sk_srcout_sse2:
  .byte  68,15,40,5,211,89,0,0               // movaps        0x59d3(%rip),%xmm8        # 5cd0 <_sk_callback_sse2+0x185>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_sse2
.globl _sk_dstout_sse2
FUNCTION(_sk_dstout_sse2)
_sk_dstout_sse2:
  .byte  68,15,40,5,195,89,0,0               // movaps        0x59c3(%rip),%xmm8        # 5ce0 <_sk_callback_sse2+0x195>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_sse2
.globl _sk_srcover_sse2
FUNCTION(_sk_srcover_sse2)
_sk_srcover_sse2:
  .byte  68,15,40,5,166,89,0,0               // movaps        0x59a6(%rip),%xmm8        # 5cf0 <_sk_callback_sse2+0x1a5>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_sse2
.globl _sk_dstover_sse2
FUNCTION(_sk_dstover_sse2)
_sk_dstover_sse2:
  .byte  68,15,40,5,122,89,0,0               // movaps        0x597a(%rip),%xmm8        # 5d00 <_sk_callback_sse2+0x1b5>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_sse2
.globl _sk_modulate_sse2
FUNCTION(_sk_modulate_sse2)
_sk_modulate_sse2:
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_sse2
.globl _sk_multiply_sse2
FUNCTION(_sk_multiply_sse2)
_sk_multiply_sse2:
  .byte  68,15,40,5,78,89,0,0                // movaps        0x594e(%rip),%xmm8        # 5d10 <_sk_callback_sse2+0x1c5>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,221                        // mulps         %xmm5,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__sse2
.globl _sk_plus__sse2
FUNCTION(_sk_plus__sse2)
_sk_plus__sse2:
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_sse2
.globl _sk_screen_sse2
FUNCTION(_sk_screen_sse2)
_sk_screen_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,88,215                        // addps         %xmm7,%xmm10
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__sse2
.globl _sk_xor__sse2
FUNCTION(_sk_xor__sse2)
_sk_xor__sse2:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,40,29,131,88,0,0                 // movaps        0x5883(%rip),%xmm3        # 5d20 <_sk_callback_sse2+0x1d5>
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_sse2
.globl _sk_darken_sse2
FUNCTION(_sk_darken_sse2)
_sk_darken_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,95,209                        // maxps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,238,87,0,0                 // movaps        0x57ee(%rip),%xmm2        # 5d30 <_sk_callback_sse2+0x1e5>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_sse2
.globl _sk_lighten_sse2
FUNCTION(_sk_lighten_sse2)
_sk_lighten_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,147,87,0,0                 // movaps        0x5793(%rip),%xmm2        # 5d40 <_sk_callback_sse2+0x1f5>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_sse2
.globl _sk_difference_sse2
FUNCTION(_sk_difference_sse2)
_sk_difference_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,45,87,0,0                  // movaps        0x572d(%rip),%xmm2        # 5d50 <_sk_callback_sse2+0x205>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_sse2
.globl _sk_exclusion_sse2
FUNCTION(_sk_exclusion_sse2)
_sk_exclusion_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,237,86,0,0                 // movaps        0x56ed(%rip),%xmm2        # 5d60 <_sk_callback_sse2+0x215>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_sse2
.globl _sk_colorburn_sse2
FUNCTION(_sk_colorburn_sse2)
_sk_colorburn_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,224,86,0,0              // movaps        0x56e0(%rip),%xmm10        # 5d70 <_sk_callback_sse2+0x225>
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,94,192                        // divps         %xmm8,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,40,224                        // movaps        %xmm8,%xmm12
  .byte  69,15,194,227,0                     // cmpeqps       %xmm11,%xmm12
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,84,196                        // andps         %xmm12,%xmm8
  .byte  69,15,85,229                        // andnps        %xmm13,%xmm12
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  68,15,89,236                        // mulps         %xmm4,%xmm13
  .byte  69,15,86,224                        // orps          %xmm8,%xmm12
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  68,15,194,199,0                     // cmpeqps       %xmm7,%xmm8
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,85,196                        // andnps        %xmm12,%xmm8
  .byte  65,15,86,192                        // orps          %xmm8,%xmm0
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,92,229                        // subps         %xmm5,%xmm12
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  68,15,94,225                        // divps         %xmm1,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,233                        // movaps        %xmm1,%xmm13
  .byte  69,15,194,235,0                     // cmpeqps       %xmm11,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,224                        // addps         %xmm8,%xmm12
  .byte  65,15,84,205                        // andps         %xmm13,%xmm1
  .byte  69,15,85,236                        // andnps        %xmm12,%xmm13
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  68,15,86,233                        // orps          %xmm1,%xmm13
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,88,233                        // addps         %xmm1,%xmm13
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,194,207,0                        // cmpeqps       %xmm7,%xmm1
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  68,15,86,193                        // orps          %xmm1,%xmm8
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,92,206                           // subps         %xmm6,%xmm1
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,225                        // minps         %xmm1,%xmm12
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  68,15,194,218,0                     // cmpeqps       %xmm2,%xmm11
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  65,15,84,211                        // andps         %xmm11,%xmm2
  .byte  68,15,85,217                        // andnps        %xmm1,%xmm11
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  68,15,86,218                        // orps          %xmm2,%xmm11
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  68,15,88,217                        // addps         %xmm1,%xmm11
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,194,207,0                        // cmpeqps       %xmm7,%xmm1
  .byte  68,15,84,201                        // andps         %xmm1,%xmm9
  .byte  65,15,85,203                        // andnps        %xmm11,%xmm1
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_sse2
.globl _sk_colordodge_sse2
FUNCTION(_sk_colordodge_sse2)
_sk_colordodge_sse2:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,40,21,150,85,0,0              // movaps        0x5596(%rip),%xmm10        # 5d80 <_sk_callback_sse2+0x235>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  68,15,94,192                        // divps         %xmm0,%xmm8
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,194,243,0                     // cmpeqps       %xmm3,%xmm14
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  69,15,84,206                        // andps         %xmm14,%xmm9
  .byte  68,15,85,240                        // andnps        %xmm0,%xmm14
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,86,241                        // orps          %xmm9,%xmm14
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  69,15,88,241                        // addps         %xmm9,%xmm14
  .byte  68,15,40,204                        // movaps        %xmm4,%xmm9
  .byte  69,15,194,200,0                     // cmpeqps       %xmm8,%xmm9
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  69,15,85,206                        // andnps        %xmm14,%xmm9
  .byte  65,15,86,193                        // orps          %xmm9,%xmm0
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  69,15,94,204                        // divps         %xmm12,%xmm9
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  69,15,93,233                        // minps         %xmm9,%xmm13
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  68,15,194,243,0                     // cmpeqps       %xmm3,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  65,15,84,206                        // andps         %xmm14,%xmm1
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  69,15,40,204                        // movaps        %xmm12,%xmm9
  .byte  68,15,88,205                        // addps         %xmm5,%xmm9
  .byte  68,15,86,241                        // orps          %xmm1,%xmm14
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,88,241                        // addps         %xmm1,%xmm14
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  65,15,194,200,0                     // cmpeqps       %xmm8,%xmm1
  .byte  68,15,84,201                        // andps         %xmm1,%xmm9
  .byte  65,15,85,206                        // andnps        %xmm14,%xmm1
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,92,202                           // subps         %xmm2,%xmm1
  .byte  68,15,94,225                        // divps         %xmm1,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,194,203,0                        // cmpeqps       %xmm3,%xmm1
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  15,84,209                           // andps         %xmm1,%xmm2
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  15,86,202                           // orps          %xmm2,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  68,15,194,198,0                     // cmpeqps       %xmm6,%xmm8
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  69,15,84,216                        // andps         %xmm8,%xmm11
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,195                        // orps          %xmm11,%xmm8
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_sse2
.globl _sk_hardlight_sse2
FUNCTION(_sk_hardlight_sse2)
_sk_hardlight_sse2:
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  68,15,40,29,75,84,0,0               // movaps        0x544b(%rip),%xmm11        # 5d90 <_sk_callback_sse2+0x245>
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  68,15,92,215                        // subps         %xmm7,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,40,255                        // movaps        %xmm7,%xmm15
  .byte  68,15,92,253                        // subps         %xmm5,%xmm15
  .byte  69,15,89,248                        // mulps         %xmm8,%xmm15
  .byte  69,15,88,255                        // addps         %xmm15,%xmm15
  .byte  68,15,40,228                        // movaps        %xmm4,%xmm12
  .byte  69,15,92,231                        // subps         %xmm15,%xmm12
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  68,15,194,195,2                     // cmpleps       %xmm3,%xmm8
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,85,196                        // andnps        %xmm12,%xmm8
  .byte  68,15,86,192                        // orps          %xmm0,%xmm8
  .byte  69,15,40,251                        // movaps        %xmm11,%xmm15
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,254                        // mulps         %xmm6,%xmm15
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,92,238                        // subps         %xmm6,%xmm13
  .byte  68,15,89,232                        // mulps         %xmm0,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,92,197                        // subps         %xmm13,%xmm0
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  65,15,84,201                        // andps         %xmm9,%xmm1
  .byte  68,15,85,200                        // andnps        %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  69,15,88,207                        // addps         %xmm15,%xmm9
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,40,108,36,232                 // movaps        -0x18(%rsp),%xmm13
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,88,226                        // addps         %xmm10,%xmm12
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  68,15,194,211,2                     // cmpleps       %xmm3,%xmm10
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  68,15,89,240                        // mulps         %xmm0,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  65,15,92,230                        // subps         %xmm14,%xmm4
  .byte  65,15,84,210                        // andps         %xmm10,%xmm2
  .byte  68,15,85,212                        // andnps        %xmm4,%xmm10
  .byte  68,15,86,210                        // orps          %xmm2,%xmm10
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  65,15,40,245                        // movaps        %xmm13,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_sse2
.globl _sk_overlay_sse2
FUNCTION(_sk_overlay_sse2)
_sk_overlay_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,232                        // movaps        %xmm0,%xmm13
  .byte  68,15,40,13,25,83,0,0               // movaps        0x5319(%rip),%xmm9        # 5da0 <_sk_callback_sse2+0x255>
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,92,215                        // subps         %xmm7,%xmm10
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  68,15,92,203                        // subps         %xmm3,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,89,236                        // mulps         %xmm4,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,92,244                        // subps         %xmm4,%xmm14
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,230                        // subps         %xmm14,%xmm12
  .byte  68,15,84,233                        // andps         %xmm1,%xmm13
  .byte  65,15,85,204                        // andnps        %xmm12,%xmm1
  .byte  65,15,86,205                        // orps          %xmm13,%xmm1
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  69,15,89,224                        // mulps         %xmm8,%xmm12
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,224                        // subps         %xmm8,%xmm12
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,92,237                        // subps         %xmm5,%xmm13
  .byte  68,15,40,245                        // movaps        %xmm5,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  68,15,194,247,2                     // cmpleps       %xmm7,%xmm14
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,84,198                        // andps         %xmm14,%xmm8
  .byte  69,15,85,244                        // andnps        %xmm12,%xmm14
  .byte  69,15,86,240                        // orps          %xmm8,%xmm14
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  69,15,88,194                        // addps         %xmm10,%xmm8
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,92,210                        // subps         %xmm2,%xmm10
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,92,230                        // subps         %xmm6,%xmm12
  .byte  68,15,40,238                        // movaps        %xmm6,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,194,239,2                     // cmpleps       %xmm7,%xmm13
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,88,228                        // addps         %xmm12,%xmm12
  .byte  69,15,92,220                        // subps         %xmm12,%xmm11
  .byte  65,15,84,213                        // andps         %xmm13,%xmm2
  .byte  69,15,85,235                        // andnps        %xmm11,%xmm13
  .byte  68,15,86,234                        // orps          %xmm2,%xmm13
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_sse2
.globl _sk_softlight_sse2
FUNCTION(_sk_softlight_sse2)
_sk_softlight_sse2:
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  68,15,194,231,1                     // cmpltps       %xmm7,%xmm12
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  69,15,84,212                        // andps         %xmm12,%xmm10
  .byte  68,15,40,13,214,81,0,0              // movaps        0x51d6(%rip),%xmm9        # 5db0 <_sk_callback_sse2+0x265>
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  69,15,92,250                        // subps         %xmm10,%xmm15
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  65,15,82,194                        // rsqrtps       %xmm10,%xmm0
  .byte  15,83,200                           // rcpps         %xmm0,%xmm1
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  68,15,40,53,176,81,0,0              // movaps        0x51b0(%rip),%xmm14        # 5dc0 <_sk_callback_sse2+0x275>
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  68,15,89,216                        // mulps         %xmm0,%xmm11
  .byte  68,15,40,21,176,81,0,0              // movaps        0x51b0(%rip),%xmm10        # 5dd0 <_sk_callback_sse2+0x285>
  .byte  69,15,89,234                        // mulps         %xmm10,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,194,231,2                        // cmpleps       %xmm7,%xmm4
  .byte  68,15,84,236                        // andps         %xmm4,%xmm13
  .byte  15,85,225                           // andnps        %xmm1,%xmm4
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  65,15,86,229                        // orps          %xmm13,%xmm4
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  68,15,89,249                        // mulps         %xmm1,%xmm15
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,225                           // mulps         %xmm1,%xmm4
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  68,15,92,239                        // subps         %xmm7,%xmm13
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,253                        // mulps         %xmm5,%xmm15
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  68,15,84,248                        // andps         %xmm0,%xmm15
  .byte  15,85,196                           // andnps        %xmm4,%xmm0
  .byte  65,15,86,199                        // orps          %xmm15,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  68,15,94,199                        // divps         %xmm7,%xmm8
  .byte  69,15,84,196                        // andps         %xmm12,%xmm8
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  69,15,92,248                        // subps         %xmm8,%xmm15
  .byte  65,15,82,224                        // rsqrtps       %xmm8,%xmm4
  .byte  15,83,228                           // rcpps         %xmm4,%xmm4
  .byte  65,15,92,224                        // subps         %xmm8,%xmm4
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  15,85,204                           // andnps        %xmm4,%xmm1
  .byte  65,15,86,200                        // orps          %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  68,15,89,252                        // mulps         %xmm4,%xmm15
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,254                        // mulps         %xmm6,%xmm15
  .byte  68,15,194,195,2                     // cmpleps       %xmm3,%xmm8
  .byte  69,15,84,248                        // andps         %xmm8,%xmm15
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,199                        // orps          %xmm15,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  68,15,40,124,36,216                 // movaps        -0x28(%rsp),%xmm15
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,94,207                           // divps         %xmm7,%xmm1
  .byte  65,15,84,204                        // andps         %xmm12,%xmm1
  .byte  68,15,92,201                        // subps         %xmm1,%xmm9
  .byte  68,15,88,241                        // addps         %xmm1,%xmm14
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  15,82,209                           // rsqrtps       %xmm1,%xmm2
  .byte  15,83,210                           // rcpps         %xmm2,%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  68,15,84,209                        // andps         %xmm1,%xmm10
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  15,40,84,36,232                     // movaps        -0x18(%rsp),%xmm2
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  65,15,86,202                        // orps          %xmm10,%xmm1
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  65,15,88,229                        // addps         %xmm13,%xmm4
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  69,15,40,215                        // movaps        %xmm15,%xmm10
  .byte  15,194,211,2                        // cmpleps       %xmm3,%xmm2
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,209                        // orps          %xmm9,%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  65,15,40,242                        // movaps        %xmm10,%xmm6
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_sse2
.globl _sk_hue_sse2
FUNCTION(_sk_hue_sse2)
_sk_hue_sse2:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  68,15,40,5,243,79,0,0               // movaps        0x4ff3(%rip),%xmm8        # 5e10 <_sk_callback_sse2+0x2c5>
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  68,15,92,217                        // subps         %xmm1,%xmm11
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  15,41,68,36,232                     // movaps        %xmm0,-0x18(%rsp)
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  68,15,41,100,36,216                 // movaps        %xmm12,-0x28(%rsp)
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  68,15,40,237                        // movaps        %xmm5,%xmm13
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,41,68,36,200                     // movaps        %xmm0,-0x38(%rsp)
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  68,15,95,239                        // maxps         %xmm7,%xmm13
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  68,15,40,245                        // movaps        %xmm5,%xmm14
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  69,15,95,253                        // maxps         %xmm13,%xmm15
  .byte  68,15,93,231                        // minps         %xmm7,%xmm12
  .byte  69,15,93,244                        // minps         %xmm12,%xmm14
  .byte  69,15,92,254                        // subps         %xmm14,%xmm15
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  68,15,93,226                        // minps         %xmm2,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,95,244                        // maxps         %xmm12,%xmm14
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  69,15,92,205                        // subps         %xmm13,%xmm9
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  65,15,92,213                        // subps         %xmm13,%xmm2
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  68,15,89,251                        // mulps         %xmm3,%xmm15
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  69,15,89,215                        // mulps         %xmm15,%xmm10
  .byte  65,15,89,215                        // mulps         %xmm15,%xmm2
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,94,214                        // divps         %xmm14,%xmm10
  .byte  65,15,94,214                        // divps         %xmm14,%xmm2
  .byte  69,15,194,244,4                     // cmpneqps      %xmm12,%xmm14
  .byte  69,15,84,206                        // andps         %xmm14,%xmm9
  .byte  69,15,84,214                        // andps         %xmm14,%xmm10
  .byte  65,15,84,214                        // andps         %xmm14,%xmm2
  .byte  68,15,40,61,0,79,0,0                // movaps        0x4f00(%rip),%xmm15        # 5de0 <_sk_callback_sse2+0x295>
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  15,40,5,5,79,0,0                    // movaps        0x4f05(%rip),%xmm0        # 5df0 <_sk_callback_sse2+0x2a5>
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  68,15,40,53,7,79,0,0                // movaps        0x4f07(%rip),%xmm14        # 5e00 <_sk_callback_sse2+0x2b5>
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,88,238                        // addps         %xmm6,%xmm13
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  65,15,40,242                        // movaps        %xmm10,%xmm6
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  65,15,89,230                        // mulps         %xmm14,%xmm4
  .byte  15,88,230                           // addps         %xmm6,%xmm4
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  68,15,92,236                        // subps         %xmm4,%xmm13
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  69,15,88,213                        // addps         %xmm13,%xmm10
  .byte  68,15,88,234                        // addps         %xmm2,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,93,213                        // minps         %xmm13,%xmm2
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  15,93,242                           // minps         %xmm2,%xmm6
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,95,213                        // maxps         %xmm13,%xmm2
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  15,95,226                           // maxps         %xmm2,%xmm4
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  68,15,88,240                        // addps         %xmm0,%xmm14
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,194,214,2                        // cmpleps       %xmm6,%xmm2
  .byte  69,15,40,254                        // movaps        %xmm14,%xmm15
  .byte  68,15,92,254                        // subps         %xmm6,%xmm15
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,92,246                        // subps         %xmm14,%xmm6
  .byte  65,15,89,246                        // mulps         %xmm14,%xmm6
  .byte  65,15,94,247                        // divps         %xmm15,%xmm6
  .byte  65,15,88,246                        // addps         %xmm14,%xmm6
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,41,76,36,184                     // movaps        %xmm1,-0x48(%rsp)
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,41,92,36,168                     // movaps        %xmm3,-0x58(%rsp)
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,194,196,1                        // cmpltps       %xmm4,%xmm0
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,201                        // andnps        %xmm9,%xmm1
  .byte  69,15,92,206                        // subps         %xmm14,%xmm9
  .byte  65,15,92,246                        // subps         %xmm14,%xmm6
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,92,230                        // subps         %xmm14,%xmm4
  .byte  68,15,94,204                        // divps         %xmm4,%xmm9
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  68,15,84,200                        // andps         %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,94,207                        // divps         %xmm15,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,85,217                           // andnps        %xmm1,%xmm3
  .byte  68,15,84,210                        // andps         %xmm2,%xmm10
  .byte  68,15,86,211                        // orps          %xmm3,%xmm10
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,202                        // andnps        %xmm10,%xmm1
  .byte  69,15,92,214                        // subps         %xmm14,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  68,15,94,212                        // divps         %xmm4,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  65,15,40,205                        // movaps        %xmm13,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,94,207                        // divps         %xmm15,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  68,15,84,234                        // andps         %xmm2,%xmm13
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,213                        // orps          %xmm13,%xmm2
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,94,212                           // divps         %xmm4,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,84,208                           // andps         %xmm0,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  69,15,95,204                        // maxps         %xmm12,%xmm9
  .byte  69,15,95,212                        // maxps         %xmm12,%xmm10
  .byte  65,15,95,212                        // maxps         %xmm12,%xmm2
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,76,36,232                     // movaps        -0x18(%rsp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,40,76,36,216                     // movaps        -0x28(%rsp),%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,195                        // addps         %xmm11,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  15,40,124,36,184                    // movaps        -0x48(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_sse2
.globl _sk_saturation_sse2
FUNCTION(_sk_saturation_sse2)
_sk_saturation_sse2:
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  68,15,40,215                        // movaps        %xmm7,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,116,36,184                    // movaps        %xmm6,-0x48(%rsp)
  .byte  68,15,40,207                        // movaps        %xmm7,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  69,15,40,232                        // movaps        %xmm8,%xmm13
  .byte  68,15,41,108,36,168                 // movaps        %xmm13,-0x58(%rsp)
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,41,100,36,216                    // movaps        %xmm4,-0x28(%rsp)
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,95,218                           // maxps         %xmm2,%xmm3
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  15,95,203                           // maxps         %xmm3,%xmm1
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,93,218                           // minps         %xmm2,%xmm3
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  15,92,202                           // subps         %xmm2,%xmm1
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  65,15,40,228                        // movaps        %xmm12,%xmm4
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,93,208                           // minps         %xmm0,%xmm2
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,93,194                        // minps         %xmm2,%xmm8
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,95,218                           // maxps         %xmm2,%xmm3
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  69,15,92,208                        // subps         %xmm8,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  68,15,94,211                        // divps         %xmm3,%xmm10
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,94,195                           // divps         %xmm3,%xmm0
  .byte  15,194,218,4                        // cmpneqps      %xmm2,%xmm3
  .byte  68,15,84,211                        // andps         %xmm3,%xmm10
  .byte  68,15,84,203                        // andps         %xmm3,%xmm9
  .byte  15,84,195                           // andps         %xmm3,%xmm0
  .byte  68,15,40,5,153,76,0,0               // movaps        0x4c99(%rip),%xmm8        # 5e20 <_sk_callback_sse2+0x2d5>
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,40,13,155,76,0,0                 // movaps        0x4c9b(%rip),%xmm1        # 5e30 <_sk_callback_sse2+0x2e5>
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  68,15,40,37,154,76,0,0              // movaps        0x4c9a(%rip),%xmm12        # 5e40 <_sk_callback_sse2+0x2f5>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,235                        // addps         %xmm3,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,40,217                        // movaps        %xmm9,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  68,15,89,239                        // mulps         %xmm7,%xmm13
  .byte  68,15,92,234                        // subps         %xmm2,%xmm13
  .byte  69,15,88,213                        // addps         %xmm13,%xmm10
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,93,197                        // minps         %xmm13,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,95,197                        // maxps         %xmm13,%xmm0
  .byte  69,15,40,242                        // movaps        %xmm10,%xmm14
  .byte  68,15,95,240                        // maxps         %xmm0,%xmm14
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  68,15,88,225                        // addps         %xmm1,%xmm12
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,194,211,2                        // cmpleps       %xmm3,%xmm2
  .byte  65,15,40,244                        // movaps        %xmm12,%xmm6
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  68,15,84,210                        // andps         %xmm2,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  68,15,40,5,255,75,0,0               // movaps        0x4bff(%rip),%xmm8        # 5e50 <_sk_callback_sse2+0x305>
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,88,253                           // addps         %xmm5,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,194,222,1                     // cmpltps       %xmm14,%xmm3
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,85,194                        // andnps        %xmm10,%xmm0
  .byte  69,15,92,212                        // subps         %xmm12,%xmm10
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,92,244                        // subps         %xmm12,%xmm14
  .byte  69,15,94,214                        // divps         %xmm14,%xmm10
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  68,15,84,211                        // andps         %xmm3,%xmm10
  .byte  68,15,86,208                        // orps          %xmm0,%xmm10
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  68,15,40,250                        // movaps        %xmm2,%xmm15
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  69,15,86,207                        // orps          %xmm15,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,85,193                        // andnps        %xmm9,%xmm0
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  68,15,84,203                        // andps         %xmm3,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  68,15,84,234                        // andps         %xmm2,%xmm13
  .byte  15,85,208                           // andnps        %xmm0,%xmm2
  .byte  65,15,86,213                        // orps          %xmm13,%xmm2
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,85,194                           // andnps        %xmm2,%xmm0
  .byte  65,15,92,212                        // subps         %xmm12,%xmm2
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  65,15,94,214                        // divps         %xmm14,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,84,211                           // andps         %xmm3,%xmm2
  .byte  15,86,208                           // orps          %xmm0,%xmm2
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,92,36,184                     // movaps        -0x48(%rsp),%xmm3
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  65,15,92,228                        // subps         %xmm12,%xmm4
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  68,15,88,216                        // addps         %xmm0,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,76,36,216                     // movaps        -0x28(%rsp),%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,100,36,232                    // mulps         -0x18(%rsp),%xmm4
  .byte  15,40,68,36,168                     // movaps        -0x58(%rsp),%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,88,196                        // addps         %xmm4,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  65,15,40,252                        // movaps        %xmm12,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_sse2
.globl _sk_color_sse2
FUNCTION(_sk_color_sse2)
_sk_color_sse2:
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,41,100,36,216                 // movaps        %xmm12,-0x28(%rsp)
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,41,92,36,232                  // movaps        %xmm11,-0x18(%rsp)
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  68,15,40,207                        // movaps        %xmm7,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  68,15,40,45,157,74,0,0              // movaps        0x4a9d(%rip),%xmm13        # 5e60 <_sk_callback_sse2+0x315>
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,40,53,157,74,0,0              // movaps        0x4a9d(%rip),%xmm14        # 5e70 <_sk_callback_sse2+0x325>
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,29,153,74,0,0              // movaps        0x4a99(%rip),%xmm11        # 5e80 <_sk_callback_sse2+0x335>
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  68,15,88,224                        // addps         %xmm0,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,89,197                        // mulps         %xmm13,%xmm0
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  68,15,40,5,133,74,0,0               // movaps        0x4a85(%rip),%xmm8        # 5e90 <_sk_callback_sse2+0x345>
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,40,76,36,184                     // movaps        -0x48(%rsp),%xmm1
  .byte  15,89,225                           // mulps         %xmm1,%xmm4
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  68,15,88,225                        // addps         %xmm1,%xmm12
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,93,196                        // minps         %xmm12,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,93,200                           // minps         %xmm0,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,95,196                        // maxps         %xmm12,%xmm0
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  68,15,95,248                        // maxps         %xmm0,%xmm15
  .byte  69,15,89,233                        // mulps         %xmm9,%xmm13
  .byte  69,15,89,242                        // mulps         %xmm10,%xmm14
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  69,15,89,220                        // mulps         %xmm12,%xmm11
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,87,237                        // xorps         %xmm13,%xmm13
  .byte  68,15,194,233,2                     // cmpleps       %xmm1,%xmm13
  .byte  69,15,40,243                        // movaps        %xmm11,%xmm14
  .byte  68,15,92,241                        // subps         %xmm1,%xmm14
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  15,85,193                           // andnps        %xmm1,%xmm0
  .byte  69,15,84,205                        // andps         %xmm13,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,41,84,36,200                     // movaps        %xmm2,-0x38(%rsp)
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,41,92,36,184                     // movaps        %xmm3,-0x48(%rsp)
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,201                        // andnps        %xmm9,%xmm1
  .byte  69,15,92,203                        // subps         %xmm11,%xmm9
  .byte  65,15,92,219                        // subps         %xmm11,%xmm3
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  69,15,92,251                        // subps         %xmm11,%xmm15
  .byte  69,15,94,207                        // divps         %xmm15,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,84,200                        // andps         %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,213                        // movaps        %xmm13,%xmm2
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  69,15,84,213                        // andps         %xmm13,%xmm10
  .byte  68,15,86,210                        // orps          %xmm2,%xmm10
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,202                        // andnps        %xmm10,%xmm1
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  69,15,94,215                        // divps         %xmm15,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,84,229                        // andps         %xmm13,%xmm12
  .byte  68,15,85,233                        // andnps        %xmm1,%xmm13
  .byte  69,15,86,236                        // orps          %xmm12,%xmm13
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,94,239                        // divps         %xmm15,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  68,15,86,233                        // orps          %xmm1,%xmm13
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  68,15,95,232                        // maxps         %xmm0,%xmm13
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,84,36,232                     // movaps        -0x18(%rsp),%xmm2
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  65,15,88,234                        // addps         %xmm10,%xmm5
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,68,36,216                     // movaps        -0x28(%rsp),%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,88,196                        // addps         %xmm4,%xmm8
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,92,36,184                     // movaps        -0x48(%rsp),%xmm3
  .byte  15,40,124,36,200                    // movaps        -0x38(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_sse2
.globl _sk_luminosity_sse2
FUNCTION(_sk_luminosity_sse2)
_sk_luminosity_sse2:
  .byte  68,15,40,215                        // movaps        %xmm7,%xmm10
  .byte  15,41,116,36,200                    // movaps        %xmm6,-0x38(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  15,41,100,36,216                    // movaps        %xmm4,-0x28(%rsp)
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  68,15,40,205                        // movaps        %xmm5,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  68,15,40,37,156,72,0,0              // movaps        0x489c(%rip),%xmm12        # 5ea0 <_sk_callback_sse2+0x355>
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,40,45,156,72,0,0              // movaps        0x489c(%rip),%xmm13        # 5eb0 <_sk_callback_sse2+0x365>
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  69,15,88,240                        // addps         %xmm8,%xmm14
  .byte  68,15,40,29,152,72,0,0              // movaps        0x4898(%rip),%xmm11        # 5ec0 <_sk_callback_sse2+0x375>
  .byte  68,15,40,5,160,72,0,0               // movaps        0x48a0(%rip),%xmm8        # 5ed0 <_sk_callback_sse2+0x385>
  .byte  69,15,40,248                        // movaps        %xmm8,%xmm15
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,89,255                        // mulps         %xmm15,%xmm7
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  15,41,76,36,184                     // movaps        %xmm1,-0x48(%rsp)
  .byte  68,15,89,250                        // mulps         %xmm2,%xmm15
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  68,15,40,244                        // movaps        %xmm4,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,93,210                        // minps         %xmm2,%xmm10
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,93,226                        // minps         %xmm10,%xmm4
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,95,210                        // maxps         %xmm2,%xmm10
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,95,242                        // maxps         %xmm10,%xmm14
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,221                        // addps         %xmm13,%xmm11
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  68,15,194,228,2                     // cmpleps       %xmm4,%xmm12
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  68,15,92,212                        // subps         %xmm4,%xmm10
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,92,227                        // subps         %xmm11,%xmm4
  .byte  65,15,89,227                        // mulps         %xmm11,%xmm4
  .byte  65,15,94,226                        // divps         %xmm10,%xmm4
  .byte  65,15,88,227                        // addps         %xmm11,%xmm4
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  68,15,85,236                        // andnps        %xmm4,%xmm13
  .byte  69,15,84,204                        // andps         %xmm12,%xmm9
  .byte  69,15,86,205                        // orps          %xmm13,%xmm9
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,41,68,36,168                     // movaps        %xmm0,-0x58(%rsp)
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  68,15,92,197                        // subps         %xmm5,%xmm8
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  68,15,40,236                        // movaps        %xmm4,%xmm13
  .byte  65,15,194,230,1                     // cmpltps       %xmm14,%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,85,193                        // andnps        %xmm9,%xmm0
  .byte  69,15,92,203                        // subps         %xmm11,%xmm9
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,84,204                        // andps         %xmm4,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,94,194                        // divps         %xmm10,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  65,15,84,220                        // andps         %xmm12,%xmm3
  .byte  15,86,217                           // orps          %xmm1,%xmm3
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,85,195                           // andnps        %xmm3,%xmm0
  .byte  65,15,92,219                        // subps         %xmm11,%xmm3
  .byte  65,15,89,221                        // mulps         %xmm13,%xmm3
  .byte  65,15,94,222                        // divps         %xmm14,%xmm3
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  15,84,220                           // andps         %xmm4,%xmm3
  .byte  15,86,216                           // orps          %xmm0,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,94,194                        // divps         %xmm10,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,84,212                        // andps         %xmm12,%xmm2
  .byte  68,15,85,224                        // andnps        %xmm0,%xmm12
  .byte  68,15,86,226                        // orps          %xmm2,%xmm12
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,85,196                        // andnps        %xmm12,%xmm0
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,94,230                        // divps         %xmm14,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  68,15,84,228                        // andps         %xmm4,%xmm12
  .byte  68,15,86,224                        // orps          %xmm0,%xmm12
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  68,15,95,224                        // maxps         %xmm0,%xmm12
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,100,36,216                    // movaps        -0x28(%rsp),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  68,15,40,84,36,232                  // movaps        -0x18(%rsp),%xmm10
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  15,40,76,36,184                     // movaps        -0x48(%rsp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  69,15,88,199                        // addps         %xmm15,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  15,40,124,36,168                    // movaps        -0x58(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_rgba_8888_sse2
.globl _sk_srcover_rgba_8888_sse2
FUNCTION(_sk_srcover_rgba_8888_sse2)
_sk_srcover_rgba_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,227,0,0,0                    // jne           1908 <_sk_srcover_rgba_8888_sse2+0xf1>
  .byte  243,68,15,111,4,144                 // movdqu        (%rax,%rdx,4),%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  102,15,111,53,170,70,0,0            // movdqa        0x46aa(%rip),%xmm6        # 5ee0 <_sk_callback_sse2+0x395>
  .byte  102,65,15,111,224                   // movdqa        %xmm8,%xmm4
  .byte  102,15,219,230                      // pand          %xmm6,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  102,65,15,111,232                   // movdqa        %xmm8,%xmm5
  .byte  102,15,114,213,8                    // psrld         $0x8,%xmm5
  .byte  102,15,219,238                      // pand          %xmm6,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  102,65,15,111,248                   // movdqa        %xmm8,%xmm7
  .byte  102,15,114,215,16                   // psrld         $0x10,%xmm7
  .byte  102,15,219,254                      // pand          %xmm6,%xmm7
  .byte  15,91,247                           // cvtdq2ps      %xmm7,%xmm6
  .byte  102,65,15,114,208,24                // psrld         $0x18,%xmm8
  .byte  65,15,91,248                        // cvtdq2ps      %xmm8,%xmm7
  .byte  68,15,40,5,122,70,0,0               // movaps        0x467a(%rip),%xmm8        # 5ef0 <_sk_callback_sse2+0x3a5>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  68,15,40,37,126,70,0,0              // movaps        0x467e(%rip),%xmm12        # 5f00 <_sk_callback_sse2+0x3b5>
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  68,15,88,209                        // addps         %xmm1,%xmm10
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  65,15,89,220                        // mulps         %xmm12,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,88,195                        // addps         %xmm3,%xmm8
  .byte  102,65,15,91,193                    // cvtps2dq      %xmm9,%xmm0
  .byte  102,65,15,91,202                    // cvtps2dq      %xmm10,%xmm1
  .byte  102,15,114,241,8                    // pslld         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,65,15,91,211                    // cvtps2dq      %xmm11,%xmm2
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,91,192                    // cvtps2dq      %xmm8,%xmm0
  .byte  102,15,114,240,24                   // pslld         $0x18,%xmm0
  .byte  102,15,235,194                      // por           %xmm2,%xmm0
  .byte  102,15,235,193                      // por           %xmm1,%xmm0
  .byte  117,82                              // jne           1941 <_sk_srcover_rgba_8888_sse2+0x12a>
  .byte  243,15,127,4,144                    // movdqu        %xmm0,(%rax,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,87                              // je            196c <_sk_srcover_rgba_8888_sse2+0x155>
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,22                              // je            1936 <_sk_srcover_rgba_8888_sse2+0x11f>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  15,133,1,255,255,255                // jne           182b <_sk_srcover_rgba_8888_sse2+0x14>
  .byte  102,15,110,100,144,8                // movd          0x8(%rax,%rdx,4),%xmm4
  .byte  102,68,15,112,196,69                // pshufd        $0x45,%xmm4,%xmm8
  .byte  102,68,15,18,4,144                  // movlpd        (%rax,%rdx,4),%xmm8
  .byte  233,234,254,255,255                 // jmpq          182b <_sk_srcover_rgba_8888_sse2+0x14>
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,41                              // je            1977 <_sk_srcover_rgba_8888_sse2+0x160>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,17                              // je            1965 <_sk_srcover_rgba_8888_sse2+0x14e>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,154                             // jne           18f4 <_sk_srcover_rgba_8888_sse2+0xdd>
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,15,126,76,144,8                 // movd          %xmm1,0x8(%rax,%rdx,4)
  .byte  102,15,214,4,144                    // movq          %xmm0,(%rax,%rdx,4)
  .byte  235,136                             // jmp           18f4 <_sk_srcover_rgba_8888_sse2+0xdd>
  .byte  102,68,15,110,4,144                 // movd          (%rax,%rdx,4),%xmm8
  .byte  233,180,254,255,255                 // jmpq          182b <_sk_srcover_rgba_8888_sse2+0x14>
  .byte  102,15,126,4,144                    // movd          %xmm0,(%rax,%rdx,4)
  .byte  233,115,255,255,255                 // jmpq          18f4 <_sk_srcover_rgba_8888_sse2+0xdd>

HIDDEN _sk_clamp_0_sse2
.globl _sk_clamp_0_sse2
FUNCTION(_sk_clamp_0_sse2)
_sk_clamp_0_sse2:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,95,200                        // maxps         %xmm8,%xmm1
  .byte  65,15,95,208                        // maxps         %xmm8,%xmm2
  .byte  65,15,95,216                        // maxps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_sse2
.globl _sk_clamp_1_sse2
FUNCTION(_sk_clamp_1_sse2)
_sk_clamp_1_sse2:
  .byte  68,15,40,5,111,69,0,0               // movaps        0x456f(%rip),%xmm8        # 5f10 <_sk_callback_sse2+0x3c5>
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  65,15,93,208                        // minps         %xmm8,%xmm2
  .byte  65,15,93,216                        // minps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_sse2
.globl _sk_clamp_a_sse2
FUNCTION(_sk_clamp_a_sse2)
_sk_clamp_a_sse2:
  .byte  15,93,29,100,69,0,0                 // minps         0x4564(%rip),%xmm3        # 5f20 <_sk_callback_sse2+0x3d5>
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_dst_sse2
.globl _sk_clamp_a_dst_sse2
FUNCTION(_sk_clamp_a_dst_sse2)
_sk_clamp_a_dst_sse2:
  .byte  15,93,61,96,69,0,0                  // minps         0x4560(%rip),%xmm7        # 5f30 <_sk_callback_sse2+0x3e5>
  .byte  15,93,231                           // minps         %xmm7,%xmm4
  .byte  15,93,239                           // minps         %xmm7,%xmm5
  .byte  15,93,247                           // minps         %xmm7,%xmm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_sse2
.globl _sk_set_rgb_sse2
FUNCTION(_sk_set_rgb_sse2)
_sk_set_rgb_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_sse2
.globl _sk_swap_rb_sse2
FUNCTION(_sk_swap_rb_sse2)
_sk_swap_rb_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_dst_sse2
.globl _sk_swap_rb_dst_sse2
FUNCTION(_sk_swap_rb_dst_sse2)
_sk_swap_rb_dst_sse2:
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  65,15,40,240                        // movaps        %xmm8,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_sse2
.globl _sk_move_src_dst_sse2
FUNCTION(_sk_move_src_dst_sse2)
_sk_move_src_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_sse2
.globl _sk_move_dst_src_sse2
FUNCTION(_sk_move_dst_src_sse2)
_sk_move_dst_src_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_sse2
.globl _sk_premul_sse2
FUNCTION(_sk_premul_sse2)
_sk_premul_sse2:
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_sse2
.globl _sk_unpremul_sse2
FUNCTION(_sk_unpremul_sse2)
_sk_unpremul_sse2:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,40,13,236,68,0,0              // movaps        0x44ec(%rip),%xmm9        # 5f40 <_sk_callback_sse2+0x3f5>
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  68,15,194,195,4                     // cmpneqps      %xmm3,%xmm8
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_sse2
.globl _sk_from_srgb_sse2
FUNCTION(_sk_from_srgb_sse2)
_sk_from_srgb_sse2:
  .byte  68,15,40,5,215,68,0,0               // movaps        0x44d7(%rip),%xmm8        # 5f50 <_sk_callback_sse2+0x405>
  .byte  68,15,40,232                        // movaps        %xmm0,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  68,15,40,13,207,68,0,0              // movaps        0x44cf(%rip),%xmm9        # 5f60 <_sk_callback_sse2+0x415>
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  69,15,89,241                        // mulps         %xmm9,%xmm14
  .byte  68,15,40,21,207,68,0,0              // movaps        0x44cf(%rip),%xmm10        # 5f70 <_sk_callback_sse2+0x425>
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  68,15,40,29,207,68,0,0              // movaps        0x44cf(%rip),%xmm11        # 5f80 <_sk_callback_sse2+0x435>
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  68,15,40,37,211,68,0,0              // movaps        0x44d3(%rip),%xmm12        # 5f90 <_sk_callback_sse2+0x445>
  .byte  65,15,194,196,1                     // cmpltps       %xmm12,%xmm0
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  65,15,85,198                        // andnps        %xmm14,%xmm0
  .byte  65,15,86,197                        // orps          %xmm13,%xmm0
  .byte  68,15,40,233                        // movaps        %xmm1,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,246                        // mulps         %xmm14,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  69,15,88,250                        // addps         %xmm10,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  69,15,88,251                        // addps         %xmm11,%xmm15
  .byte  65,15,194,204,1                     // cmpltps       %xmm12,%xmm1
  .byte  68,15,84,233                        // andps         %xmm1,%xmm13
  .byte  65,15,85,207                        // andnps        %xmm15,%xmm1
  .byte  65,15,86,205                        // orps          %xmm13,%xmm1
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  68,15,40,234                        // movaps        %xmm2,%xmm13
  .byte  69,15,89,237                        // mulps         %xmm13,%xmm13
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  65,15,194,212,1                     // cmpltps       %xmm12,%xmm2
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,209                        // andnps        %xmm9,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_dst_sse2
.globl _sk_from_srgb_dst_sse2
FUNCTION(_sk_from_srgb_dst_sse2)
_sk_from_srgb_dst_sse2:
  .byte  68,15,40,5,100,68,0,0               // movaps        0x4464(%rip),%xmm8        # 5fa0 <_sk_callback_sse2+0x455>
  .byte  68,15,40,236                        // movaps        %xmm4,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,220                        // movaps        %xmm4,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  68,15,40,13,92,68,0,0               // movaps        0x445c(%rip),%xmm9        # 5fb0 <_sk_callback_sse2+0x465>
  .byte  68,15,40,244                        // movaps        %xmm4,%xmm14
  .byte  69,15,89,241                        // mulps         %xmm9,%xmm14
  .byte  68,15,40,21,92,68,0,0               // movaps        0x445c(%rip),%xmm10        # 5fc0 <_sk_callback_sse2+0x475>
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  68,15,40,29,92,68,0,0               // movaps        0x445c(%rip),%xmm11        # 5fd0 <_sk_callback_sse2+0x485>
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  68,15,40,37,96,68,0,0               // movaps        0x4460(%rip),%xmm12        # 5fe0 <_sk_callback_sse2+0x495>
  .byte  65,15,194,228,1                     // cmpltps       %xmm12,%xmm4
  .byte  68,15,84,236                        // andps         %xmm4,%xmm13
  .byte  65,15,85,230                        // andnps        %xmm14,%xmm4
  .byte  65,15,86,229                        // orps          %xmm13,%xmm4
  .byte  68,15,40,237                        // movaps        %xmm5,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,245                        // movaps        %xmm5,%xmm14
  .byte  69,15,89,246                        // mulps         %xmm14,%xmm14
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  69,15,88,250                        // addps         %xmm10,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  69,15,88,251                        // addps         %xmm11,%xmm15
  .byte  65,15,194,236,1                     // cmpltps       %xmm12,%xmm5
  .byte  68,15,84,237                        // andps         %xmm5,%xmm13
  .byte  65,15,85,239                        // andnps        %xmm15,%xmm5
  .byte  65,15,86,237                        // orps          %xmm13,%xmm5
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  68,15,40,238                        // movaps        %xmm6,%xmm13
  .byte  69,15,89,237                        // mulps         %xmm13,%xmm13
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  65,15,194,244,1                     // cmpltps       %xmm12,%xmm6
  .byte  68,15,84,198                        // andps         %xmm6,%xmm8
  .byte  65,15,85,241                        // andnps        %xmm9,%xmm6
  .byte  65,15,86,240                        // orps          %xmm8,%xmm6
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_sse2
.globl _sk_to_srgb_sse2
FUNCTION(_sk_to_srgb_sse2)
_sk_to_srgb_sse2:
  .byte  68,15,82,232                        // rsqrtps       %xmm0,%xmm13
  .byte  68,15,40,5,237,67,0,0               // movaps        0x43ed(%rip),%xmm8        # 5ff0 <_sk_callback_sse2+0x4a5>
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  69,15,89,240                        // mulps         %xmm8,%xmm14
  .byte  68,15,40,13,237,67,0,0              // movaps        0x43ed(%rip),%xmm9        # 6000 <_sk_callback_sse2+0x4b5>
  .byte  69,15,40,253                        // movaps        %xmm13,%xmm15
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  68,15,40,21,237,67,0,0              // movaps        0x43ed(%rip),%xmm10        # 6010 <_sk_callback_sse2+0x4c5>
  .byte  69,15,88,250                        // addps         %xmm10,%xmm15
  .byte  69,15,89,253                        // mulps         %xmm13,%xmm15
  .byte  68,15,40,29,237,67,0,0              // movaps        0x43ed(%rip),%xmm11        # 6020 <_sk_callback_sse2+0x4d5>
  .byte  69,15,88,251                        // addps         %xmm11,%xmm15
  .byte  68,15,40,37,241,67,0,0              // movaps        0x43f1(%rip),%xmm12        # 6030 <_sk_callback_sse2+0x4e5>
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  69,15,83,237                        // rcpps         %xmm13,%xmm13
  .byte  69,15,89,239                        // mulps         %xmm15,%xmm13
  .byte  68,15,40,61,237,67,0,0              // movaps        0x43ed(%rip),%xmm15        # 6040 <_sk_callback_sse2+0x4f5>
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  68,15,84,240                        // andps         %xmm0,%xmm14
  .byte  65,15,85,197                        // andnps        %xmm13,%xmm0
  .byte  65,15,86,198                        // orps          %xmm14,%xmm0
  .byte  68,15,82,233                        // rsqrtps       %xmm1,%xmm13
  .byte  69,15,40,245                        // movaps        %xmm13,%xmm14
  .byte  69,15,89,241                        // mulps         %xmm9,%xmm14
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  69,15,83,237                        // rcpps         %xmm13,%xmm13
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,240                        // mulps         %xmm8,%xmm14
  .byte  65,15,194,207,1                     // cmpltps       %xmm15,%xmm1
  .byte  68,15,84,241                        // andps         %xmm1,%xmm14
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  65,15,86,206                        // orps          %xmm14,%xmm1
  .byte  68,15,82,234                        // rsqrtps       %xmm2,%xmm13
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  69,15,83,213                        // rcpps         %xmm13,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,194,215,1                     // cmpltps       %xmm15,%xmm2
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,210                        // andnps        %xmm10,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_sse2
.globl _sk_rgb_to_hsl_sse2
FUNCTION(_sk_rgb_to_hsl_sse2)
_sk_rgb_to_hsl_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  69,15,95,209                        // maxps         %xmm9,%xmm10
  .byte  68,15,95,210                        // maxps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,93,217                        // minps         %xmm9,%xmm11
  .byte  68,15,93,218                        // minps         %xmm2,%xmm11
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  68,15,40,45,70,67,0,0               // movaps        0x4346(%rip),%xmm13        # 6050 <_sk_callback_sse2+0x505>
  .byte  68,15,94,233                        // divps         %xmm1,%xmm13
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,194,192,0                     // cmpeqps       %xmm8,%xmm0
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,194,242,1                     // cmpltps       %xmm2,%xmm14
  .byte  68,15,84,53,44,67,0,0               // andps         0x432c(%rip),%xmm14        # 6060 <_sk_callback_sse2+0x515>
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,194,249,0                     // cmpeqps       %xmm9,%xmm15
  .byte  65,15,92,208                        // subps         %xmm8,%xmm2
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  68,15,40,37,31,67,0,0               // movaps        0x431f(%rip),%xmm12        # 6070 <_sk_callback_sse2+0x525>
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  69,15,92,193                        // subps         %xmm9,%xmm8
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,88,5,27,67,0,0                // addps         0x431b(%rip),%xmm8        # 6080 <_sk_callback_sse2+0x535>
  .byte  65,15,84,215                        // andps         %xmm15,%xmm2
  .byte  69,15,85,248                        // andnps        %xmm8,%xmm15
  .byte  68,15,86,250                        // orps          %xmm2,%xmm15
  .byte  68,15,84,240                        // andps         %xmm0,%xmm14
  .byte  65,15,85,199                        // andnps        %xmm15,%xmm0
  .byte  65,15,86,198                        // orps          %xmm14,%xmm0
  .byte  15,89,5,12,67,0,0                   // mulps         0x430c(%rip),%xmm0        # 6090 <_sk_callback_sse2+0x545>
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  69,15,194,195,4                     // cmpneqps      %xmm11,%xmm8
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,92,226                        // subps         %xmm10,%xmm12
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  68,15,40,13,255,66,0,0              // movaps        0x42ff(%rip),%xmm9        # 60a0 <_sk_callback_sse2+0x555>
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,194,202,1                     // cmpltps       %xmm2,%xmm9
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,84,225                        // andps         %xmm9,%xmm12
  .byte  69,15,85,202                        // andnps        %xmm10,%xmm9
  .byte  69,15,86,204                        // orps          %xmm12,%xmm9
  .byte  65,15,94,201                        // divps         %xmm9,%xmm1
  .byte  65,15,84,200                        // andps         %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_sse2
.globl _sk_hsl_to_rgb_sse2
FUNCTION(_sk_hsl_to_rgb_sse2)
_sk_hsl_to_rgb_sse2:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,41,92,36,168                     // movaps        %xmm3,-0x58(%rsp)
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  68,15,40,13,190,66,0,0              // movaps        0x42be(%rip),%xmm9        # 60b0 <_sk_callback_sse2+0x565>
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  69,15,194,211,2                     // cmpleps       %xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,194,217,0                        // cmpeqps       %xmm1,%xmm3
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  15,41,124,36,136                    // movaps        %xmm7,-0x78(%rsp)
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  65,15,84,194                        // andps         %xmm10,%xmm0
  .byte  68,15,85,209                        // andnps        %xmm1,%xmm10
  .byte  68,15,86,208                        // orps          %xmm0,%xmm10
  .byte  68,15,41,92,36,152                  // movaps        %xmm11,-0x68(%rsp)
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,88,219                        // addps         %xmm11,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  15,40,5,135,66,0,0                  // movaps        0x4287(%rip),%xmm0        # 60c0 <_sk_callback_sse2+0x575>
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  243,15,91,200                       // cvttps2dq     %xmm0,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  15,194,217,1                        // cmpltps       %xmm1,%xmm3
  .byte  15,84,29,127,66,0,0                 // andps         0x427f(%rip),%xmm3        # 60d0 <_sk_callback_sse2+0x585>
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,40,45,129,66,0,0              // movaps        0x4281(%rip),%xmm13        # 60e0 <_sk_callback_sse2+0x595>
  .byte  69,15,40,197                        // movaps        %xmm13,%xmm8
  .byte  68,15,194,192,2                     // cmpleps       %xmm0,%xmm8
  .byte  69,15,40,242                        // movaps        %xmm10,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  65,15,40,217                        // movaps        %xmm9,%xmm3
  .byte  15,194,216,2                        // cmpleps       %xmm0,%xmm3
  .byte  15,40,21,145,66,0,0                 // movaps        0x4291(%rip),%xmm2        # 6110 <_sk_callback_sse2+0x5c5>
  .byte  68,15,40,250                        // movaps        %xmm2,%xmm15
  .byte  68,15,194,248,2                     // cmpleps       %xmm0,%xmm15
  .byte  15,40,13,97,66,0,0                  // movaps        0x4261(%rip),%xmm1        # 60f0 <_sk_callback_sse2+0x5a5>
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,40,45,103,66,0,0                 // movaps        0x4267(%rip),%xmm5        # 6100 <_sk_callback_sse2+0x5b5>
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  65,15,89,230                        // mulps         %xmm14,%xmm4
  .byte  65,15,88,227                        // addps         %xmm11,%xmm4
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,84,224                        // andps         %xmm8,%xmm12
  .byte  68,15,85,196                        // andnps        %xmm4,%xmm8
  .byte  69,15,86,196                        // orps          %xmm12,%xmm8
  .byte  68,15,84,195                        // andps         %xmm3,%xmm8
  .byte  65,15,85,218                        // andnps        %xmm10,%xmm3
  .byte  65,15,86,216                        // orps          %xmm8,%xmm3
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,84,223                        // andps         %xmm15,%xmm3
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,86,251                        // orps          %xmm3,%xmm15
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  69,15,85,199                        // andnps        %xmm15,%xmm8
  .byte  243,15,91,198                       // cvttps2dq     %xmm6,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,194,216,1                        // cmpltps       %xmm0,%xmm3
  .byte  15,84,29,220,65,0,0                 // andps         0x41dc(%rip),%xmm3        # 60d0 <_sk_callback_sse2+0x585>
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  69,15,40,253                        // movaps        %xmm13,%xmm15
  .byte  69,15,194,252,2                     // cmpleps       %xmm12,%xmm15
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,194,228,2                     // cmpleps       %xmm12,%xmm4
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  65,15,194,220,2                     // cmpleps       %xmm12,%xmm3
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  65,15,84,255                        // andps         %xmm15,%xmm7
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,86,255                        // orps          %xmm7,%xmm15
  .byte  68,15,84,252                        // andps         %xmm4,%xmm15
  .byte  65,15,85,226                        // andnps        %xmm10,%xmm4
  .byte  65,15,86,231                        // orps          %xmm15,%xmm4
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  15,84,227                           // andps         %xmm3,%xmm4
  .byte  65,15,85,220                        // andnps        %xmm12,%xmm3
  .byte  15,86,220                           // orps          %xmm4,%xmm3
  .byte  15,40,124,36,136                    // movaps        -0x78(%rsp),%xmm7
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  15,85,227                           // andnps        %xmm3,%xmm4
  .byte  15,88,53,180,65,0,0                 // addps         0x41b4(%rip),%xmm6        # 6120 <_sk_callback_sse2+0x5d5>
  .byte  243,15,91,198                       // cvttps2dq     %xmm6,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,194,216,1                        // cmpltps       %xmm0,%xmm3
  .byte  15,84,29,79,65,0,0                  // andps         0x414f(%rip),%xmm3        # 60d0 <_sk_callback_sse2+0x585>
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,92,240                           // subps         %xmm0,%xmm6
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,92,233                           // subps         %xmm1,%xmm5
  .byte  65,15,89,238                        // mulps         %xmm14,%xmm5
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,88,235                        // addps         %xmm11,%xmm5
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  68,15,194,238,2                     // cmpleps       %xmm6,%xmm13
  .byte  69,15,84,221                        // andps         %xmm13,%xmm11
  .byte  68,15,85,237                        // andnps        %xmm5,%xmm13
  .byte  69,15,86,235                        // orps          %xmm11,%xmm13
  .byte  68,15,194,206,2                     // cmpleps       %xmm6,%xmm9
  .byte  69,15,84,233                        // andps         %xmm9,%xmm13
  .byte  69,15,85,202                        // andnps        %xmm10,%xmm9
  .byte  69,15,86,205                        // orps          %xmm13,%xmm9
  .byte  15,194,214,2                        // cmpleps       %xmm6,%xmm2
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,209                        // orps          %xmm9,%xmm2
  .byte  15,40,68,36,152                     // movaps        -0x68(%rsp),%xmm0
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,84,193                           // andps         %xmm1,%xmm0
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  68,15,86,192                        // orps          %xmm0,%xmm8
  .byte  15,86,224                           // orps          %xmm0,%xmm4
  .byte  15,86,193                           // orps          %xmm1,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  15,40,100,36,184                    // movaps        -0x48(%rsp),%xmm4
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_sse2
.globl _sk_scale_1_float_sse2
FUNCTION(_sk_scale_1_float_sse2)
_sk_scale_1_float_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_sse2
.globl _sk_scale_u8_sse2
FUNCTION(_sk_scale_u8_sse2)
_sk_scale_u8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,61                              // jne           2074 <_sk_scale_u8_sse2+0x47>
  .byte  102,69,15,110,4,18                  // movd          (%r10,%rdx,1),%xmm8
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  102,68,15,219,5,224,64,0,0          // pand          0x40e0(%rip),%xmm8        # 6130 <_sk_callback_sse2+0x5e5>
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,228,64,0,0               // mulps         0x40e4(%rip),%xmm8        # 6140 <_sk_callback_sse2+0x5f5>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,61                              // je            20be <_sk_scale_u8_sse2+0x91>
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,23                              // je            20a3 <_sk_scale_u8_sse2+0x76>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,181                             // jne           2047 <_sk_scale_u8_sse2+0x1a>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,69                // pshufd        $0x45,%xmm8,%xmm8
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  102,68,15,96,200                    // punpcklbw     %xmm0,%xmm9
  .byte  102,68,15,97,200                    // punpcklwd     %xmm0,%xmm9
  .byte  242,69,15,16,193                    // movsd         %xmm9,%xmm8
  .byte  235,137                             // jmp           2047 <_sk_scale_u8_sse2+0x1a>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  233,122,255,255,255                 // jmpq          2047 <_sk_scale_u8_sse2+0x1a>

HIDDEN _sk_lerp_1_float_sse2
.globl _sk_lerp_1_float_sse2
FUNCTION(_sk_lerp_1_float_sse2)
_sk_lerp_1_float_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_sse2
.globl _sk_lerp_u8_sse2
FUNCTION(_sk_lerp_u8_sse2)
_sk_lerp_u8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,81                              // jne           2160 <_sk_lerp_u8_sse2+0x5b>
  .byte  102,69,15,110,4,18                  // movd          (%r10,%rdx,1),%xmm8
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  102,68,15,219,5,40,64,0,0           // pand          0x4028(%rip),%xmm8        # 6150 <_sk_callback_sse2+0x605>
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,44,64,0,0                // mulps         0x402c(%rip),%xmm8        # 6160 <_sk_callback_sse2+0x615>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,64                              // je            21ad <_sk_lerp_u8_sse2+0xa8>
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,23                              // je            218f <_sk_lerp_u8_sse2+0x8a>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,161                             // jne           211f <_sk_lerp_u8_sse2+0x1a>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,69                // pshufd        $0x45,%xmm8,%xmm8
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  102,68,15,96,200                    // punpcklbw     %xmm0,%xmm9
  .byte  102,68,15,97,200                    // punpcklwd     %xmm0,%xmm9
  .byte  242,69,15,16,193                    // movsd         %xmm9,%xmm8
  .byte  233,114,255,255,255                 // jmpq          211f <_sk_lerp_u8_sse2+0x1a>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  233,99,255,255,255                  // jmpq          211f <_sk_lerp_u8_sse2+0x1a>

HIDDEN _sk_lerp_565_sse2
.globl _sk_lerp_565_sse2
FUNCTION(_sk_lerp_565_sse2)
_sk_lerp_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,156,0,0,0                    // jne           2266 <_sk_lerp_565_sse2+0xaa>
  .byte  243,69,15,126,12,82                 // movq          (%r10,%rdx,2),%xmm9
  .byte  102,68,15,97,200                    // punpcklwd     %xmm0,%xmm9
  .byte  102,68,15,111,5,146,63,0,0          // movdqa        0x3f92(%rip),%xmm8        # 6170 <_sk_callback_sse2+0x625>
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,145,63,0,0               // mulps         0x3f91(%rip),%xmm8        # 6180 <_sk_callback_sse2+0x635>
  .byte  102,68,15,111,21,152,63,0,0         // movdqa        0x3f98(%rip),%xmm10        # 6190 <_sk_callback_sse2+0x645>
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  68,15,89,21,151,63,0,0              // mulps         0x3f97(%rip),%xmm10        # 61a0 <_sk_callback_sse2+0x655>
  .byte  102,68,15,219,13,158,63,0,0         // pand          0x3f9e(%rip),%xmm9        # 61b0 <_sk_callback_sse2+0x665>
  .byte  69,15,91,201                        // cvtdq2ps      %xmm9,%xmm9
  .byte  68,15,89,13,162,63,0,0              // mulps         0x3fa2(%rip),%xmm9        # 61c0 <_sk_callback_sse2+0x675>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  68,15,88,215                        // addps         %xmm7,%xmm10
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,95,211                        // maxps         %xmm3,%xmm10
  .byte  69,15,95,194                        // maxps         %xmm10,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,59                              // je            22ae <_sk_lerp_565_sse2+0xf2>
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,27                              // je            2299 <_sk_lerp_565_sse2+0xdd>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  15,133,77,255,255,255               // jne           21d5 <_sk_lerp_565_sse2+0x19>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,200,69                // pshufd        $0x45,%xmm8,%xmm9
  .byte  102,69,15,110,4,82                  // movd          (%r10,%rdx,2),%xmm8
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  242,69,15,16,200                    // movsd         %xmm8,%xmm9
  .byte  233,39,255,255,255                  // jmpq          21d5 <_sk_lerp_565_sse2+0x19>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  233,24,255,255,255                  // jmpq          21d5 <_sk_lerp_565_sse2+0x19>

HIDDEN _sk_load_tables_sse2
.globl _sk_load_tables_sse2
FUNCTION(_sk_load_tables_sse2)
_sk_load_tables_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,36,1,0,0                     // jne           23ef <_sk_load_tables_sse2+0x132>
  .byte  243,69,15,111,12,145                // movdqu        (%r9,%rdx,4),%xmm9
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,68,15,111,5,241,62,0,0          // movdqa        0x3ef1(%rip),%xmm8        # 61d0 <_sk_callback_sse2+0x685>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,73,15,126,201                   // movq          %xmm1,%r9
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  69,15,182,241                       // movzbl        %r9b,%r14d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,12,19                  // movss         (%rbx,%r10,1),%xmm1
  .byte  243,66,15,16,4,11                   // movss         (%rbx,%r9,1),%xmm0
  .byte  15,20,200                           // unpcklps      %xmm0,%xmm1
  .byte  243,66,15,16,4,155                  // movss         (%rbx,%r11,4),%xmm0
  .byte  243,66,15,16,20,179                 // movss         (%rbx,%r14,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,193                           // unpcklps      %xmm1,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,65,15,219,200                   // pand          %xmm8,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,209                   // movq          %xmm2,%r9
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  68,15,182,211                       // movzbl        %bl,%r10d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,65,15,16,20,31                  // movss         (%r15,%rbx,1),%xmm2
  .byte  243,67,15,16,12,15                  // movss         (%r15,%r9,1),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  243,67,15,16,28,159                 // movss         (%r15,%r11,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,65,15,111,209                   // movdqa        %xmm9,%xmm2
  .byte  102,15,114,210,16                   // psrld         $0x10,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,72,15,126,219                   // movq          %xmm3,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,219                       // movzbl        %bl,%r11d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  243,69,15,16,4,1                    // movss         (%r9,%rax,1),%xmm8
  .byte  243,65,15,16,20,25                  // movss         (%r9,%rbx,1),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  243,67,15,16,28,153                 // movss         (%r9,%r11,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  15,89,29,250,61,0,0                 // mulps         0x3dfa(%rip),%xmm3        # 61e0 <_sk_callback_sse2+0x695>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,194                          // mov           %r8d,%r10d
  .byte  65,128,226,3                        // and           $0x3,%r10b
  .byte  65,128,250,1                        // cmp           $0x1,%r10b
  .byte  116,45                              // je            2429 <_sk_load_tables_sse2+0x16c>
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  65,128,250,2                        // cmp           $0x2,%r10b
  .byte  116,23                              // je            241e <_sk_load_tables_sse2+0x161>
  .byte  65,128,250,3                        // cmp           $0x3,%r10b
  .byte  15,133,192,254,255,255              // jne           22d1 <_sk_load_tables_sse2+0x14>
  .byte  102,65,15,110,68,145,8              // movd          0x8(%r9,%rdx,4),%xmm0
  .byte  102,68,15,112,200,69                // pshufd        $0x45,%xmm0,%xmm9
  .byte  102,69,15,18,12,145                 // movlpd        (%r9,%rdx,4),%xmm9
  .byte  233,168,254,255,255                 // jmpq          22d1 <_sk_load_tables_sse2+0x14>
  .byte  102,69,15,110,12,145                // movd          (%r9,%rdx,4),%xmm9
  .byte  233,157,254,255,255                 // jmpq          22d1 <_sk_load_tables_sse2+0x14>

HIDDEN _sk_load_tables_u16_be_sse2
.globl _sk_load_tables_u16_be_sse2
FUNCTION(_sk_load_tables_u16_be_sse2)
_sk_load_tables_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,101,1,0,0                    // jne           25af <_sk_load_tables_u16_be_sse2+0x17b>
  .byte  102,67,15,16,4,81                   // movupd        (%r9,%r10,2),%xmm0
  .byte  102,67,15,16,76,81,16               // movupd        0x10(%r9,%r10,2),%xmm1
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,68,15,40,200                    // movapd        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,68,15,111,21,111,61,0,0         // movdqa        0x3d6f(%rip),%xmm10        # 61f0 <_sk_callback_sse2+0x6a5>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,194                   // pand          %xmm10,%xmm0
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,65,15,97,192                    // punpcklwd     %xmm8,%xmm0
  .byte  102,15,112,216,78                   // pshufd        $0x4e,%xmm0,%xmm3
  .byte  102,73,15,126,217                   // movq          %xmm3,%r9
  .byte  69,15,182,209                       // movzbl        %r9b,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  69,15,182,243                       // movzbl        %r11b,%r14d
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,28,27                  // movss         (%rbx,%r11,1),%xmm3
  .byte  243,66,15,16,4,139                  // movss         (%rbx,%r9,4),%xmm0
  .byte  15,20,216                           // unpcklps      %xmm0,%xmm3
  .byte  243,66,15,16,4,179                  // movss         (%rbx,%r14,4),%xmm0
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,195                           // unpcklps      %xmm3,%xmm0
  .byte  102,15,115,217,8                    // psrldq        $0x8,%xmm1
  .byte  102,65,15,219,202                   // pand          %xmm10,%xmm1
  .byte  102,65,15,97,200                    // punpcklwd     %xmm8,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,73,15,126,202                   // movq          %xmm1,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  243,67,15,16,20,23                  // movss         (%r15,%r10,1),%xmm2
  .byte  243,65,15,16,12,159                 // movss         (%r15,%rbx,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,159                 // movss         (%r15,%r11,4),%xmm1
  .byte  243,67,15,16,28,143                 // movss         (%r15,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,69,15,97,208                    // punpcklwd     %xmm8,%xmm10
  .byte  102,65,15,112,210,78                // pshufd        $0x4e,%xmm10,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,76,15,126,208                   // movq          %xmm10,%rax
  .byte  68,15,182,216                       // movzbl        %al,%r11d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  243,69,15,16,20,2                   // movss         (%r10,%rax,1),%xmm10
  .byte  243,65,15,16,20,154                 // movss         (%r10,%rbx,4),%xmm2
  .byte  68,15,20,210                        // unpcklps      %xmm2,%xmm10
  .byte  243,67,15,16,20,154                 // movss         (%r10,%r11,4),%xmm2
  .byte  243,67,15,16,28,138                 // movss         (%r10,%r9,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,210                        // unpcklps      %xmm10,%xmm2
  .byte  102,65,15,112,217,78                // pshufd        $0x4e,%xmm9,%xmm3
  .byte  102,68,15,111,203                   // movdqa        %xmm3,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,217                   // por           %xmm9,%xmm3
  .byte  102,65,15,97,216                    // punpcklwd     %xmm8,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,90,60,0,0                  // mulps         0x3c5a(%rip),%xmm3        # 6200 <_sk_callback_sse2+0x6b5>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  242,67,15,16,4,81                   // movsd         (%r9,%r10,2),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,17                              // jne           25cc <_sk_load_tables_u16_be_sse2+0x198>
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  233,139,254,255,255                 // jmpq          2457 <_sk_load_tables_u16_be_sse2+0x23>
  .byte  102,67,15,22,68,81,8                // movhpd        0x8(%r9,%r10,2),%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,118,254,255,255              // jb            2457 <_sk_load_tables_u16_be_sse2+0x23>
  .byte  242,67,15,16,76,81,16               // movsd         0x10(%r9,%r10,2),%xmm1
  .byte  233,106,254,255,255                 // jmpq          2457 <_sk_load_tables_u16_be_sse2+0x23>

HIDDEN _sk_load_tables_rgb_u16_be_sse2
.globl _sk_load_tables_rgb_u16_be_sse2
FUNCTION(_sk_load_tables_rgb_u16_be_sse2)
_sk_load_tables_rgb_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,82                        // lea           (%rdx,%rdx,2),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,84,1,0,0                     // jne           2753 <_sk_load_tables_rgb_u16_be_sse2+0x166>
  .byte  243,71,15,111,28,81                 // movdqu        (%r9,%r10,2),%xmm11
  .byte  243,67,15,111,76,81,8               // movdqu        0x8(%r9,%r10,2),%xmm1
  .byte  102,15,115,217,4                    // psrldq        $0x4,%xmm1
  .byte  102,69,15,111,211                   // movdqa        %xmm11,%xmm10
  .byte  102,65,15,115,218,6                 // psrldq        $0x6,%xmm10
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,68,15,97,217                    // punpcklwd     %xmm1,%xmm11
  .byte  102,68,15,97,208                    // punpcklwd     %xmm0,%xmm10
  .byte  102,65,15,111,195                   // movdqa        %xmm11,%xmm0
  .byte  102,65,15,97,194                    // punpcklwd     %xmm10,%xmm0
  .byte  102,68,15,111,5,201,59,0,0          // movdqa        0x3bc9(%rip),%xmm8        # 6210 <_sk_callback_sse2+0x6c5>
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  102,15,112,216,78                   // pshufd        $0x4e,%xmm0,%xmm3
  .byte  102,73,15,126,217                   // movq          %xmm3,%r9
  .byte  69,15,182,209                       // movzbl        %r9b,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  69,15,182,243                       // movzbl        %r11b,%r14d
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,28,27                  // movss         (%rbx,%r11,1),%xmm3
  .byte  243,66,15,16,4,139                  // movss         (%rbx,%r9,4),%xmm0
  .byte  15,20,216                           // unpcklps      %xmm0,%xmm3
  .byte  243,66,15,16,4,179                  // movss         (%rbx,%r14,4),%xmm0
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,195                           // unpcklps      %xmm3,%xmm0
  .byte  102,65,15,219,200                   // pand          %xmm8,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,73,15,126,202                   // movq          %xmm1,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  243,67,15,16,20,23                  // movss         (%r15,%r10,1),%xmm2
  .byte  243,65,15,16,12,159                 // movss         (%r15,%rbx,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,159                 // movss         (%r15,%r11,4),%xmm1
  .byte  243,67,15,16,28,143                 // movss         (%r15,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  102,69,15,105,218                   // punpckhwd     %xmm10,%xmm11
  .byte  102,69,15,219,216                   // pand          %xmm8,%xmm11
  .byte  102,69,15,97,217                    // punpcklwd     %xmm9,%xmm11
  .byte  102,65,15,112,211,78                // pshufd        $0x4e,%xmm11,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,76,15,126,216                   // movq          %xmm11,%rax
  .byte  68,15,182,216                       // movzbl        %al,%r11d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  243,69,15,16,4,2                    // movss         (%r10,%rax,1),%xmm8
  .byte  243,65,15,16,20,154                 // movss         (%r10,%rbx,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,67,15,16,20,154                 // movss         (%r10,%r11,4),%xmm2
  .byte  243,67,15,16,28,138                 // movss         (%r10,%r9,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,212,58,0,0                 // movaps        0x3ad4(%rip),%xmm3        # 6220 <_sk_callback_sse2+0x6d5>
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  102,71,15,110,28,81                 // movd          (%r9,%r10,2),%xmm11
  .byte  102,71,15,196,92,81,4,2             // pinsrw        $0x2,0x4(%r9,%r10,2),%xmm11
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,14                              // jne           2779 <_sk_load_tables_rgb_u16_be_sse2+0x18c>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  233,172,254,255,255                 // jmpq          2625 <_sk_load_tables_rgb_u16_be_sse2+0x38>
  .byte  102,71,15,110,84,81,6               // movd          0x6(%r9,%r10,2),%xmm10
  .byte  102,71,15,196,84,81,10,2            // pinsrw        $0x2,0xa(%r9,%r10,2),%xmm10
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,24                              // jb            27aa <_sk_load_tables_rgb_u16_be_sse2+0x1bd>
  .byte  102,67,15,110,76,81,12              // movd          0xc(%r9,%r10,2),%xmm1
  .byte  102,67,15,196,76,81,16,2            // pinsrw        $0x2,0x10(%r9,%r10,2),%xmm1
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,123,254,255,255                 // jmpq          2625 <_sk_load_tables_rgb_u16_be_sse2+0x38>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,114,254,255,255                 // jmpq          2625 <_sk_load_tables_rgb_u16_be_sse2+0x38>

HIDDEN _sk_byte_tables_sse2
.globl _sk_byte_tables_sse2
FUNCTION(_sk_byte_tables_sse2)
_sk_byte_tables_sse2:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,109,58,0,0               // movaps        0x3a6d(%rip),%xmm8        # 6230 <_sk_callback_sse2+0x6e5>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,206                          // mov           %r9d,%r14d
  .byte  77,137,207                          // mov           %r9,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  70,15,182,52,51                     // movzbl        (%rbx,%r14,1),%r14d
  .byte  66,15,182,44,59                     // movzbl        (%rbx,%r15,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,245                            // or            %r14d,%ebp
  .byte  70,15,182,20,19                     // movzbl        (%rbx,%r10,1),%r10d
  .byte  66,15,182,28,27                     // movzbl        (%rbx,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  102,15,196,195,0                    // pinsrw        $0x0,%ebx,%xmm0
  .byte  102,15,196,197,1                    // pinsrw        $0x1,%ebp,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,96,193                    // punpcklbw     %xmm9,%xmm0
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,21,7,58,0,0                // movaps        0x3a07(%rip),%xmm10        # 6240 <_sk_callback_sse2+0x6f5>
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,126,205                   // movq          %xmm1,%rbp
  .byte  65,137,234                          // mov           %ebp,%r10d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  102,15,112,201,78                   // pshufd        $0x4e,%xmm1,%xmm1
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,219                          // mov           %ebx,%r11d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,219                            // or            %r11d,%ebx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,44,41                     // movzbl        (%r9,%rbp,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,213                            // or            %r10d,%ebp
  .byte  102,15,196,205,0                    // pinsrw        $0x0,%ebp,%xmm1
  .byte  102,15,196,203,1                    // pinsrw        $0x1,%ebx,%xmm1
  .byte  102,65,15,96,201                    // punpcklbw     %xmm9,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,15,112,210,78                   // pshufd        $0x4e,%xmm2,%xmm2
  .byte  102,72,15,126,213                   // movq          %xmm2,%rbp
  .byte  65,137,235                          // mov           %ebp,%r11d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  71,15,182,28,26                     // movzbl        (%r10,%r11,1),%r11d
  .byte  65,15,182,44,42                     // movzbl        (%r10,%rbp,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,221                            // or            %r11d,%ebp
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  65,15,182,28,26                     // movzbl        (%r10,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,203                            // or            %r9d,%ebx
  .byte  102,15,196,211,0                    // pinsrw        $0x0,%ebx,%xmm2
  .byte  102,15,196,213,1                    // pinsrw        $0x1,%ebp,%xmm2
  .byte  102,65,15,96,209                    // punpcklbw     %xmm9,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  102,15,91,219                       // cvtps2dq      %xmm3,%xmm3
  .byte  102,72,15,126,221                   // movq          %xmm3,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  102,15,112,219,78                   // pshufd        $0x4e,%xmm3,%xmm3
  .byte  102,72,15,126,219                   // movq          %xmm3,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  70,15,182,20,16                     // movzbl        (%rax,%r10,1),%r10d
  .byte  15,182,28,24                        // movzbl        (%rax,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  70,15,182,12,8                      // movzbl        (%rax,%r9,1),%r9d
  .byte  15,182,4,40                         // movzbl        (%rax,%rbp,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,200                            // or            %r9d,%eax
  .byte  102,15,196,216,0                    // pinsrw        $0x0,%eax,%xmm3
  .byte  102,15,196,219,1                    // pinsrw        $0x1,%ebx,%xmm3
  .byte  102,65,15,96,217                    // punpcklbw     %xmm9,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_sse2
.globl _sk_byte_tables_rgb_sse2
FUNCTION(_sk_byte_tables_rgb_sse2)
_sk_byte_tables_rgb_sse2:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,72,24                        // mov           0x18(%rax),%r9d
  .byte  65,255,201                          // dec           %r9d
  .byte  102,69,15,110,193                   // movd          %r9d,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,206                          // mov           %r9d,%r14d
  .byte  77,137,207                          // mov           %r9,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  70,15,182,52,51                     // movzbl        (%rbx,%r14,1),%r14d
  .byte  66,15,182,44,59                     // movzbl        (%rbx,%r15,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,245                            // or            %r14d,%ebp
  .byte  70,15,182,20,19                     // movzbl        (%rbx,%r10,1),%r10d
  .byte  66,15,182,28,27                     // movzbl        (%rbx,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  102,15,196,195,0                    // pinsrw        $0x0,%ebx,%xmm0
  .byte  102,15,196,197,1                    // pinsrw        $0x1,%ebp,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,96,193                    // punpcklbw     %xmm9,%xmm0
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,21,79,56,0,0               // movaps        0x384f(%rip),%xmm10        # 6250 <_sk_callback_sse2+0x705>
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,126,205                   // movq          %xmm1,%rbp
  .byte  65,137,234                          // mov           %ebp,%r10d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  102,15,112,201,78                   // pshufd        $0x4e,%xmm1,%xmm1
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,219                          // mov           %ebx,%r11d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,219                            // or            %r11d,%ebx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,44,41                     // movzbl        (%r9,%rbp,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,213                            // or            %r10d,%ebp
  .byte  102,15,196,205,0                    // pinsrw        $0x0,%ebp,%xmm1
  .byte  102,15,196,203,1                    // pinsrw        $0x1,%ebx,%xmm1
  .byte  102,65,15,96,201                    // punpcklbw     %xmm9,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  72,139,64,16                        // mov           0x10(%rax),%rax
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,126,213                   // movq          %xmm2,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  102,15,112,210,78                   // pshufd        $0x4e,%xmm2,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  70,15,182,20,16                     // movzbl        (%rax,%r10,1),%r10d
  .byte  15,182,28,24                        // movzbl        (%rax,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  70,15,182,12,8                      // movzbl        (%rax,%r9,1),%r9d
  .byte  15,182,4,40                         // movzbl        (%rax,%rbp,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,200                            // or            %r9d,%eax
  .byte  102,15,196,208,0                    // pinsrw        $0x0,%eax,%xmm2
  .byte  102,15,196,211,1                    // pinsrw        $0x1,%ebx,%xmm2
  .byte  102,65,15,96,209                    // punpcklbw     %xmm9,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_sse2
.globl _sk_table_r_sse2
FUNCTION(_sk_table_r_sse2)
_sk_table_r_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,192,78                // pshufd        $0x4e,%xmm8,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,77,15,126,195                   // movq          %xmm8,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,153                  // movss         (%r9,%r11,4),%xmm8
  .byte  243,65,15,16,4,129                  // movss         (%r9,%rax,4),%xmm0
  .byte  68,15,20,192                        // unpcklps      %xmm0,%xmm8
  .byte  243,65,15,16,4,153                  // movss         (%r9,%rbx,4),%xmm0
  .byte  243,71,15,16,12,145                 // movss         (%r9,%r10,4),%xmm9
  .byte  65,15,20,193                        // unpcklps      %xmm9,%xmm0
  .byte  65,15,20,192                        // unpcklps      %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_sse2
.globl _sk_table_g_sse2
FUNCTION(_sk_table_g_sse2)
_sk_table_g_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,200,78                // pshufd        $0x4e,%xmm8,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,77,15,126,195                   // movq          %xmm8,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,153                  // movss         (%r9,%r11,4),%xmm8
  .byte  243,65,15,16,12,129                 // movss         (%r9,%rax,4),%xmm1
  .byte  68,15,20,193                        // unpcklps      %xmm1,%xmm8
  .byte  243,65,15,16,12,153                 // movss         (%r9,%rbx,4),%xmm1
  .byte  243,71,15,16,12,145                 // movss         (%r9,%r10,4),%xmm9
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  65,15,20,200                        // unpcklps      %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_sse2
.globl _sk_table_b_sse2
FUNCTION(_sk_table_b_sse2)
_sk_table_b_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,208,78                // pshufd        $0x4e,%xmm8,%xmm2
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,77,15,126,195                   // movq          %xmm8,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,153                  // movss         (%r9,%r11,4),%xmm8
  .byte  243,65,15,16,20,129                 // movss         (%r9,%rax,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,65,15,16,20,153                 // movss         (%r9,%rbx,4),%xmm2
  .byte  243,71,15,16,12,145                 // movss         (%r9,%r10,4),%xmm9
  .byte  65,15,20,209                        // unpcklps      %xmm9,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_sse2
.globl _sk_table_a_sse2
FUNCTION(_sk_table_a_sse2)
_sk_table_a_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,216,78                // pshufd        $0x4e,%xmm8,%xmm3
  .byte  102,72,15,126,216                   // movq          %xmm3,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,77,15,126,195                   // movq          %xmm8,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,153                  // movss         (%r9,%r11,4),%xmm8
  .byte  243,65,15,16,28,129                 // movss         (%r9,%rax,4),%xmm3
  .byte  68,15,20,195                        // unpcklps      %xmm3,%xmm8
  .byte  243,65,15,16,28,153                 // movss         (%r9,%rbx,4),%xmm3
  .byte  243,71,15,16,12,145                 // movss         (%r9,%r10,4),%xmm9
  .byte  65,15,20,217                        // unpcklps      %xmm9,%xmm3
  .byte  65,15,20,216                        // unpcklps      %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_sse2
.globl _sk_parametric_r_sse2
FUNCTION(_sk_parametric_r_sse2)
_sk_parametric_r_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  65,15,194,193,2                     // cmpleps       %xmm9,%xmm0
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,131,53,0,0              // mulps         0x3583(%rip),%xmm9        # 6260 <_sk_callback_sse2+0x715>
  .byte  68,15,84,21,139,53,0,0              // andps         0x358b(%rip),%xmm10        # 6270 <_sk_callback_sse2+0x725>
  .byte  68,15,86,21,147,53,0,0              // orps          0x3593(%rip),%xmm10        # 6280 <_sk_callback_sse2+0x735>
  .byte  68,15,88,13,155,53,0,0              // addps         0x359b(%rip),%xmm9        # 6290 <_sk_callback_sse2+0x745>
  .byte  68,15,40,37,163,53,0,0              // movaps        0x35a3(%rip),%xmm12        # 62a0 <_sk_callback_sse2+0x755>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,163,53,0,0              // addps         0x35a3(%rip),%xmm10        # 62b0 <_sk_callback_sse2+0x765>
  .byte  68,15,40,37,171,53,0,0              // movaps        0x35ab(%rip),%xmm12        # 62c0 <_sk_callback_sse2+0x775>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,149,53,0,0              // movaps        0x3595(%rip),%xmm10        # 62d0 <_sk_callback_sse2+0x785>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,137,53,0,0              // addps         0x3589(%rip),%xmm9        # 62e0 <_sk_callback_sse2+0x795>
  .byte  68,15,40,37,145,53,0,0              // movaps        0x3591(%rip),%xmm12        # 62f0 <_sk_callback_sse2+0x7a5>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,145,53,0,0              // movaps        0x3591(%rip),%xmm12        # 6300 <_sk_callback_sse2+0x7b5>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,149,53,0,0              // movaps        0x3595(%rip),%xmm13        # 6310 <_sk_callback_sse2+0x7c5>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,149,53,0,0              // mulps         0x3595(%rip),%xmm13        # 6320 <_sk_callback_sse2+0x7d5>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,192                        // andps         %xmm0,%xmm8
  .byte  65,15,85,196                        // andnps        %xmm12,%xmm0
  .byte  65,15,86,192                        // orps          %xmm8,%xmm0
  .byte  65,15,95,195                        // maxps         %xmm11,%xmm0
  .byte  65,15,93,194                        // minps         %xmm10,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_sse2
.globl _sk_parametric_g_sse2
FUNCTION(_sk_parametric_g_sse2)
_sk_parametric_g_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  65,15,194,201,2                     // cmpleps       %xmm9,%xmm1
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,21,53,0,0               // mulps         0x3515(%rip),%xmm9        # 6330 <_sk_callback_sse2+0x7e5>
  .byte  68,15,84,21,29,53,0,0               // andps         0x351d(%rip),%xmm10        # 6340 <_sk_callback_sse2+0x7f5>
  .byte  68,15,86,21,37,53,0,0               // orps          0x3525(%rip),%xmm10        # 6350 <_sk_callback_sse2+0x805>
  .byte  68,15,88,13,45,53,0,0               // addps         0x352d(%rip),%xmm9        # 6360 <_sk_callback_sse2+0x815>
  .byte  68,15,40,37,53,53,0,0               // movaps        0x3535(%rip),%xmm12        # 6370 <_sk_callback_sse2+0x825>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,53,53,0,0               // addps         0x3535(%rip),%xmm10        # 6380 <_sk_callback_sse2+0x835>
  .byte  68,15,40,37,61,53,0,0               // movaps        0x353d(%rip),%xmm12        # 6390 <_sk_callback_sse2+0x845>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,39,53,0,0               // movaps        0x3527(%rip),%xmm10        # 63a0 <_sk_callback_sse2+0x855>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,27,53,0,0               // addps         0x351b(%rip),%xmm9        # 63b0 <_sk_callback_sse2+0x865>
  .byte  68,15,40,37,35,53,0,0               // movaps        0x3523(%rip),%xmm12        # 63c0 <_sk_callback_sse2+0x875>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,35,53,0,0               // movaps        0x3523(%rip),%xmm12        # 63d0 <_sk_callback_sse2+0x885>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,39,53,0,0               // movaps        0x3527(%rip),%xmm13        # 63e0 <_sk_callback_sse2+0x895>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,39,53,0,0               // mulps         0x3527(%rip),%xmm13        # 63f0 <_sk_callback_sse2+0x8a5>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  65,15,85,204                        // andnps        %xmm12,%xmm1
  .byte  65,15,86,200                        // orps          %xmm8,%xmm1
  .byte  65,15,95,203                        // maxps         %xmm11,%xmm1
  .byte  65,15,93,202                        // minps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_sse2
.globl _sk_parametric_b_sse2
FUNCTION(_sk_parametric_b_sse2)
_sk_parametric_b_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  65,15,194,209,2                     // cmpleps       %xmm9,%xmm2
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,167,52,0,0              // mulps         0x34a7(%rip),%xmm9        # 6400 <_sk_callback_sse2+0x8b5>
  .byte  68,15,84,21,175,52,0,0              // andps         0x34af(%rip),%xmm10        # 6410 <_sk_callback_sse2+0x8c5>
  .byte  68,15,86,21,183,52,0,0              // orps          0x34b7(%rip),%xmm10        # 6420 <_sk_callback_sse2+0x8d5>
  .byte  68,15,88,13,191,52,0,0              // addps         0x34bf(%rip),%xmm9        # 6430 <_sk_callback_sse2+0x8e5>
  .byte  68,15,40,37,199,52,0,0              // movaps        0x34c7(%rip),%xmm12        # 6440 <_sk_callback_sse2+0x8f5>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,199,52,0,0              // addps         0x34c7(%rip),%xmm10        # 6450 <_sk_callback_sse2+0x905>
  .byte  68,15,40,37,207,52,0,0              // movaps        0x34cf(%rip),%xmm12        # 6460 <_sk_callback_sse2+0x915>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,185,52,0,0              // movaps        0x34b9(%rip),%xmm10        # 6470 <_sk_callback_sse2+0x925>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,173,52,0,0              // addps         0x34ad(%rip),%xmm9        # 6480 <_sk_callback_sse2+0x935>
  .byte  68,15,40,37,181,52,0,0              // movaps        0x34b5(%rip),%xmm12        # 6490 <_sk_callback_sse2+0x945>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,181,52,0,0              // movaps        0x34b5(%rip),%xmm12        # 64a0 <_sk_callback_sse2+0x955>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,185,52,0,0              // movaps        0x34b9(%rip),%xmm13        # 64b0 <_sk_callback_sse2+0x965>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,185,52,0,0              // mulps         0x34b9(%rip),%xmm13        # 64c0 <_sk_callback_sse2+0x975>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,212                        // andnps        %xmm12,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  65,15,95,211                        // maxps         %xmm11,%xmm2
  .byte  65,15,93,210                        // minps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_sse2
.globl _sk_parametric_a_sse2
FUNCTION(_sk_parametric_a_sse2)
_sk_parametric_a_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  65,15,194,217,2                     // cmpleps       %xmm9,%xmm3
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,57,52,0,0               // mulps         0x3439(%rip),%xmm9        # 64d0 <_sk_callback_sse2+0x985>
  .byte  68,15,84,21,65,52,0,0               // andps         0x3441(%rip),%xmm10        # 64e0 <_sk_callback_sse2+0x995>
  .byte  68,15,86,21,73,52,0,0               // orps          0x3449(%rip),%xmm10        # 64f0 <_sk_callback_sse2+0x9a5>
  .byte  68,15,88,13,81,52,0,0               // addps         0x3451(%rip),%xmm9        # 6500 <_sk_callback_sse2+0x9b5>
  .byte  68,15,40,37,89,52,0,0               // movaps        0x3459(%rip),%xmm12        # 6510 <_sk_callback_sse2+0x9c5>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,89,52,0,0               // addps         0x3459(%rip),%xmm10        # 6520 <_sk_callback_sse2+0x9d5>
  .byte  68,15,40,37,97,52,0,0               // movaps        0x3461(%rip),%xmm12        # 6530 <_sk_callback_sse2+0x9e5>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,75,52,0,0               // movaps        0x344b(%rip),%xmm10        # 6540 <_sk_callback_sse2+0x9f5>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,63,52,0,0               // addps         0x343f(%rip),%xmm9        # 6550 <_sk_callback_sse2+0xa05>
  .byte  68,15,40,37,71,52,0,0               // movaps        0x3447(%rip),%xmm12        # 6560 <_sk_callback_sse2+0xa15>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,71,52,0,0               // movaps        0x3447(%rip),%xmm12        # 6570 <_sk_callback_sse2+0xa25>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,75,52,0,0               // movaps        0x344b(%rip),%xmm13        # 6580 <_sk_callback_sse2+0xa35>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,75,52,0,0               // mulps         0x344b(%rip),%xmm13        # 6590 <_sk_callback_sse2+0xa45>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,195                        // andps         %xmm3,%xmm8
  .byte  65,15,85,220                        // andnps        %xmm12,%xmm3
  .byte  65,15,86,216                        // orps          %xmm8,%xmm3
  .byte  65,15,95,219                        // maxps         %xmm11,%xmm3
  .byte  65,15,93,218                        // minps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_sse2
.globl _sk_lab_to_xyz_sse2
FUNCTION(_sk_lab_to_xyz_sse2)
_sk_lab_to_xyz_sse2:
  .byte  15,89,5,40,52,0,0                   // mulps         0x3428(%rip),%xmm0        # 65a0 <_sk_callback_sse2+0xa55>
  .byte  68,15,40,5,48,52,0,0                // movaps        0x3430(%rip),%xmm8        # 65b0 <_sk_callback_sse2+0xa65>
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  68,15,40,13,52,52,0,0               // movaps        0x3434(%rip),%xmm9        # 65c0 <_sk_callback_sse2+0xa75>
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,88,5,49,52,0,0                   // addps         0x3431(%rip),%xmm0        # 65d0 <_sk_callback_sse2+0xa85>
  .byte  15,89,5,58,52,0,0                   // mulps         0x343a(%rip),%xmm0        # 65e0 <_sk_callback_sse2+0xa95>
  .byte  15,89,13,67,52,0,0                  // mulps         0x3443(%rip),%xmm1        # 65f0 <_sk_callback_sse2+0xaa5>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,21,73,52,0,0                  // mulps         0x3449(%rip),%xmm2        # 6600 <_sk_callback_sse2+0xab5>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,21,62,52,0,0                  // movaps        0x343e(%rip),%xmm2        # 6610 <_sk_callback_sse2+0xac5>
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,194,196,1                     // cmpltps       %xmm12,%xmm8
  .byte  68,15,40,21,61,52,0,0               // movaps        0x343d(%rip),%xmm10        # 6620 <_sk_callback_sse2+0xad5>
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,40,29,65,52,0,0               // movaps        0x3441(%rip),%xmm11        # 6630 <_sk_callback_sse2+0xae5>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  69,15,84,224                        // andps         %xmm8,%xmm12
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,196                        // orps          %xmm12,%xmm8
  .byte  68,15,40,224                        // movaps        %xmm0,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,194,204,1                     // cmpltps       %xmm12,%xmm1
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  68,15,84,225                        // andps         %xmm1,%xmm12
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  65,15,86,204                        // orps          %xmm12,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  15,194,208,1                        // cmpltps       %xmm0,%xmm2
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  15,84,194                           // andps         %xmm2,%xmm0
  .byte  65,15,85,209                        // andnps        %xmm9,%xmm2
  .byte  15,86,208                           // orps          %xmm0,%xmm2
  .byte  68,15,89,5,241,51,0,0               // mulps         0x33f1(%rip),%xmm8        # 6640 <_sk_callback_sse2+0xaf5>
  .byte  15,89,21,250,51,0,0                 // mulps         0x33fa(%rip),%xmm2        # 6650 <_sk_callback_sse2+0xb05>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_sse2
.globl _sk_load_a8_sse2
FUNCTION(_sk_load_a8_sse2)
_sk_load_a8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,46                              // jne           3296 <_sk_load_a8_sse2+0x38>
  .byte  102,65,15,110,4,18                  // movd          (%r10,%rdx,1),%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  102,15,219,5,226,51,0,0             // pand          0x33e2(%rip),%xmm0        # 6660 <_sk_callback_sse2+0xb15>
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,232,51,0,0                 // mulps         0x33e8(%rip),%xmm3        # 6670 <_sk_callback_sse2+0xb25>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,54                              // je            32d9 <_sk_load_a8_sse2+0x7b>
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            32c2 <_sk_load_a8_sse2+0x64>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,195                             // jne           3276 <_sk_load_a8_sse2+0x18>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  102,15,96,200                       // punpcklbw     %xmm0,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  242,15,16,193                       // movsd         %xmm1,%xmm0
  .byte  235,157                             // jmp           3276 <_sk_load_a8_sse2+0x18>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  235,146                             // jmp           3276 <_sk_load_a8_sse2+0x18>

HIDDEN _sk_load_a8_dst_sse2
.globl _sk_load_a8_dst_sse2
FUNCTION(_sk_load_a8_dst_sse2)
_sk_load_a8_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,46                              // jne           331c <_sk_load_a8_dst_sse2+0x38>
  .byte  102,65,15,110,36,18                 // movd          (%r10,%rdx,1),%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  102,15,219,37,124,51,0,0            // pand          0x337c(%rip),%xmm4        # 6680 <_sk_callback_sse2+0xb35>
  .byte  15,91,252                           // cvtdq2ps      %xmm4,%xmm7
  .byte  15,89,61,130,51,0,0                 // mulps         0x3382(%rip),%xmm7        # 6690 <_sk_callback_sse2+0xb45>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  102,15,87,237                       // xorpd         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,54                              // je            335f <_sk_load_a8_dst_sse2+0x7b>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3348 <_sk_load_a8_dst_sse2+0x64>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,195                             // jne           32fc <_sk_load_a8_dst_sse2+0x18>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,15,110,232                      // movd          %eax,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  235,157                             // jmp           32fc <_sk_load_a8_dst_sse2+0x18>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  235,146                             // jmp           32fc <_sk_load_a8_dst_sse2+0x18>

HIDDEN _sk_gather_a8_sse2
.globl _sk_gather_a8_sse2
FUNCTION(_sk_gather_a8_sse2)
_sk_gather_a8_sse2:
  .byte  85                                  // push          %rbp
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  65,15,182,44,25                     // movzbl        (%r9,%rbx,1),%ebp
  .byte  67,15,182,28,25                     // movzbl        (%r9,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  9,235                               // or            %ebp,%ebx
  .byte  67,15,182,44,17                     // movzbl        (%r9,%r10,1),%ebp
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,232                               // or            %ebp,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,163,50,0,0                 // mulps         0x32a3(%rip),%xmm3        # 66a0 <_sk_callback_sse2+0xb55>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  91                                  // pop           %rbx
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_sse2
.globl _sk_store_a8_sse2
FUNCTION(_sk_store_a8_sse2)
_sk_store_a8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  68,15,40,5,149,50,0,0               // movaps        0x3295(%rip),%xmm8        # 66b0 <_sk_callback_sse2+0xb65>
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,13                              // jne           344c <_sk_store_a8_sse2+0x3e>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  65,137,4,18                         // mov           %eax,(%r10,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,59                              // je            349e <_sk_store_a8_sse2+0x90>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,22                              // je            347f <_sk_store_a8_sse2+0x71>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,217                             // jne           3448 <_sk_store_a8_sse2+0x3a>
  .byte  102,68,15,127,68,36,232             // movdqa        %xmm8,-0x18(%rsp)
  .byte  138,68,36,240                       // mov           -0x10(%rsp),%al
  .byte  65,136,68,18,2                      // mov           %al,0x2(%r10,%rdx,1)
  .byte  102,68,15,219,5,56,50,0,0           // pand          0x3238(%rip),%xmm8        # 66c0 <_sk_callback_sse2+0xb75>
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,65,137,4,18                     // mov           %ax,(%r10,%rdx,1)
  .byte  235,170                             // jmp           3448 <_sk_store_a8_sse2+0x3a>
  .byte  102,68,15,127,68,36,216             // movdqa        %xmm8,-0x28(%rsp)
  .byte  138,68,36,216                       // mov           -0x28(%rsp),%al
  .byte  65,136,4,18                         // mov           %al,(%r10,%rdx,1)
  .byte  235,153                             // jmp           3448 <_sk_store_a8_sse2+0x3a>

HIDDEN _sk_load_g8_sse2
.globl _sk_load_g8_sse2
FUNCTION(_sk_load_g8_sse2)
_sk_load_g8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,49                              // jne           34ea <_sk_load_g8_sse2+0x3b>
  .byte  102,65,15,110,4,18                  // movd          (%r10,%rdx,1),%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  102,15,219,5,1,50,0,0               // pand          0x3201(%rip),%xmm0        # 66d0 <_sk_callback_sse2+0xb85>
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,7,50,0,0                    // mulps         0x3207(%rip),%xmm0        # 66e0 <_sk_callback_sse2+0xb95>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,14,50,0,0                  // movaps        0x320e(%rip),%xmm3        # 66f0 <_sk_callback_sse2+0xba5>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,54                              // je            352d <_sk_load_g8_sse2+0x7e>
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3516 <_sk_load_g8_sse2+0x67>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,192                             // jne           34c7 <_sk_load_g8_sse2+0x18>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  102,15,96,200                       // punpcklbw     %xmm0,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  242,15,16,193                       // movsd         %xmm1,%xmm0
  .byte  235,154                             // jmp           34c7 <_sk_load_g8_sse2+0x18>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  235,143                             // jmp           34c7 <_sk_load_g8_sse2+0x18>

HIDDEN _sk_load_g8_dst_sse2
.globl _sk_load_g8_dst_sse2
FUNCTION(_sk_load_g8_dst_sse2)
_sk_load_g8_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,49                              // jne           3573 <_sk_load_g8_dst_sse2+0x3b>
  .byte  102,65,15,110,36,18                 // movd          (%r10,%rdx,1),%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  102,15,219,37,168,49,0,0            // pand          0x31a8(%rip),%xmm4        # 6700 <_sk_callback_sse2+0xbb5>
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,37,174,49,0,0                 // mulps         0x31ae(%rip),%xmm4        # 6710 <_sk_callback_sse2+0xbc5>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,61,181,49,0,0                 // movaps        0x31b5(%rip),%xmm7        # 6720 <_sk_callback_sse2+0xbd5>
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,54                              // je            35b6 <_sk_load_g8_dst_sse2+0x7e>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            359f <_sk_load_g8_dst_sse2+0x67>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,192                             // jne           3550 <_sk_load_g8_dst_sse2+0x18>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  65,15,183,4,18                      // movzwl        (%r10,%rdx,1),%eax
  .byte  102,15,110,232                      // movd          %eax,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  235,154                             // jmp           3550 <_sk_load_g8_dst_sse2+0x18>
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  235,143                             // jmp           3550 <_sk_load_g8_dst_sse2+0x18>

HIDDEN _sk_gather_g8_sse2
.globl _sk_gather_g8_sse2
FUNCTION(_sk_gather_g8_sse2)
_sk_gather_g8_sse2:
  .byte  85                                  // push          %rbp
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  65,15,182,44,25                     // movzbl        (%r9,%rbx,1),%ebp
  .byte  67,15,182,28,25                     // movzbl        (%r9,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  9,235                               // or            %ebp,%ebx
  .byte  67,15,182,44,17                     // movzbl        (%r9,%r10,1),%ebp
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,232                               // or            %ebp,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,220,48,0,0                  // mulps         0x30dc(%rip),%xmm0        # 6730 <_sk_callback_sse2+0xbe5>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,227,48,0,0                 // movaps        0x30e3(%rip),%xmm3        # 6740 <_sk_callback_sse2+0xbf5>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  91                                  // pop           %rbx
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_sse2
.globl _sk_gather_i8_sse2
FUNCTION(_sk_gather_i8_sse2)
_sk_gather_i8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,193                          // mov           %rax,%r9
  .byte  77,133,201                          // test          %r9,%r9
  .byte  116,5                               // je            3676 <_sk_gather_i8_sse2+0xf>
  .byte  76,137,200                          // mov           %r9,%rax
  .byte  235,2                               // jmp           3678 <_sk_gather_i8_sse2+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  85                                  // push          %rbp
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,72,15,126,195                   // movq          %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  67,15,182,44,50                     // movzbl        (%r10,%r14,1),%ebp
  .byte  65,15,182,28,26                     // movzbl        (%r10,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  9,235                               // or            %ebp,%ebx
  .byte  67,15,182,44,26                     // movzbl        (%r10,%r11,1),%ebp
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,232                               // or            %ebp,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,195                   // movq          %xmm0,%rbx
  .byte  73,139,105,8                        // mov           0x8(%r9),%rbp
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  102,15,110,68,29,0                  // movd          0x0(%rbp,%rbx,1),%xmm0
  .byte  102,15,110,76,133,0                 // movd          0x0(%rbp,%rax,4),%xmm1
  .byte  102,15,98,193                       // punpckldq     %xmm1,%xmm0
  .byte  102,70,15,110,76,141,0              // movd          0x0(%rbp,%r9,4),%xmm9
  .byte  102,66,15,110,76,149,0              // movd          0x0(%rbp,%r10,4),%xmm1
  .byte  102,68,15,98,201                    // punpckldq     %xmm1,%xmm9
  .byte  102,68,15,98,200                    // punpckldq     %xmm0,%xmm9
  .byte  102,15,111,21,252,47,0,0            // movdqa        0x2ffc(%rip),%xmm2        # 6750 <_sk_callback_sse2+0xc05>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,248,47,0,0               // movaps        0x2ff8(%rip),%xmm8        # 6760 <_sk_callback_sse2+0xc15>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,65,15,111,217                   // movdqa        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_sse2
.globl _sk_load_565_sse2
FUNCTION(_sk_load_565_sse2)
_sk_load_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,83                              // jne           3809 <_sk_load_565_sse2+0x5d>
  .byte  243,65,15,126,20,82                 // movq          (%r10,%rdx,2),%xmm2
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,111,5,168,47,0,0             // movdqa        0x2fa8(%rip),%xmm0        # 6770 <_sk_callback_sse2+0xc25>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,170,47,0,0                  // mulps         0x2faa(%rip),%xmm0        # 6780 <_sk_callback_sse2+0xc35>
  .byte  102,15,111,13,178,47,0,0            // movdqa        0x2fb2(%rip),%xmm1        # 6790 <_sk_callback_sse2+0xc45>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,180,47,0,0                 // mulps         0x2fb4(%rip),%xmm1        # 67a0 <_sk_callback_sse2+0xc55>
  .byte  102,15,219,21,188,47,0,0            // pand          0x2fbc(%rip),%xmm2        # 67b0 <_sk_callback_sse2+0xc65>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,194,47,0,0                 // mulps         0x2fc2(%rip),%xmm2        # 67c0 <_sk_callback_sse2+0xc75>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,201,47,0,0                 // movaps        0x2fc9(%rip),%xmm3        # 67d0 <_sk_callback_sse2+0xc85>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,50                              // je            3848 <_sk_load_565_sse2+0x9c>
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3835 <_sk_load_565_sse2+0x89>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,154                             // jne           37c0 <_sk_load_565_sse2+0x14>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,208,69                   // pshufd        $0x45,%xmm0,%xmm2
  .byte  102,65,15,110,4,82                  // movd          (%r10,%rdx,2),%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  242,15,16,208                       // movsd         %xmm0,%xmm2
  .byte  233,120,255,255,255                 // jmpq          37c0 <_sk_load_565_sse2+0x14>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,208                      // movd          %eax,%xmm2
  .byte  233,106,255,255,255                 // jmpq          37c0 <_sk_load_565_sse2+0x14>

HIDDEN _sk_load_565_dst_sse2
.globl _sk_load_565_dst_sse2
FUNCTION(_sk_load_565_dst_sse2)
_sk_load_565_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,83                              // jne           38b3 <_sk_load_565_dst_sse2+0x5d>
  .byte  243,65,15,126,52,82                 // movq          (%r10,%rdx,2),%xmm6
  .byte  102,15,97,240                       // punpcklwd     %xmm0,%xmm6
  .byte  102,15,111,37,110,47,0,0            // movdqa        0x2f6e(%rip),%xmm4        # 67e0 <_sk_callback_sse2+0xc95>
  .byte  102,15,219,230                      // pand          %xmm6,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,37,112,47,0,0                 // mulps         0x2f70(%rip),%xmm4        # 67f0 <_sk_callback_sse2+0xca5>
  .byte  102,15,111,45,120,47,0,0            // movdqa        0x2f78(%rip),%xmm5        # 6800 <_sk_callback_sse2+0xcb5>
  .byte  102,15,219,238                      // pand          %xmm6,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  15,89,45,122,47,0,0                 // mulps         0x2f7a(%rip),%xmm5        # 6810 <_sk_callback_sse2+0xcc5>
  .byte  102,15,219,53,130,47,0,0            // pand          0x2f82(%rip),%xmm6        # 6820 <_sk_callback_sse2+0xcd5>
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,89,53,136,47,0,0                 // mulps         0x2f88(%rip),%xmm6        # 6830 <_sk_callback_sse2+0xce5>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,61,143,47,0,0                 // movaps        0x2f8f(%rip),%xmm7        # 6840 <_sk_callback_sse2+0xcf5>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,50                              // je            38f2 <_sk_load_565_dst_sse2+0x9c>
  .byte  102,15,239,246                      // pxor          %xmm6,%xmm6
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            38df <_sk_load_565_dst_sse2+0x89>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,154                             // jne           386a <_sk_load_565_dst_sse2+0x14>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,112,244,69                   // pshufd        $0x45,%xmm4,%xmm6
  .byte  102,65,15,110,36,82                 // movd          (%r10,%rdx,2),%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  242,15,16,244                       // movsd         %xmm4,%xmm6
  .byte  233,120,255,255,255                 // jmpq          386a <_sk_load_565_dst_sse2+0x14>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,240                      // movd          %eax,%xmm6
  .byte  233,106,255,255,255                 // jmpq          386a <_sk_load_565_dst_sse2+0x14>

HIDDEN _sk_gather_565_sse2
.globl _sk_gather_565_sse2
FUNCTION(_sk_gather_565_sse2)
_sk_gather_565_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,196,20,89,0               // pinsrw        $0x0,(%r9,%rbx,2),%xmm2
  .byte  102,67,15,196,20,89,1               // pinsrw        $0x1,(%r9,%r11,2),%xmm2
  .byte  67,15,183,28,81                     // movzwl        (%r9,%r10,2),%ebx
  .byte  102,15,196,211,2                    // pinsrw        $0x2,%ebx,%xmm2
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,208,3                    // pinsrw        $0x3,%eax,%xmm2
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,111,5,202,46,0,0             // movdqa        0x2eca(%rip),%xmm0        # 6850 <_sk_callback_sse2+0xd05>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,204,46,0,0                  // mulps         0x2ecc(%rip),%xmm0        # 6860 <_sk_callback_sse2+0xd15>
  .byte  102,15,111,13,212,46,0,0            // movdqa        0x2ed4(%rip),%xmm1        # 6870 <_sk_callback_sse2+0xd25>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,214,46,0,0                 // mulps         0x2ed6(%rip),%xmm1        # 6880 <_sk_callback_sse2+0xd35>
  .byte  102,15,219,21,222,46,0,0            // pand          0x2ede(%rip),%xmm2        # 6890 <_sk_callback_sse2+0xd45>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,228,46,0,0                 // mulps         0x2ee4(%rip),%xmm2        # 68a0 <_sk_callback_sse2+0xd55>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,235,46,0,0                 // movaps        0x2eeb(%rip),%xmm3        # 68b0 <_sk_callback_sse2+0xd65>
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_sse2
.globl _sk_store_565_sse2
FUNCTION(_sk_store_565_sse2)
_sk_store_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  68,15,40,5,235,46,0,0               // movaps        0x2eeb(%rip),%xmm8        # 68c0 <_sk_callback_sse2+0xd75>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,11                // pslld         $0xb,%xmm9
  .byte  68,15,40,21,224,46,0,0              // movaps        0x2ee0(%rip),%xmm10        # 68d0 <_sk_callback_sse2+0xd85>
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,5                 // pslld         $0x5,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3a32 <_sk_store_565_sse2+0x6a>
  .byte  242,69,15,17,4,82                   // movsd         %xmm8,(%r10,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,38                              // je            3a6a <_sk_store_565_sse2+0xa2>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,18                              // je            3a5c <_sk_store_565_sse2+0x94>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,222                             // jne           3a2e <_sk_store_565_sse2+0x66>
  .byte  102,65,15,197,192,4                 // pextrw        $0x4,%xmm8,%eax
  .byte  102,65,137,68,82,4                  // mov           %ax,0x4(%r10,%rdx,2)
  .byte  242,69,15,112,192,232               // pshuflw       $0xe8,%xmm8,%xmm8
  .byte  102,69,15,126,4,82                  // movd          %xmm8,(%r10,%rdx,2)
  .byte  235,196                             // jmp           3a2e <_sk_store_565_sse2+0x66>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,65,137,4,82                     // mov           %ax,(%r10,%rdx,2)
  .byte  235,184                             // jmp           3a2e <_sk_store_565_sse2+0x66>

HIDDEN _sk_load_4444_sse2
.globl _sk_load_4444_sse2
FUNCTION(_sk_load_4444_sse2)
_sk_load_4444_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,98                              // jne           3ae2 <_sk_load_4444_sse2+0x6c>
  .byte  243,65,15,126,28,82                 // movq          (%r10,%rdx,2),%xmm3
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,111,5,78,46,0,0              // movdqa        0x2e4e(%rip),%xmm0        # 68e0 <_sk_callback_sse2+0xd95>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,80,46,0,0                   // mulps         0x2e50(%rip),%xmm0        # 68f0 <_sk_callback_sse2+0xda5>
  .byte  102,15,111,13,88,46,0,0             // movdqa        0x2e58(%rip),%xmm1        # 6900 <_sk_callback_sse2+0xdb5>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,90,46,0,0                  // mulps         0x2e5a(%rip),%xmm1        # 6910 <_sk_callback_sse2+0xdc5>
  .byte  102,15,111,21,98,46,0,0             // movdqa        0x2e62(%rip),%xmm2        # 6920 <_sk_callback_sse2+0xdd5>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,100,46,0,0                 // mulps         0x2e64(%rip),%xmm2        # 6930 <_sk_callback_sse2+0xde5>
  .byte  102,15,219,29,108,46,0,0            // pand          0x2e6c(%rip),%xmm3        # 6940 <_sk_callback_sse2+0xdf5>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,114,46,0,0                 // mulps         0x2e72(%rip),%xmm3        # 6950 <_sk_callback_sse2+0xe05>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,50                              // je            3b21 <_sk_load_4444_sse2+0xab>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3b0e <_sk_load_4444_sse2+0x98>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,139                             // jne           3a8a <_sk_load_4444_sse2+0x14>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  102,65,15,110,4,82                  // movd          (%r10,%rdx,2),%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  242,15,16,216                       // movsd         %xmm0,%xmm3
  .byte  233,105,255,255,255                 // jmpq          3a8a <_sk_load_4444_sse2+0x14>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,216                      // movd          %eax,%xmm3
  .byte  233,91,255,255,255                  // jmpq          3a8a <_sk_load_4444_sse2+0x14>

HIDDEN _sk_load_4444_dst_sse2
.globl _sk_load_4444_dst_sse2
FUNCTION(_sk_load_4444_dst_sse2)
_sk_load_4444_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,98                              // jne           3b9b <_sk_load_4444_dst_sse2+0x6c>
  .byte  243,65,15,126,60,82                 // movq          (%r10,%rdx,2),%xmm7
  .byte  102,15,97,248                       // punpcklwd     %xmm0,%xmm7
  .byte  102,15,111,37,21,46,0,0             // movdqa        0x2e15(%rip),%xmm4        # 6960 <_sk_callback_sse2+0xe15>
  .byte  102,15,219,231                      // pand          %xmm7,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,37,23,46,0,0                  // mulps         0x2e17(%rip),%xmm4        # 6970 <_sk_callback_sse2+0xe25>
  .byte  102,15,111,45,31,46,0,0             // movdqa        0x2e1f(%rip),%xmm5        # 6980 <_sk_callback_sse2+0xe35>
  .byte  102,15,219,239                      // pand          %xmm7,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  15,89,45,33,46,0,0                  // mulps         0x2e21(%rip),%xmm5        # 6990 <_sk_callback_sse2+0xe45>
  .byte  102,15,111,53,41,46,0,0             // movdqa        0x2e29(%rip),%xmm6        # 69a0 <_sk_callback_sse2+0xe55>
  .byte  102,15,219,247                      // pand          %xmm7,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,89,53,43,46,0,0                  // mulps         0x2e2b(%rip),%xmm6        # 69b0 <_sk_callback_sse2+0xe65>
  .byte  102,15,219,61,51,46,0,0             // pand          0x2e33(%rip),%xmm7        # 69c0 <_sk_callback_sse2+0xe75>
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  15,89,61,57,46,0,0                  // mulps         0x2e39(%rip),%xmm7        # 69d0 <_sk_callback_sse2+0xe85>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,50                              // je            3bda <_sk_load_4444_dst_sse2+0xab>
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3bc7 <_sk_load_4444_dst_sse2+0x98>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,139                             // jne           3b43 <_sk_load_4444_dst_sse2+0x14>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,112,252,69                   // pshufd        $0x45,%xmm4,%xmm7
  .byte  102,65,15,110,36,82                 // movd          (%r10,%rdx,2),%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  242,15,16,252                       // movsd         %xmm4,%xmm7
  .byte  233,105,255,255,255                 // jmpq          3b43 <_sk_load_4444_dst_sse2+0x14>
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,248                      // movd          %eax,%xmm7
  .byte  233,91,255,255,255                  // jmpq          3b43 <_sk_load_4444_dst_sse2+0x14>

HIDDEN _sk_gather_4444_sse2
.globl _sk_gather_4444_sse2
FUNCTION(_sk_gather_4444_sse2)
_sk_gather_4444_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,196,28,89,0               // pinsrw        $0x0,(%r9,%rbx,2),%xmm3
  .byte  102,67,15,196,28,89,1               // pinsrw        $0x1,(%r9,%r11,2),%xmm3
  .byte  67,15,183,28,81                     // movzwl        (%r9,%r10,2),%ebx
  .byte  102,15,196,219,2                    // pinsrw        $0x2,%ebx,%xmm3
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,216,3                    // pinsrw        $0x3,%eax,%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,111,5,114,45,0,0             // movdqa        0x2d72(%rip),%xmm0        # 69e0 <_sk_callback_sse2+0xe95>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,116,45,0,0                  // mulps         0x2d74(%rip),%xmm0        # 69f0 <_sk_callback_sse2+0xea5>
  .byte  102,15,111,13,124,45,0,0            // movdqa        0x2d7c(%rip),%xmm1        # 6a00 <_sk_callback_sse2+0xeb5>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,126,45,0,0                 // mulps         0x2d7e(%rip),%xmm1        # 6a10 <_sk_callback_sse2+0xec5>
  .byte  102,15,111,21,134,45,0,0            // movdqa        0x2d86(%rip),%xmm2        # 6a20 <_sk_callback_sse2+0xed5>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,136,45,0,0                 // mulps         0x2d88(%rip),%xmm2        # 6a30 <_sk_callback_sse2+0xee5>
  .byte  102,15,219,29,144,45,0,0            // pand          0x2d90(%rip),%xmm3        # 6a40 <_sk_callback_sse2+0xef5>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,150,45,0,0                 // mulps         0x2d96(%rip),%xmm3        # 6a50 <_sk_callback_sse2+0xf05>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_sse2
.globl _sk_store_4444_sse2
FUNCTION(_sk_store_4444_sse2)
_sk_store_4444_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  68,15,40,5,148,45,0,0               // movaps        0x2d94(%rip),%xmm8        # 6a60 <_sk_callback_sse2+0xf15>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,12                // pslld         $0xc,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,4                 // pslld         $0x4,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,193                    // orpd          %xmm9,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3d3d <_sk_store_4444_sse2+0x7e>
  .byte  242,69,15,17,4,82                   // movsd         %xmm8,(%r10,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,38                              // je            3d75 <_sk_store_4444_sse2+0xb6>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,18                              // je            3d67 <_sk_store_4444_sse2+0xa8>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,222                             // jne           3d39 <_sk_store_4444_sse2+0x7a>
  .byte  102,65,15,197,192,4                 // pextrw        $0x4,%xmm8,%eax
  .byte  102,65,137,68,82,4                  // mov           %ax,0x4(%r10,%rdx,2)
  .byte  242,69,15,112,192,232               // pshuflw       $0xe8,%xmm8,%xmm8
  .byte  102,69,15,126,4,82                  // movd          %xmm8,(%r10,%rdx,2)
  .byte  235,196                             // jmp           3d39 <_sk_store_4444_sse2+0x7a>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,65,137,4,82                     // mov           %ax,(%r10,%rdx,2)
  .byte  235,184                             // jmp           3d39 <_sk_store_4444_sse2+0x7a>

HIDDEN _sk_load_8888_sse2
.globl _sk_load_8888_sse2
FUNCTION(_sk_load_8888_sse2)
_sk_load_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,98                              // jne           3ded <_sk_load_8888_sse2+0x6c>
  .byte  243,68,15,111,12,144                // movdqu        (%rax,%rdx,4),%xmm9
  .byte  102,15,111,21,215,44,0,0            // movdqa        0x2cd7(%rip),%xmm2        # 6a70 <_sk_callback_sse2+0xf25>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,211,44,0,0               // movaps        0x2cd3(%rip),%xmm8        # 6a80 <_sk_callback_sse2+0xf35>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,65,15,111,217                   // movdqa        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,40                              // je            3e22 <_sk_load_8888_sse2+0xa1>
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,18                              // je            3e17 <_sk_load_8888_sse2+0x96>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,134                             // jne           3d91 <_sk_load_8888_sse2+0x10>
  .byte  102,15,110,68,144,8                 // movd          0x8(%rax,%rdx,4),%xmm0
  .byte  102,68,15,112,200,69                // pshufd        $0x45,%xmm0,%xmm9
  .byte  102,68,15,18,12,144                 // movlpd        (%rax,%rdx,4),%xmm9
  .byte  233,111,255,255,255                 // jmpq          3d91 <_sk_load_8888_sse2+0x10>
  .byte  102,68,15,110,12,144                // movd          (%rax,%rdx,4),%xmm9
  .byte  233,100,255,255,255                 // jmpq          3d91 <_sk_load_8888_sse2+0x10>

HIDDEN _sk_load_8888_dst_sse2
.globl _sk_load_8888_dst_sse2
FUNCTION(_sk_load_8888_dst_sse2)
_sk_load_8888_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,98                              // jne           3e99 <_sk_load_8888_dst_sse2+0x6c>
  .byte  243,68,15,111,12,144                // movdqu        (%rax,%rdx,4),%xmm9
  .byte  102,15,111,53,75,44,0,0             // movdqa        0x2c4b(%rip),%xmm6        # 6a90 <_sk_callback_sse2+0xf45>
  .byte  102,65,15,111,225                   // movdqa        %xmm9,%xmm4
  .byte  102,15,219,230                      // pand          %xmm6,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  68,15,40,5,71,44,0,0                // movaps        0x2c47(%rip),%xmm8        # 6aa0 <_sk_callback_sse2+0xf55>
  .byte  65,15,89,224                        // mulps         %xmm8,%xmm4
  .byte  102,65,15,111,233                   // movdqa        %xmm9,%xmm5
  .byte  102,15,114,213,8                    // psrld         $0x8,%xmm5
  .byte  102,15,219,238                      // pand          %xmm6,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  65,15,89,232                        // mulps         %xmm8,%xmm5
  .byte  102,65,15,111,249                   // movdqa        %xmm9,%xmm7
  .byte  102,15,114,215,16                   // psrld         $0x10,%xmm7
  .byte  102,15,219,254                      // pand          %xmm6,%xmm7
  .byte  15,91,247                           // cvtdq2ps      %xmm7,%xmm6
  .byte  65,15,89,240                        // mulps         %xmm8,%xmm6
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,249                        // cvtdq2ps      %xmm9,%xmm7
  .byte  65,15,89,248                        // mulps         %xmm8,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,40                              // je            3ece <_sk_load_8888_dst_sse2+0xa1>
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,18                              // je            3ec3 <_sk_load_8888_dst_sse2+0x96>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,134                             // jne           3e3d <_sk_load_8888_dst_sse2+0x10>
  .byte  102,15,110,100,144,8                // movd          0x8(%rax,%rdx,4),%xmm4
  .byte  102,68,15,112,204,69                // pshufd        $0x45,%xmm4,%xmm9
  .byte  102,68,15,18,12,144                 // movlpd        (%rax,%rdx,4),%xmm9
  .byte  233,111,255,255,255                 // jmpq          3e3d <_sk_load_8888_dst_sse2+0x10>
  .byte  102,68,15,110,12,144                // movd          (%rax,%rdx,4),%xmm9
  .byte  233,100,255,255,255                 // jmpq          3e3d <_sk_load_8888_dst_sse2+0x10>

HIDDEN _sk_gather_8888_sse2
.globl _sk_gather_8888_sse2
FUNCTION(_sk_gather_8888_sse2)
_sk_gather_8888_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,67,15,110,4,153                 // movd          (%r9,%r11,4),%xmm0
  .byte  102,65,15,110,12,129                // movd          (%r9,%rax,4),%xmm1
  .byte  102,15,98,193                       // punpckldq     %xmm1,%xmm0
  .byte  102,69,15,110,12,153                // movd          (%r9,%rbx,4),%xmm9
  .byte  102,67,15,110,12,145                // movd          (%r9,%r10,4),%xmm1
  .byte  102,68,15,98,201                    // punpckldq     %xmm1,%xmm9
  .byte  102,68,15,98,200                    // punpckldq     %xmm0,%xmm9
  .byte  102,15,111,21,85,43,0,0             // movdqa        0x2b55(%rip),%xmm2        # 6ab0 <_sk_callback_sse2+0xf65>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,81,43,0,0                // movaps        0x2b51(%rip),%xmm8        # 6ac0 <_sk_callback_sse2+0xf75>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,65,15,111,217                   // movdqa        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_sse2
.globl _sk_store_8888_sse2
FUNCTION(_sk_store_8888_sse2)
_sk_store_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,19,43,0,0                // movaps        0x2b13(%rip),%xmm8        # 6ad0 <_sk_callback_sse2+0xf85>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,24                // pslld         $0x18,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  102,69,15,235,194                   // por           %xmm10,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           401d <_sk_store_8888_sse2+0x6d>
  .byte  243,68,15,127,4,144                 // movdqu        %xmm8,(%rax,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,33                              // je            404b <_sk_store_8888_sse2+0x9b>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,19                              // je            4043 <_sk_store_8888_sse2+0x93>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,227                             // jne           4019 <_sk_store_8888_sse2+0x69>
  .byte  102,69,15,112,200,78                // pshufd        $0x4e,%xmm8,%xmm9
  .byte  102,68,15,126,76,144,8              // movd          %xmm9,0x8(%rax,%rdx,4)
  .byte  102,68,15,214,4,144                 // movq          %xmm8,(%rax,%rdx,4)
  .byte  235,206                             // jmp           4019 <_sk_store_8888_sse2+0x69>
  .byte  102,68,15,126,4,144                 // movd          %xmm8,(%rax,%rdx,4)
  .byte  235,198                             // jmp           4019 <_sk_store_8888_sse2+0x69>

HIDDEN _sk_load_f16_sse2
.globl _sk_load_f16_sse2
FUNCTION(_sk_load_f16_sse2)
_sk_load_f16_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,96,1,0,0                     // jne           41c1 <_sk_load_f16_sse2+0x16e>
  .byte  102,15,16,4,208                     // movupd        (%rax,%rdx,8),%xmm0
  .byte  102,15,16,76,208,16                 // movupd        0x10(%rax,%rdx,8),%xmm1
  .byte  102,68,15,40,192                    // movapd        %xmm0,%xmm8
  .byte  102,68,15,97,193                    // punpcklwd     %xmm1,%xmm8
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,68,15,97,240                    // punpcklwd     %xmm0,%xmm14
  .byte  102,68,15,105,192                   // punpckhwd     %xmm0,%xmm8
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,97,202                    // punpcklwd     %xmm10,%xmm1
  .byte  102,68,15,111,13,63,42,0,0          // movdqa        0x2a3f(%rip),%xmm9        # 6ae0 <_sk_callback_sse2+0xf95>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,193                   // pand          %xmm9,%xmm0
  .byte  102,15,239,200                      // pxor          %xmm0,%xmm1
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,68,15,111,233                   // movdqa        %xmm1,%xmm13
  .byte  102,65,15,114,245,13                // pslld         $0xd,%xmm13
  .byte  102,68,15,235,232                   // por           %xmm0,%xmm13
  .byte  102,68,15,111,29,36,42,0,0          // movdqa        0x2a24(%rip),%xmm11        # 6af0 <_sk_callback_sse2+0xfa5>
  .byte  102,69,15,254,235                   // paddd         %xmm11,%xmm13
  .byte  102,68,15,111,37,38,42,0,0          // movdqa        0x2a26(%rip),%xmm12        # 6b00 <_sk_callback_sse2+0xfb5>
  .byte  102,65,15,239,204                   // pxor          %xmm12,%xmm1
  .byte  102,15,111,29,41,42,0,0             // movdqa        0x2a29(%rip),%xmm3        # 6b10 <_sk_callback_sse2+0xfc5>
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,102,193                      // pcmpgtd       %xmm1,%xmm0
  .byte  102,65,15,223,197                   // pandn         %xmm13,%xmm0
  .byte  102,65,15,115,222,8                 // psrldq        $0x8,%xmm14
  .byte  102,69,15,97,242                    // punpcklwd     %xmm10,%xmm14
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,219,201                   // pand          %xmm9,%xmm1
  .byte  102,68,15,239,241                   // pxor          %xmm1,%xmm14
  .byte  102,15,114,241,16                   // pslld         $0x10,%xmm1
  .byte  102,65,15,111,214                   // movdqa        %xmm14,%xmm2
  .byte  102,15,114,242,13                   // pslld         $0xd,%xmm2
  .byte  102,15,235,209                      // por           %xmm1,%xmm2
  .byte  102,65,15,254,211                   // paddd         %xmm11,%xmm2
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,65,15,102,206                   // pcmpgtd       %xmm14,%xmm1
  .byte  102,15,223,202                      // pandn         %xmm2,%xmm1
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,234                    // punpcklwd     %xmm10,%xmm13
  .byte  102,65,15,111,213                   // movdqa        %xmm13,%xmm2
  .byte  102,65,15,219,209                   // pand          %xmm9,%xmm2
  .byte  102,68,15,239,234                   // pxor          %xmm2,%xmm13
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,65,15,114,246,13                // pslld         $0xd,%xmm14
  .byte  102,68,15,235,242                   // por           %xmm2,%xmm14
  .byte  102,69,15,254,243                   // paddd         %xmm11,%xmm14
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,65,15,102,213                   // pcmpgtd       %xmm13,%xmm2
  .byte  102,65,15,223,214                   // pandn         %xmm14,%xmm2
  .byte  102,65,15,115,216,8                 // psrldq        $0x8,%xmm8
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,219,200                   // pand          %xmm8,%xmm9
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,114,242,13                // pslld         $0xd,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  102,69,15,254,211                   // paddd         %xmm11,%xmm10
  .byte  102,69,15,239,196                   // pxor          %xmm12,%xmm8
  .byte  102,65,15,102,216                   // pcmpgtd       %xmm8,%xmm3
  .byte  102,65,15,223,218                   // pandn         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,15,16,4,208                     // movsd         (%rax,%rdx,8),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,17                              // jne           41dd <_sk_load_f16_sse2+0x18a>
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  233,143,254,255,255                 // jmpq          406c <_sk_load_f16_sse2+0x19>
  .byte  102,15,22,68,208,8                  // movhpd        0x8(%rax,%rdx,8),%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,123,254,255,255              // jb            406c <_sk_load_f16_sse2+0x19>
  .byte  242,15,16,76,208,16                 // movsd         0x10(%rax,%rdx,8),%xmm1
  .byte  233,112,254,255,255                 // jmpq          406c <_sk_load_f16_sse2+0x19>

HIDDEN _sk_load_f16_dst_sse2
.globl _sk_load_f16_dst_sse2
FUNCTION(_sk_load_f16_dst_sse2)
_sk_load_f16_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,96,1,0,0                     // jne           436a <_sk_load_f16_dst_sse2+0x16e>
  .byte  102,15,16,36,208                    // movupd        (%rax,%rdx,8),%xmm4
  .byte  102,15,16,108,208,16                // movupd        0x10(%rax,%rdx,8),%xmm5
  .byte  102,68,15,40,196                    // movapd        %xmm4,%xmm8
  .byte  102,68,15,97,197                    // punpcklwd     %xmm5,%xmm8
  .byte  102,15,105,229                      // punpckhwd     %xmm5,%xmm4
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,68,15,97,244                    // punpcklwd     %xmm4,%xmm14
  .byte  102,68,15,105,196                   // punpckhwd     %xmm4,%xmm8
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  102,65,15,111,238                   // movdqa        %xmm14,%xmm5
  .byte  102,65,15,97,234                    // punpcklwd     %xmm10,%xmm5
  .byte  102,68,15,111,13,214,40,0,0         // movdqa        0x28d6(%rip),%xmm9        # 6b20 <_sk_callback_sse2+0xfd5>
  .byte  102,15,111,229                      // movdqa        %xmm5,%xmm4
  .byte  102,65,15,219,225                   // pand          %xmm9,%xmm4
  .byte  102,15,239,236                      // pxor          %xmm4,%xmm5
  .byte  102,15,114,244,16                   // pslld         $0x10,%xmm4
  .byte  102,68,15,111,237                   // movdqa        %xmm5,%xmm13
  .byte  102,65,15,114,245,13                // pslld         $0xd,%xmm13
  .byte  102,68,15,235,236                   // por           %xmm4,%xmm13
  .byte  102,68,15,111,29,187,40,0,0         // movdqa        0x28bb(%rip),%xmm11        # 6b30 <_sk_callback_sse2+0xfe5>
  .byte  102,69,15,254,235                   // paddd         %xmm11,%xmm13
  .byte  102,68,15,111,37,189,40,0,0         // movdqa        0x28bd(%rip),%xmm12        # 6b40 <_sk_callback_sse2+0xff5>
  .byte  102,65,15,239,236                   // pxor          %xmm12,%xmm5
  .byte  102,15,111,61,192,40,0,0            // movdqa        0x28c0(%rip),%xmm7        # 6b50 <_sk_callback_sse2+0x1005>
  .byte  102,15,111,231                      // movdqa        %xmm7,%xmm4
  .byte  102,15,102,229                      // pcmpgtd       %xmm5,%xmm4
  .byte  102,65,15,223,229                   // pandn         %xmm13,%xmm4
  .byte  102,65,15,115,222,8                 // psrldq        $0x8,%xmm14
  .byte  102,69,15,97,242                    // punpcklwd     %xmm10,%xmm14
  .byte  102,65,15,111,238                   // movdqa        %xmm14,%xmm5
  .byte  102,65,15,219,233                   // pand          %xmm9,%xmm5
  .byte  102,68,15,239,245                   // pxor          %xmm5,%xmm14
  .byte  102,15,114,245,16                   // pslld         $0x10,%xmm5
  .byte  102,65,15,111,246                   // movdqa        %xmm14,%xmm6
  .byte  102,15,114,246,13                   // pslld         $0xd,%xmm6
  .byte  102,15,235,245                      // por           %xmm5,%xmm6
  .byte  102,65,15,254,243                   // paddd         %xmm11,%xmm6
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,15,111,239                      // movdqa        %xmm7,%xmm5
  .byte  102,65,15,102,238                   // pcmpgtd       %xmm14,%xmm5
  .byte  102,15,223,238                      // pandn         %xmm6,%xmm5
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,234                    // punpcklwd     %xmm10,%xmm13
  .byte  102,65,15,111,245                   // movdqa        %xmm13,%xmm6
  .byte  102,65,15,219,241                   // pand          %xmm9,%xmm6
  .byte  102,68,15,239,238                   // pxor          %xmm6,%xmm13
  .byte  102,15,114,246,16                   // pslld         $0x10,%xmm6
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,65,15,114,246,13                // pslld         $0xd,%xmm14
  .byte  102,68,15,235,246                   // por           %xmm6,%xmm14
  .byte  102,69,15,254,243                   // paddd         %xmm11,%xmm14
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,15,111,247                      // movdqa        %xmm7,%xmm6
  .byte  102,65,15,102,245                   // pcmpgtd       %xmm13,%xmm6
  .byte  102,65,15,223,246                   // pandn         %xmm14,%xmm6
  .byte  102,65,15,115,216,8                 // psrldq        $0x8,%xmm8
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,219,200                   // pand          %xmm8,%xmm9
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,114,242,13                // pslld         $0xd,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  102,69,15,254,211                   // paddd         %xmm11,%xmm10
  .byte  102,69,15,239,196                   // pxor          %xmm12,%xmm8
  .byte  102,65,15,102,248                   // pcmpgtd       %xmm8,%xmm7
  .byte  102,65,15,223,250                   // pandn         %xmm10,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,15,16,36,208                    // movsd         (%rax,%rdx,8),%xmm4
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,17                              // jne           4386 <_sk_load_f16_dst_sse2+0x18a>
  .byte  102,15,87,237                       // xorpd         %xmm5,%xmm5
  .byte  102,15,20,229                       // unpcklpd      %xmm5,%xmm4
  .byte  102,15,87,237                       // xorpd         %xmm5,%xmm5
  .byte  233,143,254,255,255                 // jmpq          4215 <_sk_load_f16_dst_sse2+0x19>
  .byte  102,15,22,100,208,8                 // movhpd        0x8(%rax,%rdx,8),%xmm4
  .byte  102,15,87,237                       // xorpd         %xmm5,%xmm5
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,123,254,255,255              // jb            4215 <_sk_load_f16_dst_sse2+0x19>
  .byte  242,15,16,108,208,16                // movsd         0x10(%rax,%rdx,8),%xmm5
  .byte  233,112,254,255,255                 // jmpq          4215 <_sk_load_f16_dst_sse2+0x19>

HIDDEN _sk_gather_f16_sse2
.globl _sk_gather_f16_sse2
FUNCTION(_sk_gather_f16_sse2)
_sk_gather_f16_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,67,15,126,4,217                 // movq          (%r9,%r11,8),%xmm0
  .byte  243,65,15,126,12,217                // movq          (%r9,%rbx,8),%xmm1
  .byte  102,15,108,200                      // punpcklqdq    %xmm0,%xmm1
  .byte  243,65,15,126,4,193                 // movq          (%r9,%rax,8),%xmm0
  .byte  243,67,15,126,20,209                // movq          (%r9,%r10,8),%xmm2
  .byte  102,15,108,208                      // punpcklqdq    %xmm0,%xmm2
  .byte  102,68,15,111,193                   // movdqa        %xmm1,%xmm8
  .byte  102,68,15,97,194                    // punpcklwd     %xmm2,%xmm8
  .byte  102,15,105,202                      // punpckhwd     %xmm2,%xmm1
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,68,15,97,241                    // punpcklwd     %xmm1,%xmm14
  .byte  102,68,15,105,193                   // punpckhwd     %xmm1,%xmm8
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,97,202                    // punpcklwd     %xmm10,%xmm1
  .byte  102,68,15,111,13,18,39,0,0          // movdqa        0x2712(%rip),%xmm9        # 6b60 <_sk_callback_sse2+0x1015>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,193                   // pand          %xmm9,%xmm0
  .byte  102,15,239,200                      // pxor          %xmm0,%xmm1
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,68,15,111,233                   // movdqa        %xmm1,%xmm13
  .byte  102,65,15,114,245,13                // pslld         $0xd,%xmm13
  .byte  102,68,15,235,232                   // por           %xmm0,%xmm13
  .byte  102,68,15,111,29,247,38,0,0         // movdqa        0x26f7(%rip),%xmm11        # 6b70 <_sk_callback_sse2+0x1025>
  .byte  102,69,15,254,235                   // paddd         %xmm11,%xmm13
  .byte  102,68,15,111,37,249,38,0,0         // movdqa        0x26f9(%rip),%xmm12        # 6b80 <_sk_callback_sse2+0x1035>
  .byte  102,65,15,239,204                   // pxor          %xmm12,%xmm1
  .byte  102,15,111,29,252,38,0,0            // movdqa        0x26fc(%rip),%xmm3        # 6b90 <_sk_callback_sse2+0x1045>
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,102,193                      // pcmpgtd       %xmm1,%xmm0
  .byte  102,65,15,223,197                   // pandn         %xmm13,%xmm0
  .byte  102,65,15,115,222,8                 // psrldq        $0x8,%xmm14
  .byte  102,69,15,97,242                    // punpcklwd     %xmm10,%xmm14
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,219,201                   // pand          %xmm9,%xmm1
  .byte  102,68,15,239,241                   // pxor          %xmm1,%xmm14
  .byte  102,15,114,241,16                   // pslld         $0x10,%xmm1
  .byte  102,65,15,111,214                   // movdqa        %xmm14,%xmm2
  .byte  102,15,114,242,13                   // pslld         $0xd,%xmm2
  .byte  102,15,235,209                      // por           %xmm1,%xmm2
  .byte  102,65,15,254,211                   // paddd         %xmm11,%xmm2
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,65,15,102,206                   // pcmpgtd       %xmm14,%xmm1
  .byte  102,15,223,202                      // pandn         %xmm2,%xmm1
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,234                    // punpcklwd     %xmm10,%xmm13
  .byte  102,65,15,111,213                   // movdqa        %xmm13,%xmm2
  .byte  102,65,15,219,209                   // pand          %xmm9,%xmm2
  .byte  102,68,15,239,234                   // pxor          %xmm2,%xmm13
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,65,15,114,246,13                // pslld         $0xd,%xmm14
  .byte  102,68,15,235,242                   // por           %xmm2,%xmm14
  .byte  102,69,15,254,243                   // paddd         %xmm11,%xmm14
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,65,15,102,213                   // pcmpgtd       %xmm13,%xmm2
  .byte  102,65,15,223,214                   // pandn         %xmm14,%xmm2
  .byte  102,65,15,115,216,8                 // psrldq        $0x8,%xmm8
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,219,200                   // pand          %xmm8,%xmm9
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,114,242,13                // pslld         $0xd,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  102,69,15,254,211                   // paddd         %xmm11,%xmm10
  .byte  102,69,15,239,196                   // pxor          %xmm12,%xmm8
  .byte  102,65,15,102,216                   // pcmpgtd       %xmm8,%xmm3
  .byte  102,65,15,223,218                   // pandn         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_sse2
.globl _sk_store_f16_sse2
FUNCTION(_sk_store_f16_sse2)
_sk_store_f16_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,111,21,35,38,0,0          // movdqa        0x2623(%rip),%xmm10        # 6ba0 <_sk_callback_sse2+0x1055>
  .byte  102,68,15,111,224                   // movdqa        %xmm0,%xmm12
  .byte  102,69,15,219,226                   // pand          %xmm10,%xmm12
  .byte  102,68,15,111,232                   // movdqa        %xmm0,%xmm13
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,68,15,111,13,22,38,0,0          // movdqa        0x2616(%rip),%xmm9        # 6bb0 <_sk_callback_sse2+0x1065>
  .byte  102,65,15,114,212,16                // psrld         $0x10,%xmm12
  .byte  102,69,15,111,193                   // movdqa        %xmm9,%xmm8
  .byte  102,69,15,102,197                   // pcmpgtd       %xmm13,%xmm8
  .byte  102,65,15,114,213,13                // psrld         $0xd,%xmm13
  .byte  102,68,15,111,29,7,38,0,0           // movdqa        0x2607(%rip),%xmm11        # 6bc0 <_sk_callback_sse2+0x1075>
  .byte  102,69,15,235,227                   // por           %xmm11,%xmm12
  .byte  102,69,15,254,229                   // paddd         %xmm13,%xmm12
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,114,228,16                // psrad         $0x10,%xmm12
  .byte  102,69,15,223,196                   // pandn         %xmm12,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,68,15,111,225                   // movdqa        %xmm1,%xmm12
  .byte  102,69,15,219,226                   // pand          %xmm10,%xmm12
  .byte  102,68,15,111,241                   // movdqa        %xmm1,%xmm14
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,65,15,114,212,16                // psrld         $0x10,%xmm12
  .byte  102,69,15,111,233                   // movdqa        %xmm9,%xmm13
  .byte  102,69,15,102,238                   // pcmpgtd       %xmm14,%xmm13
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,227                   // por           %xmm11,%xmm12
  .byte  102,69,15,254,230                   // paddd         %xmm14,%xmm12
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,114,228,16                // psrad         $0x10,%xmm12
  .byte  102,69,15,223,236                   // pandn         %xmm12,%xmm13
  .byte  102,69,15,107,237                   // packssdw      %xmm13,%xmm13
  .byte  102,68,15,111,242                   // movdqa        %xmm2,%xmm14
  .byte  102,69,15,219,242                   // pand          %xmm10,%xmm14
  .byte  102,68,15,111,250                   // movdqa        %xmm2,%xmm15
  .byte  102,69,15,239,254                   // pxor          %xmm14,%xmm15
  .byte  102,65,15,114,214,16                // psrld         $0x10,%xmm14
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,69,15,102,231                   // pcmpgtd       %xmm15,%xmm12
  .byte  102,65,15,114,215,13                // psrld         $0xd,%xmm15
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,254,247                   // paddd         %xmm15,%xmm14
  .byte  102,65,15,114,246,16                // pslld         $0x10,%xmm14
  .byte  102,65,15,114,230,16                // psrad         $0x10,%xmm14
  .byte  102,69,15,223,230                   // pandn         %xmm14,%xmm12
  .byte  102,69,15,107,228                   // packssdw      %xmm12,%xmm12
  .byte  102,68,15,219,211                   // pand          %xmm3,%xmm10
  .byte  102,68,15,111,243                   // movdqa        %xmm3,%xmm14
  .byte  102,69,15,239,242                   // pxor          %xmm10,%xmm14
  .byte  102,65,15,114,210,16                // psrld         $0x10,%xmm10
  .byte  102,69,15,102,206                   // pcmpgtd       %xmm14,%xmm9
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,211                   // por           %xmm11,%xmm10
  .byte  102,69,15,254,214                   // paddd         %xmm14,%xmm10
  .byte  102,65,15,114,242,16                // pslld         $0x10,%xmm10
  .byte  102,65,15,114,226,16                // psrad         $0x10,%xmm10
  .byte  102,69,15,223,202                   // pandn         %xmm10,%xmm9
  .byte  102,69,15,107,201                   // packssdw      %xmm9,%xmm9
  .byte  102,69,15,97,197                    // punpcklwd     %xmm13,%xmm8
  .byte  102,69,15,97,225                    // punpcklwd     %xmm9,%xmm12
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,69,15,98,204                    // punpckldq     %xmm12,%xmm9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,21                              // jne           46db <_sk_store_f16_sse2+0x16c>
  .byte  68,15,17,12,208                     // movups        %xmm9,(%rax,%rdx,8)
  .byte  102,69,15,106,196                   // punpckhdq     %xmm12,%xmm8
  .byte  243,68,15,127,68,208,16             // movdqu        %xmm8,0x10(%rax,%rdx,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,214,12,208                // movq          %xmm9,(%rax,%rdx,8)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            46d7 <_sk_store_f16_sse2+0x168>
  .byte  102,68,15,23,76,208,8               // movhpd        %xmm9,0x8(%rax,%rdx,8)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            46d7 <_sk_store_f16_sse2+0x168>
  .byte  102,69,15,106,196                   // punpckhdq     %xmm12,%xmm8
  .byte  102,68,15,214,68,208,16             // movq          %xmm8,0x10(%rax,%rdx,8)
  .byte  235,213                             // jmp           46d7 <_sk_store_f16_sse2+0x168>

HIDDEN _sk_load_u16_be_sse2
.globl _sk_load_u16_be_sse2
FUNCTION(_sk_load_u16_be_sse2)
_sk_load_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,190,0,0,0                    // jne           47d6 <_sk_load_u16_be_sse2+0xd4>
  .byte  102,65,15,16,4,65                   // movupd        (%r9,%rax,2),%xmm0
  .byte  102,65,15,16,76,65,16               // movupd        0x10(%r9,%rax,2),%xmm1
  .byte  102,15,40,208                       // movapd        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,193                           // cvtdq2ps      %xmm1,%xmm0
  .byte  68,15,40,5,103,36,0,0               // movaps        0x2467(%rip),%xmm8        # 6bd0 <_sk_callback_sse2+0x1085>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,203                           // cvtdq2ps      %xmm3,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,68,15,111,210                   // movdqa        %xmm2,%xmm10
  .byte  102,65,15,113,242,8                 // psllw         $0x8,%xmm10
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,65,15,235,210                   // por           %xmm10,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,68,15,111,211                   // movdqa        %xmm3,%xmm10
  .byte  102,65,15,113,242,8                 // psllw         $0x8,%xmm10
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,218                   // por           %xmm10,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,65,15,16,4,65                   // movsd         (%r9,%rax,2),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,17                              // jne           47f3 <_sk_load_u16_be_sse2+0xf1>
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  233,50,255,255,255                  // jmpq          4725 <_sk_load_u16_be_sse2+0x23>
  .byte  102,65,15,22,68,65,8                // movhpd        0x8(%r9,%rax,2),%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,29,255,255,255               // jb            4725 <_sk_load_u16_be_sse2+0x23>
  .byte  242,65,15,16,76,65,16               // movsd         0x10(%r9,%rax,2),%xmm1
  .byte  233,17,255,255,255                  // jmpq          4725 <_sk_load_u16_be_sse2+0x23>

HIDDEN _sk_load_rgb_u16_be_sse2
.globl _sk_load_rgb_u16_be_sse2
FUNCTION(_sk_load_rgb_u16_be_sse2)
_sk_load_rgb_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,82                         // lea           (%rdx,%rdx,2),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,175,0,0,0                    // jne           48d5 <_sk_load_rgb_u16_be_sse2+0xc1>
  .byte  243,65,15,111,20,65                 // movdqu        (%r9,%rax,2),%xmm2
  .byte  243,65,15,111,92,65,8               // movdqu        0x8(%r9,%rax,2),%xmm3
  .byte  102,15,115,219,4                    // psrldq        $0x4,%xmm3
  .byte  102,15,111,194                      // movdqa        %xmm2,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,115,217,6                    // psrldq        $0x6,%xmm1
  .byte  102,15,97,211                       // punpcklwd     %xmm3,%xmm2
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,65,15,97,200                    // punpcklwd     %xmm8,%xmm1
  .byte  15,91,193                           // cvtdq2ps      %xmm1,%xmm0
  .byte  68,15,40,13,86,35,0,0               // movaps        0x2356(%rip),%xmm9        # 6be0 <_sk_callback_sse2+0x1095>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,65,15,97,216                    // punpcklwd     %xmm8,%xmm3
  .byte  15,91,203                           // cvtdq2ps      %xmm3,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  102,15,111,218                      // movdqa        %xmm2,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,15,235,211                      // por           %xmm3,%xmm2
  .byte  102,65,15,97,208                    // punpcklwd     %xmm8,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,29,35,0,0                  // movaps        0x231d(%rip),%xmm3        # 6bf0 <_sk_callback_sse2+0x10a5>
  .byte  255,224                             // jmpq          *%rax
  .byte  102,65,15,110,20,65                 // movd          (%r9,%rax,2),%xmm2
  .byte  102,65,15,196,84,65,4,2             // pinsrw        $0x2,0x4(%r9,%rax,2),%xmm2
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           48fa <_sk_load_rgb_u16_be_sse2+0xe6>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,80,255,255,255                  // jmpq          484a <_sk_load_rgb_u16_be_sse2+0x36>
  .byte  102,65,15,110,68,65,6               // movd          0x6(%r9,%rax,2),%xmm0
  .byte  102,65,15,196,68,65,10,2            // pinsrw        $0x2,0xa(%r9,%rax,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,24                              // jb            492b <_sk_load_rgb_u16_be_sse2+0x117>
  .byte  102,65,15,110,92,65,12              // movd          0xc(%r9,%rax,2),%xmm3
  .byte  102,65,15,196,92,65,16,2            // pinsrw        $0x2,0x10(%r9,%rax,2),%xmm3
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,31,255,255,255                  // jmpq          484a <_sk_load_rgb_u16_be_sse2+0x36>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  233,22,255,255,255                  // jmpq          484a <_sk_load_rgb_u16_be_sse2+0x36>

HIDDEN _sk_store_u16_be_sse2
.globl _sk_store_u16_be_sse2
FUNCTION(_sk_store_u16_be_sse2)
_sk_store_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  68,15,40,21,183,34,0,0              // movaps        0x22b7(%rip),%xmm10        # 6c00 <_sk_callback_sse2+0x10b5>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,65,15,113,208,8                 // psrlw         $0x8,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  102,69,15,91,217                    // cvtps2dq      %xmm9,%xmm11
  .byte  102,65,15,114,243,16                // pslld         $0x10,%xmm11
  .byte  102,65,15,114,227,16                // psrad         $0x10,%xmm11
  .byte  102,69,15,107,219                   // packssdw      %xmm11,%xmm11
  .byte  102,69,15,111,203                   // movdqa        %xmm11,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,65,15,113,211,8                 // psrlw         $0x8,%xmm11
  .byte  102,69,15,235,217                   // por           %xmm9,%xmm11
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,65,15,114,225,16                // psrad         $0x10,%xmm9
  .byte  102,69,15,107,201                   // packssdw      %xmm9,%xmm9
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,209,8                 // psrlw         $0x8,%xmm9
  .byte  102,69,15,235,204                   // por           %xmm12,%xmm9
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,16                // pslld         $0x10,%xmm10
  .byte  102,65,15,114,226,16                // psrad         $0x10,%xmm10
  .byte  102,69,15,107,210                   // packssdw      %xmm10,%xmm10
  .byte  102,69,15,111,226                   // movdqa        %xmm10,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,210,8                 // psrlw         $0x8,%xmm10
  .byte  102,69,15,235,212                   // por           %xmm12,%xmm10
  .byte  102,69,15,97,195                    // punpcklwd     %xmm11,%xmm8
  .byte  102,69,15,97,202                    // punpcklwd     %xmm10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,69,15,98,209                    // punpckldq     %xmm9,%xmm10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,21                              // jne           4a43 <_sk_store_u16_be_sse2+0x10f>
  .byte  69,15,17,20,65                      // movups        %xmm10,(%r9,%rax,2)
  .byte  102,69,15,106,193                   // punpckhdq     %xmm9,%xmm8
  .byte  243,69,15,127,68,65,16              // movdqu        %xmm8,0x10(%r9,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,214,20,65                 // movq          %xmm10,(%r9,%rax,2)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            4a3f <_sk_store_u16_be_sse2+0x10b>
  .byte  102,69,15,23,84,65,8                // movhpd        %xmm10,0x8(%r9,%rax,2)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            4a3f <_sk_store_u16_be_sse2+0x10b>
  .byte  102,69,15,106,193                   // punpckhdq     %xmm9,%xmm8
  .byte  102,69,15,214,68,65,16              // movq          %xmm8,0x10(%r9,%rax,2)
  .byte  235,213                             // jmp           4a3f <_sk_store_u16_be_sse2+0x10b>

HIDDEN _sk_load_f32_sse2
.globl _sk_load_f32_sse2
FUNCTION(_sk_load_f32_sse2)
_sk_load_f32_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  69,15,16,4,2                        // movups        (%r10,%rax,1),%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           4aca <_sk_load_f32_sse2+0x60>
  .byte  67,15,16,68,138,16                  // movups        0x10(%r10,%r9,4),%xmm0
  .byte  67,15,16,92,138,32                  // movups        0x20(%r10,%r9,4),%xmm3
  .byte  71,15,16,76,138,48                  // movups        0x30(%r10,%r9,4),%xmm9
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,20,208                           // unpcklps      %xmm0,%xmm2
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  68,15,21,192                        // unpckhps      %xmm0,%xmm8
  .byte  65,15,21,217                        // unpckhps      %xmm9,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,202                           // movhlps       %xmm2,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  65,15,18,216                        // movhlps       %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,8                               // jne           4adc <_sk_load_f32_sse2+0x72>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  235,190                             // jmp           4a9a <_sk_load_f32_sse2+0x30>
  .byte  67,15,16,68,138,16                  // movups        0x10(%r10,%r9,4),%xmm0
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,8                               // jb            4af0 <_sk_load_f32_sse2+0x86>
  .byte  67,15,16,92,138,32                  // movups        0x20(%r10,%r9,4),%xmm3
  .byte  235,170                             // jmp           4a9a <_sk_load_f32_sse2+0x30>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  235,165                             // jmp           4a9a <_sk_load_f32_sse2+0x30>

HIDDEN _sk_load_f32_dst_sse2
.globl _sk_load_f32_dst_sse2
FUNCTION(_sk_load_f32_dst_sse2)
_sk_load_f32_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  69,15,16,4,2                        // movups        (%r10,%rax,1),%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           4b55 <_sk_load_f32_dst_sse2+0x60>
  .byte  67,15,16,100,138,16                 // movups        0x10(%r10,%r9,4),%xmm4
  .byte  67,15,16,124,138,32                 // movups        0x20(%r10,%r9,4),%xmm7
  .byte  71,15,16,76,138,48                  // movups        0x30(%r10,%r9,4),%xmm9
  .byte  65,15,40,240                        // movaps        %xmm8,%xmm6
  .byte  15,20,244                           // unpcklps      %xmm4,%xmm6
  .byte  15,40,239                           // movaps        %xmm7,%xmm5
  .byte  65,15,20,233                        // unpcklps      %xmm9,%xmm5
  .byte  68,15,21,196                        // unpckhps      %xmm4,%xmm8
  .byte  65,15,21,249                        // unpckhps      %xmm9,%xmm7
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  102,15,20,229                       // unpcklpd      %xmm5,%xmm4
  .byte  15,18,238                           // movhlps       %xmm6,%xmm5
  .byte  65,15,40,240                        // movaps        %xmm8,%xmm6
  .byte  102,15,20,247                       // unpcklpd      %xmm7,%xmm6
  .byte  65,15,18,248                        // movhlps       %xmm8,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,8                               // jne           4b67 <_sk_load_f32_dst_sse2+0x72>
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  235,190                             // jmp           4b25 <_sk_load_f32_dst_sse2+0x30>
  .byte  67,15,16,100,138,16                 // movups        0x10(%r10,%r9,4),%xmm4
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,8                               // jb            4b7b <_sk_load_f32_dst_sse2+0x86>
  .byte  67,15,16,124,138,32                 // movups        0x20(%r10,%r9,4),%xmm7
  .byte  235,170                             // jmp           4b25 <_sk_load_f32_dst_sse2+0x30>
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  235,165                             // jmp           4b25 <_sk_load_f32_dst_sse2+0x30>

HIDDEN _sk_store_f32_sse2
.globl _sk_store_f32_sse2
FUNCTION(_sk_store_f32_sse2)
_sk_store_f32_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,20,195                        // unpcklps      %xmm3,%xmm8
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,21,209                        // unpckhps      %xmm1,%xmm10
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  68,15,21,219                        // unpckhps      %xmm3,%xmm11
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  102,69,15,20,224                    // unpcklpd      %xmm8,%xmm12
  .byte  69,15,18,193                        // movhlps       %xmm9,%xmm8
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  102,69,15,20,203                    // unpcklpd      %xmm11,%xmm9
  .byte  102,69,15,17,36,2                   // movupd        %xmm12,(%r10,%rax,1)
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,29                              // jne           4bf2 <_sk_store_f32_sse2+0x72>
  .byte  102,69,15,21,211                    // unpckhpd      %xmm11,%xmm10
  .byte  71,15,17,68,138,16                  // movups        %xmm8,0x10(%r10,%r9,4)
  .byte  102,71,15,17,76,138,32              // movupd        %xmm9,0x20(%r10,%r9,4)
  .byte  102,71,15,17,84,138,48              // movupd        %xmm10,0x30(%r10,%r9,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,246                             // je            4bee <_sk_store_f32_sse2+0x6e>
  .byte  71,15,17,68,138,16                  // movups        %xmm8,0x10(%r10,%r9,4)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,234                             // jb            4bee <_sk_store_f32_sse2+0x6e>
  .byte  102,71,15,17,76,138,32              // movupd        %xmm9,0x20(%r10,%r9,4)
  .byte  235,225                             // jmp           4bee <_sk_store_f32_sse2+0x6e>

HIDDEN _sk_clamp_x_sse2
.globl _sk_clamp_x_sse2
FUNCTION(_sk_clamp_x_sse2)
_sk_clamp_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,15,118,192                      // pcmpeqd       %xmm0,%xmm0
  .byte  102,65,15,254,193                   // paddd         %xmm9,%xmm0
  .byte  68,15,93,192                        // minps         %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_sse2
.globl _sk_clamp_y_sse2
FUNCTION(_sk_clamp_y_sse2)
_sk_clamp_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,193                        // maxps         %xmm1,%xmm8
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,15,118,201                      // pcmpeqd       %xmm1,%xmm1
  .byte  102,65,15,254,201                   // paddd         %xmm9,%xmm1
  .byte  68,15,93,193                        // minps         %xmm1,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_sse2
.globl _sk_repeat_x_sse2
FUNCTION(_sk_repeat_x_sse2)
_sk_repeat_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,84,13,133,31,0,0              // andps         0x1f85(%rip),%xmm9        # 6c10 <_sk_callback_sse2+0x10c5>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,193                        // minps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_sse2
.globl _sk_repeat_y_sse2
FUNCTION(_sk_repeat_y_sse2)
_sk_repeat_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,84,13,70,31,0,0               // andps         0x1f46(%rip),%xmm9        # 6c20 <_sk_callback_sse2+0x10d5>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,201                        // minps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_sse2
.globl _sk_mirror_x_sse2
FUNCTION(_sk_mirror_x_sse2)
_sk_mirror_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  243,69,15,88,201                    // addss         %xmm9,%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,89,21,22,35,0,0           // mulss         0x2316(%rip),%xmm10        # 7040 <_sk_callback_sse2+0x14f5>
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  243,69,15,91,218                    // cvttps2dq     %xmm10,%xmm11
  .byte  69,15,91,219                        // cvtdq2ps      %xmm11,%xmm11
  .byte  69,15,194,211,1                     // cmpltps       %xmm11,%xmm10
  .byte  68,15,84,21,231,30,0,0              // andps         0x1ee7(%rip),%xmm10        # 6c30 <_sk_callback_sse2+0x10e5>
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  65,15,84,196                        // andps         %xmm12,%xmm0
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,193                        // minps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_sse2
.globl _sk_mirror_y_sse2
FUNCTION(_sk_mirror_y_sse2)
_sk_mirror_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  243,69,15,88,201                    // addss         %xmm9,%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,89,21,160,34,0,0          // mulss         0x22a0(%rip),%xmm10        # 7044 <_sk_callback_sse2+0x14f9>
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  243,69,15,91,218                    // cvttps2dq     %xmm10,%xmm11
  .byte  69,15,91,219                        // cvtdq2ps      %xmm11,%xmm11
  .byte  69,15,194,211,1                     // cmpltps       %xmm11,%xmm10
  .byte  68,15,84,21,125,30,0,0              // andps         0x1e7d(%rip),%xmm10        # 6c40 <_sk_callback_sse2+0x10f5>
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  65,15,84,204                        // andps         %xmm12,%xmm1
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,201                        // minps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_1_sse2
.globl _sk_clamp_x_1_sse2
FUNCTION(_sk_clamp_x_1_sse2)
_sk_clamp_x_1_sse2:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  68,15,93,5,79,30,0,0                // minps         0x1e4f(%rip),%xmm8        # 6c50 <_sk_callback_sse2+0x1105>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_1_sse2
.globl _sk_repeat_x_1_sse2
FUNCTION(_sk_repeat_x_1_sse2)
_sk_repeat_x_1_sse2:
  .byte  243,68,15,91,192                    // cvttps2dq     %xmm0,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,194,200,1                     // cmpltps       %xmm8,%xmm9
  .byte  68,15,84,13,61,30,0,0               // andps         0x1e3d(%rip),%xmm9        # 6c60 <_sk_callback_sse2+0x1115>
  .byte  69,15,92,193                        // subps         %xmm9,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_1_sse2
.globl _sk_mirror_x_1_sse2
FUNCTION(_sk_mirror_x_1_sse2)
_sk_mirror_x_1_sse2:
  .byte  68,15,40,5,57,30,0,0                // movaps        0x1e39(%rip),%xmm8        # 6c70 <_sk_callback_sse2+0x1125>
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,13,61,30,0,0               // movaps        0x1e3d(%rip),%xmm9        # 6c80 <_sk_callback_sse2+0x1135>
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,84,13,51,30,0,0               // andps         0x1e33(%rip),%xmm9        # 6c90 <_sk_callback_sse2+0x1145>
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,92,216                        // subps         %xmm0,%xmm11
  .byte  65,15,84,195                        // andps         %xmm11,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_sse2
.globl _sk_luminance_to_alpha_sse2
FUNCTION(_sk_luminance_to_alpha_sse2)
_sk_luminance_to_alpha_sse2:
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,89,5,25,30,0,0                   // mulps         0x1e19(%rip),%xmm0        # 6ca0 <_sk_callback_sse2+0x1155>
  .byte  15,89,13,34,30,0,0                  // mulps         0x1e22(%rip),%xmm1        # 6cb0 <_sk_callback_sse2+0x1165>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,29,40,30,0,0                  // mulps         0x1e28(%rip),%xmm3        # 6cc0 <_sk_callback_sse2+0x1175>
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_sse2
.globl _sk_matrix_2x3_sse2
FUNCTION(_sk_matrix_2x3_sse2)
_sk_matrix_2x3_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,16                  // movss         0x10(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_sse2
.globl _sk_matrix_3x4_sse2
FUNCTION(_sk_matrix_3x4_sse2)
_sk_matrix_3x4_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,36                  // movss         0x24(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_sse2
.globl _sk_matrix_4x5_sse2
FUNCTION(_sk_matrix_4x5_sse2)
_sk_matrix_4x5_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,32                  // movss         0x20(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,48                  // movss         0x30(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,64                 // movss         0x40(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,20                  // movss         0x14(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,36                  // movss         0x24(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,52                  // movss         0x34(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,68                 // movss         0x44(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,56                 // movss         0x38(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,72                 // movss         0x48(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  243,68,15,16,88,12                  // movss         0xc(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,28                  // movss         0x1c(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,60                 // movss         0x3c(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  243,68,15,16,120,76                 // movss         0x4c(%rax),%xmm15
  .byte  69,15,198,255,0                     // shufps        $0x0,%xmm15,%xmm15
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,247                        // addps         %xmm15,%xmm14
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x3_sse2
.globl _sk_matrix_4x3_sse2
FUNCTION(_sk_matrix_4x3_sse2)
_sk_matrix_4x3_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,32                     // movss         0x20(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,36                     // movss         0x24(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,80,40                  // movss         0x28(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,80,28                  // movss         0x1c(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,44                  // movss         0x2c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_sse2
.globl _sk_matrix_perspective_sse2
FUNCTION(_sk_matrix_perspective_sse2)
_sk_matrix_perspective_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  243,68,15,16,80,24                  // movss         0x18(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,83,202                        // rcpps         %xmm10,%xmm1
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_gradient_sse2
.globl _sk_evenly_spaced_gradient_sse2
FUNCTION(_sk_evenly_spaced_gradient_sse2)
_sk_evenly_spaced_gradient_sse2:
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  76,139,112,8                        // mov           0x8(%rax),%r14
  .byte  72,255,203                          // dec           %rbx
  .byte  120,7                               // js            52d4 <_sk_evenly_spaced_gradient_sse2+0x18>
  .byte  243,72,15,42,203                    // cvtsi2ss      %rbx,%xmm1
  .byte  235,21                              // jmp           52e9 <_sk_evenly_spaced_gradient_sse2+0x2d>
  .byte  73,137,217                          // mov           %rbx,%r9
  .byte  73,209,233                          // shr           %r9
  .byte  131,227,1                           // and           $0x1,%ebx
  .byte  76,9,203                            // or            %r9,%rbx
  .byte  243,72,15,42,203                    // cvtsi2ss      %rbx,%xmm1
  .byte  243,15,88,201                       // addss         %xmm1,%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,211                   // movq          %xmm2,%r11
  .byte  69,137,217                          // mov           %r11d,%r9d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  243,65,15,16,12,158                 // movss         (%r14,%rbx,4),%xmm1
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  243,71,15,16,4,150                  // movss         (%r14,%r10,4),%xmm8
  .byte  243,67,15,16,20,142                 // movss         (%r14,%r9,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  68,15,20,193                        // unpcklps      %xmm1,%xmm8
  .byte  76,139,112,40                       // mov           0x28(%rax),%r14
  .byte  243,65,15,16,12,158                 // movss         (%r14,%rbx,4),%xmm1
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  243,71,15,16,12,150                 // movss         (%r14,%r10,4),%xmm9
  .byte  243,67,15,16,20,142                 // movss         (%r14,%r9,4),%xmm2
  .byte  68,15,20,202                        // unpcklps      %xmm2,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  76,139,112,16                       // mov           0x10(%rax),%r14
  .byte  243,65,15,16,20,158                 // movss         (%r14,%rbx,4),%xmm2
  .byte  243,67,15,16,12,158                 // movss         (%r14,%r11,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,150                 // movss         (%r14,%r10,4),%xmm1
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,112,48                       // mov           0x30(%rax),%r14
  .byte  243,65,15,16,20,158                 // movss         (%r14,%rbx,4),%xmm2
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  243,71,15,16,20,150                 // movss         (%r14,%r10,4),%xmm10
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  68,15,20,211                        // unpcklps      %xmm3,%xmm10
  .byte  68,15,20,210                        // unpcklps      %xmm2,%xmm10
  .byte  76,139,112,24                       // mov           0x18(%rax),%r14
  .byte  243,69,15,16,28,158                 // movss         (%r14,%rbx,4),%xmm11
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  68,15,20,218                        // unpcklps      %xmm2,%xmm11
  .byte  243,67,15,16,20,150                 // movss         (%r14,%r10,4),%xmm2
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,211                        // unpcklps      %xmm11,%xmm2
  .byte  76,139,112,56                       // mov           0x38(%rax),%r14
  .byte  243,69,15,16,36,158                 // movss         (%r14,%rbx,4),%xmm12
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  68,15,20,227                        // unpcklps      %xmm3,%xmm12
  .byte  243,71,15,16,28,150                 // movss         (%r14,%r10,4),%xmm11
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  68,15,20,219                        // unpcklps      %xmm3,%xmm11
  .byte  69,15,20,220                        // unpcklps      %xmm12,%xmm11
  .byte  76,139,112,32                       // mov           0x20(%rax),%r14
  .byte  243,69,15,16,36,158                 // movss         (%r14,%rbx,4),%xmm12
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  68,15,20,227                        // unpcklps      %xmm3,%xmm12
  .byte  243,67,15,16,28,150                 // movss         (%r14,%r10,4),%xmm3
  .byte  243,71,15,16,44,142                 // movss         (%r14,%r9,4),%xmm13
  .byte  65,15,20,221                        // unpcklps      %xmm13,%xmm3
  .byte  65,15,20,220                        // unpcklps      %xmm12,%xmm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  243,68,15,16,36,152                 // movss         (%rax,%rbx,4),%xmm12
  .byte  243,70,15,16,44,152                 // movss         (%rax,%r11,4),%xmm13
  .byte  69,15,20,229                        // unpcklps      %xmm13,%xmm12
  .byte  243,70,15,16,44,144                 // movss         (%rax,%r10,4),%xmm13
  .byte  243,70,15,16,52,136                 // movss         (%rax,%r9,4),%xmm14
  .byte  69,15,20,238                        // unpcklps      %xmm14,%xmm13
  .byte  69,15,20,236                        // unpcklps      %xmm12,%xmm13
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gauss_a_to_rgba_sse2
.globl _sk_gauss_a_to_rgba_sse2
FUNCTION(_sk_gauss_a_to_rgba_sse2)
_sk_gauss_a_to_rgba_sse2:
  .byte  15,40,5,91,24,0,0                   // movaps        0x185b(%rip),%xmm0        # 6cd0 <_sk_callback_sse2+0x1185>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,97,24,0,0                   // addps         0x1861(%rip),%xmm0        # 6ce0 <_sk_callback_sse2+0x1195>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,103,24,0,0                  // addps         0x1867(%rip),%xmm0        # 6cf0 <_sk_callback_sse2+0x11a5>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,109,24,0,0                  // addps         0x186d(%rip),%xmm0        # 6d00 <_sk_callback_sse2+0x11b5>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,115,24,0,0                  // addps         0x1873(%rip),%xmm0        # 6d10 <_sk_callback_sse2+0x11c5>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_sse2
.globl _sk_gradient_sse2
FUNCTION(_sk_gradient_sse2)
_sk_gradient_sse2:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,249,2                        // cmp           $0x2,%r9
  .byte  114,50                              // jb            54f0 <_sk_gradient_sse2+0x46>
  .byte  72,139,88,72                        // mov           0x48(%rax),%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  15,40,21,76,24,0,0                  // movaps        0x184c(%rip),%xmm2        # 6d20 <_sk_callback_sse2+0x11d5>
  .byte  243,15,16,27                        // movss         (%rbx),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,194,216,2                        // cmpleps       %xmm0,%xmm3
  .byte  15,84,218                           // andps         %xmm2,%xmm3
  .byte  102,15,254,203                      // paddd         %xmm3,%xmm1
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  117,228                             // jne           54d4 <_sk_gradient_sse2+0x2a>
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,211                   // movq          %xmm2,%r11
  .byte  69,137,217                          // mov           %r11d,%r9d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  76,139,112,8                        // mov           0x8(%rax),%r14
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,65,15,16,12,158                 // movss         (%r14,%rbx,4),%xmm1
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  243,71,15,16,4,150                  // movss         (%r14,%r10,4),%xmm8
  .byte  243,67,15,16,20,142                 // movss         (%r14,%r9,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  68,15,20,193                        // unpcklps      %xmm1,%xmm8
  .byte  76,139,112,40                       // mov           0x28(%rax),%r14
  .byte  243,65,15,16,12,158                 // movss         (%r14,%rbx,4),%xmm1
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  243,71,15,16,12,150                 // movss         (%r14,%r10,4),%xmm9
  .byte  243,67,15,16,20,142                 // movss         (%r14,%r9,4),%xmm2
  .byte  68,15,20,202                        // unpcklps      %xmm2,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  243,65,15,16,20,159                 // movss         (%r15,%rbx,4),%xmm2
  .byte  243,67,15,16,12,159                 // movss         (%r15,%r11,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  243,67,15,16,28,143                 // movss         (%r15,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,112,48                       // mov           0x30(%rax),%r14
  .byte  243,65,15,16,20,158                 // movss         (%r14,%rbx,4),%xmm2
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  243,71,15,16,20,150                 // movss         (%r14,%r10,4),%xmm10
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  68,15,20,211                        // unpcklps      %xmm3,%xmm10
  .byte  68,15,20,210                        // unpcklps      %xmm2,%xmm10
  .byte  76,139,112,24                       // mov           0x18(%rax),%r14
  .byte  243,69,15,16,28,158                 // movss         (%r14,%rbx,4),%xmm11
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  68,15,20,218                        // unpcklps      %xmm2,%xmm11
  .byte  243,67,15,16,20,150                 // movss         (%r14,%r10,4),%xmm2
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,211                        // unpcklps      %xmm11,%xmm2
  .byte  76,139,112,56                       // mov           0x38(%rax),%r14
  .byte  243,69,15,16,36,158                 // movss         (%r14,%rbx,4),%xmm12
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  68,15,20,227                        // unpcklps      %xmm3,%xmm12
  .byte  243,71,15,16,28,150                 // movss         (%r14,%r10,4),%xmm11
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  68,15,20,219                        // unpcklps      %xmm3,%xmm11
  .byte  69,15,20,220                        // unpcklps      %xmm12,%xmm11
  .byte  76,139,112,32                       // mov           0x20(%rax),%r14
  .byte  243,69,15,16,36,158                 // movss         (%r14,%rbx,4),%xmm12
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  68,15,20,227                        // unpcklps      %xmm3,%xmm12
  .byte  243,67,15,16,28,150                 // movss         (%r14,%r10,4),%xmm3
  .byte  243,71,15,16,44,142                 // movss         (%r14,%r9,4),%xmm13
  .byte  65,15,20,221                        // unpcklps      %xmm13,%xmm3
  .byte  65,15,20,220                        // unpcklps      %xmm12,%xmm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  243,68,15,16,36,152                 // movss         (%rax,%rbx,4),%xmm12
  .byte  243,70,15,16,44,152                 // movss         (%rax,%r11,4),%xmm13
  .byte  69,15,20,229                        // unpcklps      %xmm13,%xmm12
  .byte  243,70,15,16,44,144                 // movss         (%rax,%r10,4),%xmm13
  .byte  243,70,15,16,52,136                 // movss         (%rax,%r9,4),%xmm14
  .byte  69,15,20,238                        // unpcklps      %xmm14,%xmm13
  .byte  69,15,20,236                        // unpcklps      %xmm12,%xmm13
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_sse2
.globl _sk_evenly_spaced_2_stop_gradient_sse2
FUNCTION(_sk_evenly_spaced_2_stop_gradient_sse2)
_sk_evenly_spaced_2_stop_gradient_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,72,28                  // movss         0x1c(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_sse2
.globl _sk_xy_to_unit_angle_sse2
FUNCTION(_sk_xy_to_unit_angle_sse2)
_sk_xy_to_unit_angle_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,84,200                        // andps         %xmm8,%xmm9
  .byte  69,15,87,210                        // xorps         %xmm10,%xmm10
  .byte  68,15,92,209                        // subps         %xmm1,%xmm10
  .byte  68,15,84,209                        // andps         %xmm1,%xmm10
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,93,218                        // minps         %xmm10,%xmm11
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  69,15,95,226                        // maxps         %xmm10,%xmm12
  .byte  69,15,94,220                        // divps         %xmm12,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,40,45,13,22,0,0               // movaps        0x160d(%rip),%xmm13        # 6d30 <_sk_callback_sse2+0x11e5>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,17,22,0,0               // addps         0x1611(%rip),%xmm13        # 6d40 <_sk_callback_sse2+0x11f5>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,21,22,0,0               // addps         0x1615(%rip),%xmm13        # 6d50 <_sk_callback_sse2+0x1205>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,25,22,0,0               // addps         0x1619(%rip),%xmm13        # 6d60 <_sk_callback_sse2+0x1215>
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,40,21,24,22,0,0               // movaps        0x1618(%rip),%xmm10        # 6d70 <_sk_callback_sse2+0x1225>
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  69,15,85,205                        // andnps        %xmm13,%xmm9
  .byte  69,15,86,202                        // orps          %xmm10,%xmm9
  .byte  68,15,194,192,1                     // cmpltps       %xmm0,%xmm8
  .byte  68,15,40,21,11,22,0,0               // movaps        0x160b(%rip),%xmm10        # 6d80 <_sk_callback_sse2+0x1235>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,84,208                        // andps         %xmm8,%xmm10
  .byte  69,15,85,193                        // andnps        %xmm9,%xmm8
  .byte  69,15,86,194                        // orps          %xmm10,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,194,200,1                     // cmpltps       %xmm0,%xmm9
  .byte  68,15,40,21,250,21,0,0              // movaps        0x15fa(%rip),%xmm10        # 6d90 <_sk_callback_sse2+0x1245>
  .byte  69,15,92,208                        // subps         %xmm8,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  69,15,85,200                        // andnps        %xmm8,%xmm9
  .byte  69,15,86,202                        // orps          %xmm10,%xmm9
  .byte  65,15,194,193,7                     // cmpordps      %xmm9,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_sse2
.globl _sk_xy_to_radius_sse2
FUNCTION(_sk_xy_to_radius_sse2)
_sk_xy_to_radius_sse2:
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  65,15,81,192                        // sqrtps        %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_sse2
.globl _sk_save_xy_sse2
FUNCTION(_sk_save_xy_sse2)
_sk_save_xy_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,204,21,0,0               // movaps        0x15cc(%rip),%xmm8        # 6da0 <_sk_callback_sse2+0x1255>
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,194,218,1                     // cmpltps       %xmm10,%xmm11
  .byte  68,15,40,37,183,21,0,0              // movaps        0x15b7(%rip),%xmm12        # 6db0 <_sk_callback_sse2+0x1265>
  .byte  69,15,84,220                        // andps         %xmm12,%xmm11
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  243,69,15,91,208                    // cvttps2dq     %xmm8,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,194,218,1                     // cmpltps       %xmm10,%xmm11
  .byte  69,15,84,220                        // andps         %xmm12,%xmm11
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  15,17,72,32                         // movups        %xmm1,0x20(%rax)
  .byte  68,15,17,72,64                      // movups        %xmm9,0x40(%rax)
  .byte  68,15,17,64,96                      // movups        %xmm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_sse2
.globl _sk_accumulate_sse2
FUNCTION(_sk_accumulate_sse2)
_sk_accumulate_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,16,128,128,0,0,0              // movups        0x80(%rax),%xmm8
  .byte  68,15,16,136,160,0,0,0              // movups        0xa0(%rax),%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  65,15,88,224                        // addps         %xmm8,%xmm4
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  65,15,88,232                        // addps         %xmm8,%xmm5
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,88,240                        // addps         %xmm8,%xmm6
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_sse2
.globl _sk_bilinear_nx_sse2
FUNCTION(_sk_bilinear_nx_sse2)
_sk_bilinear_nx_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,48,21,0,0                   // addps         0x1530(%rip),%xmm0        # 6dc0 <_sk_callback_sse2+0x1275>
  .byte  68,15,40,13,56,21,0,0               // movaps        0x1538(%rip),%xmm9        # 6dd0 <_sk_callback_sse2+0x1285>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_sse2
.globl _sk_bilinear_px_sse2
FUNCTION(_sk_bilinear_px_sse2)
_sk_bilinear_px_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,39,21,0,0                   // addps         0x1527(%rip),%xmm0        # 6de0 <_sk_callback_sse2+0x1295>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_sse2
.globl _sk_bilinear_ny_sse2
FUNCTION(_sk_bilinear_ny_sse2)
_sk_bilinear_ny_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,25,21,0,0                  // addps         0x1519(%rip),%xmm1        # 6df0 <_sk_callback_sse2+0x12a5>
  .byte  68,15,40,13,33,21,0,0               // movaps        0x1521(%rip),%xmm9        # 6e00 <_sk_callback_sse2+0x12b5>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_sse2
.globl _sk_bilinear_py_sse2
FUNCTION(_sk_bilinear_py_sse2)
_sk_bilinear_py_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,15,21,0,0                  // addps         0x150f(%rip),%xmm1        # 6e10 <_sk_callback_sse2+0x12c5>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_sse2
.globl _sk_bicubic_n3x_sse2
FUNCTION(_sk_bicubic_n3x_sse2)
_sk_bicubic_n3x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,2,21,0,0                    // addps         0x1502(%rip),%xmm0        # 6e20 <_sk_callback_sse2+0x12d5>
  .byte  68,15,40,13,10,21,0,0               // movaps        0x150a(%rip),%xmm9        # 6e30 <_sk_callback_sse2+0x12e5>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,6,21,0,0                // mulps         0x1506(%rip),%xmm9        # 6e40 <_sk_callback_sse2+0x12f5>
  .byte  68,15,88,13,14,21,0,0               // addps         0x150e(%rip),%xmm9        # 6e50 <_sk_callback_sse2+0x1305>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_sse2
.globl _sk_bicubic_n1x_sse2
FUNCTION(_sk_bicubic_n1x_sse2)
_sk_bicubic_n1x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,253,20,0,0                  // addps         0x14fd(%rip),%xmm0        # 6e60 <_sk_callback_sse2+0x1315>
  .byte  68,15,40,13,5,21,0,0                // movaps        0x1505(%rip),%xmm9        # 6e70 <_sk_callback_sse2+0x1325>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,9,21,0,0                 // movaps        0x1509(%rip),%xmm8        # 6e80 <_sk_callback_sse2+0x1335>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,13,21,0,0                // addps         0x150d(%rip),%xmm8        # 6e90 <_sk_callback_sse2+0x1345>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,17,21,0,0                // addps         0x1511(%rip),%xmm8        # 6ea0 <_sk_callback_sse2+0x1355>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,21,21,0,0                // addps         0x1515(%rip),%xmm8        # 6eb0 <_sk_callback_sse2+0x1365>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_sse2
.globl _sk_bicubic_p1x_sse2
FUNCTION(_sk_bicubic_p1x_sse2)
_sk_bicubic_p1x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,15,21,0,0                // movaps        0x150f(%rip),%xmm8        # 6ec0 <_sk_callback_sse2+0x1375>
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,72,64                      // movups        0x40(%rax),%xmm9
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,21,11,21,0,0               // movaps        0x150b(%rip),%xmm10        # 6ed0 <_sk_callback_sse2+0x1385>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,15,21,0,0               // addps         0x150f(%rip),%xmm10        # 6ee0 <_sk_callback_sse2+0x1395>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,11,21,0,0               // addps         0x150b(%rip),%xmm10        # 6ef0 <_sk_callback_sse2+0x13a5>
  .byte  68,15,17,144,128,0,0,0              // movups        %xmm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_sse2
.globl _sk_bicubic_p3x_sse2
FUNCTION(_sk_bicubic_p3x_sse2)
_sk_bicubic_p3x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,254,20,0,0                  // addps         0x14fe(%rip),%xmm0        # 6f00 <_sk_callback_sse2+0x13b5>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,254,20,0,0               // mulps         0x14fe(%rip),%xmm8        # 6f10 <_sk_callback_sse2+0x13c5>
  .byte  68,15,88,5,6,21,0,0                 // addps         0x1506(%rip),%xmm8        # 6f20 <_sk_callback_sse2+0x13d5>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_sse2
.globl _sk_bicubic_n3y_sse2
FUNCTION(_sk_bicubic_n3y_sse2)
_sk_bicubic_n3y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,244,20,0,0                 // addps         0x14f4(%rip),%xmm1        # 6f30 <_sk_callback_sse2+0x13e5>
  .byte  68,15,40,13,252,20,0,0              // movaps        0x14fc(%rip),%xmm9        # 6f40 <_sk_callback_sse2+0x13f5>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,248,20,0,0              // mulps         0x14f8(%rip),%xmm9        # 6f50 <_sk_callback_sse2+0x1405>
  .byte  68,15,88,13,0,21,0,0                // addps         0x1500(%rip),%xmm9        # 6f60 <_sk_callback_sse2+0x1415>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_sse2
.globl _sk_bicubic_n1y_sse2
FUNCTION(_sk_bicubic_n1y_sse2)
_sk_bicubic_n1y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,238,20,0,0                 // addps         0x14ee(%rip),%xmm1        # 6f70 <_sk_callback_sse2+0x1425>
  .byte  68,15,40,13,246,20,0,0              // movaps        0x14f6(%rip),%xmm9        # 6f80 <_sk_callback_sse2+0x1435>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,250,20,0,0               // movaps        0x14fa(%rip),%xmm8        # 6f90 <_sk_callback_sse2+0x1445>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,254,20,0,0               // addps         0x14fe(%rip),%xmm8        # 6fa0 <_sk_callback_sse2+0x1455>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,2,21,0,0                 // addps         0x1502(%rip),%xmm8        # 6fb0 <_sk_callback_sse2+0x1465>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,6,21,0,0                 // addps         0x1506(%rip),%xmm8        # 6fc0 <_sk_callback_sse2+0x1475>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_sse2
.globl _sk_bicubic_p1y_sse2
FUNCTION(_sk_bicubic_p1y_sse2)
_sk_bicubic_p1y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,0,21,0,0                 // movaps        0x1500(%rip),%xmm8        # 6fd0 <_sk_callback_sse2+0x1485>
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,72,96                      // movups        0x60(%rax),%xmm9
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,21,251,20,0,0              // movaps        0x14fb(%rip),%xmm10        # 6fe0 <_sk_callback_sse2+0x1495>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,255,20,0,0              // addps         0x14ff(%rip),%xmm10        # 6ff0 <_sk_callback_sse2+0x14a5>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,251,20,0,0              // addps         0x14fb(%rip),%xmm10        # 7000 <_sk_callback_sse2+0x14b5>
  .byte  68,15,17,144,160,0,0,0              // movups        %xmm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_sse2
.globl _sk_bicubic_p3y_sse2
FUNCTION(_sk_bicubic_p3y_sse2)
_sk_bicubic_p3y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,237,20,0,0                 // addps         0x14ed(%rip),%xmm1        # 7010 <_sk_callback_sse2+0x14c5>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,237,20,0,0               // mulps         0x14ed(%rip),%xmm8        # 7020 <_sk_callback_sse2+0x14d5>
  .byte  68,15,88,5,245,20,0,0               // addps         0x14f5(%rip),%xmm8        # 7030 <_sk_callback_sse2+0x14e5>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_sse2
.globl _sk_callback_sse2
FUNCTION(_sk_callback_sse2)
_sk_callback_sse2:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,236,72                       // sub           $0x48,%rsp
  .byte  15,41,125,144                       // movaps        %xmm7,-0x70(%rbp)
  .byte  15,41,117,160                       // movaps        %xmm6,-0x60(%rbp)
  .byte  15,41,109,176                       // movaps        %xmm5,-0x50(%rbp)
  .byte  15,41,101,192                       // movaps        %xmm4,-0x40(%rbp)
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  72,137,77,208                       // mov           %rcx,-0x30(%rbp)
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,252                          // mov           %rdi,%r12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,20,225                           // unpcklps      %xmm1,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,20,235                           // unpcklps      %xmm3,%xmm5
  .byte  15,21,193                           // unpckhps      %xmm1,%xmm0
  .byte  15,21,211                           // unpckhps      %xmm3,%xmm2
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  102,15,20,205                       // unpcklpd      %xmm5,%xmm1
  .byte  15,18,236                           // movhlps       %xmm4,%xmm5
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  102,15,20,218                       // unpcklpd      %xmm2,%xmm3
  .byte  102,65,15,17,78,8                   // movupd        %xmm1,0x8(%r14)
  .byte  15,18,208                           // movhlps       %xmm0,%xmm2
  .byte  65,15,17,110,24                     // movups        %xmm5,0x18(%r14)
  .byte  102,65,15,17,94,40                  // movupd        %xmm3,0x28(%r14)
  .byte  65,15,17,86,56                      // movups        %xmm2,0x38(%r14)
  .byte  72,133,219                          // test          %rbx,%rbx
  .byte  190,4,0,0,0                         // mov           $0x4,%esi
  .byte  15,69,243                           // cmovne        %ebx,%esi
  .byte  76,137,247                          // mov           %r14,%rdi
  .byte  65,255,22                           // callq         *(%r14)
  .byte  73,139,134,136,0,0,0                // mov           0x88(%r14),%rax
  .byte  15,16,32                            // movups        (%rax),%xmm4
  .byte  15,16,64,16                         // movups        0x10(%rax),%xmm0
  .byte  15,16,88,32                         // movups        0x20(%rax),%xmm3
  .byte  15,16,80,48                         // movups        0x30(%rax),%xmm2
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,20,232                           // unpcklps      %xmm0,%xmm5
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  15,21,224                           // unpckhps      %xmm0,%xmm4
  .byte  15,21,218                           // unpckhps      %xmm2,%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,205                           // movhlps       %xmm5,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  15,18,220                           // movhlps       %xmm4,%xmm3
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,250                          // mov           %r15,%rdx
  .byte  72,139,77,208                       // mov           -0x30(%rbp),%rcx
  .byte  73,137,216                          // mov           %rbx,%r8
  .byte  15,40,101,192                       // movaps        -0x40(%rbp),%xmm4
  .byte  15,40,109,176                       // movaps        -0x50(%rbp),%xmm5
  .byte  15,40,117,160                       // movaps        -0x60(%rbp),%xmm6
  .byte  15,40,125,144                       // movaps        -0x70(%rbp),%xmm7
  .byte  72,131,196,72                       // add           $0x48,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

BALIGN16
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%rdi)
  .byte  0,224                               // add           %ah,%al
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  224,64                              // loopne        5e18 <.literal16+0x1d8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        5e1c <.literal16+0x1dc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        5e20 <.literal16+0x1e0>
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5e41 <.literal16+0x201>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5e45 <.literal16+0x205>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5e49 <.literal16+0x209>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5e4d <.literal16+0x20d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5e81 <.literal16+0x241>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5e85 <.literal16+0x245>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5e89 <.literal16+0x249>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5e8d <.literal16+0x24d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5ec1 <.literal16+0x281>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5ec5 <.literal16+0x285>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5ec9 <.literal16+0x289>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5ecd <.literal16+0x28d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5f01 <.literal16+0x2c1>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5f05 <.literal16+0x2c5>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5f09 <.literal16+0x2c9>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5f0d <.literal16+0x2cd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,255                          // cmpb          $0xff,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%rax)
  .byte  67,0,0                              // rex.XB        add %al,(%r8)
  .byte  127,67                              // jg            5f4b <.literal16+0x30b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5f4f <.literal16+0x30f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5f53 <.literal16+0x313>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,145                          // cmpb          $0x91,(%rdi)
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  82                                  // push          %rdx
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // rex.WRX
  .byte  65,82                               // push          %r10
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // rex.WRX
  .byte  65,57,215                           // cmp           %edx,%r15d
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%rbx)
  .byte  57,215                              // cmp           %edx,%edi
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%rbx)
  .byte  186,159,98,60,186                   // mov           $0xba3c629f,%edx
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,186                              // cmp           $0xba,%al
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,186                              // cmp           $0xba,%al
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,109                              // cmp           $0x6d,%al
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%rsi)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%rsi)
  .byte  168,177                             // test          $0xb1,%al
  .byte  152                                 // cwtl
  .byte  59,168,177,152,59,168               // cmp           -0x57c4674f(%rax),%ebp
  .byte  177,152                             // mov           $0x98,%cl
  .byte  59,168,177,152,59,0                 // cmp           0x3b98b1(%rax),%ebp
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,171                          // cmpb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6199 <.literal16+0x559>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        619d <.literal16+0x55d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        61a1 <.literal16+0x561>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        61a5 <.literal16+0x565>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,255,0              // addb          $0x0,-0xff00c5(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            627b <.literal16+0x63b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            627f <.literal16+0x63f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6283 <.literal16+0x643>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6274 <.literal16+0x634>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6278 <.literal16+0x638>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            627c <.literal16+0x63c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6280 <.literal16+0x640>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            6305 <.literal16+0x6c5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           6269 <.literal16+0x629>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3a2aa <_sk_callback_sse2+0xffffffffe9a3475f>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6344 <.literal16+0x704>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6348 <.literal16+0x708>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            634c <.literal16+0x70c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6350 <.literal16+0x710>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            63d5 <.literal16+0x795>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           6339 <.literal16+0x6f9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3a37a <_sk_callback_sse2+0xffffffffe9a3482f>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6414 <.literal16+0x7d4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6418 <.literal16+0x7d8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            641c <.literal16+0x7dc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6420 <.literal16+0x7e0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            64a5 <.literal16+0x865>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           6409 <.literal16+0x7c9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3a44a <_sk_callback_sse2+0xffffffffe9a348ff>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            64e4 <.literal16+0x8a4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            64e8 <.literal16+0x8a8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            64ec <.literal16+0x8ac>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            64f0 <.literal16+0x8b0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            6575 <.literal16+0x935>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           64d9 <.literal16+0x899>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3a51a <_sk_callback_sse2+0xffffffffe9a349cf>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  127,67                              // jg            65f7 <.literal16+0x9b7>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            65fb <.literal16+0x9bb>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            65ff <.literal16+0x9bf>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6603 <.literal16+0x9c3>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,203,61,13                     // or            $0xd3dcb3c,%eax
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,60,203,61                     // cmp           $0x3dcb3c0d,%eax
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  18,3                                // adc           (%rbx),%al
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  163,59,10,215,163,59,10,215,163     // movabs        %eax,0xa3d70a3ba3d70a3b
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,194,24,17       // movabs        %eax,0x1118c23c1118c23b
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,190,203,61                    // cmp           $0x3dcbbe0d,%eax
  .byte  13,190,203,61,13                    // or            $0xd3dcbbe,%eax
  .byte  190,203,61,13,190                   // mov           $0xbe0d3dcb,%esi
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           6683 <.literal16+0xa43>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           6687 <.literal16+0xa47>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           668b <.literal16+0xa4b>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           668f <.literal16+0xa4f>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            66fb <.literal16+0xabb>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            66ff <.literal16+0xabf>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6703 <.literal16+0xac3>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6799 <.literal16+0xb59>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        679d <.literal16+0xb5d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        67a1 <.literal16+0xb61>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        67a5 <.literal16+0xb65>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6809 <.literal16+0xbc9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        680d <.literal16+0xbcd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6811 <.literal16+0xbd1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6815 <.literal16+0xbd5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6879 <.literal16+0xc39>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        687d <.literal16+0xc3d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6881 <.literal16+0xc41>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6885 <.literal16+0xc45>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,248                               // add           %bh,%al
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            6916 <.literal16+0xcd6>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            691a <.literal16+0xcda>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            691e <.literal16+0xcde>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            6922 <.literal16+0xce2>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6aa5 <.literal16+0xe65>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6aa9 <.literal16+0xe69>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6aad <.literal16+0xe6d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6ab1 <.literal16+0xe71>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,127,67               // addb          $0x43,0x7f00003b(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6b1b <.literal16+0xedb>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6b1f <.literal16+0xedf>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6b23 <.literal16+0xee3>
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,4                             // addb          $0x4,(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,4                             // addb          $0x4,(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,4                             // addb          $0x4,(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,56,0                            // cmpb          $0x0,(%rax)
  .byte  0,128,56,0,0,128                    // add           %al,-0x7fffffc8(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,128,56,0,64,254                   // add           %al,-0x1bfffc8(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            6c4b <.literal16+0x100b>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            6c4f <.literal16+0x100f>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            6c53 <.literal16+0x1013>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            6c57 <.literal16+0x1017>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%rdi)
  .byte  0,128,191,0,0,128                   // add           %al,-0x7fffff41(%rax)
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,208                          // cmpb          $0xd0,(%rdi)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,152,221,147              // fstl          -0x6c2267c3(%rbx)
  .byte  61,152,221,147,61                   // cmp           $0x3d93dd98,%eax
  .byte  152                                 // cwtl
  .byte  221,147,61,45,16,17                 // fstl          0x11102d3d(%rbx)
  .byte  192,45,16,17,192,45,16              // shrb          $0x10,0x2dc01110(%rip)        # 2dc07dea <_sk_callback_sse2+0x2dc0229f>
  .byte  17,192                              // adc           %eax,%eax
  .byte  45,16,17,192,18                     // sub           $0x12c01110,%eax
  .byte  120,57                              // js            6d1c <.literal16+0x10dc>
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,32,148,90,62,32,148,90           // and           %dl,0x5a94203e(%rdx,%rbx,2)
  .byte  62,32,148,90,62,32,148,90           // and           %dl,%ds:0x5a94203e(%rdx,%rbx,2)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,0,24                             // add           %bl,%ds:(%rax)
  .byte  161,57,0,24,161,57,0,24,161         // movabs        0xa1180039a1180039,%eax
  .byte  57,0                                // cmp           %eax,(%rax)
  .byte  24,161,57,1,0,0                     // sbb           %ah,0x139(%rcx)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,111,43                            // add           %ch,0x2b(%rdi)
  .byte  231,187                             // out           %eax,$0xbb
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  159                                 // lahf
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,212                          // lret          $0xd43c
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,128,62,0,0,128                    // add           %al,-0x7fffffc2(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  191,0,0,0,191                       // mov           $0xbf000000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         6e62 <.literal16+0x1222>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6e66 <.literal16+0x1226>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6e6a <.literal16+0x122a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63fcf5 <_sk_callback_sse2+0x3d63a1aa>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63fd35 <_sk_callback_sse2+0x3d63a1ea>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            6f2e <.literal16+0x12ee>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6f32 <.literal16+0x12f2>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6f36 <.literal16+0x12f6>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6f3a <.literal16+0x12fa>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         6f72 <.literal16+0x1332>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6f76 <.literal16+0x1336>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6f7a <.literal16+0x133a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63fe05 <_sk_callback_sse2+0x3d63a2ba>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63fe45 <_sk_callback_sse2+0x3d63a2fa>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            703e <.literal16+0x13fe>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         7042 <_sk_callback_sse2+0x14f7>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         7046 <_sk_callback_sse2+0x14fb>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         704a <_sk_callback_sse2+0x14ff>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
BALIGN32

HIDDEN _sk_start_pipeline_hsw_lowp
.globl _sk_start_pipeline_hsw_lowp
FUNCTION(_sk_start_pipeline_hsw_lowp)
_sk_start_pipeline_hsw_lowp:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  72,137,243                          // mov           %rsi,%rbx
  .byte  73,137,254                          // mov           %rdi,%r14
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,197                          // mov           %rax,%r13
  .byte  73,141,78,16                        // lea           0x10(%r14),%rcx
  .byte  76,57,249                           // cmp           %r15,%rcx
  .byte  118,5                               // jbe           30 <_sk_start_pipeline_hsw_lowp+0x30>
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  235,45                              // jmp           5d <_sk_start_pipeline_hsw_lowp+0x5d>
  .byte  76,137,125,208                      // mov           %r15,-0x30(%rbp)
  .byte  69,49,192                           // xor           %r8d,%r8d
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  72,137,217                          // mov           %rbx,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,139,125,208                      // mov           -0x30(%rbp),%r15
  .byte  73,141,86,16                        // lea           0x10(%r14),%rdx
  .byte  73,131,198,32                       // add           $0x20,%r14
  .byte  77,57,254                           // cmp           %r15,%r14
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  118,215                             // jbe           34 <_sk_start_pipeline_hsw_lowp+0x34>
  .byte  77,137,248                          // mov           %r15,%r8
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,9                               // je            6e <_sk_start_pipeline_hsw_lowp+0x6e>
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  72,137,217                          // mov           %rbx,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,137,248                          // mov           %r15,%rax
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  197,248,119                         // vzeroupper
  .byte  195                                 // retq

HIDDEN _sk_just_return_hsw_lowp
.globl _sk_just_return_hsw_lowp
FUNCTION(_sk_just_return_hsw_lowp)
_sk_just_return_hsw_lowp:
  .byte  195                                 // retq

HIDDEN _sk_constant_color_hsw_lowp
.globl _sk_constant_color_hsw_lowp
FUNCTION(_sk_constant_color_hsw_lowp)
_sk_constant_color_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,121,24,5,105,26,0,0         // vbroadcastss  0x1a69(%rip),%xmm0        # 1af8 <_sk_xor__hsw_lowp+0x78>
  .byte  197,248,88,24                       // vaddps        (%rax),%xmm0,%xmm3
  .byte  196,226,125,121,195                 // vpbroadcastw  %xmm3,%ymm0
  .byte  197,251,112,203,234                 // vpshuflw      $0xea,%xmm3,%xmm1
  .byte  196,226,125,88,201                  // vpbroadcastd  %xmm1,%ymm1
  .byte  196,227,121,4,211,230               // vpermilps     $0xe6,%xmm3,%xmm2
  .byte  197,251,112,210,224                 // vpshuflw      $0xe0,%xmm2,%xmm2
  .byte  196,226,125,88,210                  // vpbroadcastd  %xmm2,%ymm2
  .byte  196,227,121,4,219,236               // vpermilps     $0xec,%xmm3,%xmm3
  .byte  197,251,112,219,234                 // vpshuflw      $0xea,%xmm3,%xmm3
  .byte  196,226,125,88,219                  // vpbroadcastd  %xmm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_hsw_lowp
.globl _sk_set_rgb_hsw_lowp
FUNCTION(_sk_set_rgb_hsw_lowp)
_sk_set_rgb_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,250,16,21,44,26,0,0             // vmovss        0x1a2c(%rip),%xmm2        # 1afc <_sk_xor__hsw_lowp+0x7c>
  .byte  197,234,88,0                        // vaddss        (%rax),%xmm2,%xmm0
  .byte  196,193,121,126,193                 // vmovd         %xmm0,%r9d
  .byte  196,193,121,110,193                 // vmovd         %r9d,%xmm0
  .byte  196,226,125,121,192                 // vpbroadcastw  %xmm0,%ymm0
  .byte  197,234,88,72,4                     // vaddss        0x4(%rax),%xmm2,%xmm1
  .byte  196,193,121,126,201                 // vmovd         %xmm1,%r9d
  .byte  196,193,121,110,201                 // vmovd         %r9d,%xmm1
  .byte  196,226,125,121,201                 // vpbroadcastw  %xmm1,%ymm1
  .byte  197,234,88,80,8                     // vaddss        0x8(%rax),%xmm2,%xmm2
  .byte  197,249,126,208                     // vmovd         %xmm2,%eax
  .byte  197,249,110,208                     // vmovd         %eax,%xmm2
  .byte  196,226,125,121,210                 // vpbroadcastw  %xmm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_hsw_lowp
.globl _sk_premul_hsw_lowp
FUNCTION(_sk_premul_hsw_lowp)
_sk_premul_hsw_lowp:
  .byte  196,226,125,11,195                  // vpmulhrsw     %ymm3,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,226,117,11,203                  // vpmulhrsw     %ymm3,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,226,109,11,211                  // vpmulhrsw     %ymm3,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_8888_hsw_lowp
.globl _sk_load_8888_hsw_lowp
FUNCTION(_sk_load_8888_hsw_lowp)
_sk_load_8888_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,210,0,0,0                    // jne           20f <_sk_load_8888_hsw_lowp+0xe0>
  .byte  196,193,126,111,92,147,32           // vmovdqu       0x20(%r11,%rdx,4),%ymm3
  .byte  196,65,126,111,4,147                // vmovdqu       (%r11,%rdx,4),%ymm8
  .byte  197,253,111,5,206,25,0,0            // vmovdqa       0x19ce(%rip),%ymm0        # 1b20 <_sk_xor__hsw_lowp+0xa0>
  .byte  196,226,61,0,200                    // vpshufb       %ymm0,%ymm8,%ymm1
  .byte  196,227,253,0,201,232               // vpermq        $0xe8,%ymm1,%ymm1
  .byte  196,226,101,0,192                   // vpshufb       %ymm0,%ymm3,%ymm0
  .byte  196,227,253,0,192,232               // vpermq        $0xe8,%ymm0,%ymm0
  .byte  196,227,117,56,192,1                // vinserti128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  197,253,113,240,8                   // vpsllw        $0x8,%ymm0,%ymm0
  .byte  196,98,125,121,13,196,25,0,0        // vpbroadcastw  0x19c4(%rip),%ymm9        # 1b40 <_sk_xor__hsw_lowp+0xc0>
  .byte  196,193,125,228,193                 // vpmulhuw      %ymm9,%ymm0,%ymm0
  .byte  197,253,111,13,215,25,0,0           // vmovdqa       0x19d7(%rip),%ymm1        # 1b60 <_sk_xor__hsw_lowp+0xe0>
  .byte  196,226,61,0,209                    // vpshufb       %ymm1,%ymm8,%ymm2
  .byte  196,227,253,0,210,232               // vpermq        $0xe8,%ymm2,%ymm2
  .byte  196,226,101,0,201                   // vpshufb       %ymm1,%ymm3,%ymm1
  .byte  196,227,253,0,201,232               // vpermq        $0xe8,%ymm1,%ymm1
  .byte  196,227,109,56,201,1                // vinserti128   $0x1,%xmm1,%ymm2,%ymm1
  .byte  197,245,113,241,8                   // vpsllw        $0x8,%ymm1,%ymm1
  .byte  196,193,117,228,201                 // vpmulhuw      %ymm9,%ymm1,%ymm1
  .byte  197,253,111,21,201,25,0,0           // vmovdqa       0x19c9(%rip),%ymm2        # 1b80 <_sk_xor__hsw_lowp+0x100>
  .byte  196,98,61,0,210                     // vpshufb       %ymm2,%ymm8,%ymm10
  .byte  196,67,253,0,210,232                // vpermq        $0xe8,%ymm10,%ymm10
  .byte  196,226,101,0,210                   // vpshufb       %ymm2,%ymm3,%ymm2
  .byte  196,227,253,0,210,232               // vpermq        $0xe8,%ymm2,%ymm2
  .byte  196,227,45,56,210,1                 // vinserti128   $0x1,%xmm2,%ymm10,%ymm2
  .byte  197,237,113,242,8                   // vpsllw        $0x8,%ymm2,%ymm2
  .byte  196,193,109,228,209                 // vpmulhuw      %ymm9,%ymm2,%ymm2
  .byte  197,125,111,21,187,25,0,0           // vmovdqa       0x19bb(%rip),%ymm10        # 1ba0 <_sk_xor__hsw_lowp+0x120>
  .byte  196,66,61,0,194                     // vpshufb       %ymm10,%ymm8,%ymm8
  .byte  196,67,253,0,192,232                // vpermq        $0xe8,%ymm8,%ymm8
  .byte  196,194,101,0,218                   // vpshufb       %ymm10,%ymm3,%ymm3
  .byte  196,227,253,0,219,232               // vpermq        $0xe8,%ymm3,%ymm3
  .byte  196,227,61,56,219,1                 // vinserti128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,229,113,243,8                   // vpsllw        $0x8,%ymm3,%ymm3
  .byte  196,193,101,228,217                 // vpmulhuw      %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  197,229,239,219                     // vpxor         %ymm3,%ymm3,%ymm3
  .byte  196,65,61,239,192                   // vpxor         %ymm8,%ymm8,%ymm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  15,135,30,255,255,255               // ja            14a <_sk_load_8888_hsw_lowp+0x1b>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,29,1,0,0                  // lea           0x11d(%rip),%r10        # 354 <_sk_load_8888_hsw_lowp+0x225>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,110,4,147                // vmovd         (%r11,%rdx,4),%xmm8
  .byte  233,255,254,255,255                 // jmpq          14a <_sk_load_8888_hsw_lowp+0x1b>
  .byte  196,193,121,110,68,147,8            // vmovd         0x8(%r11,%rdx,4),%xmm0
  .byte  196,226,121,89,192                  // vpbroadcastq  %xmm0,%xmm0
  .byte  197,229,239,219                     // vpxor         %ymm3,%ymm3,%ymm3
  .byte  196,99,101,2,192,4                  // vpblendd      $0x4,%ymm0,%ymm3,%ymm8
  .byte  196,194,121,53,4,147                // vpmovzxdq     (%r11,%rdx,4),%xmm0
  .byte  197,249,112,192,232                 // vpshufd       $0xe8,%xmm0,%xmm0
  .byte  196,99,61,2,192,3                   // vpblendd      $0x3,%ymm0,%ymm8,%ymm8
  .byte  233,211,254,255,255                 // jmpq          14a <_sk_load_8888_hsw_lowp+0x1b>
  .byte  196,193,121,110,68,147,24           // vmovd         0x18(%r11,%rdx,4),%xmm0
  .byte  196,226,125,89,192                  // vpbroadcastq  %xmm0,%ymm0
  .byte  197,229,239,219                     // vpxor         %ymm3,%ymm3,%ymm3
  .byte  196,99,101,2,192,64                 // vpblendd      $0x40,%ymm0,%ymm3,%ymm8
  .byte  196,99,125,57,192,1                 // vextracti128  $0x1,%ymm8,%xmm0
  .byte  196,195,121,34,68,147,20,1          // vpinsrd       $0x1,0x14(%r11,%rdx,4),%xmm0,%xmm0
  .byte  196,99,61,56,192,1                  // vinserti128   $0x1,%xmm0,%ymm8,%ymm8
  .byte  196,99,125,57,192,1                 // vextracti128  $0x1,%ymm8,%xmm0
  .byte  196,195,121,34,68,147,16,0          // vpinsrd       $0x0,0x10(%r11,%rdx,4),%xmm0,%xmm0
  .byte  196,99,61,56,192,1                  // vinserti128   $0x1,%xmm0,%ymm8,%ymm8
  .byte  196,193,122,111,4,147               // vmovdqu       (%r11,%rdx,4),%xmm0
  .byte  196,67,125,2,192,240                // vpblendd      $0xf0,%ymm8,%ymm0,%ymm8
  .byte  233,132,254,255,255                 // jmpq          14a <_sk_load_8888_hsw_lowp+0x1b>
  .byte  196,193,121,110,68,147,40           // vmovd         0x28(%r11,%rdx,4),%xmm0
  .byte  196,226,121,89,192                  // vpbroadcastq  %xmm0,%xmm0
  .byte  197,245,239,201                     // vpxor         %ymm1,%ymm1,%ymm1
  .byte  196,227,117,2,216,4                 // vpblendd      $0x4,%ymm0,%ymm1,%ymm3
  .byte  196,195,97,34,68,147,36,1           // vpinsrd       $0x1,0x24(%r11,%rdx,4),%xmm3,%xmm0
  .byte  196,227,101,2,216,15                // vpblendd      $0xf,%ymm0,%ymm3,%ymm3
  .byte  196,193,121,110,68,147,32           // vmovd         0x20(%r11,%rdx,4),%xmm0
  .byte  196,227,101,2,216,1                 // vpblendd      $0x1,%ymm0,%ymm3,%ymm3
  .byte  233,72,254,255,255                  // jmpq          144 <_sk_load_8888_hsw_lowp+0x15>
  .byte  196,193,121,110,68,147,56           // vmovd         0x38(%r11,%rdx,4),%xmm0
  .byte  196,226,125,89,192                  // vpbroadcastq  %xmm0,%ymm0
  .byte  197,245,239,201                     // vpxor         %ymm1,%ymm1,%ymm1
  .byte  196,227,117,2,216,64                // vpblendd      $0x40,%ymm0,%ymm1,%ymm3
  .byte  196,227,125,57,216,1                // vextracti128  $0x1,%ymm3,%xmm0
  .byte  196,195,121,34,68,147,52,1          // vpinsrd       $0x1,0x34(%r11,%rdx,4),%xmm0,%xmm0
  .byte  196,227,101,56,216,1                // vinserti128   $0x1,%xmm0,%ymm3,%ymm3
  .byte  196,227,125,57,216,1                // vextracti128  $0x1,%ymm3,%xmm0
  .byte  196,195,121,34,68,147,48,0          // vpinsrd       $0x0,0x30(%r11,%rdx,4),%xmm0,%xmm0
  .byte  196,227,101,56,216,1                // vinserti128   $0x1,%xmm0,%ymm3,%ymm3
  .byte  196,65,126,111,4,147                // vmovdqu       (%r11,%rdx,4),%ymm8
  .byte  196,193,122,111,68,147,32           // vmovdqu       0x20(%r11,%rdx,4),%xmm0
  .byte  196,227,125,2,219,240               // vpblendd      $0xf0,%ymm3,%ymm0,%ymm3
  .byte  233,248,253,255,255                 // jmpq          14a <_sk_load_8888_hsw_lowp+0x1b>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  236                                 // in            (%dx),%al
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,247              // decl          -0x8000001(%rip)        # fffffffff800035c <_sk_xor__hsw_lowp+0xfffffffff7ffe8dc>
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,97,255                          // jmpq          *-0x1(%rcx)
  .byte  255                                 // (bad)
  .byte  255,77,255                          // decl          -0x1(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  57,255                              // cmp           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,35                              // jmpq          *(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,240                             // push          %rax
  .byte  253                                 // std
  .byte  255                                 // (bad)
  .byte  255,150,255,255,255,136             // callq         *-0x77000001(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,114,255                         // pushq         -0x1(%rdx)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,210                             // callq         *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190,255,255,255,168                 // mov           $0xa8ffffff,%esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_8888_dst_hsw_lowp
.globl _sk_load_8888_dst_hsw_lowp
FUNCTION(_sk_load_8888_dst_hsw_lowp)
_sk_load_8888_dst_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,210,0,0,0                    // jne           470 <_sk_load_8888_dst_hsw_lowp+0xe0>
  .byte  196,193,126,111,124,147,32          // vmovdqu       0x20(%r11,%rdx,4),%ymm7
  .byte  196,65,126,111,4,147                // vmovdqu       (%r11,%rdx,4),%ymm8
  .byte  197,253,111,37,13,24,0,0            // vmovdqa       0x180d(%rip),%ymm4        # 1bc0 <_sk_xor__hsw_lowp+0x140>
  .byte  196,226,61,0,236                    // vpshufb       %ymm4,%ymm8,%ymm5
  .byte  196,227,253,0,237,232               // vpermq        $0xe8,%ymm5,%ymm5
  .byte  196,226,69,0,228                    // vpshufb       %ymm4,%ymm7,%ymm4
  .byte  196,227,253,0,228,232               // vpermq        $0xe8,%ymm4,%ymm4
  .byte  196,227,85,56,228,1                 // vinserti128   $0x1,%xmm4,%ymm5,%ymm4
  .byte  197,221,113,244,8                   // vpsllw        $0x8,%ymm4,%ymm4
  .byte  196,98,125,121,13,3,24,0,0          // vpbroadcastw  0x1803(%rip),%ymm9        # 1be0 <_sk_xor__hsw_lowp+0x160>
  .byte  196,193,93,228,225                  // vpmulhuw      %ymm9,%ymm4,%ymm4
  .byte  197,253,111,45,22,24,0,0            // vmovdqa       0x1816(%rip),%ymm5        # 1c00 <_sk_xor__hsw_lowp+0x180>
  .byte  196,226,61,0,245                    // vpshufb       %ymm5,%ymm8,%ymm6
  .byte  196,227,253,0,246,232               // vpermq        $0xe8,%ymm6,%ymm6
  .byte  196,226,69,0,237                    // vpshufb       %ymm5,%ymm7,%ymm5
  .byte  196,227,253,0,237,232               // vpermq        $0xe8,%ymm5,%ymm5
  .byte  196,227,77,56,237,1                 // vinserti128   $0x1,%xmm5,%ymm6,%ymm5
  .byte  197,213,113,245,8                   // vpsllw        $0x8,%ymm5,%ymm5
  .byte  196,193,85,228,233                  // vpmulhuw      %ymm9,%ymm5,%ymm5
  .byte  197,253,111,53,8,24,0,0             // vmovdqa       0x1808(%rip),%ymm6        # 1c20 <_sk_xor__hsw_lowp+0x1a0>
  .byte  196,98,61,0,214                     // vpshufb       %ymm6,%ymm8,%ymm10
  .byte  196,67,253,0,210,232                // vpermq        $0xe8,%ymm10,%ymm10
  .byte  196,226,69,0,246                    // vpshufb       %ymm6,%ymm7,%ymm6
  .byte  196,227,253,0,246,232               // vpermq        $0xe8,%ymm6,%ymm6
  .byte  196,227,45,56,246,1                 // vinserti128   $0x1,%xmm6,%ymm10,%ymm6
  .byte  197,205,113,246,8                   // vpsllw        $0x8,%ymm6,%ymm6
  .byte  196,193,77,228,241                  // vpmulhuw      %ymm9,%ymm6,%ymm6
  .byte  197,125,111,21,250,23,0,0           // vmovdqa       0x17fa(%rip),%ymm10        # 1c40 <_sk_xor__hsw_lowp+0x1c0>
  .byte  196,66,61,0,194                     // vpshufb       %ymm10,%ymm8,%ymm8
  .byte  196,67,253,0,192,232                // vpermq        $0xe8,%ymm8,%ymm8
  .byte  196,194,69,0,250                    // vpshufb       %ymm10,%ymm7,%ymm7
  .byte  196,227,253,0,255,232               // vpermq        $0xe8,%ymm7,%ymm7
  .byte  196,227,61,56,255,1                 // vinserti128   $0x1,%xmm7,%ymm8,%ymm7
  .byte  197,197,113,247,8                   // vpsllw        $0x8,%ymm7,%ymm7
  .byte  196,193,69,228,249                  // vpmulhuw      %ymm9,%ymm7,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  197,197,239,255                     // vpxor         %ymm7,%ymm7,%ymm7
  .byte  196,65,61,239,192                   // vpxor         %ymm8,%ymm8,%ymm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  15,135,30,255,255,255               // ja            3ab <_sk_load_8888_dst_hsw_lowp+0x1b>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,28,1,0,0                  // lea           0x11c(%rip),%r10        # 5b4 <_sk_load_8888_dst_hsw_lowp+0x224>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,110,4,147                // vmovd         (%r11,%rdx,4),%xmm8
  .byte  233,255,254,255,255                 // jmpq          3ab <_sk_load_8888_dst_hsw_lowp+0x1b>
  .byte  196,193,121,110,100,147,8           // vmovd         0x8(%r11,%rdx,4),%xmm4
  .byte  196,226,121,89,228                  // vpbroadcastq  %xmm4,%xmm4
  .byte  197,197,239,255                     // vpxor         %ymm7,%ymm7,%ymm7
  .byte  196,99,69,2,196,4                   // vpblendd      $0x4,%ymm4,%ymm7,%ymm8
  .byte  196,194,121,53,36,147               // vpmovzxdq     (%r11,%rdx,4),%xmm4
  .byte  197,249,112,228,232                 // vpshufd       $0xe8,%xmm4,%xmm4
  .byte  196,99,61,2,196,3                   // vpblendd      $0x3,%ymm4,%ymm8,%ymm8
  .byte  233,211,254,255,255                 // jmpq          3ab <_sk_load_8888_dst_hsw_lowp+0x1b>
  .byte  196,193,121,110,100,147,24          // vmovd         0x18(%r11,%rdx,4),%xmm4
  .byte  196,226,125,89,228                  // vpbroadcastq  %xmm4,%ymm4
  .byte  197,197,239,255                     // vpxor         %ymm7,%ymm7,%ymm7
  .byte  196,99,69,2,196,64                  // vpblendd      $0x40,%ymm4,%ymm7,%ymm8
  .byte  196,99,125,57,196,1                 // vextracti128  $0x1,%ymm8,%xmm4
  .byte  196,195,89,34,100,147,20,1          // vpinsrd       $0x1,0x14(%r11,%rdx,4),%xmm4,%xmm4
  .byte  196,99,61,56,196,1                  // vinserti128   $0x1,%xmm4,%ymm8,%ymm8
  .byte  196,99,125,57,196,1                 // vextracti128  $0x1,%ymm8,%xmm4
  .byte  196,195,89,34,100,147,16,0          // vpinsrd       $0x0,0x10(%r11,%rdx,4),%xmm4,%xmm4
  .byte  196,99,61,56,196,1                  // vinserti128   $0x1,%xmm4,%ymm8,%ymm8
  .byte  196,193,122,111,36,147              // vmovdqu       (%r11,%rdx,4),%xmm4
  .byte  196,67,93,2,192,240                 // vpblendd      $0xf0,%ymm8,%ymm4,%ymm8
  .byte  233,132,254,255,255                 // jmpq          3ab <_sk_load_8888_dst_hsw_lowp+0x1b>
  .byte  196,193,121,110,100,147,40          // vmovd         0x28(%r11,%rdx,4),%xmm4
  .byte  196,226,121,89,228                  // vpbroadcastq  %xmm4,%xmm4
  .byte  197,213,239,237                     // vpxor         %ymm5,%ymm5,%ymm5
  .byte  196,227,85,2,252,4                  // vpblendd      $0x4,%ymm4,%ymm5,%ymm7
  .byte  196,195,65,34,100,147,36,1          // vpinsrd       $0x1,0x24(%r11,%rdx,4),%xmm7,%xmm4
  .byte  196,227,69,2,252,15                 // vpblendd      $0xf,%ymm4,%ymm7,%ymm7
  .byte  196,193,121,110,100,147,32          // vmovd         0x20(%r11,%rdx,4),%xmm4
  .byte  196,227,69,2,252,1                  // vpblendd      $0x1,%ymm4,%ymm7,%ymm7
  .byte  233,72,254,255,255                  // jmpq          3a5 <_sk_load_8888_dst_hsw_lowp+0x15>
  .byte  196,193,121,110,100,147,56          // vmovd         0x38(%r11,%rdx,4),%xmm4
  .byte  196,226,125,89,228                  // vpbroadcastq  %xmm4,%ymm4
  .byte  197,213,239,237                     // vpxor         %ymm5,%ymm5,%ymm5
  .byte  196,227,85,2,252,64                 // vpblendd      $0x40,%ymm4,%ymm5,%ymm7
  .byte  196,227,125,57,252,1                // vextracti128  $0x1,%ymm7,%xmm4
  .byte  196,195,89,34,100,147,52,1          // vpinsrd       $0x1,0x34(%r11,%rdx,4),%xmm4,%xmm4
  .byte  196,227,69,56,252,1                 // vinserti128   $0x1,%xmm4,%ymm7,%ymm7
  .byte  196,227,125,57,252,1                // vextracti128  $0x1,%ymm7,%xmm4
  .byte  196,195,89,34,100,147,48,0          // vpinsrd       $0x0,0x30(%r11,%rdx,4),%xmm4,%xmm4
  .byte  196,227,69,56,252,1                 // vinserti128   $0x1,%xmm4,%ymm7,%ymm7
  .byte  196,65,126,111,4,147                // vmovdqu       (%r11,%rdx,4),%ymm8
  .byte  196,193,122,111,100,147,32          // vmovdqu       0x20(%r11,%rdx,4),%xmm4
  .byte  196,227,93,2,255,240                // vpblendd      $0xf0,%ymm7,%ymm4,%ymm7
  .byte  233,248,253,255,255                 // jmpq          3ab <_sk_load_8888_dst_hsw_lowp+0x1b>
  .byte  144                                 // nop
  .byte  237                                 // in            (%dx),%eax
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  248                                 // clc
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,98,255                          // jmpq          *-0x1(%rdx)
  .byte  255                                 // (bad)
  .byte  255,78,255                          // decl          -0x1(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  58,255                              // cmp           %bh,%bh
  .byte  255                                 // (bad)
  .byte  255,36,255                          // jmpq          *(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255,241                             // push          %rcx
  .byte  253                                 // std
  .byte  255                                 // (bad)
  .byte  255,151,255,255,255,137             // callq         *-0x76000001(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,115,255                         // pushq         -0x1(%rbx)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  191,255,255,255,169                 // mov           $0xa9ffffff,%edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_8888_hsw_lowp
.globl _sk_store_8888_hsw_lowp
FUNCTION(_sk_store_8888_hsw_lowp)
_sk_store_8888_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  197,189,113,208,7                   // vpsrlw        $0x7,%ymm0,%ymm8
  .byte  196,98,125,121,13,93,22,0,0         // vpbroadcastw  0x165d(%rip),%ymm9        # 1c60 <_sk_xor__hsw_lowp+0x1e0>
  .byte  196,65,61,234,193                   // vpminsw       %ymm9,%ymm8,%ymm8
  .byte  196,66,125,51,208                   // vpmovzxwd     %xmm8,%ymm10
  .byte  196,67,125,57,192,1                 // vextracti128  $0x1,%ymm8,%xmm8
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  197,165,113,209,7                   // vpsrlw        $0x7,%ymm1,%ymm11
  .byte  196,65,37,234,217                   // vpminsw       %ymm9,%ymm11,%ymm11
  .byte  196,67,125,57,220,1                 // vextracti128  $0x1,%ymm11,%xmm12
  .byte  196,66,125,51,228                   // vpmovzxwd     %xmm12,%ymm12
  .byte  196,66,125,51,219                   // vpmovzxwd     %xmm11,%ymm11
  .byte  196,193,37,114,243,8                // vpslld        $0x8,%ymm11,%ymm11
  .byte  196,193,29,114,244,8                // vpslld        $0x8,%ymm12,%ymm12
  .byte  196,65,29,235,192                   // vpor          %ymm8,%ymm12,%ymm8
  .byte  196,65,37,235,210                   // vpor          %ymm10,%ymm11,%ymm10
  .byte  197,165,113,210,7                   // vpsrlw        $0x7,%ymm2,%ymm11
  .byte  196,65,37,234,217                   // vpminsw       %ymm9,%ymm11,%ymm11
  .byte  196,66,125,51,227                   // vpmovzxwd     %xmm11,%ymm12
  .byte  196,67,125,57,219,1                 // vextracti128  $0x1,%ymm11,%xmm11
  .byte  196,66,125,51,219                   // vpmovzxwd     %xmm11,%ymm11
  .byte  196,193,37,114,243,16               // vpslld        $0x10,%ymm11,%ymm11
  .byte  196,193,29,114,244,16               // vpslld        $0x10,%ymm12,%ymm12
  .byte  197,149,113,211,7                   // vpsrlw        $0x7,%ymm3,%ymm13
  .byte  196,65,21,234,201                   // vpminsw       %ymm9,%ymm13,%ymm9
  .byte  196,67,125,57,205,1                 // vextracti128  $0x1,%ymm9,%xmm13
  .byte  196,66,125,51,237                   // vpmovzxwd     %xmm13,%ymm13
  .byte  196,66,125,51,201                   // vpmovzxwd     %xmm9,%ymm9
  .byte  196,193,13,114,241,24               // vpslld        $0x18,%ymm9,%ymm14
  .byte  196,193,53,114,245,24               // vpslld        $0x18,%ymm13,%ymm9
  .byte  196,65,37,235,201                   // vpor          %ymm9,%ymm11,%ymm9
  .byte  196,65,61,235,201                   // vpor          %ymm9,%ymm8,%ymm9
  .byte  196,65,29,235,198                   // vpor          %ymm14,%ymm12,%ymm8
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,17                              // jne           6be <_sk_store_8888_hsw_lowp+0xce>
  .byte  196,65,126,127,4,147                // vmovdqu       %ymm8,(%r11,%rdx,4)
  .byte  196,65,126,127,76,147,32            // vmovdqu       %ymm9,0x20(%r11,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  119,236                             // ja            6ba <_sk_store_8888_hsw_lowp+0xca>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,175,0,0,0                 // lea           0xaf(%rip),%r10        # 788 <_sk_store_8888_hsw_lowp+0x198>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,126,4,147                // vmovd         %xmm8,(%r11,%rdx,4)
  .byte  235,208                             // jmp           6ba <_sk_store_8888_hsw_lowp+0xca>
  .byte  196,67,121,22,68,147,8,2            // vpextrd       $0x2,%xmm8,0x8(%r11,%rdx,4)
  .byte  196,65,121,214,4,147                // vmovq         %xmm8,(%r11,%rdx,4)
  .byte  235,192                             // jmp           6ba <_sk_store_8888_hsw_lowp+0xca>
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,67,121,22,76,147,24,2           // vpextrd       $0x2,%xmm9,0x18(%r11,%rdx,4)
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,67,121,22,76,147,20,1           // vpextrd       $0x1,%xmm9,0x14(%r11,%rdx,4)
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,65,121,126,76,147,16            // vmovd         %xmm9,0x10(%r11,%rdx,4)
  .byte  196,65,122,127,4,147                // vmovdqu       %xmm8,(%r11,%rdx,4)
  .byte  235,143                             // jmp           6ba <_sk_store_8888_hsw_lowp+0xca>
  .byte  196,67,121,22,76,147,40,2           // vpextrd       $0x2,%xmm9,0x28(%r11,%rdx,4)
  .byte  196,67,121,22,76,147,36,1           // vpextrd       $0x1,%xmm9,0x24(%r11,%rdx,4)
  .byte  196,65,121,126,76,147,32            // vmovd         %xmm9,0x20(%r11,%rdx,4)
  .byte  196,65,126,127,4,147                // vmovdqu       %ymm8,(%r11,%rdx,4)
  .byte  233,109,255,255,255                 // jmpq          6ba <_sk_store_8888_hsw_lowp+0xca>
  .byte  196,67,125,57,202,1                 // vextracti128  $0x1,%ymm9,%xmm10
  .byte  196,67,121,22,84,147,56,2           // vpextrd       $0x2,%xmm10,0x38(%r11,%rdx,4)
  .byte  196,67,125,57,202,1                 // vextracti128  $0x1,%ymm9,%xmm10
  .byte  196,67,121,22,84,147,52,1           // vpextrd       $0x1,%xmm10,0x34(%r11,%rdx,4)
  .byte  196,67,125,57,202,1                 // vextracti128  $0x1,%ymm9,%xmm10
  .byte  196,65,121,126,84,147,48            // vmovd         %xmm10,0x30(%r11,%rdx,4)
  .byte  196,65,126,127,4,147                // vmovdqu       %ymm8,(%r11,%rdx,4)
  .byte  196,65,122,127,76,147,32            // vmovdqu       %xmm9,0x20(%r11,%rdx,4)
  .byte  233,50,255,255,255                  // jmpq          6ba <_sk_store_8888_hsw_lowp+0xca>
  .byte  90                                  // pop           %rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,106,255                         // ljmp          *-0x1(%rdx)
  .byte  255                                 // (bad)
  .byte  255,98,255                          // jmpq          *-0x1(%rdx)
  .byte  255                                 // (bad)
  .byte  255,155,255,255,255,142             // lcall         *-0x71000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,128,255,255,255,114             // incl          0x72ffffff(%rax)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  186,255,255,255,179                 // mov           $0xb3ffffff,%edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,171,255,255,255,163             // ljmp          *-0x5c000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,225                             // jmpq          *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_a8_hsw_lowp
.globl _sk_load_a8_hsw_lowp
FUNCTION(_sk_load_a8_hsw_lowp)
_sk_load_a8_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,45                              // jne           7fb <_sk_load_a8_hsw_lowp+0x37>
  .byte  196,193,122,111,4,19                // vmovdqu       (%r11,%rdx,1),%xmm0
  .byte  196,226,125,48,192                  // vpmovzxbw     %xmm0,%ymm0
  .byte  197,253,113,240,8                   // vpsllw        $0x8,%ymm0,%ymm0
  .byte  196,226,125,121,13,123,20,0,0       // vpbroadcastw  0x147b(%rip),%ymm1        # 1c62 <_sk_xor__hsw_lowp+0x1e2>
  .byte  197,253,228,217                     // vpmulhuw      %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,253,239,192                     // vpxor         %ymm0,%ymm0,%ymm0
  .byte  197,245,239,201                     // vpxor         %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  119,197                             // ja            7d4 <_sk_load_a8_hsw_lowp+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,194,0,0,0                 // lea           0xc2(%rip),%r10        # 8dc <_sk_load_a8_hsw_lowp+0x118>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  235,166                             // jmp           7d4 <_sk_load_a8_hsw_lowp+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,195,121,32,68,19,2,2            // vpinsrb       $0x2,0x2(%r11,%rdx,1),%xmm0,%xmm0
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,227,121,14,193,1                // vpblendw      $0x1,%xmm1,%xmm0,%xmm0
  .byte  235,137                             // jmp           7d4 <_sk_load_a8_hsw_lowp+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,195,121,32,68,19,6,6            // vpinsrb       $0x6,0x6(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,5,5            // vpinsrb       $0x5,0x5(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,4,4            // vpinsrb       $0x4,0x4(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,193,121,110,12,19               // vmovd         (%r11,%rdx,1),%xmm1
  .byte  196,227,121,2,193,1                 // vpblendd      $0x1,%xmm1,%xmm0,%xmm0
  .byte  233,92,255,255,255                  // jmpq          7d4 <_sk_load_a8_hsw_lowp+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,195,121,32,68,19,10,10          // vpinsrb       $0xa,0xa(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,9,9            // vpinsrb       $0x9,0x9(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,8,8            // vpinsrb       $0x8,0x8(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,193,122,126,12,19               // vmovq         (%r11,%rdx,1),%xmm1
  .byte  196,227,113,2,192,12                // vpblendd      $0xc,%xmm0,%xmm1,%xmm0
  .byte  233,47,255,255,255                  // jmpq          7d4 <_sk_load_a8_hsw_lowp+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,195,121,32,68,19,14,14          // vpinsrb       $0xe,0xe(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,13,13          // vpinsrb       $0xd,0xd(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,12,12          // vpinsrb       $0xc,0xc(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,193,122,126,12,19               // vmovq         (%r11,%rdx,1),%xmm1
  .byte  196,195,113,34,76,19,8,2            // vpinsrd       $0x2,0x8(%r11,%rdx,1),%xmm1,%xmm1
  .byte  196,227,113,2,192,8                 // vpblendd      $0x8,%xmm0,%xmm1,%xmm0
  .byte  233,250,254,255,255                 // jmpq          7d4 <_sk_load_a8_hsw_lowp+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  71,255                              // rex.RXB       (bad)
  .byte  255                                 // (bad)
  .byte  255,94,255                          // lcall         *-0x1(%rsi)
  .byte  255                                 // (bad)
  .byte  255,82,255                          // callq         *-0x1(%rdx)
  .byte  255                                 // (bad)
  .byte  255,139,255,255,255,131             // decl          -0x7c000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  123,255                             // jnp           8f1 <_sk_load_a8_hsw_lowp+0x12d>
  .byte  255                                 // (bad)
  .byte  255,111,255                         // ljmp          *-0x1(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  184,255,255,255,176                 // mov           $0xb0ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,168,255,255,255,156             // ljmp          *-0x63000001(%rax)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_a8_dst_hsw_lowp
.globl _sk_load_a8_dst_hsw_lowp
FUNCTION(_sk_load_a8_dst_hsw_lowp)
_sk_load_a8_dst_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,45                              // jne           94f <_sk_load_a8_dst_hsw_lowp+0x37>
  .byte  196,193,122,111,36,19               // vmovdqu       (%r11,%rdx,1),%xmm4
  .byte  196,226,125,48,228                  // vpmovzxbw     %xmm4,%ymm4
  .byte  197,221,113,244,8                   // vpsllw        $0x8,%ymm4,%ymm4
  .byte  196,226,125,121,45,41,19,0,0        // vpbroadcastw  0x1329(%rip),%ymm5        # 1c64 <_sk_xor__hsw_lowp+0x1e4>
  .byte  197,221,228,253                     // vpmulhuw      %ymm5,%ymm4,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,221,239,228                     // vpxor         %ymm4,%ymm4,%ymm4
  .byte  197,213,239,237                     // vpxor         %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  119,197                             // ja            928 <_sk_load_a8_dst_hsw_lowp+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,194,0,0,0                 // lea           0xc2(%rip),%r10        # a30 <_sk_load_a8_dst_hsw_lowp+0x118>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  235,166                             // jmp           928 <_sk_load_a8_dst_hsw_lowp+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,195,89,32,100,19,2,2            // vpinsrb       $0x2,0x2(%r11,%rdx,1),%xmm4,%xmm4
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,232                     // vmovd         %eax,%xmm5
  .byte  196,227,89,14,229,1                 // vpblendw      $0x1,%xmm5,%xmm4,%xmm4
  .byte  235,137                             // jmp           928 <_sk_load_a8_dst_hsw_lowp+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,195,89,32,100,19,6,6            // vpinsrb       $0x6,0x6(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,5,5            // vpinsrb       $0x5,0x5(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,4,4            // vpinsrb       $0x4,0x4(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,193,121,110,44,19               // vmovd         (%r11,%rdx,1),%xmm5
  .byte  196,227,89,2,229,1                  // vpblendd      $0x1,%xmm5,%xmm4,%xmm4
  .byte  233,92,255,255,255                  // jmpq          928 <_sk_load_a8_dst_hsw_lowp+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,195,89,32,100,19,10,10          // vpinsrb       $0xa,0xa(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,9,9            // vpinsrb       $0x9,0x9(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,8,8            // vpinsrb       $0x8,0x8(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,193,122,126,44,19               // vmovq         (%r11,%rdx,1),%xmm5
  .byte  196,227,81,2,228,12                 // vpblendd      $0xc,%xmm4,%xmm5,%xmm4
  .byte  233,47,255,255,255                  // jmpq          928 <_sk_load_a8_dst_hsw_lowp+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,195,89,32,100,19,14,14          // vpinsrb       $0xe,0xe(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,13,13          // vpinsrb       $0xd,0xd(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,12,12          // vpinsrb       $0xc,0xc(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,193,122,126,44,19               // vmovq         (%r11,%rdx,1),%xmm5
  .byte  196,195,81,34,108,19,8,2            // vpinsrd       $0x2,0x8(%r11,%rdx,1),%xmm5,%xmm5
  .byte  196,227,81,2,228,8                  // vpblendd      $0x8,%xmm4,%xmm5,%xmm4
  .byte  233,250,254,255,255                 // jmpq          928 <_sk_load_a8_dst_hsw_lowp+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  71,255                              // rex.RXB       (bad)
  .byte  255                                 // (bad)
  .byte  255,94,255                          // lcall         *-0x1(%rsi)
  .byte  255                                 // (bad)
  .byte  255,82,255                          // callq         *-0x1(%rdx)
  .byte  255                                 // (bad)
  .byte  255,139,255,255,255,131             // decl          -0x7c000001(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  123,255                             // jnp           a45 <_sk_load_a8_dst_hsw_lowp+0x12d>
  .byte  255                                 // (bad)
  .byte  255,111,255                         // ljmp          *-0x1(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  184,255,255,255,176                 // mov           $0xb0ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,168,255,255,255,156             // ljmp          *-0x63000001(%rax)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_a8_hsw_lowp
.globl _sk_store_a8_hsw_lowp
FUNCTION(_sk_store_a8_hsw_lowp)
_sk_store_a8_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  197,189,113,211,7                   // vpsrlw        $0x7,%ymm3,%ymm8
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,65,57,103,193                   // vpackuswb     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           a90 <_sk_store_a8_hsw_lowp+0x24>
  .byte  196,65,122,127,4,19                 // vmovdqu       %xmm8,(%r11,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  119,236                             // ja            a8c <_sk_store_a8_hsw_lowp+0x20>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,137,0,0,0                 // lea           0x89(%rip),%r10        # b34 <_sk_store_a8_hsw_lowp+0xc8>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,20,4,19,0                // vpextrb       $0x0,%xmm8,(%r11,%rdx,1)
  .byte  235,207                             // jmp           a8c <_sk_store_a8_hsw_lowp+0x20>
  .byte  196,67,121,20,68,19,2,2             // vpextrb       $0x2,%xmm8,0x2(%r11,%rdx,1)
  .byte  196,67,121,21,4,19,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,1)
  .byte  235,190                             // jmp           a8c <_sk_store_a8_hsw_lowp+0x20>
  .byte  196,67,121,20,68,19,6,6             // vpextrb       $0x6,%xmm8,0x6(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,5,5             // vpextrb       $0x5,%xmm8,0x5(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,4,4             // vpextrb       $0x4,%xmm8,0x4(%r11,%rdx,1)
  .byte  196,65,121,126,4,19                 // vmovd         %xmm8,(%r11,%rdx,1)
  .byte  235,158                             // jmp           a8c <_sk_store_a8_hsw_lowp+0x20>
  .byte  196,67,121,20,68,19,10,10           // vpextrb       $0xa,%xmm8,0xa(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,9,9             // vpextrb       $0x9,%xmm8,0x9(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,8,8             // vpextrb       $0x8,%xmm8,0x8(%r11,%rdx,1)
  .byte  235,32                              // jmp           b28 <_sk_store_a8_hsw_lowp+0xbc>
  .byte  196,67,121,20,68,19,14,14           // vpextrb       $0xe,%xmm8,0xe(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,13,13           // vpextrb       $0xd,%xmm8,0xd(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,12,12           // vpextrb       $0xc,%xmm8,0xc(%r11,%rdx,1)
  .byte  196,67,121,22,68,19,8,2             // vpextrd       $0x2,%xmm8,0x8(%r11,%rdx,1)
  .byte  196,65,121,214,4,19                 // vmovq         %xmm8,(%r11,%rdx,1)
  .byte  233,89,255,255,255                  // jmpq          a8c <_sk_store_a8_hsw_lowp+0x20>
  .byte  144                                 // nop
  .byte  128,255,255                         // cmp           $0xff,%bh
  .byte  255,145,255,255,255,137             // callq         *-0x76000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,178,255,255,255,170             // pushq         -0x55000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,162,255,255,255,154             // jmpq          *-0x65000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,244                             // push          %rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  186,255,255,255,236                 // mov           $0xecffffff,%edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_hsw_lowp
.globl _sk_load_g8_hsw_lowp
FUNCTION(_sk_load_g8_hsw_lowp)
_sk_load_g8_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,50                              // jne           bac <_sk_load_g8_hsw_lowp+0x3c>
  .byte  196,193,122,111,4,19                // vmovdqu       (%r11,%rdx,1),%xmm0
  .byte  196,226,125,48,192                  // vpmovzxbw     %xmm0,%ymm0
  .byte  197,253,113,240,8                   // vpsllw        $0x8,%ymm0,%ymm0
  .byte  196,226,125,121,13,211,16,0,0       // vpbroadcastw  0x10d3(%rip),%ymm1        # 1c66 <_sk_xor__hsw_lowp+0x1e6>
  .byte  197,253,228,193                     // vpmulhuw      %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,121,29,198,16,0,0       // vpbroadcastw  0x10c6(%rip),%ymm3        # 1c68 <_sk_xor__hsw_lowp+0x1e8>
  .byte  197,253,111,200                     // vmovdqa       %ymm0,%ymm1
  .byte  197,253,111,208                     // vmovdqa       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  119,192                             // ja            b80 <_sk_load_g8_hsw_lowp+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,193,0,0,0                 // lea           0xc1(%rip),%r10        # c8c <_sk_load_g8_hsw_lowp+0x11c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,192                     // vmovd         %eax,%xmm0
  .byte  235,161                             // jmp           b80 <_sk_load_g8_hsw_lowp+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,195,121,32,68,19,2,2            // vpinsrb       $0x2,0x2(%r11,%rdx,1),%xmm0,%xmm0
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,227,121,14,193,1                // vpblendw      $0x1,%xmm1,%xmm0,%xmm0
  .byte  235,132                             // jmp           b80 <_sk_load_g8_hsw_lowp+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,195,121,32,68,19,6,6            // vpinsrb       $0x6,0x6(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,5,5            // vpinsrb       $0x5,0x5(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,4,4            // vpinsrb       $0x4,0x4(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,193,121,110,12,19               // vmovd         (%r11,%rdx,1),%xmm1
  .byte  196,227,121,2,193,1                 // vpblendd      $0x1,%xmm1,%xmm0,%xmm0
  .byte  233,87,255,255,255                  // jmpq          b80 <_sk_load_g8_hsw_lowp+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,195,121,32,68,19,10,10          // vpinsrb       $0xa,0xa(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,9,9            // vpinsrb       $0x9,0x9(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,8,8            // vpinsrb       $0x8,0x8(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,193,122,126,12,19               // vmovq         (%r11,%rdx,1),%xmm1
  .byte  196,227,113,2,192,12                // vpblendd      $0xc,%xmm0,%xmm1,%xmm0
  .byte  233,42,255,255,255                  // jmpq          b80 <_sk_load_g8_hsw_lowp+0x10>
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,195,121,32,68,19,14,14          // vpinsrb       $0xe,0xe(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,13,13          // vpinsrb       $0xd,0xd(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,195,121,32,68,19,12,12          // vpinsrb       $0xc,0xc(%r11,%rdx,1),%xmm0,%xmm0
  .byte  196,193,122,126,12,19               // vmovq         (%r11,%rdx,1),%xmm1
  .byte  196,195,113,34,76,19,8,2            // vpinsrd       $0x2,0x8(%r11,%rdx,1),%xmm1,%xmm1
  .byte  196,227,113,2,192,8                 // vpblendd      $0x8,%xmm0,%xmm1,%xmm0
  .byte  233,245,254,255,255                 // jmpq          b80 <_sk_load_g8_hsw_lowp+0x10>
  .byte  144                                 // nop
  .byte  72,255                              // rex.W         (bad)
  .byte  255                                 // (bad)
  .byte  255,95,255                          // lcall         *-0x1(%rdi)
  .byte  255                                 // (bad)
  .byte  255,83,255                          // callq         *-0x1(%rbx)
  .byte  255                                 // (bad)
  .byte  255,140,255,255,255,132,255         // decl          -0x7b0001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  124,255                             // jl            ca1 <_sk_load_g8_hsw_lowp+0x131>
  .byte  255                                 // (bad)
  .byte  255,112,255                         // pushq         -0x1(%rax)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  185,255,255,255,177                 // mov           $0xb1ffffff,%ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,169,255,255,255,157             // ljmp          *-0x62000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_dst_hsw_lowp
.globl _sk_load_g8_dst_hsw_lowp
FUNCTION(_sk_load_g8_dst_hsw_lowp)
_sk_load_g8_dst_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,50                              // jne           d04 <_sk_load_g8_dst_hsw_lowp+0x3c>
  .byte  196,193,122,111,36,19               // vmovdqu       (%r11,%rdx,1),%xmm4
  .byte  196,226,125,48,228                  // vpmovzxbw     %xmm4,%ymm4
  .byte  197,221,113,244,8                   // vpsllw        $0x8,%ymm4,%ymm4
  .byte  196,226,125,121,45,127,15,0,0       // vpbroadcastw  0xf7f(%rip),%ymm5        # 1c6a <_sk_xor__hsw_lowp+0x1ea>
  .byte  197,221,228,229                     // vpmulhuw      %ymm5,%ymm4,%ymm4
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,121,61,114,15,0,0       // vpbroadcastw  0xf72(%rip),%ymm7        # 1c6c <_sk_xor__hsw_lowp+0x1ec>
  .byte  197,253,111,236                     // vmovdqa       %ymm4,%ymm5
  .byte  197,253,111,244                     // vmovdqa       %ymm4,%ymm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  119,192                             // ja            cd8 <_sk_load_g8_dst_hsw_lowp+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,193,0,0,0                 // lea           0xc1(%rip),%r10        # de4 <_sk_load_g8_dst_hsw_lowp+0x11c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,110,224                     // vmovd         %eax,%xmm4
  .byte  235,161                             // jmp           cd8 <_sk_load_g8_dst_hsw_lowp+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,195,89,32,100,19,2,2            // vpinsrb       $0x2,0x2(%r11,%rdx,1),%xmm4,%xmm4
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,249,110,232                     // vmovd         %eax,%xmm5
  .byte  196,227,89,14,229,1                 // vpblendw      $0x1,%xmm5,%xmm4,%xmm4
  .byte  235,132                             // jmp           cd8 <_sk_load_g8_dst_hsw_lowp+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,195,89,32,100,19,6,6            // vpinsrb       $0x6,0x6(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,5,5            // vpinsrb       $0x5,0x5(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,4,4            // vpinsrb       $0x4,0x4(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,193,121,110,44,19               // vmovd         (%r11,%rdx,1),%xmm5
  .byte  196,227,89,2,229,1                  // vpblendd      $0x1,%xmm5,%xmm4,%xmm4
  .byte  233,87,255,255,255                  // jmpq          cd8 <_sk_load_g8_dst_hsw_lowp+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,195,89,32,100,19,10,10          // vpinsrb       $0xa,0xa(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,9,9            // vpinsrb       $0x9,0x9(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,8,8            // vpinsrb       $0x8,0x8(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,193,122,126,44,19               // vmovq         (%r11,%rdx,1),%xmm5
  .byte  196,227,81,2,228,12                 // vpblendd      $0xc,%xmm4,%xmm5,%xmm4
  .byte  233,42,255,255,255                  // jmpq          cd8 <_sk_load_g8_dst_hsw_lowp+0x10>
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  196,195,89,32,100,19,14,14          // vpinsrb       $0xe,0xe(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,13,13          // vpinsrb       $0xd,0xd(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,195,89,32,100,19,12,12          // vpinsrb       $0xc,0xc(%r11,%rdx,1),%xmm4,%xmm4
  .byte  196,193,122,126,44,19               // vmovq         (%r11,%rdx,1),%xmm5
  .byte  196,195,81,34,108,19,8,2            // vpinsrd       $0x2,0x8(%r11,%rdx,1),%xmm5,%xmm5
  .byte  196,227,81,2,228,8                  // vpblendd      $0x8,%xmm4,%xmm5,%xmm4
  .byte  233,245,254,255,255                 // jmpq          cd8 <_sk_load_g8_dst_hsw_lowp+0x10>
  .byte  144                                 // nop
  .byte  72,255                              // rex.W         (bad)
  .byte  255                                 // (bad)
  .byte  255,95,255                          // lcall         *-0x1(%rdi)
  .byte  255                                 // (bad)
  .byte  255,83,255                          // callq         *-0x1(%rbx)
  .byte  255                                 // (bad)
  .byte  255,140,255,255,255,132,255         // decl          -0x7b0001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  124,255                             // jl            df9 <_sk_load_g8_dst_hsw_lowp+0x131>
  .byte  255                                 // (bad)
  .byte  255,112,255                         // pushq         -0x1(%rax)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  185,255,255,255,177                 // mov           $0xb1ffffff,%ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,169,255,255,255,157             // ljmp          *-0x62000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_srcover_rgba_8888_hsw_lowp
.globl _sk_srcover_rgba_8888_hsw_lowp
FUNCTION(_sk_srcover_rgba_8888_hsw_lowp)
_sk_srcover_rgba_8888_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,220,1,0,0                    // jne           100a <_sk_srcover_rgba_8888_hsw_lowp+0x1ea>
  .byte  196,193,126,111,124,147,32          // vmovdqu       0x20(%r11,%rdx,4),%ymm7
  .byte  196,65,126,111,4,147                // vmovdqu       (%r11,%rdx,4),%ymm8
  .byte  197,253,111,37,61,14,0,0            // vmovdqa       0xe3d(%rip),%ymm4        # 1c80 <_sk_xor__hsw_lowp+0x200>
  .byte  196,226,61,0,236                    // vpshufb       %ymm4,%ymm8,%ymm5
  .byte  196,227,253,0,237,232               // vpermq        $0xe8,%ymm5,%ymm5
  .byte  196,226,69,0,228                    // vpshufb       %ymm4,%ymm7,%ymm4
  .byte  196,227,253,0,228,232               // vpermq        $0xe8,%ymm4,%ymm4
  .byte  196,227,85,56,228,1                 // vinserti128   $0x1,%xmm4,%ymm5,%ymm4
  .byte  196,98,125,121,13,56,14,0,0         // vpbroadcastw  0xe38(%rip),%ymm9        # 1ca0 <_sk_xor__hsw_lowp+0x220>
  .byte  197,221,113,244,8                   // vpsllw        $0x8,%ymm4,%ymm4
  .byte  196,98,125,121,21,44,14,0,0         // vpbroadcastw  0xe2c(%rip),%ymm10        # 1ca2 <_sk_xor__hsw_lowp+0x222>
  .byte  196,193,93,228,226                  // vpmulhuw      %ymm10,%ymm4,%ymm4
  .byte  197,253,111,45,61,14,0,0            // vmovdqa       0xe3d(%rip),%ymm5        # 1cc0 <_sk_xor__hsw_lowp+0x240>
  .byte  196,226,61,0,245                    // vpshufb       %ymm5,%ymm8,%ymm6
  .byte  196,227,253,0,246,232               // vpermq        $0xe8,%ymm6,%ymm6
  .byte  196,226,69,0,237                    // vpshufb       %ymm5,%ymm7,%ymm5
  .byte  196,227,253,0,237,232               // vpermq        $0xe8,%ymm5,%ymm5
  .byte  196,227,77,56,237,1                 // vinserti128   $0x1,%xmm5,%ymm6,%ymm5
  .byte  197,213,113,245,8                   // vpsllw        $0x8,%ymm5,%ymm5
  .byte  196,193,85,228,234                  // vpmulhuw      %ymm10,%ymm5,%ymm5
  .byte  197,253,111,53,47,14,0,0            // vmovdqa       0xe2f(%rip),%ymm6        # 1ce0 <_sk_xor__hsw_lowp+0x260>
  .byte  196,98,61,0,222                     // vpshufb       %ymm6,%ymm8,%ymm11
  .byte  196,67,253,0,219,232                // vpermq        $0xe8,%ymm11,%ymm11
  .byte  196,226,69,0,246                    // vpshufb       %ymm6,%ymm7,%ymm6
  .byte  196,227,253,0,246,232               // vpermq        $0xe8,%ymm6,%ymm6
  .byte  196,227,37,56,246,1                 // vinserti128   $0x1,%xmm6,%ymm11,%ymm6
  .byte  197,205,113,246,8                   // vpsllw        $0x8,%ymm6,%ymm6
  .byte  196,193,77,228,242                  // vpmulhuw      %ymm10,%ymm6,%ymm6
  .byte  197,125,111,29,33,14,0,0            // vmovdqa       0xe21(%rip),%ymm11        # 1d00 <_sk_xor__hsw_lowp+0x280>
  .byte  196,66,61,0,195                     // vpshufb       %ymm11,%ymm8,%ymm8
  .byte  196,67,253,0,192,232                // vpermq        $0xe8,%ymm8,%ymm8
  .byte  196,194,69,0,251                    // vpshufb       %ymm11,%ymm7,%ymm7
  .byte  196,227,253,0,255,232               // vpermq        $0xe8,%ymm7,%ymm7
  .byte  196,227,61,56,255,1                 // vinserti128   $0x1,%xmm7,%ymm8,%ymm7
  .byte  197,197,113,247,8                   // vpsllw        $0x8,%ymm7,%ymm7
  .byte  196,193,69,228,250                  // vpmulhuw      %ymm10,%ymm7,%ymm7
  .byte  196,98,125,121,5,18,14,0,0          // vpbroadcastw  0xe12(%rip),%ymm8        # 1d20 <_sk_xor__hsw_lowp+0x2a0>
  .byte  197,61,249,195                      // vpsubw        %ymm3,%ymm8,%ymm8
  .byte  196,66,93,11,208                    // vpmulhrsw     %ymm8,%ymm4,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,192                     // vpaddw        %ymm0,%ymm10,%ymm0
  .byte  196,66,85,11,208                    // vpmulhrsw     %ymm8,%ymm5,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,201                     // vpaddw        %ymm1,%ymm10,%ymm1
  .byte  196,66,77,11,208                    // vpmulhrsw     %ymm8,%ymm6,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,210                     // vpaddw        %ymm2,%ymm10,%ymm2
  .byte  196,66,69,11,192                    // vpmulhrsw     %ymm8,%ymm7,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  197,189,253,219                     // vpaddw        %ymm3,%ymm8,%ymm3
  .byte  197,189,113,208,7                   // vpsrlw        $0x7,%ymm0,%ymm8
  .byte  196,65,61,234,193                   // vpminsw       %ymm9,%ymm8,%ymm8
  .byte  196,66,125,51,208                   // vpmovzxwd     %xmm8,%ymm10
  .byte  196,67,125,57,192,1                 // vextracti128  $0x1,%ymm8,%xmm8
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  197,165,113,209,7                   // vpsrlw        $0x7,%ymm1,%ymm11
  .byte  196,65,37,234,217                   // vpminsw       %ymm9,%ymm11,%ymm11
  .byte  196,67,125,57,220,1                 // vextracti128  $0x1,%ymm11,%xmm12
  .byte  196,66,125,51,228                   // vpmovzxwd     %xmm12,%ymm12
  .byte  196,66,125,51,219                   // vpmovzxwd     %xmm11,%ymm11
  .byte  196,193,37,114,243,8                // vpslld        $0x8,%ymm11,%ymm11
  .byte  196,193,29,114,244,8                // vpslld        $0x8,%ymm12,%ymm12
  .byte  197,149,113,210,7                   // vpsrlw        $0x7,%ymm2,%ymm13
  .byte  196,65,21,234,233                   // vpminsw       %ymm9,%ymm13,%ymm13
  .byte  196,66,125,51,245                   // vpmovzxwd     %xmm13,%ymm14
  .byte  196,67,125,57,237,1                 // vextracti128  $0x1,%ymm13,%xmm13
  .byte  196,66,125,51,237                   // vpmovzxwd     %xmm13,%ymm13
  .byte  196,193,21,114,245,16               // vpslld        $0x10,%ymm13,%ymm13
  .byte  196,193,13,114,246,16               // vpslld        $0x10,%ymm14,%ymm14
  .byte  197,133,113,211,7                   // vpsrlw        $0x7,%ymm3,%ymm15
  .byte  196,65,5,234,201                    // vpminsw       %ymm9,%ymm15,%ymm9
  .byte  196,67,125,57,207,1                 // vextracti128  $0x1,%ymm9,%xmm15
  .byte  196,66,125,51,255                   // vpmovzxwd     %xmm15,%ymm15
  .byte  196,66,125,51,201                   // vpmovzxwd     %xmm9,%ymm9
  .byte  196,193,53,114,241,24               // vpslld        $0x18,%ymm9,%ymm9
  .byte  196,193,5,114,247,24                // vpslld        $0x18,%ymm15,%ymm15
  .byte  196,65,29,235,192                   // vpor          %ymm8,%ymm12,%ymm8
  .byte  196,65,37,235,218                   // vpor          %ymm10,%ymm11,%ymm11
  .byte  196,65,21,235,215                   // vpor          %ymm15,%ymm13,%ymm10
  .byte  196,65,61,235,210                   // vpor          %ymm10,%ymm8,%ymm10
  .byte  196,65,13,235,193                   // vpor          %ymm9,%ymm14,%ymm8
  .byte  196,65,37,235,192                   // vpor          %ymm8,%ymm11,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,77                              // jne           1046 <_sk_srcover_rgba_8888_hsw_lowp+0x226>
  .byte  196,65,126,127,4,147                // vmovdqu       %ymm8,(%r11,%rdx,4)
  .byte  196,65,126,127,84,147,32            // vmovdqu       %ymm10,0x20(%r11,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  197,197,239,255                     // vpxor         %ymm7,%ymm7,%ymm7
  .byte  196,65,61,239,192                   // vpxor         %ymm8,%ymm8,%ymm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  15,135,20,254,255,255               // ja            e3b <_sk_srcover_rgba_8888_hsw_lowp+0x1b>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,238,1,0,0                 // lea           0x1ee(%rip),%r10        # 1220 <_sk_srcover_rgba_8888_hsw_lowp+0x400>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,110,4,147                // vmovd         (%r11,%rdx,4),%xmm8
  .byte  233,245,253,255,255                 // jmpq          e3b <_sk_srcover_rgba_8888_hsw_lowp+0x1b>
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  119,176                             // ja            1006 <_sk_srcover_rgba_8888_hsw_lowp+0x1e6>
  .byte  65,15,182,193                       // movzbl        %r9b,%eax
  .byte  76,141,13,251,1,0,0                 // lea           0x1fb(%rip),%r9        # 125c <_sk_srcover_rgba_8888_hsw_lowp+0x43c>
  .byte  73,99,4,129                         // movslq        (%r9,%rax,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,126,4,147                // vmovd         %xmm8,(%r11,%rdx,4)
  .byte  235,148                             // jmp           1006 <_sk_srcover_rgba_8888_hsw_lowp+0x1e6>
  .byte  196,193,121,110,100,147,8           // vmovd         0x8(%r11,%rdx,4),%xmm4
  .byte  196,226,121,89,228                  // vpbroadcastq  %xmm4,%xmm4
  .byte  197,197,239,255                     // vpxor         %ymm7,%ymm7,%ymm7
  .byte  196,99,69,2,196,4                   // vpblendd      $0x4,%ymm4,%ymm7,%ymm8
  .byte  196,194,121,53,36,147               // vpmovzxdq     (%r11,%rdx,4),%xmm4
  .byte  197,249,112,228,232                 // vpshufd       $0xe8,%xmm4,%xmm4
  .byte  196,99,61,2,196,3                   // vpblendd      $0x3,%ymm4,%ymm8,%ymm8
  .byte  233,157,253,255,255                 // jmpq          e3b <_sk_srcover_rgba_8888_hsw_lowp+0x1b>
  .byte  196,193,121,110,100,147,24          // vmovd         0x18(%r11,%rdx,4),%xmm4
  .byte  196,226,125,89,228                  // vpbroadcastq  %xmm4,%ymm4
  .byte  197,197,239,255                     // vpxor         %ymm7,%ymm7,%ymm7
  .byte  196,99,69,2,196,64                  // vpblendd      $0x40,%ymm4,%ymm7,%ymm8
  .byte  196,99,125,57,196,1                 // vextracti128  $0x1,%ymm8,%xmm4
  .byte  196,195,89,34,100,147,20,1          // vpinsrd       $0x1,0x14(%r11,%rdx,4),%xmm4,%xmm4
  .byte  196,99,61,56,196,1                  // vinserti128   $0x1,%xmm4,%ymm8,%ymm8
  .byte  196,99,125,57,196,1                 // vextracti128  $0x1,%ymm8,%xmm4
  .byte  196,195,89,34,100,147,16,0          // vpinsrd       $0x0,0x10(%r11,%rdx,4),%xmm4,%xmm4
  .byte  196,99,61,56,196,1                  // vinserti128   $0x1,%xmm4,%ymm8,%ymm8
  .byte  196,193,122,111,36,147              // vmovdqu       (%r11,%rdx,4),%xmm4
  .byte  196,67,93,2,192,240                 // vpblendd      $0xf0,%ymm8,%ymm4,%ymm8
  .byte  233,78,253,255,255                  // jmpq          e3b <_sk_srcover_rgba_8888_hsw_lowp+0x1b>
  .byte  196,193,121,110,100,147,40          // vmovd         0x28(%r11,%rdx,4),%xmm4
  .byte  196,226,121,89,228                  // vpbroadcastq  %xmm4,%xmm4
  .byte  197,213,239,237                     // vpxor         %ymm5,%ymm5,%ymm5
  .byte  196,227,85,2,252,4                  // vpblendd      $0x4,%ymm4,%ymm5,%ymm7
  .byte  196,195,65,34,100,147,36,1          // vpinsrd       $0x1,0x24(%r11,%rdx,4),%xmm7,%xmm4
  .byte  196,227,69,2,252,15                 // vpblendd      $0xf,%ymm4,%ymm7,%ymm7
  .byte  196,193,121,110,100,147,32          // vmovd         0x20(%r11,%rdx,4),%xmm4
  .byte  196,227,69,2,252,1                  // vpblendd      $0x1,%ymm4,%ymm7,%ymm7
  .byte  233,18,253,255,255                  // jmpq          e35 <_sk_srcover_rgba_8888_hsw_lowp+0x15>
  .byte  196,193,121,110,100,147,56          // vmovd         0x38(%r11,%rdx,4),%xmm4
  .byte  196,226,125,89,228                  // vpbroadcastq  %xmm4,%ymm4
  .byte  197,213,239,237                     // vpxor         %ymm5,%ymm5,%ymm5
  .byte  196,227,85,2,252,64                 // vpblendd      $0x40,%ymm4,%ymm5,%ymm7
  .byte  196,227,125,57,252,1                // vextracti128  $0x1,%ymm7,%xmm4
  .byte  196,195,89,34,100,147,52,1          // vpinsrd       $0x1,0x34(%r11,%rdx,4),%xmm4,%xmm4
  .byte  196,227,69,56,252,1                 // vinserti128   $0x1,%xmm4,%ymm7,%ymm7
  .byte  196,227,125,57,252,1                // vextracti128  $0x1,%ymm7,%xmm4
  .byte  196,195,89,34,100,147,48,0          // vpinsrd       $0x0,0x30(%r11,%rdx,4),%xmm4,%xmm4
  .byte  196,227,69,56,252,1                 // vinserti128   $0x1,%xmm4,%ymm7,%ymm7
  .byte  196,65,126,111,4,147                // vmovdqu       (%r11,%rdx,4),%ymm8
  .byte  196,193,122,111,100,147,32          // vmovdqu       0x20(%r11,%rdx,4),%xmm4
  .byte  196,227,93,2,255,240                // vpblendd      $0xf0,%ymm7,%ymm4,%ymm7
  .byte  233,194,252,255,255                 // jmpq          e3b <_sk_srcover_rgba_8888_hsw_lowp+0x1b>
  .byte  196,67,121,22,68,147,8,2            // vpextrd       $0x2,%xmm8,0x8(%r11,%rdx,4)
  .byte  196,65,121,214,4,147                // vmovq         %xmm8,(%r11,%rdx,4)
  .byte  233,122,254,255,255                 // jmpq          1006 <_sk_srcover_rgba_8888_hsw_lowp+0x1e6>
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,67,121,22,76,147,24,2           // vpextrd       $0x2,%xmm9,0x18(%r11,%rdx,4)
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,67,121,22,76,147,20,1           // vpextrd       $0x1,%xmm9,0x14(%r11,%rdx,4)
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,65,121,126,76,147,16            // vmovd         %xmm9,0x10(%r11,%rdx,4)
  .byte  196,65,122,127,4,147                // vmovdqu       %xmm8,(%r11,%rdx,4)
  .byte  233,70,254,255,255                  // jmpq          1006 <_sk_srcover_rgba_8888_hsw_lowp+0x1e6>
  .byte  196,67,121,22,84,147,40,2           // vpextrd       $0x2,%xmm10,0x28(%r11,%rdx,4)
  .byte  196,67,121,22,84,147,36,1           // vpextrd       $0x1,%xmm10,0x24(%r11,%rdx,4)
  .byte  196,65,121,126,84,147,32            // vmovd         %xmm10,0x20(%r11,%rdx,4)
  .byte  196,65,126,127,4,147                // vmovdqu       %ymm8,(%r11,%rdx,4)
  .byte  233,36,254,255,255                  // jmpq          1006 <_sk_srcover_rgba_8888_hsw_lowp+0x1e6>
  .byte  196,67,125,57,209,1                 // vextracti128  $0x1,%ymm10,%xmm9
  .byte  196,67,121,22,76,147,56,2           // vpextrd       $0x2,%xmm9,0x38(%r11,%rdx,4)
  .byte  196,67,125,57,209,1                 // vextracti128  $0x1,%ymm10,%xmm9
  .byte  196,67,121,22,76,147,52,1           // vpextrd       $0x1,%xmm9,0x34(%r11,%rdx,4)
  .byte  196,67,125,57,209,1                 // vextracti128  $0x1,%ymm10,%xmm9
  .byte  196,65,121,126,76,147,48            // vmovd         %xmm9,0x30(%r11,%rdx,4)
  .byte  196,65,126,127,4,147                // vmovdqu       %ymm8,(%r11,%rdx,4)
  .byte  196,65,122,127,84,147,32            // vmovdqu       %xmm10,0x20(%r11,%rdx,4)
  .byte  233,233,253,255,255                 // jmpq          1006 <_sk_srcover_rgba_8888_hsw_lowp+0x1e6>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  27,254                              // sbb           %esi,%edi
  .byte  255                                 // (bad)
  .byte  255,104,254                         // ljmp          *-0x2(%rax)
  .byte  255                                 // (bad)
  .byte  255,82,254                          // callq         *-0x2(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  188,254,255,255,168                 // mov           $0xa8fffffe,%esp
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,148,254,255,255,126,254         // callq         *-0x1810001(%rsi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255,21,252,255,255,241              // callq         *-0xe000004(%rip)        # fffffffff200123d <_sk_xor__hsw_lowp+0xfffffffff1fff7bd>
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,227                             // jmpq          *%rbx
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,65,255                          // incl          -0x1(%rcx)
  .byte  255                                 // (bad)
  .byte  255,45,255,255,255,25               // ljmp          *0x19ffffff(%rip)        # 1a001254 <_sk_xor__hsw_lowp+0x19fff7d4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,37,255,255,255,29               // jmpq          *0x1dffffff(%rip)        # 1e001264 <_sk_xor__hsw_lowp+0x1dfff7e4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,89,255                          // lcall         *-0x1(%rcx)
  .byte  255                                 // (bad)
  .byte  255,76,255,255                      // decl          -0x1(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  62,255                              // ds            (bad)
  .byte  255                                 // (bad)
  .byte  255,48                              // pushq         (%rax)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  123,255                             // jnp           1279 <_sk_srcover_rgba_8888_hsw_lowp+0x459>
  .byte  255                                 // (bad)
  .byte  255,116,255,255                     // pushq         -0x1(%rdi,%rdi,8)
  .byte  255,108,255,255                     // ljmp          *-0x1(%rdi,%rdi,8)
  .byte  255,100,255,255                     // jmpq          *-0x1(%rdi,%rdi,8)
  .byte  255,175,255,255,255,162             // ljmp          *-0x5d000001(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,148,255,255,255,134,255         // callq         *-0x790001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_scale_1_float_hsw_lowp
.globl _sk_scale_1_float_hsw_lowp
FUNCTION(_sk_scale_1_float_hsw_lowp)
_sk_scale_1_float_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,122,16,0                        // vmovss        (%rax),%xmm8
  .byte  197,58,88,5,90,8,0,0                // vaddss        0x85a(%rip),%xmm8,%xmm8        # 1b00 <_sk_xor__hsw_lowp+0x80>
  .byte  197,121,126,192                     // vmovd         %xmm8,%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,121,192                  // vpbroadcastw  %xmm8,%ymm8
  .byte  196,194,125,11,192                  // vpmulhrsw     %ymm8,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,194,117,11,200                  // vpmulhrsw     %ymm8,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,194,109,11,208                  // vpmulhrsw     %ymm8,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,194,101,11,216                  // vpmulhrsw     %ymm8,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_hsw_lowp
.globl _sk_scale_u8_hsw_lowp
FUNCTION(_sk_scale_u8_hsw_lowp)
_sk_scale_u8_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,75                              // jne           1334 <_sk_scale_u8_hsw_lowp+0x55>
  .byte  196,65,122,111,4,19                 // vmovdqu       (%r11,%rdx,1),%xmm8
  .byte  196,66,125,48,192                   // vpmovzxbw     %xmm8,%ymm8
  .byte  196,193,61,113,240,8                // vpsllw        $0x8,%ymm8,%ymm8
  .byte  196,98,125,121,13,31,10,0,0         // vpbroadcastw  0xa1f(%rip),%ymm9        # 1d22 <_sk_xor__hsw_lowp+0x2a2>
  .byte  196,65,61,228,193                   // vpmulhuw      %ymm9,%ymm8,%ymm8
  .byte  196,194,125,11,192                  // vpmulhrsw     %ymm8,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,194,117,11,200                  // vpmulhrsw     %ymm8,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,194,109,11,208                  // vpmulhrsw     %ymm8,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,194,101,11,216                  // vpmulhrsw     %ymm8,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  119,166                             // ja            12ef <_sk_scale_u8_hsw_lowp+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,200,0,0,0                 // lea           0xc8(%rip),%r10        # 141c <_sk_scale_u8_hsw_lowp+0x13d>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  235,135                             // jmp           12ef <_sk_scale_u8_hsw_lowp+0x10>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,67,57,32,68,19,2,2              // vpinsrb       $0x2,0x2(%r11,%rdx,1),%xmm8,%xmm8
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,121,110,200                     // vmovd         %eax,%xmm9
  .byte  196,67,57,14,193,1                  // vpblendw      $0x1,%xmm9,%xmm8,%xmm8
  .byte  233,102,255,255,255                 // jmpq          12ef <_sk_scale_u8_hsw_lowp+0x10>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,67,57,32,68,19,6,6              // vpinsrb       $0x6,0x6(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,5,5              // vpinsrb       $0x5,0x5(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,4,4              // vpinsrb       $0x4,0x4(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,65,121,110,12,19                // vmovd         (%r11,%rdx,1),%xmm9
  .byte  196,67,57,2,193,1                   // vpblendd      $0x1,%xmm9,%xmm8,%xmm8
  .byte  233,56,255,255,255                  // jmpq          12ef <_sk_scale_u8_hsw_lowp+0x10>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,67,57,32,68,19,10,10            // vpinsrb       $0xa,0xa(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,9,9              // vpinsrb       $0x9,0x9(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,8,8              // vpinsrb       $0x8,0x8(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,65,122,126,12,19                // vmovq         (%r11,%rdx,1),%xmm9
  .byte  196,67,49,2,192,12                  // vpblendd      $0xc,%xmm8,%xmm9,%xmm8
  .byte  233,10,255,255,255                  // jmpq          12ef <_sk_scale_u8_hsw_lowp+0x10>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,67,57,32,68,19,14,14            // vpinsrb       $0xe,0xe(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,13,13            // vpinsrb       $0xd,0xd(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,12,12            // vpinsrb       $0xc,0xc(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,65,122,126,12,19                // vmovq         (%r11,%rdx,1),%xmm9
  .byte  196,67,49,34,76,19,8,2              // vpinsrd       $0x2,0x8(%r11,%rdx,1),%xmm9,%xmm9
  .byte  196,67,49,2,192,8                   // vpblendd      $0x8,%xmm8,%xmm9,%xmm8
  .byte  233,212,254,255,255                 // jmpq          12ef <_sk_scale_u8_hsw_lowp+0x10>
  .byte  144                                 // nop
  .byte  65,255                              // rex.B         (bad)
  .byte  255                                 // (bad)
  .byte  255,89,255                          // lcall         *-0x1(%rcx)
  .byte  255                                 // (bad)
  .byte  255,76,255,255                      // decl          -0x1(%rdi,%rdi,8)
  .byte  255,138,255,255,255,130             // decl          -0x7d000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  122,255                             // jp            1431 <_sk_scale_u8_hsw_lowp+0x152>
  .byte  255                                 // (bad)
  .byte  255,109,255                         // ljmp          *-0x1(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  184,255,255,255,176                 // mov           $0xb0ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,168,255,255,255,155             // ljmp          *-0x64000001(%rax)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_1_float_hsw_lowp
.globl _sk_lerp_1_float_hsw_lowp
FUNCTION(_sk_lerp_1_float_hsw_lowp)
_sk_lerp_1_float_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,122,16,0                        // vmovss        (%rax),%xmm8
  .byte  197,58,88,5,158,6,0,0               // vaddss        0x69e(%rip),%xmm8,%xmm8        # 1b04 <_sk_xor__hsw_lowp+0x84>
  .byte  197,121,126,192                     // vmovd         %xmm8,%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,121,192                  // vpbroadcastw  %xmm8,%ymm8
  .byte  196,194,125,11,192                  // vpmulhrsw     %ymm8,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,98,125,121,13,158,8,0,0         // vpbroadcastw  0x89e(%rip),%ymm9        # 1d24 <_sk_xor__hsw_lowp+0x2a4>
  .byte  196,65,53,249,200                   // vpsubw        %ymm8,%ymm9,%ymm9
  .byte  196,66,93,11,209                    // vpmulhrsw     %ymm9,%ymm4,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,192                     // vpaddw        %ymm0,%ymm10,%ymm0
  .byte  196,194,117,11,200                  // vpmulhrsw     %ymm8,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,66,85,11,209                    // vpmulhrsw     %ymm9,%ymm5,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,201                     // vpaddw        %ymm1,%ymm10,%ymm1
  .byte  196,194,109,11,208                  // vpmulhrsw     %ymm8,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,66,77,11,209                    // vpmulhrsw     %ymm9,%ymm6,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,210                     // vpaddw        %ymm2,%ymm10,%ymm2
  .byte  196,194,101,11,216                  // vpmulhrsw     %ymm8,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  196,66,69,11,193                    // vpmulhrsw     %ymm9,%ymm7,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  197,189,253,219                     // vpaddw        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_hsw_lowp
.globl _sk_lerp_u8_hsw_lowp
FUNCTION(_sk_lerp_u8_hsw_lowp)
_sk_lerp_u8_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,145,0,0,0                    // jne           1584 <_sk_lerp_u8_hsw_lowp+0x9f>
  .byte  196,65,122,111,4,19                 // vmovdqu       (%r11,%rdx,1),%xmm8
  .byte  196,66,125,48,192                   // vpmovzxbw     %xmm8,%ymm8
  .byte  196,193,61,113,240,8                // vpsllw        $0x8,%ymm8,%ymm8
  .byte  196,98,125,121,13,25,8,0,0          // vpbroadcastw  0x819(%rip),%ymm9        # 1d26 <_sk_xor__hsw_lowp+0x2a6>
  .byte  196,65,61,228,193                   // vpmulhuw      %ymm9,%ymm8,%ymm8
  .byte  196,194,125,11,192                  // vpmulhrsw     %ymm8,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,98,125,121,13,3,8,0,0           // vpbroadcastw  0x803(%rip),%ymm9        # 1d28 <_sk_xor__hsw_lowp+0x2a8>
  .byte  196,65,53,249,200                   // vpsubw        %ymm8,%ymm9,%ymm9
  .byte  196,66,93,11,209                    // vpmulhrsw     %ymm9,%ymm4,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,192                     // vpaddw        %ymm0,%ymm10,%ymm0
  .byte  196,194,117,11,200                  // vpmulhrsw     %ymm8,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,66,85,11,209                    // vpmulhrsw     %ymm9,%ymm5,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,201                     // vpaddw        %ymm1,%ymm10,%ymm1
  .byte  196,194,109,11,208                  // vpmulhrsw     %ymm8,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,66,77,11,209                    // vpmulhrsw     %ymm9,%ymm6,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,210                     // vpaddw        %ymm2,%ymm10,%ymm2
  .byte  196,194,101,11,216                  // vpmulhrsw     %ymm8,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  196,66,69,11,193                    // vpmulhrsw     %ymm9,%ymm7,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  197,189,253,219                     // vpaddw        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,15                       // and           $0xf,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,14                       // cmp           $0xe,%r9b
  .byte  15,135,92,255,255,255               // ja            14f9 <_sk_lerp_u8_hsw_lowp+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,204,0,0,0                 // lea           0xcc(%rip),%r10        # 1674 <_sk_lerp_u8_hsw_lowp+0x18f>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  233,58,255,255,255                  // jmpq          14f9 <_sk_lerp_u8_hsw_lowp+0x14>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,67,57,32,68,19,2,2              // vpinsrb       $0x2,0x2(%r11,%rdx,1),%xmm8,%xmm8
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  197,121,110,200                     // vmovd         %eax,%xmm9
  .byte  196,67,57,14,193,1                  // vpblendw      $0x1,%xmm9,%xmm8,%xmm8
  .byte  233,25,255,255,255                  // jmpq          14f9 <_sk_lerp_u8_hsw_lowp+0x14>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,67,57,32,68,19,6,6              // vpinsrb       $0x6,0x6(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,5,5              // vpinsrb       $0x5,0x5(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,4,4              // vpinsrb       $0x4,0x4(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,65,121,110,12,19                // vmovd         (%r11,%rdx,1),%xmm9
  .byte  196,67,57,2,193,1                   // vpblendd      $0x1,%xmm9,%xmm8,%xmm8
  .byte  233,235,254,255,255                 // jmpq          14f9 <_sk_lerp_u8_hsw_lowp+0x14>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,67,57,32,68,19,10,10            // vpinsrb       $0xa,0xa(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,9,9              // vpinsrb       $0x9,0x9(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,8,8              // vpinsrb       $0x8,0x8(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,65,122,126,12,19                // vmovq         (%r11,%rdx,1),%xmm9
  .byte  196,67,49,2,192,12                  // vpblendd      $0xc,%xmm8,%xmm9,%xmm8
  .byte  233,189,254,255,255                 // jmpq          14f9 <_sk_lerp_u8_hsw_lowp+0x14>
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,67,57,32,68,19,14,14            // vpinsrb       $0xe,0xe(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,13,13            // vpinsrb       $0xd,0xd(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,67,57,32,68,19,12,12            // vpinsrb       $0xc,0xc(%r11,%rdx,1),%xmm8,%xmm8
  .byte  196,65,122,126,12,19                // vmovq         (%r11,%rdx,1),%xmm9
  .byte  196,67,49,34,76,19,8,2              // vpinsrd       $0x2,0x8(%r11,%rdx,1),%xmm9,%xmm9
  .byte  196,67,49,2,192,8                   // vpblendd      $0x8,%xmm8,%xmm9,%xmm8
  .byte  233,135,254,255,255                 // jmpq          14f9 <_sk_lerp_u8_hsw_lowp+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  61,255,255,255,88                   // cmp           $0x58ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,75,255                          // decl          -0x1(%rbx)
  .byte  255                                 // (bad)
  .byte  255,137,255,255,255,129             // decl          -0x7e000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  121,255                             // jns           1689 <_sk_lerp_u8_hsw_lowp+0x1a4>
  .byte  255                                 // (bad)
  .byte  255,108,255,255                     // ljmp          *-0x1(%rdi,%rdi,8)
  .byte  255,183,255,255,255,175             // pushq         -0x50000001(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,167,255,255,255,154             // jmpq          *-0x65000001(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,200                             // dec           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_swap_rb_hsw_lowp
.globl _sk_swap_rb_hsw_lowp
FUNCTION(_sk_swap_rb_hsw_lowp)
_sk_swap_rb_hsw_lowp:
  .byte  197,124,40,192                      // vmovaps       %ymm0,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,194                      // vmovaps       %ymm2,%ymm0
  .byte  197,124,41,194                      // vmovaps       %ymm8,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_dst_hsw_lowp
.globl _sk_swap_rb_dst_hsw_lowp
FUNCTION(_sk_swap_rb_dst_hsw_lowp)
_sk_swap_rb_dst_hsw_lowp:
  .byte  197,124,40,196                      // vmovaps       %ymm4,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,230                      // vmovaps       %ymm6,%ymm4
  .byte  197,124,41,198                      // vmovaps       %ymm8,%ymm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_hsw_lowp
.globl _sk_move_src_dst_hsw_lowp
FUNCTION(_sk_move_src_dst_hsw_lowp)
_sk_move_src_dst_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,242                      // vmovaps       %ymm2,%ymm6
  .byte  197,252,40,251                      // vmovaps       %ymm3,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_hsw_lowp
.globl _sk_move_dst_src_hsw_lowp
FUNCTION(_sk_move_dst_src_hsw_lowp)
_sk_move_dst_src_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_hsw_lowp
.globl _sk_clear_hsw_lowp
FUNCTION(_sk_clear_hsw_lowp)
_sk_clear_hsw_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_hsw_lowp
.globl _sk_srcatop_hsw_lowp
FUNCTION(_sk_srcatop_hsw_lowp)
_sk_srcatop_hsw_lowp:
  .byte  196,226,125,11,199                  // vpmulhrsw     %ymm7,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,98,125,121,5,11,6,0,0           // vpbroadcastw  0x60b(%rip),%ymm8        # 1d2a <_sk_xor__hsw_lowp+0x2aa>
  .byte  197,61,249,195                      // vpsubw        %ymm3,%ymm8,%ymm8
  .byte  196,66,93,11,200                    // vpmulhrsw     %ymm8,%ymm4,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,192                     // vpaddw        %ymm0,%ymm9,%ymm0
  .byte  196,226,117,11,207                  // vpmulhrsw     %ymm7,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,66,85,11,200                    // vpmulhrsw     %ymm8,%ymm5,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,201                     // vpaddw        %ymm1,%ymm9,%ymm1
  .byte  196,226,109,11,215                  // vpmulhrsw     %ymm7,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,66,77,11,200                    // vpmulhrsw     %ymm8,%ymm6,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,210                     // vpaddw        %ymm2,%ymm9,%ymm2
  .byte  196,226,101,11,223                  // vpmulhrsw     %ymm7,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  196,66,69,11,192                    // vpmulhrsw     %ymm8,%ymm7,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  197,189,253,219                     // vpaddw        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_hsw_lowp
.globl _sk_dstatop_hsw_lowp
FUNCTION(_sk_dstatop_hsw_lowp)
_sk_dstatop_hsw_lowp:
  .byte  196,98,93,11,195                    // vpmulhrsw     %ymm3,%ymm4,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  196,98,125,121,13,156,5,0,0         // vpbroadcastw  0x59c(%rip),%ymm9        # 1d2c <_sk_xor__hsw_lowp+0x2ac>
  .byte  197,53,249,207                      // vpsubw        %ymm7,%ymm9,%ymm9
  .byte  196,194,125,11,193                  // vpmulhrsw     %ymm9,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,193,125,253,192                 // vpaddw        %ymm8,%ymm0,%ymm0
  .byte  196,98,85,11,195                    // vpmulhrsw     %ymm3,%ymm5,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  196,194,117,11,201                  // vpmulhrsw     %ymm9,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,193,117,253,200                 // vpaddw        %ymm8,%ymm1,%ymm1
  .byte  196,98,77,11,195                    // vpmulhrsw     %ymm3,%ymm6,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  196,194,109,11,209                  // vpmulhrsw     %ymm9,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,193,109,253,208                 // vpaddw        %ymm8,%ymm2,%ymm2
  .byte  196,98,69,11,195                    // vpmulhrsw     %ymm3,%ymm7,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  196,194,101,11,217                  // vpmulhrsw     %ymm9,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  196,193,101,253,216                 // vpaddw        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_hsw_lowp
.globl _sk_srcin_hsw_lowp
FUNCTION(_sk_srcin_hsw_lowp)
_sk_srcin_hsw_lowp:
  .byte  196,226,125,11,199                  // vpmulhrsw     %ymm7,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,226,117,11,207                  // vpmulhrsw     %ymm7,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,226,109,11,215                  // vpmulhrsw     %ymm7,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,226,101,11,223                  // vpmulhrsw     %ymm7,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_hsw_lowp
.globl _sk_dstin_hsw_lowp
FUNCTION(_sk_dstin_hsw_lowp)
_sk_dstin_hsw_lowp:
  .byte  196,226,93,11,195                   // vpmulhrsw     %ymm3,%ymm4,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,226,85,11,203                   // vpmulhrsw     %ymm3,%ymm5,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,226,77,11,211                   // vpmulhrsw     %ymm3,%ymm6,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,226,69,11,219                   // vpmulhrsw     %ymm3,%ymm7,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_hsw_lowp
.globl _sk_srcout_hsw_lowp
FUNCTION(_sk_srcout_hsw_lowp)
_sk_srcout_hsw_lowp:
  .byte  196,98,125,121,5,219,4,0,0          // vpbroadcastw  0x4db(%rip),%ymm8        # 1d2e <_sk_xor__hsw_lowp+0x2ae>
  .byte  197,61,249,199                      // vpsubw        %ymm7,%ymm8,%ymm8
  .byte  196,194,125,11,192                  // vpmulhrsw     %ymm8,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,194,117,11,200                  // vpmulhrsw     %ymm8,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,194,109,11,208                  // vpmulhrsw     %ymm8,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,194,101,11,216                  // vpmulhrsw     %ymm8,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_hsw_lowp
.globl _sk_dstout_hsw_lowp
FUNCTION(_sk_dstout_hsw_lowp)
_sk_dstout_hsw_lowp:
  .byte  196,226,125,121,5,164,4,0,0         // vpbroadcastw  0x4a4(%rip),%ymm0        # 1d30 <_sk_xor__hsw_lowp+0x2b0>
  .byte  197,253,249,219                     // vpsubw        %ymm3,%ymm0,%ymm3
  .byte  196,226,93,11,195                   // vpmulhrsw     %ymm3,%ymm4,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,226,85,11,203                   // vpmulhrsw     %ymm3,%ymm5,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,226,77,11,211                   // vpmulhrsw     %ymm3,%ymm6,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,226,69,11,219                   // vpmulhrsw     %ymm3,%ymm7,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_hsw_lowp
.globl _sk_srcover_hsw_lowp
FUNCTION(_sk_srcover_hsw_lowp)
_sk_srcover_hsw_lowp:
  .byte  196,98,125,121,5,109,4,0,0          // vpbroadcastw  0x46d(%rip),%ymm8        # 1d32 <_sk_xor__hsw_lowp+0x2b2>
  .byte  197,61,249,195                      // vpsubw        %ymm3,%ymm8,%ymm8
  .byte  196,66,93,11,200                    // vpmulhrsw     %ymm8,%ymm4,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,192                     // vpaddw        %ymm0,%ymm9,%ymm0
  .byte  196,66,85,11,200                    // vpmulhrsw     %ymm8,%ymm5,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,201                     // vpaddw        %ymm1,%ymm9,%ymm1
  .byte  196,66,77,11,200                    // vpmulhrsw     %ymm8,%ymm6,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,210                     // vpaddw        %ymm2,%ymm9,%ymm2
  .byte  196,66,69,11,192                    // vpmulhrsw     %ymm8,%ymm7,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  197,189,253,219                     // vpaddw        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_hsw_lowp
.globl _sk_dstover_hsw_lowp
FUNCTION(_sk_dstover_hsw_lowp)
_sk_dstover_hsw_lowp:
  .byte  196,98,125,121,5,38,4,0,0           // vpbroadcastw  0x426(%rip),%ymm8        # 1d34 <_sk_xor__hsw_lowp+0x2b4>
  .byte  197,61,249,199                      // vpsubw        %ymm7,%ymm8,%ymm8
  .byte  196,194,125,11,192                  // vpmulhrsw     %ymm8,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  197,253,253,196                     // vpaddw        %ymm4,%ymm0,%ymm0
  .byte  196,194,117,11,200                  // vpmulhrsw     %ymm8,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  197,245,253,205                     // vpaddw        %ymm5,%ymm1,%ymm1
  .byte  196,194,109,11,208                  // vpmulhrsw     %ymm8,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  197,237,253,214                     // vpaddw        %ymm6,%ymm2,%ymm2
  .byte  196,194,101,11,216                  // vpmulhrsw     %ymm8,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  197,229,253,223                     // vpaddw        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_hsw_lowp
.globl _sk_modulate_hsw_lowp
FUNCTION(_sk_modulate_hsw_lowp)
_sk_modulate_hsw_lowp:
  .byte  196,226,125,11,196                  // vpmulhrsw     %ymm4,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  196,226,117,11,205                  // vpmulhrsw     %ymm5,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,226,109,11,214                  // vpmulhrsw     %ymm6,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,226,101,11,223                  // vpmulhrsw     %ymm7,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_hsw_lowp
.globl _sk_multiply_hsw_lowp
FUNCTION(_sk_multiply_hsw_lowp)
_sk_multiply_hsw_lowp:
  .byte  196,98,125,121,5,179,3,0,0          // vpbroadcastw  0x3b3(%rip),%ymm8        # 1d36 <_sk_xor__hsw_lowp+0x2b6>
  .byte  197,61,249,207                      // vpsubw        %ymm7,%ymm8,%ymm9
  .byte  196,66,125,11,209                   // vpmulhrsw     %ymm9,%ymm0,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,61,249,195                      // vpsubw        %ymm3,%ymm8,%ymm8
  .byte  196,66,93,11,216                    // vpmulhrsw     %ymm8,%ymm4,%ymm11
  .byte  196,66,125,29,219                   // vpabsw        %ymm11,%ymm11
  .byte  196,65,37,253,210                   // vpaddw        %ymm10,%ymm11,%ymm10
  .byte  196,226,125,11,196                  // vpmulhrsw     %ymm4,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  197,173,253,192                     // vpaddw        %ymm0,%ymm10,%ymm0
  .byte  196,66,117,11,209                   // vpmulhrsw     %ymm9,%ymm1,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  196,66,85,11,216                    // vpmulhrsw     %ymm8,%ymm5,%ymm11
  .byte  196,66,125,29,219                   // vpabsw        %ymm11,%ymm11
  .byte  196,65,37,253,210                   // vpaddw        %ymm10,%ymm11,%ymm10
  .byte  196,226,117,11,205                  // vpmulhrsw     %ymm5,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  197,173,253,201                     // vpaddw        %ymm1,%ymm10,%ymm1
  .byte  196,66,109,11,209                   // vpmulhrsw     %ymm9,%ymm2,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  196,66,77,11,216                    // vpmulhrsw     %ymm8,%ymm6,%ymm11
  .byte  196,66,125,29,219                   // vpabsw        %ymm11,%ymm11
  .byte  196,65,37,253,210                   // vpaddw        %ymm10,%ymm11,%ymm10
  .byte  196,226,109,11,214                  // vpmulhrsw     %ymm6,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  197,173,253,210                     // vpaddw        %ymm2,%ymm10,%ymm2
  .byte  196,66,101,11,201                   // vpmulhrsw     %ymm9,%ymm3,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  196,66,69,11,192                    // vpmulhrsw     %ymm8,%ymm7,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  196,65,61,253,193                   // vpaddw        %ymm9,%ymm8,%ymm8
  .byte  196,226,101,11,223                  // vpmulhrsw     %ymm7,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  197,189,253,219                     // vpaddw        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_hsw_lowp
.globl _sk_screen_hsw_lowp
FUNCTION(_sk_screen_hsw_lowp)
_sk_screen_hsw_lowp:
  .byte  196,98,125,121,5,4,3,0,0            // vpbroadcastw  0x304(%rip),%ymm8        # 1d38 <_sk_xor__hsw_lowp+0x2b8>
  .byte  197,61,249,200                      // vpsubw        %ymm0,%ymm8,%ymm9
  .byte  196,98,53,11,204                    // vpmulhrsw     %ymm4,%ymm9,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,192                     // vpaddw        %ymm0,%ymm9,%ymm0
  .byte  197,61,249,201                      // vpsubw        %ymm1,%ymm8,%ymm9
  .byte  196,98,53,11,205                    // vpmulhrsw     %ymm5,%ymm9,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,201                     // vpaddw        %ymm1,%ymm9,%ymm1
  .byte  197,61,249,202                      // vpsubw        %ymm2,%ymm8,%ymm9
  .byte  196,98,53,11,206                    // vpmulhrsw     %ymm6,%ymm9,%ymm9
  .byte  196,66,125,29,201                   // vpabsw        %ymm9,%ymm9
  .byte  197,181,253,210                     // vpaddw        %ymm2,%ymm9,%ymm2
  .byte  197,61,249,195                      // vpsubw        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,11,199                    // vpmulhrsw     %ymm7,%ymm8,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  197,189,253,219                     // vpaddw        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__hsw_lowp
.globl _sk_xor__hsw_lowp
FUNCTION(_sk_xor__hsw_lowp)
_sk_xor__hsw_lowp:
  .byte  196,98,125,121,5,177,2,0,0          // vpbroadcastw  0x2b1(%rip),%ymm8        # 1d3a <_sk_xor__hsw_lowp+0x2ba>
  .byte  197,61,249,207                      // vpsubw        %ymm7,%ymm8,%ymm9
  .byte  196,194,125,11,193                  // vpmulhrsw     %ymm9,%ymm0,%ymm0
  .byte  196,226,125,29,192                  // vpabsw        %ymm0,%ymm0
  .byte  197,61,249,195                      // vpsubw        %ymm3,%ymm8,%ymm8
  .byte  196,66,93,11,208                    // vpmulhrsw     %ymm8,%ymm4,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,192                     // vpaddw        %ymm0,%ymm10,%ymm0
  .byte  196,194,117,11,201                  // vpmulhrsw     %ymm9,%ymm1,%ymm1
  .byte  196,226,125,29,201                  // vpabsw        %ymm1,%ymm1
  .byte  196,66,85,11,208                    // vpmulhrsw     %ymm8,%ymm5,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,201                     // vpaddw        %ymm1,%ymm10,%ymm1
  .byte  196,194,109,11,209                  // vpmulhrsw     %ymm9,%ymm2,%ymm2
  .byte  196,226,125,29,210                  // vpabsw        %ymm2,%ymm2
  .byte  196,66,77,11,208                    // vpmulhrsw     %ymm8,%ymm6,%ymm10
  .byte  196,66,125,29,210                   // vpabsw        %ymm10,%ymm10
  .byte  197,173,253,210                     // vpaddw        %ymm2,%ymm10,%ymm2
  .byte  196,194,101,11,217                  // vpmulhrsw     %ymm9,%ymm3,%ymm3
  .byte  196,226,125,29,219                  // vpabsw        %ymm3,%ymm3
  .byte  196,66,69,11,192                    // vpmulhrsw     %ymm8,%ymm7,%ymm8
  .byte  196,66,125,29,192                   // vpabsw        %ymm8,%ymm8
  .byte  197,189,253,219                     // vpaddw        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128                                 // .byte         0x80
  .byte  67                                  // rex.XB

BALIGN32
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  4,5                                 // add           $0x5,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  128,128,128,128,128,128,128         // addb          $0x80,-0x7f7f7f80(%rax)
  .byte  128,0,1                             // addb          $0x1,(%rax)
  .byte  4,5                                 // add           $0x5,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  128,128,128,128,128,128,128         // addb          $0x80,-0x7f7f7f80(%rax)
  .byte  128,129,128,0,0,0,0                 // addb          $0x0,0x80(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,2                                 // add           %eax,(%rdx)
  .byte  5,6,9,10,13                         // add           $0xd0a0906,%eax
  .byte  14                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,17                              // callq         *(%rcx)
  .byte  18,21,22,25,26,29                   // adc           0x1d1a1916(%rip),%dl        # 1d1a348d <_sk_xor__hsw_lowp+0x1d1a1a0d>
  .byte  30                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,2                               // incl          (%rdx)
  .byte  3,6                                 // add           (%rsi),%eax
  .byte  7                                   // (bad)
  .byte  10,11                               // or            (%rbx),%cl
  .byte  14                                  // (bad)
  .byte  15,255                              // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  19,22                               // adc           (%rsi),%edx
  .byte  23                                  // (bad)
  .byte  26,27                               // sbb           (%rbx),%bl
  .byte  30                                  // (bad)
  .byte  31                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255,7                               // incl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,19                              // callq         *(%rbx)
  .byte  255,23                              // callq         *(%rdi)
  .byte  255,27                              // lcall         *(%rbx)
  .byte  255,31                              // lcall         *(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  1,4,5,8,9,12,13                     // add           %eax,0xd0c0908(,%rax,1)
  .byte  128,128,128,128,128,128,128         // addb          $0x80,-0x7f7f7f80(%rax)
  .byte  128,0,1                             // addb          $0x1,(%rax)
  .byte  4,5                                 // add           $0x5,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  128,128,128,128,128,128,128         // addb          $0x80,-0x7f7f7f80(%rax)
  .byte  128,129,128,0,0,0,0                 // addb          $0x0,0x80(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,2                                 // add           %eax,(%rdx)
  .byte  5,6,9,10,13                         // add           $0xd0a0906,%eax
  .byte  14                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,17                              // callq         *(%rcx)
  .byte  18,21,22,25,26,29                   // adc           0x1d1a1916(%rip),%dl        # 1d1a352d <_sk_xor__hsw_lowp+0x1d1a1aad>
  .byte  30                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,2                               // incl          (%rdx)
  .byte  3,6                                 // add           (%rsi),%eax
  .byte  7                                   // (bad)
  .byte  10,11                               // or            (%rbx),%cl
  .byte  14                                  // (bad)
  .byte  15,255                              // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  19,22                               // adc           (%rsi),%edx
  .byte  23                                  // (bad)
  .byte  26,27                               // sbb           (%rbx),%bl
  .byte  30                                  // (bad)
  .byte  31                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255,7                               // incl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,19                              // callq         *(%rbx)
  .byte  255,23                              // callq         *(%rdi)
  .byte  255,27                              // lcall         *(%rbx)
  .byte  255,31                              // lcall         *(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  129,128,129,128,129,128,0,128,129,128// addl          $0x80818000,-0x7f7e7f7f(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  4,5                                 // add           $0x5,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  128,128,128,128,128,128,128         // addb          $0x80,-0x7f7f7f80(%rax)
  .byte  128,0,1                             // addb          $0x1,(%rax)
  .byte  4,5                                 // add           $0x5,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  128,128,128,128,128,128,128         // addb          $0x80,-0x7f7f7f80(%rax)
  .byte  128,255,0                           // cmp           $0x0,%bh
  .byte  129,128,0,0,0,0,0,0,0,0             // addl          $0x0,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,2                                 // add           %eax,(%rdx)
  .byte  5,6,9,10,13                         // add           $0xd0a0906,%eax
  .byte  14                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,17                              // callq         *(%rcx)
  .byte  18,21,22,25,26,29                   // adc           0x1d1a1916(%rip),%dl        # 1d1a35ed <_sk_xor__hsw_lowp+0x1d1a1b6d>
  .byte  30                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,2                               // incl          (%rdx)
  .byte  3,6                                 // add           (%rsi),%eax
  .byte  7                                   // (bad)
  .byte  10,11                               // or            (%rbx),%cl
  .byte  14                                  // (bad)
  .byte  15,255                              // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  19,22                               // adc           (%rsi),%edx
  .byte  23                                  // (bad)
  .byte  26,27                               // sbb           (%rbx),%bl
  .byte  30                                  // (bad)
  .byte  31                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255,7                               // incl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,19                              // callq         *(%rbx)
  .byte  255,23                              // callq         *(%rdi)
  .byte  255,27                              // lcall         *(%rbx)
  .byte  255,31                              // lcall         *(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  128,129,128,0,128,129,128           // addb          $0x80,-0x7e7fff80(%rcx)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0                                   // .byte         0x0
  .byte  128                                 // .byte         0x80
BALIGN32

HIDDEN _sk_start_pipeline_ssse3_lowp
.globl _sk_start_pipeline_ssse3_lowp
FUNCTION(_sk_start_pipeline_ssse3_lowp)
_sk_start_pipeline_ssse3_lowp:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  77,137,196                          // mov           %r8,%r12
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  72,137,243                          // mov           %rsi,%rbx
  .byte  73,137,254                          // mov           %rdi,%r14
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,197                          // mov           %rax,%r13
  .byte  73,141,78,8                         // lea           0x8(%r14),%rcx
  .byte  76,57,249                           // cmp           %r15,%rcx
  .byte  118,5                               // jbe           30 <_sk_start_pipeline_ssse3_lowp+0x30>
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  235,45                              // jmp           5d <_sk_start_pipeline_ssse3_lowp+0x5d>
  .byte  76,137,125,208                      // mov           %r15,-0x30(%rbp)
  .byte  69,49,192                           // xor           %r8d,%r8d
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  72,137,217                          // mov           %rbx,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,139,125,208                      // mov           -0x30(%rbp),%r15
  .byte  73,141,86,8                         // lea           0x8(%r14),%rdx
  .byte  73,131,198,16                       // add           $0x10,%r14
  .byte  77,57,254                           // cmp           %r15,%r14
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  118,215                             // jbe           34 <_sk_start_pipeline_ssse3_lowp+0x34>
  .byte  77,137,248                          // mov           %r15,%r8
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,9                               // je            6e <_sk_start_pipeline_ssse3_lowp+0x6e>
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  72,137,217                          // mov           %rbx,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,137,248                          // mov           %r15,%rax
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  195                                 // retq

HIDDEN _sk_just_return_ssse3_lowp
.globl _sk_just_return_ssse3_lowp
FUNCTION(_sk_just_return_ssse3_lowp)
_sk_just_return_ssse3_lowp:
  .byte  195                                 // retq

HIDDEN _sk_constant_color_ssse3_lowp
.globl _sk_constant_color_ssse3_lowp
FUNCTION(_sk_constant_color_ssse3_lowp)
_sk_constant_color_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,24                            // movups        (%rax),%xmm3
  .byte  15,88,29,115,21,0,0                 // addps         0x1573(%rip),%xmm3        # 1600 <_sk_xor__ssse3_lowp+0xa8>
  .byte  242,15,112,195,0                    // pshuflw       $0x0,%xmm3,%xmm0
  .byte  102,15,112,192,80                   // pshufd        $0x50,%xmm0,%xmm0
  .byte  242,15,112,203,170                  // pshuflw       $0xaa,%xmm3,%xmm1
  .byte  102,15,112,201,80                   // pshufd        $0x50,%xmm1,%xmm1
  .byte  243,15,112,211,0                    // pshufhw       $0x0,%xmm3,%xmm2
  .byte  102,15,112,210,250                  // pshufd        $0xfa,%xmm2,%xmm2
  .byte  243,15,112,219,170                  // pshufhw       $0xaa,%xmm3,%xmm3
  .byte  102,15,112,219,250                  // pshufd        $0xfa,%xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_ssse3_lowp
.globl _sk_set_rgb_ssse3_lowp
FUNCTION(_sk_set_rgb_ssse3_lowp)
_sk_set_rgb_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,21,189,23,0,0             // movss         0x17bd(%rip),%xmm2        # 1880 <_sk_xor__ssse3_lowp+0x328>
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,88,194                       // addss         %xmm2,%xmm0
  .byte  102,65,15,126,193                   // movd          %xmm0,%r9d
  .byte  102,65,15,110,193                   // movd          %r9d,%xmm0
  .byte  242,15,112,192,0                    // pshuflw       $0x0,%xmm0,%xmm0
  .byte  102,15,112,192,80                   // pshufd        $0x50,%xmm0,%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  243,15,88,202                       // addss         %xmm2,%xmm1
  .byte  102,65,15,126,201                   // movd          %xmm1,%r9d
  .byte  102,65,15,110,201                   // movd          %r9d,%xmm1
  .byte  242,15,112,201,0                    // pshuflw       $0x0,%xmm1,%xmm1
  .byte  102,15,112,201,80                   // pshufd        $0x50,%xmm1,%xmm1
  .byte  243,15,88,80,8                      // addss         0x8(%rax),%xmm2
  .byte  102,15,126,208                      // movd          %xmm2,%eax
  .byte  102,15,110,208                      // movd          %eax,%xmm2
  .byte  242,15,112,210,0                    // pshuflw       $0x0,%xmm2,%xmm2
  .byte  102,15,112,210,80                   // pshufd        $0x50,%xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_ssse3_lowp
.globl _sk_premul_ssse3_lowp
FUNCTION(_sk_premul_ssse3_lowp)
_sk_premul_ssse3_lowp:
  .byte  102,15,56,11,195                    // pmulhrsw      %xmm3,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,56,11,203                    // pmulhrsw      %xmm3,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,56,11,211                    // pmulhrsw      %xmm3,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_8888_ssse3_lowp
.globl _sk_load_8888_ssse3_lowp
FUNCTION(_sk_load_8888_ssse3_lowp)
_sk_load_8888_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,191,0,0,0                    // jne           206 <_sk_load_8888_ssse3_lowp+0xcd>
  .byte  69,15,16,68,147,16                  // movups        0x10(%r11,%rdx,4),%xmm8
  .byte  102,65,15,16,28,147                 // movupd        (%r11,%rdx,4),%xmm3
  .byte  102,15,111,13,181,20,0,0            // movdqa        0x14b5(%rip),%xmm1        # 1610 <_sk_xor__ssse3_lowp+0xb8>
  .byte  102,15,40,195                       // movapd        %xmm3,%xmm0
  .byte  102,15,56,0,193                     // pshufb        %xmm1,%xmm0
  .byte  102,65,15,111,208                   // movdqa        %xmm8,%xmm2
  .byte  102,15,56,0,209                     // pshufb        %xmm1,%xmm2
  .byte  102,15,108,194                      // punpcklqdq    %xmm2,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,68,15,111,13,160,20,0,0         // movdqa        0x14a0(%rip),%xmm9        # 1620 <_sk_xor__ssse3_lowp+0xc8>
  .byte  102,65,15,228,193                   // pmulhuw       %xmm9,%xmm0
  .byte  102,68,15,111,21,162,20,0,0         // movdqa        0x14a2(%rip),%xmm10        # 1630 <_sk_xor__ssse3_lowp+0xd8>
  .byte  102,15,40,203                       // movapd        %xmm3,%xmm1
  .byte  102,65,15,56,0,202                  // pshufb        %xmm10,%xmm1
  .byte  102,65,15,111,208                   // movdqa        %xmm8,%xmm2
  .byte  102,65,15,56,0,210                  // pshufb        %xmm10,%xmm2
  .byte  102,15,108,202                      // punpcklqdq    %xmm2,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,65,15,228,201                   // pmulhuw       %xmm9,%xmm1
  .byte  102,68,15,111,21,134,20,0,0         // movdqa        0x1486(%rip),%xmm10        # 1640 <_sk_xor__ssse3_lowp+0xe8>
  .byte  102,15,40,211                       // movapd        %xmm3,%xmm2
  .byte  102,65,15,56,0,210                  // pshufb        %xmm10,%xmm2
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,56,0,218                  // pshufb        %xmm10,%xmm11
  .byte  102,65,15,108,211                   // punpcklqdq    %xmm11,%xmm2
  .byte  102,15,113,242,8                    // psllw         $0x8,%xmm2
  .byte  102,65,15,228,209                   // pmulhuw       %xmm9,%xmm2
  .byte  102,68,15,111,21,105,20,0,0         // movdqa        0x1469(%rip),%xmm10        # 1650 <_sk_xor__ssse3_lowp+0xf8>
  .byte  102,65,15,56,0,218                  // pshufb        %xmm10,%xmm3
  .byte  102,69,15,56,0,194                  // pshufb        %xmm10,%xmm8
  .byte  102,65,15,108,216                   // punpcklqdq    %xmm8,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,65,15,228,217                   // pmulhuw       %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,48,255,255,255               // ja            153 <_sk_load_8888_ssse3_lowp+0x1a>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,94,0,0,0                  // lea           0x5e(%rip),%r10        # 28c <_sk_load_8888_ssse3_lowp+0x153>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  243,65,15,16,28,147                 // movss         (%r11,%rdx,4),%xmm3
  .byte  233,17,255,255,255                  // jmpq          153 <_sk_load_8888_ssse3_lowp+0x1a>
  .byte  102,65,15,110,68,147,8              // movd          0x8(%r11,%rdx,4),%xmm0
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  102,65,15,18,28,147                 // movlpd        (%r11,%rdx,4),%xmm3
  .byte  233,250,254,255,255                 // jmpq          153 <_sk_load_8888_ssse3_lowp+0x1a>
  .byte  102,65,15,110,68,147,24             // movd          0x18(%r11,%rdx,4),%xmm0
  .byte  102,68,15,112,192,69                // pshufd        $0x45,%xmm0,%xmm8
  .byte  243,65,15,16,68,147,20              // movss         0x14(%r11,%rdx,4),%xmm0
  .byte  65,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm0
  .byte  65,15,198,192,226                   // shufps        $0xe2,%xmm8,%xmm0
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  243,65,15,16,68,147,16              // movss         0x10(%r11,%rdx,4),%xmm0
  .byte  243,68,15,16,192                    // movss         %xmm0,%xmm8
  .byte  233,193,254,255,255                 // jmpq          14d <_sk_load_8888_ssse3_lowp+0x14>
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,182,255,255,255,193             // pushq         -0x3e000001(%rsi)
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  239                                 // out           %eax,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  218,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_8888_dst_ssse3_lowp
.globl _sk_load_8888_dst_ssse3_lowp
FUNCTION(_sk_load_8888_dst_ssse3_lowp)
_sk_load_8888_dst_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,191,0,0,0                    // jne           375 <_sk_load_8888_dst_ssse3_lowp+0xcd>
  .byte  69,15,16,68,147,16                  // movups        0x10(%r11,%rdx,4),%xmm8
  .byte  102,65,15,16,60,147                 // movupd        (%r11,%rdx,4),%xmm7
  .byte  102,15,111,45,150,19,0,0            // movdqa        0x1396(%rip),%xmm5        # 1660 <_sk_xor__ssse3_lowp+0x108>
  .byte  102,15,40,231                       // movapd        %xmm7,%xmm4
  .byte  102,15,56,0,229                     // pshufb        %xmm5,%xmm4
  .byte  102,65,15,111,240                   // movdqa        %xmm8,%xmm6
  .byte  102,15,56,0,245                     // pshufb        %xmm5,%xmm6
  .byte  102,15,108,230                      // punpcklqdq    %xmm6,%xmm4
  .byte  102,15,113,244,8                    // psllw         $0x8,%xmm4
  .byte  102,68,15,111,13,129,19,0,0         // movdqa        0x1381(%rip),%xmm9        # 1670 <_sk_xor__ssse3_lowp+0x118>
  .byte  102,65,15,228,225                   // pmulhuw       %xmm9,%xmm4
  .byte  102,68,15,111,21,131,19,0,0         // movdqa        0x1383(%rip),%xmm10        # 1680 <_sk_xor__ssse3_lowp+0x128>
  .byte  102,15,40,239                       // movapd        %xmm7,%xmm5
  .byte  102,65,15,56,0,234                  // pshufb        %xmm10,%xmm5
  .byte  102,65,15,111,240                   // movdqa        %xmm8,%xmm6
  .byte  102,65,15,56,0,242                  // pshufb        %xmm10,%xmm6
  .byte  102,15,108,238                      // punpcklqdq    %xmm6,%xmm5
  .byte  102,15,113,245,8                    // psllw         $0x8,%xmm5
  .byte  102,65,15,228,233                   // pmulhuw       %xmm9,%xmm5
  .byte  102,68,15,111,21,103,19,0,0         // movdqa        0x1367(%rip),%xmm10        # 1690 <_sk_xor__ssse3_lowp+0x138>
  .byte  102,15,40,247                       // movapd        %xmm7,%xmm6
  .byte  102,65,15,56,0,242                  // pshufb        %xmm10,%xmm6
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,56,0,218                  // pshufb        %xmm10,%xmm11
  .byte  102,65,15,108,243                   // punpcklqdq    %xmm11,%xmm6
  .byte  102,15,113,246,8                    // psllw         $0x8,%xmm6
  .byte  102,65,15,228,241                   // pmulhuw       %xmm9,%xmm6
  .byte  102,68,15,111,21,74,19,0,0          // movdqa        0x134a(%rip),%xmm10        # 16a0 <_sk_xor__ssse3_lowp+0x148>
  .byte  102,65,15,56,0,250                  // pshufb        %xmm10,%xmm7
  .byte  102,69,15,56,0,194                  // pshufb        %xmm10,%xmm8
  .byte  102,65,15,108,248                   // punpcklqdq    %xmm8,%xmm7
  .byte  102,15,113,247,8                    // psllw         $0x8,%xmm7
  .byte  102,65,15,228,249                   // pmulhuw       %xmm9,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,48,255,255,255               // ja            2c2 <_sk_load_8888_dst_ssse3_lowp+0x1a>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,95,0,0,0                  // lea           0x5f(%rip),%r10        # 3fc <_sk_load_8888_dst_ssse3_lowp+0x154>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  243,65,15,16,60,147                 // movss         (%r11,%rdx,4),%xmm7
  .byte  233,17,255,255,255                  // jmpq          2c2 <_sk_load_8888_dst_ssse3_lowp+0x1a>
  .byte  102,65,15,110,100,147,8             // movd          0x8(%r11,%rdx,4),%xmm4
  .byte  102,15,112,252,69                   // pshufd        $0x45,%xmm4,%xmm7
  .byte  102,65,15,18,60,147                 // movlpd        (%r11,%rdx,4),%xmm7
  .byte  233,250,254,255,255                 // jmpq          2c2 <_sk_load_8888_dst_ssse3_lowp+0x1a>
  .byte  102,65,15,110,100,147,24            // movd          0x18(%r11,%rdx,4),%xmm4
  .byte  102,68,15,112,196,69                // pshufd        $0x45,%xmm4,%xmm8
  .byte  243,65,15,16,100,147,20             // movss         0x14(%r11,%rdx,4),%xmm4
  .byte  65,15,198,224,0                     // shufps        $0x0,%xmm8,%xmm4
  .byte  65,15,198,224,226                   // shufps        $0xe2,%xmm8,%xmm4
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  243,65,15,16,100,147,16             // movss         0x10(%r11,%rdx,4),%xmm4
  .byte  243,68,15,16,196                    // movss         %xmm4,%xmm8
  .byte  233,193,254,255,255                 // jmpq          2bc <_sk_load_8888_dst_ssse3_lowp+0x14>
  .byte  144                                 // nop
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,193                             // inc           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,181,255,255,255,192             // pushq         -0x3f000001(%rbp)
  .byte  254                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  217,255                             // fcos
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_8888_ssse3_lowp
.globl _sk_store_8888_ssse3_lowp
FUNCTION(_sk_store_8888_ssse3_lowp)
_sk_store_8888_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  102,68,15,111,192                   // movdqa        %xmm0,%xmm8
  .byte  102,65,15,113,208,7                 // psrlw         $0x7,%xmm8
  .byte  102,68,15,111,21,127,18,0,0         // movdqa        0x127f(%rip),%xmm10        # 16b0 <_sk_xor__ssse3_lowp+0x158>
  .byte  102,69,15,234,194                   // pminsw        %xmm10,%xmm8
  .byte  102,69,15,239,219                   // pxor          %xmm11,%xmm11
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,235                    // punpcklwd     %xmm11,%xmm13
  .byte  102,69,15,105,195                   // punpckhwd     %xmm11,%xmm8
  .byte  102,68,15,111,201                   // movdqa        %xmm1,%xmm9
  .byte  102,65,15,113,209,7                 // psrlw         $0x7,%xmm9
  .byte  102,69,15,234,202                   // pminsw        %xmm10,%xmm9
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,69,15,105,227                   // punpckhwd     %xmm11,%xmm12
  .byte  102,69,15,97,203                    // punpcklwd     %xmm11,%xmm9
  .byte  102,65,15,114,241,8                 // pslld         $0x8,%xmm9
  .byte  102,65,15,114,244,8                 // pslld         $0x8,%xmm12
  .byte  102,69,15,235,224                   // por           %xmm8,%xmm12
  .byte  102,69,15,235,205                   // por           %xmm13,%xmm9
  .byte  102,68,15,111,234                   // movdqa        %xmm2,%xmm13
  .byte  102,65,15,113,213,7                 // psrlw         $0x7,%xmm13
  .byte  102,69,15,234,234                   // pminsw        %xmm10,%xmm13
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,69,15,97,243                    // punpcklwd     %xmm11,%xmm14
  .byte  102,69,15,105,235                   // punpckhwd     %xmm11,%xmm13
  .byte  102,65,15,114,245,16                // pslld         $0x10,%xmm13
  .byte  102,65,15,114,246,16                // pslld         $0x10,%xmm14
  .byte  102,68,15,111,195                   // movdqa        %xmm3,%xmm8
  .byte  102,65,15,113,208,7                 // psrlw         $0x7,%xmm8
  .byte  102,69,15,234,194                   // pminsw        %xmm10,%xmm8
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,69,15,105,211                   // punpckhwd     %xmm11,%xmm10
  .byte  102,69,15,97,195                    // punpcklwd     %xmm11,%xmm8
  .byte  102,65,15,114,240,24                // pslld         $0x18,%xmm8
  .byte  102,65,15,114,242,24                // pslld         $0x18,%xmm10
  .byte  102,69,15,235,213                   // por           %xmm13,%xmm10
  .byte  102,69,15,235,212                   // por           %xmm12,%xmm10
  .byte  102,69,15,235,198                   // por           %xmm14,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,17                              // jne           4ff <_sk_store_8888_ssse3_lowp+0xe7>
  .byte  243,69,15,127,4,147                 // movdqu        %xmm8,(%r11,%rdx,4)
  .byte  243,69,15,127,84,147,16             // movdqu        %xmm10,0x10(%r11,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            4fb <_sk_store_8888_ssse3_lowp+0xe3>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,82,0,0,0                  // lea           0x52(%rip),%r10        # 56c <_sk_store_8888_ssse3_lowp+0x154>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,126,4,147                 // movd          %xmm8,(%r11,%rdx,4)
  .byte  235,208                             // jmp           4fb <_sk_store_8888_ssse3_lowp+0xe3>
  .byte  102,69,15,112,200,78                // pshufd        $0x4e,%xmm8,%xmm9
  .byte  102,69,15,126,76,147,8              // movd          %xmm9,0x8(%r11,%rdx,4)
  .byte  102,69,15,214,4,147                 // movq          %xmm8,(%r11,%rdx,4)
  .byte  235,187                             // jmp           4fb <_sk_store_8888_ssse3_lowp+0xe3>
  .byte  102,69,15,112,202,78                // pshufd        $0x4e,%xmm10,%xmm9
  .byte  102,69,15,126,76,147,24             // movd          %xmm9,0x18(%r11,%rdx,4)
  .byte  102,69,15,112,202,229               // pshufd        $0xe5,%xmm10,%xmm9
  .byte  102,69,15,126,76,147,20             // movd          %xmm9,0x14(%r11,%rdx,4)
  .byte  102,69,15,126,84,147,16             // movd          %xmm10,0x10(%r11,%rdx,4)
  .byte  243,69,15,127,4,147                 // movdqu        %xmm8,(%r11,%rdx,4)
  .byte  235,146                             // jmp           4fb <_sk_store_8888_ssse3_lowp+0xe3>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  183,255                             // mov           $0xff,%bh
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  191,255,255,255,245                 // mov           $0xf5ffffff,%edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,225                             // jmpq          *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_a8_ssse3_lowp
.globl _sk_load_a8_ssse3_lowp
FUNCTION(_sk_load_a8_ssse3_lowp)
_sk_load_a8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,37                              // jne           5b7 <_sk_load_a8_ssse3_lowp+0x2f>
  .byte  243,65,15,126,28,19                 // movq          (%r11,%rdx,1),%xmm3
  .byte  102,15,96,216                       // punpcklbw     %xmm0,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,228,29,23,17,0,0             // pmulhuw       0x1117(%rip),%xmm3        # 16c0 <_sk_xor__ssse3_lowp+0x168>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,15,87,192                       // xorpd         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,209                             // ja            59c <_sk_load_a8_ssse3_lowp+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,110,0,0,0                 // lea           0x6e(%rip),%r10        # 644 <_sk_load_a8_ssse3_lowp+0xbc>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,15,110,216                      // movd          %eax,%xmm3
  .byte  235,178                             // jmp           59c <_sk_load_a8_ssse3_lowp+0x14>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,196,216,2                    // pinsrw        $0x2,%eax,%xmm3
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  243,15,16,216                       // movss         %xmm0,%xmm3
  .byte  235,144                             // jmp           59c <_sk_load_a8_ssse3_lowp+0x14>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,196,216,6                    // pinsrw        $0x6,%eax,%xmm3
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,15,196,216,5                    // pinsrw        $0x5,%eax,%xmm3
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,15,196,216,4                    // pinsrw        $0x4,%eax,%xmm3
  .byte  102,65,15,110,4,19                  // movd          (%r11,%rdx,1),%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  242,15,16,216                       // movsd         %xmm0,%xmm3
  .byte  233,88,255,255,255                  // jmpq          59c <_sk_load_a8_ssse3_lowp+0x14>
  .byte  155                                 // fwait
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,181,255,255,255,166             // pushq         -0x59000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,226                             // jmpq          *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,215                             // callq         *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,200                             // dec           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_a8_dst_ssse3_lowp
.globl _sk_load_a8_dst_ssse3_lowp
FUNCTION(_sk_load_a8_dst_ssse3_lowp)
_sk_load_a8_dst_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,37                              // jne           68f <_sk_load_a8_dst_ssse3_lowp+0x2f>
  .byte  243,65,15,126,60,19                 // movq          (%r11,%rdx,1),%xmm7
  .byte  102,15,96,248                       // punpcklbw     %xmm0,%xmm7
  .byte  102,15,113,247,8                    // psllw         $0x8,%xmm7
  .byte  102,15,228,61,79,16,0,0             // pmulhuw       0x104f(%rip),%xmm7        # 16d0 <_sk_xor__ssse3_lowp+0x178>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,15,87,228                       // xorpd         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,209                             // ja            674 <_sk_load_a8_dst_ssse3_lowp+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,110,0,0,0                 // lea           0x6e(%rip),%r10        # 71c <_sk_load_a8_dst_ssse3_lowp+0xbc>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,15,110,248                      // movd          %eax,%xmm7
  .byte  235,178                             // jmp           674 <_sk_load_a8_dst_ssse3_lowp+0x14>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  102,15,196,248,2                    // pinsrw        $0x2,%eax,%xmm7
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  243,15,16,252                       // movss         %xmm4,%xmm7
  .byte  235,144                             // jmp           674 <_sk_load_a8_dst_ssse3_lowp+0x14>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  102,15,196,248,6                    // pinsrw        $0x6,%eax,%xmm7
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,15,196,248,5                    // pinsrw        $0x5,%eax,%xmm7
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,15,196,248,4                    // pinsrw        $0x4,%eax,%xmm7
  .byte  102,65,15,110,36,19                 // movd          (%r11,%rdx,1),%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  242,15,16,252                       // movsd         %xmm4,%xmm7
  .byte  233,88,255,255,255                  // jmpq          674 <_sk_load_a8_dst_ssse3_lowp+0x14>
  .byte  155                                 // fwait
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,181,255,255,255,166             // pushq         -0x59000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,226                             // jmpq          *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,215                             // callq         *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,200                             // dec           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_a8_ssse3_lowp
.globl _sk_store_a8_ssse3_lowp
FUNCTION(_sk_store_a8_ssse3_lowp)
_sk_store_a8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  102,68,15,111,195                   // movdqa        %xmm3,%xmm8
  .byte  102,65,15,113,208,7                 // psrlw         $0x7,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           75c <_sk_store_a8_ssse3_lowp+0x24>
  .byte  242,69,15,17,4,19                   // movsd         %xmm8,(%r11,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            758 <_sk_store_a8_ssse3_lowp+0x20>
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,136,0,0,0                 // lea           0x88(%rip),%r10        # 804 <_sk_store_a8_ssse3_lowp+0xcc>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,127,68,36,168             // movdqa        %xmm8,-0x58(%rsp)
  .byte  138,68,36,168                       // mov           -0x58(%rsp),%al
  .byte  65,136,4,19                         // mov           %al,(%r11,%rdx,1)
  .byte  235,194                             // jmp           758 <_sk_store_a8_ssse3_lowp+0x20>
  .byte  102,68,15,127,68,36,184             // movdqa        %xmm8,-0x48(%rsp)
  .byte  138,68,36,188                       // mov           -0x44(%rsp),%al
  .byte  65,136,68,19,2                      // mov           %al,0x2(%r11,%rdx,1)
  .byte  102,68,15,56,0,5,64,15,0,0          // pshufb        0xf40(%rip),%xmm8        # 16f0 <_sk_xor__ssse3_lowp+0x198>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,65,137,4,19                     // mov           %ax,(%r11,%rdx,1)
  .byte  235,156                             // jmp           758 <_sk_store_a8_ssse3_lowp+0x20>
  .byte  102,68,15,127,68,36,232             // movdqa        %xmm8,-0x18(%rsp)
  .byte  138,68,36,244                       // mov           -0xc(%rsp),%al
  .byte  65,136,68,19,6                      // mov           %al,0x6(%r11,%rdx,1)
  .byte  102,68,15,127,68,36,216             // movdqa        %xmm8,-0x28(%rsp)
  .byte  138,68,36,226                       // mov           -0x1e(%rsp),%al
  .byte  65,136,68,19,5                      // mov           %al,0x5(%r11,%rdx,1)
  .byte  102,68,15,127,68,36,200             // movdqa        %xmm8,-0x38(%rsp)
  .byte  138,68,36,208                       // mov           -0x30(%rsp),%al
  .byte  65,136,68,19,4                      // mov           %al,0x4(%r11,%rdx,1)
  .byte  102,68,15,56,0,5,234,14,0,0         // pshufb        0xeea(%rip),%xmm8        # 16e0 <_sk_xor__ssse3_lowp+0x188>
  .byte  102,69,15,126,4,19                  // movd          %xmm8,(%r11,%rdx,1)
  .byte  233,87,255,255,255                  // jmpq          758 <_sk_store_a8_ssse3_lowp+0x20>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  129,255,255,255,162,255             // cmp           $0xffa2ffff,%edi
  .byte  255                                 // (bad)
  .byte  255,146,255,255,255,232             // callq         *-0x17000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  216,255                             // fdivr         %st(7),%st
  .byte  255                                 // (bad)
  .byte  255,200                             // dec           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  184                                 // .byte         0xb8
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_ssse3_lowp
.globl _sk_load_g8_ssse3_lowp
FUNCTION(_sk_load_g8_ssse3_lowp)
_sk_load_g8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,42                              // jne           854 <_sk_load_g8_ssse3_lowp+0x34>
  .byte  243,65,15,126,4,19                  // movq          (%r11,%rdx,1),%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,228,5,191,14,0,0             // pmulhuw       0xebf(%rip),%xmm0        # 1700 <_sk_xor__ssse3_lowp+0x1a8>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,198,14,0,0                 // movaps        0xec6(%rip),%xmm3        # 1710 <_sk_xor__ssse3_lowp+0x1b8>
  .byte  102,15,111,200                      // movdqa        %xmm0,%xmm1
  .byte  102,15,111,208                      // movdqa        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,204                             // ja            834 <_sk_load_g8_ssse3_lowp+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,113,0,0,0                 // lea           0x71(%rip),%r10        # 8e4 <_sk_load_g8_ssse3_lowp+0xc4>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  235,173                             // jmp           834 <_sk_load_g8_ssse3_lowp+0x14>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,196,192,2                    // pinsrw        $0x2,%eax,%xmm0
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  102,15,96,200                       // punpcklbw     %xmm0,%xmm1
  .byte  243,15,16,193                       // movss         %xmm1,%xmm0
  .byte  235,139                             // jmp           834 <_sk_load_g8_ssse3_lowp+0x14>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,196,192,6                    // pinsrw        $0x6,%eax,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,15,196,192,5                    // pinsrw        $0x5,%eax,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,15,196,192,4                    // pinsrw        $0x4,%eax,%xmm0
  .byte  102,65,15,110,12,19                 // movd          (%r11,%rdx,1),%xmm1
  .byte  102,15,96,200                       // punpcklbw     %xmm0,%xmm1
  .byte  242,15,16,193                       // movsd         %xmm1,%xmm0
  .byte  233,83,255,255,255                  // jmpq          834 <_sk_load_g8_ssse3_lowp+0x14>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  152                                 // cwtl
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,178,255,255,255,163             // pushq         -0x5c000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_dst_ssse3_lowp
.globl _sk_load_g8_dst_ssse3_lowp
FUNCTION(_sk_load_g8_dst_ssse3_lowp)
_sk_load_g8_dst_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,42                              // jne           934 <_sk_load_g8_dst_ssse3_lowp+0x34>
  .byte  243,65,15,126,36,19                 // movq          (%r11,%rdx,1),%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  102,15,113,244,8                    // psllw         $0x8,%xmm4
  .byte  102,15,228,37,255,13,0,0            // pmulhuw       0xdff(%rip),%xmm4        # 1720 <_sk_xor__ssse3_lowp+0x1c8>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,61,6,14,0,0                   // movaps        0xe06(%rip),%xmm7        # 1730 <_sk_xor__ssse3_lowp+0x1d8>
  .byte  102,15,111,236                      // movdqa        %xmm4,%xmm5
  .byte  102,15,111,244                      // movdqa        %xmm4,%xmm6
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,204                             // ja            914 <_sk_load_g8_dst_ssse3_lowp+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,113,0,0,0                 // lea           0x71(%rip),%r10        # 9c4 <_sk_load_g8_dst_ssse3_lowp+0xc4>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,15,110,224                      // movd          %eax,%xmm4
  .byte  235,173                             // jmp           914 <_sk_load_g8_dst_ssse3_lowp+0x14>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  102,15,196,224,2                    // pinsrw        $0x2,%eax,%xmm4
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  102,15,110,232                      // movd          %eax,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  243,15,16,229                       // movss         %xmm5,%xmm4
  .byte  235,139                             // jmp           914 <_sk_load_g8_dst_ssse3_lowp+0x14>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  102,15,196,224,6                    // pinsrw        $0x6,%eax,%xmm4
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,15,196,224,5                    // pinsrw        $0x5,%eax,%xmm4
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,15,196,224,4                    // pinsrw        $0x4,%eax,%xmm4
  .byte  102,65,15,110,44,19                 // movd          (%r11,%rdx,1),%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  233,83,255,255,255                  // jmpq          914 <_sk_load_g8_dst_ssse3_lowp+0x14>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  152                                 // cwtl
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,178,255,255,255,163             // pushq         -0x5c000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_srcover_rgba_8888_ssse3_lowp
.globl _sk_srcover_rgba_8888_ssse3_lowp
FUNCTION(_sk_srcover_rgba_8888_ssse3_lowp)
_sk_srcover_rgba_8888_ssse3_lowp:
  .byte  102,68,15,111,225                   // movdqa        %xmm1,%xmm12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,11,2,0,0                     // jne           bfe <_sk_srcover_rgba_8888_ssse3_lowp+0x21e>
  .byte  69,15,16,68,147,16                  // movups        0x10(%r11,%rdx,4),%xmm8
  .byte  102,65,15,16,60,147                 // movupd        (%r11,%rdx,4),%xmm7
  .byte  102,15,111,45,57,13,0,0             // movdqa        0xd39(%rip),%xmm5        # 1740 <_sk_xor__ssse3_lowp+0x1e8>
  .byte  102,15,40,231                       // movapd        %xmm7,%xmm4
  .byte  102,15,56,0,229                     // pshufb        %xmm5,%xmm4
  .byte  102,65,15,111,240                   // movdqa        %xmm8,%xmm6
  .byte  102,15,56,0,245                     // pshufb        %xmm5,%xmm6
  .byte  102,15,108,230                      // punpcklqdq    %xmm6,%xmm4
  .byte  102,15,111,13,42,13,0,0             // movdqa        0xd2a(%rip),%xmm1        # 1750 <_sk_xor__ssse3_lowp+0x1f8>
  .byte  102,15,113,244,8                    // psllw         $0x8,%xmm4
  .byte  102,68,15,111,13,44,13,0,0          // movdqa        0xd2c(%rip),%xmm9        # 1760 <_sk_xor__ssse3_lowp+0x208>
  .byte  102,65,15,228,225                   // pmulhuw       %xmm9,%xmm4
  .byte  102,68,15,111,21,46,13,0,0          // movdqa        0xd2e(%rip),%xmm10        # 1770 <_sk_xor__ssse3_lowp+0x218>
  .byte  102,15,40,239                       // movapd        %xmm7,%xmm5
  .byte  102,65,15,56,0,234                  // pshufb        %xmm10,%xmm5
  .byte  102,65,15,111,240                   // movdqa        %xmm8,%xmm6
  .byte  102,65,15,56,0,242                  // pshufb        %xmm10,%xmm6
  .byte  102,15,108,238                      // punpcklqdq    %xmm6,%xmm5
  .byte  102,15,113,245,8                    // psllw         $0x8,%xmm5
  .byte  102,65,15,228,233                   // pmulhuw       %xmm9,%xmm5
  .byte  102,68,15,111,21,18,13,0,0          // movdqa        0xd12(%rip),%xmm10        # 1780 <_sk_xor__ssse3_lowp+0x228>
  .byte  102,15,40,247                       // movapd        %xmm7,%xmm6
  .byte  102,65,15,56,0,242                  // pshufb        %xmm10,%xmm6
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,56,0,218                  // pshufb        %xmm10,%xmm11
  .byte  102,65,15,108,243                   // punpcklqdq    %xmm11,%xmm6
  .byte  102,15,113,246,8                    // psllw         $0x8,%xmm6
  .byte  102,65,15,228,241                   // pmulhuw       %xmm9,%xmm6
  .byte  102,68,15,111,21,245,12,0,0         // movdqa        0xcf5(%rip),%xmm10        # 1790 <_sk_xor__ssse3_lowp+0x238>
  .byte  102,65,15,56,0,250                  // pshufb        %xmm10,%xmm7
  .byte  102,69,15,56,0,194                  // pshufb        %xmm10,%xmm8
  .byte  102,65,15,108,248                   // punpcklqdq    %xmm8,%xmm7
  .byte  102,15,113,247,8                    // psllw         $0x8,%xmm7
  .byte  102,65,15,228,249                   // pmulhuw       %xmm9,%xmm7
  .byte  102,68,15,111,29,225,12,0,0         // movdqa        0xce1(%rip),%xmm11        # 17a0 <_sk_xor__ssse3_lowp+0x248>
  .byte  102,68,15,249,219                   // psubw         %xmm3,%xmm11
  .byte  102,68,15,111,196                   // movdqa        %xmm4,%xmm8
  .byte  102,69,15,56,11,195                 // pmulhrsw      %xmm11,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,68,15,253,192                   // paddw         %xmm0,%xmm8
  .byte  102,15,111,197                      // movdqa        %xmm5,%xmm0
  .byte  102,65,15,56,11,195                 // pmulhrsw      %xmm11,%xmm0
  .byte  102,68,15,56,29,200                 // pabsw         %xmm0,%xmm9
  .byte  102,69,15,253,204                   // paddw         %xmm12,%xmm9
  .byte  102,15,111,198                      // movdqa        %xmm6,%xmm0
  .byte  102,65,15,56,11,195                 // pmulhrsw      %xmm11,%xmm0
  .byte  102,68,15,56,29,224                 // pabsw         %xmm0,%xmm12
  .byte  102,68,15,253,226                   // paddw         %xmm2,%xmm12
  .byte  102,68,15,56,11,223                 // pmulhrsw      %xmm7,%xmm11
  .byte  102,69,15,56,29,219                 // pabsw         %xmm11,%xmm11
  .byte  102,68,15,253,219                   // paddw         %xmm3,%xmm11
  .byte  102,68,15,127,68,36,232             // movdqa        %xmm8,-0x18(%rsp)
  .byte  102,65,15,111,216                   // movdqa        %xmm8,%xmm3
  .byte  102,15,113,211,7                    // psrlw         $0x7,%xmm3
  .byte  102,15,234,217                      // pminsw        %xmm1,%xmm3
  .byte  102,69,15,239,255                   // pxor          %xmm15,%xmm15
  .byte  102,68,15,111,235                   // movdqa        %xmm3,%xmm13
  .byte  102,69,15,97,239                    // punpcklwd     %xmm15,%xmm13
  .byte  102,65,15,105,223                   // punpckhwd     %xmm15,%xmm3
  .byte  102,65,15,111,209                   // movdqa        %xmm9,%xmm2
  .byte  102,15,113,210,7                    // psrlw         $0x7,%xmm2
  .byte  102,15,234,209                      // pminsw        %xmm1,%xmm2
  .byte  102,68,15,111,242                   // movdqa        %xmm2,%xmm14
  .byte  102,69,15,105,247                   // punpckhwd     %xmm15,%xmm14
  .byte  102,65,15,97,215                    // punpcklwd     %xmm15,%xmm2
  .byte  102,69,15,111,212                   // movdqa        %xmm12,%xmm10
  .byte  102,65,15,113,210,7                 // psrlw         $0x7,%xmm10
  .byte  102,68,15,234,209                   // pminsw        %xmm1,%xmm10
  .byte  102,69,15,111,194                   // movdqa        %xmm10,%xmm8
  .byte  102,69,15,97,199                    // punpcklwd     %xmm15,%xmm8
  .byte  102,69,15,105,215                   // punpckhwd     %xmm15,%xmm10
  .byte  102,65,15,111,195                   // movdqa        %xmm11,%xmm0
  .byte  102,15,113,208,7                    // psrlw         $0x7,%xmm0
  .byte  102,15,234,193                      // pminsw        %xmm1,%xmm0
  .byte  102,15,111,200                      // movdqa        %xmm0,%xmm1
  .byte  102,65,15,105,207                   // punpckhwd     %xmm15,%xmm1
  .byte  102,65,15,97,199                    // punpcklwd     %xmm15,%xmm0
  .byte  102,65,15,114,246,8                 // pslld         $0x8,%xmm14
  .byte  102,68,15,235,243                   // por           %xmm3,%xmm14
  .byte  102,15,114,242,8                    // pslld         $0x8,%xmm2
  .byte  102,65,15,235,213                   // por           %xmm13,%xmm2
  .byte  102,65,15,114,242,16                // pslld         $0x10,%xmm10
  .byte  102,15,114,241,24                   // pslld         $0x18,%xmm1
  .byte  102,65,15,235,202                   // por           %xmm10,%xmm1
  .byte  102,65,15,235,206                   // por           %xmm14,%xmm1
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,15,114,240,24                   // pslld         $0x18,%xmm0
  .byte  102,65,15,235,192                   // por           %xmm8,%xmm0
  .byte  102,15,235,194                      // por           %xmm2,%xmm0
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,97                              // jne           c3a <_sk_srcover_rgba_8888_ssse3_lowp+0x25a>
  .byte  243,65,15,127,4,147                 // movdqu        %xmm0,(%r11,%rdx,4)
  .byte  243,65,15,127,76,147,16             // movdqu        %xmm1,0x10(%r11,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,68,36,232                     // movaps        -0x18(%rsp),%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,65,15,111,212                   // movdqa        %xmm12,%xmm2
  .byte  102,65,15,111,219                   // movdqa        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,228,253,255,255              // ja            9ff <_sk_srcover_rgba_8888_ssse3_lowp+0x1f>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,206,0,0,0                 // lea           0xce(%rip),%r10        # cf4 <_sk_srcover_rgba_8888_ssse3_lowp+0x314>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  243,65,15,16,60,147                 // movss         (%r11,%rdx,4),%xmm7
  .byte  233,197,253,255,255                 // jmpq          9ff <_sk_srcover_rgba_8888_ssse3_lowp+0x1f>
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,156                             // ja            be6 <_sk_srcover_rgba_8888_ssse3_lowp+0x206>
  .byte  65,15,182,193                       // movzbl        %r9b,%eax
  .byte  76,141,13,187,0,0,0                 // lea           0xbb(%rip),%r9        # d10 <_sk_srcover_rgba_8888_ssse3_lowp+0x330>
  .byte  73,99,4,129                         // movslq        (%r9,%rax,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,65,15,126,4,147                 // movd          %xmm0,(%r11,%rdx,4)
  .byte  235,128                             // jmp           be6 <_sk_srcover_rgba_8888_ssse3_lowp+0x206>
  .byte  102,65,15,110,100,147,8             // movd          0x8(%r11,%rdx,4),%xmm4
  .byte  102,15,112,252,69                   // pshufd        $0x45,%xmm4,%xmm7
  .byte  102,65,15,18,60,147                 // movlpd        (%r11,%rdx,4),%xmm7
  .byte  233,130,253,255,255                 // jmpq          9ff <_sk_srcover_rgba_8888_ssse3_lowp+0x1f>
  .byte  102,65,15,110,100,147,24            // movd          0x18(%r11,%rdx,4),%xmm4
  .byte  102,68,15,112,196,69                // pshufd        $0x45,%xmm4,%xmm8
  .byte  243,65,15,16,100,147,20             // movss         0x14(%r11,%rdx,4),%xmm4
  .byte  65,15,198,224,0                     // shufps        $0x0,%xmm8,%xmm4
  .byte  65,15,198,224,226                   // shufps        $0xe2,%xmm8,%xmm4
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  243,65,15,16,100,147,16             // movss         0x10(%r11,%rdx,4),%xmm4
  .byte  243,68,15,16,196                    // movss         %xmm4,%xmm8
  .byte  233,73,253,255,255                  // jmpq          9f9 <_sk_srcover_rgba_8888_ssse3_lowp+0x19>
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,65,15,126,76,147,8              // movd          %xmm1,0x8(%r11,%rdx,4)
  .byte  102,65,15,214,4,147                 // movq          %xmm0,(%r11,%rdx,4)
  .byte  233,31,255,255,255                  // jmpq          be6 <_sk_srcover_rgba_8888_ssse3_lowp+0x206>
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,65,15,126,84,147,24             // movd          %xmm2,0x18(%r11,%rdx,4)
  .byte  102,15,112,209,229                  // pshufd        $0xe5,%xmm1,%xmm2
  .byte  102,65,15,126,84,147,20             // movd          %xmm2,0x14(%r11,%rdx,4)
  .byte  102,65,15,126,76,147,16             // movd          %xmm1,0x10(%r11,%rdx,4)
  .byte  243,65,15,127,4,147                 // movdqu        %xmm0,(%r11,%rdx,4)
  .byte  233,245,254,255,255                 // jmpq          be6 <_sk_srcover_rgba_8888_ssse3_lowp+0x206>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  59,255                              // cmp           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  126,255                             // jle           cf9 <_sk_srcover_rgba_8888_ssse3_lowp+0x319>
  .byte  255                                 // (bad)
  .byte  255,114,255                         // pushq         -0x1(%rdx)
  .byte  255                                 // (bad)
  .byte  255,5,253,255,255,171               // incl          -0x54000003(%rip)        # ffffffffac000d02 <_sk_xor__ssse3_lowp+0xffffffffabfff7aa>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,150,255,255,255,137             // callq         *-0x76000001(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,78,255                          // decl          -0x1(%rsi)
  .byte  255                                 // (bad)
  .byte  255,172,255,255,255,160,255         // ljmp          *-0x5f0001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,207                             // dec           %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff
  .byte  183,255                             // mov           $0xff,%bh
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_scale_1_float_ssse3_lowp
.globl _sk_scale_1_float_ssse3_lowp
FUNCTION(_sk_scale_1_float_ssse3_lowp)
_sk_scale_1_float_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,88,5,72,11,0,0            // addss         0xb48(%rip),%xmm8        # 1884 <_sk_xor__ssse3_lowp+0x32c>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  242,69,15,112,192,0                 // pshuflw       $0x0,%xmm8,%xmm8
  .byte  102,69,15,112,192,80                // pshufd        $0x50,%xmm8,%xmm8
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,56,11,216                 // pmulhrsw      %xmm8,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_ssse3_lowp
.globl _sk_scale_u8_ssse3_lowp
FUNCTION(_sk_scale_u8_ssse3_lowp)
_sk_scale_u8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,74                              // jne           dd6 <_sk_scale_u8_ssse3_lowp+0x54>
  .byte  243,69,15,126,4,19                  // movq          (%r11,%rdx,1),%xmm8
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,65,15,113,240,8                 // psllw         $0x8,%xmm8
  .byte  102,68,15,228,5,10,10,0,0           // pmulhuw       0xa0a(%rip),%xmm8        # 17b0 <_sk_xor__ssse3_lowp+0x258>
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,56,11,216                 // pmulhrsw      %xmm8,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,172                             // ja            d97 <_sk_scale_u8_ssse3_lowp+0x15>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,126,0,0,0                 // lea           0x7e(%rip),%r10        # e74 <_sk_scale_u8_ssse3_lowp+0xf2>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  235,140                             // jmp           d97 <_sk_scale_u8_ssse3_lowp+0x15>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,68,15,196,192,2                 // pinsrw        $0x2,%eax,%xmm8
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  102,68,15,96,200                    // punpcklbw     %xmm0,%xmm9
  .byte  243,69,15,16,193                    // movss         %xmm9,%xmm8
  .byte  233,98,255,255,255                  // jmpq          d97 <_sk_scale_u8_ssse3_lowp+0x15>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,68,15,196,192,6                 // pinsrw        $0x6,%eax,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,5                 // pinsrw        $0x5,%eax,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,4                 // pinsrw        $0x4,%eax,%xmm8
  .byte  102,69,15,110,12,19                 // movd          (%r11,%rdx,1),%xmm9
  .byte  102,68,15,96,200                    // punpcklbw     %xmm0,%xmm9
  .byte  242,69,15,16,193                    // movsd         %xmm9,%xmm8
  .byte  233,36,255,255,255                  // jmpq          d97 <_sk_scale_u8_ssse3_lowp+0x15>
  .byte  144                                 // nop
  .byte  139,255                             // mov           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,168,255,255,255,151             // ljmp          *-0x68000001(%rax)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,210                             // callq         *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,193                             // inc           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_1_float_ssse3_lowp
.globl _sk_lerp_1_float_ssse3_lowp
FUNCTION(_sk_lerp_1_float_ssse3_lowp)
_sk_lerp_1_float_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,88,5,232,9,0,0            // addss         0x9e8(%rip),%xmm8        # 1888 <_sk_xor__ssse3_lowp+0x330>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  242,69,15,112,192,0                 // pshuflw       $0x0,%xmm8,%xmm8
  .byte  102,69,15,112,192,80                // pshufd        $0x50,%xmm8,%xmm8
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,68,15,56,29,200                 // pabsw         %xmm0,%xmm9
  .byte  102,68,15,111,21,245,8,0,0          // movdqa        0x8f5(%rip),%xmm10        # 17c0 <_sk_xor__ssse3_lowp+0x268>
  .byte  102,69,15,249,208                   // psubw         %xmm8,%xmm10
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,194                 // pmulhrsw      %xmm10,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,193                   // paddw         %xmm9,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,68,15,56,29,201                 // pabsw         %xmm1,%xmm9
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,202                 // pmulhrsw      %xmm10,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,201                   // paddw         %xmm9,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,68,15,56,29,202                 // pabsw         %xmm2,%xmm9
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,210                 // pmulhrsw      %xmm10,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,209                   // paddw         %xmm9,%xmm2
  .byte  102,65,15,56,11,216                 // pmulhrsw      %xmm8,%xmm3
  .byte  102,68,15,56,29,195                 // pabsw         %xmm3,%xmm8
  .byte  102,68,15,56,11,215                 // pmulhrsw      %xmm7,%xmm10
  .byte  102,65,15,56,29,218                 // pabsw         %xmm10,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_ssse3_lowp
.globl _sk_lerp_u8_ssse3_lowp
FUNCTION(_sk_lerp_u8_ssse3_lowp)
_sk_lerp_u8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,169,0,0,0                    // jne           ffc <_sk_lerp_u8_ssse3_lowp+0xb7>
  .byte  243,69,15,126,4,19                  // movq          (%r11,%rdx,1),%xmm8
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,65,15,113,240,8                 // psllw         $0x8,%xmm8
  .byte  102,68,15,228,5,99,8,0,0            // pmulhuw       0x863(%rip),%xmm8        # 17d0 <_sk_xor__ssse3_lowp+0x278>
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,68,15,56,29,200                 // pabsw         %xmm0,%xmm9
  .byte  102,68,15,111,21,94,8,0,0           // movdqa        0x85e(%rip),%xmm10        # 17e0 <_sk_xor__ssse3_lowp+0x288>
  .byte  102,69,15,249,208                   // psubw         %xmm8,%xmm10
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,194                 // pmulhrsw      %xmm10,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,193                   // paddw         %xmm9,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,68,15,56,29,201                 // pabsw         %xmm1,%xmm9
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,202                 // pmulhrsw      %xmm10,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,201                   // paddw         %xmm9,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,68,15,56,29,202                 // pabsw         %xmm2,%xmm9
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,210                 // pmulhrsw      %xmm10,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,209                   // paddw         %xmm9,%xmm2
  .byte  102,65,15,56,11,216                 // pmulhrsw      %xmm8,%xmm3
  .byte  102,68,15,56,29,195                 // pabsw         %xmm3,%xmm8
  .byte  102,68,15,56,11,215                 // pmulhrsw      %xmm7,%xmm10
  .byte  102,65,15,56,29,218                 // pabsw         %xmm10,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,73,255,255,255               // ja            f5e <_sk_lerp_u8_ssse3_lowp+0x19>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,128,0,0,0                 // lea           0x80(%rip),%r10        # 10a0 <_sk_lerp_u8_ssse3_lowp+0x15b>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  233,38,255,255,255                  // jmpq          f5e <_sk_lerp_u8_ssse3_lowp+0x19>
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,68,15,196,192,2                 // pinsrw        $0x2,%eax,%xmm8
  .byte  65,15,183,4,19                      // movzwl        (%r11,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  102,68,15,96,200                    // punpcklbw     %xmm0,%xmm9
  .byte  243,69,15,16,193                    // movss         %xmm9,%xmm8
  .byte  233,252,254,255,255                 // jmpq          f5e <_sk_lerp_u8_ssse3_lowp+0x19>
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,68,15,196,192,6                 // pinsrw        $0x6,%eax,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,5                 // pinsrw        $0x5,%eax,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,4                 // pinsrw        $0x4,%eax,%xmm8
  .byte  102,69,15,110,12,19                 // movd          (%r11,%rdx,1),%xmm9
  .byte  102,68,15,96,200                    // punpcklbw     %xmm0,%xmm9
  .byte  242,69,15,16,193                    // movsd         %xmm9,%xmm8
  .byte  233,190,254,255,255                 // jmpq          f5e <_sk_lerp_u8_ssse3_lowp+0x19>
  .byte  137,255                             // mov           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,169,255,255,255,152             // ljmp          *-0x67000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  235,255                             // jmp           10ad <_sk_lerp_u8_ssse3_lowp+0x168>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,211                             // callq         *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_swap_rb_ssse3_lowp
.globl _sk_swap_rb_ssse3_lowp
FUNCTION(_sk_swap_rb_ssse3_lowp)
_sk_swap_rb_ssse3_lowp:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_dst_ssse3_lowp
.globl _sk_swap_rb_dst_ssse3_lowp
FUNCTION(_sk_swap_rb_dst_ssse3_lowp)
_sk_swap_rb_dst_ssse3_lowp:
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  65,15,40,240                        // movaps        %xmm8,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_ssse3_lowp
.globl _sk_move_src_dst_ssse3_lowp
FUNCTION(_sk_move_src_dst_ssse3_lowp)
_sk_move_src_dst_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_ssse3_lowp
.globl _sk_move_dst_src_ssse3_lowp
FUNCTION(_sk_move_dst_src_ssse3_lowp)
_sk_move_dst_src_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_ssse3_lowp
.globl _sk_clear_ssse3_lowp
FUNCTION(_sk_clear_ssse3_lowp)
_sk_clear_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_ssse3_lowp
.globl _sk_srcatop_ssse3_lowp
FUNCTION(_sk_srcatop_ssse3_lowp)
_sk_srcatop_ssse3_lowp:
  .byte  102,15,56,11,199                    // pmulhrsw      %xmm7,%xmm0
  .byte  102,68,15,56,29,192                 // pabsw         %xmm0,%xmm8
  .byte  102,68,15,111,13,210,6,0,0          // movdqa        0x6d2(%rip),%xmm9        # 17f0 <_sk_xor__ssse3_lowp+0x298>
  .byte  102,68,15,249,203                   // psubw         %xmm3,%xmm9
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,193                 // pmulhrsw      %xmm9,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,192                   // paddw         %xmm8,%xmm0
  .byte  102,15,56,11,207                    // pmulhrsw      %xmm7,%xmm1
  .byte  102,68,15,56,29,193                 // pabsw         %xmm1,%xmm8
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,201                 // pmulhrsw      %xmm9,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,200                   // paddw         %xmm8,%xmm1
  .byte  102,15,56,11,215                    // pmulhrsw      %xmm7,%xmm2
  .byte  102,68,15,56,29,194                 // pabsw         %xmm2,%xmm8
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,209                 // pmulhrsw      %xmm9,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,208                   // paddw         %xmm8,%xmm2
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,68,15,56,29,195                 // pabsw         %xmm3,%xmm8
  .byte  102,68,15,56,11,207                 // pmulhrsw      %xmm7,%xmm9
  .byte  102,65,15,56,29,217                 // pabsw         %xmm9,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_ssse3_lowp
.globl _sk_dstatop_ssse3_lowp
FUNCTION(_sk_dstatop_ssse3_lowp)
_sk_dstatop_ssse3_lowp:
  .byte  102,68,15,111,196                   // movdqa        %xmm4,%xmm8
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,68,15,111,13,81,6,0,0           // movdqa        0x651(%rip),%xmm9        # 1800 <_sk_xor__ssse3_lowp+0x2a8>
  .byte  102,68,15,249,207                   // psubw         %xmm7,%xmm9
  .byte  102,65,15,56,11,193                 // pmulhrsw      %xmm9,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,192                   // paddw         %xmm8,%xmm0
  .byte  102,68,15,111,197                   // movdqa        %xmm5,%xmm8
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,65,15,56,11,201                 // pmulhrsw      %xmm9,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,200                   // paddw         %xmm8,%xmm1
  .byte  102,68,15,111,198                   // movdqa        %xmm6,%xmm8
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,65,15,56,11,209                 // pmulhrsw      %xmm9,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,208                   // paddw         %xmm8,%xmm2
  .byte  102,68,15,111,199                   // movdqa        %xmm7,%xmm8
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,68,15,56,11,203                 // pmulhrsw      %xmm3,%xmm9
  .byte  102,65,15,56,29,217                 // pabsw         %xmm9,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_ssse3_lowp
.globl _sk_srcin_ssse3_lowp
FUNCTION(_sk_srcin_ssse3_lowp)
_sk_srcin_ssse3_lowp:
  .byte  102,15,56,11,199                    // pmulhrsw      %xmm7,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,56,11,207                    // pmulhrsw      %xmm7,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,56,11,215                    // pmulhrsw      %xmm7,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_ssse3_lowp
.globl _sk_dstin_ssse3_lowp
FUNCTION(_sk_dstin_ssse3_lowp)
_sk_dstin_ssse3_lowp:
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,15,56,11,195                    // pmulhrsw      %xmm3,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,15,56,11,203                    // pmulhrsw      %xmm3,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,15,56,11,211                    // pmulhrsw      %xmm3,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_ssse3_lowp
.globl _sk_srcout_ssse3_lowp
FUNCTION(_sk_srcout_ssse3_lowp)
_sk_srcout_ssse3_lowp:
  .byte  102,68,15,111,5,119,5,0,0           // movdqa        0x577(%rip),%xmm8        # 1810 <_sk_xor__ssse3_lowp+0x2b8>
  .byte  102,68,15,249,199                   // psubw         %xmm7,%xmm8
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,65,15,56,29,216                 // pabsw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_ssse3_lowp
.globl _sk_dstout_ssse3_lowp
FUNCTION(_sk_dstout_ssse3_lowp)
_sk_dstout_ssse3_lowp:
  .byte  102,68,15,111,5,72,5,0,0            // movdqa        0x548(%rip),%xmm8        # 1820 <_sk_xor__ssse3_lowp+0x2c8>
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,65,15,56,29,216                 // pabsw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_ssse3_lowp
.globl _sk_srcover_ssse3_lowp
FUNCTION(_sk_srcover_ssse3_lowp)
_sk_srcover_ssse3_lowp:
  .byte  102,68,15,111,5,13,5,0,0            // movdqa        0x50d(%rip),%xmm8        # 1830 <_sk_xor__ssse3_lowp+0x2d8>
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,68,15,111,204                   // movdqa        %xmm4,%xmm9
  .byte  102,69,15,56,11,200                 // pmulhrsw      %xmm8,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,193                   // paddw         %xmm9,%xmm0
  .byte  102,68,15,111,205                   // movdqa        %xmm5,%xmm9
  .byte  102,69,15,56,11,200                 // pmulhrsw      %xmm8,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,201                   // paddw         %xmm9,%xmm1
  .byte  102,68,15,111,206                   // movdqa        %xmm6,%xmm9
  .byte  102,69,15,56,11,200                 // pmulhrsw      %xmm8,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,209                   // paddw         %xmm9,%xmm2
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_ssse3_lowp
.globl _sk_dstover_ssse3_lowp
FUNCTION(_sk_dstover_ssse3_lowp)
_sk_dstover_ssse3_lowp:
  .byte  102,68,15,111,5,184,4,0,0           // movdqa        0x4b8(%rip),%xmm8        # 1840 <_sk_xor__ssse3_lowp+0x2e8>
  .byte  102,68,15,249,199                   // psubw         %xmm7,%xmm8
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,253,196                      // paddw         %xmm4,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,253,205                      // paddw         %xmm5,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,15,253,214                      // paddw         %xmm6,%xmm2
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,65,15,56,29,216                 // pabsw         %xmm8,%xmm3
  .byte  102,15,253,223                      // paddw         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_ssse3_lowp
.globl _sk_modulate_ssse3_lowp
FUNCTION(_sk_modulate_ssse3_lowp)
_sk_modulate_ssse3_lowp:
  .byte  102,15,56,11,196                    // pmulhrsw      %xmm4,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,56,11,205                    // pmulhrsw      %xmm5,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,56,11,214                    // pmulhrsw      %xmm6,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_ssse3_lowp
.globl _sk_multiply_ssse3_lowp
FUNCTION(_sk_multiply_ssse3_lowp)
_sk_multiply_ssse3_lowp:
  .byte  102,68,15,111,5,77,4,0,0            // movdqa        0x44d(%rip),%xmm8        # 1850 <_sk_xor__ssse3_lowp+0x2f8>
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,207                   // psubw         %xmm7,%xmm9
  .byte  102,68,15,111,208                   // movdqa        %xmm0,%xmm10
  .byte  102,69,15,56,11,209                 // pmulhrsw      %xmm9,%xmm10
  .byte  102,69,15,56,29,210                 // pabsw         %xmm10,%xmm10
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,15,56,11,196                    // pmulhrsw      %xmm4,%xmm0
  .byte  102,68,15,111,220                   // movdqa        %xmm4,%xmm11
  .byte  102,69,15,56,11,216                 // pmulhrsw      %xmm8,%xmm11
  .byte  102,69,15,56,29,219                 // pabsw         %xmm11,%xmm11
  .byte  102,69,15,253,218                   // paddw         %xmm10,%xmm11
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,195                   // paddw         %xmm11,%xmm0
  .byte  102,68,15,111,209                   // movdqa        %xmm1,%xmm10
  .byte  102,69,15,56,11,209                 // pmulhrsw      %xmm9,%xmm10
  .byte  102,69,15,56,29,210                 // pabsw         %xmm10,%xmm10
  .byte  102,15,56,11,205                    // pmulhrsw      %xmm5,%xmm1
  .byte  102,68,15,111,221                   // movdqa        %xmm5,%xmm11
  .byte  102,69,15,56,11,216                 // pmulhrsw      %xmm8,%xmm11
  .byte  102,69,15,56,29,219                 // pabsw         %xmm11,%xmm11
  .byte  102,69,15,253,218                   // paddw         %xmm10,%xmm11
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,203                   // paddw         %xmm11,%xmm1
  .byte  102,68,15,111,210                   // movdqa        %xmm2,%xmm10
  .byte  102,69,15,56,11,209                 // pmulhrsw      %xmm9,%xmm10
  .byte  102,69,15,56,29,210                 // pabsw         %xmm10,%xmm10
  .byte  102,15,56,11,214                    // pmulhrsw      %xmm6,%xmm2
  .byte  102,68,15,111,222                   // movdqa        %xmm6,%xmm11
  .byte  102,69,15,56,11,216                 // pmulhrsw      %xmm8,%xmm11
  .byte  102,69,15,56,29,219                 // pabsw         %xmm11,%xmm11
  .byte  102,69,15,253,218                   // paddw         %xmm10,%xmm11
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,211                   // paddw         %xmm11,%xmm2
  .byte  102,68,15,56,11,203                 // pmulhrsw      %xmm3,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,69,15,253,193                   // paddw         %xmm9,%xmm8
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_ssse3_lowp
.globl _sk_screen_ssse3_lowp
FUNCTION(_sk_screen_ssse3_lowp)
_sk_screen_ssse3_lowp:
  .byte  102,68,15,111,5,115,3,0,0           // movdqa        0x373(%rip),%xmm8        # 1860 <_sk_xor__ssse3_lowp+0x308>
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,200                   // psubw         %xmm0,%xmm9
  .byte  102,68,15,56,11,204                 // pmulhrsw      %xmm4,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,193                   // paddw         %xmm9,%xmm0
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,201                   // psubw         %xmm1,%xmm9
  .byte  102,68,15,56,11,205                 // pmulhrsw      %xmm5,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,201                   // paddw         %xmm9,%xmm1
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,202                   // psubw         %xmm2,%xmm9
  .byte  102,68,15,56,11,206                 // pmulhrsw      %xmm6,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,209                   // paddw         %xmm9,%xmm2
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__ssse3_lowp
.globl _sk_xor__ssse3_lowp
FUNCTION(_sk_xor__ssse3_lowp)
_sk_xor__ssse3_lowp:
  .byte  102,68,15,111,5,15,3,0,0            // movdqa        0x30f(%rip),%xmm8        # 1870 <_sk_xor__ssse3_lowp+0x318>
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,207                   // psubw         %xmm7,%xmm9
  .byte  102,65,15,56,11,193                 // pmulhrsw      %xmm9,%xmm0
  .byte  102,68,15,56,29,208                 // pabsw         %xmm0,%xmm10
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,194                   // paddw         %xmm10,%xmm0
  .byte  102,65,15,56,11,201                 // pmulhrsw      %xmm9,%xmm1
  .byte  102,68,15,56,29,209                 // pabsw         %xmm1,%xmm10
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,202                   // paddw         %xmm10,%xmm1
  .byte  102,65,15,56,11,209                 // pmulhrsw      %xmm9,%xmm2
  .byte  102,68,15,56,29,210                 // pabsw         %xmm2,%xmm10
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,210                   // paddw         %xmm10,%xmm2
  .byte  102,68,15,56,11,203                 // pmulhrsw      %xmm3,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,65,15,56,29,216                 // pabsw         %xmm8,%xmm3
  .byte  102,65,15,253,217                   // paddw         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

BALIGN16
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,1                          // addb          $0x1,0x0(%rbx)
  .byte  4,5                                 // add           $0x5,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  12,13                               // or            $0xd,%al
  .byte  14                                  // (bad)
  .byte  15,129,128,129,128,129              // jno           ffffffff818097a5 <_sk_xor__ssse3_lowp+0xffffffff8180824d>
  .byte  128,129,128,129,128,129,128         // addb          $0x80,-0x7e7f7e80(%rcx)
  .byte  129,128,129,128,1,2,5,6,9,10        // addl          $0xa090605,0x2018081(%rax)
  .byte  13,14,9,10,13                       // or            $0xd0a090e,%eax
  .byte  14                                  // (bad)
  .byte  13,14,15,255,2                      // or            $0x2ff0f0e,%eax
  .byte  3,6                                 // add           (%rsi),%eax
  .byte  7                                   // (bad)
  .byte  10,11                               // or            (%rbx),%cl
  .byte  14                                  // (bad)
  .byte  15,10                               // (bad)
  .byte  11,14                               // or            (%rsi),%ecx
  .byte  15,14                               // femms
  .byte  15,255                              // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255,7                               // incl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,15                              // decl          (%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  1,4,5,8,9,12,13                     // add           %eax,0xd0c0908(,%rax,1)
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  12,13                               // or            $0xd,%al
  .byte  14                                  // (bad)
  .byte  15,129,128,129,128,129              // jno           ffffffff818097f5 <_sk_xor__ssse3_lowp+0xffffffff8180829d>
  .byte  128,129,128,129,128,129,128         // addb          $0x80,-0x7e7f7e80(%rcx)
  .byte  129,128,129,128,1,2,5,6,9,10        // addl          $0xa090605,0x2018081(%rax)
  .byte  13,14,9,10,13                       // or            $0xd0a090e,%eax
  .byte  14                                  // (bad)
  .byte  13,14,15,255,2                      // or            $0x2ff0f0e,%eax
  .byte  3,6                                 // add           (%rsi),%eax
  .byte  7                                   // (bad)
  .byte  10,11                               // or            (%rbx),%cl
  .byte  14                                  // (bad)
  .byte  15,10                               // (bad)
  .byte  11,14                               // or            (%rsi),%ecx
  .byte  15,14                               // femms
  .byte  15,255                              // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255,7                               // incl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,15                              // decl          (%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,0,2,4,6,0,0,0,0             // addl          $0x0,0x6040200(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,0,128,0,128 // addl          $0x80008000,-0x7f7e7f7f(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,0,128,0,128 // addl          $0x80008000,-0x7f7e7f7f(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  4,5                                 // add           $0x5,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  12,13                               // or            $0xd,%al
  .byte  14                                  // (bad)
  .byte  15,255                              // (bad)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,129,128,129,128,129               // add           %al,-0x7e7f7e80(%rcx)
  .byte  128,129,128,129,128,129,128         // addb          $0x80,-0x7e7f7e80(%rcx)
  .byte  129,128,129,128,1,2,5,6,9,10        // addl          $0xa090605,0x2018081(%rax)
  .byte  13,14,9,10,13                       // or            $0xd0a090e,%eax
  .byte  14                                  // (bad)
  .byte  13,14,15,255,2                      // or            $0x2ff0f0e,%eax
  .byte  3,6                                 // add           (%rsi),%eax
  .byte  7                                   // (bad)
  .byte  10,11                               // or            (%rbx),%cl
  .byte  14                                  // (bad)
  .byte  15,10                               // (bad)
  .byte  11,14                               // or            (%rsi),%ecx
  .byte  15,14                               // femms
  .byte  15,255                              // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255,7                               // incl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,15                              // decl          (%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,0,128,0,128 // addl          $0x80008000,-0x7f7e7f7f(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,0,128,0,128 // addl          $0x80008000,-0x7f7e7f7f(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128                                 // .byte         0x80
  .byte  67                                  // rex.XB
#elif defined(__i386__)
BALIGN32

HIDDEN _sk_start_pipeline_sse2
.globl _sk_start_pipeline_sse2
FUNCTION(_sk_start_pipeline_sse2)
_sk_start_pipeline_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,12                          // sub           $0xc,%esp
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  139,117,8                           // mov           0x8(%ebp),%esi
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,10                              // mov           (%edx),%ecx
  .byte  131,194,4                           // add           $0x4,%edx
  .byte  141,70,4                            // lea           0x4(%esi),%eax
  .byte  57,248                              // cmp           %edi,%eax
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  118,4                               // jbe           25 <_sk_start_pipeline_sse2+0x25>
  .byte  137,240                             // mov           %esi,%eax
  .byte  235,42                              // jmp           4f <_sk_start_pipeline_sse2+0x4f>
  .byte  131,236,76                          // sub           $0x4c,%esp
  .byte  106,0                               // push          $0x0
  .byte  255,117,12                          // pushl         0xc(%ebp)
  .byte  86                                  // push          %esi
  .byte  82                                  // push          %edx
  .byte  83                                  // push          %ebx
  .byte  137,207                             // mov           %ecx,%edi
  .byte  137,211                             // mov           %edx,%ebx
  .byte  255,215                             // call          *%edi
  .byte  137,218                             // mov           %ebx,%edx
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  137,249                             // mov           %edi,%ecx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  131,196,96                          // add           $0x60,%esp
  .byte  141,70,4                            // lea           0x4(%esi),%eax
  .byte  131,198,8                           // add           $0x8,%esi
  .byte  57,254                              // cmp           %edi,%esi
  .byte  137,198                             // mov           %eax,%esi
  .byte  118,214                             // jbe           25 <_sk_start_pipeline_sse2+0x25>
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  41,199                              // sub           %eax,%edi
  .byte  116,15                              // je            65 <_sk_start_pipeline_sse2+0x65>
  .byte  131,236,76                          // sub           $0x4c,%esp
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  80                                  // push          %eax
  .byte  82                                  // push          %edx
  .byte  83                                  // push          %ebx
  .byte  255,209                             // call          *%ecx
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  235,3                               // jmp           68 <_sk_start_pipeline_sse2+0x68>
  .byte  131,196,12                          // add           $0xc,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_just_return_sse2
.globl _sk_just_return_sse2
FUNCTION(_sk_just_return_sse2)
_sk_just_return_sse2:
  .byte  195                                 // ret

HIDDEN _sk_seed_shader_sse2
.globl _sk_seed_shader_sse2
FUNCTION(_sk_seed_shader_sse2)
_sk_seed_shader_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          7c <_sk_seed_shader_sse2+0xe>
  .byte  89                                  // pop           %ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  102,15,110,199                      // movd          %edi,%xmm0
  .byte  102,15,112,192,0                    // pshufd        $0x0,%xmm0,%xmm0
  .byte  15,91,200                           // cvtdq2ps      %xmm0,%xmm1
  .byte  15,40,145,52,136,0,0                // movaps        0x8834(%ecx),%xmm2
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,16,0                             // movups        (%eax),%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  102,15,110,202                      // movd          %edx,%xmm1
  .byte  102,15,112,201,0                    // pshufd        $0x0,%xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  139,93,12                           // mov           0xc(%ebp),%ebx
  .byte  141,67,4                            // lea           0x4(%ebx),%eax
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,41,84,36,80                      // movaps        %xmm2,0x50(%esp)
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,41,84,36,48                      // movaps        %xmm2,0x30(%esp)
  .byte  15,41,84,36,32                      // movaps        %xmm2,0x20(%esp)
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,68,36,4                         // mov           %eax,0x4(%esp)
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,145,68,136,0,0                // movaps        0x8844(%ecx),%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,19                              // call          *(%ebx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_dither_sse2
.globl _sk_dither_sse2
FUNCTION(_sk_dither_sse2)
_sk_dither_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,156,0,0,0                   // sub           $0x9c,%esp
  .byte  15,41,93,184                        // movaps        %xmm3,-0x48(%ebp)
  .byte  15,41,85,200                        // movaps        %xmm2,-0x38(%ebp)
  .byte  15,41,77,216                        // movaps        %xmm1,-0x28(%ebp)
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  232,0,0,0,0                         // call          11b <_sk_dither_sse2+0x20>
  .byte  94                                  // pop           %esi
  .byte  139,77,20                           // mov           0x14(%ebp),%ecx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  102,15,110,226                      // movd          %edx,%xmm4
  .byte  102,15,112,228,0                    // pshufd        $0x0,%xmm4,%xmm4
  .byte  243,15,111,104,32                   // movdqu        0x20(%eax),%xmm5
  .byte  102,15,254,236                      // paddd         %xmm4,%xmm5
  .byte  102,15,110,225                      // movd          %ecx,%xmm4
  .byte  102,15,112,252,0                    // pshufd        $0x0,%xmm4,%xmm7
  .byte  102,15,239,253                      // pxor          %xmm5,%xmm7
  .byte  102,15,111,182,181,135,0,0          // movdqa        0x87b5(%esi),%xmm6
  .byte  102,15,111,207                      // movdqa        %xmm7,%xmm1
  .byte  102,15,219,206                      // pand          %xmm6,%xmm1
  .byte  102,15,219,245                      // pand          %xmm5,%xmm6
  .byte  102,15,111,134,213,135,0,0          // movdqa        0x87d5(%esi),%xmm0
  .byte  102,15,111,231                      // movdqa        %xmm7,%xmm4
  .byte  102,15,219,224                      // pand          %xmm0,%xmm4
  .byte  102,15,219,197                      // pand          %xmm5,%xmm0
  .byte  102,15,111,158,197,135,0,0          // movdqa        0x87c5(%esi),%xmm3
  .byte  102,15,219,251                      // pand          %xmm3,%xmm7
  .byte  102,15,219,235                      // pand          %xmm3,%xmm5
  .byte  102,15,114,246,4                    // pslld         $0x4,%xmm6
  .byte  102,15,254,192                      // paddd         %xmm0,%xmm0
  .byte  102,15,235,198                      // por           %xmm6,%xmm0
  .byte  102,15,114,213,2                    // psrld         $0x2,%xmm5
  .byte  102,15,235,197                      // por           %xmm5,%xmm0
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  102,15,114,241,5                    // pslld         $0x5,%xmm1
  .byte  102,15,114,244,2                    // pslld         $0x2,%xmm4
  .byte  102,15,114,215,1                    // psrld         $0x1,%xmm7
  .byte  102,15,235,225                      // por           %xmm1,%xmm4
  .byte  102,15,235,224                      // por           %xmm0,%xmm4
  .byte  102,15,235,231                      // por           %xmm7,%xmm4
  .byte  15,91,196                           // cvtdq2ps      %xmm4,%xmm0
  .byte  15,89,134,229,135,0,0               // mulps         0x87e5(%esi),%xmm0
  .byte  15,88,134,245,135,0,0               // addps         0x87f5(%esi),%xmm0
  .byte  139,55                              // mov           (%edi),%esi
  .byte  243,15,16,14                        // movss         (%esi),%xmm1
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,40,69,72                         // movaps        0x48(%ebp),%xmm0
  .byte  15,88,209                           // addps         %xmm1,%xmm2
  .byte  15,40,101,216                       // movaps        -0x28(%ebp),%xmm4
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  15,88,77,200                        // addps         -0x38(%ebp),%xmm1
  .byte  15,40,93,184                        // movaps        -0x48(%ebp),%xmm3
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  102,15,239,237                      // pxor          %xmm5,%xmm5
  .byte  15,95,234                           // maxps         %xmm2,%xmm5
  .byte  15,93,227                           // minps         %xmm3,%xmm4
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,95,226                           // maxps         %xmm2,%xmm4
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  15,95,209                           // maxps         %xmm1,%xmm2
  .byte  15,40,77,88                         // movaps        0x58(%ebp),%xmm1
  .byte  141,95,8                            // lea           0x8(%edi),%ebx
  .byte  15,41,76,36,80                      // movaps        %xmm1,0x50(%esp)
  .byte  15,41,68,36,64                      // movaps        %xmm0,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,76,36,12                        // mov           %ecx,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  255,87,4                            // call          *0x4(%edi)
  .byte  129,196,156,0,0,0                   // add           $0x9c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_constant_color_sse2
.globl _sk_constant_color_sse2
FUNCTION(_sk_constant_color_sse2)
_sk_constant_color_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  243,15,16,7                         // movss         (%edi),%xmm0
  .byte  243,15,16,79,4                      // movss         0x4(%edi),%xmm1
  .byte  243,15,16,87,8                      // movss         0x8(%edi),%xmm2
  .byte  243,15,16,95,12                     // movss         0xc(%edi),%xmm3
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_load_rgba_sse2
.globl _sk_load_rgba_sse2
FUNCTION(_sk_load_rgba_sse2)
_sk_load_rgba_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,16,7                             // movups        (%edi),%xmm0
  .byte  15,16,79,16                         // movups        0x10(%edi),%xmm1
  .byte  15,16,87,32                         // movups        0x20(%edi),%xmm2
  .byte  15,16,95,48                         // movups        0x30(%edi),%xmm3
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_store_rgba_sse2
.globl _sk_store_rgba_sse2
FUNCTION(_sk_store_rgba_sse2)
_sk_store_rgba_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,17,7                             // movups        %xmm0,(%edi)
  .byte  15,17,79,16                         // movups        %xmm1,0x10(%edi)
  .byte  15,17,87,32                         // movups        %xmm2,0x20(%edi)
  .byte  15,17,95,48                         // movups        %xmm3,0x30(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_clear_sse2
.globl _sk_clear_sse2
FUNCTION(_sk_clear_sse2)
_sk_clear_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_srcatop_sse2
.globl _sk_srcatop_sse2
FUNCTION(_sk_srcatop_sse2)
_sk_srcatop_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  232,0,0,0,0                         // call          42d <_sk_srcatop_sse2+0x17>
  .byte  88                                  // pop           %eax
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,40,136,243,132,0,0               // movaps        0x84f3(%eax),%xmm1
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  15,89,125,40                        // mulps         0x28(%ebp),%xmm7
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,40,241                           // movaps        %xmm1,%xmm6
  .byte  15,89,117,56                        // mulps         0x38(%ebp),%xmm6
  .byte  15,88,230                           // addps         %xmm6,%xmm4
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_dstatop_sse2
.globl _sk_dstatop_sse2
FUNCTION(_sk_dstatop_sse2)
_sk_dstatop_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  232,0,0,0,0                         // call          4d7 <_sk_dstatop_sse2+0x11>
  .byte  88                                  // pop           %eax
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,89,117,40                        // mulps         0x28(%ebp),%xmm6
  .byte  15,40,184,89,132,0,0                // movaps        0x8459(%eax),%xmm7
  .byte  15,92,125,88                        // subps         0x58(%ebp),%xmm7
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,88,239                           // addps         %xmm7,%xmm5
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  15,41,92,36,32                      // movaps        %xmm3,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_srcin_sse2
.globl _sk_srcin_sse2
FUNCTION(_sk_srcin_sse2)
_sk_srcin_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_dstin_sse2
.globl _sk_dstin_sse2
FUNCTION(_sk_dstin_sse2)
_sk_dstin_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_srcout_sse2
.globl _sk_srcout_sse2
FUNCTION(_sk_srcout_sse2)
_sk_srcout_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          64b <_sk_srcout_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,40,184,245,130,0,0               // movaps        0x82f5(%eax),%xmm7
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_dstout_sse2
.globl _sk_dstout_sse2
FUNCTION(_sk_dstout_sse2)
_sk_dstout_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          6c3 <_sk_dstout_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,160,141,130,0,0               // movaps        0x828d(%eax),%xmm4
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,92,36,32                      // movaps        %xmm3,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_srcover_sse2
.globl _sk_srcover_sse2
FUNCTION(_sk_srcover_sse2)
_sk_srcover_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  232,0,0,0,0                         // call          753 <_sk_srcover_sse2+0x17>
  .byte  88                                  // pop           %eax
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,40,128,13,130,0,0                // movaps        0x820d(%eax),%xmm0
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  15,89,125,56                        // mulps         0x38(%ebp),%xmm7
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,89,247                           // mulps         %xmm7,%xmm6
  .byte  15,88,230                           // addps         %xmm6,%xmm4
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,216                           // addps         %xmm0,%xmm3
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_dstover_sse2
.globl _sk_dstover_sse2
FUNCTION(_sk_dstover_sse2)
_sk_dstover_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          7ea <_sk_dstover_sse2+0xe>
  .byte  90                                  // pop           %edx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,162,134,129,0,0               // movaps        0x8186(%edx),%xmm4
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,88,213                           // addps         %xmm5,%xmm2
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  141,90,4                            // lea           0x4(%edx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,18                              // call          *(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_modulate_sse2
.globl _sk_modulate_sse2
FUNCTION(_sk_modulate_sse2)
_sk_modulate_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_multiply_sse2
.globl _sk_multiply_sse2
FUNCTION(_sk_multiply_sse2)
_sk_multiply_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,140,0,0,0                   // sub           $0x8c,%esp
  .byte  15,41,85,200                        // movaps        %xmm2,-0x38(%ebp)
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  232,0,0,0,0                         // call          8e0 <_sk_multiply_sse2+0x18>
  .byte  88                                  // pop           %eax
  .byte  15,40,144,160,128,0,0               // movaps        0x80a0(%eax),%xmm2
  .byte  15,40,250                           // movaps        %xmm2,%xmm7
  .byte  15,92,125,88                        // subps         0x58(%ebp),%xmm7
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,88,238                           // addps         %xmm6,%xmm5
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  15,89,241                           // mulps         %xmm1,%xmm6
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,41,77,216                        // movaps        %xmm1,-0x28(%ebp)
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,40,101,200                       // movaps        -0x38(%ebp),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  15,89,251                           // mulps         %xmm3,%xmm7
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,40,77,216                        // movaps        -0x28(%ebp),%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,140,0,0,0                   // add           $0x8c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_plus__sse2
.globl _sk_plus__sse2
FUNCTION(_sk_plus__sse2)
_sk_plus__sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,88,199                           // addps         %xmm7,%xmm0
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,88,213                           // addps         %xmm5,%xmm2
  .byte  15,88,220                           // addps         %xmm4,%xmm3
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_screen_sse2
.globl _sk_screen_sse2
FUNCTION(_sk_screen_sse2)
_sk_screen_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,92,225                           // subps         %xmm1,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,88,239                           // addps         %xmm7,%xmm5
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,92,234                           // subps         %xmm2,%xmm5
  .byte  15,40,77,88                         // movaps        0x58(%ebp),%xmm1
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,88,241                           // addps         %xmm1,%xmm6
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,76,36,80                      // movaps        %xmm1,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_xor__sse2
.globl _sk_xor__sse2
FUNCTION(_sk_xor__sse2)
_sk_xor__sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  232,0,0,0,0                         // call          ac7 <_sk_xor__sse2+0x12>
  .byte  88                                  // pop           %eax
  .byte  15,40,176,201,126,0,0               // movaps        0x7ec9(%eax),%xmm6
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,92,125,88                        // subps         0x58(%ebp),%xmm7
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,89,93,40                         // mulps         0x28(%ebp),%xmm3
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,40,93,56                         // movaps        0x38(%ebp),%xmm3
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,88,213                           // addps         %xmm5,%xmm2
  .byte  15,89,125,216                       // mulps         -0x28(%ebp),%xmm7
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,92,36,48                      // movaps        %xmm3,0x30(%esp)
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  15,41,92,36,32                      // movaps        %xmm3,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_darken_sse2
.globl _sk_darken_sse2
FUNCTION(_sk_darken_sse2)
_sk_darken_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,89,251                           // mulps         %xmm3,%xmm7
  .byte  15,95,207                           // maxps         %xmm7,%xmm1
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  15,95,227                           // maxps         %xmm3,%xmm4
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,89,235                           // mulps         %xmm3,%xmm5
  .byte  15,95,213                           // maxps         %xmm5,%xmm2
  .byte  15,88,227                           // addps         %xmm3,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  232,0,0,0,0                         // call          bc1 <_sk_darken_sse2+0x63>
  .byte  88                                  // pop           %eax
  .byte  15,40,144,223,125,0,0               // movaps        0x7ddf(%eax),%xmm2
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,242                           // addps         %xmm2,%xmm6
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,40,85,40                         // movaps        0x28(%ebp),%xmm2
  .byte  15,41,84,36,32                      // movaps        %xmm2,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_lighten_sse2
.globl _sk_lighten_sse2
FUNCTION(_sk_lighten_sse2)
_sk_lighten_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,89,251                           // mulps         %xmm3,%xmm7
  .byte  15,93,207                           // minps         %xmm7,%xmm1
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  15,93,227                           // minps         %xmm3,%xmm4
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,89,235                           // mulps         %xmm3,%xmm5
  .byte  15,93,213                           // minps         %xmm5,%xmm2
  .byte  15,88,227                           // addps         %xmm3,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  232,0,0,0,0                         // call          c86 <_sk_lighten_sse2+0x63>
  .byte  88                                  // pop           %eax
  .byte  15,40,144,42,125,0,0                // movaps        0x7d2a(%eax),%xmm2
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,242                           // addps         %xmm2,%xmm6
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,40,85,40                         // movaps        0x28(%ebp),%xmm2
  .byte  15,41,84,36,32                      // movaps        %xmm2,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_difference_sse2
.globl _sk_difference_sse2
FUNCTION(_sk_difference_sse2)
_sk_difference_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,89,251                           // mulps         %xmm3,%xmm7
  .byte  15,93,207                           // minps         %xmm7,%xmm1
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  15,93,227                           // minps         %xmm3,%xmm4
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,89,235                           // mulps         %xmm3,%xmm5
  .byte  15,93,213                           // minps         %xmm5,%xmm2
  .byte  15,88,227                           // addps         %xmm3,%xmm4
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  232,0,0,0,0                         // call          d54 <_sk_difference_sse2+0x6c>
  .byte  88                                  // pop           %eax
  .byte  15,40,144,108,124,0,0               // movaps        0x7c6c(%eax),%xmm2
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,242                           // addps         %xmm2,%xmm6
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,40,85,40                         // movaps        0x28(%ebp),%xmm2
  .byte  15,41,84,36,32                      // movaps        %xmm2,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_exclusion_sse2
.globl _sk_exclusion_sse2
FUNCTION(_sk_exclusion_sse2)
_sk_exclusion_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  232,0,0,0,0                         // call          dca <_sk_exclusion_sse2+0x14>
  .byte  88                                  // pop           %eax
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,88,199                           // addps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,40,144,6,124,0,0                 // movaps        0x7c06(%eax),%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_colorburn_sse2
.globl _sk_colorburn_sse2
FUNCTION(_sk_colorburn_sse2)
_sk_colorburn_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,172,0,0,0                   // sub           $0xac,%esp
  .byte  15,41,85,168                        // movaps        %xmm2,-0x58(%ebp)
  .byte  15,41,77,200                        // movaps        %xmm1,-0x38(%ebp)
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  232,0,0,0,0                         // call          e7b <_sk_colorburn_sse2+0x1c>
  .byte  88                                  // pop           %eax
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,92,69,40                         // subps         0x28(%ebp),%xmm0
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  15,94,193                           // divps         %xmm1,%xmm0
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,93,240                           // minps         %xmm0,%xmm6
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,92,238                           // subps         %xmm6,%xmm5
  .byte  15,40,176,101,123,0,0               // movaps        0x7b65(%eax),%xmm6
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,41,101,216                       // movaps        %xmm4,-0x28(%ebp)
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  15,88,235                           // addps         %xmm3,%xmm5
  .byte  15,84,200                           // andps         %xmm0,%xmm1
  .byte  15,85,197                           // andnps        %xmm5,%xmm0
  .byte  15,86,193                           // orps          %xmm1,%xmm0
  .byte  15,92,242                           // subps         %xmm2,%xmm6
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,40,85,40                         // movaps        0x28(%ebp),%xmm2
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,194,77,88,0                      // cmpeqps       0x58(%ebp),%xmm1
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,84,217                           // andps         %xmm1,%xmm3
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  15,86,203                           // orps          %xmm3,%xmm1
  .byte  15,41,77,184                        // movaps        %xmm1,-0x48(%ebp)
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,69,56                         // subps         0x38(%ebp),%xmm0
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,85,200                        // movaps        -0x38(%ebp),%xmm2
  .byte  15,94,194                           // divps         %xmm2,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,93,200                           // minps         %xmm0,%xmm1
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,194,215,0                        // cmpeqps       %xmm7,%xmm2
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,84,202                           // andps         %xmm2,%xmm1
  .byte  15,85,208                           // andnps        %xmm0,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,40,77,88                         // movaps        0x58(%ebp),%xmm1
  .byte  15,194,233,0                        // cmpeqps       %xmm1,%xmm5
  .byte  15,88,216                           // addps         %xmm0,%xmm3
  .byte  15,84,221                           // andps         %xmm5,%xmm3
  .byte  15,85,234                           // andnps        %xmm2,%xmm5
  .byte  15,86,235                           // orps          %xmm3,%xmm5
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,92,69,72                         // subps         0x48(%ebp),%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,93,168                        // movaps        -0x58(%ebp),%xmm3
  .byte  15,94,195                           // divps         %xmm3,%xmm0
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,93,208                           // minps         %xmm0,%xmm2
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,40,77,216                        // movaps        -0x28(%ebp),%xmm1
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,194,250,0                        // cmpeqps       %xmm2,%xmm7
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  15,84,215                           // andps         %xmm7,%xmm2
  .byte  15,85,248                           // andnps        %xmm0,%xmm7
  .byte  15,86,250                           // orps          %xmm2,%xmm7
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,194,85,88,0                      // cmpeqps       0x58(%ebp),%xmm2
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,84,202                           // andps         %xmm2,%xmm1
  .byte  15,85,215                           // andnps        %xmm7,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  15,40,77,88                         // movaps        0x58(%ebp),%xmm1
  .byte  15,89,241                           // mulps         %xmm1,%xmm6
  .byte  15,88,222                           // addps         %xmm6,%xmm3
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,76,36,80                      // movaps        %xmm1,0x50(%esp)
  .byte  15,41,68,36,64                      // movaps        %xmm0,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,69,184                        // movaps        -0x48(%ebp),%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,172,0,0,0                   // add           $0xac,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_colordodge_sse2
.globl _sk_colordodge_sse2
FUNCTION(_sk_colordodge_sse2)
_sk_colordodge_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,172,0,0,0                   // sub           $0xac,%esp
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  15,41,85,168                        // movaps        %xmm2,-0x58(%ebp)
  .byte  15,41,77,184                        // movaps        %xmm1,-0x48(%ebp)
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  232,0,0,0,0                         // call          103d <_sk_colordodge_sse2+0x1f>
  .byte  88                                  // pop           %eax
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,40,215                           // movaps        %xmm7,%xmm2
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  15,92,229                           // subps         %xmm5,%xmm4
  .byte  15,94,212                           // divps         %xmm4,%xmm2
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,93,226                           // minps         %xmm2,%xmm4
  .byte  15,40,152,179,121,0,0               // movaps        0x79b3(%eax),%xmm3
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,92,208                           // subps         %xmm0,%xmm2
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  15,88,226                           // addps         %xmm2,%xmm4
  .byte  15,84,232                           // andps         %xmm0,%xmm5
  .byte  15,85,196                           // andnps        %xmm4,%xmm0
  .byte  15,86,197                           // orps          %xmm5,%xmm0
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  15,41,93,200                        // movaps        %xmm3,-0x38(%ebp)
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,194,236,0                        // cmpeqps       %xmm4,%xmm5
  .byte  15,88,209                           // addps         %xmm1,%xmm2
  .byte  15,84,213                           // andps         %xmm5,%xmm2
  .byte  15,85,232                           // andnps        %xmm0,%xmm5
  .byte  15,86,234                           // orps          %xmm2,%xmm5
  .byte  15,40,93,56                         // movaps        0x38(%ebp),%xmm3
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  15,40,77,184                        // movaps        -0x48(%ebp),%xmm1
  .byte  15,92,241                           // subps         %xmm1,%xmm6
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,93,240                           // minps         %xmm0,%xmm6
  .byte  15,40,85,216                        // movaps        -0x28(%ebp),%xmm2
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,194,207,0                        // cmpeqps       %xmm7,%xmm1
  .byte  15,89,247                           // mulps         %xmm7,%xmm6
  .byte  15,88,242                           // addps         %xmm2,%xmm6
  .byte  15,84,193                           // andps         %xmm1,%xmm0
  .byte  15,85,206                           // andnps        %xmm6,%xmm1
  .byte  15,86,200                           // orps          %xmm0,%xmm1
  .byte  15,40,117,200                       // movaps        -0x38(%ebp),%xmm6
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,194,244,0                        // cmpeqps       %xmm4,%xmm6
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  15,84,214                           // andps         %xmm6,%xmm2
  .byte  15,85,241                           // andnps        %xmm1,%xmm6
  .byte  15,86,242                           // orps          %xmm2,%xmm6
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,89,77,72                         // mulps         0x48(%ebp),%xmm1
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  15,40,69,168                        // movaps        -0x58(%ebp),%xmm0
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,94,203                           // divps         %xmm3,%xmm1
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  15,93,217                           // minps         %xmm1,%xmm3
  .byte  15,40,85,216                        // movaps        -0x28(%ebp),%xmm2
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,194,207,0                        // cmpeqps       %xmm7,%xmm1
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,84,193                           // andps         %xmm1,%xmm0
  .byte  15,85,203                           // andnps        %xmm3,%xmm1
  .byte  15,86,200                           // orps          %xmm0,%xmm1
  .byte  15,40,69,200                        // movaps        -0x38(%ebp),%xmm0
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  15,194,226,0                        // cmpeqps       %xmm2,%xmm4
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,84,220                           // andps         %xmm4,%xmm3
  .byte  15,85,225                           // andnps        %xmm1,%xmm4
  .byte  15,86,227                           // orps          %xmm3,%xmm4
  .byte  15,40,77,88                         // movaps        0x58(%ebp),%xmm1
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,76,36,80                      // movaps        %xmm1,0x50(%esp)
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,172,0,0,0                   // add           $0xac,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_hardlight_sse2
.globl _sk_hardlight_sse2
FUNCTION(_sk_hardlight_sse2)
_sk_hardlight_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,156,0,0,0                   // sub           $0x9c,%esp
  .byte  15,40,250                           // movaps        %xmm2,%xmm7
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  232,0,0,0,0                         // call          11df <_sk_hardlight_sse2+0x1a>
  .byte  88                                  // pop           %eax
  .byte  15,40,176,33,120,0,0                // movaps        0x7821(%eax),%xmm6
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,92,77,88                         // subps         0x58(%ebp),%xmm1
  .byte  15,41,77,184                        // movaps        %xmm1,-0x48(%ebp)
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  15,92,242                           // subps         %xmm2,%xmm6
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,41,93,200                        // movaps        %xmm3,-0x38(%ebp)
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,216                           // addps         %xmm0,%xmm3
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,92,244                           // subps         %xmm4,%xmm6
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,40,77,216                        // movaps        -0x28(%ebp),%xmm1
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,89,85,88                         // mulps         0x58(%ebp),%xmm2
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,92,240                           // subps         %xmm0,%xmm6
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,193,2                        // cmpleps       %xmm1,%xmm0
  .byte  15,89,101,40                        // mulps         0x28(%ebp),%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,84,224                           // andps         %xmm0,%xmm4
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  15,86,196                           // orps          %xmm4,%xmm0
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,40,93,184                        // movaps        -0x48(%ebp),%xmm3
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  15,40,117,200                       // movaps        -0x38(%ebp),%xmm6
  .byte  15,89,117,56                        // mulps         0x38(%ebp),%xmm6
  .byte  15,88,243                           // addps         %xmm3,%xmm6
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,92,101,56                        // subps         0x38(%ebp),%xmm4
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,92,220                           // subps         %xmm4,%xmm3
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,194,225,2                        // cmpleps       %xmm1,%xmm4
  .byte  15,89,109,56                        // mulps         0x38(%ebp),%xmm5
  .byte  15,88,237                           // addps         %xmm5,%xmm5
  .byte  15,84,236                           // andps         %xmm4,%xmm5
  .byte  15,85,227                           // andnps        %xmm3,%xmm4
  .byte  15,86,229                           // orps          %xmm5,%xmm4
  .byte  15,88,230                           // addps         %xmm6,%xmm4
  .byte  15,40,109,184                       // movaps        -0x48(%ebp),%xmm5
  .byte  15,89,239                           // mulps         %xmm7,%xmm5
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,40,77,200                        // movaps        -0x38(%ebp),%xmm1
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,40,109,216                       // movaps        -0x28(%ebp),%xmm5
  .byte  15,92,239                           // subps         %xmm7,%xmm5
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,246                           // addps         %xmm6,%xmm6
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  15,40,239                           // movaps        %xmm7,%xmm5
  .byte  15,88,237                           // addps         %xmm5,%xmm5
  .byte  15,40,117,216                       // movaps        -0x28(%ebp),%xmm6
  .byte  15,194,238,2                        // cmpleps       %xmm6,%xmm5
  .byte  15,89,251                           // mulps         %xmm3,%xmm7
  .byte  15,88,255                           // addps         %xmm7,%xmm7
  .byte  15,84,253                           // andps         %xmm5,%xmm7
  .byte  15,85,234                           // andnps        %xmm2,%xmm5
  .byte  15,86,239                           // orps          %xmm7,%xmm5
  .byte  15,88,233                           // addps         %xmm1,%xmm5
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  15,40,93,200                        // movaps        -0x38(%ebp),%xmm3
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  15,88,243                           // addps         %xmm3,%xmm6
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,84,36,80                      // movaps        %xmm2,0x50(%esp)
  .byte  15,40,77,72                         // movaps        0x48(%ebp),%xmm1
  .byte  15,41,76,36,64                      // movaps        %xmm1,0x40(%esp)
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,156,0,0,0                   // add           $0x9c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_overlay_sse2
.globl _sk_overlay_sse2
FUNCTION(_sk_overlay_sse2)
_sk_overlay_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,156,0,0,0                   // sub           $0x9c,%esp
  .byte  15,41,85,184                        // movaps        %xmm2,-0x48(%ebp)
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  232,0,0,0,0                         // call          136a <_sk_overlay_sse2+0x18>
  .byte  88                                  // pop           %eax
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,40,144,166,118,0,0               // movaps        0x76a6(%eax),%xmm2
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,92,232                           // subps         %xmm0,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  15,89,85,40                         // mulps         0x28(%ebp),%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,41,93,200                        // movaps        %xmm3,-0x38(%ebp)
  .byte  15,92,244                           // subps         %xmm4,%xmm6
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,92,199                           // subps         %xmm7,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  15,89,251                           // mulps         %xmm3,%xmm7
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  15,92,240                           // subps         %xmm0,%xmm6
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  15,89,101,40                        // mulps         0x28(%ebp),%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,84,224                           // andps         %xmm0,%xmm4
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  15,86,196                           // orps          %xmm4,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,89,117,56                        // mulps         0x38(%ebp),%xmm6
  .byte  15,88,242                           // addps         %xmm2,%xmm6
  .byte  15,40,85,200                        // movaps        -0x38(%ebp),%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,40,93,56                         // movaps        0x38(%ebp),%xmm3
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  15,89,226                           // mulps         %xmm2,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,40,215                           // movaps        %xmm7,%xmm2
  .byte  15,92,212                           // subps         %xmm4,%xmm2
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,194,101,88,2                     // cmpleps       0x58(%ebp),%xmm4
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,84,204                           // andps         %xmm4,%xmm1
  .byte  15,85,226                           // andnps        %xmm2,%xmm4
  .byte  15,86,225                           // orps          %xmm1,%xmm4
  .byte  15,88,230                           // addps         %xmm6,%xmm4
  .byte  15,40,117,184                       // movaps        -0x48(%ebp),%xmm6
  .byte  15,89,238                           // mulps         %xmm6,%xmm5
  .byte  15,40,85,216                        // movaps        -0x28(%ebp),%xmm2
  .byte  15,89,85,72                         // mulps         0x48(%ebp),%xmm2
  .byte  15,88,213                           // addps         %xmm5,%xmm2
  .byte  15,40,77,200                        // movaps        -0x38(%ebp),%xmm1
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,92,238                           // subps         %xmm6,%xmm5
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,92,117,72                        // subps         0x48(%ebp),%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,246                           // addps         %xmm6,%xmm6
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,88,237                           // addps         %xmm5,%xmm5
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,194,238,2                        // cmpleps       %xmm6,%xmm5
  .byte  15,40,117,184                       // movaps        -0x48(%ebp),%xmm6
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,88,246                           // addps         %xmm6,%xmm6
  .byte  15,84,245                           // andps         %xmm5,%xmm6
  .byte  15,85,239                           // andnps        %xmm7,%xmm5
  .byte  15,86,238                           // orps          %xmm6,%xmm5
  .byte  15,88,234                           // addps         %xmm2,%xmm5
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  15,40,117,216                       // movaps        -0x28(%ebp),%xmm6
  .byte  15,89,242                           // mulps         %xmm2,%xmm6
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  15,88,222                           // addps         %xmm6,%xmm3
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,84,36,80                      // movaps        %xmm2,0x50(%esp)
  .byte  15,40,77,72                         // movaps        0x48(%ebp),%xmm1
  .byte  15,41,76,36,64                      // movaps        %xmm1,0x40(%esp)
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,156,0,0,0                   // add           $0x9c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_softlight_sse2
.globl _sk_softlight_sse2
FUNCTION(_sk_softlight_sse2)
_sk_softlight_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,12,1,0,0                    // sub           $0x10c,%esp
  .byte  15,41,93,200                        // movaps        %xmm3,-0x38(%ebp)
  .byte  15,41,149,72,255,255,255            // movaps        %xmm2,-0xb8(%ebp)
  .byte  15,41,141,88,255,255,255            // movaps        %xmm1,-0xa8(%ebp)
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,194,218,1                        // cmpltps       %xmm2,%xmm3
  .byte  15,41,93,184                        // movaps        %xmm3,-0x48(%ebp)
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  15,84,203                           // andps         %xmm3,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  232,0,0,0,0                         // call          1539 <_sk_softlight_sse2+0x51>
  .byte  88                                  // pop           %eax
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,128,247,116,0,0               // movaps        0x74f7(%eax),%xmm0
  .byte  15,41,133,120,255,255,255           // movaps        %xmm0,-0x88(%ebp)
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  15,40,184,231,116,0,0               // movaps        0x74e7(%eax),%xmm7
  .byte  15,41,125,216                       // movaps        %xmm7,-0x28(%ebp)
  .byte  15,92,249                           // subps         %xmm1,%xmm7
  .byte  15,82,209                           // rsqrtps       %xmm1,%xmm2
  .byte  15,83,242                           // rcpps         %xmm2,%xmm6
  .byte  15,92,241                           // subps         %xmm1,%xmm6
  .byte  15,40,128,7,117,0,0                 // movaps        0x7507(%eax),%xmm0
  .byte  15,41,69,168                        // movaps        %xmm0,-0x58(%ebp)
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  15,194,194,2                        // cmpleps       %xmm2,%xmm0
  .byte  15,84,200                           // andps         %xmm0,%xmm1
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  15,86,193                           // orps          %xmm1,%xmm0
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,88,246                           // addps         %xmm6,%xmm6
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,93,200                        // movaps        -0x38(%ebp),%xmm3
  .byte  15,92,235                           // subps         %xmm3,%xmm5
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,89,233                           // mulps         %xmm1,%xmm5
  .byte  15,88,197                           // addps         %xmm5,%xmm0
  .byte  15,40,77,216                        // movaps        -0x28(%ebp),%xmm1
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,92,234                           // subps         %xmm2,%xmm5
  .byte  15,41,109,152                       // movaps        %xmm5,-0x68(%ebp)
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  15,41,77,136                        // movaps        %xmm1,-0x78(%ebp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,89,233                           // mulps         %xmm1,%xmm5
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,88,250                           // addps         %xmm2,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  15,194,242,2                        // cmpleps       %xmm2,%xmm6
  .byte  15,84,254                           // andps         %xmm6,%xmm7
  .byte  15,85,240                           // andnps        %xmm0,%xmm6
  .byte  15,86,247                           // orps          %xmm7,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,41,181,104,255,255,255           // movaps        %xmm6,-0x98(%ebp)
  .byte  15,40,93,56                         // movaps        0x38(%ebp),%xmm3
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,94,230                           // divps         %xmm6,%xmm4
  .byte  15,84,101,184                       // andps         -0x48(%ebp),%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,89,237                           // mulps         %xmm5,%xmm5
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,133,120,255,255,255           // addps         -0x88(%ebp),%xmm0
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,125,216                       // movaps        -0x28(%ebp),%xmm7
  .byte  15,92,252                           // subps         %xmm4,%xmm7
  .byte  15,82,236                           // rsqrtps       %xmm4,%xmm5
  .byte  15,83,237                           // rcpps         %xmm5,%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  15,89,101,168                       // mulps         -0x58(%ebp),%xmm4
  .byte  15,88,224                           // addps         %xmm0,%xmm4
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,198,2                        // cmpleps       %xmm6,%xmm0
  .byte  15,84,224                           // andps         %xmm0,%xmm4
  .byte  15,85,197                           // andnps        %xmm5,%xmm0
  .byte  15,86,196                           // orps          %xmm4,%xmm0
  .byte  15,40,141,88,255,255,255            // movaps        -0xa8(%ebp),%xmm1
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,92,234                           // subps         %xmm2,%xmm5
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,89,238                           // mulps         %xmm6,%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,89,235                           // mulps         %xmm3,%xmm5
  .byte  15,88,197                           // addps         %xmm5,%xmm0
  .byte  15,89,77,152                        // mulps         -0x68(%ebp),%xmm1
  .byte  15,40,109,136                       // movaps        -0x78(%ebp),%xmm5
  .byte  15,89,235                           // mulps         %xmm3,%xmm5
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,88,250                           // addps         %xmm2,%xmm7
  .byte  15,89,251                           // mulps         %xmm3,%xmm7
  .byte  15,194,226,2                        // cmpleps       %xmm2,%xmm4
  .byte  15,84,252                           // andps         %xmm4,%xmm7
  .byte  15,85,224                           // andnps        %xmm0,%xmm4
  .byte  15,86,231                           // orps          %xmm7,%xmm4
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,84,125,184                       // andps         -0x48(%ebp),%xmm7
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  15,40,149,120,255,255,255           // movaps        -0x88(%ebp),%xmm2
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,40,77,168                        // movaps        -0x58(%ebp),%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,82,199                           // rsqrtps       %xmm7,%xmm0
  .byte  15,83,192                           // rcpps         %xmm0,%xmm0
  .byte  15,92,199                           // subps         %xmm7,%xmm0
  .byte  15,88,255                           // addps         %xmm7,%xmm7
  .byte  15,88,255                           // addps         %xmm7,%xmm7
  .byte  15,40,239                           // movaps        %xmm7,%xmm5
  .byte  15,89,237                           // mulps         %xmm5,%xmm5
  .byte  15,88,239                           // addps         %xmm7,%xmm5
  .byte  15,40,250                           // movaps        %xmm2,%xmm7
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,88,237                           // addps         %xmm5,%xmm5
  .byte  15,88,237                           // addps         %xmm5,%xmm5
  .byte  15,194,238,2                        // cmpleps       %xmm6,%xmm5
  .byte  15,84,213                           // andps         %xmm5,%xmm2
  .byte  15,85,232                           // andnps        %xmm0,%xmm5
  .byte  15,86,234                           // orps          %xmm2,%xmm5
  .byte  15,40,133,72,255,255,255            // movaps        -0xb8(%ebp),%xmm0
  .byte  15,40,77,152                        // movaps        -0x68(%ebp),%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,40,125,200                       // movaps        -0x38(%ebp),%xmm7
  .byte  15,92,199                           // subps         %xmm7,%xmm0
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,40,117,136                       // movaps        -0x78(%ebp),%xmm6
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  15,40,77,216                        // movaps        -0x28(%ebp),%xmm1
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,194,215,2                        // cmpleps       %xmm7,%xmm2
  .byte  15,84,202                           // andps         %xmm2,%xmm1
  .byte  15,85,213                           // andnps        %xmm5,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,254                           // addps         %xmm6,%xmm7
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,133,104,255,255,255           // movaps        -0x98(%ebp),%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,12,1,0,0                    // add           $0x10c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_hue_sse2
.globl _sk_hue_sse2
FUNCTION(_sk_hue_sse2)
_sk_hue_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,236,0,0,0                   // sub           $0xec,%esp
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  15,40,85,40                         // movaps        0x28(%ebp),%xmm2
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,95,252                           // maxps         %xmm4,%xmm7
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,95,223                           // maxps         %xmm7,%xmm3
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,93,252                           // minps         %xmm4,%xmm7
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,93,231                           // minps         %xmm7,%xmm4
  .byte  15,92,220                           // subps         %xmm4,%xmm3
  .byte  232,0,0,0,0                         // call          180a <_sk_hue_sse2+0x3f>
  .byte  88                                  // pop           %eax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,41,101,200                       // movaps        %xmm4,-0x38(%ebp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,89,238                           // mulps         %xmm6,%xmm5
  .byte  15,40,184,118,114,0,0               // movaps        0x7276(%eax),%xmm7
  .byte  15,41,125,168                       // movaps        %xmm7,-0x58(%ebp)
  .byte  15,92,125,88                        // subps         0x58(%ebp),%xmm7
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,41,133,104,255,255,255           // movaps        %xmm0,-0x98(%ebp)
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,41,141,120,255,255,255           // movaps        %xmm1,-0x88(%ebp)
  .byte  15,40,69,216                        // movaps        -0x28(%ebp),%xmm0
  .byte  15,89,248                           // mulps         %xmm0,%xmm7
  .byte  15,41,125,136                       // movaps        %xmm7,-0x78(%ebp)
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,41,101,184                       // movaps        %xmm4,-0x48(%ebp)
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,93,200                           // minps         %xmm0,%xmm1
  .byte  15,40,117,200                       // movaps        -0x38(%ebp),%xmm6
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,93,249                           // minps         %xmm1,%xmm7
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,95,200                           // maxps         %xmm0,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,95,209                           // maxps         %xmm1,%xmm2
  .byte  15,92,215                           // subps         %xmm7,%xmm2
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,92,239                           // subps         %xmm7,%xmm5
  .byte  15,92,199                           // subps         %xmm7,%xmm0
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,89,235                           // mulps         %xmm3,%xmm5
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,40,152,70,114,0,0                // movaps        0x7246(%eax),%xmm3
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,40,160,86,114,0,0                // movaps        0x7256(%eax),%xmm4
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,249                           // addps         %xmm1,%xmm7
  .byte  15,40,152,102,114,0,0               // movaps        0x7266(%eax),%xmm3
  .byte  15,40,77,72                         // movaps        0x48(%ebp),%xmm1
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  15,94,242                           // divps         %xmm2,%xmm6
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,94,250                           // divps         %xmm2,%xmm7
  .byte  15,94,194                           // divps         %xmm2,%xmm0
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,194,213,4                        // cmpneqps      %xmm5,%xmm2
  .byte  15,84,242                           // andps         %xmm2,%xmm6
  .byte  15,84,250                           // andps         %xmm2,%xmm7
  .byte  15,40,239                           // movaps        %xmm7,%xmm5
  .byte  15,84,208                           // andps         %xmm0,%xmm2
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,89,69,216                        // mulps         -0x28(%ebp),%xmm0
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,199                           // addps         %xmm7,%xmm0
  .byte  15,89,77,184                        // mulps         -0x48(%ebp),%xmm1
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,88,241                           // addps         %xmm1,%xmm6
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,88,249                           // addps         %xmm1,%xmm7
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,93,193                           // minps         %xmm1,%xmm0
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,93,208                           // minps         %xmm0,%xmm2
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,40,239                           // movaps        %xmm7,%xmm5
  .byte  15,41,109,200                       // movaps        %xmm5,-0x38(%ebp)
  .byte  15,95,193                           // maxps         %xmm1,%xmm0
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,95,248                           // maxps         %xmm0,%xmm7
  .byte  15,40,69,216                        // movaps        -0x28(%ebp),%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,88,224                           // addps         %xmm0,%xmm4
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,220                           // addps         %xmm4,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,194,194,2                        // cmpleps       %xmm2,%xmm0
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,41,101,216                       // movaps        %xmm4,-0x28(%ebp)
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  15,94,212                           // divps         %xmm4,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,85,234                           // andnps        %xmm2,%xmm5
  .byte  15,84,240                           // andps         %xmm0,%xmm6
  .byte  15,86,245                           // orps          %xmm5,%xmm6
  .byte  15,40,109,184                       // movaps        -0x48(%ebp),%xmm5
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,40,101,168                       // movaps        -0x58(%ebp),%xmm4
  .byte  15,92,229                           // subps         %xmm5,%xmm4
  .byte  15,41,101,168                       // movaps        %xmm4,-0x58(%ebp)
  .byte  15,88,109,88                        // addps         0x58(%ebp),%xmm5
  .byte  15,92,234                           // subps         %xmm2,%xmm5
  .byte  15,41,109,184                       // movaps        %xmm5,-0x48(%ebp)
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,194,215,1                        // cmpltps       %xmm7,%xmm2
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,85,230                           // andnps        %xmm6,%xmm4
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  15,92,235                           // subps         %xmm3,%xmm5
  .byte  15,41,109,152                       // movaps        %xmm5,-0x68(%ebp)
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  15,94,247                           // divps         %xmm7,%xmm6
  .byte  15,88,243                           // addps         %xmm3,%xmm6
  .byte  15,84,242                           // andps         %xmm2,%xmm6
  .byte  15,86,244                           // orps          %xmm4,%xmm6
  .byte  15,40,101,200                       // movaps        -0x38(%ebp),%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,94,101,216                       // divps         -0x28(%ebp),%xmm4
  .byte  15,88,227                           // addps         %xmm3,%xmm4
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,85,236                           // andnps        %xmm4,%xmm5
  .byte  15,40,101,200                       // movaps        -0x38(%ebp),%xmm4
  .byte  15,84,224                           // andps         %xmm0,%xmm4
  .byte  15,86,229                           // orps          %xmm5,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,85,236                           // andnps        %xmm4,%xmm5
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  15,89,101,152                       // mulps         -0x68(%ebp),%xmm4
  .byte  15,94,231                           // divps         %xmm7,%xmm4
  .byte  15,88,227                           // addps         %xmm3,%xmm4
  .byte  15,84,226                           // andps         %xmm2,%xmm4
  .byte  15,86,229                           // orps          %xmm5,%xmm4
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,94,101,216                       // divps         -0x28(%ebp),%xmm4
  .byte  15,88,227                           // addps         %xmm3,%xmm4
  .byte  15,84,200                           // andps         %xmm0,%xmm1
  .byte  15,85,196                           // andnps        %xmm4,%xmm0
  .byte  15,86,193                           // orps          %xmm1,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,89,69,152                        // mulps         -0x68(%ebp),%xmm0
  .byte  15,94,199                           // divps         %xmm7,%xmm0
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,84,194                           // andps         %xmm2,%xmm0
  .byte  15,86,193                           // orps          %xmm1,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,95,241                           // maxps         %xmm1,%xmm6
  .byte  15,95,233                           // maxps         %xmm1,%xmm5
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  15,95,193                           // maxps         %xmm1,%xmm0
  .byte  15,40,125,168                       // movaps        -0x58(%ebp),%xmm7
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,173,104,255,255,255           // movaps        -0x98(%ebp),%xmm5
  .byte  15,88,233                           // addps         %xmm1,%xmm5
  .byte  15,88,238                           // addps         %xmm6,%xmm5
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,149,120,255,255,255           // movaps        -0x88(%ebp),%xmm2
  .byte  15,88,209                           // addps         %xmm1,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  15,88,125,136                       // addps         -0x78(%ebp),%xmm7
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  15,40,215                           // movaps        %xmm7,%xmm2
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,40,93,184                        // movaps        -0x48(%ebp),%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,236,0,0,0                   // add           $0xec,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_saturation_sse2
.globl _sk_saturation_sse2
FUNCTION(_sk_saturation_sse2)
_sk_saturation_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,12,1,0,0                    // sub           $0x10c,%esp
  .byte  15,41,149,72,255,255,255            // movaps        %xmm2,-0xb8(%ebp)
  .byte  15,41,141,88,255,255,255            // movaps        %xmm1,-0xa8(%ebp)
  .byte  15,41,133,104,255,255,255           // movaps        %xmm0,-0x98(%ebp)
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,95,226                           // maxps         %xmm2,%xmm4
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,95,244                           // maxps         %xmm4,%xmm6
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,93,226                           // minps         %xmm2,%xmm4
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,93,212                           // minps         %xmm4,%xmm2
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,92,242                           // subps         %xmm2,%xmm6
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,41,69,216                        // movaps        %xmm0,-0x28(%ebp)
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,89,233                           // mulps         %xmm1,%xmm5
  .byte  15,89,93,56                         // mulps         0x38(%ebp),%xmm3
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  15,89,125,72                        // mulps         0x48(%ebp),%xmm7
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,93,199                           // minps         %xmm7,%xmm0
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  15,93,208                           // minps         %xmm0,%xmm2
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,95,231                           // maxps         %xmm7,%xmm4
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,95,196                           // maxps         %xmm4,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  15,92,234                           // subps         %xmm2,%xmm5
  .byte  15,92,218                           // subps         %xmm2,%xmm3
  .byte  15,92,250                           // subps         %xmm2,%xmm7
  .byte  15,89,117,88                        // mulps         0x58(%ebp),%xmm6
  .byte  15,89,238                           // mulps         %xmm6,%xmm5
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  232,0,0,0,0                         // call          1b58 <_sk_saturation_sse2+0x8e>
  .byte  88                                  // pop           %eax
  .byte  15,40,176,56,111,0,0                // movaps        0x6f38(%eax),%xmm6
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,40,160,72,111,0,0                // movaps        0x6f48(%eax),%xmm4
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,89,144,88,111,0,0                // mulps         0x6f58(%eax),%xmm2
  .byte  15,88,209                           // addps         %xmm1,%xmm2
  .byte  15,94,232                           // divps         %xmm0,%xmm5
  .byte  15,94,216                           // divps         %xmm0,%xmm3
  .byte  15,94,248                           // divps         %xmm0,%xmm7
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,194,193,4                        // cmpneqps      %xmm1,%xmm0
  .byte  15,84,232                           // andps         %xmm0,%xmm5
  .byte  15,84,216                           // andps         %xmm0,%xmm3
  .byte  15,84,199                           // andps         %xmm7,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,249                           // addps         %xmm1,%xmm7
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,89,136,88,111,0,0                // mulps         0x6f58(%eax),%xmm1
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  15,89,85,216                        // mulps         -0x28(%ebp),%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,88,234                           // addps         %xmm2,%xmm5
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,93,194                           // minps         %xmm2,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,93,200                           // minps         %xmm0,%xmm1
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,95,194                           // maxps         %xmm2,%xmm0
  .byte  15,41,149,120,255,255,255           // movaps        %xmm2,-0x88(%ebp)
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,95,248                           // maxps         %xmm0,%xmm7
  .byte  15,41,125,200                       // movaps        %xmm7,-0x38(%ebp)
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,88,230                           // addps         %xmm6,%xmm4
  .byte  15,40,128,88,111,0,0                // movaps        0x6f58(%eax),%xmm0
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,41,69,136                        // movaps        %xmm0,-0x78(%ebp)
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  15,194,249,2                        // cmpleps       %xmm1,%xmm7
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,41,85,184                        // movaps        %xmm2,-0x48(%ebp)
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,85,193                           // andnps        %xmm1,%xmm0
  .byte  15,84,239                           // andps         %xmm7,%xmm5
  .byte  15,86,232                           // orps          %xmm0,%xmm5
  .byte  15,40,69,216                        // movaps        -0x28(%ebp),%xmm0
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,40,144,104,111,0,0               // movaps        0x6f68(%eax),%xmm2
  .byte  15,41,85,152                        // movaps        %xmm2,-0x68(%ebp)
  .byte  15,92,212                           // subps         %xmm4,%xmm2
  .byte  15,41,85,168                        // movaps        %xmm2,-0x58(%ebp)
  .byte  15,88,224                           // addps         %xmm0,%xmm4
  .byte  15,92,225                           // subps         %xmm1,%xmm4
  .byte  15,41,101,216                       // movaps        %xmm4,-0x28(%ebp)
  .byte  15,40,241                           // movaps        %xmm1,%xmm6
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,40,77,200                        // movaps        -0x38(%ebp),%xmm1
  .byte  15,194,209,1                        // cmpltps       %xmm1,%xmm2
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,85,229                           // andnps        %xmm5,%xmm4
  .byte  15,40,69,136                        // movaps        -0x78(%ebp),%xmm0
  .byte  15,92,232                           // subps         %xmm0,%xmm5
  .byte  15,92,240                           // subps         %xmm0,%xmm6
  .byte  15,89,238                           // mulps         %xmm6,%xmm5
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,41,77,200                        // movaps        %xmm1,-0x38(%ebp)
  .byte  15,94,233                           // divps         %xmm1,%xmm5
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,84,234                           // andps         %xmm2,%xmm5
  .byte  15,86,236                           // orps          %xmm4,%xmm5
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,94,77,184                        // divps         -0x48(%ebp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  15,85,225                           // andnps        %xmm1,%xmm4
  .byte  15,84,223                           // andps         %xmm7,%xmm3
  .byte  15,86,220                           // orps          %xmm4,%xmm3
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,85,203                           // andnps        %xmm3,%xmm1
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,94,93,200                        // divps         -0x38(%ebp),%xmm3
  .byte  15,88,216                           // addps         %xmm0,%xmm3
  .byte  15,84,218                           // andps         %xmm2,%xmm3
  .byte  15,86,217                           // orps          %xmm1,%xmm3
  .byte  15,40,165,120,255,255,255           // movaps        -0x88(%ebp),%xmm4
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,94,77,184                        // divps         -0x48(%ebp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,84,231                           // andps         %xmm7,%xmm4
  .byte  15,85,249                           // andnps        %xmm1,%xmm7
  .byte  15,86,252                           // orps          %xmm4,%xmm7
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,85,207                           // andnps        %xmm7,%xmm1
  .byte  15,92,248                           // subps         %xmm0,%xmm7
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  15,94,125,200                       // divps         -0x38(%ebp),%xmm7
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  15,84,250                           // andps         %xmm2,%xmm7
  .byte  15,86,249                           // orps          %xmm1,%xmm7
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,232                           // maxps         %xmm0,%xmm5
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  15,95,248                           // maxps         %xmm0,%xmm7
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,40,101,152                       // movaps        -0x68(%ebp),%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  15,40,141,104,255,255,255           // movaps        -0x98(%ebp),%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,85,168                        // movaps        -0x58(%ebp),%xmm2
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,40,241                           // movaps        %xmm1,%xmm6
  .byte  15,40,141,88,255,255,255            // movaps        -0xa8(%ebp),%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  15,89,133,72,255,255,255            // mulps         -0xb8(%ebp),%xmm0
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,12,1,0,0                    // add           $0x10c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_color_sse2
.globl _sk_color_sse2
FUNCTION(_sk_color_sse2)
_sk_color_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,28,1,0,0                    // sub           $0x11c,%esp
  .byte  15,41,93,200                        // movaps        %xmm3,-0x38(%ebp)
  .byte  15,41,149,72,255,255,255            // movaps        %xmm2,-0xb8(%ebp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  232,0,0,0,0                         // call          1ddf <_sk_color_sse2+0x1f>
  .byte  88                                  // pop           %eax
  .byte  15,40,85,56                         // movaps        0x38(%ebp),%xmm2
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,152,241,108,0,0               // movaps        0x6cf1(%eax),%xmm3
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  15,40,176,1,109,0,0                 // movaps        0x6d01(%eax),%xmm6
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,41,117,184                       // movaps        %xmm6,-0x48(%ebp)
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,40,184,17,109,0,0                // movaps        0x6d11(%eax),%xmm7
  .byte  15,41,189,56,255,255,255            // movaps        %xmm7,-0xc8(%ebp)
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  15,88,226                           // addps         %xmm2,%xmm4
  .byte  15,41,101,136                       // movaps        %xmm4,-0x78(%ebp)
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,41,77,152                        // movaps        %xmm1,-0x68(%ebp)
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  15,40,136,33,109,0,0                // movaps        0x6d21(%eax),%xmm1
  .byte  15,41,77,168                        // movaps        %xmm1,-0x58(%ebp)
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,41,133,88,255,255,255            // movaps        %xmm0,-0xa8(%ebp)
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,41,173,120,255,255,255           // movaps        %xmm5,-0x88(%ebp)
  .byte  15,40,141,72,255,255,255            // movaps        -0xb8(%ebp),%xmm1
  .byte  15,89,225                           // mulps         %xmm1,%xmm4
  .byte  15,41,165,104,255,255,255           // movaps        %xmm4,-0x98(%ebp)
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,40,181,56,255,255,255            // movaps        -0xc8(%ebp),%xmm6
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,40,101,136                       // movaps        -0x78(%ebp),%xmm4
  .byte  15,89,101,200                       // mulps         -0x38(%ebp),%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  15,88,252                           // addps         %xmm4,%xmm7
  .byte  15,40,109,152                       // movaps        -0x68(%ebp),%xmm5
  .byte  15,88,236                           // addps         %xmm4,%xmm5
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,93,196                           // minps         %xmm4,%xmm0
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,93,200                           // minps         %xmm0,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,95,196                           // maxps         %xmm4,%xmm0
  .byte  15,41,101,136                       // movaps        %xmm4,-0x78(%ebp)
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  15,95,248                           // maxps         %xmm0,%xmm7
  .byte  15,40,69,216                        // movaps        -0x28(%ebp),%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,40,85,184                        // movaps        -0x48(%ebp),%xmm2
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,194,241,2                        // cmpleps       %xmm1,%xmm6
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  15,84,222                           // andps         %xmm6,%xmm3
  .byte  15,86,218                           // orps          %xmm2,%xmm3
  .byte  15,40,101,200                       // movaps        -0x38(%ebp),%xmm4
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,40,85,168                        // movaps        -0x58(%ebp),%xmm2
  .byte  15,92,212                           // subps         %xmm4,%xmm2
  .byte  15,41,85,168                        // movaps        %xmm2,-0x58(%ebp)
  .byte  15,88,101,88                        // addps         0x58(%ebp),%xmm4
  .byte  15,92,225                           // subps         %xmm1,%xmm4
  .byte  15,41,101,200                       // movaps        %xmm4,-0x38(%ebp)
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,194,231,1                        // cmpltps       %xmm7,%xmm4
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,85,203                           // andnps        %xmm3,%xmm1
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,92,208                           // subps         %xmm0,%xmm2
  .byte  15,41,85,184                        // movaps        %xmm2,-0x48(%ebp)
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  15,92,248                           // subps         %xmm0,%xmm7
  .byte  15,94,223                           // divps         %xmm7,%xmm3
  .byte  15,88,216                           // addps         %xmm0,%xmm3
  .byte  15,84,220                           // andps         %xmm4,%xmm3
  .byte  15,86,217                           // orps          %xmm1,%xmm3
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,94,77,216                        // divps         -0x28(%ebp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  15,84,238                           // andps         %xmm6,%xmm5
  .byte  15,86,234                           // orps          %xmm2,%xmm5
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  15,92,208                           // subps         %xmm0,%xmm2
  .byte  15,40,109,184                       // movaps        -0x48(%ebp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,94,215                           // divps         %xmm7,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  15,84,212                           // andps         %xmm4,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  15,41,85,152                        // movaps        %xmm2,-0x68(%ebp)
  .byte  15,40,85,136                        // movaps        -0x78(%ebp),%xmm2
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,94,77,216                        // divps         -0x28(%ebp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,84,214                           // andps         %xmm6,%xmm2
  .byte  15,85,241                           // andnps        %xmm1,%xmm6
  .byte  15,86,242                           // orps          %xmm2,%xmm6
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,85,206                           // andnps        %xmm6,%xmm1
  .byte  15,92,240                           // subps         %xmm0,%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,94,247                           // divps         %xmm7,%xmm6
  .byte  15,88,240                           // addps         %xmm0,%xmm6
  .byte  15,84,244                           // andps         %xmm4,%xmm6
  .byte  15,86,241                           // orps          %xmm1,%xmm6
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  15,40,101,152                       // movaps        -0x68(%ebp),%xmm4
  .byte  15,95,224                           // maxps         %xmm0,%xmm4
  .byte  15,95,240                           // maxps         %xmm0,%xmm6
  .byte  15,40,109,168                       // movaps        -0x58(%ebp),%xmm5
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,40,141,88,255,255,255            // movaps        -0xa8(%ebp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  15,40,93,56                         // movaps        0x38(%ebp),%xmm3
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  15,40,141,120,255,255,255           // movaps        -0x88(%ebp),%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,88,173,104,255,255,255           // addps         -0x98(%ebp),%xmm5
  .byte  15,88,238                           // addps         %xmm6,%xmm5
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,92,36,48                      // movaps        %xmm3,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,93,200                        // movaps        -0x38(%ebp),%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,28,1,0,0                    // add           $0x11c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_luminosity_sse2
.globl _sk_luminosity_sse2
FUNCTION(_sk_luminosity_sse2)
_sk_luminosity_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,252,0,0,0                   // sub           $0xfc,%esp
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  232,0,0,0,0                         // call          2092 <_sk_luminosity_sse2+0x1a>
  .byte  88                                  // pop           %eax
  .byte  15,40,160,126,106,0,0               // movaps        0x6a7e(%eax),%xmm4
  .byte  15,41,101,216                       // movaps        %xmm4,-0x28(%ebp)
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,40,128,142,106,0,0               // movaps        0x6a8e(%eax),%xmm0
  .byte  15,41,69,200                        // movaps        %xmm0,-0x38(%ebp)
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,88,226                           // addps         %xmm2,%xmm4
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  15,40,184,174,106,0,0               // movaps        0x6aae(%eax),%xmm7
  .byte  15,41,125,152                       // movaps        %xmm7,-0x68(%ebp)
  .byte  15,92,250                           // subps         %xmm2,%xmm7
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  15,41,157,88,255,255,255            // movaps        %xmm3,-0xa8(%ebp)
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,41,141,104,255,255,255           // movaps        %xmm1,-0x98(%ebp)
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,41,189,120,255,255,255           // movaps        %xmm7,-0x88(%ebp)
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,128,158,106,0,0               // movaps        0x6a9e(%eax),%xmm0
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,89,109,40                        // mulps         0x28(%ebp),%xmm5
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,41,117,168                       // movaps        %xmm6,-0x58(%ebp)
  .byte  15,89,93,56                         // mulps         0x38(%ebp),%xmm3
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,89,101,216                       // mulps         -0x28(%ebp),%xmm4
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,85,200                        // mulps         -0x38(%ebp),%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  15,89,117,72                        // mulps         0x48(%ebp),%xmm6
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,88,226                           // addps         %xmm2,%xmm4
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,88,233                           // addps         %xmm1,%xmm5
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,93,209                           // minps         %xmm1,%xmm2
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,93,226                           // minps         %xmm2,%xmm4
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,95,241                           // maxps         %xmm1,%xmm6
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  15,95,214                           // maxps         %xmm6,%xmm2
  .byte  15,41,85,184                        // movaps        %xmm2,-0x48(%ebp)
  .byte  15,40,85,216                        // movaps        -0x28(%ebp),%xmm2
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,40,117,200                       // movaps        -0x38(%ebp),%xmm6
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,88,242                           // addps         %xmm2,%xmm6
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  15,194,252,2                        // cmpleps       %xmm4,%xmm7
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,212                           // subps         %xmm4,%xmm2
  .byte  15,41,85,200                        // movaps        %xmm2,-0x38(%ebp)
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,94,226                           // divps         %xmm2,%xmm4
  .byte  15,88,224                           // addps         %xmm0,%xmm4
  .byte  15,40,215                           // movaps        %xmm7,%xmm2
  .byte  15,85,212                           // andnps        %xmm4,%xmm2
  .byte  15,84,239                           // andps         %xmm7,%xmm5
  .byte  15,86,234                           // orps          %xmm2,%xmm5
  .byte  15,40,101,168                       // movaps        -0x58(%ebp),%xmm4
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,40,117,152                       // movaps        -0x68(%ebp),%xmm6
  .byte  15,92,244                           // subps         %xmm4,%xmm6
  .byte  15,41,117,152                       // movaps        %xmm6,-0x68(%ebp)
  .byte  15,88,101,88                        // addps         0x58(%ebp),%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,41,101,168                       // movaps        %xmm4,-0x58(%ebp)
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  15,40,117,184                       // movaps        -0x48(%ebp),%xmm6
  .byte  15,194,214,1                        // cmpltps       %xmm6,%xmm2
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,85,229                           // andnps        %xmm5,%xmm4
  .byte  15,41,101,136                       // movaps        %xmm4,-0x78(%ebp)
  .byte  15,92,232                           // subps         %xmm0,%xmm5
  .byte  15,40,101,216                       // movaps        -0x28(%ebp),%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  15,41,101,216                       // movaps        %xmm4,-0x28(%ebp)
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,92,240                           // subps         %xmm0,%xmm6
  .byte  15,41,117,184                       // movaps        %xmm6,-0x48(%ebp)
  .byte  15,94,238                           // divps         %xmm6,%xmm5
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,84,234                           // andps         %xmm2,%xmm5
  .byte  15,86,109,136                       // orps          -0x78(%ebp),%xmm5
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,94,101,200                       // divps         -0x38(%ebp),%xmm4
  .byte  15,88,224                           // addps         %xmm0,%xmm4
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  15,85,244                           // andnps        %xmm4,%xmm6
  .byte  15,84,223                           // andps         %xmm7,%xmm3
  .byte  15,86,222                           // orps          %xmm6,%xmm3
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,85,227                           // andnps        %xmm3,%xmm4
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,40,117,216                       // movaps        -0x28(%ebp),%xmm6
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,94,93,184                        // divps         -0x48(%ebp),%xmm3
  .byte  15,88,216                           // addps         %xmm0,%xmm3
  .byte  15,84,218                           // andps         %xmm2,%xmm3
  .byte  15,86,220                           // orps          %xmm4,%xmm3
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,94,101,200                       // divps         -0x38(%ebp),%xmm4
  .byte  15,88,224                           // addps         %xmm0,%xmm4
  .byte  15,84,207                           // andps         %xmm7,%xmm1
  .byte  15,85,252                           // andnps        %xmm4,%xmm7
  .byte  15,86,249                           // orps          %xmm1,%xmm7
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,85,207                           // andnps        %xmm7,%xmm1
  .byte  15,92,248                           // subps         %xmm0,%xmm7
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  15,94,125,184                       // divps         -0x48(%ebp),%xmm7
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  15,84,250                           // andps         %xmm2,%xmm7
  .byte  15,86,249                           // orps          %xmm1,%xmm7
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,232                           // maxps         %xmm0,%xmm5
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  15,95,248                           // maxps         %xmm0,%xmm7
  .byte  15,40,101,152                       // movaps        -0x68(%ebp),%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,40,141,88,255,255,255            // movaps        -0xa8(%ebp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,40,141,104,255,255,255           // movaps        -0x98(%ebp),%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,88,165,120,255,255,255           // addps         -0x88(%ebp),%xmm4
  .byte  15,88,231                           // addps         %xmm7,%xmm4
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,93,168                        // movaps        -0x58(%ebp),%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,252,0,0,0                   // add           $0xfc,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_srcover_rgba_8888_sse2
.globl _sk_srcover_rgba_8888_sse2
FUNCTION(_sk_srcover_rgba_8888_sse2)
_sk_srcover_rgba_8888_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,172,0,0,0                   // sub           $0xac,%esp
  .byte  15,41,85,168                        // movaps        %xmm2,-0x58(%ebp)
  .byte  102,15,127,77,184                   // movdqa        %xmm1,-0x48(%ebp)
  .byte  102,15,127,69,200                   // movdqa        %xmm0,-0x38(%ebp)
  .byte  232,0,0,0,0                         // call          2326 <_sk_srcover_rgba_8888_sse2+0x1f>
  .byte  95                                  // pop           %edi
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,48                              // mov           (%eax),%esi
  .byte  139,54                              // mov           (%esi),%esi
  .byte  133,210                             // test          %edx,%edx
  .byte  15,133,40,1,0,0                     // jne           2464 <_sk_srcover_rgba_8888_sse2+0x15d>
  .byte  243,15,111,12,142                   // movdqu        (%esi,%ecx,4),%xmm1
  .byte  102,15,111,135,42,104,0,0           // movdqa        0x682a(%edi),%xmm0
  .byte  102,15,111,225                      // movdqa        %xmm1,%xmm4
  .byte  102,15,219,224                      // pand          %xmm0,%xmm4
  .byte  102,15,111,249                      // movdqa        %xmm1,%xmm7
  .byte  102,15,114,215,8                    // psrld         $0x8,%xmm7
  .byte  102,15,219,248                      // pand          %xmm0,%xmm7
  .byte  102,15,111,233                      // movdqa        %xmm1,%xmm5
  .byte  102,15,114,213,16                   // psrld         $0x10,%xmm5
  .byte  102,15,219,232                      // pand          %xmm0,%xmm5
  .byte  15,91,244                           // cvtdq2ps      %xmm4,%xmm6
  .byte  15,40,167,58,104,0,0                // movaps        0x683a(%edi),%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  15,40,135,74,104,0,0                // movaps        0x684a(%edi),%xmm0
  .byte  15,41,69,216                        // movaps        %xmm0,-0x28(%ebp)
  .byte  15,40,85,200                        // movaps        -0x38(%ebp),%xmm2
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,41,117,200                       // movaps        %xmm6,-0x38(%ebp)
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,91,215                           // cvtdq2ps      %xmm7,%xmm2
  .byte  15,40,125,184                       // movaps        -0x48(%ebp),%xmm7
  .byte  15,89,125,216                       // mulps         -0x28(%ebp),%xmm7
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,85,184                        // movaps        %xmm2,-0x48(%ebp)
  .byte  15,89,242                           // mulps         %xmm2,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  15,91,213                           // cvtdq2ps      %xmm5,%xmm2
  .byte  15,40,109,168                       // movaps        -0x58(%ebp),%xmm5
  .byte  15,89,109,216                       // mulps         -0x28(%ebp),%xmm5
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,41,85,168                        // movaps        %xmm2,-0x58(%ebp)
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  15,88,253                           // addps         %xmm5,%xmm7
  .byte  15,89,93,216                        // mulps         -0x28(%ebp),%xmm3
  .byte  102,15,114,209,24                   // psrld         $0x18,%xmm1
  .byte  15,91,209                           // cvtdq2ps      %xmm1,%xmm2
  .byte  15,89,226                           // mulps         %xmm2,%xmm4
  .byte  15,88,227                           // addps         %xmm3,%xmm4
  .byte  102,15,91,206                       // cvtps2dq      %xmm6,%xmm1
  .byte  102,15,114,241,8                    // pslld         $0x8,%xmm1
  .byte  102,15,91,216                       // cvtps2dq      %xmm0,%xmm3
  .byte  102,15,235,203                      // por           %xmm3,%xmm1
  .byte  102,15,91,239                       // cvtps2dq      %xmm7,%xmm5
  .byte  102,15,114,245,16                   // pslld         $0x10,%xmm5
  .byte  102,15,91,220                       // cvtps2dq      %xmm4,%xmm3
  .byte  102,15,114,243,24                   // pslld         $0x18,%xmm3
  .byte  102,15,235,221                      // por           %xmm5,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  139,93,20                           // mov           0x14(%ebp),%ebx
  .byte  139,125,8                           // mov           0x8(%ebp),%edi
  .byte  133,210                             // test          %edx,%edx
  .byte  15,133,131,0,0,0                    // jne           2495 <_sk_srcover_rgba_8888_sse2+0x18e>
  .byte  243,15,127,28,142                   // movdqu        %xmm3,(%esi,%ecx,4)
  .byte  141,112,8                           // lea           0x8(%eax),%esi
  .byte  15,41,84,36,80                      // movaps        %xmm2,0x50(%esp)
  .byte  15,40,77,168                        // movaps        -0x58(%ebp),%xmm1
  .byte  15,41,76,36,64                      // movaps        %xmm1,0x40(%esp)
  .byte  15,40,77,184                        // movaps        -0x48(%ebp),%xmm1
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,40,77,200                        // movaps        -0x38(%ebp),%xmm1
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,92,36,12                        // mov           %ebx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,116,36,4                        // mov           %esi,0x4(%esp)
  .byte  137,60,36                           // mov           %edi,(%esp)
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,40,215                           // movaps        %xmm7,%xmm2
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,172,0,0,0                   // add           $0xac,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  137,211                             // mov           %edx,%ebx
  .byte  128,227,3                           // and           $0x3,%bl
  .byte  128,251,1                           // cmp           $0x1,%bl
  .byte  116,94                              // je            24cc <_sk_srcover_rgba_8888_sse2+0x1c5>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  128,251,2                           // cmp           $0x2,%bl
  .byte  116,20                              // je            248b <_sk_srcover_rgba_8888_sse2+0x184>
  .byte  128,251,3                           // cmp           $0x3,%bl
  .byte  15,133,193,254,255,255              // jne           2341 <_sk_srcover_rgba_8888_sse2+0x3a>
  .byte  102,15,110,68,142,8                 // movd          0x8(%esi,%ecx,4),%xmm0
  .byte  102,15,112,200,69                   // pshufd        $0x45,%xmm0,%xmm1
  .byte  102,15,18,12,142                    // movlpd        (%esi,%ecx,4),%xmm1
  .byte  233,172,254,255,255                 // jmp           2341 <_sk_srcover_rgba_8888_sse2+0x3a>
  .byte  137,208                             // mov           %edx,%eax
  .byte  136,69,216                          // mov           %al,-0x28(%ebp)
  .byte  128,101,216,3                       // andb          $0x3,-0x28(%ebp)
  .byte  128,125,216,1                       // cmpb          $0x1,-0x28(%ebp)
  .byte  116,50                              // je            24d6 <_sk_srcover_rgba_8888_sse2+0x1cf>
  .byte  128,125,216,2                       // cmpb          $0x2,-0x28(%ebp)
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  116,21                              // je            24c2 <_sk_srcover_rgba_8888_sse2+0x1bb>
  .byte  128,125,216,3                       // cmpb          $0x3,-0x28(%ebp)
  .byte  15,133,96,255,255,255               // jne           2417 <_sk_srcover_rgba_8888_sse2+0x110>
  .byte  102,15,112,203,78                   // pshufd        $0x4e,%xmm3,%xmm1
  .byte  102,15,126,76,142,8                 // movd          %xmm1,0x8(%esi,%ecx,4)
  .byte  102,15,214,28,142                   // movq          %xmm3,(%esi,%ecx,4)
  .byte  233,75,255,255,255                  // jmp           2417 <_sk_srcover_rgba_8888_sse2+0x110>
  .byte  102,15,110,12,142                   // movd          (%esi,%ecx,4),%xmm1
  .byte  233,107,254,255,255                 // jmp           2341 <_sk_srcover_rgba_8888_sse2+0x3a>
  .byte  102,15,126,28,142                   // movd          %xmm3,(%esi,%ecx,4)
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  233,52,255,255,255                  // jmp           2417 <_sk_srcover_rgba_8888_sse2+0x110>

HIDDEN _sk_clamp_0_sse2
.globl _sk_clamp_0_sse2
FUNCTION(_sk_clamp_0_sse2)
_sk_clamp_0_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  15,95,199                           // maxps         %xmm7,%xmm0
  .byte  15,95,207                           // maxps         %xmm7,%xmm1
  .byte  15,95,215                           // maxps         %xmm7,%xmm2
  .byte  15,95,223                           // maxps         %xmm7,%xmm3
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_clamp_1_sse2
.globl _sk_clamp_1_sse2
FUNCTION(_sk_clamp_1_sse2)
_sk_clamp_1_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          255c <_sk_clamp_1_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,184,36,102,0,0                // movaps        0x6624(%eax),%xmm7
  .byte  15,93,199                           // minps         %xmm7,%xmm0
  .byte  15,93,207                           // minps         %xmm7,%xmm1
  .byte  15,93,215                           // minps         %xmm7,%xmm2
  .byte  15,93,223                           // minps         %xmm7,%xmm3
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_clamp_a_sse2
.globl _sk_clamp_a_sse2
FUNCTION(_sk_clamp_a_sse2)
_sk_clamp_a_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          25d1 <_sk_clamp_a_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,93,152,191,101,0,0               // minps         0x65bf(%eax),%xmm3
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_clamp_a_dst_sse2
.globl _sk_clamp_a_dst_sse2
FUNCTION(_sk_clamp_a_dst_sse2)
_sk_clamp_a_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          2643 <_sk_clamp_a_dst_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,93,160,93,101,0,0                // minps         0x655d(%eax),%xmm4
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,93,252                           // minps         %xmm4,%xmm7
  .byte  15,93,244                           // minps         %xmm4,%xmm6
  .byte  15,93,236                           // minps         %xmm4,%xmm5
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_set_rgb_sse2
.globl _sk_set_rgb_sse2
FUNCTION(_sk_set_rgb_sse2)
_sk_set_rgb_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  243,15,16,7                         // movss         (%edi),%xmm0
  .byte  243,15,16,79,4                      // movss         0x4(%edi),%xmm1
  .byte  243,15,16,87,8                      // movss         0x8(%edi),%xmm2
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_swap_rb_sse2
.globl _sk_swap_rb_sse2
FUNCTION(_sk_swap_rb_sse2)
_sk_swap_rb_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_swap_rb_dst_sse2
.globl _sk_swap_rb_dst_sse2
FUNCTION(_sk_swap_rb_dst_sse2)
_sk_swap_rb_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_move_src_dst_sse2
.globl _sk_move_src_dst_sse2
FUNCTION(_sk_move_src_dst_sse2)
_sk_move_src_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_move_dst_src_sse2
.globl _sk_move_dst_src_sse2
FUNCTION(_sk_move_dst_src_sse2)
_sk_move_dst_src_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_premul_sse2
.globl _sk_premul_sse2
FUNCTION(_sk_premul_sse2)
_sk_premul_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_unpremul_sse2
.globl _sk_unpremul_sse2
FUNCTION(_sk_unpremul_sse2)
_sk_unpremul_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          28fc <_sk_unpremul_sse2+0xe>
  .byte  89                                  // pop           %ecx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,40,185,180,98,0,0                // movaps        0x62b4(%ecx),%xmm7
  .byte  15,94,251                           // divps         %xmm3,%xmm7
  .byte  15,194,243,4                        // cmpneqps      %xmm3,%xmm6
  .byte  15,84,247                           // andps         %xmm7,%xmm6
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  141,89,4                            // lea           0x4(%ecx),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,17                              // call          *(%ecx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_from_srgb_sse2
.globl _sk_from_srgb_sse2
FUNCTION(_sk_from_srgb_sse2)
_sk_from_srgb_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,156,0,0,0                   // sub           $0x9c,%esp
  .byte  15,41,93,184                        // movaps        %xmm3,-0x48(%ebp)
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  232,0,0,0,0                         // call          298b <_sk_from_srgb_sse2+0x1e>
  .byte  88                                  // pop           %eax
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,89,219                           // mulps         %xmm3,%xmm3
  .byte  15,40,160,69,98,0,0                 // movaps        0x6245(%eax),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,136,85,98,0,0                 // movaps        0x6255(%eax),%xmm1
  .byte  15,41,77,200                        // movaps        %xmm1,-0x38(%ebp)
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,40,152,53,98,0,0                 // movaps        0x6235(%eax),%xmm3
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,40,184,101,98,0,0                // movaps        0x6265(%eax),%xmm7
  .byte  15,41,125,216                       // movaps        %xmm7,-0x28(%ebp)
  .byte  15,88,199                           // addps         %xmm7,%xmm0
  .byte  15,40,184,117,98,0,0                // movaps        0x6275(%eax),%xmm7
  .byte  15,194,215,1                        // cmpltps       %xmm7,%xmm2
  .byte  15,84,202                           // andps         %xmm2,%xmm1
  .byte  15,85,208                           // andnps        %xmm0,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,77,200                        // addps         -0x38(%ebp),%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,77,216                        // addps         -0x28(%ebp),%xmm1
  .byte  15,194,239,1                        // cmpltps       %xmm7,%xmm5
  .byte  15,84,197                           // andps         %xmm5,%xmm0
  .byte  15,85,233                           // andnps        %xmm1,%xmm5
  .byte  15,86,232                           // orps          %xmm0,%xmm5
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,88,101,200                       // addps         -0x38(%ebp),%xmm4
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,88,101,216                       // addps         -0x28(%ebp),%xmm4
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,194,247,1                        // cmpltps       %xmm7,%xmm6
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,84,222                           // andps         %xmm6,%xmm3
  .byte  15,85,244                           // andnps        %xmm4,%xmm6
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,86,243                           // orps          %xmm3,%xmm6
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,93,184                        // movaps        -0x48(%ebp),%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,156,0,0,0                   // add           $0x9c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_from_srgb_dst_sse2
.globl _sk_from_srgb_dst_sse2
FUNCTION(_sk_from_srgb_dst_sse2)
_sk_from_srgb_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,188,0,0,0                   // sub           $0xbc,%esp
  .byte  15,41,93,152                        // movaps        %xmm3,-0x68(%ebp)
  .byte  15,41,85,168                        // movaps        %xmm2,-0x58(%ebp)
  .byte  15,41,77,184                        // movaps        %xmm1,-0x48(%ebp)
  .byte  15,41,69,200                        // movaps        %xmm0,-0x38(%ebp)
  .byte  232,0,0,0,0                         // call          2aae <_sk_from_srgb_dst_sse2+0x21>
  .byte  88                                  // pop           %eax
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  15,40,168,114,97,0,0                // movaps        0x6172(%eax),%xmm5
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,40,144,130,97,0,0                // movaps        0x6182(%eax),%xmm2
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  15,88,250                           // addps         %xmm2,%xmm7
  .byte  15,89,248                           // mulps         %xmm0,%xmm7
  .byte  15,40,176,98,97,0,0                 // movaps        0x6162(%eax),%xmm6
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,40,152,146,97,0,0                // movaps        0x6192(%eax),%xmm3
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  15,40,144,162,97,0,0                // movaps        0x61a2(%eax),%xmm2
  .byte  15,194,202,1                        // cmpltps       %xmm2,%xmm1
  .byte  15,84,225                           // andps         %xmm1,%xmm4
  .byte  15,85,207                           // andnps        %xmm7,%xmm1
  .byte  15,86,204                           // orps          %xmm4,%xmm1
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,88,125,216                       // addps         -0x28(%ebp),%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  15,194,194,1                        // cmpltps       %xmm2,%xmm0
  .byte  15,84,224                           // andps         %xmm0,%xmm4
  .byte  15,85,199                           // andnps        %xmm7,%xmm0
  .byte  15,86,196                           // orps          %xmm4,%xmm0
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,88,109,216                       // addps         -0x28(%ebp),%xmm5
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,89,255                           // mulps         %xmm7,%xmm7
  .byte  15,89,239                           // mulps         %xmm7,%xmm5
  .byte  15,88,235                           // addps         %xmm3,%xmm5
  .byte  15,89,244                           // mulps         %xmm4,%xmm6
  .byte  15,194,226,1                        // cmpltps       %xmm2,%xmm4
  .byte  15,84,244                           // andps         %xmm4,%xmm6
  .byte  15,85,229                           // andnps        %xmm5,%xmm4
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,86,230                           // orps          %xmm6,%xmm4
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,84,36,80                      // movaps        %xmm2,0x50(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  15,40,69,200                        // movaps        -0x38(%ebp),%xmm0
  .byte  15,40,77,184                        // movaps        -0x48(%ebp),%xmm1
  .byte  15,40,85,168                        // movaps        -0x58(%ebp),%xmm2
  .byte  15,40,93,152                        // movaps        -0x68(%ebp),%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,188,0,0,0                   // add           $0xbc,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_to_srgb_sse2
.globl _sk_to_srgb_sse2
FUNCTION(_sk_to_srgb_sse2)
_sk_to_srgb_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,172,0,0,0                   // sub           $0xac,%esp
  .byte  15,41,93,168                        // movaps        %xmm3,-0x58(%ebp)
  .byte  15,40,250                           // movaps        %xmm2,%xmm7
  .byte  15,40,241                           // movaps        %xmm1,%xmm6
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  232,0,0,0,0                         // call          2bce <_sk_to_srgb_sse2+0x1e>
  .byte  88                                  // pop           %eax
  .byte  15,82,218                           // rsqrtps       %xmm2,%xmm3
  .byte  15,40,160,162,96,0,0                // movaps        0x60a2(%eax),%xmm4
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,40,128,178,96,0,0                // movaps        0x60b2(%eax),%xmm0
  .byte  15,41,69,216                        // movaps        %xmm0,-0x28(%ebp)
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,89,235                           // mulps         %xmm3,%xmm5
  .byte  15,40,128,194,96,0,0                // movaps        0x60c2(%eax),%xmm0
  .byte  15,41,69,184                        // movaps        %xmm0,-0x48(%ebp)
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,40,128,210,96,0,0                // movaps        0x60d2(%eax),%xmm0
  .byte  15,41,69,200                        // movaps        %xmm0,-0x38(%ebp)
  .byte  15,88,216                           // addps         %xmm0,%xmm3
  .byte  15,83,195                           // rcpps         %xmm3,%xmm0
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,168,146,96,0,0                // movaps        0x6092(%eax),%xmm5
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,152,226,96,0,0                // movaps        0x60e2(%eax),%xmm3
  .byte  15,194,211,1                        // cmpltps       %xmm3,%xmm2
  .byte  15,84,202                           // andps         %xmm2,%xmm1
  .byte  15,85,208                           // andnps        %xmm0,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  15,82,198                           // rsqrtps       %xmm6,%xmm0
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,77,216                        // addps         -0x28(%ebp),%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,88,77,184                        // addps         -0x48(%ebp),%xmm1
  .byte  15,88,69,200                        // addps         -0x38(%ebp),%xmm0
  .byte  15,83,192                           // rcpps         %xmm0,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,194,243,1                        // cmpltps       %xmm3,%xmm6
  .byte  15,84,206                           // andps         %xmm6,%xmm1
  .byte  15,85,240                           // andnps        %xmm0,%xmm6
  .byte  15,86,241                           // orps          %xmm1,%xmm6
  .byte  15,82,199                           // rsqrtps       %xmm7,%xmm0
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,88,101,216                       // addps         -0x28(%ebp),%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,88,101,184                       // addps         -0x48(%ebp),%xmm4
  .byte  15,88,69,200                        // addps         -0x38(%ebp),%xmm0
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,83,192                           // rcpps         %xmm0,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,89,239                           // mulps         %xmm7,%xmm5
  .byte  15,194,251,1                        // cmpltps       %xmm3,%xmm7
  .byte  15,40,93,56                         // movaps        0x38(%ebp),%xmm3
  .byte  15,84,239                           // andps         %xmm7,%xmm5
  .byte  15,85,248                           // andnps        %xmm0,%xmm7
  .byte  15,40,69,72                         // movaps        0x48(%ebp),%xmm0
  .byte  15,86,253                           // orps          %xmm5,%xmm7
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,68,36,64                      // movaps        %xmm0,0x40(%esp)
  .byte  15,41,92,36,48                      // movaps        %xmm3,0x30(%esp)
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,40,215                           // movaps        %xmm7,%xmm2
  .byte  15,40,93,168                        // movaps        -0x58(%ebp),%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,172,0,0,0                   // add           $0xac,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_rgb_to_hsl_sse2
.globl _sk_rgb_to_hsl_sse2
FUNCTION(_sk_rgb_to_hsl_sse2)
_sk_rgb_to_hsl_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,156,0,0,0                   // sub           $0x9c,%esp
  .byte  15,41,93,184                        // movaps        %xmm3,-0x48(%ebp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  232,0,0,0,0                         // call          2d0d <_sk_rgb_to_hsl_sse2+0x1b>
  .byte  88                                  // pop           %eax
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,95,205                           // maxps         %xmm5,%xmm1
  .byte  15,95,202                           // maxps         %xmm2,%xmm1
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,93,253                           // minps         %xmm5,%xmm7
  .byte  15,41,109,216                       // movaps        %xmm5,-0x28(%ebp)
  .byte  15,93,250                           // minps         %xmm2,%xmm7
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,92,199                           // subps         %xmm7,%xmm0
  .byte  15,41,69,200                        // movaps        %xmm0,-0x38(%ebp)
  .byte  15,40,152,179,95,0,0                // movaps        0x5fb3(%eax),%xmm3
  .byte  15,94,216                           // divps         %xmm0,%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,194,234,1                        // cmpltps       %xmm2,%xmm5
  .byte  15,84,168,195,95,0,0                // andps         0x5fc3(%eax),%xmm5
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,194,196,0                        // cmpeqps       %xmm4,%xmm0
  .byte  15,40,241                           // movaps        %xmm1,%xmm6
  .byte  15,194,117,216,0                    // cmpeqps       -0x28(%ebp),%xmm6
  .byte  15,92,212                           // subps         %xmm4,%xmm2
  .byte  15,92,101,216                       // subps         -0x28(%ebp),%xmm4
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,40,152,211,95,0,0                // movaps        0x5fd3(%eax),%xmm3
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  15,88,160,227,95,0,0                // addps         0x5fe3(%eax),%xmm4
  .byte  15,84,214                           // andps         %xmm6,%xmm2
  .byte  15,85,244                           // andnps        %xmm4,%xmm6
  .byte  15,86,242                           // orps          %xmm2,%xmm6
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,84,232                           // andps         %xmm0,%xmm5
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  15,86,197                           // orps          %xmm5,%xmm0
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,194,231,4                        // cmpneqps      %xmm7,%xmm4
  .byte  15,92,217                           // subps         %xmm1,%xmm3
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  15,40,168,3,96,0,0                  // movaps        0x6003(%eax),%xmm5
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,194,234,1                        // cmpltps       %xmm2,%xmm5
  .byte  15,84,221                           // andps         %xmm5,%xmm3
  .byte  15,85,233                           // andnps        %xmm1,%xmm5
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,86,235                           // orps          %xmm3,%xmm5
  .byte  15,40,93,56                         // movaps        0x38(%ebp),%xmm3
  .byte  15,40,77,200                        // movaps        -0x38(%ebp),%xmm1
  .byte  15,94,205                           // divps         %xmm5,%xmm1
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,89,128,243,95,0,0                // mulps         0x5ff3(%eax),%xmm0
  .byte  15,84,196                           // andps         %xmm4,%xmm0
  .byte  15,84,204                           // andps         %xmm4,%xmm1
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,92,36,48                      // movaps        %xmm3,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,93,184                        // movaps        -0x48(%ebp),%xmm3
  .byte  255,16                              // call          *(%eax)
  .byte  129,196,156,0,0,0                   // add           $0x9c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_hsl_to_rgb_sse2
.globl _sk_hsl_to_rgb_sse2
FUNCTION(_sk_hsl_to_rgb_sse2)
_sk_hsl_to_rgb_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,44,1,0,0                    // sub           $0x12c,%esp
  .byte  15,41,157,40,255,255,255            // movaps        %xmm3,-0xd8(%ebp)
  .byte  15,41,69,200                        // movaps        %xmm0,-0x38(%ebp)
  .byte  232,0,0,0,0                         // call          2e42 <_sk_hsl_to_rgb_sse2+0x1c>
  .byte  88                                  // pop           %eax
  .byte  15,40,152,222,94,0,0                // movaps        0x5ede(%eax),%xmm3
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,41,181,72,255,255,255            // movaps        %xmm6,-0xb8(%ebp)
  .byte  15,194,226,2                        // cmpleps       %xmm2,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,194,217,0                        // cmpeqps       %xmm1,%xmm3
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,92,233                           // subps         %xmm1,%xmm5
  .byte  15,84,236                           // andps         %xmm4,%xmm5
  .byte  15,85,225                           // andnps        %xmm1,%xmm4
  .byte  15,86,229                           // orps          %xmm5,%xmm4
  .byte  15,40,136,238,94,0,0                // movaps        0x5eee(%eax),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  243,15,91,193                       // cvttps2dq     %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  15,194,216,1                        // cmpltps       %xmm0,%xmm3
  .byte  15,40,168,254,94,0,0                // movaps        0x5efe(%eax),%xmm5
  .byte  15,41,173,104,255,255,255           // movaps        %xmm5,-0x98(%ebp)
  .byte  15,84,221                           // andps         %xmm5,%xmm3
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,41,173,56,255,255,255            // movaps        %xmm5,-0xc8(%ebp)
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  15,41,101,184                       // movaps        %xmm4,-0x48(%ebp)
  .byte  15,88,237                           // addps         %xmm5,%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  15,40,144,14,95,0,0                 // movaps        0x5f0e(%eax),%xmm2
  .byte  15,41,85,168                        // movaps        %xmm2,-0x58(%ebp)
  .byte  15,194,209,2                        // cmpleps       %xmm1,%xmm2
  .byte  15,92,229                           // subps         %xmm5,%xmm4
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,194,193,2                        // cmpleps       %xmm1,%xmm0
  .byte  15,40,176,62,95,0,0                 // movaps        0x5f3e(%eax),%xmm6
  .byte  15,41,181,88,255,255,255            // movaps        %xmm6,-0xa8(%ebp)
  .byte  15,194,241,2                        // cmpleps       %xmm1,%xmm6
  .byte  15,40,152,30,95,0,0                 // movaps        0x5f1e(%eax),%xmm3
  .byte  15,41,93,152                        // movaps        %xmm3,-0x68(%ebp)
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,40,184,46,95,0,0                 // movaps        0x5f2e(%eax),%xmm7
  .byte  15,41,125,136                       // movaps        %xmm7,-0x78(%ebp)
  .byte  15,92,249                           // subps         %xmm1,%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,253                           // addps         %xmm5,%xmm7
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  15,84,218                           // andps         %xmm2,%xmm3
  .byte  15,85,215                           // andnps        %xmm7,%xmm2
  .byte  15,86,211                           // orps          %xmm3,%xmm2
  .byte  15,84,208                           // andps         %xmm0,%xmm2
  .byte  15,85,69,184                        // andnps        -0x48(%ebp),%xmm0
  .byte  15,86,194                           // orps          %xmm2,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,84,198                           // andps         %xmm6,%xmm0
  .byte  15,85,241                           // andnps        %xmm1,%xmm6
  .byte  15,86,240                           // orps          %xmm0,%xmm6
  .byte  15,40,69,216                        // movaps        -0x28(%ebp),%xmm0
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  15,41,133,120,255,255,255           // movaps        %xmm0,-0x88(%ebp)
  .byte  15,40,85,200                        // movaps        -0x38(%ebp),%xmm2
  .byte  243,15,91,194                       // cvttps2dq     %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,194,200,1                        // cmpltps       %xmm0,%xmm1
  .byte  15,84,136,254,94,0,0                // andps         0x5efe(%eax),%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  15,40,128,14,95,0,0                 // movaps        0x5f0e(%eax),%xmm0
  .byte  15,194,193,2                        // cmpleps       %xmm1,%xmm0
  .byte  15,40,144,222,94,0,0                // movaps        0x5ede(%eax),%xmm2
  .byte  15,194,209,2                        // cmpleps       %xmm1,%xmm2
  .byte  15,40,152,62,95,0,0                 // movaps        0x5f3e(%eax),%xmm3
  .byte  15,194,217,2                        // cmpleps       %xmm1,%xmm3
  .byte  15,89,136,30,95,0,0                 // mulps         0x5f1e(%eax),%xmm1
  .byte  15,40,176,46,95,0,0                 // movaps        0x5f2e(%eax),%xmm6
  .byte  15,92,241                           // subps         %xmm1,%xmm6
  .byte  15,89,244                           // mulps         %xmm4,%xmm6
  .byte  15,88,245                           // addps         %xmm5,%xmm6
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,84,248                           // andps         %xmm0,%xmm7
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  15,86,199                           // orps          %xmm7,%xmm0
  .byte  15,84,194                           // andps         %xmm2,%xmm0
  .byte  15,40,125,184                       // movaps        -0x48(%ebp),%xmm7
  .byte  15,85,215                           // andnps        %xmm7,%xmm2
  .byte  15,86,208                           // orps          %xmm0,%xmm2
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,84,211                           // andps         %xmm3,%xmm2
  .byte  15,85,217                           // andnps        %xmm1,%xmm3
  .byte  15,86,218                           // orps          %xmm2,%xmm3
  .byte  15,40,117,216                       // movaps        -0x28(%ebp),%xmm6
  .byte  15,85,243                           // andnps        %xmm3,%xmm6
  .byte  15,40,85,200                        // movaps        -0x38(%ebp),%xmm2
  .byte  15,88,144,78,95,0,0                 // addps         0x5f4e(%eax),%xmm2
  .byte  243,15,91,194                       // cvttps2dq     %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,194,200,1                        // cmpltps       %xmm0,%xmm1
  .byte  15,84,141,104,255,255,255           // andps         -0x98(%ebp),%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  15,92,208                           // subps         %xmm0,%xmm2
  .byte  15,40,77,152                        // movaps        -0x68(%ebp),%xmm1
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,40,93,136                        // movaps        -0x78(%ebp),%xmm3
  .byte  15,92,217                           // subps         %xmm1,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,221                           // addps         %xmm5,%xmm3
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,109,168                       // movaps        -0x58(%ebp),%xmm5
  .byte  15,194,234,2                        // cmpleps       %xmm2,%xmm5
  .byte  15,84,229                           // andps         %xmm5,%xmm4
  .byte  15,85,235                           // andnps        %xmm3,%xmm5
  .byte  15,86,236                           // orps          %xmm4,%xmm5
  .byte  15,40,133,72,255,255,255            // movaps        -0xb8(%ebp),%xmm0
  .byte  15,194,194,2                        // cmpleps       %xmm2,%xmm0
  .byte  15,84,232                           // andps         %xmm0,%xmm5
  .byte  15,85,199                           // andnps        %xmm7,%xmm0
  .byte  15,86,197                           // orps          %xmm5,%xmm0
  .byte  15,40,157,88,255,255,255            // movaps        -0xa8(%ebp),%xmm3
  .byte  15,194,218,2                        // cmpleps       %xmm2,%xmm3
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,84,195                           // andps         %xmm3,%xmm0
  .byte  15,85,217                           // andnps        %xmm1,%xmm3
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,86,216                           // orps          %xmm0,%xmm3
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,40,149,56,255,255,255            // movaps        -0xc8(%ebp),%xmm2
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  15,84,211                           // andps         %xmm3,%xmm2
  .byte  15,85,220                           // andnps        %xmm4,%xmm3
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,40,133,120,255,255,255           // movaps        -0x88(%ebp),%xmm0
  .byte  15,86,194                           // orps          %xmm2,%xmm0
  .byte  15,86,242                           // orps          %xmm2,%xmm6
  .byte  15,86,211                           // orps          %xmm3,%xmm2
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,40,157,40,255,255,255            // movaps        -0xd8(%ebp),%xmm3
  .byte  255,23                              // call          *(%edi)
  .byte  129,196,44,1,0,0                    // add           $0x12c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_scale_1_float_sse2
.globl _sk_scale_1_float_sse2
FUNCTION(_sk_scale_1_float_sse2)
_sk_scale_1_float_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  243,15,16,39                        // movss         (%edi),%xmm4
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_scale_u8_sse2
.globl _sk_scale_u8_sse2
FUNCTION(_sk_scale_u8_sse2)
_sk_scale_u8_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          3148 <_sk_scale_u8_sse2+0xe>
  .byte  91                                  // pop           %ebx
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  117,106                             // jne           31d3 <_sk_scale_u8_sse2+0x99>
  .byte  102,15,110,36,57                    // movd          (%ecx,%edi,1),%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  102,15,219,163,88,92,0,0            // pand          0x5c58(%ebx),%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,163,104,92,0,0                // mulps         0x5c68(%ebx),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,65                              // je            3221 <_sk_scale_u8_sse2+0xe7>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,23                              // je            3204 <_sk_scale_u8_sse2+0xca>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  117,131                             // jne           3176 <_sk_scale_u8_sse2+0x3c>
  .byte  15,182,116,57,2                     // movzbl        0x2(%ecx,%edi,1),%esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  15,183,12,57                        // movzwl        (%ecx,%edi,1),%ecx
  .byte  102,15,110,233                      // movd          %ecx,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  233,85,255,255,255                  // jmp           3176 <_sk_scale_u8_sse2+0x3c>
  .byte  15,182,12,57                        // movzbl        (%ecx,%edi,1),%ecx
  .byte  102,15,110,225                      // movd          %ecx,%xmm4
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,69,255,255,255                  // jmp           3176 <_sk_scale_u8_sse2+0x3c>

HIDDEN _sk_lerp_1_float_sse2
.globl _sk_lerp_1_float_sse2
FUNCTION(_sk_lerp_1_float_sse2)
_sk_lerp_1_float_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  243,15,16,57                        // movss         (%ecx),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,92,85,72                         // subps         0x48(%ebp),%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,92,220                           // subps         %xmm4,%xmm3
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,88,220                           // addps         %xmm4,%xmm3
  .byte  141,88,8                            // lea           0x8(%eax),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_lerp_u8_sse2
.globl _sk_lerp_u8_sse2
FUNCTION(_sk_lerp_u8_sse2)
_sk_lerp_u8_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  232,0,0,0,0                         // call          32cf <_sk_lerp_u8_sse2+0x12>
  .byte  91                                  // pop           %ebx
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  15,133,143,0,0,0                    // jne           337b <_sk_lerp_u8_sse2+0xbe>
  .byte  102,15,110,36,57                    // movd          (%ecx,%edi,1),%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  102,15,219,163,241,90,0,0           // pand          0x5af1(%ebx),%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,163,1,91,0,0                  // mulps         0x5b01(%ebx),%xmm4
  .byte  15,92,197                           // subps         %xmm5,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,92,206                           // subps         %xmm6,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,92,215                           // subps         %xmm7,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,88,221                           // addps         %xmm5,%xmm3
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,69                              // je            33cd <_sk_lerp_u8_sse2+0x110>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,27                              // je            33b0 <_sk_lerp_u8_sse2+0xf3>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  15,133,90,255,255,255               // jne           32f9 <_sk_lerp_u8_sse2+0x3c>
  .byte  15,182,116,57,2                     // movzbl        0x2(%ecx,%edi,1),%esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  15,183,12,57                        // movzwl        (%ecx,%edi,1),%ecx
  .byte  102,15,110,233                      // movd          %ecx,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  233,44,255,255,255                  // jmp           32f9 <_sk_lerp_u8_sse2+0x3c>
  .byte  15,182,12,57                        // movzbl        (%ecx,%edi,1),%ecx
  .byte  102,15,110,225                      // movd          %ecx,%xmm4
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,28,255,255,255                  // jmp           32f9 <_sk_lerp_u8_sse2+0x3c>

HIDDEN _sk_lerp_565_sse2
.globl _sk_lerp_565_sse2
FUNCTION(_sk_lerp_565_sse2)
_sk_lerp_565_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          33eb <_sk_lerp_565_sse2+0xe>
  .byte  91                                  // pop           %ebx
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  15,133,212,0,0,0                    // jne           34d8 <_sk_lerp_565_sse2+0xfb>
  .byte  243,15,126,52,121                   // movq          (%ecx,%edi,2),%xmm6
  .byte  102,15,97,240                       // punpcklwd     %xmm0,%xmm6
  .byte  102,15,111,163,245,89,0,0           // movdqa        0x59f5(%ebx),%xmm4
  .byte  102,15,219,230                      // pand          %xmm6,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,163,5,90,0,0                  // mulps         0x5a05(%ebx),%xmm4
  .byte  102,15,111,187,21,90,0,0            // movdqa        0x5a15(%ebx),%xmm7
  .byte  102,15,219,254                      // pand          %xmm6,%xmm7
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  15,89,187,37,90,0,0                 // mulps         0x5a25(%ebx),%xmm7
  .byte  102,15,219,179,53,90,0,0            // pand          0x5a35(%ebx),%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,89,179,69,90,0,0                 // mulps         0x5a45(%ebx),%xmm6
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,92,197                           // subps         %xmm5,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,92,213                           // subps         %xmm5,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  15,89,251                           // mulps         %xmm3,%xmm7
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,88,253                           // addps         %xmm5,%xmm7
  .byte  15,88,221                           // addps         %xmm5,%xmm3
  .byte  15,95,251                           // maxps         %xmm3,%xmm7
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  15,95,231                           // maxps         %xmm7,%xmm4
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  15,88,195                           // addps         %xmm3,%xmm0
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,92,36,32                      // movaps        %xmm3,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,58                              // je            351f <_sk_lerp_565_sse2+0x142>
  .byte  102,15,239,246                      // pxor          %xmm6,%xmm6
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,27                              // je            350d <_sk_lerp_565_sse2+0x130>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  15,133,17,255,255,255               // jne           340d <_sk_lerp_565_sse2+0x30>
  .byte  15,183,116,121,4                    // movzwl        0x4(%ecx,%edi,2),%esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  102,15,112,244,69                   // pshufd        $0x45,%xmm4,%xmm6
  .byte  102,15,110,36,121                   // movd          (%ecx,%edi,2),%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  242,15,16,244                       // movsd         %xmm4,%xmm6
  .byte  233,238,254,255,255                 // jmp           340d <_sk_lerp_565_sse2+0x30>
  .byte  15,183,12,121                       // movzwl        (%ecx,%edi,2),%ecx
  .byte  102,15,110,241                      // movd          %ecx,%xmm6
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,222,254,255,255                 // jmp           340d <_sk_lerp_565_sse2+0x30>

HIDDEN _sk_load_tables_sse2
.globl _sk_load_tables_sse2
FUNCTION(_sk_load_tables_sse2)
_sk_load_tables_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          353d <_sk_load_tables_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,24                           // mov           0x18(%ebp),%eax
  .byte  139,93,16                           // mov           0x10(%ebp),%ebx
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  133,192                             // test          %eax,%eax
  .byte  139,17                              // mov           (%ecx),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  15,133,75,1,0,0                     // jne           369e <_sk_load_tables_sse2+0x16f>
  .byte  243,15,111,28,159                   // movdqu        (%edi,%ebx,4),%xmm3
  .byte  102,15,111,150,3,89,0,0             // movdqa        0x5903(%esi),%xmm2
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,112,224,231                  // pshufd        $0xe7,%xmm0,%xmm4
  .byte  102,15,126,231                      // movd          %xmm4,%edi
  .byte  139,74,4                            // mov           0x4(%edx),%ecx
  .byte  243,15,16,36,185                    // movss         (%ecx,%edi,4),%xmm4
  .byte  102,15,126,207                      // movd          %xmm1,%edi
  .byte  243,15,16,44,185                    // movss         (%ecx,%edi,4),%xmm5
  .byte  102,15,126,199                      // movd          %xmm0,%edi
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  243,15,16,4,185                     // movss         (%ecx,%edi,4),%xmm0
  .byte  102,15,126,207                      // movd          %xmm1,%edi
  .byte  243,15,16,12,185                    // movss         (%ecx,%edi,4),%xmm1
  .byte  139,74,8                            // mov           0x8(%edx),%ecx
  .byte  15,20,236                           // unpcklps      %xmm4,%xmm5
  .byte  15,20,193                           // unpcklps      %xmm1,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  102,15,112,225,229                  // pshufd        $0xe5,%xmm1,%xmm4
  .byte  102,15,112,241,231                  // pshufd        $0xe7,%xmm1,%xmm6
  .byte  102,15,126,247                      // movd          %xmm6,%edi
  .byte  243,15,16,52,185                    // movss         (%ecx,%edi,4),%xmm6
  .byte  102,15,126,231                      // movd          %xmm4,%edi
  .byte  243,15,16,36,185                    // movss         (%ecx,%edi,4),%xmm4
  .byte  102,15,126,207                      // movd          %xmm1,%edi
  .byte  102,15,112,249,78                   // pshufd        $0x4e,%xmm1,%xmm7
  .byte  243,15,16,12,185                    // movss         (%ecx,%edi,4),%xmm1
  .byte  102,15,126,255                      // movd          %xmm7,%edi
  .byte  243,15,16,60,185                    // movss         (%ecx,%edi,4),%xmm7
  .byte  15,20,197                           // unpcklps      %xmm5,%xmm0
  .byte  15,20,230                           // unpcklps      %xmm6,%xmm4
  .byte  15,20,207                           // unpcklps      %xmm7,%xmm1
  .byte  139,74,12                           // mov           0xc(%edx),%ecx
  .byte  102,15,111,235                      // movdqa        %xmm3,%xmm5
  .byte  102,15,114,213,16                   // psrld         $0x10,%xmm5
  .byte  102,15,219,234                      // pand          %xmm2,%xmm5
  .byte  102,15,112,213,229                  // pshufd        $0xe5,%xmm5,%xmm2
  .byte  102,15,112,245,231                  // pshufd        $0xe7,%xmm5,%xmm6
  .byte  102,15,126,242                      // movd          %xmm6,%edx
  .byte  243,15,16,52,145                    // movss         (%ecx,%edx,4),%xmm6
  .byte  102,15,126,210                      // movd          %xmm2,%edx
  .byte  243,15,16,60,145                    // movss         (%ecx,%edx,4),%xmm7
  .byte  102,15,126,234                      // movd          %xmm5,%edx
  .byte  102,15,112,237,78                   // pshufd        $0x4e,%xmm5,%xmm5
  .byte  243,15,16,20,145                    // movss         (%ecx,%edx,4),%xmm2
  .byte  102,15,126,234                      // movd          %xmm5,%edx
  .byte  243,15,16,44,145                    // movss         (%ecx,%edx,4),%xmm5
  .byte  15,20,204                           // unpcklps      %xmm4,%xmm1
  .byte  15,20,254                           // unpcklps      %xmm6,%xmm7
  .byte  15,20,213                           // unpcklps      %xmm5,%xmm2
  .byte  15,20,215                           // unpcklps      %xmm7,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,158,19,89,0,0                 // mulps         0x5913(%esi),%xmm3
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  137,206                             // mov           %ecx,%esi
  .byte  141,78,8                            // lea           0x8(%esi),%ecx
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,68,36,16                        // mov           %eax,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,92,36,8                         // mov           %ebx,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  137,193                             // mov           %eax,%ecx
  .byte  128,225,3                           // and           $0x3,%cl
  .byte  128,249,1                           // cmp           $0x1,%cl
  .byte  116,39                              // je            36cf <_sk_load_tables_sse2+0x1a0>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  128,249,2                           // cmp           $0x2,%cl
  .byte  116,20                              // je            36c5 <_sk_load_tables_sse2+0x196>
  .byte  128,249,3                           // cmp           $0x3,%cl
  .byte  15,133,158,254,255,255              // jne           3558 <_sk_load_tables_sse2+0x29>
  .byte  102,15,110,68,159,8                 // movd          0x8(%edi,%ebx,4),%xmm0
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  102,15,18,28,159                    // movlpd        (%edi,%ebx,4),%xmm3
  .byte  233,137,254,255,255                 // jmp           3558 <_sk_load_tables_sse2+0x29>
  .byte  102,15,110,28,159                   // movd          (%edi,%ebx,4),%xmm3
  .byte  233,127,254,255,255                 // jmp           3558 <_sk_load_tables_sse2+0x29>

HIDDEN _sk_load_tables_u16_be_sse2
.globl _sk_load_tables_u16_be_sse2
FUNCTION(_sk_load_tables_u16_be_sse2)
_sk_load_tables_u16_be_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,140,0,0,0                   // sub           $0x8c,%esp
  .byte  232,0,0,0,0                         // call          36ea <_sk_load_tables_u16_be_sse2+0x11>
  .byte  95                                  // pop           %edi
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  131,125,24,0                        // cmpl          $0x0,0x18(%ebp)
  .byte  139,24                              // mov           (%eax),%ebx
  .byte  139,11                              // mov           (%ebx),%ecx
  .byte  141,52,149,0,0,0,0                  // lea           0x0(,%edx,4),%esi
  .byte  186,255,0,255,0                     // mov           $0xff00ff,%edx
  .byte  15,133,229,1,0,0                    // jne           38f0 <_sk_load_tables_u16_be_sse2+0x217>
  .byte  102,15,16,4,113                     // movupd        (%ecx,%esi,2),%xmm0
  .byte  243,15,111,76,113,16                // movdqu        0x10(%ecx,%esi,2),%xmm1
  .byte  102,15,40,216                       // movapd        %xmm0,%xmm3
  .byte  102,15,97,217                       // punpcklwd     %xmm1,%xmm3
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,105,216                      // punpckhwd     %xmm0,%xmm3
  .byte  102,15,112,194,229                  // pshufd        $0xe5,%xmm2,%xmm0
  .byte  102,15,126,193                      // movd          %xmm0,%ecx
  .byte  102,15,126,214                      // movd          %xmm2,%esi
  .byte  102,15,112,202,78                   // pshufd        $0x4e,%xmm2,%xmm1
  .byte  102,15,112,234,231                  // pshufd        $0xe7,%xmm2,%xmm5
  .byte  33,214                              // and           %edx,%esi
  .byte  137,117,216                         // mov           %esi,-0x28(%ebp)
  .byte  33,209                              // and           %edx,%ecx
  .byte  137,77,220                          // mov           %ecx,-0x24(%ebp)
  .byte  243,15,126,69,216                   // movq          -0x28(%ebp),%xmm0
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  102,15,97,194                       // punpcklwd     %xmm2,%xmm0
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  102,15,112,208,229                  // pshufd        $0xe5,%xmm0,%xmm2
  .byte  102,15,112,240,231                  // pshufd        $0xe7,%xmm0,%xmm6
  .byte  102,15,126,241                      // movd          %xmm6,%ecx
  .byte  139,115,4                           // mov           0x4(%ebx),%esi
  .byte  243,15,16,52,142                    // movss         (%esi,%ecx,4),%xmm6
  .byte  102,15,126,209                      // movd          %xmm2,%ecx
  .byte  243,15,16,20,142                    // movss         (%esi,%ecx,4),%xmm2
  .byte  102,15,126,193                      // movd          %xmm0,%ecx
  .byte  102,15,112,248,78                   // pshufd        $0x4e,%xmm0,%xmm7
  .byte  243,15,16,4,142                     // movss         (%esi,%ecx,4),%xmm0
  .byte  102,15,126,249                      // movd          %xmm7,%ecx
  .byte  243,15,16,60,142                    // movss         (%esi,%ecx,4),%xmm7
  .byte  102,15,126,233                      // movd          %xmm5,%ecx
  .byte  139,115,8                           // mov           0x8(%ebx),%esi
  .byte  33,209                              // and           %edx,%ecx
  .byte  137,77,228                          // mov           %ecx,-0x1c(%ebp)
  .byte  102,15,126,201                      // movd          %xmm1,%ecx
  .byte  102,15,112,203,229                  // pshufd        $0xe5,%xmm3,%xmm1
  .byte  33,209                              // and           %edx,%ecx
  .byte  137,77,224                          // mov           %ecx,-0x20(%ebp)
  .byte  102,15,126,201                      // movd          %xmm1,%ecx
  .byte  243,15,126,109,224                  // movq          -0x20(%ebp),%xmm5
  .byte  102,15,97,236                       // punpcklwd     %xmm4,%xmm5
  .byte  102,15,112,205,231                  // pshufd        $0xe7,%xmm5,%xmm1
  .byte  102,15,126,200                      // movd          %xmm1,%eax
  .byte  243,15,16,36,134                    // movss         (%esi,%eax,4),%xmm4
  .byte  15,20,214                           // unpcklps      %xmm6,%xmm2
  .byte  102,15,112,205,229                  // pshufd        $0xe5,%xmm5,%xmm1
  .byte  102,15,126,200                      // movd          %xmm1,%eax
  .byte  243,15,16,52,134                    // movss         (%esi,%eax,4),%xmm6
  .byte  15,20,199                           // unpcklps      %xmm7,%xmm0
  .byte  102,15,126,232                      // movd          %xmm5,%eax
  .byte  243,15,16,12,134                    // movss         (%esi,%eax,4),%xmm1
  .byte  102,15,112,237,78                   // pshufd        $0x4e,%xmm5,%xmm5
  .byte  102,15,126,232                      // movd          %xmm5,%eax
  .byte  243,15,16,44,134                    // movss         (%esi,%eax,4),%xmm5
  .byte  102,15,126,216                      // movd          %xmm3,%eax
  .byte  139,115,12                          // mov           0xc(%ebx),%esi
  .byte  33,208                              // and           %edx,%eax
  .byte  137,69,232                          // mov           %eax,-0x18(%ebp)
  .byte  33,209                              // and           %edx,%ecx
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,244                           // unpcklps      %xmm4,%xmm6
  .byte  15,20,205                           // unpcklps      %xmm5,%xmm1
  .byte  15,20,206                           // unpcklps      %xmm6,%xmm1
  .byte  137,77,236                          // mov           %ecx,-0x14(%ebp)
  .byte  243,15,126,85,232                   // movq          -0x18(%ebp),%xmm2
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  102,15,97,212                       // punpcklwd     %xmm4,%xmm2
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  102,15,112,226,229                  // pshufd        $0xe5,%xmm2,%xmm4
  .byte  102,15,112,234,231                  // pshufd        $0xe7,%xmm2,%xmm5
  .byte  102,15,126,232                      // movd          %xmm5,%eax
  .byte  243,15,16,44,134                    // movss         (%esi,%eax,4),%xmm5
  .byte  102,15,126,224                      // movd          %xmm4,%eax
  .byte  243,15,16,36,134                    // movss         (%esi,%eax,4),%xmm4
  .byte  102,15,126,208                      // movd          %xmm2,%eax
  .byte  102,15,112,242,78                   // pshufd        $0x4e,%xmm2,%xmm6
  .byte  243,15,16,20,134                    // movss         (%esi,%eax,4),%xmm2
  .byte  102,15,126,240                      // movd          %xmm6,%eax
  .byte  243,15,16,52,134                    // movss         (%esi,%eax,4),%xmm6
  .byte  15,20,229                           // unpcklps      %xmm5,%xmm4
  .byte  15,20,214                           // unpcklps      %xmm6,%xmm2
  .byte  15,20,212                           // unpcklps      %xmm4,%xmm2
  .byte  102,15,112,219,78                   // pshufd        $0x4e,%xmm3,%xmm3
  .byte  102,15,111,227                      // movdqa        %xmm3,%xmm4
  .byte  102,15,113,244,8                    // psllw         $0x8,%xmm4
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,220                      // por           %xmm4,%xmm3
  .byte  102,15,126,93,208                   // movd          %xmm3,-0x30(%ebp)
  .byte  102,15,112,219,229                  // pshufd        $0xe5,%xmm3,%xmm3
  .byte  102,15,126,93,212                   // movd          %xmm3,-0x2c(%ebp)
  .byte  243,15,126,93,208                   // movq          -0x30(%ebp),%xmm3
  .byte  102,15,97,223                       // punpcklwd     %xmm7,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,159,118,87,0,0                // mulps         0x5776(%edi),%xmm3
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  137,193                             // mov           %eax,%ecx
  .byte  141,65,8                            // lea           0x8(%ecx),%eax
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,68,36,4                         // mov           %eax,0x4(%esp)
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,81,4                            // call          *0x4(%ecx)
  .byte  129,196,140,0,0,0                   // add           $0x8c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  242,15,16,4,113                     // movsd         (%ecx,%esi,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  139,69,24                           // mov           0x18(%ebp),%eax
  .byte  131,248,1                           // cmp           $0x1,%eax
  .byte  15,132,17,254,255,255               // je            3716 <_sk_load_tables_u16_be_sse2+0x3d>
  .byte  102,15,22,68,113,8                  // movhpd        0x8(%ecx,%esi,2),%xmm0
  .byte  131,248,3                           // cmp           $0x3,%eax
  .byte  15,130,2,254,255,255                // jb            3716 <_sk_load_tables_u16_be_sse2+0x3d>
  .byte  243,15,126,76,113,16                // movq          0x10(%ecx,%esi,2),%xmm1
  .byte  233,247,253,255,255                 // jmp           3716 <_sk_load_tables_u16_be_sse2+0x3d>

HIDDEN _sk_load_tables_rgb_u16_be_sse2
.globl _sk_load_tables_rgb_u16_be_sse2
FUNCTION(_sk_load_tables_rgb_u16_be_sse2)
_sk_load_tables_rgb_u16_be_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  232,0,0,0,0                         // call          392d <_sk_load_tables_rgb_u16_be_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  137,69,240                          // mov           %eax,-0x10(%ebp)
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  131,125,24,0                        // cmpl          $0x0,0x18(%ebp)
  .byte  139,24                              // mov           (%eax),%ebx
  .byte  139,19                              // mov           (%ebx),%edx
  .byte  141,60,73                           // lea           (%ecx,%ecx,2),%edi
  .byte  190,255,0,255,0                     // mov           $0xff00ff,%esi
  .byte  15,133,198,1,0,0                    // jne           3b13 <_sk_load_tables_rgb_u16_be_sse2+0x1f4>
  .byte  243,15,111,12,122                   // movdqu        (%edx,%edi,2),%xmm1
  .byte  243,15,111,92,122,8                 // movdqu        0x8(%edx,%edi,2),%xmm3
  .byte  102,15,115,219,4                    // psrldq        $0x4,%xmm3
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,115,218,6                    // psrldq        $0x6,%xmm2
  .byte  102,15,97,203                       // punpcklwd     %xmm3,%xmm1
  .byte  102,15,97,194                       // punpcklwd     %xmm2,%xmm0
  .byte  102,15,111,209                      // movdqa        %xmm1,%xmm2
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,15,105,200                      // punpckhwd     %xmm0,%xmm1
  .byte  102,15,112,194,229                  // pshufd        $0xe5,%xmm2,%xmm0
  .byte  102,15,126,199                      // movd          %xmm0,%edi
  .byte  102,15,126,208                      // movd          %xmm2,%eax
  .byte  102,15,112,195,229                  // pshufd        $0xe5,%xmm3,%xmm0
  .byte  102,15,126,194                      // movd          %xmm0,%edx
  .byte  33,240                              // and           %esi,%eax
  .byte  137,69,216                          // mov           %eax,-0x28(%ebp)
  .byte  33,247                              // and           %esi,%edi
  .byte  137,125,220                         // mov           %edi,-0x24(%ebp)
  .byte  243,15,126,69,216                   // movq          -0x28(%ebp),%xmm0
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  102,15,97,194                       // punpcklwd     %xmm2,%xmm0
  .byte  102,15,239,246                      // pxor          %xmm6,%xmm6
  .byte  102,15,112,224,229                  // pshufd        $0xe5,%xmm0,%xmm4
  .byte  102,15,112,248,231                  // pshufd        $0xe7,%xmm0,%xmm7
  .byte  102,15,126,248                      // movd          %xmm7,%eax
  .byte  139,123,4                           // mov           0x4(%ebx),%edi
  .byte  243,15,16,20,135                    // movss         (%edi,%eax,4),%xmm2
  .byte  102,15,126,224                      // movd          %xmm4,%eax
  .byte  243,15,16,60,135                    // movss         (%edi,%eax,4),%xmm7
  .byte  102,15,126,192                      // movd          %xmm0,%eax
  .byte  102,15,112,224,78                   // pshufd        $0x4e,%xmm0,%xmm4
  .byte  243,15,16,44,135                    // movss         (%edi,%eax,4),%xmm5
  .byte  102,15,126,224                      // movd          %xmm4,%eax
  .byte  243,15,16,36,135                    // movss         (%edi,%eax,4),%xmm4
  .byte  102,15,126,216                      // movd          %xmm3,%eax
  .byte  102,15,112,217,229                  // pshufd        $0xe5,%xmm1,%xmm3
  .byte  139,123,8                           // mov           0x8(%ebx),%edi
  .byte  33,240                              // and           %esi,%eax
  .byte  137,69,224                          // mov           %eax,-0x20(%ebp)
  .byte  102,15,126,216                      // movd          %xmm3,%eax
  .byte  33,242                              // and           %esi,%edx
  .byte  137,85,228                          // mov           %edx,-0x1c(%ebp)
  .byte  243,15,126,93,224                   // movq          -0x20(%ebp),%xmm3
  .byte  102,15,97,222                       // punpcklwd     %xmm6,%xmm3
  .byte  102,15,112,243,231                  // pshufd        $0xe7,%xmm3,%xmm6
  .byte  102,15,126,242                      // movd          %xmm6,%edx
  .byte  243,15,16,52,151                    // movss         (%edi,%edx,4),%xmm6
  .byte  102,15,126,202                      // movd          %xmm1,%edx
  .byte  102,15,112,203,229                  // pshufd        $0xe5,%xmm3,%xmm1
  .byte  102,15,126,201                      // movd          %xmm1,%ecx
  .byte  243,15,16,4,143                     // movss         (%edi,%ecx,4),%xmm0
  .byte  15,20,250                           // unpcklps      %xmm2,%xmm7
  .byte  102,15,126,217                      // movd          %xmm3,%ecx
  .byte  243,15,16,12,143                    // movss         (%edi,%ecx,4),%xmm1
  .byte  102,15,112,211,78                   // pshufd        $0x4e,%xmm3,%xmm2
  .byte  102,15,126,209                      // movd          %xmm2,%ecx
  .byte  243,15,16,28,143                    // movss         (%edi,%ecx,4),%xmm3
  .byte  139,75,12                           // mov           0xc(%ebx),%ecx
  .byte  33,242                              // and           %esi,%edx
  .byte  137,85,232                          // mov           %edx,-0x18(%ebp)
  .byte  33,240                              // and           %esi,%eax
  .byte  15,20,236                           // unpcklps      %xmm4,%xmm5
  .byte  15,20,239                           // unpcklps      %xmm7,%xmm5
  .byte  15,20,198                           // unpcklps      %xmm6,%xmm0
  .byte  137,69,236                          // mov           %eax,-0x14(%ebp)
  .byte  243,15,126,85,232                   // movq          -0x18(%ebp),%xmm2
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  102,15,97,212                       // punpcklwd     %xmm4,%xmm2
  .byte  102,15,112,226,229                  // pshufd        $0xe5,%xmm2,%xmm4
  .byte  102,15,112,242,231                  // pshufd        $0xe7,%xmm2,%xmm6
  .byte  102,15,126,240                      // movd          %xmm6,%eax
  .byte  243,15,16,52,129                    // movss         (%ecx,%eax,4),%xmm6
  .byte  102,15,126,224                      // movd          %xmm4,%eax
  .byte  243,15,16,36,129                    // movss         (%ecx,%eax,4),%xmm4
  .byte  102,15,126,208                      // movd          %xmm2,%eax
  .byte  102,15,112,250,78                   // pshufd        $0x4e,%xmm2,%xmm7
  .byte  243,15,16,20,129                    // movss         (%ecx,%eax,4),%xmm2
  .byte  102,15,126,248                      // movd          %xmm7,%eax
  .byte  243,15,16,60,129                    // movss         (%ecx,%eax,4),%xmm7
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,200                           // unpcklps      %xmm0,%xmm1
  .byte  15,20,230                           // unpcklps      %xmm6,%xmm4
  .byte  15,20,215                           // unpcklps      %xmm7,%xmm2
  .byte  15,20,212                           // unpcklps      %xmm4,%xmm2
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  137,193                             // mov           %eax,%ecx
  .byte  141,65,8                            // lea           0x8(%ecx),%eax
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,40,69,72                         // movaps        0x48(%ebp),%xmm0
  .byte  15,41,68,36,64                      // movaps        %xmm0,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,68,36,4                         // mov           %eax,0x4(%esp)
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  139,69,240                          // mov           -0x10(%ebp),%eax
  .byte  15,40,152,67,85,0,0                 // movaps        0x5543(%eax),%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  255,81,4                            // call          *0x4(%ecx)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  102,15,110,12,122                   // movd          (%edx,%edi,2),%xmm1
  .byte  102,15,196,76,122,4,2               // pinsrw        $0x2,0x4(%edx,%edi,2),%xmm1
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  139,69,24                           // mov           0x18(%ebp),%eax
  .byte  131,248,1                           // cmp           $0x1,%eax
  .byte  117,13                              // jne           3b38 <_sk_load_tables_rgb_u16_be_sse2+0x219>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,55,254,255,255                  // jmp           396f <_sk_load_tables_rgb_u16_be_sse2+0x50>
  .byte  102,15,110,68,122,6                 // movd          0x6(%edx,%edi,2),%xmm0
  .byte  102,15,196,68,122,10,2              // pinsrw        $0x2,0xa(%edx,%edi,2),%xmm0
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  131,248,3                           // cmp           $0x3,%eax
  .byte  114,18                              // jb            3b60 <_sk_load_tables_rgb_u16_be_sse2+0x241>
  .byte  102,15,110,92,122,12                // movd          0xc(%edx,%edi,2),%xmm3
  .byte  102,15,196,92,122,16,2              // pinsrw        $0x2,0x10(%edx,%edi,2),%xmm3
  .byte  233,15,254,255,255                  // jmp           396f <_sk_load_tables_rgb_u16_be_sse2+0x50>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  233,6,254,255,255                   // jmp           396f <_sk_load_tables_rgb_u16_be_sse2+0x50>

HIDDEN _sk_byte_tables_sse2
.globl _sk_byte_tables_sse2
FUNCTION(_sk_byte_tables_sse2)
_sk_byte_tables_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          3b77 <_sk_byte_tables_sse2+0xe>
  .byte  90                                  // pop           %edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  15,40,170,9,83,0,0                  // movaps        0x5309(%edx),%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,15,112,224,78                   // pshufd        $0x4e,%xmm0,%xmm4
  .byte  102,15,126,230                      // movd          %xmm4,%esi
  .byte  102,15,112,224,231                  // pshufd        $0xe7,%xmm0,%xmm4
  .byte  139,57                              // mov           (%ecx),%edi
  .byte  15,182,52,55                        // movzbl        (%edi,%esi,1),%esi
  .byte  102,15,126,227                      // movd          %xmm4,%ebx
  .byte  15,182,28,31                        // movzbl        (%edi,%ebx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  9,243                               // or            %esi,%ebx
  .byte  102,15,112,224,229                  // pshufd        $0xe5,%xmm0,%xmm4
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  15,182,52,55                        // movzbl        (%edi,%esi,1),%esi
  .byte  102,15,126,224                      // movd          %xmm4,%eax
  .byte  15,182,4,7                          // movzbl        (%edi,%eax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,240                               // or            %esi,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  139,65,4                            // mov           0x4(%ecx),%eax
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  15,40,162,25,83,0,0                 // movaps        0x5319(%edx),%xmm4
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,15,112,241,78                   // pshufd        $0x4e,%xmm1,%xmm6
  .byte  102,15,126,242                      // movd          %xmm6,%edx
  .byte  102,15,112,241,231                  // pshufd        $0xe7,%xmm1,%xmm6
  .byte  102,15,126,246                      // movd          %xmm6,%esi
  .byte  15,182,20,16                        // movzbl        (%eax,%edx,1),%edx
  .byte  15,182,52,48                        // movzbl        (%eax,%esi,1),%esi
  .byte  193,230,8                           // shl           $0x8,%esi
  .byte  9,214                               // or            %edx,%esi
  .byte  102,15,126,202                      // movd          %xmm1,%edx
  .byte  102,15,112,201,229                  // pshufd        $0xe5,%xmm1,%xmm1
  .byte  15,182,20,16                        // movzbl        (%eax,%edx,1),%edx
  .byte  102,15,126,207                      // movd          %xmm1,%edi
  .byte  15,182,4,56                         // movzbl        (%eax,%edi,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,208                               // or            %edx,%eax
  .byte  102,15,196,200,0                    // pinsrw        $0x0,%eax,%xmm1
  .byte  102,15,196,206,1                    // pinsrw        $0x1,%esi,%xmm1
  .byte  139,65,8                            // mov           0x8(%ecx),%eax
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,15,112,242,78                   // pshufd        $0x4e,%xmm2,%xmm6
  .byte  102,15,126,242                      // movd          %xmm6,%edx
  .byte  102,15,112,242,231                  // pshufd        $0xe7,%xmm2,%xmm6
  .byte  102,15,126,246                      // movd          %xmm6,%esi
  .byte  15,182,20,16                        // movzbl        (%eax,%edx,1),%edx
  .byte  15,182,52,48                        // movzbl        (%eax,%esi,1),%esi
  .byte  193,230,8                           // shl           $0x8,%esi
  .byte  9,214                               // or            %edx,%esi
  .byte  102,15,126,210                      // movd          %xmm2,%edx
  .byte  102,15,112,210,229                  // pshufd        $0xe5,%xmm2,%xmm2
  .byte  15,182,20,16                        // movzbl        (%eax,%edx,1),%edx
  .byte  102,15,126,215                      // movd          %xmm2,%edi
  .byte  15,182,4,56                         // movzbl        (%eax,%edi,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,208                               // or            %edx,%eax
  .byte  102,15,196,208,0                    // pinsrw        $0x0,%eax,%xmm2
  .byte  102,15,196,214,1                    // pinsrw        $0x1,%esi,%xmm2
  .byte  139,65,12                           // mov           0xc(%ecx),%eax
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  102,15,91,219                       // cvtps2dq      %xmm3,%xmm3
  .byte  102,15,126,217                      // movd          %xmm3,%ecx
  .byte  102,15,112,235,229                  // pshufd        $0xe5,%xmm3,%xmm5
  .byte  102,15,112,243,78                   // pshufd        $0x4e,%xmm3,%xmm6
  .byte  102,15,126,242                      // movd          %xmm6,%edx
  .byte  102,15,112,219,231                  // pshufd        $0xe7,%xmm3,%xmm3
  .byte  102,15,126,222                      // movd          %xmm3,%esi
  .byte  15,182,20,16                        // movzbl        (%eax,%edx,1),%edx
  .byte  15,182,52,48                        // movzbl        (%eax,%esi,1),%esi
  .byte  193,230,8                           // shl           $0x8,%esi
  .byte  9,214                               // or            %edx,%esi
  .byte  102,15,126,234                      // movd          %xmm5,%edx
  .byte  15,182,12,8                         // movzbl        (%eax,%ecx,1),%ecx
  .byte  15,182,4,16                         // movzbl        (%eax,%edx,1),%eax
  .byte  139,85,8                            // mov           0x8(%ebp),%edx
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,200                               // or            %ecx,%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  102,15,196,216,0                    // pinsrw        $0x0,%eax,%xmm3
  .byte  139,69,20                           // mov           0x14(%ebp),%eax
  .byte  102,15,196,222,1                    // pinsrw        $0x1,%esi,%xmm3
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  102,15,96,199                       // punpcklbw     %xmm7,%xmm0
  .byte  102,15,97,199                       // punpcklwd     %xmm7,%xmm0
  .byte  102,15,96,207                       // punpcklbw     %xmm7,%xmm1
  .byte  102,15,97,207                       // punpcklwd     %xmm7,%xmm1
  .byte  102,15,96,215                       // punpcklbw     %xmm7,%xmm2
  .byte  102,15,97,215                       // punpcklwd     %xmm7,%xmm2
  .byte  102,15,96,223                       // punpcklbw     %xmm7,%xmm3
  .byte  102,15,97,223                       // punpcklwd     %xmm7,%xmm3
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  139,93,12                           // mov           0xc(%ebp),%ebx
  .byte  141,123,8                           // lea           0x8(%ebx),%edi
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,68,36,12                        // mov           %eax,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,124,36,4                        // mov           %edi,0x4(%esp)
  .byte  137,20,36                           // mov           %edx,(%esp)
  .byte  255,83,4                            // call          *0x4(%ebx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_byte_tables_rgb_sse2
.globl _sk_byte_tables_rgb_sse2
FUNCTION(_sk_byte_tables_rgb_sse2)
_sk_byte_tables_rgb_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,81,12                           // mov           0xc(%ecx),%edx
  .byte  74                                  // dec           %edx
  .byte  102,15,110,226                      // movd          %edx,%xmm4
  .byte  102,15,112,228,0                    // pshufd        $0x0,%xmm4,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,15,112,232,78                   // pshufd        $0x4e,%xmm0,%xmm5
  .byte  102,15,126,234                      // movd          %xmm5,%edx
  .byte  102,15,112,232,231                  // pshufd        $0xe7,%xmm0,%xmm5
  .byte  102,15,126,238                      // movd          %xmm5,%esi
  .byte  139,57                              // mov           (%ecx),%edi
  .byte  15,182,20,23                        // movzbl        (%edi,%edx,1),%edx
  .byte  15,182,52,55                        // movzbl        (%edi,%esi,1),%esi
  .byte  193,230,8                           // shl           $0x8,%esi
  .byte  9,214                               // or            %edx,%esi
  .byte  102,15,126,194                      // movd          %xmm0,%edx
  .byte  102,15,112,192,229                  // pshufd        $0xe5,%xmm0,%xmm0
  .byte  15,182,20,23                        // movzbl        (%edi,%edx,1),%edx
  .byte  102,15,126,195                      // movd          %xmm0,%ebx
  .byte  15,182,60,31                        // movzbl        (%edi,%ebx,1),%edi
  .byte  193,231,8                           // shl           $0x8,%edi
  .byte  9,215                               // or            %edx,%edi
  .byte  232,0,0,0,0                         // call          3db3 <_sk_byte_tables_rgb_sse2+0x65>
  .byte  90                                  // pop           %edx
  .byte  102,15,196,199,0                    // pinsrw        $0x0,%edi,%xmm0
  .byte  139,121,4                           // mov           0x4(%ecx),%edi
  .byte  102,15,196,198,1                    // pinsrw        $0x1,%esi,%xmm0
  .byte  15,40,170,237,80,0,0                // movaps        0x50ed(%edx),%xmm5
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,15,112,241,78                   // pshufd        $0x4e,%xmm1,%xmm6
  .byte  102,15,126,242                      // movd          %xmm6,%edx
  .byte  102,15,112,241,231                  // pshufd        $0xe7,%xmm1,%xmm6
  .byte  102,15,126,246                      // movd          %xmm6,%esi
  .byte  15,182,20,23                        // movzbl        (%edi,%edx,1),%edx
  .byte  15,182,52,55                        // movzbl        (%edi,%esi,1),%esi
  .byte  193,230,8                           // shl           $0x8,%esi
  .byte  9,214                               // or            %edx,%esi
  .byte  102,15,126,202                      // movd          %xmm1,%edx
  .byte  102,15,112,201,229                  // pshufd        $0xe5,%xmm1,%xmm1
  .byte  15,182,20,23                        // movzbl        (%edi,%edx,1),%edx
  .byte  102,15,126,203                      // movd          %xmm1,%ebx
  .byte  15,182,60,31                        // movzbl        (%edi,%ebx,1),%edi
  .byte  193,231,8                           // shl           $0x8,%edi
  .byte  9,215                               // or            %edx,%edi
  .byte  102,15,196,207,0                    // pinsrw        $0x0,%edi,%xmm1
  .byte  102,15,196,206,1                    // pinsrw        $0x1,%esi,%xmm1
  .byte  139,73,8                            // mov           0x8(%ecx),%ecx
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,15,126,210                      // movd          %xmm2,%edx
  .byte  102,15,112,226,229                  // pshufd        $0xe5,%xmm2,%xmm4
  .byte  102,15,112,242,78                   // pshufd        $0x4e,%xmm2,%xmm6
  .byte  102,15,126,246                      // movd          %xmm6,%esi
  .byte  102,15,112,210,231                  // pshufd        $0xe7,%xmm2,%xmm2
  .byte  102,15,126,215                      // movd          %xmm2,%edi
  .byte  15,182,52,49                        // movzbl        (%ecx,%esi,1),%esi
  .byte  15,182,60,57                        // movzbl        (%ecx,%edi,1),%edi
  .byte  193,231,8                           // shl           $0x8,%edi
  .byte  9,247                               // or            %esi,%edi
  .byte  102,15,126,230                      // movd          %xmm4,%esi
  .byte  15,182,20,17                        // movzbl        (%ecx,%edx,1),%edx
  .byte  15,182,12,49                        // movzbl        (%ecx,%esi,1),%ecx
  .byte  139,117,8                           // mov           0x8(%ebp),%esi
  .byte  193,225,8                           // shl           $0x8,%ecx
  .byte  9,209                               // or            %edx,%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  102,15,196,209,0                    // pinsrw        $0x0,%ecx,%xmm2
  .byte  139,77,20                           // mov           0x14(%ebp),%ecx
  .byte  102,15,196,215,1                    // pinsrw        $0x1,%edi,%xmm2
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  102,15,96,199                       // punpcklbw     %xmm7,%xmm0
  .byte  102,15,97,199                       // punpcklwd     %xmm7,%xmm0
  .byte  102,15,96,207                       // punpcklbw     %xmm7,%xmm1
  .byte  102,15,97,207                       // punpcklwd     %xmm7,%xmm1
  .byte  102,15,96,215                       // punpcklbw     %xmm7,%xmm2
  .byte  102,15,97,215                       // punpcklwd     %xmm7,%xmm2
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  141,88,8                            // lea           0x8(%eax),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,76,36,12                        // mov           %ecx,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,52,36                           // mov           %esi,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_table_r_sse2
.globl _sk_table_r_sse2
FUNCTION(_sk_table_r_sse2)
_sk_table_r_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,50                              // mov           (%edx),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  139,118,4                           // mov           0x4(%esi),%esi
  .byte  78                                  // dec           %esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  102,15,112,228,0                    // pshufd        $0x0,%xmm4,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  102,15,91,196                       // cvtps2dq      %xmm4,%xmm0
  .byte  102,15,112,224,229                  // pshufd        $0xe5,%xmm0,%xmm4
  .byte  102,15,112,232,231                  // pshufd        $0xe7,%xmm0,%xmm5
  .byte  102,15,126,238                      // movd          %xmm5,%esi
  .byte  243,15,16,44,183                    // movss         (%edi,%esi,4),%xmm5
  .byte  102,15,126,230                      // movd          %xmm4,%esi
  .byte  243,15,16,36,183                    // movss         (%edi,%esi,4),%xmm4
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  102,15,112,240,78                   // pshufd        $0x4e,%xmm0,%xmm6
  .byte  243,15,16,4,183                     // movss         (%edi,%esi,4),%xmm0
  .byte  102,15,126,246                      // movd          %xmm6,%esi
  .byte  243,15,16,52,183                    // movss         (%edi,%esi,4),%xmm6
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,20,229                           // unpcklps      %xmm5,%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,20,198                           // unpcklps      %xmm6,%xmm0
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,20,196                           // unpcklps      %xmm4,%xmm0
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_table_g_sse2
.globl _sk_table_g_sse2
FUNCTION(_sk_table_g_sse2)
_sk_table_g_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,50                              // mov           (%edx),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  139,118,4                           // mov           0x4(%esi),%esi
  .byte  78                                  // dec           %esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  102,15,112,228,0                    // pshufd        $0x0,%xmm4,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,225                           // mulps         %xmm1,%xmm4
  .byte  102,15,91,204                       // cvtps2dq      %xmm4,%xmm1
  .byte  102,15,112,225,229                  // pshufd        $0xe5,%xmm1,%xmm4
  .byte  102,15,112,233,231                  // pshufd        $0xe7,%xmm1,%xmm5
  .byte  102,15,126,238                      // movd          %xmm5,%esi
  .byte  243,15,16,44,183                    // movss         (%edi,%esi,4),%xmm5
  .byte  102,15,126,230                      // movd          %xmm4,%esi
  .byte  243,15,16,36,183                    // movss         (%edi,%esi,4),%xmm4
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  102,15,112,241,78                   // pshufd        $0x4e,%xmm1,%xmm6
  .byte  243,15,16,12,183                    // movss         (%edi,%esi,4),%xmm1
  .byte  102,15,126,246                      // movd          %xmm6,%esi
  .byte  243,15,16,52,183                    // movss         (%edi,%esi,4),%xmm6
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,20,229                           // unpcklps      %xmm5,%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,20,206                           // unpcklps      %xmm6,%xmm1
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,20,204                           // unpcklps      %xmm4,%xmm1
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_table_b_sse2
.globl _sk_table_b_sse2
FUNCTION(_sk_table_b_sse2)
_sk_table_b_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,50                              // mov           (%edx),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  139,118,4                           // mov           0x4(%esi),%esi
  .byte  78                                  // dec           %esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  102,15,112,228,0                    // pshufd        $0x0,%xmm4,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,226                           // mulps         %xmm2,%xmm4
  .byte  102,15,91,212                       // cvtps2dq      %xmm4,%xmm2
  .byte  102,15,112,226,229                  // pshufd        $0xe5,%xmm2,%xmm4
  .byte  102,15,112,234,231                  // pshufd        $0xe7,%xmm2,%xmm5
  .byte  102,15,126,238                      // movd          %xmm5,%esi
  .byte  243,15,16,44,183                    // movss         (%edi,%esi,4),%xmm5
  .byte  102,15,126,230                      // movd          %xmm4,%esi
  .byte  243,15,16,36,183                    // movss         (%edi,%esi,4),%xmm4
  .byte  102,15,126,214                      // movd          %xmm2,%esi
  .byte  102,15,112,242,78                   // pshufd        $0x4e,%xmm2,%xmm6
  .byte  243,15,16,20,183                    // movss         (%edi,%esi,4),%xmm2
  .byte  102,15,126,246                      // movd          %xmm6,%esi
  .byte  243,15,16,52,183                    // movss         (%edi,%esi,4),%xmm6
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,20,229                           // unpcklps      %xmm5,%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,20,214                           // unpcklps      %xmm6,%xmm2
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,20,212                           // unpcklps      %xmm4,%xmm2
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_table_a_sse2
.globl _sk_table_a_sse2
FUNCTION(_sk_table_a_sse2)
_sk_table_a_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,50                              // mov           (%edx),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  139,118,4                           // mov           0x4(%esi),%esi
  .byte  78                                  // dec           %esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  102,15,112,228,0                    // pshufd        $0x0,%xmm4,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  102,15,91,220                       // cvtps2dq      %xmm4,%xmm3
  .byte  102,15,112,227,229                  // pshufd        $0xe5,%xmm3,%xmm4
  .byte  102,15,112,235,231                  // pshufd        $0xe7,%xmm3,%xmm5
  .byte  102,15,126,238                      // movd          %xmm5,%esi
  .byte  243,15,16,44,183                    // movss         (%edi,%esi,4),%xmm5
  .byte  102,15,126,230                      // movd          %xmm4,%esi
  .byte  243,15,16,36,183                    // movss         (%edi,%esi,4),%xmm4
  .byte  102,15,126,222                      // movd          %xmm3,%esi
  .byte  102,15,112,243,78                   // pshufd        $0x4e,%xmm3,%xmm6
  .byte  243,15,16,28,183                    // movss         (%edi,%esi,4),%xmm3
  .byte  102,15,126,246                      // movd          %xmm6,%esi
  .byte  243,15,16,52,183                    // movss         (%edi,%esi,4),%xmm6
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,20,229                           // unpcklps      %xmm5,%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,20,222                           // unpcklps      %xmm6,%xmm3
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,20,220                           // unpcklps      %xmm4,%xmm3
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_parametric_r_sse2
.globl _sk_parametric_r_sse2
FUNCTION(_sk_parametric_r_sse2)
_sk_parametric_r_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          41bc <_sk_parametric_r_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,47                        // movss         (%edi),%xmm5
  .byte  243,15,16,119,4                     // movss         0x4(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,103,8                     // movss         0x8(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,91,230                           // cvtdq2ps      %xmm6,%xmm4
  .byte  15,89,166,244,76,0,0                // mulps         0x4cf4(%esi),%xmm4
  .byte  15,84,182,4,77,0,0                  // andps         0x4d04(%esi),%xmm6
  .byte  15,86,182,20,77,0,0                 // orps          0x4d14(%esi),%xmm6
  .byte  15,88,166,36,77,0,0                 // addps         0x4d24(%esi),%xmm4
  .byte  15,40,190,52,77,0,0                 // movaps        0x4d34(%esi),%xmm7
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,88,182,68,77,0,0                 // addps         0x4d44(%esi),%xmm6
  .byte  15,40,190,84,77,0,0                 // movaps        0x4d54(%esi),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  243,15,91,236                       // cvttps2dq     %xmm4,%xmm5
  .byte  15,91,245                           // cvtdq2ps      %xmm5,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,194,254,1                        // cmpltps       %xmm6,%xmm7
  .byte  15,40,174,100,77,0,0                // movaps        0x4d64(%esi),%xmm5
  .byte  15,84,253                           // andps         %xmm5,%xmm7
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,88,166,116,77,0,0                // addps         0x4d74(%esi),%xmm4
  .byte  15,40,182,132,77,0,0                // movaps        0x4d84(%esi),%xmm6
  .byte  15,89,247                           // mulps         %xmm7,%xmm6
  .byte  15,92,230                           // subps         %xmm6,%xmm4
  .byte  15,40,182,148,77,0,0                // movaps        0x4d94(%esi),%xmm6
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,190,164,77,0,0                // movaps        0x4da4(%esi),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,88,252                           // addps         %xmm4,%xmm7
  .byte  15,89,190,180,77,0,0                // mulps         0x4db4(%esi),%xmm7
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  243,15,16,103,16                    // movss         0x10(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  243,15,16,119,12                    // movss         0xc(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  243,15,16,103,24                    // movss         0x18(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  243,15,16,103,20                    // movss         0x14(%edi),%xmm4
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  102,15,91,255                       // cvtps2dq      %xmm7,%xmm7
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,88,231                           // addps         %xmm7,%xmm4
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,84,240                           // andps         %xmm0,%xmm6
  .byte  15,85,196                           // andnps        %xmm4,%xmm0
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,86,198                           // orps          %xmm6,%xmm0
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,95,198                           // maxps         %xmm6,%xmm0
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,93,197                           // minps         %xmm5,%xmm0
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_parametric_g_sse2
.globl _sk_parametric_g_sse2
FUNCTION(_sk_parametric_g_sse2)
_sk_parametric_g_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          431e <_sk_parametric_g_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,47                        // movss         (%edi),%xmm5
  .byte  243,15,16,119,4                     // movss         0x4(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,103,8                     // movss         0x8(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,89,241                           // mulps         %xmm1,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,91,230                           // cvtdq2ps      %xmm6,%xmm4
  .byte  15,89,166,98,76,0,0                 // mulps         0x4c62(%esi),%xmm4
  .byte  15,84,182,114,76,0,0                // andps         0x4c72(%esi),%xmm6
  .byte  15,86,182,130,76,0,0                // orps          0x4c82(%esi),%xmm6
  .byte  15,88,166,146,76,0,0                // addps         0x4c92(%esi),%xmm4
  .byte  15,40,190,162,76,0,0                // movaps        0x4ca2(%esi),%xmm7
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,88,182,178,76,0,0                // addps         0x4cb2(%esi),%xmm6
  .byte  15,40,190,194,76,0,0                // movaps        0x4cc2(%esi),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  243,15,91,236                       // cvttps2dq     %xmm4,%xmm5
  .byte  15,91,245                           // cvtdq2ps      %xmm5,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,194,254,1                        // cmpltps       %xmm6,%xmm7
  .byte  15,40,174,210,76,0,0                // movaps        0x4cd2(%esi),%xmm5
  .byte  15,84,253                           // andps         %xmm5,%xmm7
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,88,166,226,76,0,0                // addps         0x4ce2(%esi),%xmm4
  .byte  15,40,182,242,76,0,0                // movaps        0x4cf2(%esi),%xmm6
  .byte  15,89,247                           // mulps         %xmm7,%xmm6
  .byte  15,92,230                           // subps         %xmm6,%xmm4
  .byte  15,40,182,2,77,0,0                  // movaps        0x4d02(%esi),%xmm6
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,190,18,77,0,0                 // movaps        0x4d12(%esi),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,88,252                           // addps         %xmm4,%xmm7
  .byte  15,89,190,34,77,0,0                 // mulps         0x4d22(%esi),%xmm7
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  243,15,16,103,16                    // movss         0x10(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  243,15,16,119,12                    // movss         0xc(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,241                           // mulps         %xmm1,%xmm6
  .byte  15,194,204,2                        // cmpleps       %xmm4,%xmm1
  .byte  243,15,16,103,24                    // movss         0x18(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  243,15,16,103,20                    // movss         0x14(%edi),%xmm4
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  102,15,91,255                       // cvtps2dq      %xmm7,%xmm7
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,88,231                           // addps         %xmm7,%xmm4
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,84,241                           // andps         %xmm1,%xmm6
  .byte  15,85,204                           // andnps        %xmm4,%xmm1
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,86,206                           // orps          %xmm6,%xmm1
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,95,206                           // maxps         %xmm6,%xmm1
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,93,205                           // minps         %xmm5,%xmm1
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_parametric_b_sse2
.globl _sk_parametric_b_sse2
FUNCTION(_sk_parametric_b_sse2)
_sk_parametric_b_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          4480 <_sk_parametric_b_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,47                        // movss         (%edi),%xmm5
  .byte  243,15,16,119,4                     // movss         0x4(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,103,8                     // movss         0x8(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,89,242                           // mulps         %xmm2,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,91,230                           // cvtdq2ps      %xmm6,%xmm4
  .byte  15,89,166,208,75,0,0                // mulps         0x4bd0(%esi),%xmm4
  .byte  15,84,182,224,75,0,0                // andps         0x4be0(%esi),%xmm6
  .byte  15,86,182,240,75,0,0                // orps          0x4bf0(%esi),%xmm6
  .byte  15,88,166,0,76,0,0                  // addps         0x4c00(%esi),%xmm4
  .byte  15,40,190,16,76,0,0                 // movaps        0x4c10(%esi),%xmm7
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,88,182,32,76,0,0                 // addps         0x4c20(%esi),%xmm6
  .byte  15,40,190,48,76,0,0                 // movaps        0x4c30(%esi),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  243,15,91,236                       // cvttps2dq     %xmm4,%xmm5
  .byte  15,91,245                           // cvtdq2ps      %xmm5,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,194,254,1                        // cmpltps       %xmm6,%xmm7
  .byte  15,40,174,64,76,0,0                 // movaps        0x4c40(%esi),%xmm5
  .byte  15,84,253                           // andps         %xmm5,%xmm7
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,88,166,80,76,0,0                 // addps         0x4c50(%esi),%xmm4
  .byte  15,40,182,96,76,0,0                 // movaps        0x4c60(%esi),%xmm6
  .byte  15,89,247                           // mulps         %xmm7,%xmm6
  .byte  15,92,230                           // subps         %xmm6,%xmm4
  .byte  15,40,182,112,76,0,0                // movaps        0x4c70(%esi),%xmm6
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,190,128,76,0,0                // movaps        0x4c80(%esi),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,88,252                           // addps         %xmm4,%xmm7
  .byte  15,89,190,144,76,0,0                // mulps         0x4c90(%esi),%xmm7
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  243,15,16,103,16                    // movss         0x10(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  243,15,16,119,12                    // movss         0xc(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,242                           // mulps         %xmm2,%xmm6
  .byte  15,194,212,2                        // cmpleps       %xmm4,%xmm2
  .byte  243,15,16,103,24                    // movss         0x18(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  243,15,16,103,20                    // movss         0x14(%edi),%xmm4
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  102,15,91,255                       // cvtps2dq      %xmm7,%xmm7
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,88,231                           // addps         %xmm7,%xmm4
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,84,242                           // andps         %xmm2,%xmm6
  .byte  15,85,212                           // andnps        %xmm4,%xmm2
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,86,214                           // orps          %xmm6,%xmm2
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,95,214                           // maxps         %xmm6,%xmm2
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,93,213                           // minps         %xmm5,%xmm2
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_parametric_a_sse2
.globl _sk_parametric_a_sse2
FUNCTION(_sk_parametric_a_sse2)
_sk_parametric_a_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          45e2 <_sk_parametric_a_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,47                        // movss         (%edi),%xmm5
  .byte  243,15,16,119,4                     // movss         0x4(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,103,8                     // movss         0x8(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,91,230                           // cvtdq2ps      %xmm6,%xmm4
  .byte  15,89,166,62,75,0,0                 // mulps         0x4b3e(%esi),%xmm4
  .byte  15,84,182,78,75,0,0                 // andps         0x4b4e(%esi),%xmm6
  .byte  15,86,182,94,75,0,0                 // orps          0x4b5e(%esi),%xmm6
  .byte  15,88,166,110,75,0,0                // addps         0x4b6e(%esi),%xmm4
  .byte  15,40,190,126,75,0,0                // movaps        0x4b7e(%esi),%xmm7
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,88,182,142,75,0,0                // addps         0x4b8e(%esi),%xmm6
  .byte  15,40,190,158,75,0,0                // movaps        0x4b9e(%esi),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,92,231                           // subps         %xmm7,%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  243,15,91,236                       // cvttps2dq     %xmm4,%xmm5
  .byte  15,91,245                           // cvtdq2ps      %xmm5,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,194,254,1                        // cmpltps       %xmm6,%xmm7
  .byte  15,40,174,174,75,0,0                // movaps        0x4bae(%esi),%xmm5
  .byte  15,84,253                           // andps         %xmm5,%xmm7
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,88,166,190,75,0,0                // addps         0x4bbe(%esi),%xmm4
  .byte  15,40,182,206,75,0,0                // movaps        0x4bce(%esi),%xmm6
  .byte  15,89,247                           // mulps         %xmm7,%xmm6
  .byte  15,92,230                           // subps         %xmm6,%xmm4
  .byte  15,40,182,222,75,0,0                // movaps        0x4bde(%esi),%xmm6
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,190,238,75,0,0                // movaps        0x4bee(%esi),%xmm7
  .byte  15,94,254                           // divps         %xmm6,%xmm7
  .byte  15,88,252                           // addps         %xmm4,%xmm7
  .byte  15,89,190,254,75,0,0                // mulps         0x4bfe(%esi),%xmm7
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  243,15,16,103,16                    // movss         0x10(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  243,15,16,119,12                    // movss         0xc(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,194,220,2                        // cmpleps       %xmm4,%xmm3
  .byte  243,15,16,103,24                    // movss         0x18(%edi),%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  243,15,16,103,20                    // movss         0x14(%edi),%xmm4
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  102,15,91,255                       // cvtps2dq      %xmm7,%xmm7
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,88,231                           // addps         %xmm7,%xmm4
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,84,243                           // andps         %xmm3,%xmm6
  .byte  15,85,220                           // andnps        %xmm4,%xmm3
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,86,222                           // orps          %xmm6,%xmm3
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,95,222                           // maxps         %xmm6,%xmm3
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,93,221                           // minps         %xmm5,%xmm3
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_lab_to_xyz_sse2
.globl _sk_lab_to_xyz_sse2
FUNCTION(_sk_lab_to_xyz_sse2)
_sk_lab_to_xyz_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  232,0,0,0,0                         // call          474e <_sk_lab_to_xyz_sse2+0x18>
  .byte  88                                  // pop           %eax
  .byte  15,89,144,162,74,0,0                // mulps         0x4aa2(%eax),%xmm2
  .byte  15,40,160,178,74,0,0                // movaps        0x4ab2(%eax),%xmm4
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,168,194,74,0,0                // movaps        0x4ac2(%eax),%xmm5
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,88,221                           // addps         %xmm5,%xmm3
  .byte  15,88,144,210,74,0,0                // addps         0x4ad2(%eax),%xmm2
  .byte  15,89,144,226,74,0,0                // mulps         0x4ae2(%eax),%xmm2
  .byte  15,89,136,242,74,0,0                // mulps         0x4af2(%eax),%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,89,152,2,75,0,0                  // mulps         0x4b02(%eax),%xmm3
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,92,235                           // subps         %xmm3,%xmm5
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,40,152,18,75,0,0                 // movaps        0x4b12(%eax),%xmm3
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,194,224,1                        // cmpltps       %xmm0,%xmm4
  .byte  15,40,176,34,75,0,0                 // movaps        0x4b22(%eax),%xmm6
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,40,184,50,75,0,0                 // movaps        0x4b32(%eax),%xmm7
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,84,196                           // andps         %xmm4,%xmm0
  .byte  15,85,225                           // andnps        %xmm1,%xmm4
  .byte  15,86,224                           // orps          %xmm0,%xmm4
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,194,200,1                        // cmpltps       %xmm0,%xmm1
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,84,193                           // andps         %xmm1,%xmm0
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,86,200                           // orps          %xmm0,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,88,238                           // addps         %xmm6,%xmm5
  .byte  15,40,85,40                         // movaps        0x28(%ebp),%xmm2
  .byte  15,89,239                           // mulps         %xmm7,%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,194,216,1                        // cmpltps       %xmm0,%xmm3
  .byte  15,84,195                           // andps         %xmm3,%xmm0
  .byte  15,85,221                           // andnps        %xmm5,%xmm3
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,86,216                           // orps          %xmm0,%xmm3
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,89,160,66,75,0,0                 // mulps         0x4b42(%eax),%xmm4
  .byte  15,89,152,82,75,0,0                 // mulps         0x4b52(%eax),%xmm3
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,84,36,32                      // movaps        %xmm2,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_load_a8_sse2
.globl _sk_load_a8_sse2
FUNCTION(_sk_load_a8_sse2)
_sk_load_a8_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          487d <_sk_load_a8_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  102,15,111,69,40                    // movdqa        0x28(%ebp),%xmm0
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,93,16                           // mov           0x10(%ebp),%ebx
  .byte  117,98                              // jne           4905 <_sk_load_a8_sse2+0x96>
  .byte  102,15,110,28,25                    // movd          (%ecx,%ebx,1),%xmm3
  .byte  102,15,96,216                       // punpcklbw     %xmm0,%xmm3
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,219,158,51,74,0,0            // pand          0x4a33(%esi),%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,158,67,74,0,0                 // mulps         0x4a43(%esi),%xmm3
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  102,15,127,68,36,32                 // movdqa        %xmm0,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,92,36,8                         // mov           %ebx,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,61                              // je            494f <_sk_load_a8_sse2+0xe0>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,23                              // je            4936 <_sk_load_a8_sse2+0xc7>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  117,139                             // jne           48b0 <_sk_load_a8_sse2+0x41>
  .byte  15,182,124,25,2                     // movzbl        0x2(%ecx,%ebx,1),%edi
  .byte  102,15,110,223                      // movd          %edi,%xmm3
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  102,15,112,219,69                   // pshufd        $0x45,%xmm3,%xmm3
  .byte  15,183,12,25                        // movzwl        (%ecx,%ebx,1),%ecx
  .byte  102,15,110,233                      // movd          %ecx,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,221                       // movsd         %xmm5,%xmm3
  .byte  233,97,255,255,255                  // jmp           48b0 <_sk_load_a8_sse2+0x41>
  .byte  15,182,12,25                        // movzbl        (%ecx,%ebx,1),%ecx
  .byte  102,15,110,217                      // movd          %ecx,%xmm3
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,81,255,255,255                  // jmp           48b0 <_sk_load_a8_sse2+0x41>

HIDDEN _sk_load_a8_dst_sse2
.globl _sk_load_a8_dst_sse2
FUNCTION(_sk_load_a8_dst_sse2)
_sk_load_a8_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          496d <_sk_load_a8_dst_sse2+0xe>
  .byte  91                                  // pop           %ebx
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  117,94                              // jne           49e0 <_sk_load_a8_dst_sse2+0x81>
  .byte  102,15,110,36,57                    // movd          (%ecx,%edi,1),%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  102,15,219,163,99,73,0,0            // pand          0x4963(%ebx),%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  102,15,87,237                       // xorpd         %xmm5,%xmm5
  .byte  15,89,163,115,73,0,0                // mulps         0x4973(%ebx),%xmm4
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  102,15,41,108,36,64                 // movapd        %xmm5,0x40(%esp)
  .byte  102,15,41,108,36,48                 // movapd        %xmm5,0x30(%esp)
  .byte  102,15,41,108,36,32                 // movapd        %xmm5,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,61                              // je            4a2a <_sk_load_a8_dst_sse2+0xcb>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,23                              // je            4a11 <_sk_load_a8_dst_sse2+0xb2>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  117,143                             // jne           498f <_sk_load_a8_dst_sse2+0x30>
  .byte  15,182,116,57,2                     // movzbl        0x2(%ecx,%edi,1),%esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  15,183,12,57                        // movzwl        (%ecx,%edi,1),%ecx
  .byte  102,15,110,233                      // movd          %ecx,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  233,101,255,255,255                 // jmp           498f <_sk_load_a8_dst_sse2+0x30>
  .byte  15,182,12,57                        // movzbl        (%ecx,%edi,1),%ecx
  .byte  102,15,110,225                      // movd          %ecx,%xmm4
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,85,255,255,255                  // jmp           498f <_sk_load_a8_dst_sse2+0x30>

HIDDEN _sk_gather_a8_sse2
.globl _sk_gather_a8_sse2
FUNCTION(_sk_gather_a8_sse2)
_sk_gather_a8_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,17                              // mov           (%ecx),%edx
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,81,8                     // movd          0x8(%ecx),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,126,193                      // movd          %xmm0,%ecx
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,112,208,78                   // pshufd        $0x4e,%xmm0,%xmm2
  .byte  102,15,126,214                      // movd          %xmm2,%esi
  .byte  102,15,112,192,231                  // pshufd        $0xe7,%xmm0,%xmm0
  .byte  102,15,126,199                      // movd          %xmm0,%edi
  .byte  15,182,52,50                        // movzbl        (%edx,%esi,1),%esi
  .byte  15,182,60,58                        // movzbl        (%edx,%edi,1),%edi
  .byte  193,231,8                           // shl           $0x8,%edi
  .byte  9,247                               // or            %esi,%edi
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  15,182,12,10                        // movzbl        (%edx,%ecx,1),%ecx
  .byte  15,182,20,50                        // movzbl        (%edx,%esi,1),%edx
  .byte  232,0,0,0,0                         // call          4ab4 <_sk_gather_a8_sse2+0x7a>
  .byte  94                                  // pop           %esi
  .byte  193,226,8                           // shl           $0x8,%edx
  .byte  9,202                               // or            %ecx,%edx
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  102,15,196,194,0                    // pinsrw        $0x0,%edx,%xmm0
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  102,15,196,199,1                    // pinsrw        $0x1,%edi,%xmm0
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,158,60,72,0,0                 // mulps         0x483c(%esi),%xmm3
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,40,85,72                         // movaps        0x48(%ebp),%xmm2
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,88,8                            // lea           0x8(%eax),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_store_a8_sse2
.globl _sk_store_a8_sse2
FUNCTION(_sk_store_a8_sse2)
_sk_store_a8_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,156,0,0,0                   // sub           $0x9c,%esp
  .byte  232,0,0,0,0                         // call          4b45 <_sk_store_a8_sse2+0x11>
  .byte  89                                  // pop           %ecx
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,48                              // mov           (%eax),%esi
  .byte  139,30                              // mov           (%esi),%ebx
  .byte  15,40,161,187,71,0,0                // movaps        0x47bb(%ecx),%xmm4
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  102,15,91,228                       // cvtps2dq      %xmm4,%xmm4
  .byte  102,15,114,244,16                   // pslld         $0x10,%xmm4
  .byte  102,15,114,228,16                   // psrad         $0x10,%xmm4
  .byte  102,15,107,228                      // packssdw      %xmm4,%xmm4
  .byte  102,15,103,228                      // packuswb      %xmm4,%xmm4
  .byte  137,254                             // mov           %edi,%esi
  .byte  133,255                             // test          %edi,%edi
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  117,70                              // jne           4bce <_sk_store_a8_sse2+0x9a>
  .byte  102,15,126,225                      // movd          %xmm4,%ecx
  .byte  137,12,59                           // mov           %ecx,(%ebx,%edi,1)
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,156,0,0,0                   // add           $0x9c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  137,240                             // mov           %esi,%eax
  .byte  36,3                                // and           $0x3,%al
  .byte  60,1                                // cmp           $0x1,%al
  .byte  116,69                              // je            4c23 <_sk_store_a8_sse2+0xef>
  .byte  136,69,243                          // mov           %al,-0xd(%ebp)
  .byte  60,2                                // cmp           $0x2,%al
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  116,21                              // je            4bfd <_sk_store_a8_sse2+0xc9>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  117,161                             // jne           4b8f <_sk_store_a8_sse2+0x5b>
  .byte  102,15,127,101,200                  // movdqa        %xmm4,-0x38(%ebp)
  .byte  138,85,208                          // mov           -0x30(%ebp),%dl
  .byte  136,84,59,2                         // mov           %dl,0x2(%ebx,%edi,1)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  102,15,112,228,212                  // pshufd        $0xd4,%xmm4,%xmm4
  .byte  102,15,219,161,203,71,0,0           // pand          0x47cb(%ecx),%xmm4
  .byte  102,15,103,228                      // packuswb      %xmm4,%xmm4
  .byte  102,15,103,228                      // packuswb      %xmm4,%xmm4
  .byte  102,15,103,228                      // packuswb      %xmm4,%xmm4
  .byte  102,15,126,225                      // movd          %xmm4,%ecx
  .byte  102,137,12,59                       // mov           %cx,(%ebx,%edi,1)
  .byte  233,108,255,255,255                 // jmp           4b8f <_sk_store_a8_sse2+0x5b>
  .byte  102,15,127,101,216                  // movdqa        %xmm4,-0x28(%ebp)
  .byte  138,77,216                          // mov           -0x28(%ebp),%cl
  .byte  136,12,59                           // mov           %cl,(%ebx,%edi,1)
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  233,89,255,255,255                  // jmp           4b8f <_sk_store_a8_sse2+0x5b>

HIDDEN _sk_load_g8_sse2
.globl _sk_load_g8_sse2
FUNCTION(_sk_load_g8_sse2)
_sk_load_g8_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          4c44 <_sk_load_g8_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,40,85,56                         // movaps        0x38(%ebp),%xmm2
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  139,17                              // mov           (%ecx),%edx
  .byte  139,18                              // mov           (%edx),%edx
  .byte  133,219                             // test          %ebx,%ebx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  117,100                             // jne           4ccd <_sk_load_g8_sse2+0x97>
  .byte  102,15,110,4,58                     // movd          (%edx,%edi,1),%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  102,15,219,128,220,70,0,0           // pand          0x46dc(%eax),%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,128,236,70,0,0                // mulps         0x46ec(%eax),%xmm0
  .byte  141,81,8                            // lea           0x8(%ecx),%edx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,84,36,48                      // movaps        %xmm2,0x30(%esp)
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,92,36,16                        // mov           %ebx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,84,36,4                         // mov           %edx,0x4(%esp)
  .byte  139,85,8                            // mov           0x8(%ebp),%edx
  .byte  137,20,36                           // mov           %edx,(%esp)
  .byte  15,40,152,252,70,0,0                // movaps        0x46fc(%eax),%xmm3
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,81,4                            // call          *0x4(%ecx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,93,243                          // mov           %bl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,61                              // je            4d17 <_sk_load_g8_sse2+0xe1>
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  116,23                              // je            4cfe <_sk_load_g8_sse2+0xc8>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  117,137                             // jne           4c76 <_sk_load_g8_sse2+0x40>
  .byte  15,182,116,58,2                     // movzbl        0x2(%edx,%edi,1),%esi
  .byte  102,15,110,198                      // movd          %esi,%xmm0
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  15,183,20,58                        // movzwl        (%edx,%edi,1),%edx
  .byte  102,15,110,234                      // movd          %edx,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,197                       // movsd         %xmm5,%xmm0
  .byte  233,95,255,255,255                  // jmp           4c76 <_sk_load_g8_sse2+0x40>
  .byte  15,182,20,58                        // movzbl        (%edx,%edi,1),%edx
  .byte  102,15,110,194                      // movd          %edx,%xmm0
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  233,79,255,255,255                  // jmp           4c76 <_sk_load_g8_sse2+0x40>

HIDDEN _sk_load_g8_dst_sse2
.globl _sk_load_g8_dst_sse2
FUNCTION(_sk_load_g8_dst_sse2)
_sk_load_g8_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          4d35 <_sk_load_g8_dst_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,93,16                           // mov           0x10(%ebp),%ebx
  .byte  117,94                              // jne           4da8 <_sk_load_g8_dst_sse2+0x81>
  .byte  102,15,110,36,25                    // movd          (%ecx,%ebx,1),%xmm4
  .byte  102,15,96,224                       // punpcklbw     %xmm0,%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  102,15,219,166,27,70,0,0            // pand          0x461b(%esi),%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,166,43,70,0,0                 // mulps         0x462b(%esi),%xmm4
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,40,174,59,70,0,0                 // movaps        0x463b(%esi),%xmm5
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,92,36,8                         // mov           %ebx,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,61                              // je            4df2 <_sk_load_g8_dst_sse2+0xcb>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,23                              // je            4dd9 <_sk_load_g8_dst_sse2+0xb2>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  117,143                             // jne           4d57 <_sk_load_g8_dst_sse2+0x30>
  .byte  15,182,124,25,2                     // movzbl        0x2(%ecx,%ebx,1),%edi
  .byte  102,15,110,231                      // movd          %edi,%xmm4
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  15,183,12,25                        // movzwl        (%ecx,%ebx,1),%ecx
  .byte  102,15,110,233                      // movd          %ecx,%xmm5
  .byte  102,15,96,232                       // punpcklbw     %xmm0,%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  233,101,255,255,255                 // jmp           4d57 <_sk_load_g8_dst_sse2+0x30>
  .byte  15,182,12,25                        // movzbl        (%ecx,%ebx,1),%ecx
  .byte  102,15,110,225                      // movd          %ecx,%xmm4
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,85,255,255,255                  // jmp           4d57 <_sk_load_g8_dst_sse2+0x30>

HIDDEN _sk_gather_g8_sse2
.globl _sk_gather_g8_sse2
FUNCTION(_sk_gather_g8_sse2)
_sk_gather_g8_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,17                              // mov           (%ecx),%edx
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,81,8                     // movd          0x8(%ecx),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,126,193                      // movd          %xmm0,%ecx
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,112,208,78                   // pshufd        $0x4e,%xmm0,%xmm2
  .byte  102,15,126,214                      // movd          %xmm2,%esi
  .byte  102,15,112,192,231                  // pshufd        $0xe7,%xmm0,%xmm0
  .byte  102,15,126,199                      // movd          %xmm0,%edi
  .byte  15,182,52,50                        // movzbl        (%edx,%esi,1),%esi
  .byte  15,182,60,58                        // movzbl        (%edx,%edi,1),%edi
  .byte  193,231,8                           // shl           $0x8,%edi
  .byte  9,247                               // or            %esi,%edi
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  15,182,12,10                        // movzbl        (%edx,%ecx,1),%ecx
  .byte  15,182,20,50                        // movzbl        (%edx,%esi,1),%edx
  .byte  232,0,0,0,0                         // call          4e7c <_sk_gather_g8_sse2+0x7a>
  .byte  94                                  // pop           %esi
  .byte  193,226,8                           // shl           $0x8,%edx
  .byte  9,202                               // or            %ecx,%edx
  .byte  102,15,196,194,0                    // pinsrw        $0x0,%edx,%xmm0
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  102,15,196,199,1                    // pinsrw        $0x1,%edi,%xmm0
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,40,85,56                         // movaps        0x38(%ebp),%xmm2
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  102,15,239,237                      // pxor          %xmm5,%xmm5
  .byte  102,15,96,197                       // punpcklbw     %xmm5,%xmm0
  .byte  102,15,97,197                       // punpcklwd     %xmm5,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,134,4,69,0,0                  // mulps         0x4504(%esi),%xmm0
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  137,193                             // mov           %eax,%ecx
  .byte  141,65,8                            // lea           0x8(%ecx),%eax
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,84,36,48                      // movaps        %xmm2,0x30(%esp)
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,92,36,16                        // mov           %ebx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,68,36,4                         // mov           %eax,0x4(%esp)
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,158,20,69,0,0                 // movaps        0x4514(%esi),%xmm3
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,81,4                            // call          *0x4(%ecx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_gather_i8_sse2
.globl _sk_gather_i8_sse2
FUNCTION(_sk_gather_i8_sse2)
_sk_gather_i8_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          4f10 <_sk_gather_i8_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  137,69,240                          // mov           %eax,-0x10(%ebp)
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,16                              // mov           (%eax),%edx
  .byte  133,210                             // test          %edx,%edx
  .byte  116,7                               // je            4f2c <_sk_gather_i8_sse2+0x2a>
  .byte  131,192,4                           // add           $0x4,%eax
  .byte  137,209                             // mov           %edx,%ecx
  .byte  235,6                               // jmp           4f32 <_sk_gather_i8_sse2+0x30>
  .byte  139,72,4                            // mov           0x4(%eax),%ecx
  .byte  131,192,8                           // add           $0x8,%eax
  .byte  139,49                              // mov           (%ecx),%esi
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,81,8                     // movd          0x8(%ecx),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,15,126,201                      // movd          %xmm1,%ecx
  .byte  102,15,112,200,231                  // pshufd        $0xe7,%xmm0,%xmm1
  .byte  102,15,126,207                      // movd          %xmm1,%edi
  .byte  15,182,12,14                        // movzbl        (%esi,%ecx,1),%ecx
  .byte  15,182,60,62                        // movzbl        (%esi,%edi,1),%edi
  .byte  193,231,8                           // shl           $0x8,%edi
  .byte  9,207                               // or            %ecx,%edi
  .byte  102,15,126,193                      // movd          %xmm0,%ecx
  .byte  102,15,112,192,229                  // pshufd        $0xe5,%xmm0,%xmm0
  .byte  15,182,12,14                        // movzbl        (%esi,%ecx,1),%ecx
  .byte  102,15,126,195                      // movd          %xmm0,%ebx
  .byte  15,182,52,30                        // movzbl        (%esi,%ebx,1),%esi
  .byte  193,230,8                           // shl           $0x8,%esi
  .byte  9,206                               // or            %ecx,%esi
  .byte  102,15,196,198,0                    // pinsrw        $0x0,%esi,%xmm0
  .byte  102,15,196,199,1                    // pinsrw        $0x1,%edi,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  139,74,4                            // mov           0x4(%edx),%ecx
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,112,208,231                  // pshufd        $0xe7,%xmm0,%xmm2
  .byte  102,15,126,210                      // movd          %xmm2,%edx
  .byte  102,15,110,20,145                   // movd          (%ecx,%edx,4),%xmm2
  .byte  102,15,126,202                      // movd          %xmm1,%edx
  .byte  102,15,110,12,145                   // movd          (%ecx,%edx,4),%xmm1
  .byte  102,15,126,194                      // movd          %xmm0,%edx
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,15,110,44,145                   // movd          (%ecx,%edx,4),%xmm5
  .byte  102,15,126,194                      // movd          %xmm0,%edx
  .byte  102,15,110,4,145                    // movd          (%ecx,%edx,4),%xmm0
  .byte  102,15,98,202                       // punpckldq     %xmm2,%xmm1
  .byte  102,15,98,232                       // punpckldq     %xmm0,%xmm5
  .byte  102,15,98,233                       // punpckldq     %xmm1,%xmm5
  .byte  139,77,240                          // mov           -0x10(%ebp),%ecx
  .byte  102,15,111,145,144,68,0,0           // movdqa        0x4490(%ecx),%xmm2
  .byte  102,15,111,197                      // movdqa        %xmm5,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,161,160,68,0,0                // movaps        0x44a0(%ecx),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  102,15,111,221                      // movdqa        %xmm5,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  102,15,114,213,24                   // psrld         $0x18,%xmm5
  .byte  15,91,221                           // cvtdq2ps      %xmm5,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  141,72,4                            // lea           0x4(%eax),%ecx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_load_565_sse2
.globl _sk_load_565_sse2
FUNCTION(_sk_load_565_sse2)
_sk_load_565_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          509d <_sk_load_565_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  139,17                              // mov           (%ecx),%edx
  .byte  139,18                              // mov           (%edx),%edx
  .byte  133,219                             // test          %ebx,%ebx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  15,133,134,0,0,0                    // jne           514c <_sk_load_565_sse2+0xbd>
  .byte  243,15,126,20,122                   // movq          (%edx,%edi,2),%xmm2
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,111,128,35,67,0,0            // movdqa        0x4323(%eax),%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,128,51,67,0,0                 // mulps         0x4333(%eax),%xmm0
  .byte  102,15,111,136,67,67,0,0            // movdqa        0x4343(%eax),%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,136,83,67,0,0                 // mulps         0x4353(%eax),%xmm1
  .byte  102,15,219,144,99,67,0,0            // pand          0x4363(%eax),%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,144,115,67,0,0                // mulps         0x4373(%eax),%xmm2
  .byte  141,81,8                            // lea           0x8(%ecx),%edx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,92,36,32                      // movaps        %xmm3,0x20(%esp)
  .byte  137,92,36,16                        // mov           %ebx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,84,36,4                         // mov           %edx,0x4(%esp)
  .byte  139,85,8                            // mov           0x8(%ebp),%edx
  .byte  137,20,36                           // mov           %edx,(%esp)
  .byte  15,40,152,131,67,0,0                // movaps        0x4383(%eax),%xmm3
  .byte  255,81,4                            // call          *0x4(%ecx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,93,243                          // mov           %bl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,58                              // je            5193 <_sk_load_565_sse2+0x104>
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  116,27                              // je            5181 <_sk_load_565_sse2+0xf2>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  15,133,95,255,255,255               // jne           50cf <_sk_load_565_sse2+0x40>
  .byte  15,183,116,122,4                    // movzwl        0x4(%edx,%edi,2),%esi
  .byte  102,15,110,198                      // movd          %esi,%xmm0
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  102,15,112,208,69                   // pshufd        $0x45,%xmm0,%xmm2
  .byte  102,15,110,4,122                    // movd          (%edx,%edi,2),%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  242,15,16,208                       // movsd         %xmm0,%xmm2
  .byte  233,60,255,255,255                  // jmp           50cf <_sk_load_565_sse2+0x40>
  .byte  15,183,20,122                       // movzwl        (%edx,%edi,2),%edx
  .byte  102,15,110,210                      // movd          %edx,%xmm2
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  233,44,255,255,255                  // jmp           50cf <_sk_load_565_sse2+0x40>

HIDDEN _sk_load_565_dst_sse2
.globl _sk_load_565_dst_sse2
FUNCTION(_sk_load_565_dst_sse2)
_sk_load_565_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          51b1 <_sk_load_565_dst_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,93,16                           // mov           0x10(%ebp),%ebx
  .byte  15,133,134,0,0,0                    // jne           5250 <_sk_load_565_dst_sse2+0xad>
  .byte  243,15,126,36,89                    // movq          (%ecx,%ebx,2),%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  102,15,111,174,127,66,0,0           // movdqa        0x427f(%esi),%xmm5
  .byte  102,15,219,236                      // pand          %xmm4,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  15,89,174,143,66,0,0                // mulps         0x428f(%esi),%xmm5
  .byte  102,15,111,182,159,66,0,0           // movdqa        0x429f(%esi),%xmm6
  .byte  102,15,219,244                      // pand          %xmm4,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,89,182,175,66,0,0                // mulps         0x42af(%esi),%xmm6
  .byte  102,15,219,166,191,66,0,0           // pand          0x42bf(%esi),%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,166,207,66,0,0                // mulps         0x42cf(%esi),%xmm4
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,40,190,223,66,0,0                // movaps        0x42df(%esi),%xmm7
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,92,36,8                         // mov           %ebx,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,58                              // je            5297 <_sk_load_565_dst_sse2+0xf4>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,27                              // je            5285 <_sk_load_565_dst_sse2+0xe2>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  15,133,95,255,255,255               // jne           51d3 <_sk_load_565_dst_sse2+0x30>
  .byte  15,183,124,89,4                     // movzwl        0x4(%ecx,%ebx,2),%edi
  .byte  102,15,110,231                      // movd          %edi,%xmm4
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  102,15,110,44,89                    // movd          (%ecx,%ebx,2),%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  233,60,255,255,255                  // jmp           51d3 <_sk_load_565_dst_sse2+0x30>
  .byte  15,183,12,89                        // movzwl        (%ecx,%ebx,2),%ecx
  .byte  102,15,110,225                      // movd          %ecx,%xmm4
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,44,255,255,255                  // jmp           51d3 <_sk_load_565_dst_sse2+0x30>

HIDDEN _sk_gather_565_sse2
.globl _sk_gather_565_sse2
FUNCTION(_sk_gather_565_sse2)
_sk_gather_565_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          52b5 <_sk_gather_565_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,50                              // mov           (%edx),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,86,8                     // movd          0x8(%esi),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,196,20,119,0                 // pinsrw        $0x0,(%edi,%esi,2),%xmm2
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,15,196,20,119,1                 // pinsrw        $0x1,(%edi,%esi,2),%xmm2
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  102,15,112,192,231                  // pshufd        $0xe7,%xmm0,%xmm0
  .byte  15,183,52,119                       // movzwl        (%edi,%esi,2),%esi
  .byte  102,15,196,214,2                    // pinsrw        $0x2,%esi,%xmm2
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  15,183,52,119                       // movzwl        (%edi,%esi,2),%esi
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  102,15,196,214,3                    // pinsrw        $0x3,%esi,%xmm2
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,111,128,235,65,0,0           // movdqa        0x41eb(%eax),%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,128,251,65,0,0                // mulps         0x41fb(%eax),%xmm0
  .byte  102,15,111,136,11,66,0,0            // movdqa        0x420b(%eax),%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,136,27,66,0,0                 // mulps         0x421b(%eax),%xmm1
  .byte  102,15,219,144,43,66,0,0            // pand          0x422b(%eax),%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,144,59,66,0,0                 // mulps         0x423b(%eax),%xmm2
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  141,74,8                            // lea           0x8(%edx),%ecx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,92,36,32                      // movaps        %xmm3,0x20(%esp)
  .byte  137,92,36,16                        // mov           %ebx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,152,75,66,0,0                 // movaps        0x424b(%eax),%xmm3
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_store_565_sse2
.globl _sk_store_565_sse2
FUNCTION(_sk_store_565_sse2)
_sk_store_565_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          53d7 <_sk_store_565_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  15,40,160,57,65,0,0                 // movaps        0x4139(%eax),%xmm4
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  102,15,91,237                       // cvtps2dq      %xmm5,%xmm5
  .byte  102,15,114,245,11                   // pslld         $0xb,%xmm5
  .byte  15,40,176,73,65,0,0                 // movaps        0x4149(%eax),%xmm6
  .byte  15,89,241                           // mulps         %xmm1,%xmm6
  .byte  102,15,91,246                       // cvtps2dq      %xmm6,%xmm6
  .byte  102,15,114,246,5                    // pslld         $0x5,%xmm6
  .byte  102,15,235,245                      // por           %xmm5,%xmm6
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,48                              // mov           (%eax),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,89,226                           // mulps         %xmm2,%xmm4
  .byte  102,15,91,228                       // cvtps2dq      %xmm4,%xmm4
  .byte  102,15,86,230                       // orpd          %xmm6,%xmm4
  .byte  102,15,114,244,16                   // pslld         $0x10,%xmm4
  .byte  102,15,114,228,16                   // psrad         $0x10,%xmm4
  .byte  102,15,107,228                      // packssdw      %xmm4,%xmm4
  .byte  102,15,126,101,232                  // movd          %xmm4,-0x18(%ebp)
  .byte  102,15,112,236,229                  // pshufd        $0xe5,%xmm4,%xmm5
  .byte  102,15,126,109,236                  // movd          %xmm5,-0x14(%ebp)
  .byte  133,219                             // test          %ebx,%ebx
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  117,82                              // jne           5498 <_sk_store_565_sse2+0xcf>
  .byte  102,15,126,226                      // movd          %xmm4,%edx
  .byte  102,15,126,238                      // movd          %xmm5,%esi
  .byte  137,20,79                           // mov           %edx,(%edi,%ecx,2)
  .byte  137,116,79,4                        // mov           %esi,0x4(%edi,%ecx,2)
  .byte  141,80,8                            // lea           0x8(%eax),%edx
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,92,36,16                        // mov           %ebx,0x10(%esp)
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,84,36,4                         // mov           %edx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  243,15,126,101,232                  // movq          -0x18(%ebp),%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  137,218                             // mov           %ebx,%edx
  .byte  128,226,3                           // and           $0x3,%dl
  .byte  128,250,1                           // cmp           $0x1,%dl
  .byte  116,37                              // je            54d0 <_sk_store_565_sse2+0x107>
  .byte  128,250,2                           // cmp           $0x2,%dl
  .byte  116,15                              // je            54bf <_sk_store_565_sse2+0xf6>
  .byte  128,250,3                           // cmp           $0x3,%dl
  .byte  117,160                             // jne           5455 <_sk_store_565_sse2+0x8c>
  .byte  102,15,197,212,4                    // pextrw        $0x4,%xmm4,%edx
  .byte  102,137,84,79,4                     // mov           %dx,0x4(%edi,%ecx,2)
  .byte  102,15,112,228,212                  // pshufd        $0xd4,%xmm4,%xmm4
  .byte  242,15,112,228,232                  // pshuflw       $0xe8,%xmm4,%xmm4
  .byte  102,15,126,36,79                    // movd          %xmm4,(%edi,%ecx,2)
  .byte  235,133                             // jmp           5455 <_sk_store_565_sse2+0x8c>
  .byte  102,15,126,226                      // movd          %xmm4,%edx
  .byte  102,137,20,79                       // mov           %dx,(%edi,%ecx,2)
  .byte  233,120,255,255,255                 // jmp           5455 <_sk_store_565_sse2+0x8c>

HIDDEN _sk_load_4444_sse2
.globl _sk_load_4444_sse2
FUNCTION(_sk_load_4444_sse2)
_sk_load_4444_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          54eb <_sk_load_4444_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,93,16                           // mov           0x10(%ebp),%ebx
  .byte  15,133,149,0,0,0                    // jne           55a9 <_sk_load_4444_sse2+0xcc>
  .byte  243,15,126,28,89                    // movq          (%ecx,%ebx,2),%xmm3
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,111,134,69,64,0,0            // movdqa        0x4045(%esi),%xmm0
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,134,85,64,0,0                 // mulps         0x4055(%esi),%xmm0
  .byte  102,15,111,142,101,64,0,0           // movdqa        0x4065(%esi),%xmm1
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,142,117,64,0,0                // mulps         0x4075(%esi),%xmm1
  .byte  102,15,111,150,133,64,0,0           // movdqa        0x4085(%esi),%xmm2
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,150,149,64,0,0                // mulps         0x4095(%esi),%xmm2
  .byte  102,15,219,158,165,64,0,0           // pand          0x40a5(%esi),%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,158,181,64,0,0                // mulps         0x40b5(%esi),%xmm3
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,92,36,8                         // mov           %ebx,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,58                              // je            55f0 <_sk_load_4444_sse2+0x113>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,27                              // je            55de <_sk_load_4444_sse2+0x101>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  15,133,80,255,255,255               // jne           551d <_sk_load_4444_sse2+0x40>
  .byte  15,183,124,89,4                     // movzwl        0x4(%ecx,%ebx,2),%edi
  .byte  102,15,110,199                      // movd          %edi,%xmm0
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  102,15,110,4,89                     // movd          (%ecx,%ebx,2),%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  242,15,16,216                       // movsd         %xmm0,%xmm3
  .byte  233,45,255,255,255                  // jmp           551d <_sk_load_4444_sse2+0x40>
  .byte  15,183,12,89                        // movzwl        (%ecx,%ebx,2),%ecx
  .byte  102,15,110,217                      // movd          %ecx,%xmm3
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,29,255,255,255                  // jmp           551d <_sk_load_4444_sse2+0x40>

HIDDEN _sk_load_4444_dst_sse2
.globl _sk_load_4444_dst_sse2
FUNCTION(_sk_load_4444_dst_sse2)
_sk_load_4444_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          560e <_sk_load_4444_dst_sse2+0xe>
  .byte  95                                  // pop           %edi
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,93,16                           // mov           0x10(%ebp),%ebx
  .byte  15,133,149,0,0,0                    // jne           56bc <_sk_load_4444_dst_sse2+0xbc>
  .byte  243,15,126,36,89                    // movq          (%ecx,%ebx,2),%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  102,15,111,175,162,63,0,0           // movdqa        0x3fa2(%edi),%xmm5
  .byte  102,15,219,236                      // pand          %xmm4,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  15,89,175,178,63,0,0                // mulps         0x3fb2(%edi),%xmm5
  .byte  102,15,111,183,194,63,0,0           // movdqa        0x3fc2(%edi),%xmm6
  .byte  102,15,219,244                      // pand          %xmm4,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,89,183,210,63,0,0                // mulps         0x3fd2(%edi),%xmm6
  .byte  102,15,111,191,226,63,0,0           // movdqa        0x3fe2(%edi),%xmm7
  .byte  102,15,219,252                      // pand          %xmm4,%xmm7
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  15,89,191,242,63,0,0                // mulps         0x3ff2(%edi),%xmm7
  .byte  102,15,219,167,2,64,0,0             // pand          0x4002(%edi),%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,167,18,64,0,0                 // mulps         0x4012(%edi),%xmm4
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,92,36,8                         // mov           %ebx,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,58                              // je            5703 <_sk_load_4444_dst_sse2+0x103>
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,27                              // je            56f1 <_sk_load_4444_dst_sse2+0xf1>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  15,133,80,255,255,255               // jne           5630 <_sk_load_4444_dst_sse2+0x30>
  .byte  15,183,116,89,4                     // movzwl        0x4(%ecx,%ebx,2),%esi
  .byte  102,15,110,230                      // movd          %esi,%xmm4
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  102,15,112,228,69                   // pshufd        $0x45,%xmm4,%xmm4
  .byte  102,15,110,44,89                    // movd          (%ecx,%ebx,2),%xmm5
  .byte  102,15,97,232                       // punpcklwd     %xmm0,%xmm5
  .byte  242,15,16,229                       // movsd         %xmm5,%xmm4
  .byte  233,45,255,255,255                  // jmp           5630 <_sk_load_4444_dst_sse2+0x30>
  .byte  15,183,12,89                        // movzwl        (%ecx,%ebx,2),%ecx
  .byte  102,15,110,225                      // movd          %ecx,%xmm4
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,29,255,255,255                  // jmp           5630 <_sk_load_4444_dst_sse2+0x30>

HIDDEN _sk_gather_4444_sse2
.globl _sk_gather_4444_sse2
FUNCTION(_sk_gather_4444_sse2)
_sk_gather_4444_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          5721 <_sk_gather_4444_sse2+0xe>
  .byte  90                                  // pop           %edx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  139,49                              // mov           (%ecx),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,86,8                     // movd          0x8(%esi),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,196,28,119,0                 // pinsrw        $0x0,(%edi,%esi,2),%xmm3
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,15,196,28,119,1                 // pinsrw        $0x1,(%edi,%esi,2),%xmm3
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  102,15,112,192,231                  // pshufd        $0xe7,%xmm0,%xmm0
  .byte  15,183,52,119                       // movzwl        (%edi,%esi,2),%esi
  .byte  102,15,196,222,2                    // pinsrw        $0x2,%esi,%xmm3
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  15,183,60,119                       // movzwl        (%edi,%esi,2),%edi
  .byte  139,117,16                          // mov           0x10(%ebp),%esi
  .byte  102,15,196,223,3                    // pinsrw        $0x3,%edi,%xmm3
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,111,130,15,63,0,0            // movdqa        0x3f0f(%edx),%xmm0
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,130,31,63,0,0                 // mulps         0x3f1f(%edx),%xmm0
  .byte  102,15,111,138,47,63,0,0            // movdqa        0x3f2f(%edx),%xmm1
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,138,63,63,0,0                 // mulps         0x3f3f(%edx),%xmm1
  .byte  102,15,111,146,79,63,0,0            // movdqa        0x3f4f(%edx),%xmm2
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,146,95,63,0,0                 // mulps         0x3f5f(%edx),%xmm2
  .byte  102,15,219,154,111,63,0,0           // pand          0x3f6f(%edx),%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,154,127,63,0,0                // mulps         0x3f7f(%edx),%xmm3
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,89,8                            // lea           0x8(%ecx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,116,36,8                        // mov           %esi,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,81,4                            // call          *0x4(%ecx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_store_4444_sse2
.globl _sk_store_4444_sse2
FUNCTION(_sk_store_4444_sse2)
_sk_store_4444_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          5852 <_sk_store_4444_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  15,40,160,94,62,0,0                 // movaps        0x3e5e(%eax),%xmm4
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  102,15,91,237                       // cvtps2dq      %xmm5,%xmm5
  .byte  102,15,114,245,12                   // pslld         $0xc,%xmm5
  .byte  15,40,241                           // movaps        %xmm1,%xmm6
  .byte  15,89,244                           // mulps         %xmm4,%xmm6
  .byte  102,15,91,246                       // cvtps2dq      %xmm6,%xmm6
  .byte  102,15,114,246,8                    // pslld         $0x8,%xmm6
  .byte  102,15,235,245                      // por           %xmm5,%xmm6
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  102,15,91,237                       // cvtps2dq      %xmm5,%xmm5
  .byte  102,15,114,245,4                    // pslld         $0x4,%xmm5
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  102,15,91,228                       // cvtps2dq      %xmm4,%xmm4
  .byte  102,15,86,229                       // orpd          %xmm5,%xmm4
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,48                              // mov           (%eax),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  102,15,86,230                       // orpd          %xmm6,%xmm4
  .byte  102,15,114,244,16                   // pslld         $0x10,%xmm4
  .byte  102,15,114,228,16                   // psrad         $0x10,%xmm4
  .byte  102,15,107,228                      // packssdw      %xmm4,%xmm4
  .byte  102,15,126,101,232                  // movd          %xmm4,-0x18(%ebp)
  .byte  102,15,112,236,229                  // pshufd        $0xe5,%xmm4,%xmm5
  .byte  102,15,126,109,236                  // movd          %xmm5,-0x14(%ebp)
  .byte  133,219                             // test          %ebx,%ebx
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  117,82                              // jne           5922 <_sk_store_4444_sse2+0xde>
  .byte  102,15,126,226                      // movd          %xmm4,%edx
  .byte  102,15,126,238                      // movd          %xmm5,%esi
  .byte  137,20,79                           // mov           %edx,(%edi,%ecx,2)
  .byte  137,116,79,4                        // mov           %esi,0x4(%edi,%ecx,2)
  .byte  141,80,8                            // lea           0x8(%eax),%edx
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,92,36,16                        // mov           %ebx,0x10(%esp)
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,84,36,4                         // mov           %edx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  243,15,126,101,232                  // movq          -0x18(%ebp),%xmm4
  .byte  102,15,97,224                       // punpcklwd     %xmm0,%xmm4
  .byte  137,218                             // mov           %ebx,%edx
  .byte  128,226,3                           // and           $0x3,%dl
  .byte  128,250,1                           // cmp           $0x1,%dl
  .byte  116,37                              // je            595a <_sk_store_4444_sse2+0x116>
  .byte  128,250,2                           // cmp           $0x2,%dl
  .byte  116,15                              // je            5949 <_sk_store_4444_sse2+0x105>
  .byte  128,250,3                           // cmp           $0x3,%dl
  .byte  117,160                             // jne           58df <_sk_store_4444_sse2+0x9b>
  .byte  102,15,197,212,4                    // pextrw        $0x4,%xmm4,%edx
  .byte  102,137,84,79,4                     // mov           %dx,0x4(%edi,%ecx,2)
  .byte  102,15,112,228,212                  // pshufd        $0xd4,%xmm4,%xmm4
  .byte  242,15,112,228,232                  // pshuflw       $0xe8,%xmm4,%xmm4
  .byte  102,15,126,36,79                    // movd          %xmm4,(%edi,%ecx,2)
  .byte  235,133                             // jmp           58df <_sk_store_4444_sse2+0x9b>
  .byte  102,15,126,226                      // movd          %xmm4,%edx
  .byte  102,137,20,79                       // mov           %dx,(%edi,%ecx,2)
  .byte  233,120,255,255,255                 // jmp           58df <_sk_store_4444_sse2+0x9b>

HIDDEN _sk_load_8888_sse2
.globl _sk_load_8888_sse2
FUNCTION(_sk_load_8888_sse2)
_sk_load_8888_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          5975 <_sk_load_8888_sse2+0xe>
  .byte  91                                  // pop           %ebx
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  139,117,8                           // mov           0x8(%ebp),%esi
  .byte  15,133,147,0,0,0                    // jne           5a29 <_sk_load_8888_sse2+0xc2>
  .byte  243,15,111,44,185                   // movdqu        (%ecx,%edi,4),%xmm5
  .byte  102,15,111,147,75,61,0,0            // movdqa        0x3d4b(%ebx),%xmm2
  .byte  102,15,111,197                      // movdqa        %xmm5,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,163,91,61,0,0                 // movaps        0x3d5b(%ebx),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  102,15,111,221                      // movdqa        %xmm5,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  102,15,114,213,24                   // psrld         $0x18,%xmm5
  .byte  15,91,221                           // cvtdq2ps      %xmm5,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  137,52,36                           // mov           %esi,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,44                              // je            5a62 <_sk_load_8888_sse2+0xfb>
  .byte  102,15,239,237                      // pxor          %xmm5,%xmm5
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,21                              // je            5a58 <_sk_load_8888_sse2+0xf1>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  15,133,78,255,255,255               // jne           599b <_sk_load_8888_sse2+0x34>
  .byte  102,15,110,68,185,8                 // movd          0x8(%ecx,%edi,4),%xmm0
  .byte  102,15,112,232,69                   // pshufd        $0x45,%xmm0,%xmm5
  .byte  102,15,18,44,185                    // movlpd        (%ecx,%edi,4),%xmm5
  .byte  233,57,255,255,255                  // jmp           599b <_sk_load_8888_sse2+0x34>
  .byte  102,15,110,44,185                   // movd          (%ecx,%edi,4),%xmm5
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,44,255,255,255                  // jmp           599b <_sk_load_8888_sse2+0x34>

HIDDEN _sk_load_8888_dst_sse2
.globl _sk_load_8888_dst_sse2
FUNCTION(_sk_load_8888_dst_sse2)
_sk_load_8888_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,140,0,0,0                   // sub           $0x8c,%esp
  .byte  102,15,127,93,200                   // movdqa        %xmm3,-0x38(%ebp)
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  232,0,0,0,0                         // call          5a89 <_sk_load_8888_dst_sse2+0x1a>
  .byte  91                                  // pop           %ebx
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  139,117,8                           // mov           0x8(%ebp),%esi
  .byte  15,133,150,0,0,0                    // jne           5b38 <_sk_load_8888_dst_sse2+0xc9>
  .byte  243,15,111,28,185                   // movdqu        (%ecx,%edi,4),%xmm3
  .byte  102,15,111,147,87,60,0,0            // movdqa        0x3c57(%ebx),%xmm2
  .byte  102,15,111,243                      // movdqa        %xmm3,%xmm6
  .byte  102,15,219,242                      // pand          %xmm2,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,40,187,103,60,0,0                // movaps        0x3c67(%ebx),%xmm7
  .byte  15,89,247                           // mulps         %xmm7,%xmm6
  .byte  102,15,111,227                      // movdqa        %xmm3,%xmm4
  .byte  102,15,114,212,8                    // psrld         $0x8,%xmm4
  .byte  102,15,219,226                      // pand          %xmm2,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  102,15,111,235                      // movdqa        %xmm3,%xmm5
  .byte  102,15,114,213,16                   // psrld         $0x10,%xmm5
  .byte  102,15,219,234                      // pand          %xmm2,%xmm5
  .byte  15,91,213                           // cvtdq2ps      %xmm5,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  137,52,36                           // mov           %esi,(%esp)
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  15,41,84,36,64                      // movaps        %xmm2,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,85,216                        // movaps        -0x28(%ebp),%xmm2
  .byte  15,40,93,200                        // movaps        -0x38(%ebp),%xmm3
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,140,0,0,0                   // add           $0x8c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,44                              // je            5b71 <_sk_load_8888_dst_sse2+0x102>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  116,21                              // je            5b67 <_sk_load_8888_dst_sse2+0xf8>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  15,133,75,255,255,255               // jne           5aa7 <_sk_load_8888_dst_sse2+0x38>
  .byte  102,15,110,100,185,8                // movd          0x8(%ecx,%edi,4),%xmm4
  .byte  102,15,112,220,69                   // pshufd        $0x45,%xmm4,%xmm3
  .byte  102,15,18,28,185                    // movlpd        (%ecx,%edi,4),%xmm3
  .byte  233,54,255,255,255                  // jmp           5aa7 <_sk_load_8888_dst_sse2+0x38>
  .byte  102,15,110,28,185                   // movd          (%ecx,%edi,4),%xmm3
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  233,41,255,255,255                  // jmp           5aa7 <_sk_load_8888_dst_sse2+0x38>

HIDDEN _sk_gather_8888_sse2
.globl _sk_gather_8888_sse2
FUNCTION(_sk_gather_8888_sse2)
_sk_gather_8888_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          5b8c <_sk_gather_8888_sse2+0xe>
  .byte  90                                  // pop           %edx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  139,49                              // mov           (%ecx),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,86,8                     // movd          0x8(%esi),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,112,208,231                  // pshufd        $0xe7,%xmm0,%xmm2
  .byte  102,15,126,214                      // movd          %xmm2,%esi
  .byte  102,15,110,20,183                   // movd          (%edi,%esi,4),%xmm2
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  102,15,110,12,183                   // movd          (%edi,%esi,4),%xmm1
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,15,110,28,183                   // movd          (%edi,%esi,4),%xmm3
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  102,15,110,4,183                    // movd          (%edi,%esi,4),%xmm0
  .byte  139,117,16                          // mov           0x10(%ebp),%esi
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  102,15,111,162,116,59,0,0           // movdqa        0x3b74(%edx),%xmm4
  .byte  15,40,170,132,59,0,0                // movaps        0x3b84(%edx),%xmm5
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  102,15,98,202                       // punpckldq     %xmm2,%xmm1
  .byte  102,15,98,216                       // punpckldq     %xmm0,%xmm3
  .byte  102,15,98,217                       // punpckldq     %xmm1,%xmm3
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,219,196                      // pand          %xmm4,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,204                      // pand          %xmm4,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,114,210,16                   // psrld         $0x10,%xmm2
  .byte  102,15,219,212                      // pand          %xmm4,%xmm2
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  141,89,8                            // lea           0x8(%ecx),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,116,36,8                        // mov           %esi,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,81,4                            // call          *0x4(%ecx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_store_8888_sse2
.globl _sk_store_8888_sse2
FUNCTION(_sk_store_8888_sse2)
_sk_store_8888_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          5cb1 <_sk_store_8888_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  15,40,160,111,58,0,0                // movaps        0x3a6f(%eax),%xmm4
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  102,15,91,237                       // cvtps2dq      %xmm5,%xmm5
  .byte  15,40,241                           // movaps        %xmm1,%xmm6
  .byte  15,89,244                           // mulps         %xmm4,%xmm6
  .byte  102,15,91,246                       // cvtps2dq      %xmm6,%xmm6
  .byte  102,15,114,246,8                    // pslld         $0x8,%xmm6
  .byte  102,15,235,245                      // por           %xmm5,%xmm6
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  102,15,91,237                       // cvtps2dq      %xmm5,%xmm5
  .byte  102,15,114,245,16                   // pslld         $0x10,%xmm5
  .byte  15,89,227                           // mulps         %xmm3,%xmm4
  .byte  102,15,91,228                       // cvtps2dq      %xmm4,%xmm4
  .byte  102,15,114,244,24                   // pslld         $0x18,%xmm4
  .byte  102,15,235,229                      // por           %xmm5,%xmm4
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  102,15,235,230                      // por           %xmm6,%xmm4
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,16                              // mov           (%eax),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  133,219                             // test          %ebx,%ebx
  .byte  139,85,8                            // mov           0x8(%ebp),%edx
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  117,62                              // jne           5d5a <_sk_store_8888_sse2+0xb7>
  .byte  243,15,127,36,143                   // movdqu        %xmm4,(%edi,%ecx,4)
  .byte  141,120,8                           // lea           0x8(%eax),%edi
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,92,36,16                        // mov           %ebx,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,124,36,4                        // mov           %edi,0x4(%esp)
  .byte  137,20,36                           // mov           %edx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  137,218                             // mov           %ebx,%edx
  .byte  136,85,243                          // mov           %dl,-0xd(%ebp)
  .byte  128,101,243,3                       // andb          $0x3,-0xd(%ebp)
  .byte  128,125,243,1                       // cmpb          $0x1,-0xd(%ebp)
  .byte  116,37                              // je            5d8e <_sk_store_8888_sse2+0xeb>
  .byte  128,125,243,2                       // cmpb          $0x2,-0xd(%ebp)
  .byte  139,85,8                            // mov           0x8(%ebp),%edx
  .byte  116,21                              // je            5d87 <_sk_store_8888_sse2+0xe4>
  .byte  128,125,243,3                       // cmpb          $0x3,-0xd(%ebp)
  .byte  117,169                             // jne           5d21 <_sk_store_8888_sse2+0x7e>
  .byte  102,15,112,236,78                   // pshufd        $0x4e,%xmm4,%xmm5
  .byte  102,15,126,108,143,8                // movd          %xmm5,0x8(%edi,%ecx,4)
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  102,15,214,36,143                   // movq          %xmm4,(%edi,%ecx,4)
  .byte  235,147                             // jmp           5d21 <_sk_store_8888_sse2+0x7e>
  .byte  102,15,126,36,143                   // movd          %xmm4,(%edi,%ecx,4)
  .byte  139,85,8                            // mov           0x8(%ebp),%edx
  .byte  235,137                             // jmp           5d21 <_sk_store_8888_sse2+0x7e>

HIDDEN _sk_load_f16_sse2
.globl _sk_load_f16_sse2
FUNCTION(_sk_load_f16_sse2)
_sk_load_f16_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,188,0,0,0                   // sub           $0xbc,%esp
  .byte  232,0,0,0,0                         // call          5da9 <_sk_load_f16_sse2+0x11>
  .byte  91                                  // pop           %ebx
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  139,117,8                           // mov           0x8(%ebp),%esi
  .byte  15,133,220,1,0,0                    // jne           5f9e <_sk_load_f16_sse2+0x206>
  .byte  102,15,16,4,249                     // movupd        (%ecx,%edi,8),%xmm0
  .byte  243,15,111,76,249,16                // movdqu        0x10(%ecx,%edi,8),%xmm1
  .byte  102,15,40,208                       // movapd        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,126,77,208                   // movd          %xmm1,-0x30(%ebp)
  .byte  102,15,112,193,229                  // pshufd        $0xe5,%xmm1,%xmm0
  .byte  102,15,126,69,212                   // movd          %xmm0,-0x2c(%ebp)
  .byte  243,15,126,117,208                  // movq          -0x30(%ebp),%xmm6
  .byte  102,15,112,193,231                  // pshufd        $0xe7,%xmm1,%xmm0
  .byte  102,15,126,69,220                   // movd          %xmm0,-0x24(%ebp)
  .byte  102,15,112,193,78                   // pshufd        $0x4e,%xmm1,%xmm0
  .byte  102,15,126,69,216                   // movd          %xmm0,-0x28(%ebp)
  .byte  243,15,126,101,216                  // movq          -0x28(%ebp),%xmm4
  .byte  102,15,126,85,224                   // movd          %xmm2,-0x20(%ebp)
  .byte  102,15,112,194,229                  // pshufd        $0xe5,%xmm2,%xmm0
  .byte  102,15,126,69,228                   // movd          %xmm0,-0x1c(%ebp)
  .byte  243,15,126,125,224                  // movq          -0x20(%ebp),%xmm7
  .byte  102,15,112,194,231                  // pshufd        $0xe7,%xmm2,%xmm0
  .byte  102,15,126,69,236                   // movd          %xmm0,-0x14(%ebp)
  .byte  102,15,112,194,78                   // pshufd        $0x4e,%xmm2,%xmm0
  .byte  102,15,126,69,232                   // movd          %xmm0,-0x18(%ebp)
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,97,243                       // punpcklwd     %xmm3,%xmm6
  .byte  102,15,111,171,135,57,0,0           // movdqa        0x3987(%ebx),%xmm5
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,15,219,213                      // pand          %xmm5,%xmm2
  .byte  102,15,239,242                      // pxor          %xmm2,%xmm6
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,15,111,206                      // movdqa        %xmm6,%xmm1
  .byte  102,15,114,241,13                   // pslld         $0xd,%xmm1
  .byte  102,15,235,202                      // por           %xmm2,%xmm1
  .byte  102,15,111,212                      // movdqa        %xmm4,%xmm2
  .byte  102,15,97,211                       // punpcklwd     %xmm3,%xmm2
  .byte  102,15,111,226                      // movdqa        %xmm2,%xmm4
  .byte  102,15,219,229                      // pand          %xmm5,%xmm4
  .byte  102,15,239,212                      // pxor          %xmm4,%xmm2
  .byte  102,15,127,85,152                   // movdqa        %xmm2,-0x68(%ebp)
  .byte  102,15,114,244,16                   // pslld         $0x10,%xmm4
  .byte  102,15,114,242,13                   // pslld         $0xd,%xmm2
  .byte  102,15,235,212                      // por           %xmm4,%xmm2
  .byte  102,15,111,231                      // movdqa        %xmm7,%xmm4
  .byte  102,15,97,227                       // punpcklwd     %xmm3,%xmm4
  .byte  102,15,111,252                      // movdqa        %xmm4,%xmm7
  .byte  102,15,219,253                      // pand          %xmm5,%xmm7
  .byte  102,15,239,231                      // pxor          %xmm7,%xmm4
  .byte  102,15,127,101,168                  // movdqa        %xmm4,-0x58(%ebp)
  .byte  102,15,114,247,16                   // pslld         $0x10,%xmm7
  .byte  102,15,114,244,13                   // pslld         $0xd,%xmm4
  .byte  102,15,235,231                      // por           %xmm7,%xmm4
  .byte  243,15,126,125,232                  // movq          -0x18(%ebp),%xmm7
  .byte  102,15,97,251                       // punpcklwd     %xmm3,%xmm7
  .byte  102,15,219,239                      // pand          %xmm7,%xmm5
  .byte  102,15,239,253                      // pxor          %xmm5,%xmm7
  .byte  102,15,114,245,16                   // pslld         $0x10,%xmm5
  .byte  102,15,111,199                      // movdqa        %xmm7,%xmm0
  .byte  102,15,114,240,13                   // pslld         $0xd,%xmm0
  .byte  102,15,235,197                      // por           %xmm5,%xmm0
  .byte  102,15,111,155,151,57,0,0           // movdqa        0x3997(%ebx),%xmm3
  .byte  102,15,254,203                      // paddd         %xmm3,%xmm1
  .byte  102,15,254,211                      // paddd         %xmm3,%xmm2
  .byte  102,15,254,227                      // paddd         %xmm3,%xmm4
  .byte  102,15,254,195                      // paddd         %xmm3,%xmm0
  .byte  102,15,111,155,167,57,0,0           // movdqa        0x39a7(%ebx),%xmm3
  .byte  102,15,127,93,184                   // movdqa        %xmm3,-0x48(%ebp)
  .byte  102,15,239,243                      // pxor          %xmm3,%xmm6
  .byte  102,15,111,155,183,57,0,0           // movdqa        0x39b7(%ebx),%xmm3
  .byte  102,15,111,235                      // movdqa        %xmm3,%xmm5
  .byte  102,15,102,238                      // pcmpgtd       %xmm6,%xmm5
  .byte  102,15,223,233                      // pandn         %xmm1,%xmm5
  .byte  102,15,111,117,152                  // movdqa        -0x68(%ebp),%xmm6
  .byte  102,15,239,117,184                  // pxor          -0x48(%ebp),%xmm6
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,102,206                      // pcmpgtd       %xmm6,%xmm1
  .byte  102,15,223,202                      // pandn         %xmm2,%xmm1
  .byte  102,15,111,117,168                  // movdqa        -0x58(%ebp),%xmm6
  .byte  102,15,239,117,184                  // pxor          -0x48(%ebp),%xmm6
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,102,214                      // pcmpgtd       %xmm6,%xmm2
  .byte  102,15,223,212                      // pandn         %xmm4,%xmm2
  .byte  102,15,239,125,184                  // pxor          -0x48(%ebp),%xmm7
  .byte  102,15,102,223                      // pcmpgtd       %xmm7,%xmm3
  .byte  102,15,223,216                      // pandn         %xmm0,%xmm3
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,40,69,72                         // movaps        0x48(%ebp),%xmm0
  .byte  15,41,68,36,64                      // movaps        %xmm0,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  137,52,36                           // mov           %esi,(%esp)
  .byte  102,15,111,197                      // movdqa        %xmm5,%xmm0
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,188,0,0,0                   // add           $0xbc,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  242,15,16,4,249                     // movsd         (%ecx,%edi,8),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  131,250,1                           // cmp           $0x1,%edx
  .byte  15,132,29,254,255,255               // je            5dcd <_sk_load_f16_sse2+0x35>
  .byte  102,15,22,68,249,8                  // movhpd        0x8(%ecx,%edi,8),%xmm0
  .byte  131,250,3                           // cmp           $0x3,%edx
  .byte  15,130,14,254,255,255               // jb            5dcd <_sk_load_f16_sse2+0x35>
  .byte  243,15,126,76,249,16                // movq          0x10(%ecx,%edi,8),%xmm1
  .byte  233,3,254,255,255                   // jmp           5dcd <_sk_load_f16_sse2+0x35>

HIDDEN _sk_load_f16_dst_sse2
.globl _sk_load_f16_dst_sse2
FUNCTION(_sk_load_f16_dst_sse2)
_sk_load_f16_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,252,0,0,0                   // sub           $0xfc,%esp
  .byte  15,41,157,88,255,255,255            // movaps        %xmm3,-0xa8(%ebp)
  .byte  102,15,127,149,104,255,255,255      // movdqa        %xmm2,-0x98(%ebp)
  .byte  15,41,141,120,255,255,255           // movaps        %xmm1,-0x88(%ebp)
  .byte  102,15,127,69,136                   // movdqa        %xmm0,-0x78(%ebp)
  .byte  232,0,0,0,0                         // call          5ff6 <_sk_load_f16_dst_sse2+0x2c>
  .byte  91                                  // pop           %ebx
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  139,117,8                           // mov           0x8(%ebp),%esi
  .byte  15,133,233,1,0,0                    // jne           61f8 <_sk_load_f16_dst_sse2+0x22e>
  .byte  102,15,16,12,249                    // movupd        (%ecx,%edi,8),%xmm1
  .byte  243,15,111,68,249,16                // movdqu        0x10(%ecx,%edi,8),%xmm0
  .byte  102,15,40,217                       // movapd        %xmm1,%xmm3
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,105,200                      // punpckhwd     %xmm0,%xmm1
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,105,217                      // punpckhwd     %xmm1,%xmm3
  .byte  102,15,126,69,208                   // movd          %xmm0,-0x30(%ebp)
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,126,77,212                   // movd          %xmm1,-0x2c(%ebp)
  .byte  243,15,126,117,208                  // movq          -0x30(%ebp),%xmm6
  .byte  102,15,112,200,231                  // pshufd        $0xe7,%xmm0,%xmm1
  .byte  102,15,126,77,220                   // movd          %xmm1,-0x24(%ebp)
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,15,126,69,216                   // movd          %xmm0,-0x28(%ebp)
  .byte  243,15,126,109,216                  // movq          -0x28(%ebp),%xmm5
  .byte  102,15,126,93,224                   // movd          %xmm3,-0x20(%ebp)
  .byte  102,15,112,195,229                  // pshufd        $0xe5,%xmm3,%xmm0
  .byte  102,15,126,69,228                   // movd          %xmm0,-0x1c(%ebp)
  .byte  243,15,126,77,224                   // movq          -0x20(%ebp),%xmm1
  .byte  102,15,112,195,231                  // pshufd        $0xe7,%xmm3,%xmm0
  .byte  102,15,126,69,236                   // movd          %xmm0,-0x14(%ebp)
  .byte  102,15,112,195,78                   // pshufd        $0x4e,%xmm3,%xmm0
  .byte  102,15,126,69,232                   // movd          %xmm0,-0x18(%ebp)
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,240                       // punpcklwd     %xmm0,%xmm6
  .byte  102,15,239,228                      // pxor          %xmm4,%xmm4
  .byte  102,15,111,155,122,55,0,0           // movdqa        0x377a(%ebx),%xmm3
  .byte  102,15,111,198                      // movdqa        %xmm6,%xmm0
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  102,15,239,240                      // pxor          %xmm0,%xmm6
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,15,111,254                      // movdqa        %xmm6,%xmm7
  .byte  102,15,114,247,13                   // pslld         $0xd,%xmm7
  .byte  102,15,235,248                      // por           %xmm0,%xmm7
  .byte  102,15,97,236                       // punpcklwd     %xmm4,%xmm5
  .byte  102,15,111,197                      // movdqa        %xmm5,%xmm0
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  102,15,239,232                      // pxor          %xmm0,%xmm5
  .byte  102,15,127,109,152                  // movdqa        %xmm5,-0x68(%ebp)
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,15,114,245,13                   // pslld         $0xd,%xmm5
  .byte  102,15,235,232                      // por           %xmm0,%xmm5
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  102,15,97,202                       // punpcklwd     %xmm2,%xmm1
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  102,15,239,200                      // pxor          %xmm0,%xmm1
  .byte  102,15,127,77,168                   // movdqa        %xmm1,-0x58(%ebp)
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,15,111,225                      // movdqa        %xmm1,%xmm4
  .byte  102,15,114,244,13                   // pslld         $0xd,%xmm4
  .byte  102,15,235,224                      // por           %xmm0,%xmm4
  .byte  243,15,126,77,232                   // movq          -0x18(%ebp),%xmm1
  .byte  102,15,97,202                       // punpcklwd     %xmm2,%xmm1
  .byte  102,15,219,217                      // pand          %xmm1,%xmm3
  .byte  102,15,239,203                      // pxor          %xmm3,%xmm1
  .byte  102,15,114,243,16                   // pslld         $0x10,%xmm3
  .byte  102,15,111,209                      // movdqa        %xmm1,%xmm2
  .byte  102,15,114,242,13                   // pslld         $0xd,%xmm2
  .byte  102,15,235,211                      // por           %xmm3,%xmm2
  .byte  102,15,111,155,138,55,0,0           // movdqa        0x378a(%ebx),%xmm3
  .byte  102,15,254,251                      // paddd         %xmm3,%xmm7
  .byte  102,15,254,235                      // paddd         %xmm3,%xmm5
  .byte  102,15,254,227                      // paddd         %xmm3,%xmm4
  .byte  102,15,254,211                      // paddd         %xmm3,%xmm2
  .byte  102,15,111,131,154,55,0,0           // movdqa        0x379a(%ebx),%xmm0
  .byte  102,15,127,69,184                   // movdqa        %xmm0,-0x48(%ebp)
  .byte  102,15,239,240                      // pxor          %xmm0,%xmm6
  .byte  102,15,111,131,170,55,0,0           // movdqa        0x37aa(%ebx),%xmm0
  .byte  102,15,111,216                      // movdqa        %xmm0,%xmm3
  .byte  102,15,102,222                      // pcmpgtd       %xmm6,%xmm3
  .byte  102,15,223,223                      // pandn         %xmm7,%xmm3
  .byte  102,15,111,125,152                  // movdqa        -0x68(%ebp),%xmm7
  .byte  102,15,239,125,184                  // pxor          -0x48(%ebp),%xmm7
  .byte  102,15,111,240                      // movdqa        %xmm0,%xmm6
  .byte  102,15,102,247                      // pcmpgtd       %xmm7,%xmm6
  .byte  102,15,223,245                      // pandn         %xmm5,%xmm6
  .byte  102,15,111,125,168                  // movdqa        -0x58(%ebp),%xmm7
  .byte  102,15,239,125,184                  // pxor          -0x48(%ebp),%xmm7
  .byte  102,15,111,232                      // movdqa        %xmm0,%xmm5
  .byte  102,15,102,239                      // pcmpgtd       %xmm7,%xmm5
  .byte  102,15,223,236                      // pandn         %xmm4,%xmm5
  .byte  102,15,239,77,184                   // pxor          -0x48(%ebp),%xmm1
  .byte  102,15,102,193                      // pcmpgtd       %xmm1,%xmm0
  .byte  102,15,223,194                      // pandn         %xmm2,%xmm0
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  137,52,36                           // mov           %esi,(%esp)
  .byte  102,15,127,68,36,80                 // movdqa        %xmm0,0x50(%esp)
  .byte  102,15,127,108,36,64                // movdqa        %xmm5,0x40(%esp)
  .byte  102,15,127,116,36,48                // movdqa        %xmm6,0x30(%esp)
  .byte  102,15,127,92,36,32                 // movdqa        %xmm3,0x20(%esp)
  .byte  15,40,69,136                        // movaps        -0x78(%ebp),%xmm0
  .byte  15,40,141,120,255,255,255           // movaps        -0x88(%ebp),%xmm1
  .byte  15,40,149,104,255,255,255           // movaps        -0x98(%ebp),%xmm2
  .byte  15,40,157,88,255,255,255            // movaps        -0xa8(%ebp),%xmm3
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,252,0,0,0                   // add           $0xfc,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  242,15,16,12,249                    // movsd         (%ecx,%edi,8),%xmm1
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  131,250,1                           // cmp           $0x1,%edx
  .byte  15,132,16,254,255,255               // je            601a <_sk_load_f16_dst_sse2+0x50>
  .byte  102,15,22,76,249,8                  // movhpd        0x8(%ecx,%edi,8),%xmm1
  .byte  131,250,3                           // cmp           $0x3,%edx
  .byte  15,130,1,254,255,255                // jb            601a <_sk_load_f16_dst_sse2+0x50>
  .byte  243,15,126,68,249,16                // movq          0x10(%ecx,%edi,8),%xmm0
  .byte  233,246,253,255,255                 // jmp           601a <_sk_load_f16_dst_sse2+0x50>

HIDDEN _sk_gather_f16_sse2
.globl _sk_gather_f16_sse2
FUNCTION(_sk_gather_f16_sse2)
_sk_gather_f16_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,204,0,0,0                   // sub           $0xcc,%esp
  .byte  232,0,0,0,0                         // call          6235 <_sk_gather_f16_sse2+0x11>
  .byte  89                                  // pop           %ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,48                              // mov           (%eax),%esi
  .byte  139,22                              // mov           (%esi),%edx
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,86,8                     // movd          0x8(%esi),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,126,198                      // movd          %xmm0,%esi
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,112,208,78                   // pshufd        $0x4e,%xmm0,%xmm2
  .byte  102,15,112,192,231                  // pshufd        $0xe7,%xmm0,%xmm0
  .byte  102,15,126,199                      // movd          %xmm0,%edi
  .byte  102,15,110,68,250,4                 // movd          0x4(%edx,%edi,8),%xmm0
  .byte  102,15,110,28,250                   // movd          (%edx,%edi,8),%xmm3
  .byte  102,15,126,215                      // movd          %xmm2,%edi
  .byte  102,15,110,84,250,4                 // movd          0x4(%edx,%edi,8),%xmm2
  .byte  102,15,110,36,250                   // movd          (%edx,%edi,8),%xmm4
  .byte  102,15,126,207                      // movd          %xmm1,%edi
  .byte  102,15,98,208                       // punpckldq     %xmm0,%xmm2
  .byte  102,15,98,227                       // punpckldq     %xmm3,%xmm4
  .byte  102,15,98,226                       // punpckldq     %xmm2,%xmm4
  .byte  102,15,110,68,242,4                 // movd          0x4(%edx,%esi,8),%xmm0
  .byte  102,15,110,76,250,4                 // movd          0x4(%edx,%edi,8),%xmm1
  .byte  102,15,98,193                       // punpckldq     %xmm1,%xmm0
  .byte  102,15,110,12,242                   // movd          (%edx,%esi,8),%xmm1
  .byte  102,15,110,20,250                   // movd          (%edx,%edi,8),%xmm2
  .byte  102,15,98,202                       // punpckldq     %xmm2,%xmm1
  .byte  102,15,98,200                       // punpckldq     %xmm0,%xmm1
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,97,196                       // punpcklwd     %xmm4,%xmm0
  .byte  102,15,105,204                      // punpckhwd     %xmm4,%xmm1
  .byte  102,15,111,208                      // movdqa        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,126,85,208                   // movd          %xmm2,-0x30(%ebp)
  .byte  102,15,112,202,229                  // pshufd        $0xe5,%xmm2,%xmm1
  .byte  102,15,126,77,212                   // movd          %xmm1,-0x2c(%ebp)
  .byte  243,15,126,101,208                  // movq          -0x30(%ebp),%xmm4
  .byte  102,15,112,218,231                  // pshufd        $0xe7,%xmm2,%xmm3
  .byte  102,15,126,93,220                   // movd          %xmm3,-0x24(%ebp)
  .byte  102,15,112,210,78                   // pshufd        $0x4e,%xmm2,%xmm2
  .byte  102,15,126,85,216                   // movd          %xmm2,-0x28(%ebp)
  .byte  243,15,126,85,216                   // movq          -0x28(%ebp),%xmm2
  .byte  102,15,126,69,224                   // movd          %xmm0,-0x20(%ebp)
  .byte  102,15,112,216,229                  // pshufd        $0xe5,%xmm0,%xmm3
  .byte  102,15,126,93,228                   // movd          %xmm3,-0x1c(%ebp)
  .byte  243,15,126,77,224                   // movq          -0x20(%ebp),%xmm1
  .byte  102,15,112,216,231                  // pshufd        $0xe7,%xmm0,%xmm3
  .byte  102,15,126,93,236                   // movd          %xmm3,-0x14(%ebp)
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,15,126,69,232                   // movd          %xmm0,-0x18(%ebp)
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,111,236                      // movdqa        %xmm4,%xmm5
  .byte  102,15,97,235                       // punpcklwd     %xmm3,%xmm5
  .byte  102,15,111,161,123,53,0,0           // movdqa        0x357b(%ecx),%xmm4
  .byte  102,15,111,197                      // movdqa        %xmm5,%xmm0
  .byte  102,15,219,196                      // pand          %xmm4,%xmm0
  .byte  102,15,239,232                      // pxor          %xmm0,%xmm5
  .byte  102,15,127,109,136                  // movdqa        %xmm5,-0x78(%ebp)
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,15,114,245,13                   // pslld         $0xd,%xmm5
  .byte  102,15,235,232                      // por           %xmm0,%xmm5
  .byte  102,15,97,211                       // punpcklwd     %xmm3,%xmm2
  .byte  102,15,111,194                      // movdqa        %xmm2,%xmm0
  .byte  102,15,219,196                      // pand          %xmm4,%xmm0
  .byte  102,15,239,208                      // pxor          %xmm0,%xmm2
  .byte  102,15,127,85,152                   // movdqa        %xmm2,-0x68(%ebp)
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,15,111,242                      // movdqa        %xmm2,%xmm6
  .byte  102,15,114,246,13                   // pslld         $0xd,%xmm6
  .byte  102,15,235,240                      // por           %xmm0,%xmm6
  .byte  102,15,97,203                       // punpcklwd     %xmm3,%xmm1
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,219,196                      // pand          %xmm4,%xmm0
  .byte  102,15,239,200                      // pxor          %xmm0,%xmm1
  .byte  102,15,127,77,168                   // movdqa        %xmm1,-0x58(%ebp)
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,15,111,249                      // movdqa        %xmm1,%xmm7
  .byte  102,15,114,247,13                   // pslld         $0xd,%xmm7
  .byte  102,15,235,248                      // por           %xmm0,%xmm7
  .byte  243,15,126,69,232                   // movq          -0x18(%ebp),%xmm0
  .byte  102,15,97,195                       // punpcklwd     %xmm3,%xmm0
  .byte  102,15,219,224                      // pand          %xmm0,%xmm4
  .byte  102,15,239,196                      // pxor          %xmm4,%xmm0
  .byte  102,15,114,244,16                   // pslld         $0x10,%xmm4
  .byte  102,15,111,200                      // movdqa        %xmm0,%xmm1
  .byte  102,15,114,241,13                   // pslld         $0xd,%xmm1
  .byte  102,15,235,204                      // por           %xmm4,%xmm1
  .byte  102,15,111,153,139,53,0,0           // movdqa        0x358b(%ecx),%xmm3
  .byte  102,15,254,235                      // paddd         %xmm3,%xmm5
  .byte  102,15,254,243                      // paddd         %xmm3,%xmm6
  .byte  102,15,254,251                      // paddd         %xmm3,%xmm7
  .byte  102,15,254,203                      // paddd         %xmm3,%xmm1
  .byte  102,15,111,153,155,53,0,0           // movdqa        0x359b(%ecx),%xmm3
  .byte  102,15,127,93,184                   // movdqa        %xmm3,-0x48(%ebp)
  .byte  102,15,111,85,136                   // movdqa        -0x78(%ebp),%xmm2
  .byte  102,15,239,211                      // pxor          %xmm3,%xmm2
  .byte  102,15,111,153,171,53,0,0           // movdqa        0x35ab(%ecx),%xmm3
  .byte  102,15,111,227                      // movdqa        %xmm3,%xmm4
  .byte  102,15,102,226                      // pcmpgtd       %xmm2,%xmm4
  .byte  102,15,223,229                      // pandn         %xmm5,%xmm4
  .byte  102,15,111,85,152                   // movdqa        -0x68(%ebp),%xmm2
  .byte  102,15,239,85,184                   // pxor          -0x48(%ebp),%xmm2
  .byte  102,15,111,235                      // movdqa        %xmm3,%xmm5
  .byte  102,15,102,234                      // pcmpgtd       %xmm2,%xmm5
  .byte  102,15,223,238                      // pandn         %xmm6,%xmm5
  .byte  102,15,111,117,168                  // movdqa        -0x58(%ebp),%xmm6
  .byte  102,15,239,117,184                  // pxor          -0x48(%ebp),%xmm6
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,102,214                      // pcmpgtd       %xmm6,%xmm2
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  102,15,223,215                      // pandn         %xmm7,%xmm2
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  102,15,239,69,184                   // pxor          -0x48(%ebp),%xmm0
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  102,15,102,216                      // pcmpgtd       %xmm0,%xmm3
  .byte  15,40,69,72                         // movaps        0x48(%ebp),%xmm0
  .byte  102,15,223,217                      // pandn         %xmm1,%xmm3
  .byte  15,40,77,88                         // movaps        0x58(%ebp),%xmm1
  .byte  141,88,8                            // lea           0x8(%eax),%ebx
  .byte  15,41,76,36,80                      // movaps        %xmm1,0x50(%esp)
  .byte  15,41,68,36,64                      // movaps        %xmm0,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,204,0,0,0                   // add           $0xcc,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_store_f16_sse2
.globl _sk_store_f16_sse2
FUNCTION(_sk_store_f16_sse2)
_sk_store_f16_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,188,0,0,0                   // sub           $0xbc,%esp
  .byte  15,41,93,200                        // movaps        %xmm3,-0x38(%ebp)
  .byte  102,15,111,250                      // movdqa        %xmm2,%xmm7
  .byte  232,0,0,0,0                         // call          64d2 <_sk_store_f16_sse2+0x19>
  .byte  88                                  // pop           %eax
  .byte  102,15,111,176,30,51,0,0            // movdqa        0x331e(%eax),%xmm6
  .byte  102,15,111,208                      // movdqa        %xmm0,%xmm2
  .byte  102,15,219,214                      // pand          %xmm6,%xmm2
  .byte  102,15,127,69,184                   // movdqa        %xmm0,-0x48(%ebp)
  .byte  102,15,111,232                      // movdqa        %xmm0,%xmm5
  .byte  102,15,239,234                      // pxor          %xmm2,%xmm5
  .byte  102,15,111,160,46,51,0,0            // movdqa        0x332e(%eax),%xmm4
  .byte  102,15,114,210,16                   // psrld         $0x10,%xmm2
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,15,102,197                      // pcmpgtd       %xmm5,%xmm0
  .byte  102,15,114,213,13                   // psrld         $0xd,%xmm5
  .byte  102,15,111,152,62,51,0,0            // movdqa        0x333e(%eax),%xmm3
  .byte  102,15,254,211                      // paddd         %xmm3,%xmm2
  .byte  102,15,254,213                      // paddd         %xmm5,%xmm2
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,15,114,226,16                   // psrad         $0x10,%xmm2
  .byte  102,15,223,194                      // pandn         %xmm2,%xmm0
  .byte  102,15,111,233                      // movdqa        %xmm1,%xmm5
  .byte  102,15,219,238                      // pand          %xmm6,%xmm5
  .byte  102,15,127,77,168                   // movdqa        %xmm1,-0x58(%ebp)
  .byte  102,15,239,205                      // pxor          %xmm5,%xmm1
  .byte  102,15,114,213,16                   // psrld         $0x10,%xmm5
  .byte  102,15,111,212                      // movdqa        %xmm4,%xmm2
  .byte  102,15,102,209                      // pcmpgtd       %xmm1,%xmm2
  .byte  102,15,114,209,13                   // psrld         $0xd,%xmm1
  .byte  102,15,254,235                      // paddd         %xmm3,%xmm5
  .byte  102,15,127,93,216                   // movdqa        %xmm3,-0x28(%ebp)
  .byte  102,15,254,233                      // paddd         %xmm1,%xmm5
  .byte  102,15,114,245,16                   // pslld         $0x10,%xmm5
  .byte  102,15,114,229,16                   // psrad         $0x10,%xmm5
  .byte  102,15,223,213                      // pandn         %xmm5,%xmm2
  .byte  102,15,111,207                      // movdqa        %xmm7,%xmm1
  .byte  102,15,219,206                      // pand          %xmm6,%xmm1
  .byte  102,15,127,125,152                  // movdqa        %xmm7,-0x68(%ebp)
  .byte  102,15,239,249                      // pxor          %xmm1,%xmm7
  .byte  102,15,114,209,16                   // psrld         $0x10,%xmm1
  .byte  102,15,111,236                      // movdqa        %xmm4,%xmm5
  .byte  102,15,102,239                      // pcmpgtd       %xmm7,%xmm5
  .byte  102,15,114,215,13                   // psrld         $0xd,%xmm7
  .byte  102,15,254,203                      // paddd         %xmm3,%xmm1
  .byte  102,15,254,207                      // paddd         %xmm7,%xmm1
  .byte  102,15,111,93,200                   // movdqa        -0x38(%ebp),%xmm3
  .byte  102,15,114,241,16                   // pslld         $0x10,%xmm1
  .byte  102,15,114,225,16                   // psrad         $0x10,%xmm1
  .byte  102,15,223,233                      // pandn         %xmm1,%xmm5
  .byte  102,15,219,243                      // pand          %xmm3,%xmm6
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,239,206                      // pxor          %xmm6,%xmm1
  .byte  102,15,114,214,16                   // psrld         $0x10,%xmm6
  .byte  102,15,254,117,216                  // paddd         -0x28(%ebp),%xmm6
  .byte  102,15,102,225                      // pcmpgtd       %xmm1,%xmm4
  .byte  102,15,114,209,13                   // psrld         $0xd,%xmm1
  .byte  102,15,254,241                      // paddd         %xmm1,%xmm6
  .byte  102,15,114,246,16                   // pslld         $0x10,%xmm6
  .byte  102,15,114,230,16                   // psrad         $0x10,%xmm6
  .byte  102,15,223,230                      // pandn         %xmm6,%xmm4
  .byte  102,15,107,192                      // packssdw      %xmm0,%xmm0
  .byte  102,15,107,210                      // packssdw      %xmm2,%xmm2
  .byte  102,15,97,194                       // punpcklwd     %xmm2,%xmm0
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  102,15,107,237                      // packssdw      %xmm5,%xmm5
  .byte  102,15,107,228                      // packssdw      %xmm4,%xmm4
  .byte  102,15,97,236                       // punpcklwd     %xmm4,%xmm5
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,16                              // mov           (%eax),%edx
  .byte  139,26                              // mov           (%edx),%ebx
  .byte  133,255                             // test          %edi,%edi
  .byte  139,85,8                            // mov           0x8(%ebp),%edx
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  102,15,111,200                      // movdqa        %xmm0,%xmm1
  .byte  102,15,98,205                       // punpckldq     %xmm5,%xmm1
  .byte  117,82                              // jne           666e <_sk_store_f16_sse2+0x1b5>
  .byte  15,17,12,203                        // movups        %xmm1,(%ebx,%ecx,8)
  .byte  102,15,106,197                      // punpckhdq     %xmm5,%xmm0
  .byte  243,15,127,68,203,16                // movdqu        %xmm0,0x10(%ebx,%ecx,8)
  .byte  141,88,8                            // lea           0x8(%eax),%ebx
  .byte  15,41,84,36,80                      // movaps        %xmm2,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,20,36                           // mov           %edx,(%esp)
  .byte  15,40,69,184                        // movaps        -0x48(%ebp),%xmm0
  .byte  15,40,77,168                        // movaps        -0x58(%ebp),%xmm1
  .byte  15,40,85,152                        // movaps        -0x68(%ebp),%xmm2
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,188,0,0,0                   // add           $0xbc,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  102,15,214,12,203                   // movq          %xmm1,(%ebx,%ecx,8)
  .byte  131,255,1                           // cmp           $0x1,%edi
  .byte  116,178                             // je            662a <_sk_store_f16_sse2+0x171>
  .byte  102,15,23,76,203,8                  // movhpd        %xmm1,0x8(%ebx,%ecx,8)
  .byte  131,255,3                           // cmp           $0x3,%edi
  .byte  114,167                             // jb            662a <_sk_store_f16_sse2+0x171>
  .byte  102,15,106,197                      // punpckhdq     %xmm5,%xmm0
  .byte  102,15,214,68,203,16                // movq          %xmm0,0x10(%ebx,%ecx,8)
  .byte  235,155                             // jmp           662a <_sk_store_f16_sse2+0x171>

HIDDEN _sk_load_u16_be_sse2
.globl _sk_load_u16_be_sse2
FUNCTION(_sk_load_u16_be_sse2)
_sk_load_u16_be_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,140,0,0,0                   // sub           $0x8c,%esp
  .byte  232,0,0,0,0                         // call          66a0 <_sk_load_u16_be_sse2+0x11>
  .byte  91                                  // pop           %ebx
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,8                               // mov           (%eax),%ecx
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  133,210                             // test          %edx,%edx
  .byte  139,125,16                          // mov           0x10(%ebp),%edi
  .byte  141,52,189,0,0,0,0                  // lea           0x0(,%edi,4),%esi
  .byte  15,133,66,1,0,0                     // jne           6803 <_sk_load_u16_be_sse2+0x174>
  .byte  102,15,16,4,113                     // movupd        (%ecx,%esi,2),%xmm0
  .byte  243,15,111,76,113,16                // movdqu        0x10(%ecx,%esi,2),%xmm1
  .byte  102,15,40,208                       // movapd        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,112,233,78                   // pshufd        $0x4e,%xmm1,%xmm5
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,15,126,77,216                   // movd          %xmm1,-0x28(%ebp)
  .byte  102,15,112,193,229                  // pshufd        $0xe5,%xmm1,%xmm0
  .byte  102,15,126,69,220                   // movd          %xmm0,-0x24(%ebp)
  .byte  243,15,126,69,216                   // movq          -0x28(%ebp),%xmm0
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,97,195                       // punpcklwd     %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,163,128,49,0,0                // movaps        0x3180(%ebx),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,213,8                    // psrlw         $0x8,%xmm5
  .byte  102,15,235,233                      // por           %xmm1,%xmm5
  .byte  102,15,126,109,208                  // movd          %xmm5,-0x30(%ebp)
  .byte  102,15,112,205,229                  // pshufd        $0xe5,%xmm5,%xmm1
  .byte  102,15,126,77,212                   // movd          %xmm1,-0x2c(%ebp)
  .byte  243,15,126,77,208                   // movq          -0x30(%ebp),%xmm1
  .byte  102,15,97,203                       // punpcklwd     %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  102,15,111,234                      // movdqa        %xmm2,%xmm5
  .byte  102,15,113,245,8                    // psllw         $0x8,%xmm5
  .byte  102,15,112,242,78                   // pshufd        $0x4e,%xmm2,%xmm6
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,15,235,213                      // por           %xmm5,%xmm2
  .byte  102,15,126,85,232                   // movd          %xmm2,-0x18(%ebp)
  .byte  102,15,112,210,229                  // pshufd        $0xe5,%xmm2,%xmm2
  .byte  102,15,126,85,236                   // movd          %xmm2,-0x14(%ebp)
  .byte  243,15,126,85,232                   // movq          -0x18(%ebp),%xmm2
  .byte  102,15,97,211                       // punpcklwd     %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  102,15,111,238                      // movdqa        %xmm6,%xmm5
  .byte  102,15,113,245,8                    // psllw         $0x8,%xmm5
  .byte  102,15,113,214,8                    // psrlw         $0x8,%xmm6
  .byte  102,15,235,245                      // por           %xmm5,%xmm6
  .byte  102,15,126,117,224                  // movd          %xmm6,-0x20(%ebp)
  .byte  102,15,112,238,229                  // pshufd        $0xe5,%xmm6,%xmm5
  .byte  102,15,126,109,228                  // movd          %xmm5,-0x1c(%ebp)
  .byte  243,15,126,109,224                  // movq          -0x20(%ebp),%xmm5
  .byte  102,15,97,235                       // punpcklwd     %xmm3,%xmm5
  .byte  15,91,221                           // cvtdq2ps      %xmm5,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  141,72,8                            // lea           0x8(%eax),%ecx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,124,36,8                        // mov           %edi,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,140,0,0,0                   // add           $0x8c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  242,15,16,4,113                     // movsd         (%ecx,%esi,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  131,250,1                           // cmp           $0x1,%edx
  .byte  15,132,183,254,255,255              // je            66cc <_sk_load_u16_be_sse2+0x3d>
  .byte  102,15,22,68,113,8                  // movhpd        0x8(%ecx,%esi,2),%xmm0
  .byte  131,250,3                           // cmp           $0x3,%edx
  .byte  15,130,168,254,255,255              // jb            66cc <_sk_load_u16_be_sse2+0x3d>
  .byte  243,15,126,76,113,16                // movq          0x10(%ecx,%esi,2),%xmm1
  .byte  233,157,254,255,255                 // jmp           66cc <_sk_load_u16_be_sse2+0x3d>

HIDDEN _sk_load_rgb_u16_be_sse2
.globl _sk_load_rgb_u16_be_sse2
FUNCTION(_sk_load_rgb_u16_be_sse2)
_sk_load_rgb_u16_be_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  232,0,0,0,0                         // call          683d <_sk_load_rgb_u16_be_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  139,17                              // mov           (%ecx),%edx
  .byte  139,18                              // mov           (%edx),%edx
  .byte  133,246                             // test          %esi,%esi
  .byte  139,93,16                           // mov           0x10(%ebp),%ebx
  .byte  141,60,91                           // lea           (%ebx,%ebx,2),%edi
  .byte  15,133,32,1,0,0                     // jne           697e <_sk_load_rgb_u16_be_sse2+0x14f>
  .byte  243,15,111,20,122                   // movdqu        (%edx,%edi,2),%xmm2
  .byte  243,15,111,124,122,8                // movdqu        0x8(%edx,%edi,2),%xmm7
  .byte  102,15,115,223,4                    // psrldq        $0x4,%xmm7
  .byte  102,15,111,194                      // movdqa        %xmm2,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,15,111,207                      // movdqa        %xmm7,%xmm1
  .byte  102,15,115,217,6                    // psrldq        $0x6,%xmm1
  .byte  102,15,97,215                       // punpcklwd     %xmm7,%xmm2
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,15,126,77,224                   // movd          %xmm1,-0x20(%ebp)
  .byte  102,15,112,193,229                  // pshufd        $0xe5,%xmm1,%xmm0
  .byte  102,15,126,69,228                   // movd          %xmm0,-0x1c(%ebp)
  .byte  243,15,126,69,224                   // movq          -0x20(%ebp),%xmm0
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  102,15,97,199                       // punpcklwd     %xmm7,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,160,243,47,0,0                // movaps        0x2ff3(%eax),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,15,126,93,216                   // movd          %xmm3,-0x28(%ebp)
  .byte  102,15,112,203,229                  // pshufd        $0xe5,%xmm3,%xmm1
  .byte  102,15,126,77,220                   // movd          %xmm1,-0x24(%ebp)
  .byte  243,15,126,77,216                   // movq          -0x28(%ebp),%xmm1
  .byte  102,15,97,207                       // punpcklwd     %xmm7,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  102,15,111,218                      // movdqa        %xmm2,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,15,235,211                      // por           %xmm3,%xmm2
  .byte  102,15,126,85,232                   // movd          %xmm2,-0x18(%ebp)
  .byte  102,15,112,210,229                  // pshufd        $0xe5,%xmm2,%xmm2
  .byte  102,15,126,85,236                   // movd          %xmm2,-0x14(%ebp)
  .byte  243,15,126,85,232                   // movq          -0x18(%ebp),%xmm2
  .byte  102,15,97,215                       // punpcklwd     %xmm7,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  141,81,8                            // lea           0x8(%ecx),%edx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,40,93,56                         // movaps        0x38(%ebp),%xmm3
  .byte  15,41,92,36,48                      // movaps        %xmm3,0x30(%esp)
  .byte  15,40,93,40                         // movaps        0x28(%ebp),%xmm3
  .byte  15,41,92,36,32                      // movaps        %xmm3,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,92,36,8                         // mov           %ebx,0x8(%esp)
  .byte  137,84,36,4                         // mov           %edx,0x4(%esp)
  .byte  139,85,8                            // mov           0x8(%ebp),%edx
  .byte  137,20,36                           // mov           %edx,(%esp)
  .byte  15,40,152,3,48,0,0                  // movaps        0x3003(%eax),%xmm3
  .byte  255,81,4                            // call          *0x4(%ecx)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  102,15,110,20,122                   // movd          (%edx,%edi,2),%xmm2
  .byte  102,15,196,84,122,4,2               // pinsrw        $0x2,0x4(%edx,%edi,2),%xmm2
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  131,254,1                           // cmp           $0x1,%esi
  .byte  117,13                              // jne           69a0 <_sk_load_rgb_u16_be_sse2+0x171>
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,224,254,255,255                 // jmp           6880 <_sk_load_rgb_u16_be_sse2+0x51>
  .byte  102,15,110,68,122,6                 // movd          0x6(%edx,%edi,2),%xmm0
  .byte  102,15,196,68,122,10,2              // pinsrw        $0x2,0xa(%edx,%edi,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  131,254,3                           // cmp           $0x3,%esi
  .byte  114,18                              // jb            69c8 <_sk_load_rgb_u16_be_sse2+0x199>
  .byte  102,15,110,124,122,12               // movd          0xc(%edx,%edi,2),%xmm7
  .byte  102,15,196,124,122,16,2             // pinsrw        $0x2,0x10(%edx,%edi,2),%xmm7
  .byte  233,184,254,255,255                 // jmp           6880 <_sk_load_rgb_u16_be_sse2+0x51>
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  233,175,254,255,255                 // jmp           6880 <_sk_load_rgb_u16_be_sse2+0x51>

HIDDEN _sk_store_u16_be_sse2
.globl _sk_store_u16_be_sse2
FUNCTION(_sk_store_u16_be_sse2)
_sk_store_u16_be_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  232,0,0,0,0                         // call          69e3 <_sk_store_u16_be_sse2+0x12>
  .byte  88                                  // pop           %eax
  .byte  15,40,176,109,46,0,0                // movaps        0x2e6d(%eax),%xmm6
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  102,15,91,228                       // cvtps2dq      %xmm4,%xmm4
  .byte  102,15,114,244,16                   // pslld         $0x10,%xmm4
  .byte  102,15,114,228,16                   // psrad         $0x10,%xmm4
  .byte  102,15,107,228                      // packssdw      %xmm4,%xmm4
  .byte  102,15,111,236                      // movdqa        %xmm4,%xmm5
  .byte  102,15,113,245,8                    // psllw         $0x8,%xmm5
  .byte  102,15,113,212,8                    // psrlw         $0x8,%xmm4
  .byte  102,15,235,229                      // por           %xmm5,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,89,238                           // mulps         %xmm6,%xmm5
  .byte  102,15,91,253                       // cvtps2dq      %xmm5,%xmm7
  .byte  102,15,114,247,16                   // pslld         $0x10,%xmm7
  .byte  102,15,114,231,16                   // psrad         $0x10,%xmm7
  .byte  102,15,107,255                      // packssdw      %xmm7,%xmm7
  .byte  102,15,111,239                      // movdqa        %xmm7,%xmm5
  .byte  102,15,113,245,8                    // psllw         $0x8,%xmm5
  .byte  102,15,113,215,8                    // psrlw         $0x8,%xmm7
  .byte  102,15,235,253                      // por           %xmm5,%xmm7
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,89,238                           // mulps         %xmm6,%xmm5
  .byte  102,15,91,237                       // cvtps2dq      %xmm5,%xmm5
  .byte  102,15,114,245,16                   // pslld         $0x10,%xmm5
  .byte  102,15,114,229,16                   // psrad         $0x10,%xmm5
  .byte  102,15,107,237                      // packssdw      %xmm5,%xmm5
  .byte  102,15,111,221                      // movdqa        %xmm5,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,113,213,8                    // psrlw         $0x8,%xmm5
  .byte  102,15,235,235                      // por           %xmm3,%xmm5
  .byte  15,89,117,216                       // mulps         -0x28(%ebp),%xmm6
  .byte  102,15,91,222                       // cvtps2dq      %xmm6,%xmm3
  .byte  102,15,114,243,16                   // pslld         $0x10,%xmm3
  .byte  102,15,114,227,16                   // psrad         $0x10,%xmm3
  .byte  102,15,107,219                      // packssdw      %xmm3,%xmm3
  .byte  102,15,111,243                      // movdqa        %xmm3,%xmm6
  .byte  102,15,113,246,8                    // psllw         $0x8,%xmm6
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,222                      // por           %xmm6,%xmm3
  .byte  102,15,97,231                       // punpcklwd     %xmm7,%xmm4
  .byte  102,15,97,235                       // punpcklwd     %xmm3,%xmm5
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,16                              // mov           (%eax),%edx
  .byte  139,26                              // mov           (%edx),%ebx
  .byte  133,255                             // test          %edi,%edi
  .byte  141,20,141,0,0,0,0                  // lea           0x0(,%ecx,4),%edx
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  102,15,111,220                      // movdqa        %xmm4,%xmm3
  .byte  102,15,98,221                       // punpckldq     %xmm5,%xmm3
  .byte  117,82                              // jne           6b16 <_sk_store_u16_be_sse2+0x145>
  .byte  15,17,28,83                         // movups        %xmm3,(%ebx,%edx,2)
  .byte  102,15,106,229                      // punpckhdq     %xmm5,%xmm4
  .byte  243,15,127,100,83,16                // movdqu        %xmm4,0x10(%ebx,%edx,2)
  .byte  141,80,8                            // lea           0x8(%eax),%edx
  .byte  15,40,93,88                         // movaps        0x58(%ebp),%xmm3
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  15,40,93,72                         // movaps        0x48(%ebp),%xmm3
  .byte  15,41,92,36,64                      // movaps        %xmm3,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,84,36,4                         // mov           %edx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  102,15,214,28,83                    // movq          %xmm3,(%ebx,%edx,2)
  .byte  131,255,1                           // cmp           $0x1,%edi
  .byte  116,178                             // je            6ad2 <_sk_store_u16_be_sse2+0x101>
  .byte  102,15,23,92,83,8                   // movhpd        %xmm3,0x8(%ebx,%edx,2)
  .byte  131,255,3                           // cmp           $0x3,%edi
  .byte  114,167                             // jb            6ad2 <_sk_store_u16_be_sse2+0x101>
  .byte  102,15,106,229                      // punpckhdq     %xmm5,%xmm4
  .byte  102,15,214,100,83,16                // movq          %xmm4,0x10(%ebx,%edx,2)
  .byte  235,155                             // jmp           6ad2 <_sk_store_u16_be_sse2+0x101>

HIDDEN _sk_load_f32_sse2
.globl _sk_load_f32_sse2
FUNCTION(_sk_load_f32_sse2)
_sk_load_f32_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,48                              // mov           (%eax),%esi
  .byte  139,30                              // mov           (%esi),%ebx
  .byte  137,206                             // mov           %ecx,%esi
  .byte  193,230,4                           // shl           $0x4,%esi
  .byte  15,16,44,51                         // movups        (%ebx,%esi,1),%xmm5
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  133,210                             // test          %edx,%edx
  .byte  141,52,141,0,0,0,0                  // lea           0x0(,%ecx,4),%esi
  .byte  117,117                             // jne           6be1 <_sk_load_f32_sse2+0xaa>
  .byte  15,16,84,179,16                     // movups        0x10(%ebx,%esi,4),%xmm2
  .byte  15,16,92,179,32                     // movups        0x20(%ebx,%esi,4),%xmm3
  .byte  15,16,68,179,48                     // movups        0x30(%ebx,%esi,4),%xmm0
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,20,226                           // unpcklps      %xmm2,%xmm4
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,20,200                           // unpcklps      %xmm0,%xmm1
  .byte  15,21,234                           // unpckhps      %xmm2,%xmm5
  .byte  15,21,216                           // unpckhps      %xmm0,%xmm3
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,204                           // movhlps       %xmm4,%xmm1
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  15,18,221                           // movhlps       %xmm5,%xmm3
  .byte  141,112,8                           // lea           0x8(%eax),%esi
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,116,36,4                        // mov           %esi,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  131,250,1                           // cmp           $0x1,%edx
  .byte  117,8                               // jne           6bf1 <_sk_load_f32_sse2+0xba>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  235,138                             // jmp           6b7b <_sk_load_f32_sse2+0x44>
  .byte  15,16,84,179,16                     // movups        0x10(%ebx,%esi,4),%xmm2
  .byte  131,250,3                           // cmp           $0x3,%edx
  .byte  114,10                              // jb            6c05 <_sk_load_f32_sse2+0xce>
  .byte  15,16,92,179,32                     // movups        0x20(%ebx,%esi,4),%xmm3
  .byte  233,118,255,255,255                 // jmp           6b7b <_sk_load_f32_sse2+0x44>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  233,110,255,255,255                 // jmp           6b7b <_sk_load_f32_sse2+0x44>

HIDDEN _sk_load_f32_dst_sse2
.globl _sk_load_f32_dst_sse2
FUNCTION(_sk_load_f32_dst_sse2)
_sk_load_f32_dst_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,140,0,0,0                   // sub           $0x8c,%esp
  .byte  15,41,93,200                        // movaps        %xmm3,-0x38(%ebp)
  .byte  15,41,85,216                        // movaps        %xmm2,-0x28(%ebp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,48                              // mov           (%eax),%esi
  .byte  139,30                              // mov           (%esi),%ebx
  .byte  137,206                             // mov           %ecx,%esi
  .byte  193,230,4                           // shl           $0x4,%esi
  .byte  15,16,52,51                         // movups        (%ebx,%esi,1),%xmm6
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  133,210                             // test          %edx,%edx
  .byte  141,52,141,0,0,0,0                  // lea           0x0(,%ecx,4),%esi
  .byte  117,122                             // jne           6cbf <_sk_load_f32_dst_sse2+0xb2>
  .byte  15,16,124,179,16                    // movups        0x10(%ebx,%esi,4),%xmm7
  .byte  15,16,92,179,32                     // movups        0x20(%ebx,%esi,4),%xmm3
  .byte  15,16,84,179,48                     // movups        0x30(%ebx,%esi,4),%xmm2
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,20,231                           // unpcklps      %xmm7,%xmm4
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,20,234                           // unpcklps      %xmm2,%xmm5
  .byte  15,21,247                           // unpckhps      %xmm7,%xmm6
  .byte  15,21,218                           // unpckhps      %xmm2,%xmm3
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  102,15,20,213                       // unpcklpd      %xmm5,%xmm2
  .byte  15,18,236                           // movhlps       %xmm4,%xmm5
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  102,15,20,227                       // unpcklpd      %xmm3,%xmm4
  .byte  15,18,222                           // movhlps       %xmm6,%xmm3
  .byte  141,112,8                           // lea           0x8(%eax),%esi
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,116,36,4                        // mov           %esi,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,41,92,36,80                      // movaps        %xmm3,0x50(%esp)
  .byte  102,15,41,100,36,64                 // movapd        %xmm4,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  102,15,41,84,36,32                  // movapd        %xmm2,0x20(%esp)
  .byte  15,40,85,216                        // movaps        -0x28(%ebp),%xmm2
  .byte  15,40,93,200                        // movaps        -0x38(%ebp),%xmm3
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  129,196,140,0,0,0                   // add           $0x8c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  131,250,1                           // cmp           $0x1,%edx
  .byte  117,8                               // jne           6ccf <_sk_load_f32_dst_sse2+0xc2>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  235,133                             // jmp           6c54 <_sk_load_f32_dst_sse2+0x47>
  .byte  15,16,124,179,16                    // movups        0x10(%ebx,%esi,4),%xmm7
  .byte  131,250,3                           // cmp           $0x3,%edx
  .byte  114,10                              // jb            6ce3 <_sk_load_f32_dst_sse2+0xd6>
  .byte  15,16,92,179,32                     // movups        0x20(%ebx,%esi,4),%xmm3
  .byte  233,113,255,255,255                 // jmp           6c54 <_sk_load_f32_dst_sse2+0x47>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  233,105,255,255,255                 // jmp           6c54 <_sk_load_f32_dst_sse2+0x47>

HIDDEN _sk_store_f32_sse2
.globl _sk_store_f32_sse2
FUNCTION(_sk_store_f32_sse2)
_sk_store_f32_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,48                              // mov           (%eax),%esi
  .byte  139,54                              // mov           (%esi),%esi
  .byte  137,207                             // mov           %ecx,%edi
  .byte  193,231,4                           // shl           $0x4,%edi
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  15,20,241                           // unpcklps      %xmm1,%xmm6
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,20,227                           // unpcklps      %xmm3,%xmm4
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  102,15,20,196                       // unpcklpd      %xmm4,%xmm0
  .byte  102,15,17,4,62                      // movupd        %xmm0,(%esi,%edi,1)
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,21,193                           // unpckhps      %xmm1,%xmm0
  .byte  15,21,211                           // unpckhps      %xmm3,%xmm2
  .byte  15,18,230                           // movhlps       %xmm6,%xmm4
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  102,15,20,242                       // unpcklpd      %xmm2,%xmm6
  .byte  133,210                             // test          %edx,%edx
  .byte  139,93,8                            // mov           0x8(%ebp),%ebx
  .byte  141,60,141,0,0,0,0                  // lea           0x0(,%ecx,4),%edi
  .byte  117,99                              // jne           6da8 <_sk_store_f32_sse2+0xbd>
  .byte  102,15,21,194                       // unpckhpd      %xmm2,%xmm0
  .byte  15,17,100,190,16                    // movups        %xmm4,0x10(%esi,%edi,4)
  .byte  102,15,17,116,190,32                // movupd        %xmm6,0x20(%esi,%edi,4)
  .byte  102,15,17,68,190,48                 // movupd        %xmm0,0x30(%esi,%edi,4)
  .byte  141,112,8                           // lea           0x8(%eax),%esi
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,40,69,72                         // movaps        0x48(%ebp),%xmm0
  .byte  15,41,68,36,64                      // movaps        %xmm0,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,116,36,4                        // mov           %esi,0x4(%esp)
  .byte  137,28,36                           // mov           %ebx,(%esp)
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,40,213                           // movaps        %xmm5,%xmm2
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret
  .byte  131,250,1                           // cmp           $0x1,%edx
  .byte  116,173                             // je            6d5a <_sk_store_f32_sse2+0x6f>
  .byte  15,17,100,190,16                    // movups        %xmm4,0x10(%esi,%edi,4)
  .byte  131,250,3                           // cmp           $0x3,%edx
  .byte  114,163                             // jb            6d5a <_sk_store_f32_sse2+0x6f>
  .byte  102,15,17,116,190,32                // movupd        %xmm6,0x20(%esi,%edi,4)
  .byte  235,155                             // jmp           6d5a <_sk_store_f32_sse2+0x6f>

HIDDEN _sk_clamp_x_sse2
.globl _sk_clamp_x_sse2
FUNCTION(_sk_clamp_x_sse2)
_sk_clamp_x_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  243,15,16,47                        // movss         (%edi),%xmm5
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,95,224                           // maxps         %xmm0,%xmm4
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  102,15,118,192                      // pcmpeqd       %xmm0,%xmm0
  .byte  102,15,254,197                      // paddd         %xmm5,%xmm0
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,93,224                           // minps         %xmm0,%xmm4
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_clamp_y_sse2
.globl _sk_clamp_y_sse2
FUNCTION(_sk_clamp_y_sse2)
_sk_clamp_y_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  243,15,16,47                        // movss         (%edi),%xmm5
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,95,225                           // maxps         %xmm1,%xmm4
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  102,15,118,201                      // pcmpeqd       %xmm1,%xmm1
  .byte  102,15,254,205                      // paddd         %xmm5,%xmm1
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,93,225                           // minps         %xmm1,%xmm4
  .byte  15,40,77,88                         // movaps        0x58(%ebp),%xmm1
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,76,36,80                      // movaps        %xmm1,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_repeat_x_sse2
.globl _sk_repeat_x_sse2
FUNCTION(_sk_repeat_x_sse2)
_sk_repeat_x_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          6ec3 <_sk_repeat_x_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,39                        // movss         (%edi),%xmm4
  .byte  243,15,16,111,4                     // movss         0x4(%edi),%xmm5
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  243,15,91,245                       // cvttps2dq     %xmm5,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,194,238,1                        // cmpltps       %xmm6,%xmm5
  .byte  15,84,174,157,41,0,0                // andps         0x299d(%esi),%xmm5
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,92,245                           // subps         %xmm5,%xmm6
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,89,244                           // mulps         %xmm4,%xmm6
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  102,15,118,246                      // pcmpeqd       %xmm6,%xmm6
  .byte  102,15,254,244                      // paddd         %xmm4,%xmm6
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,93,198                           // minps         %xmm6,%xmm0
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_repeat_y_sse2
.globl _sk_repeat_y_sse2
FUNCTION(_sk_repeat_y_sse2)
_sk_repeat_y_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          6f62 <_sk_repeat_y_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,39                        // movss         (%edi),%xmm4
  .byte  243,15,16,111,4                     // movss         0x4(%edi),%xmm5
  .byte  139,125,20                          // mov           0x14(%ebp),%edi
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,89,233                           // mulps         %xmm1,%xmm5
  .byte  243,15,91,245                       // cvttps2dq     %xmm5,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,194,238,1                        // cmpltps       %xmm6,%xmm5
  .byte  15,84,174,14,41,0,0                 // andps         0x290e(%esi),%xmm5
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,125,40                        // movaps        0x28(%ebp),%xmm7
  .byte  15,92,245                           // subps         %xmm5,%xmm6
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,89,244                           // mulps         %xmm4,%xmm6
  .byte  15,92,206                           // subps         %xmm6,%xmm1
  .byte  102,15,118,246                      // pcmpeqd       %xmm6,%xmm6
  .byte  102,15,254,244                      // paddd         %xmm4,%xmm6
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,93,206                           // minps         %xmm6,%xmm1
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,124,36,32                     // movaps        %xmm7,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,124,36,12                       // mov           %edi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_mirror_x_sse2
.globl _sk_mirror_x_sse2
FUNCTION(_sk_mirror_x_sse2)
_sk_mirror_x_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          7001 <_sk_mirror_x_sse2+0xe>
  .byte  95                                  // pop           %edi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,50                              // mov           (%edx),%esi
  .byte  243,15,16,46                        // movss         (%esi),%xmm5
  .byte  243,15,16,118,4                     // movss         0x4(%esi),%xmm6
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  243,15,89,183,207,44,0,0            // mulss         0x2ccf(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  243,15,91,254                       // cvttps2dq     %xmm6,%xmm7
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  15,194,247,1                        // cmpltps       %xmm7,%xmm6
  .byte  15,84,183,127,40,0,0                // andps         0x287f(%edi),%xmm6
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  243,15,88,237                       // addss         %xmm5,%xmm5
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,92,199                           // subps         %xmm7,%xmm0
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  15,92,248                           // subps         %xmm0,%xmm7
  .byte  15,84,199                           // andps         %xmm7,%xmm0
  .byte  102,15,118,255                      // pcmpeqd       %xmm7,%xmm7
  .byte  102,15,254,252                      // paddd         %xmm4,%xmm7
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,93,199                           // minps         %xmm7,%xmm0
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_mirror_y_sse2
.globl _sk_mirror_y_sse2
FUNCTION(_sk_mirror_y_sse2)
_sk_mirror_y_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          70c2 <_sk_mirror_y_sse2+0xe>
  .byte  95                                  // pop           %edi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,50                              // mov           (%edx),%esi
  .byte  243,15,16,46                        // movss         (%esi),%xmm5
  .byte  243,15,16,118,4                     // movss         0x4(%esi),%xmm6
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  243,15,89,183,18,44,0,0             // mulss         0x2c12(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,241                           // mulps         %xmm1,%xmm6
  .byte  243,15,91,254                       // cvttps2dq     %xmm6,%xmm7
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  15,194,247,1                        // cmpltps       %xmm7,%xmm6
  .byte  15,84,183,206,39,0,0                // andps         0x27ce(%edi),%xmm6
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  243,15,88,237                       // addss         %xmm5,%xmm5
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,92,207                           // subps         %xmm7,%xmm1
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,92,249                           // subps         %xmm1,%xmm7
  .byte  15,84,207                           // andps         %xmm7,%xmm1
  .byte  102,15,118,255                      // pcmpeqd       %xmm7,%xmm7
  .byte  102,15,254,252                      // paddd         %xmm4,%xmm7
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,93,207                           // minps         %xmm7,%xmm1
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_clamp_x_1_sse2
.globl _sk_clamp_x_1_sse2
FUNCTION(_sk_clamp_x_1_sse2)
_sk_clamp_x_1_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          7183 <_sk_clamp_x_1_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,95,224                           // maxps         %xmm0,%xmm4
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,93,160,29,39,0,0                 // minps         0x271d(%eax),%xmm4
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_repeat_x_1_sse2
.globl _sk_repeat_x_1_sse2
FUNCTION(_sk_repeat_x_1_sse2)
_sk_repeat_x_1_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          71f5 <_sk_repeat_x_1_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  243,15,91,240                       // cvttps2dq     %xmm0,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  15,194,254,1                        // cmpltps       %xmm6,%xmm7
  .byte  15,84,184,187,38,0,0                // andps         0x26bb(%eax),%xmm7
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_mirror_x_1_sse2
.globl _sk_mirror_x_1_sse2
FUNCTION(_sk_mirror_x_1_sse2)
_sk_mirror_x_1_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          7272 <_sk_mirror_x_1_sse2+0xe>
  .byte  95                                  // pop           %edi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,175,78,38,0,0                 // movaps        0x264e(%edi),%xmm5
  .byte  15,88,197                           // addps         %xmm5,%xmm0
  .byte  15,40,183,94,38,0,0                 // movaps        0x265e(%edi),%xmm6
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  243,15,91,254                       // cvttps2dq     %xmm6,%xmm7
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  15,194,247,1                        // cmpltps       %xmm7,%xmm6
  .byte  15,84,183,110,38,0,0                // andps         0x266e(%edi),%xmm6
  .byte  15,92,254                           // subps         %xmm6,%xmm7
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,88,255                           // addps         %xmm7,%xmm7
  .byte  15,92,199                           // subps         %xmm7,%xmm0
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,88,197                           // addps         %xmm5,%xmm0
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,92,232                           // subps         %xmm0,%xmm5
  .byte  15,84,197                           // andps         %xmm5,%xmm0
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_luminance_to_alpha_sse2
.globl _sk_luminance_to_alpha_sse2
FUNCTION(_sk_luminance_to_alpha_sse2)
_sk_luminance_to_alpha_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  232,0,0,0,0                         // call          7312 <_sk_luminance_to_alpha_sse2+0x11>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,85,40                         // movaps        0x28(%ebp),%xmm2
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  15,89,128,222,37,0,0                // mulps         0x25de(%eax),%xmm0
  .byte  15,89,136,238,37,0,0                // mulps         0x25ee(%eax),%xmm1
  .byte  15,89,152,254,37,0,0                // mulps         0x25fe(%eax),%xmm3
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,84,36,32                      // movaps        %xmm2,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_matrix_2x3_sse2
.globl _sk_matrix_2x3_sse2
FUNCTION(_sk_matrix_2x3_sse2)
_sk_matrix_2x3_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,7                         // movss         (%edi),%xmm0
  .byte  243,15,16,79,4                      // movss         0x4(%edi),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,119,8                     // movss         0x8(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,127,16                    // movss         0x10(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  243,15,16,119,12                    // movss         0xc(%edi),%xmm6
  .byte  243,15,16,127,20                    // movss         0x14(%edi),%xmm7
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_matrix_3x4_sse2
.globl _sk_matrix_3x4_sse2
FUNCTION(_sk_matrix_3x4_sse2)
_sk_matrix_3x4_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,7                         // movss         (%edi),%xmm0
  .byte  243,15,16,79,4                      // movss         0x4(%edi),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,119,24                    // movss         0x18(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,127,36                    // movss         0x24(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,242                           // mulps         %xmm2,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  243,15,16,127,12                    // movss         0xc(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,254                           // addps         %xmm6,%xmm7
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,88,199                           // addps         %xmm7,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,119,28                    // movss         0x1c(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,127,40                    // movss         0x28(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,242                           // mulps         %xmm2,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  243,15,16,127,16                    // movss         0x10(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,254                           // addps         %xmm6,%xmm7
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,207                           // addps         %xmm7,%xmm1
  .byte  243,15,16,119,8                     // movss         0x8(%edi),%xmm6
  .byte  243,15,16,127,32                    // movss         0x20(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  243,15,16,87,44                     // movss         0x2c(%edi),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  15,88,250                           // addps         %xmm2,%xmm7
  .byte  243,15,16,87,20                     // movss         0x14(%edi),%xmm2
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,88,242                           // addps         %xmm2,%xmm6
  .byte  15,40,85,88                         // movaps        0x58(%ebp),%xmm2
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,84,36,80                      // movaps        %xmm2,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_matrix_4x5_sse2
.globl _sk_matrix_4x5_sse2
FUNCTION(_sk_matrix_4x5_sse2)
_sk_matrix_4x5_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  141,122,4                           // lea           0x4(%edx),%edi
  .byte  137,125,240                         // mov           %edi,-0x10(%ebp)
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,23                        // movss         (%edi),%xmm2
  .byte  243,15,16,79,4                      // movss         0x4(%edi),%xmm1
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,119,48                    // movss         0x30(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,127,64                    // movss         0x40(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  243,15,16,127,32                    // movss         0x20(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,254                           // addps         %xmm6,%xmm7
  .byte  243,15,16,119,16                    // movss         0x10(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,119,52                    // movss         0x34(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,127,68                    // movss         0x44(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  243,15,16,127,36                    // movss         0x24(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,254                           // addps         %xmm6,%xmm7
  .byte  243,15,16,119,20                    // movss         0x14(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,41,109,216                       // movaps        %xmm5,-0x28(%ebp)
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  243,15,16,119,56                    // movss         0x38(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,127,72                    // movss         0x48(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  243,15,16,127,40                    // movss         0x28(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,88,254                           // addps         %xmm6,%xmm7
  .byte  243,15,16,119,24                    // movss         0x18(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  243,15,16,127,8                     // movss         0x8(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,248                           // mulps         %xmm0,%xmm7
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,88,254                           // addps         %xmm6,%xmm7
  .byte  243,15,16,119,60                    // movss         0x3c(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,243                           // mulps         %xmm3,%xmm6
  .byte  243,15,16,95,76                     // movss         0x4c(%edi),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,88,243                           // addps         %xmm3,%xmm6
  .byte  243,15,16,71,44                     // movss         0x2c(%edi),%xmm0
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  243,15,16,95,12                     // movss         0xc(%edi),%xmm3
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  243,15,16,103,28                    // movss         0x1c(%edi),%xmm4
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,198,228,0                        // shufps        $0x0,%xmm4,%xmm4
  .byte  15,89,101,216                       // mulps         -0x28(%ebp),%xmm4
  .byte  15,88,224                           // addps         %xmm0,%xmm4
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,88,220                           // addps         %xmm4,%xmm3
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,40,215                           // movaps        %xmm7,%xmm2
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_matrix_4x3_sse2
.globl _sk_matrix_4x3_sse2
FUNCTION(_sk_matrix_4x3_sse2)
_sk_matrix_4x3_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,7                         // movss         (%edi),%xmm0
  .byte  243,15,16,79,4                      // movss         0x4(%edi),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,87,16                     // movss         0x10(%edi),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,95,32                     // movss         0x20(%edi),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,87,20                     // movss         0x14(%edi),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,95,36                     // movss         0x24(%edi),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,87,8                      // movss         0x8(%edi),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,95,24                     // movss         0x18(%edi),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,15,16,119,40                    // movss         0x28(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  15,88,222                           // addps         %xmm6,%xmm3
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,95,12                     // movss         0xc(%edi),%xmm3
  .byte  243,15,16,119,28                    // movss         0x1c(%edi),%xmm6
  .byte  243,15,16,127,44                    // movss         0x2c(%edi),%xmm7
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  15,40,125,56                        // movaps        0x38(%ebp),%xmm7
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,88,222                           // addps         %xmm6,%xmm3
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,124,36,48                     // movaps        %xmm7,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_matrix_perspective_sse2
.globl _sk_matrix_perspective_sse2
FUNCTION(_sk_matrix_perspective_sse2)
_sk_matrix_perspective_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,7                         // movss         (%edi),%xmm0
  .byte  243,15,16,111,4                     // movss         0x4(%edi),%xmm5
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  243,15,16,119,8                     // movss         0x8(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,233                           // mulps         %xmm1,%xmm5
  .byte  15,88,238                           // addps         %xmm6,%xmm5
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,197                           // addps         %xmm5,%xmm0
  .byte  243,15,16,111,12                    // movss         0xc(%edi),%xmm5
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  243,15,16,119,16                    // movss         0x10(%edi),%xmm6
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  243,15,16,127,20                    // movss         0x14(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,241                           // mulps         %xmm1,%xmm6
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,88,238                           // addps         %xmm6,%xmm5
  .byte  243,15,16,119,24                    // movss         0x18(%edi),%xmm6
  .byte  243,15,16,127,28                    // movss         0x1c(%edi),%xmm7
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  243,15,16,79,32                     // movss         0x20(%edi),%xmm1
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,88,249                           // addps         %xmm1,%xmm7
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,244                           // mulps         %xmm4,%xmm6
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,88,247                           // addps         %xmm7,%xmm6
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,83,246                           // rcpps         %xmm6,%xmm6
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,89,238                           // mulps         %xmm6,%xmm5
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_evenly_spaced_gradient_sse2
.globl _sk_evenly_spaced_gradient_sse2
FUNCTION(_sk_evenly_spaced_gradient_sse2)
_sk_evenly_spaced_gradient_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,156,0,0,0                   // sub           $0x9c,%esp
  .byte  15,41,69,184                        // movaps        %xmm0,-0x48(%ebp)
  .byte  232,0,0,0,0                         // call          78c8 <_sk_evenly_spaced_gradient_sse2+0x15>
  .byte  90                                  // pop           %edx
  .byte  139,77,12                           // mov           0xc(%ebp),%ecx
  .byte  141,65,4                            // lea           0x4(%ecx),%eax
  .byte  137,69,240                          // mov           %eax,-0x10(%ebp)
  .byte  139,9                               // mov           (%ecx),%ecx
  .byte  139,49                              // mov           (%ecx),%esi
  .byte  139,65,4                            // mov           0x4(%ecx),%eax
  .byte  78                                  // dec           %esi
  .byte  102,15,110,206                      // movd          %esi,%xmm1
  .byte  102,15,112,201,0                    // pshufd        $0x0,%xmm1,%xmm1
  .byte  102,15,111,146,88,32,0,0            // movdqa        0x2058(%edx),%xmm2
  .byte  102,15,219,209                      // pand          %xmm1,%xmm2
  .byte  102,15,235,146,104,32,0,0           // por           0x2068(%edx),%xmm2
  .byte  102,15,114,209,16                   // psrld         $0x10,%xmm1
  .byte  102,15,235,138,120,32,0,0           // por           0x2078(%edx),%xmm1
  .byte  15,88,138,136,32,0,0                // addps         0x2088(%edx),%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,112,209,229                  // pshufd        $0xe5,%xmm1,%xmm2
  .byte  102,15,126,210                      // movd          %xmm2,%edx
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,15,112,217,231                  // pshufd        $0xe7,%xmm1,%xmm3
  .byte  102,15,126,223                      // movd          %xmm3,%edi
  .byte  243,15,16,28,184                    // movss         (%eax,%edi,4),%xmm3
  .byte  243,15,16,52,144                    // movss         (%eax,%edx,4),%xmm6
  .byte  102,15,126,206                      // movd          %xmm1,%esi
  .byte  243,15,16,36,176                    // movss         (%eax,%esi,4),%xmm4
  .byte  102,15,126,211                      // movd          %xmm2,%ebx
  .byte  243,15,16,12,152                    // movss         (%eax,%ebx,4),%xmm1
  .byte  15,20,243                           // unpcklps      %xmm3,%xmm6
  .byte  139,65,20                           // mov           0x14(%ecx),%eax
  .byte  243,15,16,20,184                    // movss         (%eax,%edi,4),%xmm2
  .byte  243,15,16,28,144                    // movss         (%eax,%edx,4),%xmm3
  .byte  243,15,16,4,176                     // movss         (%eax,%esi,4),%xmm0
  .byte  243,15,16,60,152                    // movss         (%eax,%ebx,4),%xmm7
  .byte  15,20,225                           // unpcklps      %xmm1,%xmm4
  .byte  15,20,230                           // unpcklps      %xmm6,%xmm4
  .byte  15,20,218                           // unpcklps      %xmm2,%xmm3
  .byte  15,20,199                           // unpcklps      %xmm7,%xmm0
  .byte  139,65,8                            // mov           0x8(%ecx),%eax
  .byte  243,15,16,20,184                    // movss         (%eax,%edi,4),%xmm2
  .byte  243,15,16,52,144                    // movss         (%eax,%edx,4),%xmm6
  .byte  243,15,16,12,176                    // movss         (%eax,%esi,4),%xmm1
  .byte  243,15,16,60,152                    // movss         (%eax,%ebx,4),%xmm7
  .byte  15,20,195                           // unpcklps      %xmm3,%xmm0
  .byte  15,41,69,200                        // movaps        %xmm0,-0x38(%ebp)
  .byte  15,20,242                           // unpcklps      %xmm2,%xmm6
  .byte  15,20,207                           // unpcklps      %xmm7,%xmm1
  .byte  15,20,206                           // unpcklps      %xmm6,%xmm1
  .byte  139,65,24                           // mov           0x18(%ecx),%eax
  .byte  243,15,16,20,184                    // movss         (%eax,%edi,4),%xmm2
  .byte  243,15,16,28,144                    // movss         (%eax,%edx,4),%xmm3
  .byte  243,15,16,4,176                     // movss         (%eax,%esi,4),%xmm0
  .byte  243,15,16,60,152                    // movss         (%eax,%ebx,4),%xmm7
  .byte  15,20,218                           // unpcklps      %xmm2,%xmm3
  .byte  15,20,199                           // unpcklps      %xmm7,%xmm0
  .byte  15,20,195                           // unpcklps      %xmm3,%xmm0
  .byte  15,41,69,216                        // movaps        %xmm0,-0x28(%ebp)
  .byte  139,65,12                           // mov           0xc(%ecx),%eax
  .byte  243,15,16,20,184                    // movss         (%eax,%edi,4),%xmm2
  .byte  243,15,16,28,144                    // movss         (%eax,%edx,4),%xmm3
  .byte  15,20,218                           // unpcklps      %xmm2,%xmm3
  .byte  243,15,16,20,176                    // movss         (%eax,%esi,4),%xmm2
  .byte  243,15,16,60,152                    // movss         (%eax,%ebx,4),%xmm7
  .byte  15,20,215                           // unpcklps      %xmm7,%xmm2
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  139,65,28                           // mov           0x1c(%ecx),%eax
  .byte  243,15,16,60,184                    // movss         (%eax,%edi,4),%xmm7
  .byte  243,15,16,28,144                    // movss         (%eax,%edx,4),%xmm3
  .byte  15,20,223                           // unpcklps      %xmm7,%xmm3
  .byte  243,15,16,60,176                    // movss         (%eax,%esi,4),%xmm7
  .byte  243,15,16,44,152                    // movss         (%eax,%ebx,4),%xmm5
  .byte  15,20,253                           // unpcklps      %xmm5,%xmm7
  .byte  15,20,251                           // unpcklps      %xmm3,%xmm7
  .byte  139,65,16                           // mov           0x10(%ecx),%eax
  .byte  243,15,16,28,184                    // movss         (%eax,%edi,4),%xmm3
  .byte  243,15,16,44,144                    // movss         (%eax,%edx,4),%xmm5
  .byte  15,20,235                           // unpcklps      %xmm3,%xmm5
  .byte  243,15,16,28,176                    // movss         (%eax,%esi,4),%xmm3
  .byte  243,15,16,4,152                     // movss         (%eax,%ebx,4),%xmm0
  .byte  15,20,216                           // unpcklps      %xmm0,%xmm3
  .byte  15,20,221                           // unpcklps      %xmm5,%xmm3
  .byte  139,65,32                           // mov           0x20(%ecx),%eax
  .byte  243,15,16,4,184                     // movss         (%eax,%edi,4),%xmm0
  .byte  243,15,16,44,144                    // movss         (%eax,%edx,4),%xmm5
  .byte  15,20,232                           // unpcklps      %xmm0,%xmm5
  .byte  243,15,16,4,176                     // movss         (%eax,%esi,4),%xmm0
  .byte  243,15,16,52,152                    // movss         (%eax,%ebx,4),%xmm6
  .byte  15,20,198                           // unpcklps      %xmm6,%xmm0
  .byte  15,20,197                           // unpcklps      %xmm5,%xmm0
  .byte  15,40,117,184                       // movaps        -0x48(%ebp),%xmm6
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,88,101,200                       // addps         -0x38(%ebp),%xmm4
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,88,77,216                        // addps         -0x28(%ebp),%xmm1
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,88,216                           // addps         %xmm0,%xmm3
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  139,93,12                           // mov           0xc(%ebp),%ebx
  .byte  141,123,8                           // lea           0x8(%ebx),%edi
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,124,36,4                        // mov           %edi,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  255,83,4                            // call          *0x4(%ebx)
  .byte  129,196,156,0,0,0                   // add           $0x9c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_gauss_a_to_rgba_sse2
.globl _sk_gauss_a_to_rgba_sse2
FUNCTION(_sk_gauss_a_to_rgba_sse2)
_sk_gauss_a_to_rgba_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          7abf <_sk_gauss_a_to_rgba_sse2+0xe>
  .byte  90                                  // pop           %edx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,77,40                         // movaps        0x28(%ebp),%xmm1
  .byte  15,40,85,56                         // movaps        0x38(%ebp),%xmm2
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,40,109,88                        // movaps        0x58(%ebp),%xmm5
  .byte  15,40,130,161,30,0,0                // movaps        0x1ea1(%edx),%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,130,177,30,0,0                // addps         0x1eb1(%edx),%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,130,193,30,0,0                // addps         0x1ec1(%edx),%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,130,209,30,0,0                // addps         0x1ed1(%edx),%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,130,225,30,0,0                // addps         0x1ee1(%edx),%xmm0
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  141,90,4                            // lea           0x4(%edx),%ebx
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,84,36,48                      // movaps        %xmm2,0x30(%esp)
  .byte  15,41,76,36,32                      // movaps        %xmm1,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  255,18                              // call          *(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_gradient_sse2
.globl _sk_gradient_sse2
FUNCTION(_sk_gradient_sse2)
_sk_gradient_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  129,236,156,0,0,0                   // sub           $0x9c,%esp
  .byte  232,0,0,0,0                         // call          7b5c <_sk_gradient_sse2+0x11>
  .byte  90                                  // pop           %edx
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  141,72,4                            // lea           0x4(%eax),%ecx
  .byte  137,77,240                          // mov           %ecx,-0x10(%ebp)
  .byte  139,56                              // mov           (%eax),%edi
  .byte  139,7                               // mov           (%edi),%eax
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  131,248,2                           // cmp           $0x2,%eax
  .byte  114,43                              // jb            7b9e <_sk_gradient_sse2+0x53>
  .byte  139,79,36                           // mov           0x24(%edi),%ecx
  .byte  72                                  // dec           %eax
  .byte  131,193,4                           // add           $0x4,%ecx
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  15,40,146,84,30,0,0                 // movaps        0x1e54(%edx),%xmm2
  .byte  243,15,16,25                        // movss         (%ecx),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,194,216,2                        // cmpleps       %xmm0,%xmm3
  .byte  15,84,218                           // andps         %xmm2,%xmm3
  .byte  102,15,254,203                      // paddd         %xmm3,%xmm1
  .byte  131,193,4                           // add           $0x4,%ecx
  .byte  72                                  // dec           %eax
  .byte  117,231                             // jne           7b85 <_sk_gradient_sse2+0x3a>
  .byte  102,15,126,203                      // movd          %xmm1,%ebx
  .byte  102,15,112,209,229                  // pshufd        $0xe5,%xmm1,%xmm2
  .byte  102,15,126,208                      // movd          %xmm2,%eax
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,15,112,201,231                  // pshufd        $0xe7,%xmm1,%xmm1
  .byte  102,15,126,201                      // movd          %xmm1,%ecx
  .byte  139,119,4                           // mov           0x4(%edi),%esi
  .byte  243,15,16,12,142                    // movss         (%esi,%ecx,4),%xmm1
  .byte  243,15,16,28,134                    // movss         (%esi,%eax,4),%xmm3
  .byte  243,15,16,36,158                    // movss         (%esi,%ebx,4),%xmm4
  .byte  102,15,126,210                      // movd          %xmm2,%edx
  .byte  243,15,16,20,150                    // movss         (%esi,%edx,4),%xmm2
  .byte  15,20,217                           // unpcklps      %xmm1,%xmm3
  .byte  139,119,20                          // mov           0x14(%edi),%esi
  .byte  243,15,16,12,142                    // movss         (%esi,%ecx,4),%xmm1
  .byte  243,15,16,52,134                    // movss         (%esi,%eax,4),%xmm6
  .byte  243,15,16,44,158                    // movss         (%esi,%ebx,4),%xmm5
  .byte  243,15,16,60,150                    // movss         (%esi,%edx,4),%xmm7
  .byte  15,20,226                           // unpcklps      %xmm2,%xmm4
  .byte  15,20,227                           // unpcklps      %xmm3,%xmm4
  .byte  15,41,101,184                       // movaps        %xmm4,-0x48(%ebp)
  .byte  15,20,241                           // unpcklps      %xmm1,%xmm6
  .byte  15,20,239                           // unpcklps      %xmm7,%xmm5
  .byte  139,119,8                           // mov           0x8(%edi),%esi
  .byte  243,15,16,20,142                    // movss         (%esi,%ecx,4),%xmm2
  .byte  243,15,16,28,134                    // movss         (%esi,%eax,4),%xmm3
  .byte  243,15,16,12,158                    // movss         (%esi,%ebx,4),%xmm1
  .byte  243,15,16,60,150                    // movss         (%esi,%edx,4),%xmm7
  .byte  15,20,238                           // unpcklps      %xmm6,%xmm5
  .byte  15,41,109,200                       // movaps        %xmm5,-0x38(%ebp)
  .byte  15,20,218                           // unpcklps      %xmm2,%xmm3
  .byte  15,20,207                           // unpcklps      %xmm7,%xmm1
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  139,119,24                          // mov           0x18(%edi),%esi
  .byte  243,15,16,20,142                    // movss         (%esi,%ecx,4),%xmm2
  .byte  243,15,16,28,134                    // movss         (%esi,%eax,4),%xmm3
  .byte  243,15,16,36,158                    // movss         (%esi,%ebx,4),%xmm4
  .byte  243,15,16,60,150                    // movss         (%esi,%edx,4),%xmm7
  .byte  15,20,218                           // unpcklps      %xmm2,%xmm3
  .byte  15,20,231                           // unpcklps      %xmm7,%xmm4
  .byte  15,20,227                           // unpcklps      %xmm3,%xmm4
  .byte  15,41,101,216                       // movaps        %xmm4,-0x28(%ebp)
  .byte  139,119,12                          // mov           0xc(%edi),%esi
  .byte  243,15,16,20,142                    // movss         (%esi,%ecx,4),%xmm2
  .byte  243,15,16,28,134                    // movss         (%esi,%eax,4),%xmm3
  .byte  15,20,218                           // unpcklps      %xmm2,%xmm3
  .byte  243,15,16,20,158                    // movss         (%esi,%ebx,4),%xmm2
  .byte  243,15,16,60,150                    // movss         (%esi,%edx,4),%xmm7
  .byte  15,20,215                           // unpcklps      %xmm7,%xmm2
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  139,119,28                          // mov           0x1c(%edi),%esi
  .byte  243,15,16,60,142                    // movss         (%esi,%ecx,4),%xmm7
  .byte  243,15,16,28,134                    // movss         (%esi,%eax,4),%xmm3
  .byte  15,20,223                           // unpcklps      %xmm7,%xmm3
  .byte  243,15,16,60,158                    // movss         (%esi,%ebx,4),%xmm7
  .byte  243,15,16,44,150                    // movss         (%esi,%edx,4),%xmm5
  .byte  15,20,253                           // unpcklps      %xmm5,%xmm7
  .byte  15,20,251                           // unpcklps      %xmm3,%xmm7
  .byte  139,119,16                          // mov           0x10(%edi),%esi
  .byte  243,15,16,28,142                    // movss         (%esi,%ecx,4),%xmm3
  .byte  243,15,16,44,134                    // movss         (%esi,%eax,4),%xmm5
  .byte  15,20,235                           // unpcklps      %xmm3,%xmm5
  .byte  243,15,16,28,158                    // movss         (%esi,%ebx,4),%xmm3
  .byte  243,15,16,52,150                    // movss         (%esi,%edx,4),%xmm6
  .byte  15,20,222                           // unpcklps      %xmm6,%xmm3
  .byte  15,20,221                           // unpcklps      %xmm5,%xmm3
  .byte  139,119,32                          // mov           0x20(%edi),%esi
  .byte  243,15,16,44,142                    // movss         (%esi,%ecx,4),%xmm5
  .byte  243,15,16,52,134                    // movss         (%esi,%eax,4),%xmm6
  .byte  15,20,245                           // unpcklps      %xmm5,%xmm6
  .byte  243,15,16,44,158                    // movss         (%esi,%ebx,4),%xmm5
  .byte  243,15,16,36,150                    // movss         (%esi,%edx,4),%xmm4
  .byte  15,20,236                           // unpcklps      %xmm4,%xmm5
  .byte  15,20,238                           // unpcklps      %xmm6,%xmm5
  .byte  15,40,101,184                       // movaps        -0x48(%ebp),%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,88,101,200                       // addps         -0x38(%ebp),%xmm4
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  15,88,77,216                        // addps         -0x28(%ebp),%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,88,215                           // addps         %xmm7,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  15,88,221                           // addps         %xmm5,%xmm3
  .byte  139,69,240                          // mov           -0x10(%ebp),%eax
  .byte  141,72,4                            // lea           0x4(%eax),%ecx
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,40,69,72                         // movaps        0x48(%ebp),%xmm0
  .byte  15,41,68,36,64                      // movaps        %xmm0,0x40(%esp)
  .byte  15,40,69,56                         // movaps        0x38(%ebp),%xmm0
  .byte  15,41,68,36,48                      // movaps        %xmm0,0x30(%esp)
  .byte  15,40,69,40                         // movaps        0x28(%ebp),%xmm0
  .byte  15,41,68,36,32                      // movaps        %xmm0,0x20(%esp)
  .byte  139,85,24                           // mov           0x18(%ebp),%edx
  .byte  137,84,36,16                        // mov           %edx,0x10(%esp)
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,76,36,4                         // mov           %ecx,0x4(%esp)
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  255,16                              // call          *(%eax)
  .byte  129,196,156,0,0,0                   // add           $0x9c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_evenly_spaced_2_stop_gradient_sse2
.globl _sk_evenly_spaced_2_stop_gradient_sse2
FUNCTION(_sk_evenly_spaced_2_stop_gradient_sse2)
_sk_evenly_spaced_2_stop_gradient_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  243,15,16,7                         // movss         (%edi),%xmm0
  .byte  243,15,16,79,4                      // movss         0x4(%edi),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,87,16                     // movss         0x10(%edi),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  243,15,16,111,20                    // movss         0x14(%edi),%xmm5
  .byte  243,15,16,87,8                      // movss         0x8(%edi),%xmm2
  .byte  243,15,16,119,24                    // movss         0x18(%edi),%xmm6
  .byte  243,15,16,95,12                     // movss         0xc(%edi),%xmm3
  .byte  243,15,16,127,28                    // movss         0x1c(%edi),%xmm7
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,198,237,0                        // shufps        $0x0,%xmm5,%xmm5
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  15,198,246,0                        // shufps        $0x0,%xmm6,%xmm6
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,198,255,0                        // shufps        $0x0,%xmm7,%xmm7
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_xy_to_unit_angle_sse2
.globl _sk_xy_to_unit_angle_sse2
FUNCTION(_sk_xy_to_unit_angle_sse2)
_sk_xy_to_unit_angle_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  232,0,0,0,0                         // call          7e1c <_sk_xy_to_unit_angle_sse2+0x1b>
  .byte  88                                  // pop           %eax
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,92,233                           // subps         %xmm1,%xmm5
  .byte  15,84,233                           // andps         %xmm1,%xmm5
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,84,226                           // andps         %xmm2,%xmm4
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,93,244                           // minps         %xmm4,%xmm6
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,95,252                           // maxps         %xmm4,%xmm7
  .byte  15,94,247                           // divps         %xmm7,%xmm6
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,89,255                           // mulps         %xmm7,%xmm7
  .byte  15,40,128,164,27,0,0                // movaps        0x1ba4(%eax),%xmm0
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,88,128,180,27,0,0                // addps         0x1bb4(%eax),%xmm0
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,88,128,196,27,0,0                // addps         0x1bc4(%eax),%xmm0
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,88,128,212,27,0,0                // addps         0x1bd4(%eax),%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,40,117,40                        // movaps        0x28(%ebp),%xmm6
  .byte  15,194,236,1                        // cmpltps       %xmm4,%xmm5
  .byte  15,40,184,228,27,0,0                // movaps        0x1be4(%eax),%xmm7
  .byte  15,92,248                           // subps         %xmm0,%xmm7
  .byte  15,84,253                           // andps         %xmm5,%xmm7
  .byte  15,85,232                           // andnps        %xmm0,%xmm5
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,86,239                           // orps          %xmm7,%xmm5
  .byte  15,194,204,1                        // cmpltps       %xmm4,%xmm1
  .byte  15,40,128,244,27,0,0                // movaps        0x1bf4(%eax),%xmm0
  .byte  15,92,197                           // subps         %xmm5,%xmm0
  .byte  15,84,193                           // andps         %xmm1,%xmm0
  .byte  15,85,205                           // andnps        %xmm5,%xmm1
  .byte  15,86,200                           // orps          %xmm0,%xmm1
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,194,196,1                        // cmpltps       %xmm4,%xmm0
  .byte  15,40,168,4,28,0,0                  // movaps        0x1c04(%eax),%xmm5
  .byte  15,92,233                           // subps         %xmm1,%xmm5
  .byte  15,84,232                           // andps         %xmm0,%xmm5
  .byte  15,85,193                           // andnps        %xmm1,%xmm0
  .byte  15,40,77,56                         // movaps        0x38(%ebp),%xmm1
  .byte  15,86,197                           // orps          %xmm5,%xmm0
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,194,224,7                        // cmpordps      %xmm0,%xmm4
  .byte  15,84,224                           // andps         %xmm0,%xmm4
  .byte  15,40,69,88                         // movaps        0x58(%ebp),%xmm0
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  141,88,4                            // lea           0x4(%eax),%ebx
  .byte  15,41,68,36,80                      // movaps        %xmm0,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,76,36,48                      // movaps        %xmm1,0x30(%esp)
  .byte  15,41,116,36,32                     // movaps        %xmm6,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  255,16                              // call          *(%eax)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_xy_to_radius_sse2
.globl _sk_xy_to_radius_sse2
FUNCTION(_sk_xy_to_radius_sse2)
_sk_xy_to_radius_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,24                          // mov           0x18(%ebp),%esi
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  15,89,255                           // mulps         %xmm7,%xmm7
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  139,125,12                          // mov           0xc(%ebp),%edi
  .byte  15,81,199                           // sqrtps        %xmm7,%xmm0
  .byte  141,95,4                            // lea           0x4(%edi),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,116,36,16                       // mov           %esi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_save_xy_sse2
.globl _sk_save_xy_sse2
FUNCTION(_sk_save_xy_sse2)
_sk_save_xy_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,124                         // sub           $0x7c,%esp
  .byte  15,41,93,216                        // movaps        %xmm3,-0x28(%ebp)
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  232,0,0,0,0                         // call          7f9e <_sk_save_xy_sse2+0x15>
  .byte  88                                  // pop           %eax
  .byte  15,40,160,146,26,0,0                // movaps        0x1a92(%eax),%xmm4
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  15,88,236                           // addps         %xmm4,%xmm5
  .byte  243,15,91,245                       // cvttps2dq     %xmm5,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,194,254,1                        // cmpltps       %xmm6,%xmm7
  .byte  15,40,144,162,26,0,0                // movaps        0x1aa2(%eax),%xmm2
  .byte  15,84,250                           // andps         %xmm2,%xmm7
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,92,238                           // subps         %xmm6,%xmm5
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  243,15,91,244                       // cvttps2dq     %xmm4,%xmm6
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,194,254,1                        // cmpltps       %xmm6,%xmm7
  .byte  15,84,250                           // andps         %xmm2,%xmm7
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,20                           // mov           0x14(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,92,247                           // subps         %xmm7,%xmm6
  .byte  15,92,230                           // subps         %xmm6,%xmm4
  .byte  15,17,7                             // movups        %xmm0,(%edi)
  .byte  15,17,79,32                         // movups        %xmm1,0x20(%edi)
  .byte  15,17,111,64                        // movups        %xmm5,0x40(%edi)
  .byte  15,17,103,96                        // movups        %xmm4,0x60(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,85,40                         // movaps        0x28(%ebp),%xmm2
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,40,109,72                        // movaps        0x48(%ebp),%xmm5
  .byte  15,40,117,88                        // movaps        0x58(%ebp),%xmm6
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,116,36,80                     // movaps        %xmm6,0x50(%esp)
  .byte  15,41,108,36,64                     // movaps        %xmm5,0x40(%esp)
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,41,84,36,32                      // movaps        %xmm2,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,84,36,12                        // mov           %edx,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,40,93,216                        // movaps        -0x28(%ebp),%xmm3
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,124                         // add           $0x7c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_accumulate_sse2
.globl _sk_accumulate_sse2
FUNCTION(_sk_accumulate_sse2)
_sk_accumulate_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  139,69,12                           // mov           0xc(%ebp),%eax
  .byte  139,56                              // mov           (%eax),%edi
  .byte  15,16,167,128,0,0,0                 // movups        0x80(%edi),%xmm4
  .byte  15,16,175,160,0,0,0                 // movups        0xa0(%edi),%xmm5
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  15,88,101,40                        // addps         0x28(%ebp),%xmm4
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,89,241                           // mulps         %xmm1,%xmm6
  .byte  15,88,117,56                        // addps         0x38(%ebp),%xmm6
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  15,88,125,72                        // addps         0x48(%ebp),%xmm7
  .byte  15,89,235                           // mulps         %xmm3,%xmm5
  .byte  15,88,109,88                        // addps         0x58(%ebp),%xmm5
  .byte  141,88,8                            // lea           0x8(%eax),%ebx
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  15,41,108,36,80                     // movaps        %xmm5,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  255,80,4                            // call          *0x4(%eax)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bilinear_nx_sse2
.globl _sk_bilinear_nx_sse2
FUNCTION(_sk_bilinear_nx_sse2)
_sk_bilinear_nx_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          80e3 <_sk_bilinear_nx_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,16,7                             // movups        (%edi),%xmm0
  .byte  15,88,128,109,25,0,0                // addps         0x196d(%eax),%xmm0
  .byte  15,40,160,125,25,0,0                // movaps        0x197d(%eax),%xmm4
  .byte  139,69,20                           // mov           0x14(%ebp),%eax
  .byte  15,16,111,64                        // movups        0x40(%edi),%xmm5
  .byte  15,92,229                           // subps         %xmm5,%xmm4
  .byte  15,17,167,128,0,0,0                 // movups        %xmm4,0x80(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,68,36,12                        // mov           %eax,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bilinear_px_sse2
.globl _sk_bilinear_px_sse2
FUNCTION(_sk_bilinear_px_sse2)
_sk_bilinear_px_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          8167 <_sk_bilinear_px_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,16,7                             // movups        (%edi),%xmm0
  .byte  15,88,128,9,25,0,0                  // addps         0x1909(%eax),%xmm0
  .byte  139,69,20                           // mov           0x14(%ebp),%eax
  .byte  15,16,103,64                        // movups        0x40(%edi),%xmm4
  .byte  15,17,167,128,0,0,0                 // movups        %xmm4,0x80(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,68,36,12                        // mov           %eax,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bilinear_ny_sse2
.globl _sk_bilinear_ny_sse2
FUNCTION(_sk_bilinear_ny_sse2)
_sk_bilinear_ny_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          81e1 <_sk_bilinear_ny_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,16,79,32                         // movups        0x20(%edi),%xmm1
  .byte  15,88,136,159,24,0,0                // addps         0x189f(%eax),%xmm1
  .byte  15,40,160,175,24,0,0                // movaps        0x18af(%eax),%xmm4
  .byte  139,69,20                           // mov           0x14(%ebp),%eax
  .byte  15,16,111,96                        // movups        0x60(%edi),%xmm5
  .byte  15,92,229                           // subps         %xmm5,%xmm4
  .byte  15,17,167,160,0,0,0                 // movups        %xmm4,0xa0(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,68,36,12                        // mov           %eax,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bilinear_py_sse2
.globl _sk_bilinear_py_sse2
FUNCTION(_sk_bilinear_py_sse2)
_sk_bilinear_py_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          8266 <_sk_bilinear_py_sse2+0xe>
  .byte  88                                  // pop           %eax
  .byte  139,77,8                            // mov           0x8(%ebp),%ecx
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,16,79,32                         // movups        0x20(%edi),%xmm1
  .byte  15,88,136,58,24,0,0                 // addps         0x183a(%eax),%xmm1
  .byte  139,69,20                           // mov           0x14(%ebp),%eax
  .byte  15,16,103,96                        // movups        0x60(%edi),%xmm4
  .byte  15,17,167,160,0,0,0                 // movups        %xmm4,0xa0(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,68,36,12                        // mov           %eax,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,12,36                           // mov           %ecx,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bicubic_n3x_sse2
.globl _sk_bicubic_n3x_sse2
FUNCTION(_sk_bicubic_n3x_sse2)
_sk_bicubic_n3x_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          82e1 <_sk_bicubic_n3x_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  15,16,7                             // movups        (%edi),%xmm0
  .byte  15,16,103,64                        // movups        0x40(%edi),%xmm4
  .byte  15,88,134,207,23,0,0                // addps         0x17cf(%esi),%xmm0
  .byte  15,40,174,223,23,0,0                // movaps        0x17df(%esi),%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,89,174,239,23,0,0                // mulps         0x17ef(%esi),%xmm5
  .byte  15,88,174,255,23,0,0                // addps         0x17ff(%esi),%xmm5
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,17,175,128,0,0,0                 // movups        %xmm5,0x80(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bicubic_n1x_sse2
.globl _sk_bicubic_n1x_sse2
FUNCTION(_sk_bicubic_n1x_sse2)
_sk_bicubic_n1x_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          837c <_sk_bicubic_n1x_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  15,16,7                             // movups        (%edi),%xmm0
  .byte  15,16,103,64                        // movups        0x40(%edi),%xmm4
  .byte  15,88,134,116,23,0,0                // addps         0x1774(%esi),%xmm0
  .byte  15,40,174,132,23,0,0                // movaps        0x1784(%esi),%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  15,40,166,148,23,0,0                // movaps        0x1794(%esi),%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,88,166,164,23,0,0                // addps         0x17a4(%esi),%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,88,166,180,23,0,0                // addps         0x17b4(%esi),%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,88,166,196,23,0,0                // addps         0x17c4(%esi),%xmm4
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,17,167,128,0,0,0                 // movups        %xmm4,0x80(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bicubic_p1x_sse2
.globl _sk_bicubic_p1x_sse2
FUNCTION(_sk_bicubic_p1x_sse2)
_sk_bicubic_p1x_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          8425 <_sk_bicubic_p1x_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  15,40,166,43,23,0,0                 // movaps        0x172b(%esi),%xmm4
  .byte  15,16,71,64                         // movups        0x40(%edi),%xmm0
  .byte  15,40,174,59,23,0,0                 // movaps        0x173b(%esi),%xmm5
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,88,174,75,23,0,0                 // addps         0x174b(%esi),%xmm5
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,88,236                           // addps         %xmm4,%xmm5
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,88,174,91,23,0,0                 // addps         0x175b(%esi),%xmm5
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,16,7                             // movups        (%edi),%xmm0
  .byte  15,17,175,128,0,0,0                 // movups        %xmm5,0x80(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bicubic_p3x_sse2
.globl _sk_bicubic_p3x_sse2
FUNCTION(_sk_bicubic_p3x_sse2)
_sk_bicubic_p3x_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          84c3 <_sk_bicubic_p3x_sse2+0xe>
  .byte  89                                  // pop           %ecx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,16,7                             // movups        (%edi),%xmm0
  .byte  15,16,103,64                        // movups        0x40(%edi),%xmm4
  .byte  15,88,129,205,22,0,0                // addps         0x16cd(%ecx),%xmm0
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,89,161,221,22,0,0                // mulps         0x16dd(%ecx),%xmm4
  .byte  15,88,161,237,22,0,0                // addps         0x16ed(%ecx),%xmm4
  .byte  139,77,20                           // mov           0x14(%ebp),%ecx
  .byte  15,89,237                           // mulps         %xmm5,%xmm5
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,17,167,128,0,0,0                 // movups        %xmm4,0x80(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,76,36,12                        // mov           %ecx,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bicubic_n3y_sse2
.globl _sk_bicubic_n3y_sse2
FUNCTION(_sk_bicubic_n3y_sse2)
_sk_bicubic_n3y_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          8554 <_sk_bicubic_n3y_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  15,16,79,32                         // movups        0x20(%edi),%xmm1
  .byte  15,16,103,96                        // movups        0x60(%edi),%xmm4
  .byte  15,88,142,108,22,0,0                // addps         0x166c(%esi),%xmm1
  .byte  15,40,174,124,22,0,0                // movaps        0x167c(%esi),%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,89,174,140,22,0,0                // mulps         0x168c(%esi),%xmm5
  .byte  15,88,174,156,22,0,0                // addps         0x169c(%esi),%xmm5
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,17,175,160,0,0,0                 // movups        %xmm5,0xa0(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bicubic_n1y_sse2
.globl _sk_bicubic_n1y_sse2
FUNCTION(_sk_bicubic_n1y_sse2)
_sk_bicubic_n1y_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          85f0 <_sk_bicubic_n1y_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  15,16,79,32                         // movups        0x20(%edi),%xmm1
  .byte  15,16,103,96                        // movups        0x60(%edi),%xmm4
  .byte  15,88,142,16,22,0,0                 // addps         0x1610(%esi),%xmm1
  .byte  15,40,174,32,22,0,0                 // movaps        0x1620(%esi),%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  15,40,166,48,22,0,0                 // movaps        0x1630(%esi),%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,88,166,64,22,0,0                 // addps         0x1640(%esi),%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,88,166,80,22,0,0                 // addps         0x1650(%esi),%xmm4
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,88,166,96,22,0,0                 // addps         0x1660(%esi),%xmm4
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,17,167,160,0,0,0                 // movups        %xmm4,0xa0(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bicubic_p1y_sse2
.globl _sk_bicubic_p1y_sse2
FUNCTION(_sk_bicubic_p1y_sse2)
_sk_bicubic_p1y_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          869a <_sk_bicubic_p1y_sse2+0xe>
  .byte  94                                  // pop           %esi
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  139,85,12                           // mov           0xc(%ebp),%edx
  .byte  139,58                              // mov           (%edx),%edi
  .byte  15,40,166,198,21,0,0                // movaps        0x15c6(%esi),%xmm4
  .byte  15,16,79,96                         // movups        0x60(%edi),%xmm1
  .byte  15,40,174,214,21,0,0                // movaps        0x15d6(%esi),%xmm5
  .byte  15,89,233                           // mulps         %xmm1,%xmm5
  .byte  15,88,174,230,21,0,0                // addps         0x15e6(%esi),%xmm5
  .byte  15,89,233                           // mulps         %xmm1,%xmm5
  .byte  15,88,236                           // addps         %xmm4,%xmm5
  .byte  15,89,233                           // mulps         %xmm1,%xmm5
  .byte  15,88,174,246,21,0,0                // addps         0x15f6(%esi),%xmm5
  .byte  139,117,20                          // mov           0x14(%ebp),%esi
  .byte  15,16,79,32                         // movups        0x20(%edi),%xmm1
  .byte  15,17,175,160,0,0,0                 // movups        %xmm5,0xa0(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,109,40                        // movaps        0x28(%ebp),%xmm5
  .byte  15,40,117,56                        // movaps        0x38(%ebp),%xmm6
  .byte  15,40,125,72                        // movaps        0x48(%ebp),%xmm7
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  141,90,8                            // lea           0x8(%edx),%ebx
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,41,124,36,64                     // movaps        %xmm7,0x40(%esp)
  .byte  15,41,116,36,48                     // movaps        %xmm6,0x30(%esp)
  .byte  15,41,108,36,32                     // movaps        %xmm5,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,116,36,12                       // mov           %esi,0xc(%esp)
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,82,4                            // call          *0x4(%edx)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_bicubic_p3y_sse2
.globl _sk_bicubic_p3y_sse2
FUNCTION(_sk_bicubic_p3y_sse2)
_sk_bicubic_p3y_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  232,0,0,0,0                         // call          8739 <_sk_bicubic_p3y_sse2+0xe>
  .byte  89                                  // pop           %ecx
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  139,85,16                           // mov           0x10(%ebp),%edx
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  15,16,79,32                         // movups        0x20(%edi),%xmm1
  .byte  15,16,103,96                        // movups        0x60(%edi),%xmm4
  .byte  15,88,137,103,21,0,0                // addps         0x1567(%ecx),%xmm1
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,89,161,119,21,0,0                // mulps         0x1577(%ecx),%xmm4
  .byte  15,88,161,135,21,0,0                // addps         0x1587(%ecx),%xmm4
  .byte  139,77,20                           // mov           0x14(%ebp),%ecx
  .byte  15,89,237                           // mulps         %xmm5,%xmm5
  .byte  15,89,229                           // mulps         %xmm5,%xmm4
  .byte  15,17,167,160,0,0,0                 // movups        %xmm4,0xa0(%edi)
  .byte  139,125,24                          // mov           0x18(%ebp),%edi
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,40,109,56                        // movaps        0x38(%ebp),%xmm5
  .byte  15,40,117,72                        // movaps        0x48(%ebp),%xmm6
  .byte  15,40,125,88                        // movaps        0x58(%ebp),%xmm7
  .byte  141,94,8                            // lea           0x8(%esi),%ebx
  .byte  15,41,124,36,80                     // movaps        %xmm7,0x50(%esp)
  .byte  15,41,116,36,64                     // movaps        %xmm6,0x40(%esp)
  .byte  15,41,108,36,48                     // movaps        %xmm5,0x30(%esp)
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,124,36,16                       // mov           %edi,0x10(%esp)
  .byte  137,76,36,12                        // mov           %ecx,0xc(%esp)
  .byte  137,84,36,8                         // mov           %edx,0x8(%esp)
  .byte  137,92,36,4                         // mov           %ebx,0x4(%esp)
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

HIDDEN _sk_callback_sse2
.globl _sk_callback_sse2
FUNCTION(_sk_callback_sse2)
_sk_callback_sse2:
  .byte  85                                  // push          %ebp
  .byte  137,229                             // mov           %esp,%ebp
  .byte  83                                  // push          %ebx
  .byte  87                                  // push          %edi
  .byte  86                                  // push          %esi
  .byte  131,236,108                         // sub           $0x6c,%esp
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,20,225                           // unpcklps      %xmm1,%xmm4
  .byte  15,21,193                           // unpckhps      %xmm1,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,21,211                           // unpckhps      %xmm3,%xmm2
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  102,15,20,217                       // unpcklpd      %xmm1,%xmm3
  .byte  15,18,204                           // movhlps       %xmm4,%xmm1
  .byte  139,117,12                          // mov           0xc(%ebp),%esi
  .byte  139,62                              // mov           (%esi),%edi
  .byte  102,15,17,95,4                      // movupd        %xmm3,0x4(%edi)
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  102,15,20,218                       // unpcklpd      %xmm2,%xmm3
  .byte  15,18,208                           // movhlps       %xmm0,%xmm2
  .byte  15,17,79,20                         // movups        %xmm1,0x14(%edi)
  .byte  102,15,17,95,36                     // movupd        %xmm3,0x24(%edi)
  .byte  15,17,87,52                         // movups        %xmm2,0x34(%edi)
  .byte  139,93,24                           // mov           0x18(%ebp),%ebx
  .byte  133,219                             // test          %ebx,%ebx
  .byte  184,4,0,0,0                         // mov           $0x4,%eax
  .byte  15,69,195                           // cmovne        %ebx,%eax
  .byte  137,68,36,4                         // mov           %eax,0x4(%esp)
  .byte  137,60,36                           // mov           %edi,(%esp)
  .byte  255,23                              // call          *(%edi)
  .byte  139,135,132,0,0,0                   // mov           0x84(%edi),%eax
  .byte  15,16,32                            // movups        (%eax),%xmm4
  .byte  15,16,64,16                         // movups        0x10(%eax),%xmm0
  .byte  15,16,88,32                         // movups        0x20(%eax),%xmm3
  .byte  15,16,80,48                         // movups        0x30(%eax),%xmm2
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,20,232                           // unpcklps      %xmm0,%xmm5
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  15,21,224                           // unpckhps      %xmm0,%xmm4
  .byte  15,21,218                           // unpckhps      %xmm2,%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,205                           // movhlps       %xmm5,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  15,18,220                           // movhlps       %xmm4,%xmm3
  .byte  141,70,8                            // lea           0x8(%esi),%eax
  .byte  15,40,101,88                        // movaps        0x58(%ebp),%xmm4
  .byte  15,41,100,36,80                     // movaps        %xmm4,0x50(%esp)
  .byte  15,40,101,72                        // movaps        0x48(%ebp),%xmm4
  .byte  15,41,100,36,64                     // movaps        %xmm4,0x40(%esp)
  .byte  15,40,101,56                        // movaps        0x38(%ebp),%xmm4
  .byte  15,41,100,36,48                     // movaps        %xmm4,0x30(%esp)
  .byte  15,40,101,40                        // movaps        0x28(%ebp),%xmm4
  .byte  15,41,100,36,32                     // movaps        %xmm4,0x20(%esp)
  .byte  137,92,36,16                        // mov           %ebx,0x10(%esp)
  .byte  139,77,20                           // mov           0x14(%ebp),%ecx
  .byte  137,76,36,12                        // mov           %ecx,0xc(%esp)
  .byte  139,77,16                           // mov           0x10(%ebp),%ecx
  .byte  137,76,36,8                         // mov           %ecx,0x8(%esp)
  .byte  137,68,36,4                         // mov           %eax,0x4(%esp)
  .byte  139,69,8                            // mov           0x8(%ebp),%eax
  .byte  137,4,36                            // mov           %eax,(%esp)
  .byte  255,86,4                            // call          *0x4(%esi)
  .byte  131,196,108                         // add           $0x6c,%esp
  .byte  94                                  // pop           %esi
  .byte  95                                  // pop           %edi
  .byte  91                                  // pop           %ebx
  .byte  93                                  // pop           %ebp
  .byte  195                                 // ret

BALIGN16
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,1                            // cmpb          $0x1,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,1                                 // add           %al,(%ecx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,1                                 // add           %al,(%ecx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,1                                 // add           %al,(%ecx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,4,0                               // add           %al,(%eax,%eax,1)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  2,0                                 // add           (%eax),%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  2,0                                 // add           (%eax),%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  2,0                                 // add           (%eax),%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  2,0                                 // add           (%eax),%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%eax,%eax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%eax,%eax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%eax,%eax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%eax,%eax,1)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%edi)
  .byte  0,224                               // add           %ah,%al
  .byte  64                                  // inc           %eax
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,64                              // loopne        8a88 <.literal16+0x1d8>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,64                              // loopne        8a8c <.literal16+0x1dc>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,64                              // loopne        8a90 <.literal16+0x1e0>
  .byte  154,153,153,62,154,153,153          // lcall         $0x9999,$0x9a3e9999
  .byte  62,154,153,153,62,154,153,153       // ds            lcall $0x9999,$0x9a3e9999
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%edi),%dl
  .byte  63                                  // aas
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%edi),%dl
  .byte  63                                  // aas
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8ab1 <.literal16+0x201>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8ab5 <.literal16+0x205>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8ab9 <.literal16+0x209>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8abd <.literal16+0x20d>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,154                          // cmpb          $0x9a,(%edi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154,153,153,62,154,153,153       // ds            lcall $0x9999,$0x9a3e9999
  .byte  62,154,153,153,62,61,10,23          // ds            lcall $0x170a,$0x3d3e9999
  .byte  63                                  // aas
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%edi),%dl
  .byte  63                                  // aas
  .byte  61,10,23,63,174                     // cmp           $0xae3f170a,%eax
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8af1 <.literal16+0x241>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8af5 <.literal16+0x245>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8af9 <.literal16+0x249>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8afd <.literal16+0x24d>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,154                          // cmpb          $0x9a,(%edi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154,153,153,62,154,153,153       // ds            lcall $0x9999,$0x9a3e9999
  .byte  62,154,153,153,62,61,10,23          // ds            lcall $0x170a,$0x3d3e9999
  .byte  63                                  // aas
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%edi),%dl
  .byte  63                                  // aas
  .byte  61,10,23,63,174                     // cmp           $0xae3f170a,%eax
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8b31 <.literal16+0x281>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8b35 <.literal16+0x285>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8b39 <.literal16+0x289>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8b3d <.literal16+0x28d>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,154                          // cmpb          $0x9a,(%edi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154,153,153,62,154,153,153       // ds            lcall $0x9999,$0x9a3e9999
  .byte  62,154,153,153,62,61,10,23          // ds            lcall $0x170a,$0x3d3e9999
  .byte  63                                  // aas
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%edi),%dl
  .byte  63                                  // aas
  .byte  61,10,23,63,174                     // cmp           $0xae3f170a,%eax
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8b71 <.literal16+0x2c1>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8b75 <.literal16+0x2c5>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8b79 <.literal16+0x2c9>
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  225,61                              // loope         8b7d <.literal16+0x2cd>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,255                          // cmpb          $0xff,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%eax)
  .byte  67                                  // inc           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            8bbb <.literal16+0x30b>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            8bbf <.literal16+0x30f>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            8bc3 <.literal16+0x313>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,145                          // cmpb          $0x91,(%edi)
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%esi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%esi)
  .byte  154,153,153,62,154,153,153          // lcall         $0x9999,$0x9a3e9999
  .byte  62,154,153,153,62,154,153,153       // ds            lcall $0x9999,$0x9a3e9999
  .byte  62,92                               // ds            pop %esp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%edi),%bh
  .byte  92                                  // pop           %esp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%edi),%bh
  .byte  92                                  // pop           %esp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%edi),%bh
  .byte  92                                  // pop           %esp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%edi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%ebx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%ebx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%ebx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%ebx),%edi
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  97                                  // popa
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  97                                  // popa
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%esi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%esi)
  .byte  154,153,153,62,154,153,153          // lcall         $0x9999,$0x9a3e9999
  .byte  62,154,153,153,62,154,153,153       // ds            lcall $0x9999,$0x9a3e9999
  .byte  62,92                               // ds            pop %esp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%edi),%bh
  .byte  92                                  // pop           %esp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%edi),%bh
  .byte  92                                  // pop           %esp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%edi),%bh
  .byte  92                                  // pop           %esp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%edi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%ebx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%ebx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%ebx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%ebx),%edi
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  97                                  // popa
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%edi),%al
  .byte  71                                  // inc           %edi
  .byte  97                                  // popa
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  82                                  // push          %edx
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // dec           %esi
  .byte  65                                  // inc           %ecx
  .byte  82                                  // push          %edx
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // dec           %esi
  .byte  65                                  // inc           %ecx
  .byte  57,215                              // cmp           %edx,%edi
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%ebx)
  .byte  57,215                              // cmp           %edx,%edi
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%ebx)
  .byte  186,159,98,60,186                   // mov           $0xba3c629f,%edx
  .byte  159                                 // lahf
  .byte  98,60,186                           // bound         %edi,(%edx,%edi,4)
  .byte  159                                 // lahf
  .byte  98,60,186                           // bound         %edi,(%edx,%edi,4)
  .byte  159                                 // lahf
  .byte  98,60,109,165,144,63,109            // bound         %edi,0x6d3f90a5(,%ebp,2)
  .byte  165                                 // movsl         %ds:(%esi),%es:(%edi)
  .byte  144                                 // nop
  .byte  63                                  // aas
  .byte  109                                 // insl          (%dx),%es:(%edi)
  .byte  165                                 // movsl         %ds:(%esi),%es:(%edi)
  .byte  144                                 // nop
  .byte  63                                  // aas
  .byte  109                                 // insl          (%dx),%es:(%edi)
  .byte  165                                 // movsl         %ds:(%esi),%es:(%edi)
  .byte  144                                 // nop
  .byte  63                                  // aas
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%esi)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%esi)
  .byte  168,177                             // test          $0xb1,%al
  .byte  152                                 // cwtl
  .byte  59,168,177,152,59,168               // cmp           -0x57c4674f(%eax),%ebp
  .byte  177,152                             // mov           $0x98,%cl
  .byte  59,168,177,152,59,0                 // cmp           0x3b98b1(%eax),%ebp
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%eax)
  .byte  64                                  // inc           %eax
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%eax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%eax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%eax)
  .byte  0,64,0                              // add           %al,0x0(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  64                                  // inc           %eax
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,64,0                              // add           %al,0x0(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  64                                  // inc           %eax
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%eax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%eax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%eax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%eax)
  .byte  42,62                               // sub           (%esi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,62                               // sub           (%esi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,62                               // sub           (%esi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,62                               // sub           (%esi),%bh
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  62,171                              // ds            stos %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  62,171                              // ds            stos %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  62,171                              // ds            stos %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  62,0,0                              // add           %al,%ds:(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,171                          // cmpb          $0xab,(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,63                               // sub           (%edi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,63                               // sub           (%edi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,63                               // sub           (%edi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,63                               // sub           (%edi),%bh
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%eax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%eax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%eax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%eax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%eax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%eax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%eax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%eax)
  .byte  42,62                               // sub           (%esi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,62                               // sub           (%esi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,62                               // sub           (%esi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  42,62                               // sub           (%esi),%bh
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  224,7                               // loopne        8e09 <.literal16+0x559>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        8e0d <.literal16+0x55d>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        8e11 <.literal16+0x561>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        8e15 <.literal16+0x565>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  31                                  // pop           %ds
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,8                                 // add           %cl,(%eax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%edi,1)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,128,0,128,55             // addb          $0x37,-0x7fff7fc5(%eax)
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  55                                  // aaa
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  55                                  // aaa
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  55                                  // aaa
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,127,67                            // add           %bh,0x43(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            8ecb <.literal16+0x61b>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            8ecf <.literal16+0x61f>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            8ed3 <.literal16+0x623>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,0                            // cmpb          $0x0,(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            8ec4 <.literal16+0x614>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            8ec8 <.literal16+0x618>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            8ecc <.literal16+0x61c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            8ed0 <.literal16+0x620>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  119,115                             // ja            8f55 <.literal16+0x6a5>
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // ret           $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // aas
  .byte  117,191                             // jne           8eb9 <.literal16+0x609>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // aas
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  163,233,220,63,163                  // mov           %eax,0xa33fdce9
  .byte  233,220,63,163,233                  // jmp           e9a3cef6 <_sk_callback_sse2+0xe9a34739>
  .byte  220,63                              // fdivrl        (%edi)
  .byte  163,233,220,63,0                    // mov           %eax,0x3fdce9
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,81,140,242                 // add           %al,-0xd73aec1(%eax)
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%esi,%edi,4),%edi
  .byte  63                                  // aas
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%esi,%edi,4),%edi
  .byte  63                                  // aas
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154,64,248,245,154,64,248           // lcall         $0xf840,$0x9af5f840
  .byte  245                                 // cmc
  .byte  154,64,248,245,154,64,254           // lcall         $0xfe40,$0x9af5f840
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,52,0                              // add           %dh,(%eax,%eax,1)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            8f94 <.literal16+0x6e4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            8f98 <.literal16+0x6e8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            8f9c <.literal16+0x6ec>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            8fa0 <.literal16+0x6f0>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  119,115                             // ja            9025 <.literal16+0x775>
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // ret           $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // aas
  .byte  117,191                             // jne           8f89 <.literal16+0x6d9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // aas
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  163,233,220,63,163                  // mov           %eax,0xa33fdce9
  .byte  233,220,63,163,233                  // jmp           e9a3cfc6 <_sk_callback_sse2+0xe9a34809>
  .byte  220,63                              // fdivrl        (%edi)
  .byte  163,233,220,63,0                    // mov           %eax,0x3fdce9
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,81,140,242                 // add           %al,-0xd73aec1(%eax)
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%esi,%edi,4),%edi
  .byte  63                                  // aas
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%esi,%edi,4),%edi
  .byte  63                                  // aas
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154,64,248,245,154,64,248           // lcall         $0xf840,$0x9af5f840
  .byte  245                                 // cmc
  .byte  154,64,248,245,154,64,254           // lcall         $0xfe40,$0x9af5f840
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,52,0                              // add           %dh,(%eax,%eax,1)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            9064 <.literal16+0x7b4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            9068 <.literal16+0x7b8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            906c <.literal16+0x7bc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            9070 <.literal16+0x7c0>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  119,115                             // ja            90f5 <.literal16+0x845>
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // ret           $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // aas
  .byte  117,191                             // jne           9059 <.literal16+0x7a9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // aas
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  163,233,220,63,163                  // mov           %eax,0xa33fdce9
  .byte  233,220,63,163,233                  // jmp           e9a3d096 <_sk_callback_sse2+0xe9a348d9>
  .byte  220,63                              // fdivrl        (%edi)
  .byte  163,233,220,63,0                    // mov           %eax,0x3fdce9
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,81,140,242                 // add           %al,-0xd73aec1(%eax)
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%esi,%edi,4),%edi
  .byte  63                                  // aas
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%esi,%edi,4),%edi
  .byte  63                                  // aas
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154,64,248,245,154,64,248           // lcall         $0xf840,$0x9af5f840
  .byte  245                                 // cmc
  .byte  154,64,248,245,154,64,254           // lcall         $0xfe40,$0x9af5f840
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,52,0                              // add           %dh,(%eax,%eax,1)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            9134 <.literal16+0x884>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            9138 <.literal16+0x888>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            913c <.literal16+0x88c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            9140 <.literal16+0x890>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  119,115                             // ja            91c5 <.literal16+0x915>
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // ret           $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // ret           $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // aas
  .byte  117,191                             // jne           9129 <.literal16+0x879>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // aas
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  249                                 // stc
  .byte  68                                  // inc           %esp
  .byte  180,62                              // mov           $0x3e,%ah
  .byte  163,233,220,63,163                  // mov           %eax,0xa33fdce9
  .byte  233,220,63,163,233                  // jmp           e9a3d166 <_sk_callback_sse2+0xe9a349a9>
  .byte  220,63                              // fdivrl        (%edi)
  .byte  163,233,220,63,0                    // mov           %eax,0x3fdce9
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,81,140,242                 // add           %al,-0xd73aec1(%eax)
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  81                                  // push          %ecx
  .byte  140,242                             // mov           %?,%edx
  .byte  66                                  // inc           %edx
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%esi,%edi,4),%edi
  .byte  63                                  // aas
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%esi,%edi,4),%edi
  .byte  63                                  // aas
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154,64,248,245,154,64,248           // lcall         $0xf840,$0x9af5f840
  .byte  245                                 // cmc
  .byte  154,64,248,245,154,64,254           // lcall         $0xfe40,$0x9af5f840
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  254                                 // (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65                                  // inc           %ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  200,66,0,0                          // enter         $0x42,$0x0
  .byte  200,66,0,0                          // enter         $0x42,$0x0
  .byte  200,66,0,0                          // enter         $0x42,$0x0
  .byte  200,66,0,0                          // enter         $0x42,$0x0
  .byte  127,67                              // jg            9247 <.literal16+0x997>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            924b <.literal16+0x99b>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            924f <.literal16+0x99f>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            9253 <.literal16+0x9a3>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%ecx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%ecx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%ecx)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%ecx)
  .byte  13,60,203,61,13                     // or            $0xd3dcb3c,%eax
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,60,203,61                     // cmp           $0x3dcb3c0d,%eax
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,111,18                           // cmp           0x12(%edi),%ebp
  .byte  3,59                                // add           (%ebx),%edi
  .byte  111                                 // outsl         %ds:(%esi),(%dx)
  .byte  18,3                                // adc           (%ebx),%al
  .byte  59,111,18                           // cmp           0x12(%edi),%ebp
  .byte  3,59                                // add           (%ebx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  163,59,10,215,163                   // mov           %eax,0xa3d70a3b
  .byte  59,10                               // cmp           (%edx),%ecx
  .byte  215                                 // xlat          %ds:(%ebx)
  .byte  163,59,10,215,163                   // mov           %eax,0xa3d70a3b
  .byte  59,194                              // cmp           %edx,%eax
  .byte  24,17                               // sbb           %dl,(%ecx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%ecx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%ecx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%ecx)
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,190,203,61                    // cmp           $0x3dcbbe0d,%eax
  .byte  13,190,203,61,13                    // or            $0xd3dcbbe,%eax
  .byte  190,203,61,13,190                   // mov           $0xbe0d3dcb,%esi
  .byte  80                                  // push          %eax
  .byte  128,3,62                            // addb          $0x3e,(%ebx)
  .byte  80                                  // push          %eax
  .byte  128,3,62                            // addb          $0x3e,(%ebx)
  .byte  80                                  // push          %eax
  .byte  128,3,62                            // addb          $0x3e,(%ebx)
  .byte  80                                  // push          %eax
  .byte  128,3,62                            // addb          $0x3e,(%ebx)
  .byte  31                                  // pop           %ds
  .byte  215                                 // xlat          %ds:(%ebx)
  .byte  118,63                              // jbe           92d3 <.literal16+0xa23>
  .byte  31                                  // pop           %ds
  .byte  215                                 // xlat          %ds:(%ebx)
  .byte  118,63                              // jbe           92d7 <.literal16+0xa27>
  .byte  31                                  // pop           %ds
  .byte  215                                 // xlat          %ds:(%ebx)
  .byte  118,63                              // jbe           92db <.literal16+0xa2b>
  .byte  31                                  // pop           %ds
  .byte  215                                 // xlat          %ds:(%ebx)
  .byte  118,63                              // jbe           92df <.literal16+0xa2f>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%eax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%eax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%eax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,0                            // cmpb          $0x0,(%ebx)
  .byte  0,127,67                            // add           %bh,0x43(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            934b <.literal16+0xa9b>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            934f <.literal16+0xa9f>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            9353 <.literal16+0xaa3>
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  224,7                               // loopne        93e9 <.literal16+0xb39>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        93ed <.literal16+0xb3d>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        93f1 <.literal16+0xb41>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        93f5 <.literal16+0xb45>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  31                                  // pop           %ds
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,8                                 // add           %cl,(%eax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%edi,1)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  224,7                               // loopne        9459 <.literal16+0xba9>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        945d <.literal16+0xbad>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        9461 <.literal16+0xbb1>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        9465 <.literal16+0xbb5>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  31                                  // pop           %ds
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,8                                 // add           %cl,(%eax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%edi,1)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  132,55                              // test          %dh,(%edi)
  .byte  224,7                               // loopne        94c9 <.literal16+0xc19>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        94cd <.literal16+0xc1d>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        94d1 <.literal16+0xc21>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  224,7                               // loopne        94d5 <.literal16+0xc25>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  33,8                                // and           %ecx,(%eax)
  .byte  2,58                                // add           (%edx),%bh
  .byte  31                                  // pop           %ds
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,31                                // add           %bl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,8                                 // add           %cl,(%eax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%edi,1)
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%ecx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,248                               // add           %bh,%al
  .byte  65                                  // inc           %ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  248                                 // clc
  .byte  65                                  // inc           %ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  248                                 // clc
  .byte  65                                  // inc           %ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  248                                 // clc
  .byte  65                                  // inc           %ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  124,66                              // jl            9566 <.literal16+0xcb6>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  124,66                              // jl            956a <.literal16+0xcba>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  124,66                              // jl            956e <.literal16+0xcbe>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  124,66                              // jl            9572 <.literal16+0xcc2>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%eax)
  .byte  136,55                              // mov           %dh,(%edi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%eax)
  .byte  136,55                              // mov           %dh,(%edi)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%eax)
  .byte  136,57                              // mov           %bh,(%ecx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%eax)
  .byte  136,57                              // mov           %bh,(%ecx)
  .byte  240,0,0                             // lock          add %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%ecx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%eax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%ecx),%ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%ecx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%eax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%eax)
  .byte  136,55                              // mov           %dh,(%edi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%eax)
  .byte  136,55                              // mov           %dh,(%edi)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%eax)
  .byte  136,57                              // mov           %bh,(%ecx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%eax)
  .byte  136,57                              // mov           %bh,(%ecx)
  .byte  240,0,0                             // lock          add %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%ecx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%eax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%ecx),%ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%ecx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%eax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%eax)
  .byte  136,55                              // mov           %dh,(%edi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%eax)
  .byte  136,55                              // mov           %dh,(%edi)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%eax)
  .byte  136,57                              // mov           %bh,(%ecx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%eax)
  .byte  136,57                              // mov           %bh,(%ecx)
  .byte  240,0,0                             // lock          add %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%ecx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%eax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%ecx),%ecx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,15                                // add           %cl,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%ecx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%eax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,0                                 // add           %al,(%eax)
  .byte  112,65                              // jo            96f5 <.literal16+0xe45>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  112,65                              // jo            96f9 <.literal16+0xe49>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  112,65                              // jo            96fd <.literal16+0xe4d>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  112,65                              // jo            9701 <.literal16+0xe51>
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%eax)
  .byte  128,59,129                          // cmpb          $0x81,(%ebx)
  .byte  128,128,59,0,0,127,67               // addb          $0x43,0x7f00003b(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            976b <.literal16+0xebb>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            976f <.literal16+0xebf>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  127,67                              // jg            9773 <.literal16+0xec3>
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,4,0                               // add           %al,(%eax,%eax,1)
  .byte  128,0,4                             // addb          $0x4,(%eax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%eax)
  .byte  0,4,0                               // add           %al,(%eax,%eax,1)
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,4,0                               // add           %al,(%eax,%eax,1)
  .byte  128,0,4                             // addb          $0x4,(%eax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%eax)
  .byte  0,4,0                               // add           %al,(%eax,%eax,1)
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,56                                // add           %bh,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,4,0                               // add           %al,(%eax,%eax,1)
  .byte  128,0,4                             // addb          $0x4,(%eax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%eax)
  .byte  0,4,0                               // add           %al,(%eax,%eax,1)
  .byte  128,0,0                             // addb          $0x0,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,56,0                            // cmpb          $0x0,(%eax)
  .byte  0,128,56,0,0,128                    // add           %al,-0x7fffffc8(%eax)
  .byte  56,0                                // cmp           %al,(%eax)
  .byte  0,128,56,0,64,254                   // add           %al,-0x1bfffc8(%eax)
  .byte  255,0                               // incl          (%eax)
  .byte  64                                  // inc           %eax
  .byte  254                                 // (bad)
  .byte  255,0                               // incl          (%eax)
  .byte  64                                  // inc           %eax
  .byte  254                                 // (bad)
  .byte  255,0                               // incl          (%eax)
  .byte  64                                  // inc           %eax
  .byte  254                                 // (bad)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%eax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%eax)
  .byte  55                                  // aaa
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  55                                  // aaa
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  55                                  // aaa
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  55                                  // aaa
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  55                                  // aaa
  .byte  128,0,128                           // addb          $0x80,(%eax)
  .byte  55                                  // aaa
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            989b <.literal16+0xfeb>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            989f <.literal16+0xfef>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            98a3 <.literal16+0xff3>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            98a7 <.literal16+0xff7>
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%edi)
  .byte  0,128,191,0,0,128                   // add           %al,-0x7fffff41(%eax)
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,208                          // cmpb          $0xd0,(%edi)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %ecx
  .byte  23                                  // pop           %ss
  .byte  55                                  // aaa
  .byte  63                                  // aas
  .byte  89                                  // pop           %ecx
  .byte  23                                  // pop           %ss
  .byte  55                                  // aaa
  .byte  63                                  // aas
  .byte  89                                  // pop           %ecx
  .byte  23                                  // pop           %ss
  .byte  55                                  // aaa
  .byte  63                                  // aas
  .byte  89                                  // pop           %ecx
  .byte  23                                  // pop           %ss
  .byte  55                                  // aaa
  .byte  63                                  // aas
  .byte  152                                 // cwtl
  .byte  221,147,61,152,221,147              // fstl          -0x6c2267c3(%ebx)
  .byte  61,152,221,147,61                   // cmp           $0x3d93dd98,%eax
  .byte  152                                 // cwtl
  .byte  221,147,61,255,255,0                // fstl          0xffff3d(%ebx)
  .byte  0,255                               // add           %bh,%bh
  .byte  255,0                               // incl          (%eax)
  .byte  0,255                               // add           %bh,%bh
  .byte  255,0                               // incl          (%eax)
  .byte  0,255                               // add           %bh,%bh
  .byte  255,0                               // incl          (%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  75                                  // dec           %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,75,0                              // add           %cl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  83                                  // push          %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,83,0                              // add           %dl,0x0(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  83                                  // push          %ebx
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,83,128                            // add           %dl,-0x80(%ebx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  211,128,0,0,211,128                 // roll          %cl,-0x7f2d0000(%eax)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  211,128,0,0,211,45                  // roll          %cl,0x2dd30000(%eax)
  .byte  16,17                               // adc           %dl,(%ecx)
  .byte  192,45,16,17,192,45,16              // shrb          $0x10,0x2dc01110
  .byte  17,192                              // adc           %eax,%eax
  .byte  45,16,17,192,18                     // sub           $0x12c01110,%eax
  .byte  120,57                              // js            99ac <.literal16+0x10fc>
  .byte  64                                  // inc           %eax
  .byte  18,120,57                           // adc           0x39(%eax),%bh
  .byte  64                                  // inc           %eax
  .byte  18,120,57                           // adc           0x39(%eax),%bh
  .byte  64                                  // inc           %eax
  .byte  18,120,57                           // adc           0x39(%eax),%bh
  .byte  64                                  // inc           %eax
  .byte  32,148,90,62,32,148,90              // and           %dl,0x5a94203e(%edx,%ebx,2)
  .byte  62,32,148,90,62,32,148,90           // and           %dl,%ds:0x5a94203e(%edx,%ebx,2)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // push          %ds
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // push          %ds
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // push          %ds
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // push          %ds
  .byte  62,0,24                             // add           %bl,%ds:(%eax)
  .byte  161,57,0,24,161                     // mov           0xa1180039,%eax
  .byte  57,0                                // cmp           %eax,(%eax)
  .byte  24,161,57,0,24,161                  // sbb           %ah,-0x5ee7ffc7(%ecx)
  .byte  57,1                                // cmp           %eax,(%ecx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,1                                 // add           %al,(%ecx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,1                                 // add           %al,(%ecx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,1                                 // add           %al,(%ecx)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,111,43                            // add           %ch,0x2b(%edi)
  .byte  231,187                             // out           %eax,$0xbb
  .byte  111                                 // outsl         %ds:(%esi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  111                                 // outsl         %ds:(%esi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  159                                 // lahf
  .byte  215                                 // xlat          %ds:(%ebx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%ebx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%ebx)
  .byte  202,60,212                          // lret          $0xd43c
  .byte  100,84                              // fs            push %esp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  212,100                             // aam           $0x64
  .byte  84                                  // push          %esp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%esi),%bh
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%esi),%bh
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,62,0                            // cmpb          $0x0,(%esi)
  .byte  0,128,62,0,0,128                    // add           %al,-0x7fffffc2(%eax)
  .byte  62,0,0                              // add           %al,%ds:(%eax)
  .byte  128,62,0                            // cmpb          $0x0,(%esi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  191,0,0,0,191                       // mov           $0xbf000000,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,114                          // cmpb          $0x72,(%edi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         9af2 <.literal16+0x1242>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9af6 <.literal16+0x1246>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9afa <.literal16+0x124a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,85                           // cmpb          $0x55,(%edi)
  .byte  85                                  // push          %ebp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %ebp
  .byte  85                                  // push          %ebp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%esi)
  .byte  99,61,57,142,99,61                  // arpl          %di,0x3d638e39
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%esi)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  85                                  // push          %ebp
  .byte  85                                  // push          %ebp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %ebp
  .byte  85                                  // push          %ebp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%esi)
  .byte  99,61,57,142,99,61                  // arpl          %di,0x3d638e39
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%esi)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  114,28                              // jb            9bbe <.literal16+0x130e>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9bc2 <.literal16+0x1312>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9bc6 <.literal16+0x1316>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9bca <.literal16+0x131a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,114                          // cmpb          $0x72,(%edi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         9c02 <.literal16+0x1352>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9c06 <.literal16+0x1356>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9c0a <.literal16+0x135a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,0                            // cmpb          $0x0,(%edi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%eax)
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  128,63,85                           // cmpb          $0x55,(%edi)
  .byte  85                                  // push          %ebp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %ebp
  .byte  85                                  // push          %ebp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%esi)
  .byte  99,61,57,142,99,61                  // arpl          %di,0x3d638e39
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%esi)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  85                                  // push          %ebp
  .byte  85                                  // push          %ebp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %ebp
  .byte  85                                  // push          %ebp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%esi)
  .byte  99,61,57,142,99,61                  // arpl          %di,0x3d638e39
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%esi)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  0,0                                 // add           %al,(%eax)
  .byte  192,63,0                            // sarb          $0x0,(%edi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // aas
  .byte  114,28                              // jb            9cce <.literal16+0x141e>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9cd2 <_sk_callback_sse2+0x1515>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9cd6 <_sk_callback_sse2+0x1519>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         9cda <_sk_callback_sse2+0x151d>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  170                                 // stos          %al,%es:(%edi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi

BALIGN4
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
  .byte  0,0                                 // add           %al,(%eax)
  .byte  0,63                                // add           %bh,(%edi)
#endif
