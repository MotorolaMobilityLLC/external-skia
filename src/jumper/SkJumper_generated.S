# Copyright 2017 Google Inc.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file is generated semi-automatically with this command:
#   $ src/jumper/build_stages.py

#if defined(__MACH__)
    #define HIDDEN .private_extern
    #define FUNCTION(name)
    #define BALIGN4  .align 2
    #define BALIGN16 .align 4
    #define BALIGN32 .align 5
#else
    .section .note.GNU-stack,"",%progbits
    #define HIDDEN .hidden
    #define FUNCTION(name) .type name,%function
    #define BALIGN4  .balign 4
    #define BALIGN16 .balign 16
    #define BALIGN32 .balign 32
#endif
.text
#if defined(__aarch64__)
BALIGN4

HIDDEN _sk_start_pipeline_aarch64
.globl _sk_start_pipeline_aarch64
FUNCTION(_sk_start_pipeline_aarch64)
_sk_start_pipeline_aarch64:
  .long  0xf81c0ff7                          // str           x23, [sp, #-64]!
  .long  0xa90157f6                          // stp           x22, x21, [sp, #16]
  .long  0xa9024ff4                          // stp           x20, x19, [sp, #32]
  .long  0xa9037bfd                          // stp           x29, x30, [sp, #48]
  .long  0xaa0303f4                          // mov           x20, x3
  .long  0xf8408685                          // ldr           x5, [x20], #8
  .long  0xaa0003f7                          // mov           x23, x0
  .long  0xaa0203f6                          // mov           x22, x2
  .long  0x910012e8                          // add           x8, x23, #0x4
  .long  0xaa0403f3                          // mov           x19, x4
  .long  0xeb16011f                          // cmp           x8, x22
  .long  0xaa0103f5                          // mov           x21, x1
  .long  0x9100c3fd                          // add           x29, sp, #0x30
  .long  0x54000069                          // b.ls          40 <sk_start_pipeline_aarch64+0x40>  // b.plast
  .long  0xaa1703e2                          // mov           x2, x23
  .long  0x14000017                          // b             98 <sk_start_pipeline_aarch64+0x98>
  .long  0xf90007e5                          // str           x5, [sp, #8]
  .long  0xf94007e5                          // ldr           x5, [sp, #8]
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x6f00e405                          // movi          v5.2d, #0x0
  .long  0x6f00e406                          // movi          v6.2d, #0x0
  .long  0x6f00e407                          // movi          v7.2d, #0x0
  .long  0xaa1303e0                          // mov           x0, x19
  .long  0xaa1403e1                          // mov           x1, x20
  .long  0xaa1703e2                          // mov           x2, x23
  .long  0xaa1503e3                          // mov           x3, x21
  .long  0xaa1f03e4                          // mov           x4, xzr
  .long  0xd63f00a0                          // blr           x5
  .long  0xf94007e5                          // ldr           x5, [sp, #8]
  .long  0x910012e2                          // add           x2, x23, #0x4
  .long  0x910022e8                          // add           x8, x23, #0x8
  .long  0xeb16011f                          // cmp           x8, x22
  .long  0xaa0203f7                          // mov           x23, x2
  .long  0x54fffd89                          // b.ls          44 <sk_start_pipeline_aarch64+0x44>  // b.plast
  .long  0xcb0202c4                          // sub           x4, x22, x2
  .long  0xb4000224                          // cbz           x4, e0 <sk_start_pipeline_aarch64+0xe0>
  .long  0xaa1303e0                          // mov           x0, x19
  .long  0xaa1403e1                          // mov           x1, x20
  .long  0xaa1503e3                          // mov           x3, x21
  .long  0xa9437bfd                          // ldp           x29, x30, [sp, #48]
  .long  0xa9424ff4                          // ldp           x20, x19, [sp, #32]
  .long  0xa94157f6                          // ldp           x22, x21, [sp, #16]
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x6f00e405                          // movi          v5.2d, #0x0
  .long  0x6f00e406                          // movi          v6.2d, #0x0
  .long  0x6f00e407                          // movi          v7.2d, #0x0
  .long  0xf84407f7                          // ldr           x23, [sp], #64
  .long  0xd61f00a0                          // br            x5
  .long  0xa9437bfd                          // ldp           x29, x30, [sp, #48]
  .long  0xa9424ff4                          // ldp           x20, x19, [sp, #32]
  .long  0xa94157f6                          // ldp           x22, x21, [sp, #16]
  .long  0xf84407f7                          // ldr           x23, [sp], #64
  .long  0xd65f03c0                          // ret

HIDDEN _sk_just_return_aarch64
.globl _sk_just_return_aarch64
FUNCTION(_sk_just_return_aarch64)
_sk_just_return_aarch64:
  .long  0xd65f03c0                          // ret

HIDDEN _sk_seed_shader_aarch64
.globl _sk_seed_shader_aarch64
FUNCTION(_sk_seed_shader_aarch64)
_sk_seed_shader_aarch64:
  .long  0x3dc00007                          // ldr           q7, [x0]
  .long  0x4e040c40                          // dup           v0.4s, w2
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f0167e1                          // movi          v1.4s, #0x3f, lsl #24
  .long  0x4e040c66                          // dup           v6.4s, w3
  .long  0x4e21d800                          // scvtf         v0.4s, v0.4s
  .long  0x4e21d8c6                          // scvtf         v6.4s, v6.4s
  .long  0x4e21d400                          // fadd          v0.4s, v0.4s, v1.4s
  .long  0x4f03f602                          // fmov          v2.4s, #1.000000000000000000e+00
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x6f00e405                          // movi          v5.2d, #0x0
  .long  0x4e21d4c1                          // fadd          v1.4s, v6.4s, v1.4s
  .long  0x6f00e406                          // movi          v6.2d, #0x0
  .long  0x4e27d400                          // fadd          v0.4s, v0.4s, v7.4s
  .long  0x6f00e407                          // movi          v7.2d, #0x0
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dither_aarch64
.globl _sk_dither_aarch64
FUNCTION(_sk_dither_aarch64)
_sk_dither_aarch64:
  .long  0x3dc00811                          // ldr           q17, [x0, #32]
  .long  0x4e040c50                          // dup           v16.4s, w2
  .long  0x4e040c72                          // dup           v18.4s, w3
  .long  0x4f000433                          // movi          v19.4s, #0x1
  .long  0x4f000455                          // movi          v21.4s, #0x2
  .long  0x4eb08630                          // add           v16.4s, v17.4s, v16.4s
  .long  0x4f000494                          // movi          v20.4s, #0x4
  .long  0x52a79008                          // mov           w8, #0x3c800000
  .long  0x6e301e51                          // eor           v17.16b, v18.16b, v16.16b
  .long  0x4e331e12                          // and           v18.16b, v16.16b, v19.16b
  .long  0x4e351e17                          // and           v23.16b, v16.16b, v21.16b
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x4e341e10                          // and           v16.16b, v16.16b, v20.16b
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4f245652                          // shl           v18.4s, v18.4s, #4
  .long  0x4f2156f7                          // shl           v23.4s, v23.4s, #1
  .long  0x4e331e33                          // and           v19.16b, v17.16b, v19.16b
  .long  0x4eb21ef2                          // orr           v18.16b, v23.16b, v18.16b
  .long  0x6f3e0610                          // ushr          v16.4s, v16.4s, #2
  .long  0x4e351e35                          // and           v21.16b, v17.16b, v21.16b
  .long  0x4eb01e50                          // orr           v16.16b, v18.16b, v16.16b
  .long  0x4f255673                          // shl           v19.4s, v19.4s, #5
  .long  0x4e341e31                          // and           v17.16b, v17.16b, v20.16b
  .long  0x4f2256b5                          // shl           v21.4s, v21.4s, #2
  .long  0x4eb31e10                          // orr           v16.16b, v16.16b, v19.16b
  .long  0xbd400117                          // ldr           s23, [x8]
  .long  0x6f3f0631                          // ushr          v17.4s, v17.4s, #1
  .long  0x4eb51e10                          // orr           v16.16b, v16.16b, v21.16b
  .long  0x52b7df89                          // mov           w9, #0xbefc0000
  .long  0x4eb11e10                          // orr           v16.16b, v16.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x4e30ced4                          // fmla          v20.4s, v22.4s, v16.4s
  .long  0x4f979290                          // fmul          v16.4s, v20.4s, v23.s[0]
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x4e22d602                          // fadd          v2.4s, v16.4s, v2.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x4ea3f400                          // fmin          v0.4s, v0.4s, v3.4s
  .long  0x4ea3f421                          // fmin          v1.4s, v1.4s, v3.4s
  .long  0x4ea3f442                          // fmin          v2.4s, v2.4s, v3.4s
  .long  0x4e20f640                          // fmax          v0.4s, v18.4s, v0.4s
  .long  0x4e21f641                          // fmax          v1.4s, v18.4s, v1.4s
  .long  0x4e22f642                          // fmax          v2.4s, v18.4s, v2.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_constant_color_aarch64
.globl _sk_constant_color_aarch64
FUNCTION(_sk_constant_color_aarch64)
_sk_constant_color_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803ea                          // mov           x10, x8
  .long  0x4ddfc940                          // ld1r          {v0.4s}, [x10], #4
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x91003108                          // add           x8, x8, #0xc
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0x4d40c903                          // ld1r          {v3.4s}, [x8]
  .long  0x4d40c941                          // ld1r          {v1.4s}, [x10]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_load_rgba_aarch64
.globl _sk_load_rgba_aarch64
FUNCTION(_sk_load_rgba_aarch64)
_sk_load_rgba_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xad400500                          // ldp           q0, q1, [x8]
  .long  0xad410d02                          // ldp           q2, q3, [x8, #32]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_rgba_aarch64
.globl _sk_store_rgba_aarch64
FUNCTION(_sk_store_rgba_aarch64)
_sk_store_rgba_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xad000500                          // stp           q0, q1, [x8]
  .long  0xad010d02                          // stp           q2, q3, [x8, #32]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clear_aarch64
.globl _sk_clear_aarch64
FUNCTION(_sk_clear_aarch64)
_sk_clear_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0x6f00e403                          // movi          v3.2d, #0x0
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcatop_aarch64
.globl _sk_srcatop_aarch64
FUNCTION(_sk_srcatop_aarch64)
_sk_srcatop_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e27dc00                          // fmul          v0.4s, v0.4s, v7.4s
  .long  0x6e27dc21                          // fmul          v1.4s, v1.4s, v7.4s
  .long  0x6e27dc42                          // fmul          v2.4s, v2.4s, v7.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccc2                          // fmla          v2.4s, v6.4s, v16.4s
  .long  0x6e27de10                          // fmul          v16.4s, v16.4s, v7.4s
  .long  0x4e23ccf0                          // fmla          v16.4s, v7.4s, v3.4s
  .long  0x4eb01e03                          // mov           v3.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dstatop_aarch64
.globl _sk_dstatop_aarch64
FUNCTION(_sk_dstatop_aarch64)
_sk_dstatop_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d610                          // fsub          v16.4s, v16.4s, v7.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de10                          // fmul          v16.4s, v16.4s, v3.4s
  .long  0x4e23ccf0                          // fmla          v16.4s, v7.4s, v3.4s
  .long  0x4e23cc80                          // fmla          v0.4s, v4.4s, v3.4s
  .long  0x4e23cca1                          // fmla          v1.4s, v5.4s, v3.4s
  .long  0x4e23ccc2                          // fmla          v2.4s, v6.4s, v3.4s
  .long  0x4eb01e03                          // mov           v3.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcin_aarch64
.globl _sk_srcin_aarch64
FUNCTION(_sk_srcin_aarch64)
_sk_srcin_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e27dc00                          // fmul          v0.4s, v0.4s, v7.4s
  .long  0x6e27dc21                          // fmul          v1.4s, v1.4s, v7.4s
  .long  0x6e27dc42                          // fmul          v2.4s, v2.4s, v7.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dstin_aarch64
.globl _sk_dstin_aarch64
FUNCTION(_sk_dstin_aarch64)
_sk_dstin_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e24dc60                          // fmul          v0.4s, v3.4s, v4.4s
  .long  0x6e25dc61                          // fmul          v1.4s, v3.4s, v5.4s
  .long  0x6e26dc62                          // fmul          v2.4s, v3.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcout_aarch64
.globl _sk_srcout_aarch64
FUNCTION(_sk_srcout_aarch64)
_sk_srcout_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d610                          // fsub          v16.4s, v16.4s, v7.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dstout_aarch64
.globl _sk_dstout_aarch64
FUNCTION(_sk_dstout_aarch64)
_sk_dstout_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x4ea3d403                          // fsub          v3.4s, v0.4s, v3.4s
  .long  0x6e24dc60                          // fmul          v0.4s, v3.4s, v4.4s
  .long  0x6e25dc61                          // fmul          v1.4s, v3.4s, v5.4s
  .long  0x6e26dc62                          // fmul          v2.4s, v3.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcover_aarch64
.globl _sk_srcover_aarch64
FUNCTION(_sk_srcover_aarch64)
_sk_srcover_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4e24ce00                          // fmla          v0.4s, v16.4s, v4.4s
  .long  0x4e25ce01                          // fmla          v1.4s, v16.4s, v5.4s
  .long  0x4e26ce02                          // fmla          v2.4s, v16.4s, v6.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_dstover_aarch64
.globl _sk_dstover_aarch64
FUNCTION(_sk_dstover_aarch64)
_sk_dstover_aarch64:
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea41c90                          // mov           v16.16b, v4.16b
  .long  0x4ea7d634                          // fsub          v20.4s, v17.4s, v7.4s
  .long  0x4ea51cb1                          // mov           v17.16b, v5.16b
  .long  0x4ea61cd2                          // mov           v18.16b, v6.16b
  .long  0x4ea71cf3                          // mov           v19.16b, v7.16b
  .long  0x4e20ce90                          // fmla          v16.4s, v20.4s, v0.4s
  .long  0x4e21ce91                          // fmla          v17.4s, v20.4s, v1.4s
  .long  0x4e22ce92                          // fmla          v18.4s, v20.4s, v2.4s
  .long  0x4e23ce93                          // fmla          v19.4s, v20.4s, v3.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_modulate_aarch64
.globl _sk_modulate_aarch64
FUNCTION(_sk_modulate_aarch64)
_sk_modulate_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e24dc00                          // fmul          v0.4s, v0.4s, v4.4s
  .long  0x6e25dc21                          // fmul          v1.4s, v1.4s, v5.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0x6e27dc63                          // fmul          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_multiply_aarch64
.globl _sk_multiply_aarch64
FUNCTION(_sk_multiply_aarch64)
_sk_multiply_aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea7d613                          // fsub          v19.4s, v16.4s, v7.4s
  .long  0x4ea3d614                          // fsub          v20.4s, v16.4s, v3.4s
  .long  0x6e20de70                          // fmul          v16.4s, v19.4s, v0.4s
  .long  0x6e21de71                          // fmul          v17.4s, v19.4s, v1.4s
  .long  0x6e22de72                          // fmul          v18.4s, v19.4s, v2.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e34cc90                          // fmla          v16.4s, v4.4s, v20.4s
  .long  0x4e34ccb1                          // fmla          v17.4s, v5.4s, v20.4s
  .long  0x4e34ccd2                          // fmla          v18.4s, v6.4s, v20.4s
  .long  0x4e34ccf3                          // fmla          v19.4s, v7.4s, v20.4s
  .long  0x4e20cc90                          // fmla          v16.4s, v4.4s, v0.4s
  .long  0x4e21ccb1                          // fmla          v17.4s, v5.4s, v1.4s
  .long  0x4e22ccd2                          // fmla          v18.4s, v6.4s, v2.4s
  .long  0x4e23ccf3                          // fmla          v19.4s, v7.4s, v3.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_plus__aarch64
.globl _sk_plus__aarch64
FUNCTION(_sk_plus__aarch64)
_sk_plus__aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4e27d463                          // fadd          v3.4s, v3.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_screen_aarch64
.globl _sk_screen_aarch64
FUNCTION(_sk_screen_aarch64)
_sk_screen_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e24d410                          // fadd          v16.4s, v0.4s, v4.4s
  .long  0x4e25d431                          // fadd          v17.4s, v1.4s, v5.4s
  .long  0x4e26d452                          // fadd          v18.4s, v2.4s, v6.4s
  .long  0x4e27d473                          // fadd          v19.4s, v3.4s, v7.4s
  .long  0x4ea4cc10                          // fmls          v16.4s, v0.4s, v4.4s
  .long  0x4ea5cc31                          // fmls          v17.4s, v1.4s, v5.4s
  .long  0x4ea6cc52                          // fmls          v18.4s, v2.4s, v6.4s
  .long  0x4ea7cc73                          // fmls          v19.4s, v3.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_xor__aarch64
.globl _sk_xor__aarch64
FUNCTION(_sk_xor__aarch64)
_sk_xor__aarch64:
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea7d611                          // fsub          v17.4s, v16.4s, v7.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e20de20                          // fmul          v0.4s, v17.4s, v0.4s
  .long  0x6e21de21                          // fmul          v1.4s, v17.4s, v1.4s
  .long  0x6e22de22                          // fmul          v2.4s, v17.4s, v2.4s
  .long  0x6e23de23                          // fmul          v3.4s, v17.4s, v3.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccc2                          // fmla          v2.4s, v6.4s, v16.4s
  .long  0x4e30cce3                          // fmla          v3.4s, v7.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_darken_aarch64
.globl _sk_darken_aarch64
FUNCTION(_sk_darken_aarch64)
_sk_darken_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4e31f610                          // fmax          v16.4s, v16.4s, v17.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x4e33f652                          // fmax          v18.4s, v18.4s, v19.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4e33f631                          // fmax          v17.4s, v17.4s, v19.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_lighten_aarch64
.globl _sk_lighten_aarch64
FUNCTION(_sk_lighten_aarch64)
_sk_lighten_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4eb1f610                          // fmin          v16.4s, v16.4s, v17.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x4eb3f652                          // fmin          v18.4s, v18.4s, v19.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb3f631                          // fmin          v17.4s, v17.4s, v19.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_difference_aarch64
.globl _sk_difference_aarch64
FUNCTION(_sk_difference_aarch64)
_sk_difference_aarch64:
  .long  0x6e27dc10                          // fmul          v16.4s, v0.4s, v7.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x6e27dc32                          // fmul          v18.4s, v1.4s, v7.4s
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4eb1f610                          // fmin          v16.4s, v16.4s, v17.4s
  .long  0x4eb3f652                          // fmin          v18.4s, v18.4s, v19.4s
  .long  0x4e24d400                          // fadd          v0.4s, v0.4s, v4.4s
  .long  0x4e30d610                          // fadd          v16.4s, v16.4s, v16.4s
  .long  0x6e27dc51                          // fmul          v17.4s, v2.4s, v7.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4e25d421                          // fadd          v1.4s, v1.4s, v5.4s
  .long  0x4e32d650                          // fadd          v16.4s, v18.4s, v18.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb3f631                          // fmin          v17.4s, v17.4s, v19.4s
  .long  0x4eb0d421                          // fsub          v1.4s, v1.4s, v16.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4e26d442                          // fadd          v2.4s, v2.4s, v6.4s
  .long  0x4e31d631                          // fadd          v17.4s, v17.4s, v17.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4eb1d442                          // fsub          v2.4s, v2.4s, v17.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_exclusion_aarch64
.globl _sk_exclusion_aarch64
FUNCTION(_sk_exclusion_aarch64)
_sk_exclusion_aarch64:
  .long  0x4e24d410                          // fadd          v16.4s, v0.4s, v4.4s
  .long  0x6e24dc00                          // fmul          v0.4s, v0.4s, v4.4s
  .long  0x4e20d400                          // fadd          v0.4s, v0.4s, v0.4s
  .long  0x4ea0d600                          // fsub          v0.4s, v16.4s, v0.4s
  .long  0x4e25d430                          // fadd          v16.4s, v1.4s, v5.4s
  .long  0x6e25dc21                          // fmul          v1.4s, v1.4s, v5.4s
  .long  0x4e21d421                          // fadd          v1.4s, v1.4s, v1.4s
  .long  0x4ea1d601                          // fsub          v1.4s, v16.4s, v1.4s
  .long  0x4e26d450                          // fadd          v16.4s, v2.4s, v6.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea2d602                          // fsub          v2.4s, v16.4s, v2.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_colorburn_aarch64
.globl _sk_colorburn_aarch64
FUNCTION(_sk_colorburn_aarch64)
_sk_colorburn_aarch64:
  .long  0x4ea4d4f3                          // fsub          v19.4s, v7.4s, v4.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x6e20fe73                          // fdiv          v19.4s, v19.4s, v0.4s
  .long  0x4ea7d634                          // fsub          v20.4s, v17.4s, v7.4s
  .long  0x4eb3f4f3                          // fmin          v19.4s, v7.4s, v19.4s
  .long  0x6e20de95                          // fmul          v21.4s, v20.4s, v0.4s
  .long  0x4eb3d4f3                          // fsub          v19.4s, v7.4s, v19.4s
  .long  0x4e24d6b6                          // fadd          v22.4s, v21.4s, v4.4s
  .long  0x4e33cc75                          // fmla          v21.4s, v3.4s, v19.4s
  .long  0x4ea5d4f3                          // fsub          v19.4s, v7.4s, v5.4s
  .long  0x6e23de73                          // fmul          v19.4s, v19.4s, v3.4s
  .long  0x6e21fe73                          // fdiv          v19.4s, v19.4s, v1.4s
  .long  0x4ea0d812                          // fcmeq         v18.4s, v0.4s, #0.0
  .long  0x4eb3f4f3                          // fmin          v19.4s, v7.4s, v19.4s
  .long  0x6e751c12                          // bsl           v18.16b, v0.16b, v21.16b
  .long  0x6e21de80                          // fmul          v0.4s, v20.4s, v1.4s
  .long  0x4eb3d4f3                          // fsub          v19.4s, v7.4s, v19.4s
  .long  0x4e25d415                          // fadd          v21.4s, v0.4s, v5.4s
  .long  0x4e33cc60                          // fmla          v0.4s, v3.4s, v19.4s
  .long  0x4ea0d833                          // fcmeq         v19.4s, v1.4s, #0.0
  .long  0x6e601c33                          // bsl           v19.16b, v1.16b, v0.16b
  .long  0x4ea6d4e0                          // fsub          v0.4s, v7.4s, v6.4s
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x6e22fc00                          // fdiv          v0.4s, v0.4s, v2.4s
  .long  0x4ea0f4e0                          // fmin          v0.4s, v7.4s, v0.4s
  .long  0x6e22de81                          // fmul          v1.4s, v20.4s, v2.4s
  .long  0x4ea0d4e0                          // fsub          v0.4s, v7.4s, v0.4s
  .long  0x4e26d434                          // fadd          v20.4s, v1.4s, v6.4s
  .long  0x4e20cc61                          // fmla          v1.4s, v3.4s, v0.4s
  .long  0x4ea0d840                          // fcmeq         v0.4s, v2.4s, #0.0
  .long  0x4ea3d631                          // fsub          v17.4s, v17.4s, v3.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e27e490                          // fcmeq         v16.4s, v4.4s, v7.4s
  .long  0x6e611c40                          // bsl           v0.16b, v2.16b, v1.16b
  .long  0x4e31cc92                          // fmla          v18.4s, v4.4s, v17.4s
  .long  0x4e27e4a1                          // fcmeq         v1.4s, v5.4s, v7.4s
  .long  0x4e27e4c2                          // fcmeq         v2.4s, v6.4s, v7.4s
  .long  0x4e31ccb3                          // fmla          v19.4s, v5.4s, v17.4s
  .long  0x4e31ccc0                          // fmla          v0.4s, v6.4s, v17.4s
  .long  0x6e721ed0                          // bsl           v16.16b, v22.16b, v18.16b
  .long  0x6e731ea1                          // bsl           v1.16b, v21.16b, v19.16b
  .long  0x6e601e82                          // bsl           v2.16b, v20.16b, v0.16b
  .long  0x4e27ce23                          // fmla          v3.4s, v17.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_colordodge_aarch64
.globl _sk_colordodge_aarch64
FUNCTION(_sk_colordodge_aarch64)
_sk_colordodge_aarch64:
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x4ea0d474                          // fsub          v20.4s, v3.4s, v0.4s
  .long  0x6e25dc75                          // fmul          v21.4s, v3.4s, v5.4s
  .long  0x4ea1d476                          // fsub          v22.4s, v3.4s, v1.4s
  .long  0x4ea7d657                          // fsub          v23.4s, v18.4s, v7.4s
  .long  0x6e34fe31                          // fdiv          v17.4s, v17.4s, v20.4s
  .long  0x6e36feb4                          // fdiv          v20.4s, v21.4s, v22.4s
  .long  0x6e20def5                          // fmul          v21.4s, v23.4s, v0.4s
  .long  0x4eb1f4f1                          // fmin          v17.4s, v7.4s, v17.4s
  .long  0x4e23e413                          // fcmeq         v19.4s, v0.4s, v3.4s
  .long  0x4e24d6b6                          // fadd          v22.4s, v21.4s, v4.4s
  .long  0x4e31cc75                          // fmla          v21.4s, v3.4s, v17.4s
  .long  0x6e751c13                          // bsl           v19.16b, v0.16b, v21.16b
  .long  0x6e21dee0                          // fmul          v0.4s, v23.4s, v1.4s
  .long  0x4eb4f4f4                          // fmin          v20.4s, v7.4s, v20.4s
  .long  0x4e25d415                          // fadd          v21.4s, v0.4s, v5.4s
  .long  0x4e34cc60                          // fmla          v0.4s, v3.4s, v20.4s
  .long  0x4e23e434                          // fcmeq         v20.4s, v1.4s, v3.4s
  .long  0x6e601c34                          // bsl           v20.16b, v1.16b, v0.16b
  .long  0x6e26dc60                          // fmul          v0.4s, v3.4s, v6.4s
  .long  0x4ea2d461                          // fsub          v1.4s, v3.4s, v2.4s
  .long  0x6e21fc00                          // fdiv          v0.4s, v0.4s, v1.4s
  .long  0x6e22dee1                          // fmul          v1.4s, v23.4s, v2.4s
  .long  0x4ea0f4e0                          // fmin          v0.4s, v7.4s, v0.4s
  .long  0x4e26d437                          // fadd          v23.4s, v1.4s, v6.4s
  .long  0x4e20cc61                          // fmla          v1.4s, v3.4s, v0.4s
  .long  0x4e23e440                          // fcmeq         v0.4s, v2.4s, v3.4s
  .long  0x6e611c40                          // bsl           v0.16b, v2.16b, v1.16b
  .long  0x4ea3d641                          // fsub          v1.4s, v18.4s, v3.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea0d890                          // fcmeq         v16.4s, v4.4s, #0.0
  .long  0x4ea0d8b1                          // fcmeq         v17.4s, v5.4s, #0.0
  .long  0x4e21cc93                          // fmla          v19.4s, v4.4s, v1.4s
  .long  0x4e21ccb4                          // fmla          v20.4s, v5.4s, v1.4s
  .long  0x4ea0d8c2                          // fcmeq         v2.4s, v6.4s, #0.0
  .long  0x4e21ccc0                          // fmla          v0.4s, v6.4s, v1.4s
  .long  0x6e731ed0                          // bsl           v16.16b, v22.16b, v19.16b
  .long  0x6e741eb1                          // bsl           v17.16b, v21.16b, v20.16b
  .long  0x6e601ee2                          // bsl           v2.16b, v23.16b, v0.16b
  .long  0x4e27cc23                          // fmla          v3.4s, v1.4s, v7.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_hardlight_aarch64
.globl _sk_hardlight_aarch64
FUNCTION(_sk_hardlight_aarch64)
_sk_hardlight_aarch64:
  .long  0x4ea4d4f4                          // fsub          v20.4s, v7.4s, v4.4s
  .long  0x4ea0d475                          // fsub          v21.4s, v3.4s, v0.4s
  .long  0x6e34deb4                          // fmul          v20.4s, v21.4s, v20.4s
  .long  0x4e20d411                          // fadd          v17.4s, v0.4s, v0.4s
  .long  0x6e24dc12                          // fmul          v18.4s, v0.4s, v4.4s
  .long  0x6e27dc73                          // fmul          v19.4s, v3.4s, v7.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x6e31e471                          // fcmge         v17.4s, v3.4s, v17.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4eb4d674                          // fsub          v20.4s, v19.4s, v20.4s
  .long  0x6e741e51                          // bsl           v17.16b, v18.16b, v20.16b
  .long  0x4ea5d4f2                          // fsub          v18.4s, v7.4s, v5.4s
  .long  0x4ea1d474                          // fsub          v20.4s, v3.4s, v1.4s
  .long  0x6e32de92                          // fmul          v18.4s, v20.4s, v18.4s
  .long  0x4e21d436                          // fadd          v22.4s, v1.4s, v1.4s
  .long  0x6e25dc35                          // fmul          v21.4s, v1.4s, v5.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x6e36e476                          // fcmge         v22.4s, v3.4s, v22.4s
  .long  0x4e35d6b5                          // fadd          v21.4s, v21.4s, v21.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e721eb6                          // bsl           v22.16b, v21.16b, v18.16b
  .long  0x4ea6d4f2                          // fsub          v18.4s, v7.4s, v6.4s
  .long  0x4ea2d475                          // fsub          v21.4s, v3.4s, v2.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x4ea7d615                          // fsub          v21.4s, v16.4s, v7.4s
  .long  0x4e22d454                          // fadd          v20.4s, v2.4s, v2.4s
  .long  0x6e20dea0                          // fmul          v0.4s, v21.4s, v0.4s
  .long  0x6e21dea1                          // fmul          v1.4s, v21.4s, v1.4s
  .long  0x6e22deb5                          // fmul          v21.4s, v21.4s, v2.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e34e474                          // fcmge         v20.4s, v3.4s, v20.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccd5                          // fmla          v21.4s, v6.4s, v16.4s
  .long  0x6e721c54                          // bsl           v20.16b, v2.16b, v18.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e36d421                          // fadd          v1.4s, v1.4s, v22.4s
  .long  0x4e34d6a2                          // fadd          v2.4s, v21.4s, v20.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_overlay_aarch64
.globl _sk_overlay_aarch64
FUNCTION(_sk_overlay_aarch64)
_sk_overlay_aarch64:
  .long  0x4ea4d4f4                          // fsub          v20.4s, v7.4s, v4.4s
  .long  0x4ea0d475                          // fsub          v21.4s, v3.4s, v0.4s
  .long  0x6e34deb4                          // fmul          v20.4s, v21.4s, v20.4s
  .long  0x4e24d491                          // fadd          v17.4s, v4.4s, v4.4s
  .long  0x6e24dc12                          // fmul          v18.4s, v0.4s, v4.4s
  .long  0x6e27dc73                          // fmul          v19.4s, v3.4s, v7.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x6e31e4f1                          // fcmge         v17.4s, v7.4s, v17.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4eb4d674                          // fsub          v20.4s, v19.4s, v20.4s
  .long  0x6e741e51                          // bsl           v17.16b, v18.16b, v20.16b
  .long  0x4ea5d4f2                          // fsub          v18.4s, v7.4s, v5.4s
  .long  0x4ea1d474                          // fsub          v20.4s, v3.4s, v1.4s
  .long  0x6e32de92                          // fmul          v18.4s, v20.4s, v18.4s
  .long  0x4e25d4b6                          // fadd          v22.4s, v5.4s, v5.4s
  .long  0x6e25dc35                          // fmul          v21.4s, v1.4s, v5.4s
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x6e36e4f6                          // fcmge         v22.4s, v7.4s, v22.4s
  .long  0x4e35d6b5                          // fadd          v21.4s, v21.4s, v21.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x6e721eb6                          // bsl           v22.16b, v21.16b, v18.16b
  .long  0x4ea6d4f2                          // fsub          v18.4s, v7.4s, v6.4s
  .long  0x4ea2d475                          // fsub          v21.4s, v3.4s, v2.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x4ea7d615                          // fsub          v21.4s, v16.4s, v7.4s
  .long  0x4e26d4d4                          // fadd          v20.4s, v6.4s, v6.4s
  .long  0x6e20dea0                          // fmul          v0.4s, v21.4s, v0.4s
  .long  0x6e21dea1                          // fmul          v1.4s, v21.4s, v1.4s
  .long  0x6e22deb5                          // fmul          v21.4s, v21.4s, v2.4s
  .long  0x6e26dc42                          // fmul          v2.4s, v2.4s, v6.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e32d652                          // fadd          v18.4s, v18.4s, v18.4s
  .long  0x4ea3d610                          // fsub          v16.4s, v16.4s, v3.4s
  .long  0x6e34e4f4                          // fcmge         v20.4s, v7.4s, v20.4s
  .long  0x4e22d442                          // fadd          v2.4s, v2.4s, v2.4s
  .long  0x4eb2d672                          // fsub          v18.4s, v19.4s, v18.4s
  .long  0x4e30cc80                          // fmla          v0.4s, v4.4s, v16.4s
  .long  0x4e30cca1                          // fmla          v1.4s, v5.4s, v16.4s
  .long  0x4e30ccd5                          // fmla          v21.4s, v6.4s, v16.4s
  .long  0x6e721c54                          // bsl           v20.16b, v2.16b, v18.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e36d421                          // fadd          v1.4s, v1.4s, v22.4s
  .long  0x4e34d6a2                          // fadd          v2.4s, v21.4s, v20.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_softlight_aarch64
.globl _sk_softlight_aarch64
FUNCTION(_sk_softlight_aarch64)
_sk_softlight_aarch64:
  .long  0x4ea0c8f5                          // fcmgt         v21.4s, v7.4s, #0.0
  .long  0x6e27fc96                          // fdiv          v22.4s, v4.4s, v7.4s
  .long  0x6e27fcb8                          // fdiv          v24.4s, v5.4s, v7.4s
  .long  0x6e27fcd9                          // fdiv          v25.4s, v6.4s, v7.4s
  .long  0x4e351ed6                          // and           v22.16b, v22.16b, v21.16b
  .long  0x4e351f18                          // and           v24.16b, v24.16b, v21.16b
  .long  0x4e351f35                          // and           v21.16b, v25.16b, v21.16b
  .long  0x6ea1dad9                          // frsqrte       v25.4s, v22.4s
  .long  0x6e39df3d                          // fmul          v29.4s, v25.4s, v25.4s
  .long  0x4ebdfedd                          // frsqrts       v29.4s, v22.4s, v29.4s
  .long  0x6e3ddf39                          // fmul          v25.4s, v25.4s, v29.4s
  .long  0x4ea1db3d                          // frecpe        v29.4s, v25.4s
  .long  0x6ea0fada                          // fneg          v26.4s, v22.4s
  .long  0x6ea1db1b                          // frsqrte       v27.4s, v24.4s
  .long  0x4e3dff39                          // frecps        v25.4s, v25.4s, v29.4s
  .long  0x4e3dcf3a                          // fmla          v26.4s, v25.4s, v29.4s
  .long  0x6e3bdf7d                          // fmul          v29.4s, v27.4s, v27.4s
  .long  0x4ebdff1d                          // frsqrts       v29.4s, v24.4s, v29.4s
  .long  0x6e3ddf7b                          // fmul          v27.4s, v27.4s, v29.4s
  .long  0x4ea1db7d                          // frecpe        v29.4s, v27.4s
  .long  0x6ea0fb1c                          // fneg          v28.4s, v24.4s
  .long  0x6ea1dab9                          // frsqrte       v25.4s, v21.4s
  .long  0x4e3dff7b                          // frecps        v27.4s, v27.4s, v29.4s
  .long  0x4e3dcf7c                          // fmla          v28.4s, v27.4s, v29.4s
  .long  0x6e39df3d                          // fmul          v29.4s, v25.4s, v25.4s
  .long  0x4ebdfebd                          // frsqrts       v29.4s, v21.4s, v29.4s
  .long  0x6e3ddf39                          // fmul          v25.4s, v25.4s, v29.4s
  .long  0x4ea1db3d                          // frecpe        v29.4s, v25.4s
  .long  0x6ea0fabb                          // fneg          v27.4s, v21.4s
  .long  0x4e3dff39                          // frecps        v25.4s, v25.4s, v29.4s
  .long  0x4e3dcf3b                          // fmla          v27.4s, v25.4s, v29.4s
  .long  0x4e36d6d9                          // fadd          v25.4s, v22.4s, v22.4s
  .long  0x4f07f613                          // fmov          v19.4s, #-1.000000000000000000e+00
  .long  0x4e39d739                          // fadd          v25.4s, v25.4s, v25.4s
  .long  0x4e24d497                          // fadd          v23.4s, v4.4s, v4.4s
  .long  0x4e33d6dd                          // fadd          v29.4s, v22.4s, v19.4s
  .long  0x4e39cf39                          // fmla          v25.4s, v25.4s, v25.4s
  .long  0x4f00f794                          // fmov          v20.4s, #7.000000000000000000e+00
  .long  0x6e39dfb9                          // fmul          v25.4s, v29.4s, v25.4s
  .long  0x4e37d6f7                          // fadd          v23.4s, v23.4s, v23.4s
  .long  0x6e37e4f7                          // fcmge         v23.4s, v7.4s, v23.4s
  .long  0x4e36ce99                          // fmla          v25.4s, v20.4s, v22.4s
  .long  0x6e7a1f37                          // bsl           v23.16b, v25.16b, v26.16b
  .long  0x4e38d719                          // fadd          v25.4s, v24.4s, v24.4s
  .long  0x4e39d739                          // fadd          v25.4s, v25.4s, v25.4s
  .long  0x4e33d71a                          // fadd          v26.4s, v24.4s, v19.4s
  .long  0x4e39cf39                          // fmla          v25.4s, v25.4s, v25.4s
  .long  0x6e39df59                          // fmul          v25.4s, v26.4s, v25.4s
  .long  0x4e25d4ba                          // fadd          v26.4s, v5.4s, v5.4s
  .long  0x4e3ad75a                          // fadd          v26.4s, v26.4s, v26.4s
  .long  0x6e3ae4fa                          // fcmge         v26.4s, v7.4s, v26.4s
  .long  0x4e38ce99                          // fmla          v25.4s, v20.4s, v24.4s
  .long  0x6e7c1f3a                          // bsl           v26.16b, v25.16b, v28.16b
  .long  0x4e35d6bc                          // fadd          v28.4s, v21.4s, v21.4s
  .long  0x4e3cd79c                          // fadd          v28.4s, v28.4s, v28.4s
  .long  0x4e33d6b3                          // fadd          v19.4s, v21.4s, v19.4s
  .long  0x4e3ccf9c                          // fmla          v28.4s, v28.4s, v28.4s
  .long  0x6e3cde73                          // fmul          v19.4s, v19.4s, v28.4s
  .long  0x4e35ce93                          // fmla          v19.4s, v20.4s, v21.4s
  .long  0x4e26d4d4                          // fadd          v20.4s, v6.4s, v6.4s
  .long  0x4e34d694                          // fadd          v20.4s, v20.4s, v20.4s
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x6e34e4f4                          // fcmge         v20.4s, v7.4s, v20.4s
  .long  0x4e20d411                          // fadd          v17.4s, v0.4s, v0.4s
  .long  0x6e7b1e74                          // bsl           v20.16b, v19.16b, v27.16b
  .long  0x4ea7d65b                          // fsub          v27.4s, v18.4s, v7.4s
  .long  0x4ea31c70                          // mov           v16.16b, v3.16b
  .long  0x4e21d43d                          // fadd          v29.4s, v1.4s, v1.4s
  .long  0x4e22d45c                          // fadd          v28.4s, v2.4s, v2.4s
  .long  0x6e20df60                          // fmul          v0.4s, v27.4s, v0.4s
  .long  0x6e21df61                          // fmul          v1.4s, v27.4s, v1.4s
  .long  0x6e22df62                          // fmul          v2.4s, v27.4s, v2.4s
  .long  0x4ea3d63b                          // fsub          v27.4s, v17.4s, v3.4s
  .long  0x4eb6d656                          // fsub          v22.4s, v18.4s, v22.4s
  .long  0x4ea31c79                          // mov           v25.16b, v3.16b
  .long  0x4e3bced0                          // fmla          v16.4s, v22.4s, v27.4s
  .long  0x4ea3d7b6                          // fsub          v22.4s, v29.4s, v3.4s
  .long  0x4eb8d658                          // fsub          v24.4s, v18.4s, v24.4s
  .long  0x4ea31c73                          // mov           v19.16b, v3.16b
  .long  0x4e36cf19                          // fmla          v25.4s, v24.4s, v22.4s
  .long  0x4ea3d798                          // fsub          v24.4s, v28.4s, v3.4s
  .long  0x4eb5d655                          // fsub          v21.4s, v18.4s, v21.4s
  .long  0x4e38ceb3                          // fmla          v19.4s, v21.4s, v24.4s
  .long  0x6e27df7b                          // fmul          v27.4s, v27.4s, v7.4s
  .long  0x6e27ded6                          // fmul          v22.4s, v22.4s, v7.4s
  .long  0x6e27df18                          // fmul          v24.4s, v24.4s, v7.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e37df77                          // fmul          v23.4s, v27.4s, v23.4s
  .long  0x6e3aded6                          // fmul          v22.4s, v22.4s, v26.4s
  .long  0x6e34df14                          // fmul          v20.4s, v24.4s, v20.4s
  .long  0x4ea3d652                          // fsub          v18.4s, v18.4s, v3.4s
  .long  0x6e31e471                          // fcmge         v17.4s, v3.4s, v17.4s
  .long  0x6e3de475                          // fcmge         v21.4s, v3.4s, v29.4s
  .long  0x6e3ce47c                          // fcmge         v28.4s, v3.4s, v28.4s
  .long  0x6e24de10                          // fmul          v16.4s, v16.4s, v4.4s
  .long  0x6e25df39                          // fmul          v25.4s, v25.4s, v5.4s
  .long  0x6e26de73                          // fmul          v19.4s, v19.4s, v6.4s
  .long  0x4e23cc97                          // fmla          v23.4s, v4.4s, v3.4s
  .long  0x4e23ccb6                          // fmla          v22.4s, v5.4s, v3.4s
  .long  0x4e23ccd4                          // fmla          v20.4s, v6.4s, v3.4s
  .long  0x4e32cc80                          // fmla          v0.4s, v4.4s, v18.4s
  .long  0x4e32cca1                          // fmla          v1.4s, v5.4s, v18.4s
  .long  0x4e32ccc2                          // fmla          v2.4s, v6.4s, v18.4s
  .long  0x6e771e11                          // bsl           v17.16b, v16.16b, v23.16b
  .long  0x6e761f35                          // bsl           v21.16b, v25.16b, v22.16b
  .long  0x6e741e7c                          // bsl           v28.16b, v19.16b, v20.16b
  .long  0x4e31d400                          // fadd          v0.4s, v0.4s, v17.4s
  .long  0x4e35d421                          // fadd          v1.4s, v1.4s, v21.4s
  .long  0x4e3cd442                          // fadd          v2.4s, v2.4s, v28.4s
  .long  0x4e27ce43                          // fmla          v3.4s, v18.4s, v7.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_hue_aarch64
.globl _sk_hue_aarch64
FUNCTION(_sk_hue_aarch64)
_sk_hue_aarch64:
  .long  0x6e23dc32                          // fmul          v18.4s, v1.4s, v3.4s
  .long  0x6e23dc53                          // fmul          v19.4s, v2.4s, v3.4s
  .long  0x4e26f4b5                          // fmax          v21.4s, v5.4s, v6.4s
  .long  0x4ea6f4b7                          // fmin          v23.4s, v5.4s, v6.4s
  .long  0x6e23dc11                          // fmul          v17.4s, v0.4s, v3.4s
  .long  0x4e35f495                          // fmax          v21.4s, v4.4s, v21.4s
  .long  0x4eb7f497                          // fmin          v23.4s, v4.4s, v23.4s
  .long  0x4eb3f65b                          // fmin          v27.4s, v18.4s, v19.4s
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x4f03f619                          // fmov          v25.4s, #1.000000000000000000e+00
  .long  0x4e33f65c                          // fmax          v28.4s, v18.4s, v19.4s
  .long  0x4eb7d6b5                          // fsub          v21.4s, v21.4s, v23.4s
  .long  0x4ebbf63b                          // fmin          v27.4s, v17.4s, v27.4s
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4ea7d737                          // fsub          v23.4s, v25.4s, v7.4s
  .long  0x4e3cf63c                          // fmax          v28.4s, v17.4s, v28.4s
  .long  0x4ebbd652                          // fsub          v18.4s, v18.4s, v27.4s
  .long  0x6e23deb5                          // fmul          v21.4s, v21.4s, v3.4s
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x6e20dee0                          // fmul          v0.4s, v23.4s, v0.4s
  .long  0x6e21dee1                          // fmul          v1.4s, v23.4s, v1.4s
  .long  0x6e22dee2                          // fmul          v2.4s, v23.4s, v2.4s
  .long  0x4ea3d739                          // fsub          v25.4s, v25.4s, v3.4s
  .long  0x4ebbd79c                          // fsub          v28.4s, v28.4s, v27.4s
  .long  0x4ebbd631                          // fsub          v17.4s, v17.4s, v27.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x4ebbd673                          // fsub          v19.4s, v19.4s, v27.4s
  .long  0x4e39cc80                          // fmla          v0.4s, v4.4s, v25.4s
  .long  0x4e39cca1                          // fmla          v1.4s, v5.4s, v25.4s
  .long  0x4e39ccc2                          // fmla          v2.4s, v6.4s, v25.4s
  .long  0x4ea0db99                          // fcmeq         v25.4s, v28.4s, #0.0
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e3cfe52                          // fdiv          v18.4s, v18.4s, v28.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e33deb3                          // fmul          v19.4s, v21.4s, v19.4s
  .long  0x6e3cfe31                          // fdiv          v17.4s, v17.4s, v28.4s
  .long  0x4e791e52                          // bic           v18.16b, v18.16b, v25.16b
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x6e3cfe73                          // fdiv          v19.4s, v19.4s, v28.4s
  .long  0x4e791e31                          // bic           v17.16b, v17.16b, v25.16b
  .long  0x6e38de55                          // fmul          v21.4s, v18.4s, v24.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x6e38dcbb                          // fmul          v27.4s, v5.4s, v24.4s
  .long  0x4e791e73                          // bic           v19.16b, v19.16b, v25.16b
  .long  0x4e31ced5                          // fmla          v21.4s, v22.4s, v17.4s
  .long  0x4e24cedb                          // fmla          v27.4s, v22.4s, v4.4s
  .long  0x4e33cef5                          // fmla          v21.4s, v23.4s, v19.4s
  .long  0x4e26cefb                          // fmla          v27.4s, v23.4s, v6.4s
  .long  0x6ea0fab5                          // fneg          v21.4s, v21.4s
  .long  0x4e3bcc75                          // fmla          v21.4s, v3.4s, v27.4s
  .long  0x6e27dc74                          // fmul          v20.4s, v3.4s, v7.4s
  .long  0x4e27d47a                          // fadd          v26.4s, v3.4s, v7.4s
  .long  0x4e35d623                          // fadd          v3.4s, v17.4s, v21.4s
  .long  0x4e35d651                          // fadd          v17.4s, v18.4s, v21.4s
  .long  0x6e38de38                          // fmul          v24.4s, v17.4s, v24.4s
  .long  0x4e35d672                          // fadd          v18.4s, v19.4s, v21.4s
  .long  0x4e23ced8                          // fmla          v24.4s, v22.4s, v3.4s
  .long  0x4eb2f633                          // fmin          v19.4s, v17.4s, v18.4s
  .long  0x4e32cef8                          // fmla          v24.4s, v23.4s, v18.4s
  .long  0x4eb3f473                          // fmin          v19.4s, v3.4s, v19.4s
  .long  0x4eb8d479                          // fsub          v25.4s, v3.4s, v24.4s
  .long  0x6ea0ca76                          // fcmge         v22.4s, v19.4s, #0.0
  .long  0x4eb3d713                          // fsub          v19.4s, v24.4s, v19.4s
  .long  0x6e39df19                          // fmul          v25.4s, v24.4s, v25.4s
  .long  0x6e33ff39                          // fdiv          v25.4s, v25.4s, v19.4s
  .long  0x4e32f635                          // fmax          v21.4s, v17.4s, v18.4s
  .long  0x4eb61edb                          // mov           v27.16b, v22.16b
  .long  0x4e39d719                          // fadd          v25.4s, v24.4s, v25.4s
  .long  0x4e35f475                          // fmax          v21.4s, v3.4s, v21.4s
  .long  0x6e791c7b                          // bsl           v27.16b, v3.16b, v25.16b
  .long  0x4eb8d623                          // fsub          v3.4s, v17.4s, v24.4s
  .long  0x6e23df03                          // fmul          v3.4s, v24.4s, v3.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x4eb61ed9                          // mov           v25.16b, v22.16b
  .long  0x4e23d703                          // fadd          v3.4s, v24.4s, v3.4s
  .long  0x6e631e39                          // bsl           v25.16b, v17.16b, v3.16b
  .long  0x4eb8d651                          // fsub          v17.4s, v18.4s, v24.4s
  .long  0x6e31df11                          // fmul          v17.4s, v24.4s, v17.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x6e711e56                          // bsl           v22.16b, v18.16b, v17.16b
  .long  0x4eb8d69c                          // fsub          v28.4s, v20.4s, v24.4s
  .long  0x4eb8d771                          // fsub          v17.4s, v27.4s, v24.4s
  .long  0x4eb8d732                          // fsub          v18.4s, v25.4s, v24.4s
  .long  0x4eb8d6d3                          // fsub          v19.4s, v22.4s, v24.4s
  .long  0x6eb4e6b7                          // fcmgt         v23.4s, v21.4s, v20.4s
  .long  0x4eb8d6b5                          // fsub          v21.4s, v21.4s, v24.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e32df92                          // fmul          v18.4s, v28.4s, v18.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e35fe31                          // fdiv          v17.4s, v17.4s, v21.4s
  .long  0x6e35fe52                          // fdiv          v18.4s, v18.4s, v21.4s
  .long  0x6e35fe73                          // fdiv          v19.4s, v19.4s, v21.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb71ee3                          // mov           v3.16b, v23.16b
  .long  0x4eb71efc                          // mov           v28.16b, v23.16b
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x4e32d712                          // fadd          v18.4s, v24.4s, v18.4s
  .long  0x4e33d713                          // fadd          v19.4s, v24.4s, v19.4s
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e791e5c                          // bsl           v28.16b, v18.16b, v25.16b
  .long  0x6e761e77                          // bsl           v23.16b, v19.16b, v22.16b
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0x4e30f791                          // fmax          v17.4s, v28.4s, v16.4s
  .long  0x4e30f6f0                          // fmax          v16.4s, v23.4s, v16.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e30d442                          // fadd          v2.4s, v2.4s, v16.4s
  .long  0x4eb4d743                          // fsub          v3.4s, v26.4s, v20.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_saturation_aarch64
.globl _sk_saturation_aarch64
FUNCTION(_sk_saturation_aarch64)
_sk_saturation_aarch64:
  .long  0x6e25dc72                          // fmul          v18.4s, v3.4s, v5.4s
  .long  0x6e26dc73                          // fmul          v19.4s, v3.4s, v6.4s
  .long  0x4e22f435                          // fmax          v21.4s, v1.4s, v2.4s
  .long  0x4ea2f437                          // fmin          v23.4s, v1.4s, v2.4s
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x4e35f415                          // fmax          v21.4s, v0.4s, v21.4s
  .long  0x4eb7f417                          // fmin          v23.4s, v0.4s, v23.4s
  .long  0x4eb3f65b                          // fmin          v27.4s, v18.4s, v19.4s
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x4f03f619                          // fmov          v25.4s, #1.000000000000000000e+00
  .long  0x4e33f65c                          // fmax          v28.4s, v18.4s, v19.4s
  .long  0x4eb7d6b5                          // fsub          v21.4s, v21.4s, v23.4s
  .long  0x4ebbf63b                          // fmin          v27.4s, v17.4s, v27.4s
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4ea7d737                          // fsub          v23.4s, v25.4s, v7.4s
  .long  0x4e3cf63c                          // fmax          v28.4s, v17.4s, v28.4s
  .long  0x4ebbd652                          // fsub          v18.4s, v18.4s, v27.4s
  .long  0x6e27deb5                          // fmul          v21.4s, v21.4s, v7.4s
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x6e20dee0                          // fmul          v0.4s, v23.4s, v0.4s
  .long  0x6e21dee1                          // fmul          v1.4s, v23.4s, v1.4s
  .long  0x6e22dee2                          // fmul          v2.4s, v23.4s, v2.4s
  .long  0x4ea3d739                          // fsub          v25.4s, v25.4s, v3.4s
  .long  0x4ebbd79c                          // fsub          v28.4s, v28.4s, v27.4s
  .long  0x4ebbd631                          // fsub          v17.4s, v17.4s, v27.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x4ebbd673                          // fsub          v19.4s, v19.4s, v27.4s
  .long  0x4e39cc80                          // fmla          v0.4s, v4.4s, v25.4s
  .long  0x4e39cca1                          // fmla          v1.4s, v5.4s, v25.4s
  .long  0x4e39ccc2                          // fmla          v2.4s, v6.4s, v25.4s
  .long  0x4ea0db99                          // fcmeq         v25.4s, v28.4s, #0.0
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e3cfe52                          // fdiv          v18.4s, v18.4s, v28.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e33deb3                          // fmul          v19.4s, v21.4s, v19.4s
  .long  0x6e3cfe31                          // fdiv          v17.4s, v17.4s, v28.4s
  .long  0x4e791e52                          // bic           v18.16b, v18.16b, v25.16b
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x6e3cfe73                          // fdiv          v19.4s, v19.4s, v28.4s
  .long  0x4e791e31                          // bic           v17.16b, v17.16b, v25.16b
  .long  0x6e38de55                          // fmul          v21.4s, v18.4s, v24.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x6e38dcbb                          // fmul          v27.4s, v5.4s, v24.4s
  .long  0x4e791e73                          // bic           v19.16b, v19.16b, v25.16b
  .long  0x4e31ced5                          // fmla          v21.4s, v22.4s, v17.4s
  .long  0x4e24cedb                          // fmla          v27.4s, v22.4s, v4.4s
  .long  0x4e33cef5                          // fmla          v21.4s, v23.4s, v19.4s
  .long  0x4e26cefb                          // fmla          v27.4s, v23.4s, v6.4s
  .long  0x6ea0fab5                          // fneg          v21.4s, v21.4s
  .long  0x4e3bcc75                          // fmla          v21.4s, v3.4s, v27.4s
  .long  0x6e27dc74                          // fmul          v20.4s, v3.4s, v7.4s
  .long  0x4e27d47a                          // fadd          v26.4s, v3.4s, v7.4s
  .long  0x4e35d623                          // fadd          v3.4s, v17.4s, v21.4s
  .long  0x4e35d651                          // fadd          v17.4s, v18.4s, v21.4s
  .long  0x6e38de38                          // fmul          v24.4s, v17.4s, v24.4s
  .long  0x4e35d672                          // fadd          v18.4s, v19.4s, v21.4s
  .long  0x4e23ced8                          // fmla          v24.4s, v22.4s, v3.4s
  .long  0x4eb2f633                          // fmin          v19.4s, v17.4s, v18.4s
  .long  0x4e32cef8                          // fmla          v24.4s, v23.4s, v18.4s
  .long  0x4eb3f473                          // fmin          v19.4s, v3.4s, v19.4s
  .long  0x4eb8d479                          // fsub          v25.4s, v3.4s, v24.4s
  .long  0x6ea0ca76                          // fcmge         v22.4s, v19.4s, #0.0
  .long  0x4eb3d713                          // fsub          v19.4s, v24.4s, v19.4s
  .long  0x6e39df19                          // fmul          v25.4s, v24.4s, v25.4s
  .long  0x6e33ff39                          // fdiv          v25.4s, v25.4s, v19.4s
  .long  0x4e32f635                          // fmax          v21.4s, v17.4s, v18.4s
  .long  0x4eb61edb                          // mov           v27.16b, v22.16b
  .long  0x4e39d719                          // fadd          v25.4s, v24.4s, v25.4s
  .long  0x4e35f475                          // fmax          v21.4s, v3.4s, v21.4s
  .long  0x6e791c7b                          // bsl           v27.16b, v3.16b, v25.16b
  .long  0x4eb8d623                          // fsub          v3.4s, v17.4s, v24.4s
  .long  0x6e23df03                          // fmul          v3.4s, v24.4s, v3.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x4eb61ed9                          // mov           v25.16b, v22.16b
  .long  0x4e23d703                          // fadd          v3.4s, v24.4s, v3.4s
  .long  0x6e631e39                          // bsl           v25.16b, v17.16b, v3.16b
  .long  0x4eb8d651                          // fsub          v17.4s, v18.4s, v24.4s
  .long  0x6e31df11                          // fmul          v17.4s, v24.4s, v17.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x6e711e56                          // bsl           v22.16b, v18.16b, v17.16b
  .long  0x4eb8d69c                          // fsub          v28.4s, v20.4s, v24.4s
  .long  0x4eb8d771                          // fsub          v17.4s, v27.4s, v24.4s
  .long  0x4eb8d732                          // fsub          v18.4s, v25.4s, v24.4s
  .long  0x4eb8d6d3                          // fsub          v19.4s, v22.4s, v24.4s
  .long  0x6eb4e6b7                          // fcmgt         v23.4s, v21.4s, v20.4s
  .long  0x4eb8d6b5                          // fsub          v21.4s, v21.4s, v24.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e32df92                          // fmul          v18.4s, v28.4s, v18.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e35fe31                          // fdiv          v17.4s, v17.4s, v21.4s
  .long  0x6e35fe52                          // fdiv          v18.4s, v18.4s, v21.4s
  .long  0x6e35fe73                          // fdiv          v19.4s, v19.4s, v21.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb71ee3                          // mov           v3.16b, v23.16b
  .long  0x4eb71efc                          // mov           v28.16b, v23.16b
  .long  0x4e31d711                          // fadd          v17.4s, v24.4s, v17.4s
  .long  0x4e32d712                          // fadd          v18.4s, v24.4s, v18.4s
  .long  0x4e33d713                          // fadd          v19.4s, v24.4s, v19.4s
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e791e5c                          // bsl           v28.16b, v18.16b, v25.16b
  .long  0x6e761e77                          // bsl           v23.16b, v19.16b, v22.16b
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0x4e30f791                          // fmax          v17.4s, v28.4s, v16.4s
  .long  0x4e30f6f0                          // fmax          v16.4s, v23.4s, v16.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e30d442                          // fadd          v2.4s, v2.4s, v16.4s
  .long  0x4eb4d743                          // fsub          v3.4s, v26.4s, v20.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_color_aarch64
.globl _sk_color_aarch64
FUNCTION(_sk_color_aarch64)
_sk_color_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x6e27dc33                          // fmul          v19.4s, v1.4s, v7.4s
  .long  0x4e040d15                          // dup           v21.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e27dc11                          // fmul          v17.4s, v0.4s, v7.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4f03f617                          // fmov          v23.4s, #1.000000000000000000e+00
  .long  0x6e35de7c                          // fmul          v28.4s, v19.4s, v21.4s
  .long  0x6e27dc54                          // fmul          v20.4s, v2.4s, v7.4s
  .long  0x4e040d19                          // dup           v25.4s, w8
  .long  0x4ea7d6fa                          // fsub          v26.4s, v23.4s, v7.4s
  .long  0x6e35dcbb                          // fmul          v27.4s, v5.4s, v21.4s
  .long  0x4e31ce5c                          // fmla          v28.4s, v18.4s, v17.4s
  .long  0x4ea3d6f7                          // fsub          v23.4s, v23.4s, v3.4s
  .long  0x6e20df40                          // fmul          v0.4s, v26.4s, v0.4s
  .long  0x6e21df41                          // fmul          v1.4s, v26.4s, v1.4s
  .long  0x6e22df42                          // fmul          v2.4s, v26.4s, v2.4s
  .long  0x4e24ce5b                          // fmla          v27.4s, v18.4s, v4.4s
  .long  0x4e34cf3c                          // fmla          v28.4s, v25.4s, v20.4s
  .long  0x4e37cc80                          // fmla          v0.4s, v4.4s, v23.4s
  .long  0x4e37cca1                          // fmla          v1.4s, v5.4s, v23.4s
  .long  0x4e37ccc2                          // fmla          v2.4s, v6.4s, v23.4s
  .long  0x4e26cf3b                          // fmla          v27.4s, v25.4s, v6.4s
  .long  0x6ea0fb97                          // fneg          v23.4s, v28.4s
  .long  0x4e3bcc77                          // fmla          v23.4s, v3.4s, v27.4s
  .long  0x6e27dc70                          // fmul          v16.4s, v3.4s, v7.4s
  .long  0x4e27d478                          // fadd          v24.4s, v3.4s, v7.4s
  .long  0x4e37d623                          // fadd          v3.4s, v17.4s, v23.4s
  .long  0x4e37d671                          // fadd          v17.4s, v19.4s, v23.4s
  .long  0x6e35de35                          // fmul          v21.4s, v17.4s, v21.4s
  .long  0x4e37d693                          // fadd          v19.4s, v20.4s, v23.4s
  .long  0x4e23ce55                          // fmla          v21.4s, v18.4s, v3.4s
  .long  0x4eb3f634                          // fmin          v20.4s, v17.4s, v19.4s
  .long  0x4e33cf35                          // fmla          v21.4s, v25.4s, v19.4s
  .long  0x4eb4f474                          // fmin          v20.4s, v3.4s, v20.4s
  .long  0x4eb5d47a                          // fsub          v26.4s, v3.4s, v21.4s
  .long  0x6ea0ca92                          // fcmge         v18.4s, v20.4s, #0.0
  .long  0x4eb4d6b4                          // fsub          v20.4s, v21.4s, v20.4s
  .long  0x6e3adeba                          // fmul          v26.4s, v21.4s, v26.4s
  .long  0x6e34ff5a                          // fdiv          v26.4s, v26.4s, v20.4s
  .long  0x4e33f637                          // fmax          v23.4s, v17.4s, v19.4s
  .long  0x4eb21e5b                          // mov           v27.16b, v18.16b
  .long  0x4e3ad6ba                          // fadd          v26.4s, v21.4s, v26.4s
  .long  0x4e37f477                          // fmax          v23.4s, v3.4s, v23.4s
  .long  0x6e7a1c7b                          // bsl           v27.16b, v3.16b, v26.16b
  .long  0x4eb5d623                          // fsub          v3.4s, v17.4s, v21.4s
  .long  0x6e23dea3                          // fmul          v3.4s, v21.4s, v3.4s
  .long  0x6e34fc63                          // fdiv          v3.4s, v3.4s, v20.4s
  .long  0x4eb21e5a                          // mov           v26.16b, v18.16b
  .long  0x4e23d6a3                          // fadd          v3.4s, v21.4s, v3.4s
  .long  0x6e631e3a                          // bsl           v26.16b, v17.16b, v3.16b
  .long  0x4eb5d671                          // fsub          v17.4s, v19.4s, v21.4s
  .long  0x6e31deb1                          // fmul          v17.4s, v21.4s, v17.4s
  .long  0x6e34fe31                          // fdiv          v17.4s, v17.4s, v20.4s
  .long  0x4e31d6b1                          // fadd          v17.4s, v21.4s, v17.4s
  .long  0x6e711e72                          // bsl           v18.16b, v19.16b, v17.16b
  .long  0x4eb5d61c                          // fsub          v28.4s, v16.4s, v21.4s
  .long  0x4eb5d771                          // fsub          v17.4s, v27.4s, v21.4s
  .long  0x4eb5d753                          // fsub          v19.4s, v26.4s, v21.4s
  .long  0x4eb5d654                          // fsub          v20.4s, v18.4s, v21.4s
  .long  0x6eb0e6f9                          // fcmgt         v25.4s, v23.4s, v16.4s
  .long  0x4eb5d6f7                          // fsub          v23.4s, v23.4s, v21.4s
  .long  0x6e31df91                          // fmul          v17.4s, v28.4s, v17.4s
  .long  0x6e33df93                          // fmul          v19.4s, v28.4s, v19.4s
  .long  0x6e34df94                          // fmul          v20.4s, v28.4s, v20.4s
  .long  0x6e37fe31                          // fdiv          v17.4s, v17.4s, v23.4s
  .long  0x6e37fe73                          // fdiv          v19.4s, v19.4s, v23.4s
  .long  0x6e37fe94                          // fdiv          v20.4s, v20.4s, v23.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb91f23                          // mov           v3.16b, v25.16b
  .long  0x4eb91f3c                          // mov           v28.16b, v25.16b
  .long  0x4e31d6b1                          // fadd          v17.4s, v21.4s, v17.4s
  .long  0x4e33d6b3                          // fadd          v19.4s, v21.4s, v19.4s
  .long  0x4e34d6b4                          // fadd          v20.4s, v21.4s, v20.4s
  .long  0x6f00e416                          // movi          v22.2d, #0x0
  .long  0x6e7b1e23                          // bsl           v3.16b, v17.16b, v27.16b
  .long  0x6e7a1e7c                          // bsl           v28.16b, v19.16b, v26.16b
  .long  0x6e721e99                          // bsl           v25.16b, v20.16b, v18.16b
  .long  0x4e36f463                          // fmax          v3.4s, v3.4s, v22.4s
  .long  0x4e36f791                          // fmax          v17.4s, v28.4s, v22.4s
  .long  0x4e36f732                          // fmax          v18.4s, v25.4s, v22.4s
  .long  0x4e23d400                          // fadd          v0.4s, v0.4s, v3.4s
  .long  0x4e31d421                          // fadd          v1.4s, v1.4s, v17.4s
  .long  0x4e32d442                          // fadd          v2.4s, v2.4s, v18.4s
  .long  0x4eb0d703                          // fsub          v3.4s, v24.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_luminosity_aarch64
.globl _sk_luminosity_aarch64
FUNCTION(_sk_luminosity_aarch64)
_sk_luminosity_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7e2e8                          // mov           w8, #0x3f170000
  .long  0x728147a8                          // movk          w8, #0xa3d
  .long  0x6e25dc73                          // fmul          v19.4s, v3.4s, v5.4s
  .long  0x4e040d15                          // dup           v21.4s, w8
  .long  0x52a7bc28                          // mov           w8, #0x3de10000
  .long  0x6e24dc71                          // fmul          v17.4s, v3.4s, v4.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4f03f617                          // fmov          v23.4s, #1.000000000000000000e+00
  .long  0x6e35de7b                          // fmul          v27.4s, v19.4s, v21.4s
  .long  0x6e26dc74                          // fmul          v20.4s, v3.4s, v6.4s
  .long  0x6e27dc70                          // fmul          v16.4s, v3.4s, v7.4s
  .long  0x4e27d478                          // fadd          v24.4s, v3.4s, v7.4s
  .long  0x4e040d19                          // dup           v25.4s, w8
  .long  0x4ea7d6fa                          // fsub          v26.4s, v23.4s, v7.4s
  .long  0x4ea3d6e3                          // fsub          v3.4s, v23.4s, v3.4s
  .long  0x6e35dc37                          // fmul          v23.4s, v1.4s, v21.4s
  .long  0x4e31ce5b                          // fmla          v27.4s, v18.4s, v17.4s
  .long  0x4e20ce57                          // fmla          v23.4s, v18.4s, v0.4s
  .long  0x4e34cf3b                          // fmla          v27.4s, v25.4s, v20.4s
  .long  0x6e20df5c                          // fmul          v28.4s, v26.4s, v0.4s
  .long  0x4e22cf37                          // fmla          v23.4s, v25.4s, v2.4s
  .long  0x6ea0fb60                          // fneg          v0.4s, v27.4s
  .long  0x6e21df41                          // fmul          v1.4s, v26.4s, v1.4s
  .long  0x6e22df5a                          // fmul          v26.4s, v26.4s, v2.4s
  .long  0x4e37cce0                          // fmla          v0.4s, v7.4s, v23.4s
  .long  0x4e23cc9c                          // fmla          v28.4s, v4.4s, v3.4s
  .long  0x4e23cca1                          // fmla          v1.4s, v5.4s, v3.4s
  .long  0x4e23ccda                          // fmla          v26.4s, v6.4s, v3.4s
  .long  0x4e20d663                          // fadd          v3.4s, v19.4s, v0.4s
  .long  0x4e20d622                          // fadd          v2.4s, v17.4s, v0.4s
  .long  0x4e20d680                          // fadd          v0.4s, v20.4s, v0.4s
  .long  0x6e35dc74                          // fmul          v20.4s, v3.4s, v21.4s
  .long  0x4e22ce54                          // fmla          v20.4s, v18.4s, v2.4s
  .long  0x4ea0f471                          // fmin          v17.4s, v3.4s, v0.4s
  .long  0x4e20cf34                          // fmla          v20.4s, v25.4s, v0.4s
  .long  0x4eb1f451                          // fmin          v17.4s, v2.4s, v17.4s
  .long  0x4eb4d457                          // fsub          v23.4s, v2.4s, v20.4s
  .long  0x6ea0ca32                          // fcmge         v18.4s, v17.4s, #0.0
  .long  0x4eb1d691                          // fsub          v17.4s, v20.4s, v17.4s
  .long  0x6e37de97                          // fmul          v23.4s, v20.4s, v23.4s
  .long  0x6e31fef7                          // fdiv          v23.4s, v23.4s, v17.4s
  .long  0x4e20f473                          // fmax          v19.4s, v3.4s, v0.4s
  .long  0x4eb21e59                          // mov           v25.16b, v18.16b
  .long  0x4e37d697                          // fadd          v23.4s, v20.4s, v23.4s
  .long  0x4e33f453                          // fmax          v19.4s, v2.4s, v19.4s
  .long  0x6e771c59                          // bsl           v25.16b, v2.16b, v23.16b
  .long  0x4eb4d462                          // fsub          v2.4s, v3.4s, v20.4s
  .long  0x6e22de82                          // fmul          v2.4s, v20.4s, v2.4s
  .long  0x6e31fc42                          // fdiv          v2.4s, v2.4s, v17.4s
  .long  0x4eb21e57                          // mov           v23.16b, v18.16b
  .long  0x4e22d682                          // fadd          v2.4s, v20.4s, v2.4s
  .long  0x6e621c77                          // bsl           v23.16b, v3.16b, v2.16b
  .long  0x4eb4d403                          // fsub          v3.4s, v0.4s, v20.4s
  .long  0x6e23de83                          // fmul          v3.4s, v20.4s, v3.4s
  .long  0x6e31fc63                          // fdiv          v3.4s, v3.4s, v17.4s
  .long  0x4e23d683                          // fadd          v3.4s, v20.4s, v3.4s
  .long  0x6e631c12                          // bsl           v18.16b, v0.16b, v3.16b
  .long  0x4eb4d61b                          // fsub          v27.4s, v16.4s, v20.4s
  .long  0x4eb4d720                          // fsub          v0.4s, v25.4s, v20.4s
  .long  0x4eb4d6e3                          // fsub          v3.4s, v23.4s, v20.4s
  .long  0x4eb4d651                          // fsub          v17.4s, v18.4s, v20.4s
  .long  0x6eb0e675                          // fcmgt         v21.4s, v19.4s, v16.4s
  .long  0x4eb4d673                          // fsub          v19.4s, v19.4s, v20.4s
  .long  0x6e20df60                          // fmul          v0.4s, v27.4s, v0.4s
  .long  0x6e23df63                          // fmul          v3.4s, v27.4s, v3.4s
  .long  0x6e31df71                          // fmul          v17.4s, v27.4s, v17.4s
  .long  0x6e33fc00                          // fdiv          v0.4s, v0.4s, v19.4s
  .long  0x6e33fc63                          // fdiv          v3.4s, v3.4s, v19.4s
  .long  0x6e33fe31                          // fdiv          v17.4s, v17.4s, v19.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb51ea2                          // mov           v2.16b, v21.16b
  .long  0x4eb51ebb                          // mov           v27.16b, v21.16b
  .long  0x4e20d680                          // fadd          v0.4s, v20.4s, v0.4s
  .long  0x4e23d683                          // fadd          v3.4s, v20.4s, v3.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x6f00e416                          // movi          v22.2d, #0x0
  .long  0x6e791c02                          // bsl           v2.16b, v0.16b, v25.16b
  .long  0x6e771c7b                          // bsl           v27.16b, v3.16b, v23.16b
  .long  0x6e721e35                          // bsl           v21.16b, v17.16b, v18.16b
  .long  0x4e36f440                          // fmax          v0.4s, v2.4s, v22.4s
  .long  0x4e36f762                          // fmax          v2.4s, v27.4s, v22.4s
  .long  0x4e36f6a3                          // fmax          v3.4s, v21.4s, v22.4s
  .long  0x4e20d780                          // fadd          v0.4s, v28.4s, v0.4s
  .long  0x4e22d421                          // fadd          v1.4s, v1.4s, v2.4s
  .long  0x4e23d742                          // fadd          v2.4s, v26.4s, v3.4s
  .long  0x4eb0d703                          // fsub          v3.4s, v24.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_srcover_rgba_8888_aarch64
.globl _sk_srcover_rgba_8888_aarch64
FUNCTION(_sk_srcover_rgba_8888_aarch64)
_sk_srcover_rgba_8888_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020908                          // add           x8, x8, x2, lsl #2
  .long  0xb5000504                          // cbnz          x4, 115c <sk_srcover_rgba_8888_aarch64+0xac>
  .long  0x3dc00104                          // ldr           q4, [x8]
  .long  0x6f00e625                          // movi          v5.2d, #0xff000000ff
  .long  0x6f380486                          // ushr          v6.4s, v4.4s, #8
  .long  0x6f300487                          // ushr          v7.4s, v4.4s, #16
  .long  0x6f280490                          // ushr          v16.4s, v4.4s, #24
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x52a86fe9                          // mov           w9, #0x437f0000
  .long  0x4e251cc6                          // and           v6.16b, v6.16b, v5.16b
  .long  0x4e251cf2                          // and           v18.16b, v7.16b, v5.16b
  .long  0x4e21da07                          // scvtf         v7.4s, v16.4s
  .long  0x4ea3d630                          // fsub          v16.4s, v17.4s, v3.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e251c84                          // and           v4.16b, v4.16b, v5.16b
  .long  0x4e21d8c5                          // scvtf         v5.4s, v6.4s
  .long  0x6e31dc21                          // fmul          v1.4s, v1.4s, v17.4s
  .long  0x4e21d884                          // scvtf         v4.4s, v4.4s
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x4e25ce01                          // fmla          v1.4s, v16.4s, v5.4s
  .long  0x4e21da46                          // scvtf         v6.4s, v18.4s
  .long  0x6e31dc42                          // fmul          v2.4s, v2.4s, v17.4s
  .long  0x6e31dc63                          // fmul          v3.4s, v3.4s, v17.4s
  .long  0x4e24ce00                          // fmla          v0.4s, v16.4s, v4.4s
  .long  0x6e21a831                          // fcvtnu        v17.4s, v1.4s
  .long  0x4e26ce02                          // fmla          v2.4s, v16.4s, v6.4s
  .long  0x4e27ce03                          // fmla          v3.4s, v16.4s, v7.4s
  .long  0x6e21a810                          // fcvtnu        v16.4s, v0.4s
  .long  0x4f285631                          // shl           v17.4s, v17.4s, #8
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0x6e21a851                          // fcvtnu        v17.4s, v2.4s
  .long  0x4f305631                          // shl           v17.4s, v17.4s, #16
  .long  0x4eb11e10                          // orr           v16.16b, v16.16b, v17.16b
  .long  0x6e21a871                          // fcvtnu        v17.4s, v3.4s
  .long  0x4f385631                          // shl           v17.4s, v17.4s, #24
  .long  0x4eb11e10                          // orr           v16.16b, v16.16b, v17.16b
  .long  0xb5000284                          // cbnz          x4, 1198 <sk_srcover_rgba_8888_aarch64+0xe8>
  .long  0x3d800110                          // str           q16, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x6f00e404                          // movi          v4.2d, #0x0
  .long  0x54000140                          // b.eq          1190 <sk_srcover_rgba_8888_aarch64+0xe0>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          1188 <sk_srcover_rgba_8888_aarch64+0xd8>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffa61                          // b.ne          10c4 <sk_srcover_rgba_8888_aarch64+0x14>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4e040fe4                          // dup           v4.4s, wzr
  .long  0x4d408124                          // ld1           {v4.s}[2], [x9]
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0d409124                          // ld1           {v4.s}[1], [x9]
  .long  0x0d408104                          // ld1           {v4.s}[0], [x8]
  .long  0x17ffffcc                          // b             10c4 <sk_srcover_rgba_8888_aarch64+0x14>
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000120                          // b.eq          11c4 <sk_srcover_rgba_8888_aarch64+0x114>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          11bc <sk_srcover_rgba_8888_aarch64+0x10c>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd01                          // b.ne          1150 <sk_srcover_rgba_8888_aarch64+0xa0>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4d008130                          // st1           {v16.s}[2], [x9]
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0d009130                          // st1           {v16.s}[1], [x9]
  .long  0x0d008110                          // st1           {v16.s}[0], [x8]
  .long  0x17ffffe2                          // b             1150 <sk_srcover_rgba_8888_aarch64+0xa0>

HIDDEN _sk_clamp_0_aarch64
.globl _sk_clamp_0_aarch64
FUNCTION(_sk_clamp_0_aarch64)
_sk_clamp_0_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x4e30f400                          // fmax          v0.4s, v0.4s, v16.4s
  .long  0x4e30f421                          // fmax          v1.4s, v1.4s, v16.4s
  .long  0x4e30f442                          // fmax          v2.4s, v2.4s, v16.4s
  .long  0x4e30f463                          // fmax          v3.4s, v3.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_1_aarch64
.globl _sk_clamp_1_aarch64
FUNCTION(_sk_clamp_1_aarch64)
_sk_clamp_1_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0x4eb0f421                          // fmin          v1.4s, v1.4s, v16.4s
  .long  0x4eb0f442                          // fmin          v2.4s, v2.4s, v16.4s
  .long  0x4eb0f463                          // fmin          v3.4s, v3.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_a_aarch64
.globl _sk_clamp_a_aarch64
FUNCTION(_sk_clamp_a_aarch64)
_sk_clamp_a_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f463                          // fmin          v3.4s, v3.4s, v16.4s
  .long  0x4ea3f400                          // fmin          v0.4s, v0.4s, v3.4s
  .long  0x4ea3f421                          // fmin          v1.4s, v1.4s, v3.4s
  .long  0x4ea3f442                          // fmin          v2.4s, v2.4s, v3.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_set_rgb_aarch64
.globl _sk_set_rgb_aarch64
FUNCTION(_sk_set_rgb_aarch64)
_sk_set_rgb_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x4ddfc920                          // ld1r          {v0.4s}, [x9], #4
  .long  0x91002108                          // add           x8, x8, #0x8
  .long  0x4d40c902                          // ld1r          {v2.4s}, [x8]
  .long  0x4d40c921                          // ld1r          {v1.4s}, [x9]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_swap_rb_aarch64
.globl _sk_swap_rb_aarch64
FUNCTION(_sk_swap_rb_aarch64)
_sk_swap_rb_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea01c10                          // mov           v16.16b, v0.16b
  .long  0x4ea21c40                          // mov           v0.16b, v2.16b
  .long  0x4eb01e02                          // mov           v2.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_swap_aarch64
.globl _sk_swap_aarch64
FUNCTION(_sk_swap_aarch64)
_sk_swap_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea31c70                          // mov           v16.16b, v3.16b
  .long  0x4ea21c51                          // mov           v17.16b, v2.16b
  .long  0x4ea11c32                          // mov           v18.16b, v1.16b
  .long  0x4ea01c13                          // mov           v19.16b, v0.16b
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0x4eb31e64                          // mov           v4.16b, v19.16b
  .long  0x4eb21e45                          // mov           v5.16b, v18.16b
  .long  0x4eb11e26                          // mov           v6.16b, v17.16b
  .long  0x4eb01e07                          // mov           v7.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_move_src_dst_aarch64
.globl _sk_move_src_dst_aarch64
FUNCTION(_sk_move_src_dst_aarch64)
_sk_move_src_dst_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea01c04                          // mov           v4.16b, v0.16b
  .long  0x4ea11c25                          // mov           v5.16b, v1.16b
  .long  0x4ea21c46                          // mov           v6.16b, v2.16b
  .long  0x4ea31c67                          // mov           v7.16b, v3.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_move_dst_src_aarch64
.globl _sk_move_dst_src_aarch64
FUNCTION(_sk_move_dst_src_aarch64)
_sk_move_dst_src_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_premul_aarch64
.globl _sk_premul_aarch64
FUNCTION(_sk_premul_aarch64)
_sk_premul_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x6e23dc21                          // fmul          v1.4s, v1.4s, v3.4s
  .long  0x6e23dc42                          // fmul          v2.4s, v2.4s, v3.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_unpremul_aarch64
.globl _sk_unpremul_aarch64
FUNCTION(_sk_unpremul_aarch64)
_sk_unpremul_aarch64:
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4ea0d870                          // fcmeq         v16.4s, v3.4s, #0.0
  .long  0x6e23fe31                          // fdiv          v17.4s, v17.4s, v3.4s
  .long  0x4e701e30                          // bic           v16.16b, v17.16b, v16.16b
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_from_srgb_aarch64
.globl _sk_from_srgb_aarch64
FUNCTION(_sk_from_srgb_aarch64)
_sk_from_srgb_aarch64:
  .long  0x52a7d328                          // mov           w8, #0x3e990000
  .long  0x72933348                          // movk          w8, #0x999a
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a7e648                          // mov           w8, #0x3f320000
  .long  0x7291eb88                          // movk          w8, #0x8f5c
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a76468                          // mov           w8, #0x3b230000
  .long  0x729ae148                          // movk          w8, #0xd70a
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7b3c8                          // mov           w8, #0x3d9e0000
  .long  0x72907228                          // movk          w8, #0x8391
  .long  0x6e22dc54                          // fmul          v20.4s, v2.4s, v2.4s
  .long  0x4eb11e35                          // mov           v21.16b, v17.16b
  .long  0x4eb11e37                          // mov           v23.16b, v17.16b
  .long  0x4e22ce11                          // fmla          v17.4s, v16.4s, v2.4s
  .long  0x4eb21e56                          // mov           v22.16b, v18.16b
  .long  0x4eb21e58                          // mov           v24.16b, v18.16b
  .long  0x4e34ce32                          // fmla          v18.4s, v17.4s, v20.4s
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7ac28                          // mov           w8, #0x3d610000
  .long  0x6e20dc13                          // fmul          v19.4s, v0.4s, v0.4s
  .long  0x7288f5c8                          // movk          w8, #0x47ae
  .long  0x4e20ce15                          // fmla          v21.4s, v16.4s, v0.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e21dc34                          // fmul          v20.4s, v1.4s, v1.4s
  .long  0x4e33ceb6                          // fmla          v22.4s, v21.4s, v19.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e21ce17                          // fmla          v23.4s, v16.4s, v1.4s
  .long  0x6e31dc15                          // fmul          v21.4s, v0.4s, v17.4s
  .long  0x6ea0e660                          // fcmgt         v0.4s, v19.4s, v0.4s
  .long  0x6e31dc30                          // fmul          v16.4s, v1.4s, v17.4s
  .long  0x6ea1e661                          // fcmgt         v1.4s, v19.4s, v1.4s
  .long  0x6e31dc51                          // fmul          v17.4s, v2.4s, v17.4s
  .long  0x6ea2e662                          // fcmgt         v2.4s, v19.4s, v2.4s
  .long  0x4e34cef8                          // fmla          v24.4s, v23.4s, v20.4s
  .long  0x6e761ea0                          // bsl           v0.16b, v21.16b, v22.16b
  .long  0x6e781e01                          // bsl           v1.16b, v16.16b, v24.16b
  .long  0x6e721e22                          // bsl           v2.16b, v17.16b, v18.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_to_srgb_aarch64
.globl _sk_to_srgb_aarch64
FUNCTION(_sk_to_srgb_aarch64)
_sk_to_srgb_aarch64:
  .long  0x52a829c8                          // mov           w8, #0x414e0000
  .long  0x72970a48                          // movk          w8, #0xb852
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52b76408                          // mov           w8, #0xbb200000
  .long  0x729ae728                          // movk          w8, #0xd739
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a77308                          // mov           w8, #0x3b980000
  .long  0x72963508                          // movk          w8, #0xb1a8
  .long  0x6ea1d810                          // frsqrte       v16.4s, v0.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a78c48                          // mov           w8, #0x3c620000
  .long  0x6ea1d834                          // frsqrte       v20.4s, v1.4s
  .long  0x6ea1d855                          // frsqrte       v21.4s, v2.4s
  .long  0x7293f748                          // movk          w8, #0x9fba
  .long  0x6e30de16                          // fmul          v22.4s, v16.4s, v16.4s
  .long  0x6e34de97                          // fmul          v23.4s, v20.4s, v20.4s
  .long  0x6e35deb8                          // fmul          v24.4s, v21.4s, v21.4s
  .long  0x4eb6fc16                          // frsqrts       v22.4s, v0.4s, v22.4s
  .long  0x6e31dc19                          // fmul          v25.4s, v0.4s, v17.4s
  .long  0x6ea0e660                          // fcmgt         v0.4s, v19.4s, v0.4s
  .long  0x4eb7fc37                          // frsqrts       v23.4s, v1.4s, v23.4s
  .long  0x6e31dc3a                          // fmul          v26.4s, v1.4s, v17.4s
  .long  0x6ea1e661                          // fcmgt         v1.4s, v19.4s, v1.4s
  .long  0x4eb8fc58                          // frsqrts       v24.4s, v2.4s, v24.4s
  .long  0x6e31dc51                          // fmul          v17.4s, v2.4s, v17.4s
  .long  0x6ea2e662                          // fcmgt         v2.4s, v19.4s, v2.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a7f208                          // mov           w8, #0x3f900000
  .long  0x72947ae8                          // movk          w8, #0xa3d7
  .long  0x6e36de10                          // fmul          v16.4s, v16.4s, v22.4s
  .long  0x4e040d16                          // dup           v22.4s, w8
  .long  0x6e37de94                          // fmul          v20.4s, v20.4s, v23.4s
  .long  0x4eb31e77                          // mov           v23.16b, v19.16b
  .long  0x6e38deb5                          // fmul          v21.4s, v21.4s, v24.4s
  .long  0x4eb31e78                          // mov           v24.16b, v19.16b
  .long  0x52a7c208                          // mov           w8, #0x3e100000
  .long  0x4e30ce57                          // fmla          v23.4s, v18.4s, v16.4s
  .long  0x4e34ce58                          // fmla          v24.4s, v18.4s, v20.4s
  .long  0x4e35ce53                          // fmla          v19.4s, v18.4s, v21.4s
  .long  0x4eb61ed2                          // mov           v18.16b, v22.16b
  .long  0x7298c988                          // movk          w8, #0xc64c
  .long  0x4e30cef2                          // fmla          v18.4s, v23.4s, v16.4s
  .long  0x4eb61ed7                          // mov           v23.16b, v22.16b
  .long  0x4e35ce76                          // fmla          v22.4s, v19.4s, v21.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e33d610                          // fadd          v16.4s, v16.4s, v19.4s
  .long  0x4e34cf17                          // fmla          v23.4s, v24.4s, v20.4s
  .long  0x4e33d694                          // fadd          v20.4s, v20.4s, v19.4s
  .long  0x4e33d6b3                          // fadd          v19.4s, v21.4s, v19.4s
  .long  0x4ea1da15                          // frecpe        v21.4s, v16.4s
  .long  0x4e35fe10                          // frecps        v16.4s, v16.4s, v21.4s
  .long  0x6e30deb0                          // fmul          v16.4s, v21.4s, v16.4s
  .long  0x4ea1da95                          // frecpe        v21.4s, v20.4s
  .long  0x4e35fe94                          // frecps        v20.4s, v20.4s, v21.4s
  .long  0x6e34deb4                          // fmul          v20.4s, v21.4s, v20.4s
  .long  0x4ea1da75                          // frecpe        v21.4s, v19.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e35fe73                          // frecps        v19.4s, v19.4s, v21.4s
  .long  0x6e33deb3                          // fmul          v19.4s, v21.4s, v19.4s
  .long  0x6e30de50                          // fmul          v16.4s, v18.4s, v16.4s
  .long  0x6e34def2                          // fmul          v18.4s, v23.4s, v20.4s
  .long  0x6e33ded3                          // fmul          v19.4s, v22.4s, v19.4s
  .long  0x6e701f20                          // bsl           v0.16b, v25.16b, v16.16b
  .long  0x6e721f41                          // bsl           v1.16b, v26.16b, v18.16b
  .long  0x6e731e22                          // bsl           v2.16b, v17.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_rgb_to_hsl_aarch64
.globl _sk_rgb_to_hsl_aarch64
FUNCTION(_sk_rgb_to_hsl_aarch64)
_sk_rgb_to_hsl_aarch64:
  .long  0x4e21f410                          // fmax          v16.4s, v0.4s, v1.4s
  .long  0x4ea1f411                          // fmin          v17.4s, v0.4s, v1.4s
  .long  0x6ea1e454                          // fcmgt         v20.4s, v2.4s, v1.4s
  .long  0x4f00f715                          // fmov          v21.4s, #6.000000000000000000e+00
  .long  0x4e22f610                          // fmax          v16.4s, v16.4s, v2.4s
  .long  0x4ea2f631                          // fmin          v17.4s, v17.4s, v2.4s
  .long  0x4f03f612                          // fmov          v18.4s, #1.000000000000000000e+00
  .long  0x4e341eb4                          // and           v20.16b, v21.16b, v20.16b
  .long  0x4eb1d615                          // fsub          v21.4s, v16.4s, v17.4s
  .long  0x4ea2d433                          // fsub          v19.4s, v1.4s, v2.4s
  .long  0x4ea0d456                          // fsub          v22.4s, v2.4s, v0.4s
  .long  0x4f026417                          // movi          v23.4s, #0x40, lsl #24
  .long  0x6e35fe42                          // fdiv          v2.4s, v18.4s, v21.4s
  .long  0x4ea1d418                          // fsub          v24.4s, v0.4s, v1.4s
  .long  0x4f00f619                          // fmov          v25.4s, #4.000000000000000000e+00
  .long  0x4f0167fa                          // movi          v26.4s, #0x3f, lsl #24
  .long  0x4eb0d6f2                          // fsub          v18.4s, v23.4s, v16.4s
  .long  0x4e36cc57                          // fmla          v23.4s, v2.4s, v22.4s
  .long  0x4e31e616                          // fcmeq         v22.4s, v16.4s, v17.4s
  .long  0x4e20e600                          // fcmeq         v0.4s, v16.4s, v0.4s
  .long  0x4e21e601                          // fcmeq         v1.4s, v16.4s, v1.4s
  .long  0x4e31d610                          // fadd          v16.4s, v16.4s, v17.4s
  .long  0x52a7c548                          // mov           w8, #0x3e2a0000
  .long  0x4e33cc54                          // fmla          v20.4s, v2.4s, v19.4s
  .long  0x4e38cc59                          // fmla          v25.4s, v2.4s, v24.4s
  .long  0x6e3ade02                          // fmul          v2.4s, v16.4s, v26.4s
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb1d651                          // fsub          v17.4s, v18.4s, v17.4s
  .long  0x6ebae452                          // fcmgt         v18.4s, v2.4s, v26.4s
  .long  0x6e791ee1                          // bsl           v1.16b, v23.16b, v25.16b
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x6e701e32                          // bsl           v18.16b, v17.16b, v16.16b
  .long  0x6e611e80                          // bsl           v0.16b, v20.16b, v1.16b
  .long  0x6e32fea1                          // fdiv          v1.4s, v21.4s, v18.4s
  .long  0x6e33dc00                          // fmul          v0.4s, v0.4s, v19.4s
  .long  0x4e761c00                          // bic           v0.16b, v0.16b, v22.16b
  .long  0x4e761c21                          // bic           v1.16b, v1.16b, v22.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_hsl_to_rgb_aarch64
.globl _sk_hsl_to_rgb_aarch64
FUNCTION(_sk_hsl_to_rgb_aarch64)
_sk_hsl_to_rgb_aarch64:
  .long  0x52a7d548                          // mov           w8, #0x3eaa0000
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x4e040d14                          // dup           v20.4s, w8
  .long  0x52a7e548                          // mov           w8, #0x3f2a0000
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x4f0167f1                          // movi          v17.4s, #0x3f, lsl #24
  .long  0x6e22dc32                          // fmul          v18.4s, v1.4s, v2.4s
  .long  0x4e040d17                          // dup           v23.4s, w8
  .long  0x52b7d548                          // mov           w8, #0xbeaa0000
  .long  0x4ea0d830                          // fcmeq         v16.4s, v1.4s, #0.0
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x6e31e45a                          // fcmge         v26.4s, v2.4s, v17.4s
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4e040d18                          // dup           v24.4s, w8
  .long  0x4e219819                          // frintm        v25.4s, v0.4s
  .long  0x6e721c3a                          // bsl           v26.16b, v1.16b, v18.16b
  .long  0x4e34d401                          // fadd          v1.4s, v0.4s, v20.4s
  .long  0x4eb9d419                          // fsub          v25.4s, v0.4s, v25.4s
  .long  0x4e38d400                          // fadd          v0.4s, v0.4s, v24.4s
  .long  0x4e22d754                          // fadd          v20.4s, v26.4s, v2.4s
  .long  0x4e219838                          // frintm        v24.4s, v1.4s
  .long  0x4f026413                          // movi          v19.4s, #0x40, lsl #24
  .long  0x4f00f715                          // fmov          v21.4s, #6.000000000000000000e+00
  .long  0x4e21981b                          // frintm        v27.4s, v0.4s
  .long  0x6ea0fa9c                          // fneg          v28.4s, v20.4s
  .long  0x4eb8d421                          // fsub          v1.4s, v1.4s, v24.4s
  .long  0x4f00f616                          // fmov          v22.4s, #4.000000000000000000e+00
  .long  0x4ebbd418                          // fsub          v24.4s, v0.4s, v27.4s
  .long  0x4e22ce7c                          // fmla          v28.4s, v19.4s, v2.4s
  .long  0x6e35dc20                          // fmul          v0.4s, v1.4s, v21.4s
  .long  0x6e35df32                          // fmul          v18.4s, v25.4s, v21.4s
  .long  0x6e35df13                          // fmul          v19.4s, v24.4s, v21.4s
  .long  0x4ebcd695                          // fsub          v21.4s, v20.4s, v28.4s
  .long  0x4ea0d6db                          // fsub          v27.4s, v22.4s, v0.4s
  .long  0x4ebc1f9d                          // mov           v29.16b, v28.16b
  .long  0x4e3bcebd                          // fmla          v29.4s, v21.4s, v27.4s
  .long  0x4ebc1f9b                          // mov           v27.16b, v28.16b
  .long  0x4eb2d6da                          // fsub          v26.4s, v22.4s, v18.4s
  .long  0x4e20cebb                          // fmla          v27.4s, v21.4s, v0.4s
  .long  0x4ebc1f80                          // mov           v0.16b, v28.16b
  .long  0x4e3acea0                          // fmla          v0.4s, v21.4s, v26.4s
  .long  0x4ebc1f9a                          // mov           v26.16b, v28.16b
  .long  0x4eb3d6d6                          // fsub          v22.4s, v22.4s, v19.4s
  .long  0x4e32ceba                          // fmla          v26.4s, v21.4s, v18.4s
  .long  0x4ebc1f92                          // mov           v18.16b, v28.16b
  .long  0x52a7c548                          // mov           w8, #0x3e2a0000
  .long  0x4e36ceb2                          // fmla          v18.4s, v21.4s, v22.4s
  .long  0x6e37e436                          // fcmge         v22.4s, v1.4s, v23.4s
  .long  0x72955568                          // movk          w8, #0xaaab
  .long  0x6e7d1f96                          // bsl           v22.16b, v28.16b, v29.16b
  .long  0x6e37e73d                          // fcmge         v29.4s, v25.4s, v23.4s
  .long  0x6e37e717                          // fcmge         v23.4s, v24.4s, v23.4s
  .long  0x6e601f9d                          // bsl           v29.16b, v28.16b, v0.16b
  .long  0x4e040d1e                          // dup           v30.4s, w8
  .long  0x6e721f97                          // bsl           v23.16b, v28.16b, v18.16b
  .long  0x4e33cebc                          // fmla          v28.4s, v21.4s, v19.4s
  .long  0x6e31e732                          // fcmge         v18.4s, v25.4s, v17.4s
  .long  0x6e31e435                          // fcmge         v21.4s, v1.4s, v17.4s
  .long  0x6e31e711                          // fcmge         v17.4s, v24.4s, v17.4s
  .long  0x6e3ee718                          // fcmge         v24.4s, v24.4s, v30.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e741ef1                          // bsl           v17.16b, v23.16b, v20.16b
  .long  0x6e3ee733                          // fcmge         v19.4s, v25.4s, v30.4s
  .long  0x6e3ee439                          // fcmge         v25.4s, v1.4s, v30.4s
  .long  0x6e741ed5                          // bsl           v21.16b, v22.16b, v20.16b
  .long  0x6e741fb2                          // bsl           v18.16b, v29.16b, v20.16b
  .long  0x6e7c1e38                          // bsl           v24.16b, v17.16b, v28.16b
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb01e01                          // mov           v1.16b, v16.16b
  .long  0x6e7b1eb9                          // bsl           v25.16b, v21.16b, v27.16b
  .long  0x6e7a1e53                          // bsl           v19.16b, v18.16b, v26.16b
  .long  0x6e781c50                          // bsl           v16.16b, v2.16b, v24.16b
  .long  0x6e791c40                          // bsl           v0.16b, v2.16b, v25.16b
  .long  0x6e731c41                          // bsl           v1.16b, v2.16b, v19.16b
  .long  0x4eb01e02                          // mov           v2.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_scale_1_float_aarch64
.globl _sk_scale_1_float_aarch64
FUNCTION(_sk_scale_1_float_aarch64)
_sk_scale_1_float_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4f909000                          // fmul          v0.4s, v0.4s, v16.s[0]
  .long  0x4f909021                          // fmul          v1.4s, v1.4s, v16.s[0]
  .long  0x4f909042                          // fmul          v2.4s, v2.4s, v16.s[0]
  .long  0x4f909063                          // fmul          v3.4s, v3.4s, v16.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_scale_u8_aarch64
.globl _sk_scale_u8_aarch64
FUNCTION(_sk_scale_u8_aarch64)
_sk_scale_u8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50002e4                          // cbnz          x4, 16e4 <sk_scale_u8_aarch64+0x68>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d30                          // mov           v16.h[0], w9
  .long  0x4e061d50                          // mov           v16.h[1], w10
  .long  0x4e0a1d70                          // mov           v16.h[2], w11
  .long  0x4e0e1d10                          // mov           v16.h[3], w8
  .long  0x2f07b7f0                          // bic           v16.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x2f10a610                          // uxtl          v16.4s, v16.4h
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x6e21da10                          // ucvtf         v16.4s, v16.4s
  .long  0x6e31de10                          // fmul          v16.4s, v16.4s, v17.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x2f00e410                          // movi          d16, #0x0
  .long  0x54000140                          // b.eq          1718 <sk_scale_u8_aarch64+0x9c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          1710 <sk_scale_u8_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd61                          // b.ne          16ac <sk_scale_u8_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x4e0a1d30                          // mov           v16.h[2], w9
  .long  0x39400509                          // ldrb          w9, [x8, #1]
  .long  0x4e061d30                          // mov           v16.h[1], w9
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x4e021d10                          // mov           v16.h[0], w8
  .long  0x17ffffe3                          // b             16ac <sk_scale_u8_aarch64+0x30>

HIDDEN _sk_lerp_1_float_aarch64
.globl _sk_lerp_1_float_aarch64
FUNCTION(_sk_lerp_1_float_aarch64)
_sk_lerp_1_float_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea4d411                          // fsub          v17.4s, v0.4s, v4.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea5d432                          // fsub          v18.4s, v1.4s, v5.4s
  .long  0xbd400110                          // ldr           s16, [x8]
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4f901220                          // fmla          v0.4s, v17.4s, v16.s[0]
  .long  0x4ea6d451                          // fsub          v17.4s, v2.4s, v6.4s
  .long  0x4f901241                          // fmla          v1.4s, v18.4s, v16.s[0]
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea7d472                          // fsub          v18.4s, v3.4s, v7.4s
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0x4f901222                          // fmla          v2.4s, v17.4s, v16.s[0]
  .long  0x4f901243                          // fmla          v3.4s, v18.4s, v16.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_lerp_u8_aarch64
.globl _sk_lerp_u8_aarch64
FUNCTION(_sk_lerp_u8_aarch64)
_sk_lerp_u8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50003e4                          // cbnz          x4, 17e8 <sk_lerp_u8_aarch64+0x88>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d30                          // mov           v16.h[0], w9
  .long  0x4e061d50                          // mov           v16.h[1], w10
  .long  0x4e0a1d70                          // mov           v16.h[2], w11
  .long  0x4e0e1d10                          // mov           v16.h[3], w8
  .long  0x2f07b7f0                          // bic           v16.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x4ea4d411                          // fsub          v17.4s, v0.4s, v4.4s
  .long  0x2f10a600                          // uxtl          v0.4s, v16.4h
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x6e30dc10                          // fmul          v16.4s, v0.4s, v16.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4ea5d432                          // fsub          v18.4s, v1.4s, v5.4s
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4e31ce00                          // fmla          v0.4s, v16.4s, v17.4s
  .long  0x4ea6d451                          // fsub          v17.4s, v2.4s, v6.4s
  .long  0x4e32ce01                          // fmla          v1.4s, v16.4s, v18.4s
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4ea7d472                          // fsub          v18.4s, v3.4s, v7.4s
  .long  0x4ea71ce3                          // mov           v3.16b, v7.16b
  .long  0x4e31ce02                          // fmla          v2.4s, v16.4s, v17.4s
  .long  0x4e32ce03                          // fmla          v3.4s, v16.4s, v18.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x2f00e410                          // movi          d16, #0x0
  .long  0x54000140                          // b.eq          181c <sk_lerp_u8_aarch64+0xbc>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          1814 <sk_lerp_u8_aarch64+0xb4>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffc61                          // b.ne          1790 <sk_lerp_u8_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x4e0a1d30                          // mov           v16.h[2], w9
  .long  0x39400509                          // ldrb          w9, [x8, #1]
  .long  0x4e061d30                          // mov           v16.h[1], w9
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x4e021d10                          // mov           v16.h[0], w8
  .long  0x17ffffdb                          // b             1790 <sk_lerp_u8_aarch64+0x30>

HIDDEN _sk_lerp_565_aarch64
.globl _sk_lerp_565_aarch64
FUNCTION(_sk_lerp_565_aarch64)
_sk_lerp_565_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0xb50005c4                          // cbnz          x4, 18ec <sk_lerp_565_aarch64+0xc4>
  .long  0xfd400110                          // ldr           d16, [x8]
  .long  0x321b17e8                          // orr           w8, wzr, #0x7e0
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a6f088                          // mov           w8, #0x37840000
  .long  0x2f10a610                          // uxtl          v16.4s, v16.4h
  .long  0x4f072711                          // movi          v17.4s, #0xf8, lsl #8
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4f0007f3                          // movi          v19.4s, #0x1f
  .long  0x4e311e11                          // and           v17.16b, v16.16b, v17.16b
  .long  0x4e331e13                          // and           v19.16b, v16.16b, v19.16b
  .long  0x4e321e10                          // and           v16.16b, v16.16b, v18.16b
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7a088                          // mov           w8, #0x3d040000
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4e21da31                          // scvtf         v17.4s, v17.4s
  .long  0x6e32de31                          // fmul          v17.4s, v17.4s, v18.4s
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a74048                          // mov           w8, #0x3a020000
  .long  0x72810428                          // movk          w8, #0x821
  .long  0x4ea4d414                          // fsub          v20.4s, v0.4s, v4.4s
  .long  0x4e21da60                          // scvtf         v0.4s, v19.4s
  .long  0x6e32dc12                          // fmul          v18.4s, v0.4s, v18.4s
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e20de10                          // fmul          v16.4s, v16.4s, v0.4s
  .long  0x4ea41c80                          // mov           v0.16b, v4.16b
  .long  0x4e34ce20                          // fmla          v0.4s, v17.4s, v20.4s
  .long  0x4ea7d463                          // fsub          v3.4s, v3.4s, v7.4s
  .long  0x4ea71cf4                          // mov           v20.16b, v7.16b
  .long  0x4ea5d433                          // fsub          v19.4s, v1.4s, v5.4s
  .long  0x4ea6d441                          // fsub          v1.4s, v2.4s, v6.4s
  .long  0x4ea61cc2                          // mov           v2.16b, v6.16b
  .long  0x4e23ce34                          // fmla          v20.4s, v17.4s, v3.4s
  .long  0x4ea71cf1                          // mov           v17.16b, v7.16b
  .long  0x4e21ce42                          // fmla          v2.4s, v18.4s, v1.4s
  .long  0x4e23ce51                          // fmla          v17.4s, v18.4s, v3.4s
  .long  0x4ea71cf2                          // mov           v18.16b, v7.16b
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e23ce12                          // fmla          v18.4s, v16.4s, v3.4s
  .long  0x4ea51ca1                          // mov           v1.16b, v5.16b
  .long  0x4e31f643                          // fmax          v3.4s, v18.4s, v17.4s
  .long  0x4e33ce01                          // fmla          v1.4s, v16.4s, v19.4s
  .long  0x4e23f683                          // fmax          v3.4s, v20.4s, v3.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x2f00e410                          // movi          d16, #0x0
  .long  0x54000140                          // b.eq          1920 <sk_lerp_565_aarch64+0xf8>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          1918 <sk_lerp_565_aarch64+0xf0>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fff9a1                          // b.ne          183c <sk_lerp_565_aarch64+0x14>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0e020ff0                          // dup           v16.4h, wzr
  .long  0x0d405130                          // ld1           {v16.h}[2], [x9]
  .long  0x91000909                          // add           x9, x8, #0x2
  .long  0x0d404930                          // ld1           {v16.h}[1], [x9]
  .long  0x0d404110                          // ld1           {v16.h}[0], [x8]
  .long  0x17ffffc6                          // b             183c <sk_lerp_565_aarch64+0x14>

HIDDEN _sk_load_tables_aarch64
.globl _sk_load_tables_aarch64
FUNCTION(_sk_load_tables_aarch64)
_sk_load_tables_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0x8b020929                          // add           x9, x9, x2, lsl #2
  .long  0xb50006e4                          // cbnz          x4, 1a10 <sk_load_tables_aarch64+0xe8>
  .long  0x3dc00122                          // ldr           q2, [x9]
  .long  0xa940a909                          // ldp           x9, x10, [x8, #8]
  .long  0x6f00e620                          // movi          v0.2d, #0xff000000ff
  .long  0x6f380441                          // ushr          v1.4s, v2.4s, #8
  .long  0x4e201c50                          // and           v16.16b, v2.16b, v0.16b
  .long  0x4e201c21                          // and           v1.16b, v1.16b, v0.16b
  .long  0x1e26020e                          // fmov          w14, s16
  .long  0xf9400d08                          // ldr           x8, [x8, #24]
  .long  0x6f300443                          // ushr          v3.4s, v2.4s, #16
  .long  0x1e260032                          // fmov          w18, s1
  .long  0x8b2e492e                          // add           x14, x9, w14, uxtw #2
  .long  0x52a7700b                          // mov           w11, #0x3b800000
  .long  0x4e201c63                          // and           v3.16b, v3.16b, v0.16b
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x8b324952                          // add           x18, x10, w18, uxtw #2
  .long  0x7290102b                          // movk          w11, #0x8081
  .long  0x0e0c3c2f                          // mov           w15, v1.s[1]
  .long  0x0e143c30                          // mov           w16, v1.s[2]
  .long  0x0e1c3c31                          // mov           w17, v1.s[3]
  .long  0x0d408241                          // ld1           {v1.s}[0], [x18]
  .long  0x4e040d71                          // dup           v17.4s, w11
  .long  0x0e0c3e0b                          // mov           w11, v16.s[1]
  .long  0x1e26006e                          // fmov          w14, s3
  .long  0x6f280442                          // ushr          v2.4s, v2.4s, #24
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0xbc705952                          // ldr           s18, [x10, w16, uxtw #2]
  .long  0x0e143c70                          // mov           w16, v3.s[2]
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x8b2e490e                          // add           x14, x8, w14, uxtw #2
  .long  0x8b2b492b                          // add           x11, x9, w11, uxtw #2
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0xbc6c5930                          // ldr           s16, [x9, w12, uxtw #2]
  .long  0x0e0c3c6c                          // mov           w12, v3.s[1]
  .long  0xbc705913                          // ldr           s19, [x8, w16, uxtw #2]
  .long  0x0e1c3c70                          // mov           w16, v3.s[3]
  .long  0x6e31dc43                          // fmul          v3.4s, v2.4s, v17.4s
  .long  0x0d4081c2                          // ld1           {v2.s}[0], [x14]
  .long  0x0d409160                          // ld1           {v0.s}[1], [x11]
  .long  0x8b2f494b                          // add           x11, x10, w15, uxtw #2
  .long  0x0d409161                          // ld1           {v1.s}[1], [x11]
  .long  0x8b2c490b                          // add           x11, x8, w12, uxtw #2
  .long  0x0d409162                          // ld1           {v2.s}[1], [x11]
  .long  0x6e140600                          // mov           v0.s[2], v16.s[0]
  .long  0xbc6d5930                          // ldr           s16, [x9, w13, uxtw #2]
  .long  0x6e140641                          // mov           v1.s[2], v18.s[0]
  .long  0xbc715951                          // ldr           s17, [x10, w17, uxtw #2]
  .long  0xbc705912                          // ldr           s18, [x8, w16, uxtw #2]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x6e140662                          // mov           v2.s[2], v19.s[0]
  .long  0x6e1c0600                          // mov           v0.s[3], v16.s[0]
  .long  0x6e1c0621                          // mov           v1.s[3], v17.s[0]
  .long  0x6e1c0642                          // mov           v2.s[3], v18.s[0]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x1200048a                          // and           w10, w4, #0x3
  .long  0x7100055f                          // cmp           w10, #0x1
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0x54000140                          // b.eq          1a44 <sk_load_tables_aarch64+0x11c>  // b.none
  .long  0x7100095f                          // cmp           w10, #0x2
  .long  0x540000c0                          // b.eq          1a3c <sk_load_tables_aarch64+0x114>  // b.none
  .long  0x71000d5f                          // cmp           w10, #0x3
  .long  0x54fff881                          // b.ne          193c <sk_load_tables_aarch64+0x14>  // b.any
  .long  0x9100212a                          // add           x10, x9, #0x8
  .long  0x4e040fe2                          // dup           v2.4s, wzr
  .long  0x4d408142                          // ld1           {v2.s}[2], [x10]
  .long  0x9100112a                          // add           x10, x9, #0x4
  .long  0x0d409142                          // ld1           {v2.s}[1], [x10]
  .long  0x0d408122                          // ld1           {v2.s}[0], [x9]
  .long  0x17ffffbd                          // b             193c <sk_load_tables_aarch64+0x14>

HIDDEN _sk_load_tables_u16_be_aarch64
.globl _sk_load_tables_u16_be_aarch64
FUNCTION(_sk_load_tables_u16_be_aarch64)
_sk_load_tables_u16_be_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0x8b020d29                          // add           x9, x9, x2, lsl #3
  .long  0xb5000744                          // cbnz          x4, 1b40 <sk_load_tables_u16_be_aarch64+0xf4>
  .long  0x0c400520                          // ld4           {v0.4h-v3.4h}, [x9]
  .long  0xa940a909                          // ldp           x9, x10, [x8, #8]
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x52a6f00b                          // mov           w11, #0x37800000
  .long  0x7280100b                          // movk          w11, #0x80
  .long  0x2f10a410                          // uxtl          v16.4s, v0.4h
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0xf9400d08                          // ldr           x8, [x8, #24]
  .long  0x4e040d71                          // dup           v17.4s, w11
  .long  0x0e0c3e0b                          // mov           w11, v16.s[1]
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0x1e26020e                          // fmov          w14, s16
  .long  0x2f10a430                          // uxtl          v16.4s, v1.4h
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x0e0c3e0f                          // mov           w15, v16.s[1]
  .long  0xbc6c5932                          // ldr           s18, [x9, w12, uxtw #2]
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0xbc6d5933                          // ldr           s19, [x9, w13, uxtw #2]
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0x8b2e492e                          // add           x14, x9, w14, uxtw #2
  .long  0x8b2b4929                          // add           x9, x9, w11, uxtw #2
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x2f10a450                          // uxtl          v16.4s, v2.4h
  .long  0x0f185474                          // shl           v20.4h, v3.4h, #8
  .long  0x2f180462                          // ushr          v2.4h, v3.4h, #8
  .long  0x0ea21e82                          // orr           v2.8b, v20.8b, v2.8b
  .long  0x8b2b494b                          // add           x11, x10, w11, uxtw #2
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x1e26020e                          // fmov          w14, s16
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x0d408161                          // ld1           {v1.s}[0], [x11]
  .long  0x8b2e490b                          // add           x11, x8, w14, uxtw #2
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e31dc43                          // fmul          v3.4s, v2.4s, v17.4s
  .long  0x0d408162                          // ld1           {v2.s}[0], [x11]
  .long  0x8b2f494f                          // add           x15, x10, w15, uxtw #2
  .long  0xbc6c5955                          // ldr           s21, [x10, w12, uxtw #2]
  .long  0xbc6d5956                          // ldr           s22, [x10, w13, uxtw #2]
  .long  0x0e0c3e0a                          // mov           w10, v16.s[1]
  .long  0x0e143e0c                          // mov           w12, v16.s[2]
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0x8b2a4909                          // add           x9, x8, w10, uxtw #2
  .long  0x0e1c3e0d                          // mov           w13, v16.s[3]
  .long  0xbc6c5910                          // ldr           s16, [x8, w12, uxtw #2]
  .long  0x0d4091e1                          // ld1           {v1.s}[1], [x15]
  .long  0x0d409122                          // ld1           {v2.s}[1], [x9]
  .long  0xbc6d5911                          // ldr           s17, [x8, w13, uxtw #2]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x6e140640                          // mov           v0.s[2], v18.s[0]
  .long  0x6e1406a1                          // mov           v1.s[2], v21.s[0]
  .long  0x6e140602                          // mov           v2.s[2], v16.s[0]
  .long  0x6e1c0660                          // mov           v0.s[3], v19.s[0]
  .long  0x6e1c06c1                          // mov           v1.s[3], v22.s[0]
  .long  0x6e1c0622                          // mov           v2.s[3], v17.s[0]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d606120                          // ld4           {v0.h-v3.h}[0], [x9]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fff8c0                          // b.eq          1a60 <sk_load_tables_u16_be_aarch64+0x14>  // b.none
  .long  0x9100212a                          // add           x10, x9, #0x8
  .long  0x0d606940                          // ld4           {v0.h-v3.h}[1], [x10]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fff843                          // b.cc          1a60 <sk_load_tables_u16_be_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91004129                          // add           x9, x9, #0x10
  .long  0x0d607120                          // ld4           {v0.h-v3.h}[2], [x9]
  .long  0x17ffffbf                          // b             1a60 <sk_load_tables_u16_be_aarch64+0x14>

HIDDEN _sk_load_tables_rgb_u16_be_aarch64
.globl _sk_load_tables_rgb_u16_be_aarch64
FUNCTION(_sk_load_tables_rgb_u16_be_aarch64)
_sk_load_tables_rgb_u16_be_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x321f07ea                          // orr           w10, wzr, #0x6
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0x9b0a2449                          // madd          x9, x2, x10, x9
  .long  0xb5000664                          // cbnz          x4, 1c44 <sk_load_tables_rgb_u16_be_aarch64+0xdc>
  .long  0x0c404520                          // ld3           {v0.4h-v2.4h}, [x9]
  .long  0xa940a909                          // ldp           x9, x10, [x8, #8]
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f10a403                          // uxtl          v3.4s, v0.4h
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0xf9400d0b                          // ldr           x11, [x8, #24]
  .long  0x0e0c3c68                          // mov           w8, v3.s[1]
  .long  0x0e143c6c                          // mov           w12, v3.s[2]
  .long  0x0e1c3c6d                          // mov           w13, v3.s[3]
  .long  0x1e26006e                          // fmov          w14, s3
  .long  0x2f10a423                          // uxtl          v3.4s, v1.4h
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0xbc6c5930                          // ldr           s16, [x9, w12, uxtw #2]
  .long  0xbc6d5931                          // ldr           s17, [x9, w13, uxtw #2]
  .long  0x8b2e492e                          // add           x14, x9, w14, uxtw #2
  .long  0x8b284928                          // add           x8, x9, w8, uxtw #2
  .long  0x1e260069                          // fmov          w9, s3
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x8b294949                          // add           x9, x10, w9, uxtw #2
  .long  0x0d4081c0                          // ld1           {v0.s}[0], [x14]
  .long  0x0e143c4e                          // mov           w14, v2.s[2]
  .long  0x0d408121                          // ld1           {v1.s}[0], [x9]
  .long  0xbc6e5972                          // ldr           s18, [x11, w14, uxtw #2]
  .long  0x1e26004e                          // fmov          w14, s2
  .long  0x0e0c3c6f                          // mov           w15, v3.s[1]
  .long  0x0e143c6c                          // mov           w12, v3.s[2]
  .long  0x8b2e496e                          // add           x14, x11, w14, uxtw #2
  .long  0x0e1c3c6d                          // mov           w13, v3.s[3]
  .long  0xbc6c5943                          // ldr           s3, [x10, w12, uxtw #2]
  .long  0x0e0c3c4c                          // mov           w12, v2.s[1]
  .long  0x0e1c3c49                          // mov           w9, v2.s[3]
  .long  0x0d4081c2                          // ld1           {v2.s}[0], [x14]
  .long  0x0d409100                          // ld1           {v0.s}[1], [x8]
  .long  0x8b2f4948                          // add           x8, x10, w15, uxtw #2
  .long  0x0d409101                          // ld1           {v1.s}[1], [x8]
  .long  0x8b2c4968                          // add           x8, x11, w12, uxtw #2
  .long  0x0d409102                          // ld1           {v2.s}[1], [x8]
  .long  0x6e140600                          // mov           v0.s[2], v16.s[0]
  .long  0xbc6d5950                          // ldr           s16, [x10, w13, uxtw #2]
  .long  0x6e140461                          // mov           v1.s[2], v3.s[0]
  .long  0xbc695963                          // ldr           s3, [x11, w9, uxtw #2]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e140642                          // mov           v2.s[2], v18.s[0]
  .long  0x6e1c0620                          // mov           v0.s[3], v17.s[0]
  .long  0x6e1c0601                          // mov           v1.s[3], v16.s[0]
  .long  0x6e1c0462                          // mov           v2.s[3], v3.s[0]
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x0d406120                          // ld3           {v0.h-v2.h}[0], [x9]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fff9a0                          // b.eq          1b80 <sk_load_tables_rgb_u16_be_aarch64+0x18>  // b.none
  .long  0x9100192a                          // add           x10, x9, #0x6
  .long  0x0d406940                          // ld3           {v0.h-v2.h}[1], [x10]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fff923                          // b.cc          1b80 <sk_load_tables_rgb_u16_be_aarch64+0x18>  // b.lo, b.ul, b.last
  .long  0x91003129                          // add           x9, x9, #0xc
  .long  0x0d407120                          // ld3           {v0.h-v2.h}[2], [x9]
  .long  0x17ffffc6                          // b             1b80 <sk_load_tables_rgb_u16_be_aarch64+0x18>

HIDDEN _sk_byte_tables_aarch64
.globl _sk_byte_tables_aarch64
FUNCTION(_sk_byte_tables_aarch64)
_sk_byte_tables_aarch64:
  .long  0xd100c3ff                          // sub           sp, sp, #0x30
  .long  0xaa0103e8                          // mov           x8, x1
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xa90157f6                          // stp           x22, x21, [sp, #16]
  .long  0xa9024ff4                          // stp           x20, x19, [sp, #32]
  .long  0xf90007e9                          // str           x9, [sp, #8]
  .long  0xf8410429                          // ldr           x9, [x1], #16
  .long  0x52a86fea                          // mov           w10, #0x437f0000
  .long  0x4e040d51                          // dup           v17.4s, w10
  .long  0x52a7700b                          // mov           w11, #0x3b800000
  .long  0xa9405933                          // ldp           x19, x22, [x9]
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x7290102b                          // movk          w11, #0x8081
  .long  0x6e21a800                          // fcvtnu        v0.4s, v0.4s
  .long  0x4e040d70                          // dup           v16.4s, w11
  .long  0x0e0c3c0a                          // mov           w10, v0.s[1]
  .long  0x0e143c0b                          // mov           w11, v0.s[2]
  .long  0x0e1c3c0c                          // mov           w12, v0.s[3]
  .long  0x1e26000d                          // fmov          w13, s0
  .long  0x386d4a6d                          // ldrb          w13, [x19, w13, uxtw]
  .long  0x386a4a6a                          // ldrb          w10, [x19, w10, uxtw]
  .long  0x386b4a6b                          // ldrb          w11, [x19, w11, uxtw]
  .long  0x386c4a6c                          // ldrb          w12, [x19, w12, uxtw]
  .long  0xa9412533                          // ldp           x19, x9, [x9, #16]
  .long  0x6e31dc42                          // fmul          v2.4s, v2.4s, v17.4s
  .long  0x6e31dc21                          // fmul          v1.4s, v1.4s, v17.4s
  .long  0x6e31dc63                          // fmul          v3.4s, v3.4s, v17.4s
  .long  0x6e21a842                          // fcvtnu        v2.4s, v2.4s
  .long  0x6e21a821                          // fcvtnu        v1.4s, v1.4s
  .long  0x6e21a863                          // fcvtnu        v3.4s, v3.4s
  .long  0x0e0c3c52                          // mov           w18, v2.s[1]
  .long  0x0e143c45                          // mov           w5, v2.s[2]
  .long  0x0e1c3c46                          // mov           w6, v2.s[3]
  .long  0x1e260047                          // fmov          w7, s2
  .long  0x1e260031                          // fmov          w17, s1
  .long  0x38674a67                          // ldrb          w7, [x19, w7, uxtw]
  .long  0x38724a72                          // ldrb          w18, [x19, w18, uxtw]
  .long  0x38654a65                          // ldrb          w5, [x19, w5, uxtw]
  .long  0x38664a66                          // ldrb          w6, [x19, w6, uxtw]
  .long  0x1e260073                          // fmov          w19, s3
  .long  0x0e0c3c2e                          // mov           w14, v1.s[1]
  .long  0x0e0c3c74                          // mov           w20, v3.s[1]
  .long  0x38714ad1                          // ldrb          w17, [x22, w17, uxtw]
  .long  0x38734933                          // ldrb          w19, [x9, w19, uxtw]
  .long  0x0e143c2f                          // mov           w15, v1.s[2]
  .long  0x0e1c3c30                          // mov           w16, v1.s[3]
  .long  0x0e143c75                          // mov           w21, v3.s[2]
  .long  0x386e4ace                          // ldrb          w14, [x22, w14, uxtw]
  .long  0x38744934                          // ldrb          w20, [x9, w20, uxtw]
  .long  0x386f4acf                          // ldrb          w15, [x22, w15, uxtw]
  .long  0x38704ad0                          // ldrb          w16, [x22, w16, uxtw]
  .long  0x0e1c3c76                          // mov           w22, v3.s[3]
  .long  0x38754935                          // ldrb          w21, [x9, w21, uxtw]
  .long  0x38764929                          // ldrb          w9, [x9, w22, uxtw]
  .long  0x4e021da0                          // mov           v0.h[0], w13
  .long  0x4e021e21                          // mov           v1.h[0], w17
  .long  0x4e021ce2                          // mov           v2.h[0], w7
  .long  0x4e021e63                          // mov           v3.h[0], w19
  .long  0x4e061d40                          // mov           v0.h[1], w10
  .long  0x4e061dc1                          // mov           v1.h[1], w14
  .long  0x4e061e42                          // mov           v2.h[1], w18
  .long  0x4e061e83                          // mov           v3.h[1], w20
  .long  0x4e0a1d60                          // mov           v0.h[2], w11
  .long  0x4e0a1de1                          // mov           v1.h[2], w15
  .long  0x4e0a1ca2                          // mov           v2.h[2], w5
  .long  0x4e0a1ea3                          // mov           v3.h[2], w21
  .long  0x4e0e1d80                          // mov           v0.h[3], w12
  .long  0x4e0e1e01                          // mov           v1.h[3], w16
  .long  0x4e0e1cc2                          // mov           v2.h[3], w6
  .long  0x4e0e1d23                          // mov           v3.h[3], w9
  .long  0xf9400507                          // ldr           x7, [x8, #8]
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f07b7e3                          // bic           v3.4h, #0xff, lsl #8
  .long  0xa9424ff4                          // ldp           x20, x19, [sp, #32]
  .long  0xa94157f6                          // ldp           x22, x21, [sp, #16]
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x2f10a463                          // uxtl          v3.4s, v3.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e21d863                          // ucvtf         v3.4s, v3.4s
  .long  0x6e30dc00                          // fmul          v0.4s, v0.4s, v16.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0x6e30dc63                          // fmul          v3.4s, v3.4s, v16.4s
  .long  0x9100c3ff                          // add           sp, sp, #0x30
  .long  0xd61f00e0                          // br            x7

HIDDEN _sk_byte_tables_rgb_aarch64
.globl _sk_byte_tables_rgb_aarch64
FUNCTION(_sk_byte_tables_rgb_aarch64)
_sk_byte_tables_rgb_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0xb9401909                          // ldr           w9, [x8, #24]
  .long  0xa9402d0a                          // ldp           x10, x11, [x8]
  .long  0xf9400908                          // ldr           x8, [x8, #16]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e21da31                          // scvtf         v17.4s, v17.4s
  .long  0x6e21de21                          // fmul          v1.4s, v17.4s, v1.4s
  .long  0x6e20de20                          // fmul          v0.4s, v17.4s, v0.4s
  .long  0x6e22de22                          // fmul          v2.4s, v17.4s, v2.4s
  .long  0x6e21a821                          // fcvtnu        v1.4s, v1.4s
  .long  0x6e21a800                          // fcvtnu        v0.4s, v0.4s
  .long  0x6e21a842                          // fcvtnu        v2.4s, v2.4s
  .long  0x0e0c3c2f                          // mov           w15, v1.s[1]
  .long  0x0e143c30                          // mov           w16, v1.s[2]
  .long  0x0e1c3c31                          // mov           w17, v1.s[3]
  .long  0x1e260032                          // fmov          w18, s1
  .long  0x1e26000e                          // fmov          w14, s0
  .long  0x38724972                          // ldrb          w18, [x11, w18, uxtw]
  .long  0x386f496f                          // ldrb          w15, [x11, w15, uxtw]
  .long  0x38704970                          // ldrb          w16, [x11, w16, uxtw]
  .long  0x3871496b                          // ldrb          w11, [x11, w17, uxtw]
  .long  0x1e260051                          // fmov          w17, s2
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386e494e                          // ldrb          w14, [x10, w14, uxtw]
  .long  0x0e0c3c46                          // mov           w6, v2.s[1]
  .long  0x38714911                          // ldrb          w17, [x8, w17, uxtw]
  .long  0x0e143c0c                          // mov           w12, v0.s[2]
  .long  0x0e1c3c0d                          // mov           w13, v0.s[3]
  .long  0x0e143c47                          // mov           w7, v2.s[2]
  .long  0x38694949                          // ldrb          w9, [x10, w9, uxtw]
  .long  0x38664906                          // ldrb          w6, [x8, w6, uxtw]
  .long  0x386c494c                          // ldrb          w12, [x10, w12, uxtw]
  .long  0x386d494a                          // ldrb          w10, [x10, w13, uxtw]
  .long  0x0e1c3c4d                          // mov           w13, v2.s[3]
  .long  0x38674907                          // ldrb          w7, [x8, w7, uxtw]
  .long  0x386d4908                          // ldrb          w8, [x8, w13, uxtw]
  .long  0x4e021dc0                          // mov           v0.h[0], w14
  .long  0x4e021e41                          // mov           v1.h[0], w18
  .long  0x4e021e22                          // mov           v2.h[0], w17
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e061de1                          // mov           v1.h[1], w15
  .long  0x4e061cc2                          // mov           v2.h[1], w6
  .long  0x4e0a1d80                          // mov           v0.h[2], w12
  .long  0x4e0a1e01                          // mov           v1.h[2], w16
  .long  0x4e0a1ce2                          // mov           v2.h[2], w7
  .long  0x4e0e1d40                          // mov           v0.h[3], w10
  .long  0x4e0e1d61                          // mov           v1.h[3], w11
  .long  0x4e0e1d02                          // mov           v2.h[3], w8
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f07b7e1                          // bic           v1.4h, #0xff, lsl #8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e30dc00                          // fmul          v0.4s, v0.4s, v16.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_table_r_aarch64
.globl _sk_table_r_aarch64
FUNCTION(_sk_table_r_aarch64)
_sk_table_r_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e20de00                          // fmul          v0.4s, v16.4s, v0.4s
  .long  0x6e21a810                          // fcvtnu        v16.4s, v0.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408160                          // ld1           {v0.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140600                          // mov           v0.s[2], v16.s[0]
  .long  0x6e1c0620                          // mov           v0.s[3], v17.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_table_g_aarch64
.globl _sk_table_g_aarch64
FUNCTION(_sk_table_g_aarch64)
_sk_table_g_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e21de01                          // fmul          v1.4s, v16.4s, v1.4s
  .long  0x6e21a830                          // fcvtnu        v16.4s, v1.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408161                          // ld1           {v1.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409121                          // ld1           {v1.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140601                          // mov           v1.s[2], v16.s[0]
  .long  0x6e1c0621                          // mov           v1.s[3], v17.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_table_b_aarch64
.globl _sk_table_b_aarch64
FUNCTION(_sk_table_b_aarch64)
_sk_table_b_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6e21a850                          // fcvtnu        v16.4s, v2.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408162                          // ld1           {v2.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409122                          // ld1           {v2.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140602                          // mov           v2.s[2], v16.s[0]
  .long  0x6e1c0622                          // mov           v2.s[3], v17.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_table_a_aarch64
.globl _sk_table_a_aarch64
FUNCTION(_sk_table_a_aarch64)
_sk_table_a_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xb9400909                          // ldr           w9, [x8, #8]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x51000529                          // sub           w9, w9, #0x1
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0x6e21a870                          // fcvtnu        v16.4s, v3.4s
  .long  0x1e26020b                          // fmov          w11, s16
  .long  0x8b2b490b                          // add           x11, x8, w11, uxtw #2
  .long  0x0d408163                          // ld1           {v3.s}[0], [x11]
  .long  0x0e0c3e09                          // mov           w9, v16.s[1]
  .long  0x0e143e0a                          // mov           w10, v16.s[2]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0x0e1c3e0b                          // mov           w11, v16.s[3]
  .long  0xbc6a5910                          // ldr           s16, [x8, w10, uxtw #2]
  .long  0x0d409123                          // ld1           {v3.s}[1], [x9]
  .long  0xbc6b5911                          // ldr           s17, [x8, w11, uxtw #2]
  .long  0x6e140603                          // mov           v3.s[2], v16.s[0]
  .long  0x6e1c0623                          // mov           v3.s[3], v17.s[0]
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_parametric_r_aarch64
.globl _sk_parametric_r_aarch64
FUNCTION(_sk_parametric_r_aarch64)
_sk_parametric_r_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911010                          // fmla          v16.4s, v0.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951014                          // fmla          v20.4s, v0.4s, v21.s[0]
  .long  0x6e20e640                          // fcmge         v0.4s, v18.4s, v0.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e00                          // bsl           v0.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f400                          // fmax          v0.4s, v0.4s, v18.4s
  .long  0x4eb5f400                          // fmin          v0.4s, v0.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_parametric_g_aarch64
.globl _sk_parametric_g_aarch64
FUNCTION(_sk_parametric_g_aarch64)
_sk_parametric_g_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911030                          // fmla          v16.4s, v1.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951034                          // fmla          v20.4s, v1.4s, v21.s[0]
  .long  0x6e21e641                          // fcmge         v1.4s, v18.4s, v1.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e01                          // bsl           v1.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f421                          // fmax          v1.4s, v1.4s, v18.4s
  .long  0x4eb5f421                          // fmin          v1.4s, v1.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_parametric_b_aarch64
.globl _sk_parametric_b_aarch64
FUNCTION(_sk_parametric_b_aarch64)
_sk_parametric_b_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911050                          // fmla          v16.4s, v2.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951054                          // fmla          v20.4s, v2.4s, v21.s[0]
  .long  0x6e22e642                          // fcmge         v2.4s, v18.4s, v2.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e02                          // bsl           v2.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f442                          // fmax          v2.4s, v2.4s, v18.4s
  .long  0x4eb5f442                          // fmin          v2.4s, v2.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_parametric_a_aarch64
.globl _sk_parametric_a_aarch64
FUNCTION(_sk_parametric_a_aarch64)
_sk_parametric_a_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f016696                          // movi          v22.4s, #0x34, lsl #24
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c932                          // ld1r          {v18.4s}, [x9]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0xbd400d11                          // ldr           s17, [x8, #12]
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x9100210a                          // add           x10, x8, #0x8
  .long  0x4d40c954                          // ld1r          {v20.4s}, [x10]
  .long  0x4f911070                          // fmla          v16.4s, v3.4s, v17.s[0]
  .long  0xbd400135                          // ldr           s21, [x9]
  .long  0x52b85f09                          // mov           w9, #0xc2f80000
  .long  0x728e6ee9                          // movk          w9, #0x7377
  .long  0x4e040d37                          // dup           v23.4s, w9
  .long  0x52a7f7e9                          // mov           w9, #0x3fbf0000
  .long  0x7297eea9                          // movk          w9, #0xbf75
  .long  0x4f951074                          // fmla          v20.4s, v3.4s, v21.s[0]
  .long  0x6e23e643                          // fcmge         v3.4s, v18.4s, v3.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a7d689                          // mov           w9, #0x3eb40000
  .long  0x4f03d7f1                          // movi          v17.4s, #0x7f, msl #16
  .long  0x72889f29                          // movk          w9, #0x44f9
  .long  0x4e21da95                          // scvtf         v21.4s, v20.4s
  .long  0x4e311e91                          // and           v17.16b, v20.16b, v17.16b
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7fb89                          // mov           w9, #0x3fdc0000
  .long  0x4e35ced7                          // fmla          v23.4s, v22.4s, v21.4s
  .long  0x729d3469                          // movk          w9, #0xe9a3
  .long  0x4f0177f1                          // orr           v17.4s, #0x3f, lsl #24
  .long  0x4eb2ce37                          // fmls          v23.4s, v17.4s, v18.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a85e49                          // mov           w9, #0x42f20000
  .long  0x72918a29                          // movk          w9, #0x8c51
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x52a7f7c9                          // mov           w9, #0x3fbe0000
  .long  0x729791a9                          // movk          w9, #0xbc8d
  .long  0x6e31fe51                          // fdiv          v17.4s, v18.4s, v17.4s
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x52a81349                          // mov           w9, #0x409a0000
  .long  0x4eb1d6f1                          // fsub          v17.4s, v23.4s, v17.4s
  .long  0x729ebf09                          // movk          w9, #0xf5f8
  .long  0x6e31de71                          // fmul          v17.4s, v19.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x52a83ba9                          // mov           w9, #0x41dd0000
  .long  0x4e219a33                          // frintm        v19.4s, v17.4s
  .long  0x729a5fc9                          // movk          w9, #0xd2fe
  .long  0x4e34d634                          // fadd          v20.4s, v17.4s, v20.4s
  .long  0x4eb3d631                          // fsub          v17.4s, v17.4s, v19.4s
  .long  0x4eb2ce34                          // fmls          v20.4s, v17.4s, v18.4s
  .long  0x4eb1d6b1                          // fsub          v17.4s, v21.4s, v17.4s
  .long  0x4e040d35                          // dup           v21.4s, w9
  .long  0x91005108                          // add           x8, x8, #0x14
  .long  0x6e31feb1                          // fdiv          v17.4s, v21.4s, v17.4s
  .long  0x4e31d691                          // fadd          v17.4s, v20.4s, v17.4s
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f026573                          // movi          v19.4s, #0x4b, lsl #24
  .long  0x6e33de31                          // fmul          v17.4s, v17.4s, v19.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4e34d631                          // fadd          v17.4s, v17.4s, v20.4s
  .long  0x6f00e412                          // movi          v18.2d, #0x0
  .long  0x6e711e03                          // bsl           v3.16b, v16.16b, v17.16b
  .long  0x4f03f615                          // fmov          v21.4s, #1.000000000000000000e+00
  .long  0x4e32f463                          // fmax          v3.4s, v3.4s, v18.4s
  .long  0x4eb5f463                          // fmin          v3.4s, v3.4s, v21.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_lab_to_xyz_aarch64
.globl _sk_lab_to_xyz_aarch64
FUNCTION(_sk_lab_to_xyz_aarch64)
_sk_lab_to_xyz_aarch64:
  .long  0x52a85908                          // mov           w8, #0x42c80000
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a86fe8                          // mov           w8, #0x437f0000
  .long  0x4f066471                          // movi          v17.4s, #0xc3, lsl #24
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a781a8                          // mov           w8, #0x3c0d0000
  .long  0x7287b968                          // movk          w8, #0x3dcb
  .long  0x4eb11e34                          // mov           v20.16b, v17.16b
  .long  0x4e21ce74                          // fmla          v20.4s, v19.4s, v1.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a76068                          // mov           w8, #0x3b030000
  .long  0x72824de8                          // movk          w8, #0x126f
  .long  0x4e22ce71                          // fmla          v17.4s, v19.4s, v2.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a77468                          // mov           w8, #0x3ba30000
  .long  0x729ae148                          // movk          w8, #0xd70a
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52a78228                          // mov           w8, #0x3c110000
  .long  0x4f01f612                          // fmov          v18.4s, #1.600000000000000000e+01
  .long  0x72831848                          // movk          w8, #0x18c2
  .long  0x4e20ce12                          // fmla          v18.4s, v16.4s, v0.4s
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52b7c1a8                          // mov           w8, #0xbe0d0000
  .long  0x7287b968                          // movk          w8, #0x3dcb
  .long  0x6e21de41                          // fmul          v1.4s, v18.4s, v1.4s
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x52a7c068                          // mov           w8, #0x3e030000
  .long  0x4ea11c32                          // mov           v18.16b, v1.16b
  .long  0x72900a08                          // movk          w8, #0x8050
  .long  0x4eb3ce32                          // fmls          v18.4s, v17.4s, v19.4s
  .long  0x6e21dc31                          // fmul          v17.4s, v1.4s, v1.4s
  .long  0x4ea11c35                          // mov           v21.16b, v1.16b
  .long  0x4e30d433                          // fadd          v19.4s, v1.4s, v16.4s
  .long  0x6e31dc31                          // fmul          v17.4s, v1.4s, v17.4s
  .long  0x4e34cc55                          // fmla          v21.4s, v2.4s, v20.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x6e22de73                          // fmul          v19.4s, v19.4s, v2.4s
  .long  0x6ea0e621                          // fcmgt         v1.4s, v17.4s, v0.4s
  .long  0x6e731e21                          // bsl           v1.16b, v17.16b, v19.16b
  .long  0x6e32de51                          // fmul          v17.4s, v18.4s, v18.4s
  .long  0x4e30d653                          // fadd          v19.4s, v18.4s, v16.4s
  .long  0x6e31de51                          // fmul          v17.4s, v18.4s, v17.4s
  .long  0x52a7eec8                          // mov           w8, #0x3f760000
  .long  0x6e22de72                          // fmul          v18.4s, v19.4s, v2.4s
  .long  0x6ea0e633                          // fcmgt         v19.4s, v17.4s, v0.4s
  .long  0x729ae3e8                          // movk          w8, #0xd71f
  .long  0x6e721e33                          // bsl           v19.16b, v17.16b, v18.16b
  .long  0x6e35deb2                          // fmul          v18.4s, v21.4s, v21.4s
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7ea68                          // mov           w8, #0x3f530000
  .long  0x4e30d6b0                          // fadd          v16.4s, v21.4s, v16.4s
  .long  0x6e32deb2                          // fmul          v18.4s, v21.4s, v18.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x72881ec8                          // movk          w8, #0x40f6
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x6ea0e640                          // fcmgt         v0.4s, v18.4s, v0.4s
  .long  0x4e040d14                          // dup           v20.4s, w8
  .long  0x6e621e40                          // bsl           v0.16b, v18.16b, v2.16b
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x6e34de62                          // fmul          v2.4s, v19.4s, v20.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_load_a8_aarch64
.globl _sk_load_a8_aarch64
FUNCTION(_sk_load_a8_aarch64)
_sk_load_a8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50002e4                          // cbnz          x4, 25e8 <sk_load_a8_aarch64+0x68>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d22                          // mov           v2.h[0], w9
  .long  0x4e061d42                          // mov           v2.h[1], w10
  .long  0x4e0a1d62                          // mov           v2.h[2], w11
  .long  0x4e0e1d02                          // mov           v2.h[3], w8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6e23dc43                          // fmul          v3.4s, v2.4s, v3.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x2f00e402                          // movi          d2, #0x0
  .long  0x54000140                          // b.eq          261c <sk_load_a8_aarch64+0x9c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          2614 <sk_load_a8_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd61                          // b.ne          25b0 <sk_load_a8_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020fe2                          // dup           v2.4h, wzr
  .long  0x4e0a1d22                          // mov           v2.h[2], w9
  .long  0x39400509                          // ldrb          w9, [x8, #1]
  .long  0x4e061d22                          // mov           v2.h[1], w9
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x4e021d02                          // mov           v2.h[0], w8
  .long  0x17ffffe3                          // b             25b0 <sk_load_a8_aarch64+0x30>

HIDDEN _sk_gather_a8_aarch64
.globl _sk_gather_a8_aarch64
FUNCTION(_sk_gather_a8_aarch64)
_sk_gather_a8_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386c490c                          // ldrb          w12, [x8, w12, uxtw]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x38694909                          // ldrb          w9, [x8, w9, uxtw]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x386b4908                          // ldrb          w8, [x8, w11, uxtw]
  .long  0x4e021d82                          // mov           v2.h[0], w12
  .long  0x4e061d22                          // mov           v2.h[1], w9
  .long  0x4e0a1d42                          // mov           v2.h[2], w10
  .long  0x4e0e1d02                          // mov           v2.h[3], w8
  .long  0x2f07b7e2                          // bic           v2.4h, #0xff, lsl #8
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6e23dc43                          // fmul          v3.4s, v2.4s, v3.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_a8_aarch64
.globl _sk_store_a8_aarch64
FUNCTION(_sk_store_a8_aarch64)
_sk_store_a8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a86fe9                          // mov           w9, #0x437f0000
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb5000184                          // cbnz          x4, 26f0 <sk_store_a8_aarch64+0x50>
  .long  0x0e0e3e09                          // umov          w9, v16.h[3]
  .long  0x0e0a3e0a                          // umov          w10, v16.h[2]
  .long  0x0e063e0b                          // umov          w11, v16.h[1]
  .long  0x0e023e0c                          // umov          w12, v16.h[0]
  .long  0x39000d09                          // strb          w9, [x8, #3]
  .long  0x3900090a                          // strb          w10, [x8, #2]
  .long  0x3900050b                          // strb          w11, [x8, #1]
  .long  0x3900010c                          // strb          w12, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000120                          // b.eq          271c <sk_store_a8_aarch64+0x7c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          2714 <sk_store_a8_aarch64+0x74>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffee1                          // b.ne          26e4 <sk_store_a8_aarch64+0x44>  // b.any
  .long  0x0e0a3e09                          // umov          w9, v16.h[2]
  .long  0x39000909                          // strb          w9, [x8, #2]
  .long  0x0e063e09                          // umov          w9, v16.h[1]
  .long  0x39000509                          // strb          w9, [x8, #1]
  .long  0x0e023e09                          // umov          w9, v16.h[0]
  .long  0x39000109                          // strb          w9, [x8]
  .long  0x17fffff0                          // b             26e4 <sk_store_a8_aarch64+0x44>

HIDDEN _sk_load_g8_aarch64
.globl _sk_load_g8_aarch64
FUNCTION(_sk_load_g8_aarch64)
_sk_load_g8_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020108                          // add           x8, x8, x2
  .long  0xb50002e4                          // cbnz          x4, 2790 <sk_load_g8_aarch64+0x68>
  .long  0x39400109                          // ldrb          w9, [x8]
  .long  0x3940050a                          // ldrb          w10, [x8, #1]
  .long  0x3940090b                          // ldrb          w11, [x8, #2]
  .long  0x39400d08                          // ldrb          w8, [x8, #3]
  .long  0x4e021d20                          // mov           v0.h[0], w9
  .long  0x4e061d40                          // mov           v0.h[1], w10
  .long  0x4e0a1d60                          // mov           v0.h[2], w11
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e21dc00                          // fmul          v0.4s, v0.4s, v1.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0x4ea01c01                          // mov           v1.16b, v0.16b
  .long  0x4ea01c02                          // mov           v2.16b, v0.16b
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x2f00e400                          // movi          d0, #0x0
  .long  0x54000140                          // b.eq          27c4 <sk_load_g8_aarch64+0x9c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          27bc <sk_load_g8_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffd61                          // b.ne          2758 <sk_load_g8_aarch64+0x30>  // b.any
  .long  0x39400909                          // ldrb          w9, [x8, #2]
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x4e0a1d20                          // mov           v0.h[2], w9
  .long  0x39400509                          // ldrb          w9, [x8, #1]
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x39400108                          // ldrb          w8, [x8]
  .long  0x4e021d00                          // mov           v0.h[0], w8
  .long  0x17ffffe3                          // b             2758 <sk_load_g8_aarch64+0x30>

HIDDEN _sk_gather_g8_aarch64
.globl _sk_gather_g8_aarch64
FUNCTION(_sk_gather_g8_aarch64)
_sk_gather_g8_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x386c490c                          // ldrb          w12, [x8, w12, uxtw]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x38694909                          // ldrb          w9, [x8, w9, uxtw]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x386b4908                          // ldrb          w8, [x8, w11, uxtw]
  .long  0x4e021d80                          // mov           v0.h[0], w12
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x2f07b7e0                          // bic           v0.4h, #0xff, lsl #8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x6e21d800                          // ucvtf         v0.4s, v0.4s
  .long  0x6e23dc00                          // fmul          v0.4s, v0.4s, v3.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0x4ea01c01                          // mov           v1.16b, v0.16b
  .long  0x4ea01c02                          // mov           v2.16b, v0.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_gather_i8_aarch64
.globl _sk_gather_i8_aarch64
FUNCTION(_sk_gather_i8_aarch64)
_sk_gather_i8_aarch64:
  .long  0xaa0103e8                          // mov           x8, x1
  .long  0xf8408429                          // ldr           x9, [x1], #8
  .long  0xb4000069                          // cbz           x9, 285c <sk_gather_i8_aarch64+0x14>
  .long  0xaa0903ea                          // mov           x10, x9
  .long  0x14000003                          // b             2864 <sk_gather_i8_aarch64+0x1c>
  .long  0xf940050a                          // ldr           x10, [x8, #8]
  .long  0x91004101                          // add           x1, x8, #0x10
  .long  0xf8410548                          // ldr           x8, [x10], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0xf9400529                          // ldr           x9, [x9, #8]
  .long  0x4d40c942                          // ld1r          {v2.4s}, [x10]
  .long  0x6f00e623                          // movi          v3.2d, #0xff000000ff
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000d                          // fmov          w13, s0
  .long  0x0e0c3c0a                          // mov           w10, v0.s[1]
  .long  0x386d490d                          // ldrb          w13, [x8, w13, uxtw]
  .long  0x0e143c0b                          // mov           w11, v0.s[2]
  .long  0x386a490a                          // ldrb          w10, [x8, w10, uxtw]
  .long  0x0e1c3c0c                          // mov           w12, v0.s[3]
  .long  0x386b490b                          // ldrb          w11, [x8, w11, uxtw]
  .long  0x386c4908                          // ldrb          w8, [x8, w12, uxtw]
  .long  0x4e021da0                          // mov           v0.h[0], w13
  .long  0x4e061d40                          // mov           v0.h[1], w10
  .long  0x4e0a1d60                          // mov           v0.h[2], w11
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e231c00                          // and           v0.16b, v0.16b, v3.16b
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c492c                          // add           x12, x9, w12, uxtw #2
  .long  0x0e0c3c08                          // mov           w8, v0.s[1]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408180                          // ld1           {v0.s}[0], [x12]
  .long  0x8b284928                          // add           x8, x9, w8, uxtw #2
  .long  0xb86a592a                          // ldr           w10, [x9, w10, uxtw #2]
  .long  0x52a7700c                          // mov           w12, #0x3b800000
  .long  0x0d409100                          // ld1           {v0.s}[1], [x8]
  .long  0xb86b5928                          // ldr           w8, [x9, w11, uxtw #2]
  .long  0x7290102c                          // movk          w12, #0x8081
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e141d40                          // mov           v0.s[2], w10
  .long  0x4e1c1d00                          // mov           v0.s[3], w8
  .long  0x4e231c01                          // and           v1.16b, v0.16b, v3.16b
  .long  0x6f380402                          // ushr          v2.4s, v0.4s, #8
  .long  0x6f300411                          // ushr          v17.4s, v0.4s, #16
  .long  0x4e040d90                          // dup           v16.4s, w12
  .long  0x6f280400                          // ushr          v0.4s, v0.4s, #24
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x4e231c42                          // and           v2.16b, v2.16b, v3.16b
  .long  0x4e231e23                          // and           v3.16b, v17.16b, v3.16b
  .long  0x4e21d811                          // scvtf         v17.4s, v0.4s
  .long  0x6e30dc20                          // fmul          v0.4s, v1.4s, v16.4s
  .long  0x4e21d841                          // scvtf         v1.4s, v2.4s
  .long  0x4e21d862                          // scvtf         v2.4s, v3.4s
  .long  0x6e30dc21                          // fmul          v1.4s, v1.4s, v16.4s
  .long  0x6e30dc42                          // fmul          v2.4s, v2.4s, v16.4s
  .long  0x6e30de23                          // fmul          v3.4s, v17.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_load_565_aarch64
.globl _sk_load_565_aarch64
FUNCTION(_sk_load_565_aarch64)
_sk_load_565_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0xb50003c4                          // cbnz          x4, 29b8 <sk_load_565_aarch64+0x84>
  .long  0xfd400100                          // ldr           d0, [x8]
  .long  0x321b17e8                          // orr           w8, wzr, #0x7e0
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a6f088                          // mov           w8, #0x37840000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4f072701                          // movi          v1.4s, #0xf8, lsl #8
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4f0007e3                          // movi          v3.4s, #0x1f
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e221c10                          // and           v16.16b, v0.16b, v2.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a7a088                          // mov           w8, #0x3d040000
  .long  0x72842108                          // movk          w8, #0x2108
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a74048                          // mov           w8, #0x3a020000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72810428                          // movk          w8, #0x821
  .long  0x4e21d862                          // scvtf         v2.4s, v3.4s
  .long  0x6e21dc42                          // fmul          v2.4s, v2.4s, v1.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x4e21da03                          // scvtf         v3.4s, v16.4s
  .long  0x6e21dc61                          // fmul          v1.4s, v3.4s, v1.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x2f00e400                          // movi          d0, #0x0
  .long  0x54000140                          // b.eq          29ec <sk_load_565_aarch64+0xb8>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          29e4 <sk_load_565_aarch64+0xb0>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffba1                          // b.ne          2948 <sk_load_565_aarch64+0x14>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x0d405120                          // ld1           {v0.h}[2], [x9]
  .long  0x91000909                          // add           x9, x8, #0x2
  .long  0x0d404920                          // ld1           {v0.h}[1], [x9]
  .long  0x0d404100                          // ld1           {v0.h}[0], [x8]
  .long  0x17ffffd6                          // b             2948 <sk_load_565_aarch64+0x14>

HIDDEN _sk_gather_565_aarch64
.globl _sk_gather_565_aarch64
FUNCTION(_sk_gather_565_aarch64)
_sk_gather_565_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x321b17e9                          // orr           w9, wzr, #0x7e0
  .long  0x4e040d23                          // dup           v3.4s, w9
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x8b2c450c                          // add           x12, x8, w12, uxtw #1
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d404180                          // ld1           {v0.h}[0], [x12]
  .long  0x78695909                          // ldrh          w9, [x8, w9, uxtw #1]
  .long  0x786a590a                          // ldrh          w10, [x8, w10, uxtw #1]
  .long  0x786b5908                          // ldrh          w8, [x8, w11, uxtw #1]
  .long  0x4f072701                          // movi          v1.4s, #0xf8, lsl #8
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x52a6f08b                          // mov           w11, #0x37840000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x7284210b                          // movk          w11, #0x2108
  .long  0x52a74049                          // mov           w9, #0x3a020000
  .long  0x4f0007e2                          // movi          v2.4s, #0x1f
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x72810429                          // movk          w9, #0x821
  .long  0x52a7a08a                          // mov           w10, #0x3d040000
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e040d60                          // dup           v0.4s, w11
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x7284210a                          // movk          w10, #0x2108
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e21dc61                          // fmul          v1.4s, v3.4s, v1.4s
  .long  0x4e040d43                          // dup           v3.4s, w10
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x6e23dc42                          // fmul          v2.4s, v2.4s, v3.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_565_aarch64
.globl _sk_store_565_aarch64
FUNCTION(_sk_store_565_aarch64)
_sk_store_565_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a84f89                          // mov           w9, #0x427c0000
  .long  0x4f01f7f0                          // fmov          v16.4s, #3.100000000000000000e+01
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e32dc32                          // fmul          v18.4s, v1.4s, v18.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e30dc50                          // fmul          v16.4s, v2.4s, v16.4s
  .long  0x4f2b5631                          // shl           v17.4s, v17.4s, #11
  .long  0x4f255652                          // shl           v18.4s, v18.4s, #5
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0xb50000a4                          // cbnz          x4, 2afc <sk_store_565_aarch64+0x58>
  .long  0xfd000110                          // str           d16, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000120                          // b.eq          2b28 <sk_store_565_aarch64+0x84>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          2b20 <sk_store_565_aarch64+0x7c>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffee1                          // b.ne          2af0 <sk_store_565_aarch64+0x4c>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0d005130                          // st1           {v16.h}[2], [x9]
  .long  0x91000909                          // add           x9, x8, #0x2
  .long  0x0d004930                          // st1           {v16.h}[1], [x9]
  .long  0x0d004110                          // st1           {v16.h}[0], [x8]
  .long  0x17fffff1                          // b             2af0 <sk_store_565_aarch64+0x4c>

HIDDEN _sk_load_4444_aarch64
.globl _sk_load_4444_aarch64
FUNCTION(_sk_load_4444_aarch64)
_sk_load_4444_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0xb5000444                          // cbnz          x4, 2bc4 <sk_load_4444_aarch64+0x94>
  .long  0xfd400100                          // ldr           d0, [x8]
  .long  0x52a6f108                          // mov           w8, #0x37880000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4f072601                          // movi          v1.4s, #0xf0, lsl #8
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4f0025e2                          // movi          v2.4s, #0xf, lsl #8
  .long  0x4f070603                          // movi          v3.4s, #0xf0
  .long  0x4f0005f0                          // movi          v16.4s, #0xf
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e301c10                          // and           v16.16b, v0.16b, v16.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a73108                          // mov           w8, #0x39880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d01                          // dup           v1.4s, w8
  .long  0x52a77108                          // mov           w8, #0x3b880000
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x6e21dc41                          // fmul          v1.4s, v2.4s, v1.4s
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a7b108                          // mov           w8, #0x3d880000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e22dc62                          // fmul          v2.4s, v3.4s, v2.4s
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x2f00e400                          // movi          d0, #0x0
  .long  0x54000140                          // b.eq          2bf8 <sk_load_4444_aarch64+0xc8>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          2bf0 <sk_load_4444_aarch64+0xc0>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffb21                          // b.ne          2b44 <sk_load_4444_aarch64+0x14>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0e020fe0                          // dup           v0.4h, wzr
  .long  0x0d405120                          // ld1           {v0.h}[2], [x9]
  .long  0x91000909                          // add           x9, x8, #0x2
  .long  0x0d404920                          // ld1           {v0.h}[1], [x9]
  .long  0x0d404100                          // ld1           {v0.h}[0], [x8]
  .long  0x17ffffd2                          // b             2b44 <sk_load_4444_aarch64+0x14>

HIDDEN _sk_gather_4444_aarch64
.globl _sk_gather_4444_aarch64
FUNCTION(_sk_gather_4444_aarch64)
_sk_gather_4444_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x4f070603                          // movi          v3.4s, #0xf0
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4f0005f0                          // movi          v16.4s, #0xf
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x8b2c450c                          // add           x12, x8, w12, uxtw #1
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d404180                          // ld1           {v0.h}[0], [x12]
  .long  0x78695909                          // ldrh          w9, [x8, w9, uxtw #1]
  .long  0x786a590a                          // ldrh          w10, [x8, w10, uxtw #1]
  .long  0x786b5908                          // ldrh          w8, [x8, w11, uxtw #1]
  .long  0x4f072601                          // movi          v1.4s, #0xf0, lsl #8
  .long  0x4e061d20                          // mov           v0.h[1], w9
  .long  0x4e0a1d40                          // mov           v0.h[2], w10
  .long  0x4e0e1d00                          // mov           v0.h[3], w8
  .long  0x52a6f10b                          // mov           w11, #0x37880000
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x7291112b                          // movk          w11, #0x8889
  .long  0x4f0025e2                          // movi          v2.4s, #0xf, lsl #8
  .long  0x52a73109                          // mov           w9, #0x39880000
  .long  0x4e211c01                          // and           v1.16b, v0.16b, v1.16b
  .long  0x72911129                          // movk          w9, #0x8889
  .long  0x52a7710a                          // mov           w10, #0x3b880000
  .long  0x4e221c02                          // and           v2.16b, v0.16b, v2.16b
  .long  0x4e231c03                          // and           v3.16b, v0.16b, v3.16b
  .long  0x4e301c10                          // and           v16.16b, v0.16b, v16.16b
  .long  0x4e040d60                          // dup           v0.4s, w11
  .long  0x4e21d821                          // scvtf         v1.4s, v1.4s
  .long  0x7291112a                          // movk          w10, #0x8889
  .long  0x52a7b108                          // mov           w8, #0x3d880000
  .long  0x6e20dc20                          // fmul          v0.4s, v1.4s, v0.4s
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x72911128                          // movk          w8, #0x8889
  .long  0x6e21dc41                          // fmul          v1.4s, v2.4s, v1.4s
  .long  0x4e040d42                          // dup           v2.4s, w10
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x6e22dc62                          // fmul          v2.4s, v3.4s, v2.4s
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x6e23de03                          // fmul          v3.4s, v16.4s, v3.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_4444_aarch64
.globl _sk_store_4444_aarch64
FUNCTION(_sk_store_4444_aarch64)
_sk_store_4444_aarch64:
  .long  0x4f01f5d0                          // fmov          v16.4s, #1.500000000000000000e+01
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e30dc32                          // fmul          v18.4s, v1.4s, v16.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x4f2c5631                          // shl           v17.4s, v17.4s, #12
  .long  0x4f285652                          // shl           v18.4s, v18.4s, #8
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x6e30dc52                          // fmul          v18.4s, v2.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0x4f245652                          // shl           v18.4s, v18.4s, #4
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4eb21e31                          // orr           v17.16b, v17.16b, v18.16b
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0x8b020508                          // add           x8, x8, x2, lsl #1
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0xb50000a4                          // cbnz          x4, 2d24 <sk_store_4444_aarch64+0x60>
  .long  0xfd000110                          // str           d16, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000120                          // b.eq          2d50 <sk_store_4444_aarch64+0x8c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          2d48 <sk_store_4444_aarch64+0x84>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffee1                          // b.ne          2d18 <sk_store_4444_aarch64+0x54>  // b.any
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0d005130                          // st1           {v16.h}[2], [x9]
  .long  0x91000909                          // add           x9, x8, #0x2
  .long  0x0d004930                          // st1           {v16.h}[1], [x9]
  .long  0x0d004110                          // st1           {v16.h}[0], [x8]
  .long  0x17fffff1                          // b             2d18 <sk_store_4444_aarch64+0x54>

HIDDEN _sk_load_8888_aarch64
.globl _sk_load_8888_aarch64
FUNCTION(_sk_load_8888_aarch64)
_sk_load_8888_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020908                          // add           x8, x8, x2, lsl #2
  .long  0xb50002e4                          // cbnz          x4, 2dc0 <sk_load_8888_aarch64+0x68>
  .long  0x3dc00100                          // ldr           q0, [x8]
  .long  0x6f00e621                          // movi          v1.2d, #0xff000000ff
  .long  0x52a77008                          // mov           w8, #0x3b800000
  .long  0x6f380402                          // ushr          v2.4s, v0.4s, #8
  .long  0x6f300403                          // ushr          v3.4s, v0.4s, #16
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x72901028                          // movk          w8, #0x8081
  .long  0x6f280410                          // ushr          v16.4s, v0.4s, #24
  .long  0x4e211c00                          // and           v0.16b, v0.16b, v1.16b
  .long  0x4e211c42                          // and           v2.16b, v2.16b, v1.16b
  .long  0x4e211c61                          // and           v1.16b, v3.16b, v1.16b
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x4e21da03                          // scvtf         v3.4s, v16.4s
  .long  0x4e21d800                          // scvtf         v0.4s, v0.4s
  .long  0x4e21d842                          // scvtf         v2.4s, v2.4s
  .long  0x4e21d830                          // scvtf         v16.4s, v1.4s
  .long  0x6e31dc63                          // fmul          v3.4s, v3.4s, v17.4s
  .long  0x6e31dc00                          // fmul          v0.4s, v0.4s, v17.4s
  .long  0x6e31dc41                          // fmul          v1.4s, v2.4s, v17.4s
  .long  0x6e31de02                          // fmul          v2.4s, v16.4s, v17.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x54000140                          // b.eq          2df4 <sk_load_8888_aarch64+0x9c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000c0                          // b.eq          2dec <sk_load_8888_aarch64+0x94>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffc81                          // b.ne          2d6c <sk_load_8888_aarch64+0x14>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4e040fe0                          // dup           v0.4s, wzr
  .long  0x4d408120                          // ld1           {v0.s}[2], [x9]
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0x0d408100                          // ld1           {v0.s}[0], [x8]
  .long  0x17ffffdd                          // b             2d6c <sk_load_8888_aarch64+0x14>

HIDDEN _sk_gather_8888_aarch64
.globl _sk_gather_8888_aarch64
FUNCTION(_sk_gather_8888_aarch64)
_sk_gather_8888_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c490c                          // add           x12, x8, w12, uxtw #2
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408180                          // ld1           {v0.s}[0], [x12]
  .long  0x8b294909                          // add           x9, x8, w9, uxtw #2
  .long  0xb86a590a                          // ldr           w10, [x8, w10, uxtw #2]
  .long  0xb86b5908                          // ldr           w8, [x8, w11, uxtw #2]
  .long  0x0d409120                          // ld1           {v0.s}[1], [x9]
  .long  0x6f00e621                          // movi          v1.2d, #0xff000000ff
  .long  0x52a77009                          // mov           w9, #0x3b800000
  .long  0x72901029                          // movk          w9, #0x8081
  .long  0x4e141d40                          // mov           v0.s[2], w10
  .long  0x4e1c1d00                          // mov           v0.s[3], w8
  .long  0x6f380410                          // ushr          v16.4s, v0.4s, #8
  .long  0x6f300411                          // ushr          v17.4s, v0.4s, #16
  .long  0x4e211c03                          // and           v3.16b, v0.16b, v1.16b
  .long  0x6f280400                          // ushr          v0.4s, v0.4s, #24
  .long  0x4e211e10                          // and           v16.16b, v16.16b, v1.16b
  .long  0x4e211e21                          // and           v1.16b, v17.16b, v1.16b
  .long  0x4e040d22                          // dup           v2.4s, w9
  .long  0x4e21d863                          // scvtf         v3.4s, v3.4s
  .long  0x4e21d811                          // scvtf         v17.4s, v0.4s
  .long  0x4e21da10                          // scvtf         v16.4s, v16.4s
  .long  0x4e21d832                          // scvtf         v18.4s, v1.4s
  .long  0x6e22dc60                          // fmul          v0.4s, v3.4s, v2.4s
  .long  0x6e22de23                          // fmul          v3.4s, v17.4s, v2.4s
  .long  0x6e22de01                          // fmul          v1.4s, v16.4s, v2.4s
  .long  0x6e22de42                          // fmul          v2.4s, v18.4s, v2.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_store_8888_aarch64
.globl _sk_store_8888_aarch64
FUNCTION(_sk_store_8888_aarch64)
_sk_store_8888_aarch64:
  .long  0x52a86fe9                          // mov           w9, #0x437f0000
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x6e30dc32                          // fmul          v18.4s, v1.4s, v16.4s
  .long  0x6e30dc11                          // fmul          v17.4s, v0.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x4f285652                          // shl           v18.4s, v18.4s, #8
  .long  0x4eb11e51                          // orr           v17.16b, v18.16b, v17.16b
  .long  0x6e30dc52                          // fmul          v18.4s, v2.4s, v16.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e30dc70                          // fmul          v16.4s, v3.4s, v16.4s
  .long  0x6e21aa52                          // fcvtnu        v18.4s, v18.4s
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0x4f305652                          // shl           v18.4s, v18.4s, #16
  .long  0x4f385610                          // shl           v16.4s, v16.4s, #24
  .long  0x4eb21e31                          // orr           v17.16b, v17.16b, v18.16b
  .long  0x8b020908                          // add           x8, x8, x2, lsl #2
  .long  0x4eb01e30                          // orr           v16.16b, v17.16b, v16.16b
  .long  0xb50000a4                          // cbnz          x4, 2ef4 <sk_store_8888_aarch64+0x60>
  .long  0x3d800110                          // str           q16, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x12000489                          // and           w9, w4, #0x3
  .long  0x7100053f                          // cmp           w9, #0x1
  .long  0x54000120                          // b.eq          2f20 <sk_store_8888_aarch64+0x8c>  // b.none
  .long  0x7100093f                          // cmp           w9, #0x2
  .long  0x540000a0                          // b.eq          2f18 <sk_store_8888_aarch64+0x84>  // b.none
  .long  0x71000d3f                          // cmp           w9, #0x3
  .long  0x54fffee1                          // b.ne          2ee8 <sk_store_8888_aarch64+0x54>  // b.any
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x4d008130                          // st1           {v16.s}[2], [x9]
  .long  0x91001109                          // add           x9, x8, #0x4
  .long  0x0d009130                          // st1           {v16.s}[1], [x9]
  .long  0x0d008110                          // st1           {v16.s}[0], [x8]
  .long  0x17fffff1                          // b             2ee8 <sk_store_8888_aarch64+0x54>

HIDDEN _sk_load_f16_aarch64
.globl _sk_load_f16_aarch64
FUNCTION(_sk_load_f16_aarch64)
_sk_load_f16_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0xb5000124                          // cbnz          x4, 2f58 <sk_load_f16_aarch64+0x30>
  .long  0x0c400510                          // ld4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x0e217a00                          // fcvtl         v0.4s, v16.4h
  .long  0x0e217a21                          // fcvtl         v1.4s, v17.4h
  .long  0x0e217a42                          // fcvtl         v2.4s, v18.4h
  .long  0x0e217a63                          // fcvtl         v3.4s, v19.4h
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d606110                          // ld4           {v16.h-v19.h}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fffee0                          // b.eq          2f3c <sk_load_f16_aarch64+0x14>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x0d606930                          // ld4           {v16.h-v19.h}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffe63                          // b.cc          2f3c <sk_load_f16_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d607110                          // ld4           {v16.h-v19.h}[2], [x8]
  .long  0x17fffff0                          // b             2f3c <sk_load_f16_aarch64+0x14>

HIDDEN _sk_gather_f16_aarch64
.globl _sk_gather_f16_aarch64
FUNCTION(_sk_gather_f16_aarch64)
_sk_gather_f16_aarch64:
  .long  0xa9bf7bfd                          // stp           x29, x30, [sp, #-16]!
  .long  0xd100c3e9                          // sub           x9, sp, #0x30
  .long  0x910003fd                          // mov           x29, sp
  .long  0x927be93f                          // and           sp, x9, #0xffffffffffffffe0
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x4ea1b800                          // fcvtzs        v0.4s, v0.4s
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x4d40c922                          // ld1r          {v2.4s}, [x9]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x4ea19440                          // mla           v0.4s, v2.4s, v1.4s
  .long  0x0e143c0a                          // mov           w10, v0.s[2]
  .long  0x1e26000c                          // fmov          w12, s0
  .long  0x8b2c4d0c                          // add           x12, x8, w12, uxtw #3
  .long  0x8b2a4d0a                          // add           x10, x8, w10, uxtw #3
  .long  0x0e0c3c09                          // mov           w9, v0.s[1]
  .long  0x0e1c3c0b                          // mov           w11, v0.s[3]
  .long  0x0d408540                          // ld1           {v0.d}[0], [x10]
  .long  0x0d408581                          // ld1           {v1.d}[0], [x12]
  .long  0x8b294d09                          // add           x9, x8, w9, uxtw #3
  .long  0x8b2b4d08                          // add           x8, x8, w11, uxtw #3
  .long  0x4d408500                          // ld1           {v0.d}[1], [x8]
  .long  0x4d408521                          // ld1           {v1.d}[1], [x9]
  .long  0x910003e8                          // mov           x8, sp
  .long  0xad0003e1                          // stp           q1, q0, [sp]
  .long  0x0c400510                          // ld4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400428                          // ldr           x8, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x0e217a00                          // fcvtl         v0.4s, v16.4h
  .long  0x0e217a21                          // fcvtl         v1.4s, v17.4h
  .long  0x0e217a42                          // fcvtl         v2.4s, v18.4h
  .long  0x0e217a63                          // fcvtl         v3.4s, v19.4h
  .long  0xd63f0100                          // blr           x8
  .long  0x910003bf                          // mov           sp, x29
  .long  0xa8c17bfd                          // ldp           x29, x30, [sp], #16
  .long  0xd65f03c0                          // ret

HIDDEN _sk_store_f16_aarch64
.globl _sk_store_f16_aarch64
FUNCTION(_sk_store_f16_aarch64)
_sk_store_f16_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x0e216810                          // fcvtn         v16.4h, v0.4s
  .long  0x0e216831                          // fcvtn         v17.4h, v1.4s
  .long  0x0e216852                          // fcvtn         v18.4h, v2.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x0e216873                          // fcvtn         v19.4h, v3.4s
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0xb50000a4                          // cbnz          x4, 3040 <sk_store_f16_aarch64+0x30>
  .long  0x0c000510                          // st4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x0d206110                          // st4           {v16.h-v19.h}[0], [x8]
  .long  0x54ffff60                          // b.eq          3034 <sk_store_f16_aarch64+0x24>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x0d206930                          // st4           {v16.h-v19.h}[1], [x9]
  .long  0x54fffee3                          // b.cc          3034 <sk_store_f16_aarch64+0x24>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d207110                          // st4           {v16.h-v19.h}[2], [x8]
  .long  0x17fffff4                          // b             3034 <sk_store_f16_aarch64+0x24>

HIDDEN _sk_load_u16_be_aarch64
.globl _sk_load_u16_be_aarch64
FUNCTION(_sk_load_u16_be_aarch64)
_sk_load_u16_be_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0xb5000404                          // cbnz          x4, 30f4 <sk_load_u16_be_aarch64+0x8c>
  .long  0x0c400500                          // ld4           {v0.4h-v3.4h}, [x8]
  .long  0x0f185410                          // shl           v16.4h, v0.4h, #8
  .long  0x2f180411                          // ushr          v17.4h, v0.4h, #8
  .long  0x0f185432                          // shl           v18.4h, v1.4h, #8
  .long  0x2f180433                          // ushr          v19.4h, v1.4h, #8
  .long  0x0f185454                          // shl           v20.4h, v2.4h, #8
  .long  0x2f180455                          // ushr          v21.4h, v2.4h, #8
  .long  0x0f185476                          // shl           v22.4h, v3.4h, #8
  .long  0x2f180460                          // ushr          v0.4h, v3.4h, #8
  .long  0x52a6f008                          // mov           w8, #0x37800000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x0eb11e01                          // orr           v1.8b, v16.8b, v17.8b
  .long  0x0eb31e42                          // orr           v2.8b, v18.8b, v19.8b
  .long  0x0eb51e90                          // orr           v16.8b, v20.8b, v21.8b
  .long  0x0ea01ec0                          // orr           v0.8b, v22.8b, v0.8b
  .long  0x72801008                          // movk          w8, #0x80
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a442                          // uxtl          v2.4s, v2.4h
  .long  0x2f10a610                          // uxtl          v16.4s, v16.4h
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e040d03                          // dup           v3.4s, w8
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d842                          // ucvtf         v2.4s, v2.4s
  .long  0x6e21da10                          // ucvtf         v16.4s, v16.4s
  .long  0x6e21d811                          // ucvtf         v17.4s, v0.4s
  .long  0x6e23dc20                          // fmul          v0.4s, v1.4s, v3.4s
  .long  0x6e23dc41                          // fmul          v1.4s, v2.4s, v3.4s
  .long  0x6e23de02                          // fmul          v2.4s, v16.4s, v3.4s
  .long  0x6e23de23                          // fmul          v3.4s, v17.4s, v3.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d606100                          // ld4           {v0.h-v3.h}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fffc00                          // b.eq          307c <sk_load_u16_be_aarch64+0x14>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0x0d606920                          // ld4           {v0.h-v3.h}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffb83                          // b.cc          307c <sk_load_u16_be_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d607100                          // ld4           {v0.h-v3.h}[2], [x8]
  .long  0x17ffffd9                          // b             307c <sk_load_u16_be_aarch64+0x14>

HIDDEN _sk_load_rgb_u16_be_aarch64
.globl _sk_load_rgb_u16_be_aarch64
FUNCTION(_sk_load_rgb_u16_be_aarch64)
_sk_load_rgb_u16_be_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x321f07e9                          // orr           w9, wzr, #0x6
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x9b092048                          // madd          x8, x2, x9, x8
  .long  0xb5000384                          // cbnz          x4, 319c <sk_load_rgb_u16_be_aarch64+0x80>
  .long  0x0c404500                          // ld3           {v0.4h-v2.4h}, [x8]
  .long  0x0f185403                          // shl           v3.4h, v0.4h, #8
  .long  0x2f180410                          // ushr          v16.4h, v0.4h, #8
  .long  0x0f185431                          // shl           v17.4h, v1.4h, #8
  .long  0x2f180432                          // ushr          v18.4h, v1.4h, #8
  .long  0x0f185453                          // shl           v19.4h, v2.4h, #8
  .long  0x2f180440                          // ushr          v0.4h, v2.4h, #8
  .long  0x52a6f008                          // mov           w8, #0x37800000
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x0eb01c61                          // orr           v1.8b, v3.8b, v16.8b
  .long  0x0eb21e23                          // orr           v3.8b, v17.8b, v18.8b
  .long  0x0ea01e60                          // orr           v0.8b, v19.8b, v0.8b
  .long  0x72801008                          // movk          w8, #0x80
  .long  0x2f10a421                          // uxtl          v1.4s, v1.4h
  .long  0x2f10a463                          // uxtl          v3.4s, v3.4h
  .long  0x2f10a400                          // uxtl          v0.4s, v0.4h
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x91004028                          // add           x8, x1, #0x10
  .long  0x6e21d821                          // ucvtf         v1.4s, v1.4s
  .long  0x6e21d863                          // ucvtf         v3.4s, v3.4s
  .long  0x6e21d810                          // ucvtf         v16.4s, v0.4s
  .long  0x6e22dc20                          // fmul          v0.4s, v1.4s, v2.4s
  .long  0x6e22dc61                          // fmul          v1.4s, v3.4s, v2.4s
  .long  0x6e22de02                          // fmul          v2.4s, v16.4s, v2.4s
  .long  0x4f03f603                          // fmov          v3.4s, #1.000000000000000000e+00
  .long  0xaa0803e1                          // mov           x1, x8
  .long  0xd61f00a0                          // br            x5
  .long  0x0d406100                          // ld3           {v0.h-v2.h}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54fffc80                          // b.eq          3134 <sk_load_rgb_u16_be_aarch64+0x18>  // b.none
  .long  0x91001909                          // add           x9, x8, #0x6
  .long  0x0d406920                          // ld3           {v0.h-v2.h}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffc03                          // b.cc          3134 <sk_load_rgb_u16_be_aarch64+0x18>  // b.lo, b.ul, b.last
  .long  0x91003108                          // add           x8, x8, #0xc
  .long  0x0d407100                          // ld3           {v0.h-v2.h}[2], [x8]
  .long  0x17ffffdd                          // b             3134 <sk_load_rgb_u16_be_aarch64+0x18>

HIDDEN _sk_store_u16_be_aarch64
.globl _sk_store_u16_be_aarch64
FUNCTION(_sk_store_u16_be_aarch64)
_sk_store_u16_be_aarch64:
  .long  0x52a8efe9                          // mov           w9, #0x477f0000
  .long  0x729fe009                          // movk          w9, #0xff00
  .long  0x4e040d34                          // dup           v20.4s, w9
  .long  0x6e34dc10                          // fmul          v16.4s, v0.4s, v20.4s
  .long  0x6e34dc31                          // fmul          v17.4s, v1.4s, v20.4s
  .long  0x6e21aa10                          // fcvtnu        v16.4s, v16.4s
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6e21aa31                          // fcvtnu        v17.4s, v17.4s
  .long  0x0e612a10                          // xtn           v16.4h, v16.4s
  .long  0x0e612a31                          // xtn           v17.4h, v17.4s
  .long  0x0f185612                          // shl           v18.4h, v16.4h, #8
  .long  0x2f180610                          // ushr          v16.4h, v16.4h, #8
  .long  0x0f185635                          // shl           v21.4h, v17.4h, #8
  .long  0x2f180636                          // ushr          v22.4h, v17.4h, #8
  .long  0x0eb01e50                          // orr           v16.8b, v18.8b, v16.8b
  .long  0x0eb61eb1                          // orr           v17.8b, v21.8b, v22.8b
  .long  0x6e34dc55                          // fmul          v21.4s, v2.4s, v20.4s
  .long  0x6e34dc74                          // fmul          v20.4s, v3.4s, v20.4s
  .long  0x6e21aab5                          // fcvtnu        v21.4s, v21.4s
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x6e21aa94                          // fcvtnu        v20.4s, v20.4s
  .long  0x0e612ab5                          // xtn           v21.4h, v21.4s
  .long  0x0e612a94                          // xtn           v20.4h, v20.4s
  .long  0x0f1856b6                          // shl           v22.4h, v21.4h, #8
  .long  0x2f1806b5                          // ushr          v21.4h, v21.4h, #8
  .long  0x0eb51ed2                          // orr           v18.8b, v22.8b, v21.8b
  .long  0x0f185695                          // shl           v21.4h, v20.4h, #8
  .long  0x2f180694                          // ushr          v20.4h, v20.4h, #8
  .long  0x8b020d08                          // add           x8, x8, x2, lsl #3
  .long  0x0eb41eb3                          // orr           v19.8b, v21.8b, v20.8b
  .long  0xb50000a4                          // cbnz          x4, 3250 <sk_store_u16_be_aarch64+0x8c>
  .long  0x0c000510                          // st4           {v16.4h-v19.4h}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x0d206110                          // st4           {v16.h-v19.h}[0], [x8]
  .long  0x54ffff60                          // b.eq          3244 <sk_store_u16_be_aarch64+0x80>  // b.none
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x0d206930                          // st4           {v16.h-v19.h}[1], [x9]
  .long  0x54fffee3                          // b.cc          3244 <sk_store_u16_be_aarch64+0x80>  // b.lo, b.ul, b.last
  .long  0x91004108                          // add           x8, x8, #0x10
  .long  0x0d207110                          // st4           {v16.h-v19.h}[2], [x8]
  .long  0x17fffff4                          // b             3244 <sk_store_u16_be_aarch64+0x80>

HIDDEN _sk_load_f32_aarch64
.globl _sk_load_f32_aarch64
FUNCTION(_sk_load_f32_aarch64)
_sk_load_f32_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b021108                          // add           x8, x8, x2, lsl #4
  .long  0xb50000a4                          // cbnz          x4, 3298 <sk_load_f32_aarch64+0x20>
  .long  0x4c400900                          // ld4           {v0.4s-v3.4s}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0x0d60a100                          // ld4           {v0.s-v3.s}[0], [x8]
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x54ffff60                          // b.eq          328c <sk_load_f32_aarch64+0x14>  // b.none
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0x0d60b120                          // ld4           {v0.s-v3.s}[1], [x9]
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x54fffee3                          // b.cc          328c <sk_load_f32_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91008108                          // add           x8, x8, #0x20
  .long  0x4d60a100                          // ld4           {v0.s-v3.s}[2], [x8]
  .long  0x17fffff4                          // b             328c <sk_load_f32_aarch64+0x14>

HIDDEN _sk_store_f32_aarch64
.globl _sk_store_f32_aarch64
FUNCTION(_sk_store_f32_aarch64)
_sk_store_f32_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xf9400108                          // ldr           x8, [x8]
  .long  0x8b021108                          // add           x8, x8, x2, lsl #4
  .long  0xb50000a4                          // cbnz          x4, 32e0 <sk_store_f32_aarch64+0x20>
  .long  0x4c000900                          // st4           {v0.4s-v3.4s}, [x8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5
  .long  0xf100049f                          // cmp           x4, #0x1
  .long  0x0d20a100                          // st4           {v0.s-v3.s}[0], [x8]
  .long  0x54ffff60                          // b.eq          32d4 <sk_store_f32_aarch64+0x14>  // b.none
  .long  0x91004109                          // add           x9, x8, #0x10
  .long  0xf1000c9f                          // cmp           x4, #0x3
  .long  0x0d20b120                          // st4           {v0.s-v3.s}[1], [x9]
  .long  0x54fffee3                          // b.cc          32d4 <sk_store_f32_aarch64+0x14>  // b.lo, b.ul, b.last
  .long  0x91008108                          // add           x8, x8, #0x20
  .long  0x4d20a100                          // st4           {v0.s-v3.s}[2], [x8]
  .long  0x17fffff4                          // b             32d4 <sk_store_f32_aarch64+0x14>

HIDDEN _sk_clamp_x_aarch64
.globl _sk_clamp_x_aarch64
FUNCTION(_sk_clamp_x_aarch64)
_sk_clamp_x_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0x4e20f620                          // fmax          v0.4s, v17.4s, v0.4s
  .long  0x6f07e7f1                          // movi          v17.2d, #0xffffffffffffffff
  .long  0x4d40c910                          // ld1r          {v16.4s}, [x8]
  .long  0x4eb18610                          // add           v16.4s, v16.4s, v17.4s
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_y_aarch64
.globl _sk_clamp_y_aarch64
FUNCTION(_sk_clamp_y_aarch64)
_sk_clamp_y_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0x4e21f621                          // fmax          v1.4s, v17.4s, v1.4s
  .long  0x6f07e7f1                          // movi          v17.2d, #0xffffffffffffffff
  .long  0x4d40c910                          // ld1r          {v16.4s}, [x8]
  .long  0x4eb18610                          // add           v16.4s, v16.4s, v17.4s
  .long  0x4eb0f421                          // fmin          v1.4s, v1.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_repeat_x_aarch64
.globl _sk_repeat_x_aarch64
FUNCTION(_sk_repeat_x_aarch64)
_sk_repeat_x_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ddfc910                          // ld1r          {v16.4s}, [x8], #4
  .long  0xbd400111                          // ldr           s17, [x8]
  .long  0x4f919011                          // fmul          v17.4s, v0.4s, v17.s[0]
  .long  0x4e219a31                          // frintm        v17.4s, v17.4s
  .long  0x4eb1ce00                          // fmls          v0.4s, v16.4s, v17.4s
  .long  0x6f07e7f1                          // movi          v17.2d, #0xffffffffffffffff
  .long  0x4eb18610                          // add           v16.4s, v16.4s, v17.4s
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_repeat_y_aarch64
.globl _sk_repeat_y_aarch64
FUNCTION(_sk_repeat_y_aarch64)
_sk_repeat_y_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x4ddfc910                          // ld1r          {v16.4s}, [x8], #4
  .long  0xbd400111                          // ldr           s17, [x8]
  .long  0x4f919031                          // fmul          v17.4s, v1.4s, v17.s[0]
  .long  0x4e219a31                          // frintm        v17.4s, v17.4s
  .long  0x4eb1ce01                          // fmls          v1.4s, v16.4s, v17.4s
  .long  0x6f07e7f1                          // movi          v17.2d, #0xffffffffffffffff
  .long  0x4eb18610                          // add           v16.4s, v16.4s, v17.4s
  .long  0x4eb0f421                          // fmin          v1.4s, v1.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_mirror_x_aarch64
.globl _sk_mirror_x_aarch64
FUNCTION(_sk_mirror_x_aarch64)
_sk_mirror_x_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x1e2c1012                          // fmov          s18, #5.000000000000000000e-01
  .long  0x6f07e7f3                          // movi          v19.2d, #0xffffffffffffffff
  .long  0x2d404111                          // ldp           s17, s16, [x8]
  .long  0x1e320a10                          // fmul          s16, s16, s18
  .long  0x4e040632                          // dup           v18.4s, v17.s[0]
  .long  0x4eb2d400                          // fsub          v0.4s, v0.4s, v18.4s
  .long  0x4f909010                          // fmul          v16.4s, v0.4s, v16.s[0]
  .long  0x1e312a31                          // fadd          s17, s17, s17
  .long  0x4e219a10                          // frintm        v16.4s, v16.4s
  .long  0x4f915200                          // fmls          v0.4s, v16.4s, v17.s[0]
  .long  0x4eb2d400                          // fsub          v0.4s, v0.4s, v18.4s
  .long  0x4eb38653                          // add           v19.4s, v18.4s, v19.4s
  .long  0x4ea0f800                          // fabs          v0.4s, v0.4s
  .long  0x4eb3f400                          // fmin          v0.4s, v0.4s, v19.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_mirror_y_aarch64
.globl _sk_mirror_y_aarch64
FUNCTION(_sk_mirror_y_aarch64)
_sk_mirror_y_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x1e2c1012                          // fmov          s18, #5.000000000000000000e-01
  .long  0x6f07e7f3                          // movi          v19.2d, #0xffffffffffffffff
  .long  0x2d404111                          // ldp           s17, s16, [x8]
  .long  0x1e320a10                          // fmul          s16, s16, s18
  .long  0x4e040632                          // dup           v18.4s, v17.s[0]
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4f909030                          // fmul          v16.4s, v1.4s, v16.s[0]
  .long  0x1e312a31                          // fadd          s17, s17, s17
  .long  0x4e219a10                          // frintm        v16.4s, v16.4s
  .long  0x4f915201                          // fmls          v1.4s, v16.4s, v17.s[0]
  .long  0x4eb2d421                          // fsub          v1.4s, v1.4s, v18.4s
  .long  0x4eb38653                          // add           v19.4s, v18.4s, v19.4s
  .long  0x4ea0f821                          // fabs          v1.4s, v1.4s
  .long  0x4eb3f421                          // fmin          v1.4s, v1.4s, v19.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_clamp_x_1_aarch64
.globl _sk_clamp_x_1_aarch64
FUNCTION(_sk_clamp_x_1_aarch64)
_sk_clamp_x_1_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6f00e410                          // movi          v16.2d, #0x0
  .long  0x4e20f600                          // fmax          v0.4s, v16.4s, v0.4s
  .long  0x4f03f610                          // fmov          v16.4s, #1.000000000000000000e+00
  .long  0x4eb0f400                          // fmin          v0.4s, v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_repeat_x_1_aarch64
.globl _sk_repeat_x_1_aarch64
FUNCTION(_sk_repeat_x_1_aarch64)
_sk_repeat_x_1_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e219810                          // frintm        v16.4s, v0.4s
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_mirror_x_1_aarch64
.globl _sk_mirror_x_1_aarch64
FUNCTION(_sk_mirror_x_1_aarch64)
_sk_mirror_x_1_aarch64:
  .long  0x4f07f610                          // fmov          v16.4s, #-1.000000000000000000e+00
  .long  0x4f0167f1                          // movi          v17.4s, #0x3f, lsl #24
  .long  0x4e30d400                          // fadd          v0.4s, v0.4s, v16.4s
  .long  0x6e31dc11                          // fmul          v17.4s, v0.4s, v17.4s
  .long  0x4e219a31                          // frintm        v17.4s, v17.4s
  .long  0x4e31d631                          // fadd          v17.4s, v17.4s, v17.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4eb1d400                          // fsub          v0.4s, v0.4s, v17.4s
  .long  0x4e30d400                          // fadd          v0.4s, v0.4s, v16.4s
  .long  0x4ea0f800                          // fabs          v0.4s, v0.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_luminance_to_alpha_aarch64
.globl _sk_luminance_to_alpha_aarch64
FUNCTION(_sk_luminance_to_alpha_aarch64)
_sk_luminance_to_alpha_aarch64:
  .long  0x52a7cb28                          // mov           w8, #0x3e590000
  .long  0x72967a08                          // movk          w8, #0xb3d0
  .long  0x4e040d11                          // dup           v17.4s, w8
  .long  0x52a7e6e8                          // mov           w8, #0x3f370000
  .long  0x7282eb28                          // movk          w8, #0x1759
  .long  0x4ea01c10                          // mov           v16.16b, v0.16b
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a7b268                          // mov           w8, #0x3d930000
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x729bb308                          // movk          w8, #0xdd98
  .long  0x6e20dc23                          // fmul          v3.4s, v1.4s, v0.4s
  .long  0x4e30ce23                          // fmla          v3.4s, v17.4s, v16.4s
  .long  0x4e040d10                          // dup           v16.4s, w8
  .long  0x6f00e400                          // movi          v0.2d, #0x0
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x4e22ce03                          // fmla          v3.4s, v16.4s, v2.4s
  .long  0x6f00e402                          // movi          v2.2d, #0x0
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_2x3_aarch64
.globl _sk_matrix_2x3_aarch64
FUNCTION(_sk_matrix_2x3_aarch64)
_sk_matrix_2x3_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100410a                          // add           x10, x8, #0x10
  .long  0x4ddfc932                          // ld1r          {v18.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x2d415113                          // ldp           s19, s20, [x8, #8]
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x4f931030                          // fmla          v16.4s, v1.4s, v19.s[0]
  .long  0xbd400133                          // ldr           s19, [x9]
  .long  0x4f941031                          // fmla          v17.4s, v1.4s, v20.s[0]
  .long  0x4e20ce50                          // fmla          v16.4s, v18.4s, v0.4s
  .long  0x4f931011                          // fmla          v17.4s, v0.4s, v19.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_3x4_aarch64
.globl _sk_matrix_3x4_aarch64
FUNCTION(_sk_matrix_3x4_aarch64)
_sk_matrix_3x4_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100910a                          // add           x10, x8, #0x24
  .long  0x4ddfc933                          // ld1r          {v19.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9100a10a                          // add           x10, x8, #0x28
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9100b10a                          // add           x10, x8, #0x2c
  .long  0x2d435514                          // ldp           s20, s21, [x8, #24]
  .long  0xbd402116                          // ldr           s22, [x8, #32]
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x4f941050                          // fmla          v16.4s, v2.4s, v20.s[0]
  .long  0x4f951051                          // fmla          v17.4s, v2.4s, v21.s[0]
  .long  0x4f961052                          // fmla          v18.4s, v2.4s, v22.s[0]
  .long  0x2d425502                          // ldp           s2, s21, [x8, #16]
  .long  0x2d415d14                          // ldp           s20, s23, [x8, #8]
  .long  0x4f821031                          // fmla          v17.4s, v1.4s, v2.s[0]
  .long  0xbd400122                          // ldr           s2, [x9]
  .long  0x4f971030                          // fmla          v16.4s, v1.4s, v23.s[0]
  .long  0x4f951032                          // fmla          v18.4s, v1.4s, v21.s[0]
  .long  0x4e20ce70                          // fmla          v16.4s, v19.4s, v0.4s
  .long  0x4f941012                          // fmla          v18.4s, v0.4s, v20.s[0]
  .long  0x4f821011                          // fmla          v17.4s, v0.4s, v2.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_4x5_aarch64
.globl _sk_matrix_4x5_aarch64
FUNCTION(_sk_matrix_4x5_aarch64)
_sk_matrix_4x5_aarch64:
  .long  0xf9400029                          // ldr           x9, [x1]
  .long  0xaa0903e8                          // mov           x8, x9
  .long  0x9101012a                          // add           x10, x9, #0x40
  .long  0x4ddfc914                          // ld1r          {v20.4s}, [x8], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9101112a                          // add           x10, x9, #0x44
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9101212a                          // add           x10, x9, #0x48
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x2d465533                          // ldp           s19, s21, [x9, #48]
  .long  0x2d475d36                          // ldp           s22, s23, [x9, #56]
  .long  0x9101312a                          // add           x10, x9, #0x4c
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f931070                          // fmla          v16.4s, v3.4s, v19.s[0]
  .long  0x4d40c953                          // ld1r          {v19.4s}, [x10]
  .long  0x4f951071                          // fmla          v17.4s, v3.4s, v21.s[0]
  .long  0x4f961072                          // fmla          v18.4s, v3.4s, v22.s[0]
  .long  0x2d445935                          // ldp           s21, s22, [x9, #32]
  .long  0x4f971073                          // fmla          v19.4s, v3.4s, v23.s[0]
  .long  0x2d455d23                          // ldp           s3, s23, [x9, #40]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x4f951050                          // fmla          v16.4s, v2.4s, v21.s[0]
  .long  0x4f961051                          // fmla          v17.4s, v2.4s, v22.s[0]
  .long  0x2d425935                          // ldp           s21, s22, [x9, #16]
  .long  0x4f971053                          // fmla          v19.4s, v2.4s, v23.s[0]
  .long  0x4f831052                          // fmla          v18.4s, v2.4s, v3.s[0]
  .long  0x2d410d22                          // ldp           s2, s3, [x9, #8]
  .long  0x4f951030                          // fmla          v16.4s, v1.4s, v21.s[0]
  .long  0x2d435d35                          // ldp           s21, s23, [x9, #24]
  .long  0x4f961031                          // fmla          v17.4s, v1.4s, v22.s[0]
  .long  0xbd400116                          // ldr           s22, [x8]
  .long  0x4e20ce90                          // fmla          v16.4s, v20.4s, v0.4s
  .long  0x4f951032                          // fmla          v18.4s, v1.4s, v21.s[0]
  .long  0x4f971033                          // fmla          v19.4s, v1.4s, v23.s[0]
  .long  0x4f821012                          // fmla          v18.4s, v0.4s, v2.s[0]
  .long  0x4f831013                          // fmla          v19.4s, v0.4s, v3.s[0]
  .long  0x4f961011                          // fmla          v17.4s, v0.4s, v22.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0x4eb21e42                          // mov           v2.16b, v18.16b
  .long  0x4eb31e63                          // mov           v3.16b, v19.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_4x3_aarch64
.globl _sk_matrix_4x3_aarch64
FUNCTION(_sk_matrix_4x3_aarch64)
_sk_matrix_4x3_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100810a                          // add           x10, x8, #0x20
  .long  0x4ddfc932                          // ld1r          {v18.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9100910a                          // add           x10, x8, #0x24
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9100a10a                          // add           x10, x8, #0x28
  .long  0x2d425113                          // ldp           s19, s20, [x8, #16]
  .long  0x4d40c942                          // ld1r          {v2.4s}, [x10]
  .long  0x9100b10a                          // add           x10, x8, #0x2c
  .long  0x2d435915                          // ldp           s21, s22, [x8, #24]
  .long  0x4d40c943                          // ld1r          {v3.4s}, [x10]
  .long  0x4f931030                          // fmla          v16.4s, v1.4s, v19.s[0]
  .long  0x4e20ce50                          // fmla          v16.4s, v18.4s, v0.4s
  .long  0xbd400132                          // ldr           s18, [x9]
  .long  0x4f941031                          // fmla          v17.4s, v1.4s, v20.s[0]
  .long  0x4f951022                          // fmla          v2.4s, v1.4s, v21.s[0]
  .long  0x4f961023                          // fmla          v3.4s, v1.4s, v22.s[0]
  .long  0x2d414d01                          // ldp           s1, s19, [x8, #8]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f921011                          // fmla          v17.4s, v0.4s, v18.s[0]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0x4f811002                          // fmla          v2.4s, v0.4s, v1.s[0]
  .long  0x4f931003                          // fmla          v3.4s, v0.4s, v19.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x4eb11e21                          // mov           v1.16b, v17.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_matrix_perspective_aarch64
.globl _sk_matrix_perspective_aarch64
FUNCTION(_sk_matrix_perspective_aarch64)
_sk_matrix_perspective_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4ddfc930                          // ld1r          {v16.4s}, [x9], #4
  .long  0x4d40c951                          // ld1r          {v17.4s}, [x10]
  .long  0x9100810a                          // add           x10, x8, #0x20
  .long  0x4d40c952                          // ld1r          {v18.4s}, [x10]
  .long  0x2d41d113                          // ldp           s19, s20, [x8, #12]
  .long  0x2d435915                          // ldp           s21, s22, [x8, #24]
  .long  0x91002108                          // add           x8, x8, #0x8
  .long  0x4f941031                          // fmla          v17.4s, v1.4s, v20.s[0]
  .long  0x4d40c914                          // ld1r          {v20.4s}, [x8]
  .long  0x4f961032                          // fmla          v18.4s, v1.4s, v22.s[0]
  .long  0xbd400136                          // ldr           s22, [x9]
  .long  0x4f951012                          // fmla          v18.4s, v0.4s, v21.s[0]
  .long  0x4f931011                          // fmla          v17.4s, v0.4s, v19.s[0]
  .long  0x4f961034                          // fmla          v20.4s, v1.4s, v22.s[0]
  .long  0x4ea1da41                          // frecpe        v1.4s, v18.4s
  .long  0x4e21fe52                          // frecps        v18.4s, v18.4s, v1.4s
  .long  0x6e32dc32                          // fmul          v18.4s, v1.4s, v18.4s
  .long  0x4e20ce14                          // fmla          v20.4s, v16.4s, v0.4s
  .long  0x6e32de21                          // fmul          v1.4s, v17.4s, v18.4s
  .long  0x6e32de80                          // fmul          v0.4s, v20.4s, v18.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_evenly_spaced_gradient_aarch64
.globl _sk_evenly_spaced_gradient_aarch64
FUNCTION(_sk_evenly_spaced_gradient_aarch64)
_sk_evenly_spaced_gradient_aarch64:
  .long  0xd10043ff                          // sub           sp, sp, #0x10
  .long  0xaa0103e8                          // mov           x8, x1
  .long  0x91002109                          // add           x9, x8, #0x8
  .long  0xf90007e9                          // str           x9, [sp, #8]
  .long  0xf841042a                          // ldr           x10, [x1], #16
  .long  0xa940254b                          // ldp           x11, x9, [x10]
  .long  0xa942354c                          // ldp           x12, x13, [x10, #32]
  .long  0xa9413d4e                          // ldp           x14, x15, [x10, #16]
  .long  0xa9434550                          // ldp           x16, x17, [x10, #48]
  .long  0xd100056b                          // sub           x11, x11, #0x1
  .long  0x9e230161                          // ucvtf         s1, x11
  .long  0xf940214a                          // ldr           x10, [x10, #64]
  .long  0x4f819001                          // fmul          v1.4s, v0.4s, v1.s[0]
  .long  0x4ea1b821                          // fcvtzs        v1.4s, v1.4s
  .long  0x6f20a422                          // uxtl2         v2.2d, v1.4s
  .long  0x2f20a421                          // uxtl          v1.2d, v1.2s
  .long  0x9e660032                          // fmov          x18, d1
  .long  0x9e660046                          // fmov          x6, d2
  .long  0x4e183c2b                          // mov           x11, v1.d[1]
  .long  0x4e183c45                          // mov           x5, v2.d[1]
  .long  0xbc667921                          // ldr           s1, [x9, x6, lsl #2]
  .long  0xbc6679a2                          // ldr           s2, [x13, x6, lsl #2]
  .long  0xbc6679c3                          // ldr           s3, [x14, x6, lsl #2]
  .long  0xbc667a11                          // ldr           s17, [x16, x6, lsl #2]
  .long  0xbc6679f2                          // ldr           s18, [x15, x6, lsl #2]
  .long  0xbc667a33                          // ldr           s19, [x17, x6, lsl #2]
  .long  0xbc667994                          // ldr           s20, [x12, x6, lsl #2]
  .long  0xbc667955                          // ldr           s21, [x10, x6, lsl #2]
  .long  0x8b120926                          // add           x6, x9, x18, lsl #2
  .long  0x0d4080d6                          // ld1           {v22.s}[0], [x6]
  .long  0x8b1209a6                          // add           x6, x13, x18, lsl #2
  .long  0x0d4080d0                          // ld1           {v16.s}[0], [x6]
  .long  0x8b0b0926                          // add           x6, x9, x11, lsl #2
  .long  0x0d4090d6                          // ld1           {v22.s}[1], [x6]
  .long  0x8b1209c6                          // add           x6, x14, x18, lsl #2
  .long  0x0d4080d7                          // ld1           {v23.s}[0], [x6]
  .long  0x8b120a06                          // add           x6, x16, x18, lsl #2
  .long  0x6e140436                          // mov           v22.s[2], v1.s[0]
  .long  0x0d4080c1                          // ld1           {v1.s}[0], [x6]
  .long  0x8b0b09a6                          // add           x6, x13, x11, lsl #2
  .long  0x0d4090d0                          // ld1           {v16.s}[1], [x6]
  .long  0x8b0b09c6                          // add           x6, x14, x11, lsl #2
  .long  0x0d4090d7                          // ld1           {v23.s}[1], [x6]
  .long  0x8b1209e6                          // add           x6, x15, x18, lsl #2
  .long  0x0d4080d8                          // ld1           {v24.s}[0], [x6]
  .long  0x8b120a26                          // add           x6, x17, x18, lsl #2
  .long  0x6e140450                          // mov           v16.s[2], v2.s[0]
  .long  0x0d4080c2                          // ld1           {v2.s}[0], [x6]
  .long  0x8b0b0a06                          // add           x6, x16, x11, lsl #2
  .long  0x0d4090c1                          // ld1           {v1.s}[1], [x6]
  .long  0x8b0b09e6                          // add           x6, x15, x11, lsl #2
  .long  0x0d4090d8                          // ld1           {v24.s}[1], [x6]
  .long  0x8b120986                          // add           x6, x12, x18, lsl #2
  .long  0x8b120952                          // add           x18, x10, x18, lsl #2
  .long  0x6e140477                          // mov           v23.s[2], v3.s[0]
  .long  0x0d408243                          // ld1           {v3.s}[0], [x18]
  .long  0x8b0b0a32                          // add           x18, x17, x11, lsl #2
  .long  0x6e140621                          // mov           v1.s[2], v17.s[0]
  .long  0x0d4080d1                          // ld1           {v17.s}[0], [x6]
  .long  0x0d409242                          // ld1           {v2.s}[1], [x18]
  .long  0x8b0b0992                          // add           x18, x12, x11, lsl #2
  .long  0x6e140658                          // mov           v24.s[2], v18.s[0]
  .long  0x0d409251                          // ld1           {v17.s}[1], [x18]
  .long  0x6e140662                          // mov           v2.s[2], v19.s[0]
  .long  0xbc657932                          // ldr           s18, [x9, x5, lsl #2]
  .long  0xbc6579b3                          // ldr           s19, [x13, x5, lsl #2]
  .long  0x6e140691                          // mov           v17.s[2], v20.s[0]
  .long  0xbc6579d4                          // ldr           s20, [x14, x5, lsl #2]
  .long  0x6e1c0656                          // mov           v22.s[3], v18.s[0]
  .long  0xbc657a12                          // ldr           s18, [x16, x5, lsl #2]
  .long  0x6e1c0670                          // mov           v16.s[3], v19.s[0]
  .long  0xbc6579f3                          // ldr           s19, [x15, x5, lsl #2]
  .long  0x8b0b094b                          // add           x11, x10, x11, lsl #2
  .long  0x0d409163                          // ld1           {v3.s}[1], [x11]
  .long  0x6e1c0697                          // mov           v23.s[3], v20.s[0]
  .long  0xbc657a34                          // ldr           s20, [x17, x5, lsl #2]
  .long  0x6e1c0641                          // mov           v1.s[3], v18.s[0]
  .long  0xbc657992                          // ldr           s18, [x12, x5, lsl #2]
  .long  0x6e1c0678                          // mov           v24.s[3], v19.s[0]
  .long  0xbc657953                          // ldr           s19, [x10, x5, lsl #2]
  .long  0xf9400505                          // ldr           x5, [x8, #8]
  .long  0x6e1406a3                          // mov           v3.s[2], v21.s[0]
  .long  0x6e1c0682                          // mov           v2.s[3], v20.s[0]
  .long  0x6e1c0651                          // mov           v17.s[3], v18.s[0]
  .long  0x6e1c0663                          // mov           v3.s[3], v19.s[0]
  .long  0x4e20ced0                          // fmla          v16.4s, v22.4s, v0.4s
  .long  0x4e20cee1                          // fmla          v1.4s, v23.4s, v0.4s
  .long  0x4e20cf02                          // fmla          v2.4s, v24.4s, v0.4s
  .long  0x4e20ce23                          // fmla          v3.4s, v17.4s, v0.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x910043ff                          // add           sp, sp, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_gauss_a_to_rgba_aarch64
.globl _sk_gauss_a_to_rgba_aarch64
FUNCTION(_sk_gauss_a_to_rgba_aarch64)
_sk_gauss_a_to_rgba_aarch64:
  .long  0x52b80228                          // mov           w8, #0xc0110000
  .long  0x728205a8                          // movk          w8, #0x102d
  .long  0x52a80729                          // mov           w9, #0x40390000
  .long  0x728f0249                          // movk          w9, #0x7812
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x52a7cb48                          // mov           w8, #0x3e5a0000
  .long  0x72928408                          // movk          w8, #0x9420
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x52a7c3c9                          // mov           w9, #0x3e1e0000
  .long  0x7293a089                          // movk          w9, #0x9d04
  .long  0x4e040d02                          // dup           v2.4s, w8
  .long  0x52a73428                          // mov           w8, #0x39a10000
  .long  0x4e23cc01                          // fmla          v1.4s, v0.4s, v3.4s
  .long  0x72830008                          // movk          w8, #0x1800
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x4e23cc22                          // fmla          v2.4s, v1.4s, v3.4s
  .long  0x4e040d00                          // dup           v0.4s, w8
  .long  0x4e23cc50                          // fmla          v16.4s, v2.4s, v3.4s
  .long  0x4e23ce00                          // fmla          v0.4s, v16.4s, v3.4s
  .long  0x4ea01c01                          // mov           v1.16b, v0.16b
  .long  0x4ea01c02                          // mov           v2.16b, v0.16b
  .long  0x4ea01c03                          // mov           v3.16b, v0.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_gradient_aarch64
.globl _sk_gradient_aarch64
FUNCTION(_sk_gradient_aarch64)
_sk_gradient_aarch64:
  .long  0xd10043ff                          // sub           sp, sp, #0x10
  .long  0x91002028                          // add           x8, x1, #0x8
  .long  0xf90007e8                          // str           x8, [sp, #8]
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x6f00e411                          // movi          v17.2d, #0x0
  .long  0xf9400109                          // ldr           x9, [x8]
  .long  0xf100093f                          // cmp           x9, #0x2
  .long  0x540001c3                          // b.cc          3900 <sk_gradient_aarch64+0x58>  // b.lo, b.ul, b.last
  .long  0xf940250a                          // ldr           x10, [x8, #72]
  .long  0xd1000529                          // sub           x9, x9, #0x1
  .long  0x6f00e401                          // movi          v1.2d, #0x0
  .long  0x4f000422                          // movi          v2.4s, #0x1
  .long  0x9100114a                          // add           x10, x10, #0x4
  .long  0x4ddfc943                          // ld1r          {v3.4s}, [x10], #4
  .long  0xd1000529                          // sub           x9, x9, #0x1
  .long  0x6e23e403                          // fcmge         v3.4s, v0.4s, v3.4s
  .long  0x4e221c63                          // and           v3.16b, v3.16b, v2.16b
  .long  0x4ea18461                          // add           v1.4s, v3.4s, v1.4s
  .long  0xb5ffff69                          // cbnz          x9, 38e0 <sk_gradient_aarch64+0x38>
  .long  0x6f20a431                          // uxtl2         v17.2d, v1.4s
  .long  0x2f20a421                          // uxtl          v1.2d, v1.2s
  .long  0xa940b10a                          // ldp           x10, x12, [x8, #8]
  .long  0xa942b90d                          // ldp           x13, x14, [x8, #40]
  .long  0x9e66002b                          // fmov          x11, d1
  .long  0xa941c10f                          // ldp           x15, x16, [x8, #24]
  .long  0x8b0b0952                          // add           x18, x10, x11, lsl #2
  .long  0xa943a111                          // ldp           x17, x8, [x8, #56]
  .long  0x0d408252                          // ld1           {v18.s}[0], [x18]
  .long  0x8b0b09b2                          // add           x18, x13, x11, lsl #2
  .long  0x0d408250                          // ld1           {v16.s}[0], [x18]
  .long  0x8b0b0992                          // add           x18, x12, x11, lsl #2
  .long  0x0d408253                          // ld1           {v19.s}[0], [x18]
  .long  0x8b0b09d2                          // add           x18, x14, x11, lsl #2
  .long  0x4e183c29                          // mov           x9, v1.d[1]
  .long  0x0d408241                          // ld1           {v1.s}[0], [x18]
  .long  0x8b0b09f2                          // add           x18, x15, x11, lsl #2
  .long  0x0d408254                          // ld1           {v20.s}[0], [x18]
  .long  0x8b0b0a32                          // add           x18, x17, x11, lsl #2
  .long  0x0d408242                          // ld1           {v2.s}[0], [x18]
  .long  0x8b0b0a12                          // add           x18, x16, x11, lsl #2
  .long  0x8b0b090b                          // add           x11, x8, x11, lsl #2
  .long  0x0d408163                          // ld1           {v3.s}[0], [x11]
  .long  0x8b09094b                          // add           x11, x10, x9, lsl #2
  .long  0x0d409172                          // ld1           {v18.s}[1], [x11]
  .long  0x8b0909ab                          // add           x11, x13, x9, lsl #2
  .long  0x0d409170                          // ld1           {v16.s}[1], [x11]
  .long  0x8b09098b                          // add           x11, x12, x9, lsl #2
  .long  0x0d409173                          // ld1           {v19.s}[1], [x11]
  .long  0x8b0909cb                          // add           x11, x14, x9, lsl #2
  .long  0x0d409161                          // ld1           {v1.s}[1], [x11]
  .long  0x8b0909eb                          // add           x11, x15, x9, lsl #2
  .long  0x0d408255                          // ld1           {v21.s}[0], [x18]
  .long  0x9e660232                          // fmov          x18, d17
  .long  0x0d409174                          // ld1           {v20.s}[1], [x11]
  .long  0x4e183e2b                          // mov           x11, v17.d[1]
  .long  0xbc6b7951                          // ldr           s17, [x10, x11, lsl #2]
  .long  0x8b12094a                          // add           x10, x10, x18, lsl #2
  .long  0x4d408152                          // ld1           {v18.s}[2], [x10]
  .long  0x8b1209aa                          // add           x10, x13, x18, lsl #2
  .long  0xbc6b79b6                          // ldr           s22, [x13, x11, lsl #2]
  .long  0x4d408150                          // ld1           {v16.s}[2], [x10]
  .long  0x8b12098a                          // add           x10, x12, x18, lsl #2
  .long  0x4d408153                          // ld1           {v19.s}[2], [x10]
  .long  0x8b1209ca                          // add           x10, x14, x18, lsl #2
  .long  0x4d408141                          // ld1           {v1.s}[2], [x10]
  .long  0x8b090a2a                          // add           x10, x17, x9, lsl #2
  .long  0xbc6b7997                          // ldr           s23, [x12, x11, lsl #2]
  .long  0x8b1209ec                          // add           x12, x15, x18, lsl #2
  .long  0x0d409142                          // ld1           {v2.s}[1], [x10]
  .long  0x8b090a0a                          // add           x10, x16, x9, lsl #2
  .long  0x8b090909                          // add           x9, x8, x9, lsl #2
  .long  0x6e1c0632                          // mov           v18.s[3], v17.s[0]
  .long  0xbc6b79d1                          // ldr           s17, [x14, x11, lsl #2]
  .long  0x6e1c06d0                          // mov           v16.s[3], v22.s[0]
  .long  0xbc6b79f6                          // ldr           s22, [x15, x11, lsl #2]
  .long  0x0d409155                          // ld1           {v21.s}[1], [x10]
  .long  0x4d408194                          // ld1           {v20.s}[2], [x12]
  .long  0x0d409123                          // ld1           {v3.s}[1], [x9]
  .long  0xf94007e1                          // ldr           x1, [sp, #8]
  .long  0x8b120a2d                          // add           x13, x17, x18, lsl #2
  .long  0x8b120a0e                          // add           x14, x16, x18, lsl #2
  .long  0x8b12090f                          // add           x15, x8, x18, lsl #2
  .long  0x6e1c06f3                          // mov           v19.s[3], v23.s[0]
  .long  0xbc6b7a37                          // ldr           s23, [x17, x11, lsl #2]
  .long  0x6e1c0621                          // mov           v1.s[3], v17.s[0]
  .long  0xbc6b7a11                          // ldr           s17, [x16, x11, lsl #2]
  .long  0x4d4081a2                          // ld1           {v2.s}[2], [x13]
  .long  0x4d4081d5                          // ld1           {v21.s}[2], [x14]
  .long  0x6e1c06d4                          // mov           v20.s[3], v22.s[0]
  .long  0xbc6b7916                          // ldr           s22, [x8, x11, lsl #2]
  .long  0x4d4081e3                          // ld1           {v3.s}[2], [x15]
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e1c06e2                          // mov           v2.s[3], v23.s[0]
  .long  0x6e1c0635                          // mov           v21.s[3], v17.s[0]
  .long  0x6e1c06c3                          // mov           v3.s[3], v22.s[0]
  .long  0x4e20ce50                          // fmla          v16.4s, v18.4s, v0.4s
  .long  0x4e20ce61                          // fmla          v1.4s, v19.4s, v0.4s
  .long  0x4e20ce82                          // fmla          v2.4s, v20.4s, v0.4s
  .long  0x4e20cea3                          // fmla          v3.4s, v21.4s, v0.4s
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0x910043ff                          // add           sp, sp, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_evenly_spaced_2_stop_gradient_aarch64
.globl _sk_evenly_spaced_2_stop_gradient_aarch64
FUNCTION(_sk_evenly_spaced_2_stop_gradient_aarch64)
_sk_evenly_spaced_2_stop_gradient_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0xaa0803e9                          // mov           x9, x8
  .long  0x9100410a                          // add           x10, x8, #0x10
  .long  0x4ddfc931                          // ld1r          {v17.4s}, [x9], #4
  .long  0x4d40c950                          // ld1r          {v16.4s}, [x10]
  .long  0x9100510a                          // add           x10, x8, #0x14
  .long  0x4d40c941                          // ld1r          {v1.4s}, [x10]
  .long  0x9100610a                          // add           x10, x8, #0x18
  .long  0x4d40c942                          // ld1r          {v2.4s}, [x10]
  .long  0x9100710a                          // add           x10, x8, #0x1c
  .long  0x2d414d12                          // ldp           s18, s19, [x8, #8]
  .long  0x4d40c943                          // ld1r          {v3.4s}, [x10]
  .long  0x4e20ce30                          // fmla          v16.4s, v17.4s, v0.4s
  .long  0xbd400131                          // ldr           s17, [x9]
  .long  0x4f921002                          // fmla          v2.4s, v0.4s, v18.s[0]
  .long  0x4f931003                          // fmla          v3.4s, v0.4s, v19.s[0]
  .long  0x4f911001                          // fmla          v1.4s, v0.4s, v17.s[0]
  .long  0x4eb01e00                          // mov           v0.16b, v16.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_xy_to_unit_angle_aarch64
.globl _sk_xy_to_unit_angle_aarch64
FUNCTION(_sk_xy_to_unit_angle_aarch64)
_sk_xy_to_unit_angle_aarch64:
  .long  0x52b77ce8                          // mov           w8, #0xbbe70000
  .long  0x72856de8                          // movk          w8, #0x2b6f
  .long  0x4ea0f810                          // fabs          v16.4s, v0.4s
  .long  0x4ea0f831                          // fabs          v17.4s, v1.4s
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a79948                          // mov           w8, #0x3cca0000
  .long  0x729af3e8                          // movk          w8, #0xd79f
  .long  0x4eb1f614                          // fmin          v20.4s, v16.4s, v17.4s
  .long  0x4e31f615                          // fmax          v21.4s, v16.4s, v17.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x52b7aa88                          // mov           w8, #0xbd540000
  .long  0x6e35fe94                          // fdiv          v20.4s, v20.4s, v21.4s
  .long  0x728c9a88                          // movk          w8, #0x64d4
  .long  0x6e34de95                          // fmul          v21.4s, v20.4s, v20.4s
  .long  0x4e35ce53                          // fmla          v19.4s, v18.4s, v21.4s
  .long  0x4e040d12                          // dup           v18.4s, w8
  .long  0x52a7c448                          // mov           w8, #0x3e220000
  .long  0x729e1528                          // movk          w8, #0xf0a9
  .long  0x4e35ce72                          // fmla          v18.4s, v19.4s, v21.4s
  .long  0x4e040d13                          // dup           v19.4s, w8
  .long  0x4e35ce53                          // fmla          v19.4s, v18.4s, v21.4s
  .long  0x4f02f612                          // fmov          v18.4s, #2.500000000000000000e-01
  .long  0x6e33de93                          // fmul          v19.4s, v20.4s, v19.4s
  .long  0x6eb0e630                          // fcmgt         v16.4s, v17.4s, v16.4s
  .long  0x4eb3d652                          // fsub          v18.4s, v18.4s, v19.4s
  .long  0x4f0167f5                          // movi          v21.4s, #0x3f, lsl #24
  .long  0x6e731e50                          // bsl           v16.16b, v18.16b, v19.16b
  .long  0x4ea0e800                          // fcmlt         v0.4s, v0.4s, #0.0
  .long  0x4eb0d6b2                          // fsub          v18.4s, v21.4s, v16.4s
  .long  0x4f03f614                          // fmov          v20.4s, #1.000000000000000000e+00
  .long  0x6e701e40                          // bsl           v0.16b, v18.16b, v16.16b
  .long  0x4ea0e831                          // fcmlt         v17.4s, v1.4s, #0.0
  .long  0x4ea0d690                          // fsub          v16.4s, v20.4s, v0.4s
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e601e11                          // bsl           v17.16b, v16.16b, v0.16b
  .long  0x6ea0ca20                          // fcmge         v0.4s, v17.4s, #0.0
  .long  0x4ea0ea30                          // fcmlt         v16.4s, v17.4s, #0.0
  .long  0x4ea01e00                          // orr           v0.16b, v16.16b, v0.16b
  .long  0x4e201e20                          // and           v0.16b, v17.16b, v0.16b
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_xy_to_radius_aarch64
.globl _sk_xy_to_radius_aarch64
FUNCTION(_sk_xy_to_radius_aarch64)
_sk_xy_to_radius_aarch64:
  .long  0xf8408425                          // ldr           x5, [x1], #8
  .long  0x6e21dc30                          // fmul          v16.4s, v1.4s, v1.4s
  .long  0x4e20cc10                          // fmla          v16.4s, v0.4s, v0.4s
  .long  0x6ea1fa00                          // fsqrt         v0.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_save_xy_aarch64
.globl _sk_save_xy_aarch64
FUNCTION(_sk_save_xy_aarch64)
_sk_save_xy_aarch64:
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4e30d411                          // fadd          v17.4s, v0.4s, v16.4s
  .long  0x4e30d430                          // fadd          v16.4s, v1.4s, v16.4s
  .long  0x4e219a32                          // frintm        v18.4s, v17.4s
  .long  0x4eb2d631                          // fsub          v17.4s, v17.4s, v18.4s
  .long  0x4e219a12                          // frintm        v18.4s, v16.4s
  .long  0x4eb2d610                          // fsub          v16.4s, v16.4s, v18.4s
  .long  0x3d800100                          // str           q0, [x8]
  .long  0x3d800901                          // str           q1, [x8, #32]
  .long  0x3d801111                          // str           q17, [x8, #64]
  .long  0x3d801910                          // str           q16, [x8, #96]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_accumulate_aarch64
.globl _sk_accumulate_aarch64
FUNCTION(_sk_accumulate_aarch64)
_sk_accumulate_aarch64:
  .long  0xa8c11428                          // ldp           x8, x5, [x1], #16
  .long  0x3dc02110                          // ldr           q16, [x8, #128]
  .long  0x3dc02911                          // ldr           q17, [x8, #160]
  .long  0x6e31de10                          // fmul          v16.4s, v16.4s, v17.4s
  .long  0x4e30cc04                          // fmla          v4.4s, v0.4s, v16.4s
  .long  0x4e30cc25                          // fmla          v5.4s, v1.4s, v16.4s
  .long  0x4e30cc46                          // fmla          v6.4s, v2.4s, v16.4s
  .long  0x4e30cc67                          // fmla          v7.4s, v3.4s, v16.4s
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bilinear_nx_aarch64
.globl _sk_bilinear_nx_aarch64
FUNCTION(_sk_bilinear_nx_aarch64)
_sk_bilinear_nx_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x3dc01100                          // ldr           q0, [x8, #64]
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x4ea0d620                          // fsub          v0.4s, v17.4s, v0.4s
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0567e0                          // movi          v0.4s, #0xbf, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bilinear_px_aarch64
.globl _sk_bilinear_px_aarch64
FUNCTION(_sk_bilinear_px_aarch64)
_sk_bilinear_px_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x3dc01100                          // ldr           q0, [x8, #64]
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0167e0                          // movi          v0.4s, #0x3f, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bilinear_ny_aarch64
.globl _sk_bilinear_ny_aarch64
FUNCTION(_sk_bilinear_ny_aarch64)
_sk_bilinear_ny_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x4f03f611                          // fmov          v17.4s, #1.000000000000000000e+00
  .long  0x3dc01901                          // ldr           q1, [x8, #96]
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x4ea1d621                          // fsub          v1.4s, v17.4s, v1.4s
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0567e1                          // movi          v1.4s, #0xbf, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bilinear_py_aarch64
.globl _sk_bilinear_py_aarch64
FUNCTION(_sk_bilinear_py_aarch64)
_sk_bilinear_py_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x3dc01901                          // ldr           q1, [x8, #96]
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0167e1                          // movi          v1.4s, #0x3f, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_n3x_aarch64
.globl _sk_bicubic_n3x_aarch64
FUNCTION(_sk_bicubic_n3x_aarch64)
_sk_bicubic_n3x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x3dc01111                          // ldr           q17, [x8, #64]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x4eb1d400                          // fsub          v0.4s, v0.4s, v17.4s
  .long  0x6e20dc11                          // fmul          v17.4s, v0.4s, v0.4s
  .long  0x4e20ce12                          // fmla          v18.4s, v16.4s, v0.4s
  .long  0x6e32de20                          // fmul          v0.4s, v17.4s, v18.4s
  .long  0x3dc00113                          // ldr           q19, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f07f700                          // fmov          v0.4s, #-1.500000000000000000e+00
  .long  0x4e20d660                          // fadd          v0.4s, v19.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_n1x_aarch64
.globl _sk_bicubic_n1x_aarch64
FUNCTION(_sk_bicubic_n1x_aarch64)
_sk_bicubic_n1x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x4f03f600                          // fmov          v0.4s, #1.000000000000000000e+00
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x3dc01110                          // ldr           q16, [x8, #64]
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x4f0167f2                          // movi          v18.4s, #0x3f, lsl #24
  .long  0x4eb0d400                          // fsub          v0.4s, v0.4s, v16.4s
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e20ce11                          // fmla          v17.4s, v16.4s, v0.4s
  .long  0x4e20ce32                          // fmla          v18.4s, v17.4s, v0.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e20ce51                          // fmla          v17.4s, v18.4s, v0.4s
  .long  0x3dc00110                          // ldr           q16, [x8]
  .long  0x3d802111                          // str           q17, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0567e0                          // movi          v0.4s, #0xbf, lsl #24
  .long  0x4e20d600                          // fadd          v0.4s, v16.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_p1x_aarch64
.globl _sk_bicubic_p1x_aarch64
FUNCTION(_sk_bicubic_p1x_aarch64)
_sk_bicubic_p1x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x3dc01112                          // ldr           q18, [x8, #64]
  .long  0x3dc00100                          // ldr           q0, [x8]
  .long  0x4e040d33                          // dup           v19.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e32ce71                          // fmla          v17.4s, v19.4s, v18.4s
  .long  0x4e30d400                          // fadd          v0.4s, v0.4s, v16.4s
  .long  0x4e32ce30                          // fmla          v16.4s, v17.4s, v18.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e32ce11                          // fmla          v17.4s, v16.4s, v18.4s
  .long  0x3d802111                          // str           q17, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_p3x_aarch64
.globl _sk_bicubic_p3x_aarch64
FUNCTION(_sk_bicubic_p3x_aarch64)
_sk_bicubic_p3x_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d20                          // dup           v0.4s, w9
  .long  0x3dc01110                          // ldr           q16, [x8, #64]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x6e30de13                          // fmul          v19.4s, v16.4s, v16.4s
  .long  0x4e30cc11                          // fmla          v17.4s, v0.4s, v16.4s
  .long  0x6e31de60                          // fmul          v0.4s, v19.4s, v17.4s
  .long  0x3dc00112                          // ldr           q18, [x8]
  .long  0x3d802100                          // str           q0, [x8, #128]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f03f700                          // fmov          v0.4s, #1.500000000000000000e+00
  .long  0x4e20d640                          // fadd          v0.4s, v18.4s, v0.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_n3y_aarch64
.globl _sk_bicubic_n3y_aarch64
FUNCTION(_sk_bicubic_n3y_aarch64)
_sk_bicubic_n3y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x3dc01911                          // ldr           q17, [x8, #96]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x4f03f601                          // fmov          v1.4s, #1.000000000000000000e+00
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d32                          // dup           v18.4s, w9
  .long  0x4eb1d421                          // fsub          v1.4s, v1.4s, v17.4s
  .long  0x6e21dc31                          // fmul          v17.4s, v1.4s, v1.4s
  .long  0x4e21ce12                          // fmla          v18.4s, v16.4s, v1.4s
  .long  0x6e32de21                          // fmul          v1.4s, v17.4s, v18.4s
  .long  0x3dc00913                          // ldr           q19, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f07f701                          // fmov          v1.4s, #-1.500000000000000000e+00
  .long  0x4e21d661                          // fadd          v1.4s, v19.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_n1y_aarch64
.globl _sk_bicubic_n1y_aarch64
FUNCTION(_sk_bicubic_n1y_aarch64)
_sk_bicubic_n1y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x4f03f601                          // fmov          v1.4s, #1.000000000000000000e+00
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x3dc01910                          // ldr           q16, [x8, #96]
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x4f0167f2                          // movi          v18.4s, #0x3f, lsl #24
  .long  0x4eb0d421                          // fsub          v1.4s, v1.4s, v16.4s
  .long  0x4e040d30                          // dup           v16.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e21ce11                          // fmla          v17.4s, v16.4s, v1.4s
  .long  0x4e21ce32                          // fmla          v18.4s, v17.4s, v1.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e21ce51                          // fmla          v17.4s, v18.4s, v1.4s
  .long  0x3dc00910                          // ldr           q16, [x8, #32]
  .long  0x3d802911                          // str           q17, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f0567e1                          // movi          v1.4s, #0xbf, lsl #24
  .long  0x4e21d601                          // fadd          v1.4s, v16.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_p1y_aarch64
.globl _sk_bicubic_p1y_aarch64
FUNCTION(_sk_bicubic_p1y_aarch64)
_sk_bicubic_p1y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52b7f2a9                          // mov           w9, #0xbf950000
  .long  0x728aaaa9                          // movk          w9, #0x5555
  .long  0x4f03f711                          // fmov          v17.4s, #1.500000000000000000e+00
  .long  0x3dc01912                          // ldr           q18, [x8, #96]
  .long  0x3dc00901                          // ldr           q1, [x8, #32]
  .long  0x4e040d33                          // dup           v19.4s, w9
  .long  0x52a7ac69                          // mov           w9, #0x3d630000
  .long  0x4f0167f0                          // movi          v16.4s, #0x3f, lsl #24
  .long  0x7291c729                          // movk          w9, #0x8e39
  .long  0x4e32ce71                          // fmla          v17.4s, v19.4s, v18.4s
  .long  0x4e30d421                          // fadd          v1.4s, v1.4s, v16.4s
  .long  0x4e32ce30                          // fmla          v16.4s, v17.4s, v18.4s
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x4e32ce11                          // fmla          v17.4s, v16.4s, v18.4s
  .long  0x3d802911                          // str           q17, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_bicubic_p3y_aarch64
.globl _sk_bicubic_p3y_aarch64
FUNCTION(_sk_bicubic_p3y_aarch64)
_sk_bicubic_p3y_aarch64:
  .long  0xf9400028                          // ldr           x8, [x1]
  .long  0x52a7d8e9                          // mov           w9, #0x3ec70000
  .long  0x72838e49                          // movk          w9, #0x1c72
  .long  0x4e040d21                          // dup           v1.4s, w9
  .long  0x3dc01910                          // ldr           q16, [x8, #96]
  .long  0x52b7d549                          // mov           w9, #0xbeaa0000
  .long  0x72955569                          // movk          w9, #0xaaab
  .long  0x4e040d31                          // dup           v17.4s, w9
  .long  0x6e30de13                          // fmul          v19.4s, v16.4s, v16.4s
  .long  0x4e30cc31                          // fmla          v17.4s, v1.4s, v16.4s
  .long  0x6e31de61                          // fmul          v1.4s, v19.4s, v17.4s
  .long  0x3dc00912                          // ldr           q18, [x8, #32]
  .long  0x3d802901                          // str           q1, [x8, #160]
  .long  0xf9400425                          // ldr           x5, [x1, #8]
  .long  0x4f03f701                          // fmov          v1.4s, #1.500000000000000000e+00
  .long  0x4e21d641                          // fadd          v1.4s, v18.4s, v1.4s
  .long  0x91004021                          // add           x1, x1, #0x10
  .long  0xd61f00a0                          // br            x5

HIDDEN _sk_callback_aarch64
.globl _sk_callback_aarch64
FUNCTION(_sk_callback_aarch64)
_sk_callback_aarch64:
  .long  0xd10203ff                          // sub           sp, sp, #0x80
  .long  0xa9045ff8                          // stp           x24, x23, [sp, #64]
  .long  0xa90557f6                          // stp           x22, x21, [sp, #80]
  .long  0xa9064ff4                          // stp           x20, x19, [sp, #96]
  .long  0xa9077bfd                          // stp           x29, x30, [sp, #112]
  .long  0xad011fe6                          // stp           q6, q7, [sp, #32]
  .long  0xad0017e4                          // stp           q4, q5, [sp]
  .long  0xaa0103f6                          // mov           x22, x1
  .long  0xf94002d8                          // ldr           x24, [x22]
  .long  0xaa0403f3                          // mov           x19, x4
  .long  0xf100027f                          // cmp           x19, #0x0
  .long  0x321e03e9                          // orr           w9, wzr, #0x4
  .long  0x91002308                          // add           x8, x24, #0x8
  .long  0x4c000900                          // st4           {v0.4s-v3.4s}, [x8]
  .long  0xf9400308                          // ldr           x8, [x24]
  .long  0xaa0003f7                          // mov           x23, x0
  .long  0x1a891261                          // csel          w1, w19, w9, ne  // ne = any
  .long  0xaa1803e0                          // mov           x0, x24
  .long  0x9101c3fd                          // add           x29, sp, #0x70
  .long  0xaa0303f4                          // mov           x20, x3
  .long  0xaa0203f5                          // mov           x21, x2
  .long  0xd63f0100                          // blr           x8
  .long  0xf9404708                          // ldr           x8, [x24, #136]
  .long  0xf94006c5                          // ldr           x5, [x22, #8]
  .long  0x910042c1                          // add           x1, x22, #0x10
  .long  0xaa1703e0                          // mov           x0, x23
  .long  0x4c400900                          // ld4           {v0.4s-v3.4s}, [x8]
  .long  0xaa1503e2                          // mov           x2, x21
  .long  0xaa1403e3                          // mov           x3, x20
  .long  0xaa1303e4                          // mov           x4, x19
  .long  0xad4017e4                          // ldp           q4, q5, [sp]
  .long  0xad411fe6                          // ldp           q6, q7, [sp, #32]
  .long  0xa9477bfd                          // ldp           x29, x30, [sp, #112]
  .long  0xa9464ff4                          // ldp           x20, x19, [sp, #96]
  .long  0xa94557f6                          // ldp           x22, x21, [sp, #80]
  .long  0xa9445ff8                          // ldp           x24, x23, [sp, #64]
  .long  0x910203ff                          // add           sp, sp, #0x80
  .long  0xd61f00a0                          // br            x5
#elif defined(__arm__)
BALIGN4

HIDDEN _sk_start_pipeline_vfp4
.globl _sk_start_pipeline_vfp4
FUNCTION(_sk_start_pipeline_vfp4)
_sk_start_pipeline_vfp4:
  .long  0xe92d4ff0                          // push          {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe28db01c                          // add           fp, sp, #28
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe1a04003                          // mov           r4, r3
  .long  0xe59b8008                          // ldr           r8, [fp, #8]
  .long  0xe4949004                          // ldr           r9, [r4], #4
  .long  0xe1a06000                          // mov           r6, r0
  .long  0xe2860002                          // add           r0, r6, #2
  .long  0xe1a07002                          // mov           r7, r2
  .long  0xe1a05001                          // mov           r5, r1
  .long  0xe1500007                          // cmp           r0, r7
  .long  0x8a000012                          // bhi           7c <sk_start_pipeline_vfp4+0x7c>
  .long  0xe3a0a000                          // mov           sl, #0
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xe1a00008                          // mov           r0, r8
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xe1a01004                          // mov           r1, r4
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xe1a02006                          // mov           r2, r6
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xe1a03005                          // mov           r3, r5
  .long  0xf2804010                          // vmov.i32      d4, #0
  .long  0xe58da000                          // str           sl, [sp]
  .long  0xf2805010                          // vmov.i32      d5, #0
  .long  0xf2806010                          // vmov.i32      d6, #0
  .long  0xf2807010                          // vmov.i32      d7, #0
  .long  0xe12fff39                          // blx           r9
  .long  0xe2860004                          // add           r0, r6, #4
  .long  0xe2866002                          // add           r6, r6, #2
  .long  0xe1500007                          // cmp           r0, r7
  .long  0x9affffed                          // bls           34 <sk_start_pipeline_vfp4+0x34>
  .long  0xe0570006                          // subs          r0, r7, r6
  .long  0x0a00000d                          // beq           bc <sk_start_pipeline_vfp4+0xbc>
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xe58d0000                          // str           r0, [sp]
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xe1a00008                          // mov           r0, r8
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xe1a01004                          // mov           r1, r4
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xe1a02006                          // mov           r2, r6
  .long  0xf2804010                          // vmov.i32      d4, #0
  .long  0xe1a03005                          // mov           r3, r5
  .long  0xf2805010                          // vmov.i32      d5, #0
  .long  0xf2806010                          // vmov.i32      d6, #0
  .long  0xf2807010                          // vmov.i32      d7, #0
  .long  0xe12fff39                          // blx           r9
  .long  0xe24bd01c                          // sub           sp, fp, #28
  .long  0xe8bd8ff0                          // pop           {r4, r5, r6, r7, r8, r9, sl, fp, pc}

HIDDEN _sk_just_return_vfp4
.globl _sk_just_return_vfp4
FUNCTION(_sk_just_return_vfp4)
_sk_just_return_vfp4:
  .long  0xe12fff1e                          // bx            lr

HIDDEN _sk_seed_shader_vfp4
.globl _sk_seed_shader_vfp4
FUNCTION(_sk_seed_shader_vfp4)
_sk_seed_shader_vfp4:
  .long  0xee802b90                          // vdup.32       d16, r2
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xee823b90                          // vdup.32       d18, r3
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xedd03b00                          // vldr          d19, [r0]
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2872f10                          // vmov.f32      d2, #1
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xf2400da1                          // vadd.f32      d16, d16, d17
  .long  0xf2021da1                          // vadd.f32      d1, d18, d17
  .long  0xf2804010                          // vmov.i32      d4, #0
  .long  0xf2805010                          // vmov.i32      d5, #0
  .long  0xf2000da3                          // vadd.f32      d0, d16, d19
  .long  0xf2806010                          // vmov.i32      d6, #0
  .long  0xf2807010                          // vmov.i32      d7, #0
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_dither_vfp4
.globl _sk_dither_vfp4
FUNCTION(_sk_dither_vfp4)
_sk_dither_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xee802b90                          // vdup.32       d16, r2
  .long  0xf2c02011                          // vmov.i32      d18, #1
  .long  0xedd01b08                          // vldr          d17, [r0, #32]
  .long  0xf2c03014                          // vmov.i32      d19, #4
  .long  0xf26108a0                          // vadd.i32      d16, d17, d16
  .long  0xee853b90                          // vdup.32       d21, r3
  .long  0xf2c01012                          // vmov.i32      d17, #2
  .long  0xe3a0c5f2                          // mov           ip, #1015021568
  .long  0xf24041b2                          // vand          d20, d16, d18
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf24061b1                          // vand          d22, d16, d17
  .long  0xf34551b0                          // veor          d21, d21, d16
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf2e44534                          // vshl.s32      d20, d20, #4
  .long  0xf2e16536                          // vshl.s32      d22, d22, #1
  .long  0xf24521b2                          // vand          d18, d21, d18
  .long  0xf3fe0030                          // vshr.u32      d16, d16, #2
  .long  0xf26641b4                          // vorr          d20, d22, d20
  .long  0xf24511b1                          // vand          d17, d21, d17
  .long  0xf2e52532                          // vshl.s32      d18, d18, #5
  .long  0xf26401b0                          // vorr          d16, d20, d16
  .long  0xf24531b3                          // vand          d19, d21, d19
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xf2e21531                          // vshl.s32      d17, d17, #2
  .long  0xf3ff2033                          // vshr.u32      d18, d19, #1
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xee81cb90                          // vdup.32       d17, ip
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xeddf1b0e                          // vldr          d17, [pc, #56]
  .long  0xf2400da1                          // vadd.f32      d16, d16, d17
  .long  0xf4ee1c9f                          // vld1.32       {d17[]}, [lr :32]
  .long  0xf3410db0                          // vmul.f32      d16, d17, d16
  .long  0xf2401d80                          // vadd.f32      d17, d16, d0
  .long  0xf2402d81                          // vadd.f32      d18, d16, d1
  .long  0xf2400d82                          // vadd.f32      d16, d16, d2
  .long  0xf2611f83                          // vmin.f32      d17, d17, d3
  .long  0xf2622f83                          // vmin.f32      d18, d18, d3
  .long  0xf2600f83                          // vmin.f32      d16, d16, d3
  .long  0xf2030fa1                          // vmax.f32      d0, d19, d17
  .long  0xf2031fa2                          // vmax.f32      d1, d19, d18
  .long  0xf2032fa0                          // vmax.f32      d2, d19, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0xbefc0000                          // .word         0xbefc0000
  .long  0xbefc0000                          // .word         0xbefc0000

HIDDEN _sk_constant_color_vfp4
.globl _sk_constant_color_vfp4
FUNCTION(_sk_constant_color_vfp4)
_sk_constant_color_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4a40c9d                          // vld1.32       {d0[]}, [r4 :32]!
  .long  0xf4a53c9f                          // vld1.32       {d3[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf4a52c9f                          // vld1.32       {d2[]}, [r5 :32]
  .long  0xf4a41c9f                          // vld1.32       {d1[]}, [r4 :32]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_load_rgba_vfp4
.globl _sk_load_rgba_vfp4
FUNCTION(_sk_load_rgba_vfp4)
_sk_load_rgba_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xed9e2b04                          // vldr          d2, [lr, #16]
  .long  0xf424078d                          // vld1.32       {d0}, [r4]!
  .long  0xed9e3b06                          // vldr          d3, [lr, #24]
  .long  0xed941b00                          // vldr          d1, [r4]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_store_rgba_vfp4
.globl _sk_store_rgba_vfp4
FUNCTION(_sk_store_rgba_vfp4)
_sk_store_rgba_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe1a0e00c                          // mov           lr, ip
  .long  0xf40e078d                          // vst1.32       {d0}, [lr]!
  .long  0xed8e1b00                          // vstr          d1, [lr]
  .long  0xed8c2b04                          // vstr          d2, [ip, #16]
  .long  0xed8c3b06                          // vstr          d3, [ip, #24]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clear_vfp4
.globl _sk_clear_vfp4
FUNCTION(_sk_clear_vfp4)
_sk_clear_vfp4:
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xf2803010                          // vmov.i32      d3, #0
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_srcatop_vfp4
.globl _sk_srcatop_vfp4
FUNCTION(_sk_srcatop_vfp4)
_sk_srcatop_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2603d83                          // vsub.f32      d19, d16, d3
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xf3430d94                          // vmul.f32      d16, d19, d4
  .long  0xf3431d95                          // vmul.f32      d17, d19, d5
  .long  0xf3432d96                          // vmul.f32      d18, d19, d6
  .long  0xf2400c17                          // vfma.f32      d16, d0, d7
  .long  0xf2411c17                          // vfma.f32      d17, d1, d7
  .long  0xf2422c17                          // vfma.f32      d18, d2, d7
  .long  0xf2033c97                          // vfma.f32      d3, d19, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dstatop_vfp4
.globl _sk_dstatop_vfp4
FUNCTION(_sk_dstatop_vfp4)
_sk_dstatop_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3431d15                          // vmul.f32      d17, d3, d5
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf3430d14                          // vmul.f32      d16, d3, d4
  .long  0xf3432d16                          // vmul.f32      d18, d3, d6
  .long  0xf3433d17                          // vmul.f32      d19, d3, d7
  .long  0xf2440c90                          // vfma.f32      d16, d20, d0
  .long  0xf2441c91                          // vfma.f32      d17, d20, d1
  .long  0xf2442c92                          // vfma.f32      d18, d20, d2
  .long  0xf2443c93                          // vfma.f32      d19, d20, d3
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_srcin_vfp4
.globl _sk_srcin_vfp4
FUNCTION(_sk_srcin_vfp4)
_sk_srcin_vfp4:
  .long  0xf3000d17                          // vmul.f32      d0, d0, d7
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3011d17                          // vmul.f32      d1, d1, d7
  .long  0xf3022d17                          // vmul.f32      d2, d2, d7
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dstin_vfp4
.globl _sk_dstin_vfp4
FUNCTION(_sk_dstin_vfp4)
_sk_dstin_vfp4:
  .long  0xf3030d14                          // vmul.f32      d0, d3, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3031d15                          // vmul.f32      d1, d3, d5
  .long  0xf3032d16                          // vmul.f32      d2, d3, d6
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_srcout_vfp4
.globl _sk_srcout_vfp4
FUNCTION(_sk_srcout_vfp4)
_sk_srcout_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2600d87                          // vsub.f32      d16, d16, d7
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dstout_vfp4
.globl _sk_dstout_vfp4
FUNCTION(_sk_dstout_vfp4)
_sk_dstout_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3000d94                          // vmul.f32      d0, d16, d4
  .long  0xf3001d95                          // vmul.f32      d1, d16, d5
  .long  0xf3002d96                          // vmul.f32      d2, d16, d6
  .long  0xf3003d97                          // vmul.f32      d3, d16, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_srcover_vfp4
.globl _sk_srcover_vfp4
FUNCTION(_sk_srcover_vfp4)
_sk_srcover_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf2040c30                          // vfma.f32      d0, d4, d16
  .long  0xf2051c30                          // vfma.f32      d1, d5, d16
  .long  0xf2062c30                          // vfma.f32      d2, d6, d16
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_dstover_vfp4
.globl _sk_dstover_vfp4
FUNCTION(_sk_dstover_vfp4)
_sk_dstover_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2651115                          // vorr          d17, d5, d5
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf2640114                          // vorr          d16, d4, d4
  .long  0xf2662116                          // vorr          d18, d6, d6
  .long  0xf2673117                          // vorr          d19, d7, d7
  .long  0xf2400c34                          // vfma.f32      d16, d0, d20
  .long  0xf2411c34                          // vfma.f32      d17, d1, d20
  .long  0xf2422c34                          // vfma.f32      d18, d2, d20
  .long  0xf2433c34                          // vfma.f32      d19, d3, d20
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_modulate_vfp4
.globl _sk_modulate_vfp4
FUNCTION(_sk_modulate_vfp4)
_sk_modulate_vfp4:
  .long  0xf3000d14                          // vmul.f32      d0, d0, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3011d15                          // vmul.f32      d1, d1, d5
  .long  0xf3022d16                          // vmul.f32      d2, d2, d6
  .long  0xf3033d17                          // vmul.f32      d3, d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_multiply_vfp4
.globl _sk_multiply_vfp4
FUNCTION(_sk_multiply_vfp4)
_sk_multiply_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2601d87                          // vsub.f32      d17, d16, d7
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3412d90                          // vmul.f32      d18, d17, d0
  .long  0xf3403d94                          // vmul.f32      d19, d16, d4
  .long  0xf3414d91                          // vmul.f32      d20, d17, d1
  .long  0xf3405d95                          // vmul.f32      d21, d16, d5
  .long  0xf3416d92                          // vmul.f32      d22, d17, d2
  .long  0xf3418d93                          // vmul.f32      d24, d17, d3
  .long  0xf3407d96                          // vmul.f32      d23, d16, d6
  .long  0xf3409d97                          // vmul.f32      d25, d16, d7
  .long  0xf2430da2                          // vadd.f32      d16, d19, d18
  .long  0xf2451da4                          // vadd.f32      d17, d21, d20
  .long  0xf2472da6                          // vadd.f32      d18, d23, d22
  .long  0xf2493da8                          // vadd.f32      d19, d25, d24
  .long  0xf2400c14                          // vfma.f32      d16, d0, d4
  .long  0xf2411c15                          // vfma.f32      d17, d1, d5
  .long  0xf2422c16                          // vfma.f32      d18, d2, d6
  .long  0xf2433c17                          // vfma.f32      d19, d3, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_plus__vfp4
.globl _sk_plus__vfp4
FUNCTION(_sk_plus__vfp4)
_sk_plus__vfp4:
  .long  0xf2000d04                          // vadd.f32      d0, d0, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2011d05                          // vadd.f32      d1, d1, d5
  .long  0xf2022d06                          // vadd.f32      d2, d2, d6
  .long  0xf2033d07                          // vadd.f32      d3, d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_screen_vfp4
.globl _sk_screen_vfp4
FUNCTION(_sk_screen_vfp4)
_sk_screen_vfp4:
  .long  0xf2400d04                          // vadd.f32      d16, d0, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2411d05                          // vadd.f32      d17, d1, d5
  .long  0xf2422d06                          // vadd.f32      d18, d2, d6
  .long  0xf2433d07                          // vadd.f32      d19, d3, d7
  .long  0xf2600c14                          // vfms.f32      d16, d0, d4
  .long  0xf2611c15                          // vfms.f32      d17, d1, d5
  .long  0xf2622c16                          // vfms.f32      d18, d2, d6
  .long  0xf2633c17                          // vfms.f32      d19, d3, d7
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_xor__vfp4
.globl _sk_xor__vfp4
FUNCTION(_sk_xor__vfp4)
_sk_xor__vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2603d83                          // vsub.f32      d19, d16, d3
  .long  0xf2604d87                          // vsub.f32      d20, d16, d7
  .long  0xf3430d94                          // vmul.f32      d16, d19, d4
  .long  0xf3431d95                          // vmul.f32      d17, d19, d5
  .long  0xf3432d96                          // vmul.f32      d18, d19, d6
  .long  0xf3433d97                          // vmul.f32      d19, d19, d7
  .long  0xf2440c90                          // vfma.f32      d16, d20, d0
  .long  0xf2441c91                          // vfma.f32      d17, d20, d1
  .long  0xf2442c92                          // vfma.f32      d18, d20, d2
  .long  0xf2443c93                          // vfma.f32      d19, d20, d3
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xf22331b3                          // vorr          d3, d19, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_darken_vfp4
.globl _sk_darken_vfp4
FUNCTION(_sk_darken_vfp4)
_sk_darken_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3402d17                          // vmul.f32      d18, d0, d7
  .long  0xf3433d15                          // vmul.f32      d19, d3, d5
  .long  0xf3414d17                          // vmul.f32      d20, d1, d7
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3426d17                          // vmul.f32      d22, d2, d7
  .long  0xf2421fa1                          // vmax.f32      d17, d18, d17
  .long  0xf2407d04                          // vadd.f32      d23, d0, d4
  .long  0xf2443fa3                          // vmax.f32      d19, d20, d19
  .long  0xf2412d05                          // vadd.f32      d18, d1, d5
  .long  0xf2424d06                          // vadd.f32      d20, d2, d6
  .long  0xf2465fa5                          // vmax.f32      d21, d22, d21
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2270da1                          // vsub.f32      d0, d23, d17
  .long  0xf2221da3                          // vsub.f32      d1, d18, d19
  .long  0xf2242da5                          // vsub.f32      d2, d20, d21
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_lighten_vfp4
.globl _sk_lighten_vfp4
FUNCTION(_sk_lighten_vfp4)
_sk_lighten_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3402d17                          // vmul.f32      d18, d0, d7
  .long  0xf3433d15                          // vmul.f32      d19, d3, d5
  .long  0xf3414d17                          // vmul.f32      d20, d1, d7
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3426d17                          // vmul.f32      d22, d2, d7
  .long  0xf2621fa1                          // vmin.f32      d17, d18, d17
  .long  0xf2407d04                          // vadd.f32      d23, d0, d4
  .long  0xf2643fa3                          // vmin.f32      d19, d20, d19
  .long  0xf2412d05                          // vadd.f32      d18, d1, d5
  .long  0xf2424d06                          // vadd.f32      d20, d2, d6
  .long  0xf2665fa5                          // vmin.f32      d21, d22, d21
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2270da1                          // vsub.f32      d0, d23, d17
  .long  0xf2221da3                          // vsub.f32      d1, d18, d19
  .long  0xf2242da5                          // vsub.f32      d2, d20, d21
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_difference_vfp4
.globl _sk_difference_vfp4
FUNCTION(_sk_difference_vfp4)
_sk_difference_vfp4:
  .long  0xf3430d14                          // vmul.f32      d16, d3, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3401d17                          // vmul.f32      d17, d0, d7
  .long  0xf3432d15                          // vmul.f32      d18, d3, d5
  .long  0xf3413d17                          // vmul.f32      d19, d1, d7
  .long  0xf3434d16                          // vmul.f32      d20, d3, d6
  .long  0xf3425d17                          // vmul.f32      d21, d2, d7
  .long  0xf2c76f10                          // vmov.f32      d22, #1
  .long  0xf2610fa0                          // vmin.f32      d16, d17, d16
  .long  0xf2631fa2                          // vmin.f32      d17, d19, d18
  .long  0xf2662d83                          // vsub.f32      d18, d22, d3
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf2404d04                          // vadd.f32      d20, d0, d4
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf2073c32                          // vfma.f32      d3, d7, d18
  .long  0xf2415d05                          // vadd.f32      d21, d1, d5
  .long  0xf2411da1                          // vadd.f32      d17, d17, d17
  .long  0xf2426d06                          // vadd.f32      d22, d2, d6
  .long  0xf2432da3                          // vadd.f32      d18, d19, d19
  .long  0xf2240da0                          // vsub.f32      d0, d20, d16
  .long  0xf2251da1                          // vsub.f32      d1, d21, d17
  .long  0xf2262da2                          // vsub.f32      d2, d22, d18
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_exclusion_vfp4
.globl _sk_exclusion_vfp4
FUNCTION(_sk_exclusion_vfp4)
_sk_exclusion_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3401d14                          // vmul.f32      d17, d0, d4
  .long  0xf3412d15                          // vmul.f32      d18, d1, d5
  .long  0xf3423d16                          // vmul.f32      d19, d2, d6
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf2404d04                          // vadd.f32      d20, d0, d4
  .long  0xf2411da1                          // vadd.f32      d17, d17, d17
  .long  0xf2415d05                          // vadd.f32      d21, d1, d5
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2426d06                          // vadd.f32      d22, d2, d6
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2240da1                          // vsub.f32      d0, d20, d17
  .long  0xf2251da2                          // vsub.f32      d1, d21, d18
  .long  0xf2262da3                          // vsub.f32      d2, d22, d19
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_colorburn_vfp4
.globl _sk_colorburn_vfp4
FUNCTION(_sk_colorburn_vfp4)
_sk_colorburn_vfp4:
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2671d06                          // vsub.f32      d17, d7, d6
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf3008d93                          // vmul.f32      d8, d16, d3
  .long  0xf3019d93                          // vmul.f32      d9, d17, d3
  .long  0xf302ad93                          // vmul.f32      d10, d18, d3
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xeec8baa0                          // vdiv.f32      s23, s17, s1
  .long  0xee88ba00                          // vdiv.f32      s22, s16, s0
  .long  0xeec98aa2                          // vdiv.f32      s17, s19, s5
  .long  0xee898a02                          // vdiv.f32      s16, s18, s4
  .long  0xeeca9aa1                          // vdiv.f32      s19, s21, s3
  .long  0xee8a9a01                          // vdiv.f32      s18, s20, s2
  .long  0xf2672f08                          // vmin.f32      d18, d7, d8
  .long  0xf2673f09                          // vmin.f32      d19, d7, d9
  .long  0xf2670f0b                          // vmin.f32      d16, d7, d11
  .long  0xf2614d87                          // vsub.f32      d20, d17, d7
  .long  0xf2672d22                          // vsub.f32      d18, d7, d18
  .long  0xf2673d23                          // vsub.f32      d19, d7, d19
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2670d20                          // vsub.f32      d16, d7, d16
  .long  0xf3445d90                          // vmul.f32      d21, d20, d0
  .long  0xf3446d92                          // vmul.f32      d22, d20, d2
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf3444d91                          // vmul.f32      d20, d20, d1
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf3400d93                          // vmul.f32      d16, d16, d3
  .long  0xf3417d95                          // vmul.f32      d23, d17, d5
  .long  0xf3418d94                          // vmul.f32      d24, d17, d4
  .long  0xf3419d96                          // vmul.f32      d25, d17, d6
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf2462da2                          // vadd.f32      d18, d22, d18
  .long  0xf245ada0                          // vadd.f32      d26, d21, d16
  .long  0xf247bd81                          // vadd.f32      d27, d23, d1
  .long  0xf248cd80                          // vadd.f32      d28, d24, d0
  .long  0xf249dd82                          // vadd.f32      d29, d25, d2
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf2499da2                          // vadd.f32      d25, d25, d18
  .long  0xf2473da3                          // vadd.f32      d19, d23, d19
  .long  0xf3f97501                          // vceq.f32      d23, d1, #0
  .long  0xf2455d84                          // vadd.f32      d21, d21, d4
  .long  0xf2444d85                          // vadd.f32      d20, d20, d5
  .long  0xf2440e07                          // vceq.f32      d16, d4, d7
  .long  0xf2466d86                          // vadd.f32      d22, d22, d6
  .long  0xf2451e07                          // vceq.f32      d17, d5, d7
  .long  0xf2462e07                          // vceq.f32      d18, d6, d7
  .long  0xf35b71b3                          // vbsl          d23, d27, d19
  .long  0xf3f93500                          // vceq.f32      d19, d0, #0
  .long  0xf2488daa                          // vadd.f32      d24, d24, d26
  .long  0xf35c31b8                          // vbsl          d19, d28, d24
  .long  0xf3f98502                          // vceq.f32      d24, d2, #0
  .long  0xf35d81b9                          // vbsl          d24, d29, d25
  .long  0xf35501b3                          // vbsl          d16, d21, d19
  .long  0xf35411b7                          // vbsl          d17, d20, d23
  .long  0xf35621b8                          // vbsl          d18, d22, d24
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_colordodge_vfp4
.globl _sk_colordodge_vfp4
FUNCTION(_sk_colordodge_vfp4)
_sk_colordodge_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xf2238d02                          // vsub.f32      d8, d3, d2
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3039d16                          // vmul.f32      d9, d3, d6
  .long  0xf223ad01                          // vsub.f32      d10, d3, d1
  .long  0xf303bd15                          // vmul.f32      d11, d3, d5
  .long  0xf223cd00                          // vsub.f32      d12, d3, d0
  .long  0xf303dd14                          // vmul.f32      d13, d3, d4
  .long  0xeec9eaa8                          // vdiv.f32      s29, s19, s17
  .long  0xee89ea08                          // vdiv.f32      s28, s18, s16
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xeecd9aac                          // vdiv.f32      s19, s27, s25
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xee8d9a0c                          // vdiv.f32      s18, s26, s24
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2672f0e                          // vmin.f32      d18, d7, d14
  .long  0xf2601d87                          // vsub.f32      d17, d16, d7
  .long  0xf2673f08                          // vmin.f32      d19, d7, d8
  .long  0xf2674f09                          // vmin.f32      d20, d7, d9
  .long  0xf2600d83                          // vsub.f32      d16, d16, d3
  .long  0xf3415d92                          // vmul.f32      d21, d17, d2
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf3416d91                          // vmul.f32      d22, d17, d1
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf3411d90                          // vmul.f32      d17, d17, d0
  .long  0xf3444d93                          // vmul.f32      d20, d20, d3
  .long  0xf3407d95                          // vmul.f32      d23, d16, d5
  .long  0xf3408d94                          // vmul.f32      d24, d16, d4
  .long  0xf3409d96                          // vmul.f32      d25, d16, d6
  .long  0xf2452da2                          // vadd.f32      d18, d21, d18
  .long  0xf2463da3                          // vadd.f32      d19, d22, d19
  .long  0xf2414da4                          // vadd.f32      d20, d17, d20
  .long  0xf241ae03                          // vceq.f32      d26, d1, d3
  .long  0xf247bd81                          // vadd.f32      d27, d23, d1
  .long  0xf3b91505                          // vceq.f32      d1, d5, #0
  .long  0xf240ce03                          // vceq.f32      d28, d0, d3
  .long  0xf248dd80                          // vadd.f32      d29, d24, d0
  .long  0xf3b90504                          // vceq.f32      d0, d4, #0
  .long  0xf242ee03                          // vceq.f32      d30, d2, d3
  .long  0xf249fd82                          // vadd.f32      d31, d25, d2
  .long  0xf3b92506                          // vceq.f32      d2, d6, #0
  .long  0xf2073c30                          // vfma.f32      d3, d7, d16
  .long  0xf2410d84                          // vadd.f32      d16, d17, d4
  .long  0xf2491da2                          // vadd.f32      d17, d25, d18
  .long  0xf2462d85                          // vadd.f32      d18, d22, d5
  .long  0xf2455d86                          // vadd.f32      d21, d21, d6
  .long  0xf2473da3                          // vadd.f32      d19, d23, d19
  .long  0xf2484da4                          // vadd.f32      d20, d24, d20
  .long  0xf35fe1b1                          // vbsl          d30, d31, d17
  .long  0xf35ba1b3                          // vbsl          d26, d27, d19
  .long  0xf35dc1b4                          // vbsl          d28, d29, d20
  .long  0xf31001bc                          // vbsl          d0, d16, d28
  .long  0xf31211ba                          // vbsl          d1, d18, d26
  .long  0xf31521be                          // vbsl          d2, d21, d30
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_hardlight_vfp4
.globl _sk_hardlight_vfp4
FUNCTION(_sk_hardlight_vfp4)
_sk_hardlight_vfp4:
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xf2617d87                          // vsub.f32      d23, d17, d7
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf2674d06                          // vsub.f32      d20, d7, d6
  .long  0xf2633d00                          // vsub.f32      d19, d3, d0
  .long  0xf2635d01                          // vsub.f32      d21, d3, d1
  .long  0xf2636d02                          // vsub.f32      d22, d3, d2
  .long  0xf347bd90                          // vmul.f32      d27, d23, d0
  .long  0xf341cd94                          // vmul.f32      d28, d17, d4
  .long  0xf3430db0                          // vmul.f32      d16, d19, d16
  .long  0xf3463db4                          // vmul.f32      d19, d22, d20
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf2404d00                          // vadd.f32      d20, d0, d0
  .long  0xf3405d14                          // vmul.f32      d21, d0, d4
  .long  0xf2416d01                          // vadd.f32      d22, d1, d1
  .long  0xf3418d15                          // vmul.f32      d24, d1, d5
  .long  0xf2429d02                          // vadd.f32      d25, d2, d2
  .long  0xf342ad16                          // vmul.f32      d26, d2, d6
  .long  0xf347dd91                          // vmul.f32      d29, d23, d1
  .long  0xf341fd95                          // vmul.f32      d31, d17, d5
  .long  0xf24cbdab                          // vadd.f32      d27, d28, d27
  .long  0xf3477d92                          // vmul.f32      d23, d23, d2
  .long  0xf341cd96                          // vmul.f32      d28, d17, d6
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf343ed17                          // vmul.f32      d30, d3, d7
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf3434e24                          // vcge.f32      d20, d3, d20
  .long  0xf2455da5                          // vadd.f32      d21, d21, d21
  .long  0xf3436e26                          // vcge.f32      d22, d3, d22
  .long  0xf3439e29                          // vcge.f32      d25, d3, d25
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf24aadaa                          // vadd.f32      d26, d26, d26
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf24fddad                          // vadd.f32      d29, d31, d29
  .long  0xf24c1da7                          // vadd.f32      d17, d28, d23
  .long  0xf26e0da0                          // vsub.f32      d16, d30, d16
  .long  0xf26e2da2                          // vsub.f32      d18, d30, d18
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf35541b0                          // vbsl          d20, d21, d16
  .long  0xf35861b2                          // vbsl          d22, d24, d18
  .long  0xf35a91b3                          // vbsl          d25, d26, d19
  .long  0xf20b0da4                          // vadd.f32      d0, d27, d20
  .long  0xf20d1da6                          // vadd.f32      d1, d29, d22
  .long  0xf2012da9                          // vadd.f32      d2, d17, d25
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_overlay_vfp4
.globl _sk_overlay_vfp4
FUNCTION(_sk_overlay_vfp4)
_sk_overlay_vfp4:
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2670d04                          // vsub.f32      d16, d7, d4
  .long  0xf2617d87                          // vsub.f32      d23, d17, d7
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf2672d05                          // vsub.f32      d18, d7, d5
  .long  0xf2674d06                          // vsub.f32      d20, d7, d6
  .long  0xf2633d00                          // vsub.f32      d19, d3, d0
  .long  0xf2635d01                          // vsub.f32      d21, d3, d1
  .long  0xf2636d02                          // vsub.f32      d22, d3, d2
  .long  0xf347bd90                          // vmul.f32      d27, d23, d0
  .long  0xf341cd94                          // vmul.f32      d28, d17, d4
  .long  0xf3430db0                          // vmul.f32      d16, d19, d16
  .long  0xf3463db4                          // vmul.f32      d19, d22, d20
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf2444d04                          // vadd.f32      d20, d4, d4
  .long  0xf3405d14                          // vmul.f32      d21, d0, d4
  .long  0xf2456d05                          // vadd.f32      d22, d5, d5
  .long  0xf3418d15                          // vmul.f32      d24, d1, d5
  .long  0xf2469d06                          // vadd.f32      d25, d6, d6
  .long  0xf342ad16                          // vmul.f32      d26, d2, d6
  .long  0xf347dd91                          // vmul.f32      d29, d23, d1
  .long  0xf341fd95                          // vmul.f32      d31, d17, d5
  .long  0xf24cbdab                          // vadd.f32      d27, d28, d27
  .long  0xf3477d92                          // vmul.f32      d23, d23, d2
  .long  0xf341cd96                          // vmul.f32      d28, d17, d6
  .long  0xf343ed17                          // vmul.f32      d30, d3, d7
  .long  0xf2400da0                          // vadd.f32      d16, d16, d16
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2433da3                          // vadd.f32      d19, d19, d19
  .long  0xf3474e24                          // vcge.f32      d20, d7, d20
  .long  0xf2455da5                          // vadd.f32      d21, d21, d21
  .long  0xf3476e26                          // vcge.f32      d22, d7, d22
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf3479e29                          // vcge.f32      d25, d7, d25
  .long  0xf24aadaa                          // vadd.f32      d26, d26, d26
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf24fddad                          // vadd.f32      d29, d31, d29
  .long  0xf24c1da7                          // vadd.f32      d17, d28, d23
  .long  0xf26e0da0                          // vsub.f32      d16, d30, d16
  .long  0xf26e2da2                          // vsub.f32      d18, d30, d18
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf35541b0                          // vbsl          d20, d21, d16
  .long  0xf35861b2                          // vbsl          d22, d24, d18
  .long  0xf35a91b3                          // vbsl          d25, d26, d19
  .long  0xf20b0da4                          // vadd.f32      d0, d27, d20
  .long  0xf20d1da6                          // vadd.f32      d1, d29, d22
  .long  0xf2012da9                          // vadd.f32      d2, d17, d25
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_softlight_vfp4
.globl _sk_softlight_vfp4
FUNCTION(_sk_softlight_vfp4)
_sk_softlight_vfp4:
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xeec58aa7                          // vdiv.f32      s17, s11, s15
  .long  0xf3f90407                          // vcgt.f32      d16, d7, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeec49aa7                          // vdiv.f32      s19, s9, s15
  .long  0xeec6aaa7                          // vdiv.f32      s21, s13, s15
  .long  0xee858a07                          // vdiv.f32      s16, s10, s14
  .long  0xee849a07                          // vdiv.f32      s18, s8, s14
  .long  0xee86aa07                          // vdiv.f32      s20, s12, s14
  .long  0xf26021b0                          // vorr          d18, d16, d16
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf3582131                          // vbsl          d18, d8, d17
  .long  0xf26031b0                          // vorr          d19, d16, d16
  .long  0xf3fb45a2                          // vrsqrte.f32   d20, d18
  .long  0xf3593131                          // vbsl          d19, d9, d17
  .long  0xf35a0131                          // vbsl          d16, d10, d17
  .long  0xf3fb15a3                          // vrsqrte.f32   d17, d19
  .long  0xf3fb55a0                          // vrsqrte.f32   d21, d16
  .long  0xf3446db4                          // vmul.f32      d22, d20, d20
  .long  0xf243ada3                          // vadd.f32      d26, d19, d19
  .long  0xf240bda0                          // vadd.f32      d27, d16, d16
  .long  0xf3417db1                          // vmul.f32      d23, d17, d17
  .long  0xf3458db5                          // vmul.f32      d24, d21, d21
  .long  0xf2626fb6                          // vrsqrts.f32   d22, d18, d22
  .long  0xf2429da2                          // vadd.f32      d25, d18, d18
  .long  0xf2637fb7                          // vrsqrts.f32   d23, d19, d23
  .long  0xf2608fb8                          // vrsqrts.f32   d24, d16, d24
  .long  0xf2818f1c                          // vmov.f32      d8, #7
  .long  0xf2499da9                          // vadd.f32      d25, d25, d25
  .long  0xf3444db6                          // vmul.f32      d20, d20, d22
  .long  0xf24a6daa                          // vadd.f32      d22, d26, d26
  .long  0xf24badab                          // vadd.f32      d26, d27, d27
  .long  0xf3411db7                          // vmul.f32      d17, d17, d23
  .long  0xf3455db8                          // vmul.f32      d21, d21, d24
  .long  0xf3fb7524                          // vrecpe.f32    d23, d20
  .long  0xf3498db9                          // vmul.f32      d24, d25, d25
  .long  0xf3fbd521                          // vrecpe.f32    d29, d17
  .long  0xf34aedba                          // vmul.f32      d30, d26, d26
  .long  0xf3fbf525                          // vrecpe.f32    d31, d21
  .long  0xf2444fb7                          // vrecps.f32    d20, d20, d23
  .long  0xf346cdb6                          // vmul.f32      d28, d22, d22
  .long  0xf2411fbd                          // vrecps.f32    d17, d17, d29
  .long  0xf3c7bf10                          // vmov.f32      d27, #-1
  .long  0xf2455fbf                          // vrecps.f32    d21, d21, d31
  .long  0xf24aadae                          // vadd.f32      d26, d26, d30
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2429dab                          // vadd.f32      d25, d18, d27
  .long  0xf2466dac                          // vadd.f32      d22, d22, d28
  .long  0xf243cdab                          // vadd.f32      d28, d19, d27
  .long  0xf240bdab                          // vadd.f32      d27, d16, d27
  .long  0xf3474db4                          // vmul.f32      d20, d23, d20
  .long  0xf2c7ef10                          // vmov.f32      d30, #1
  .long  0xf34d1db1                          // vmul.f32      d17, d29, d17
  .long  0xf34badba                          // vmul.f32      d26, d27, d26
  .long  0xf242bd02                          // vadd.f32      d27, d2, d2
  .long  0xf26edda0                          // vsub.f32      d29, d30, d16
  .long  0xf3498db8                          // vmul.f32      d24, d25, d24
  .long  0xf3429d98                          // vmul.f32      d25, d18, d8
  .long  0xf34f5db5                          // vmul.f32      d21, d31, d21
  .long  0xf26efda2                          // vsub.f32      d31, d30, d18
  .long  0xf2642da2                          // vsub.f32      d18, d20, d18
  .long  0xf26b4d83                          // vsub.f32      d20, d27, d3
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf34c6db6                          // vmul.f32      d22, d28, d22
  .long  0xf3437d98                          // vmul.f32      d23, d19, d8
  .long  0xf3449dbd                          // vmul.f32      d25, d20, d29
  .long  0xf245dd05                          // vadd.f32      d29, d5, d5
  .long  0xf340cd98                          // vmul.f32      d28, d16, d8
  .long  0xf2476da6                          // vadd.f32      d22, d23, d22
  .long  0xf2611da3                          // vsub.f32      d17, d17, d19
  .long  0xf24dddad                          // vadd.f32      d29, d29, d29
  .long  0xf24c7daa                          // vadd.f32      d23, d28, d26
  .long  0xf2650da0                          // vsub.f32      d16, d21, d16
  .long  0xf26e3da3                          // vsub.f32      d19, d30, d19
  .long  0xf347de2d                          // vcge.f32      d29, d7, d29
  .long  0xf241ad01                          // vadd.f32      d26, d1, d1
  .long  0xf3444d97                          // vmul.f32      d20, d20, d7
  .long  0xf358d1b2                          // vbsl          d29, d24, d18
  .long  0xf2448d04                          // vadd.f32      d24, d4, d4
  .long  0xf2462d06                          // vadd.f32      d18, d6, d6
  .long  0xf26a5d83                          // vsub.f32      d21, d26, d3
  .long  0xf2488da8                          // vadd.f32      d24, d24, d24
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf345cdbf                          // vmul.f32      d28, d21, d31
  .long  0xf3455d97                          // vmul.f32      d21, d21, d7
  .long  0xf3478e28                          // vcge.f32      d24, d7, d24
  .long  0xf3472e22                          // vcge.f32      d18, d7, d18
  .long  0xf343fd14                          // vmul.f32      d31, d3, d4
  .long  0xf3455dbd                          // vmul.f32      d21, d21, d29
  .long  0xf35681b1                          // vbsl          d24, d22, d17
  .long  0xf2401d00                          // vadd.f32      d17, d0, d0
  .long  0xf35721b0                          // vbsl          d18, d23, d16
  .long  0xf24c0d83                          // vadd.f32      d16, d28, d3
  .long  0xf2496d83                          // vadd.f32      d22, d25, d3
  .long  0xf2617d83                          // vsub.f32      d23, d17, d3
  .long  0xf3442db2                          // vmul.f32      d18, d20, d18
  .long  0xf3434e2a                          // vcge.f32      d20, d3, d26
  .long  0xf343ae2b                          // vcge.f32      d26, d3, d27
  .long  0xf3473db3                          // vmul.f32      d19, d23, d19
  .long  0xf3477d97                          // vmul.f32      d23, d23, d7
  .long  0xf3431e21                          // vcge.f32      d17, d3, d17
  .long  0xf3400d95                          // vmul.f32      d16, d16, d5
  .long  0xf2433d83                          // vadd.f32      d19, d19, d3
  .long  0xf3477db8                          // vmul.f32      d23, d23, d24
  .long  0xf26e8d87                          // vsub.f32      d24, d30, d7
  .long  0xf26eed83                          // vsub.f32      d30, d30, d3
  .long  0xf3433d94                          // vmul.f32      d19, d19, d4
  .long  0xf24f7da7                          // vadd.f32      d23, d31, d23
  .long  0xf3489d91                          // vmul.f32      d25, d24, d1
  .long  0xf348cd90                          // vmul.f32      d28, d24, d0
  .long  0xf34edd94                          // vmul.f32      d29, d30, d4
  .long  0xf34ebd95                          // vmul.f32      d27, d30, d5
  .long  0xf3488d92                          // vmul.f32      d24, d24, d2
  .long  0xf34efd96                          // vmul.f32      d31, d30, d6
  .long  0xf24dcdac                          // vadd.f32      d28, d29, d28
  .long  0xf343dd15                          // vmul.f32      d29, d3, d5
  .long  0xf24b9da9                          // vadd.f32      d25, d27, d25
  .long  0xf343bd16                          // vmul.f32      d27, d3, d6
  .long  0xf3466d96                          // vmul.f32      d22, d22, d6
  .long  0xf24f8da8                          // vadd.f32      d24, d31, d24
  .long  0xf24d5da5                          // vadd.f32      d21, d29, d21
  .long  0xf24b2da2                          // vadd.f32      d18, d27, d18
  .long  0xf35311b7                          // vbsl          d17, d19, d23
  .long  0xf35041b5                          // vbsl          d20, d16, d21
  .long  0xf356a1b2                          // vbsl          d26, d22, d18
  .long  0xf2073c3e                          // vfma.f32      d3, d7, d30
  .long  0xf20c0da1                          // vadd.f32      d0, d28, d17
  .long  0xf2091da4                          // vadd.f32      d1, d25, d20
  .long  0xf2082daa                          // vadd.f32      d2, d24, d26
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_hue_vfp4
.globl _sk_hue_vfp4
FUNCTION(_sk_hue_vfp4)
_sk_hue_vfp4:
  .long  0xed2d8b0c                          // vpush         {d8-d13}
  .long  0xf3420d13                          // vmul.f32      d16, d2, d3
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3411d13                          // vmul.f32      d17, d1, d3
  .long  0xf2652f06                          // vmin.f32      d18, d5, d6
  .long  0xf2453f06                          // vmax.f32      d19, d5, d6
  .long  0xf3404d13                          // vmul.f32      d20, d0, d3
  .long  0xf2615fa0                          // vmin.f32      d21, d17, d16
  .long  0xf2642f22                          // vmin.f32      d18, d4, d18
  .long  0xf2443f23                          // vmax.f32      d19, d4, d19
  .long  0xf2416fa0                          // vmax.f32      d22, d17, d16
  .long  0xf2645fa5                          // vmin.f32      d21, d20, d21
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2443fa6                          // vmax.f32      d19, d20, d22
  .long  0xeddf6b76                          // vldr          d22, [pc, #472]
  .long  0xf2611da5                          // vsub.f32      d17, d17, d21
  .long  0xf2644da5                          // vsub.f32      d20, d20, d21
  .long  0xf3422d93                          // vmul.f32      d18, d18, d3
  .long  0xf2238da5                          // vsub.f32      d8, d19, d21
  .long  0xf2600da5                          // vsub.f32      d16, d16, d21
  .long  0xf3f97508                          // vceq.f32      d23, d8, #0
  .long  0xf26751b7                          // vorr          d21, d23, d23
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xeddf1b69                          // vldr          d17, [pc, #420]
  .long  0xf302adb4                          // vmul.f32      d10, d18, d20
  .long  0xf3453d31                          // vmul.f32      d19, d5, d17
  .long  0xf302bdb0                          // vmul.f32      d11, d18, d16
  .long  0xeddf2b67                          // vldr          d18, [pc, #412]
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xeec9caa8                          // vdiv.f32      s25, s19, s17
  .long  0xee89ca08                          // vdiv.f32      s24, s18, s16
  .long  0xeeca9aa8                          // vdiv.f32      s19, s21, s17
  .long  0xee8a9a08                          // vdiv.f32      s18, s20, s16
  .long  0xeecbaaa8                          // vdiv.f32      s21, s23, s17
  .long  0xee8baa08                          // vdiv.f32      s20, s22, s16
  .long  0xf3444d32                          // vmul.f32      d20, d4, d18
  .long  0xf350519c                          // vbsl          d21, d16, d12
  .long  0xf3468d36                          // vmul.f32      d24, d6, d22
  .long  0xf3459db1                          // vmul.f32      d25, d21, d17
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf26741b7                          // vorr          d20, d23, d23
  .long  0xf350719a                          // vbsl          d23, d16, d10
  .long  0xf3504199                          // vbsl          d20, d16, d9
  .long  0xf2433da8                          // vadd.f32      d19, d19, d24
  .long  0xf344adb2                          // vmul.f32      d26, d20, d18
  .long  0xf3478db6                          // vmul.f32      d24, d23, d22
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf24a9da9                          // vadd.f32      d25, d26, d25
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2633da8                          // vsub.f32      d19, d19, d24
  .long  0xf2458da3                          // vadd.f32      d24, d21, d19
  .long  0xf2445da3                          // vadd.f32      d21, d20, d19
  .long  0xf2477da3                          // vadd.f32      d23, d23, d19
  .long  0xf3481db1                          // vmul.f32      d17, d24, d17
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf3473db6                          // vmul.f32      d19, d23, d22
  .long  0xf2684fa7                          // vmin.f32      d20, d24, d23
  .long  0xf2486fa7                          // vmax.f32      d22, d24, d23
  .long  0xf2421da1                          // vadd.f32      d17, d18, d17
  .long  0xf2456fa6                          // vmax.f32      d22, d21, d22
  .long  0xf2432da1                          // vadd.f32      d18, d19, d17
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf3f944a3                          // vcge.f32      d20, d19, #0
  .long  0xf264a1b4                          // vorr          d26, d20, d20
  .long  0xf2671da2                          // vsub.f32      d17, d23, d18
  .long  0xf2228da3                          // vsub.f32      d8, d18, d19
  .long  0xf26431b4                          // vorr          d19, d20, d20
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xf3431d17                          // vmul.f32      d17, d3, d7
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf2429d8a                          // vadd.f32      d25, d18, d10
  .long  0xf35731b9                          // vbsl          d19, d23, d25
  .long  0xf2619da2                          // vsub.f32      d25, d17, d18
  .long  0xf2637da2                          // vsub.f32      d23, d19, d18
  .long  0xf226ada2                          // vsub.f32      d10, d22, d18
  .long  0xf309bdb7                          // vmul.f32      d11, d25, d23
  .long  0xf2687da2                          // vsub.f32      d23, d24, d18
  .long  0xeecb9aaa                          // vdiv.f32      s19, s23, s21
  .long  0xee8b9a0a                          // vdiv.f32      s18, s22, s20
  .long  0xf302bdb7                          // vmul.f32      d11, d18, d23
  .long  0xeecbcaa8                          // vdiv.f32      s25, s23, s17
  .long  0xee8bca08                          // vdiv.f32      s24, s22, s16
  .long  0xf2427d8c                          // vadd.f32      d23, d18, d12
  .long  0xf358a1b7                          // vbsl          d26, d24, d23
  .long  0xf26a7da2                          // vsub.f32      d23, d26, d18
  .long  0xf309bdb7                          // vmul.f32      d11, d25, d23
  .long  0xf2657da2                          // vsub.f32      d23, d21, d18
  .long  0xeecbcaaa                          // vdiv.f32      s25, s23, s21
  .long  0xee8bca0a                          // vdiv.f32      s24, s22, s20
  .long  0xf302bdb7                          // vmul.f32      d11, d18, d23
  .long  0xf2428d8c                          // vadd.f32      d24, d18, d12
  .long  0xeecbdaa8                          // vdiv.f32      s27, s23, s17
  .long  0xee8bda08                          // vdiv.f32      s26, s22, s16
  .long  0xf2427d8d                          // vadd.f32      d23, d18, d13
  .long  0xf35541b7                          // vbsl          d20, d21, d23
  .long  0xf2c77f10                          // vmov.f32      d23, #1
  .long  0xf2645da2                          // vsub.f32      d21, d20, d18
  .long  0xf3098db5                          // vmul.f32      d8, d25, d21
  .long  0xf3665ea1                          // vcgt.f32      d21, d22, d17
  .long  0xf2679d87                          // vsub.f32      d25, d23, d7
  .long  0xf2677d83                          // vsub.f32      d23, d23, d3
  .long  0xeec8baaa                          // vdiv.f32      s23, s17, s21
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf2426d8b                          // vadd.f32      d22, d18, d11
  .long  0xf265f1b5                          // vorr          d31, d21, d21
  .long  0xf2422d89                          // vadd.f32      d18, d18, d9
  .long  0xf349bd90                          // vmul.f32      d27, d25, d0
  .long  0xf356f1b4                          // vbsl          d31, d22, d20
  .long  0xf347cd94                          // vmul.f32      d28, d23, d4
  .long  0xf349dd91                          // vmul.f32      d29, d25, d1
  .long  0xf3494d92                          // vmul.f32      d20, d25, d2
  .long  0xf3476d96                          // vmul.f32      d22, d23, d6
  .long  0xf347ed95                          // vmul.f32      d30, d23, d5
  .long  0xf26571b5                          // vorr          d23, d21, d21
  .long  0xf35251b3                          // vbsl          d21, d18, d19
  .long  0xf35871ba                          // vbsl          d23, d24, d26
  .long  0xf2438d07                          // vadd.f32      d24, d3, d7
  .long  0xf24c9dab                          // vadd.f32      d25, d28, d27
  .long  0xf24f2fa0                          // vmax.f32      d18, d31, d16
  .long  0xf2477fa0                          // vmax.f32      d23, d23, d16
  .long  0xf24e3dad                          // vadd.f32      d19, d30, d29
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2450fa0                          // vmax.f32      d16, d21, d16
  .long  0xf2283da1                          // vsub.f32      d3, d24, d17
  .long  0xf2090da2                          // vadd.f32      d0, d25, d18
  .long  0xf2031da7                          // vadd.f32      d1, d19, d23
  .long  0xf2042da0                          // vadd.f32      d2, d20, d16
  .long  0xecbd8b0c                          // vpop          {d8-d13}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_saturation_vfp4
.globl _sk_saturation_vfp4
FUNCTION(_sk_saturation_vfp4)
_sk_saturation_vfp4:
  .long  0xed2d8b0c                          // vpush         {d8-d13}
  .long  0xf3430d16                          // vmul.f32      d16, d3, d6
  .long  0xeddf7b82                          // vldr          d23, [pc, #520]
  .long  0xf3431d15                          // vmul.f32      d17, d3, d5
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2612f02                          // vmin.f32      d18, d1, d2
  .long  0xf2413f02                          // vmax.f32      d19, d1, d2
  .long  0xf3434d14                          // vmul.f32      d20, d3, d4
  .long  0xf2615fa0                          // vmin.f32      d21, d17, d16
  .long  0xf2602f22                          // vmin.f32      d18, d0, d18
  .long  0xf2403f23                          // vmax.f32      d19, d0, d19
  .long  0xf2416fa0                          // vmax.f32      d22, d17, d16
  .long  0xf2645fa5                          // vmin.f32      d21, d20, d21
  .long  0xf3468d37                          // vmul.f32      d24, d6, d23
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2443fa6                          // vmax.f32      d19, d20, d22
  .long  0xf2611da5                          // vsub.f32      d17, d17, d21
  .long  0xf2644da5                          // vsub.f32      d20, d20, d21
  .long  0xf3422d97                          // vmul.f32      d18, d18, d7
  .long  0xf2238da5                          // vsub.f32      d8, d19, d21
  .long  0xf2600da5                          // vsub.f32      d16, d16, d21
  .long  0xf3f96508                          // vceq.f32      d22, d8, #0
  .long  0xf26651b6                          // vorr          d21, d22, d22
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xeddf1b68                          // vldr          d17, [pc, #416]
  .long  0xf302adb4                          // vmul.f32      d10, d18, d20
  .long  0xf3453d31                          // vmul.f32      d19, d5, d17
  .long  0xf302bdb0                          // vmul.f32      d11, d18, d16
  .long  0xeddf2b66                          // vldr          d18, [pc, #408]
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xeec9caa8                          // vdiv.f32      s25, s19, s17
  .long  0xee89ca08                          // vdiv.f32      s24, s18, s16
  .long  0xeeca9aa8                          // vdiv.f32      s19, s21, s17
  .long  0xee8a9a08                          // vdiv.f32      s18, s20, s16
  .long  0xeecbaaa8                          // vdiv.f32      s21, s23, s17
  .long  0xee8baa08                          // vdiv.f32      s20, s22, s16
  .long  0xf3444d32                          // vmul.f32      d20, d4, d18
  .long  0xf350519c                          // vbsl          d21, d16, d12
  .long  0xf3459db1                          // vmul.f32      d25, d21, d17
  .long  0xf2443da3                          // vadd.f32      d19, d20, d19
  .long  0xf26641b6                          // vorr          d20, d22, d22
  .long  0xf350619a                          // vbsl          d22, d16, d10
  .long  0xf3504199                          // vbsl          d20, d16, d9
  .long  0xf2433da8                          // vadd.f32      d19, d19, d24
  .long  0xf344adb2                          // vmul.f32      d26, d20, d18
  .long  0xf3468db7                          // vmul.f32      d24, d22, d23
  .long  0xf3433d93                          // vmul.f32      d19, d19, d3
  .long  0xf24a9da9                          // vadd.f32      d25, d26, d25
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2633da8                          // vsub.f32      d19, d19, d24
  .long  0xf2458da3                          // vadd.f32      d24, d21, d19
  .long  0xf2445da3                          // vadd.f32      d21, d20, d19
  .long  0xf2466da3                          // vadd.f32      d22, d22, d19
  .long  0xf3481db1                          // vmul.f32      d17, d24, d17
  .long  0xf3452db2                          // vmul.f32      d18, d21, d18
  .long  0xf3463db7                          // vmul.f32      d19, d22, d23
  .long  0xf2684fa6                          // vmin.f32      d20, d24, d22
  .long  0xf2487fa6                          // vmax.f32      d23, d24, d22
  .long  0xf2421da1                          // vadd.f32      d17, d18, d17
  .long  0xf2457fa7                          // vmax.f32      d23, d21, d23
  .long  0xf2432da1                          // vadd.f32      d18, d19, d17
  .long  0xf2653fa4                          // vmin.f32      d19, d21, d20
  .long  0xf3f944a3                          // vcge.f32      d20, d19, #0
  .long  0xf264a1b4                          // vorr          d26, d20, d20
  .long  0xf2661da2                          // vsub.f32      d17, d22, d18
  .long  0xf2228da3                          // vsub.f32      d8, d18, d19
  .long  0xf26431b4                          // vorr          d19, d20, d20
  .long  0xf3029db1                          // vmul.f32      d9, d18, d17
  .long  0xf3431d17                          // vmul.f32      d17, d3, d7
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf2429d8a                          // vadd.f32      d25, d18, d10
  .long  0xf35631b9                          // vbsl          d19, d22, d25
  .long  0xf2619da2                          // vsub.f32      d25, d17, d18
  .long  0xf2636da2                          // vsub.f32      d22, d19, d18
  .long  0xf227ada2                          // vsub.f32      d10, d23, d18
  .long  0xf309bdb6                          // vmul.f32      d11, d25, d22
  .long  0xf2686da2                          // vsub.f32      d22, d24, d18
  .long  0xeecb9aaa                          // vdiv.f32      s19, s23, s21
  .long  0xee8b9a0a                          // vdiv.f32      s18, s22, s20
  .long  0xf302bdb6                          // vmul.f32      d11, d18, d22
  .long  0xeecbcaa8                          // vdiv.f32      s25, s23, s17
  .long  0xee8bca08                          // vdiv.f32      s24, s22, s16
  .long  0xf2426d8c                          // vadd.f32      d22, d18, d12
  .long  0xf358a1b6                          // vbsl          d26, d24, d22
  .long  0xf26a6da2                          // vsub.f32      d22, d26, d18
  .long  0xf309bdb6                          // vmul.f32      d11, d25, d22
  .long  0xf2656da2                          // vsub.f32      d22, d21, d18
  .long  0xeecbcaaa                          // vdiv.f32      s25, s23, s21
  .long  0xee8bca0a                          // vdiv.f32      s24, s22, s20
  .long  0xf302bdb6                          // vmul.f32      d11, d18, d22
  .long  0xf2428d8c                          // vadd.f32      d24, d18, d12
  .long  0xeecbdaa8                          // vdiv.f32      s27, s23, s17
  .long  0xee8bda08                          // vdiv.f32      s26, s22, s16
  .long  0xf2426d8d                          // vadd.f32      d22, d18, d13
  .long  0xf35541b6                          // vbsl          d20, d21, d22
  .long  0xf2645da2                          // vsub.f32      d21, d20, d18
  .long  0xf3098db5                          // vmul.f32      d8, d25, d21
  .long  0xf3675ea1                          // vcgt.f32      d21, d23, d17
  .long  0xf2c77f10                          // vmov.f32      d23, #1
  .long  0xf2679d87                          // vsub.f32      d25, d23, d7
  .long  0xeec8baaa                          // vdiv.f32      s23, s17, s21
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf2677d83                          // vsub.f32      d23, d23, d3
  .long  0xf2426d8b                          // vadd.f32      d22, d18, d11
  .long  0xf265f1b5                          // vorr          d31, d21, d21
  .long  0xf2422d89                          // vadd.f32      d18, d18, d9
  .long  0xf349bd90                          // vmul.f32      d27, d25, d0
  .long  0xf356f1b4                          // vbsl          d31, d22, d20
  .long  0xf347cd94                          // vmul.f32      d28, d23, d4
  .long  0xf349dd91                          // vmul.f32      d29, d25, d1
  .long  0xf3494d92                          // vmul.f32      d20, d25, d2
  .long  0xf3476d96                          // vmul.f32      d22, d23, d6
  .long  0xf347ed95                          // vmul.f32      d30, d23, d5
  .long  0xf26571b5                          // vorr          d23, d21, d21
  .long  0xf35251b3                          // vbsl          d21, d18, d19
  .long  0xf35871ba                          // vbsl          d23, d24, d26
  .long  0xf2438d07                          // vadd.f32      d24, d3, d7
  .long  0xf24c9dab                          // vadd.f32      d25, d28, d27
  .long  0xf24f2fa0                          // vmax.f32      d18, d31, d16
  .long  0xf2477fa0                          // vmax.f32      d23, d23, d16
  .long  0xf24e3dad                          // vadd.f32      d19, d30, d29
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2450fa0                          // vmax.f32      d16, d21, d16
  .long  0xf2283da1                          // vsub.f32      d3, d24, d17
  .long  0xf2090da2                          // vadd.f32      d0, d25, d18
  .long  0xf2031da7                          // vadd.f32      d1, d19, d23
  .long  0xf2042da0                          // vadd.f32      d2, d20, d16
  .long  0xecbd8b0c                          // vpop          {d8-d13}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_color_vfp4
.globl _sk_color_vfp4
FUNCTION(_sk_color_vfp4)
_sk_color_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xeddf0b63                          // vldr          d16, [pc, #396]
  .long  0xf3412d17                          // vmul.f32      d18, d1, d7
  .long  0xeddf3b63                          // vldr          d19, [pc, #396]
  .long  0xf3401d17                          // vmul.f32      d17, d0, d7
  .long  0xf3454d30                          // vmul.f32      d20, d5, d16
  .long  0xeddf7b62                          // vldr          d23, [pc, #392]
  .long  0xf3446d33                          // vmul.f32      d22, d4, d19
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3425d17                          // vmul.f32      d21, d2, d7
  .long  0xf3428db0                          // vmul.f32      d24, d18, d16
  .long  0xf3419db3                          // vmul.f32      d25, d17, d19
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf346ad37                          // vmul.f32      d26, d6, d23
  .long  0xf3456db7                          // vmul.f32      d22, d21, d23
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2c0e010                          // vmov.i32      d30, #0
  .long  0xf2444daa                          // vadd.f32      d20, d20, d26
  .long  0xf2466da8                          // vadd.f32      d22, d22, d24
  .long  0xf3444d93                          // vmul.f32      d20, d20, d3
  .long  0xf2646da6                          // vsub.f32      d22, d20, d22
  .long  0xf2414da6                          // vadd.f32      d20, d17, d22
  .long  0xf2428da6                          // vadd.f32      d24, d18, d22
  .long  0xf2455da6                          // vadd.f32      d21, d21, d22
  .long  0xf3441db3                          // vmul.f32      d17, d20, d19
  .long  0xf3480db0                          // vmul.f32      d16, d24, d16
  .long  0xf3452db7                          // vmul.f32      d18, d21, d23
  .long  0xf2683fa5                          // vmin.f32      d19, d24, d21
  .long  0xf2486fa5                          // vmax.f32      d22, d24, d21
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf2421da0                          // vadd.f32      d17, d18, d16
  .long  0xf2642fa3                          // vmin.f32      d18, d20, d19
  .long  0xf3f934a2                          // vcge.f32      d19, d18, #0
  .long  0xf26391b3                          // vorr          d25, d19, d19
  .long  0xf2650da1                          // vsub.f32      d16, d21, d17
  .long  0xf2219da2                          // vsub.f32      d9, d17, d18
  .long  0xf26321b3                          // vorr          d18, d19, d19
  .long  0xf3018db0                          // vmul.f32      d8, d17, d16
  .long  0xf3430d17                          // vmul.f32      d16, d3, d7
  .long  0xeec8aaa9                          // vdiv.f32      s21, s17, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2417d8a                          // vadd.f32      d23, d17, d10
  .long  0xf35521b7                          // vbsl          d18, d21, d23
  .long  0xf2445fa6                          // vmax.f32      d21, d20, d22
  .long  0xf2626da1                          // vsub.f32      d22, d18, d17
  .long  0xf2607da1                          // vsub.f32      d23, d16, d17
  .long  0xf225ada1                          // vsub.f32      d10, d21, d17
  .long  0xf307bdb6                          // vmul.f32      d11, d23, d22
  .long  0xf2686da1                          // vsub.f32      d22, d24, d17
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xf301cdb6                          // vmul.f32      d12, d17, d22
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xeeccdaa9                          // vdiv.f32      s27, s25, s19
  .long  0xee8cda09                          // vdiv.f32      s26, s24, s18
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf35891b6                          // vbsl          d25, d24, d22
  .long  0xf2696da1                          // vsub.f32      d22, d25, d17
  .long  0xf307ddb6                          // vmul.f32      d13, d23, d22
  .long  0xf2646da1                          // vsub.f32      d22, d20, d17
  .long  0xeecdcaaa                          // vdiv.f32      s25, s27, s21
  .long  0xee8dca0a                          // vdiv.f32      s24, s26, s20
  .long  0xf301ddb6                          // vmul.f32      d13, d17, d22
  .long  0xf2418d8c                          // vadd.f32      d24, d17, d12
  .long  0xeecdeaa9                          // vdiv.f32      s29, s27, s19
  .long  0xee8dea09                          // vdiv.f32      s28, s26, s18
  .long  0xf2416d8e                          // vadd.f32      d22, d17, d14
  .long  0xf35431b6                          // vbsl          d19, d20, d22
  .long  0xf2634da1                          // vsub.f32      d20, d19, d17
  .long  0xf3079db4                          // vmul.f32      d9, d23, d20
  .long  0xf3654ea0                          // vcgt.f32      d20, d21, d16
  .long  0xf2c75f10                          // vmov.f32      d21, #1
  .long  0xf2657d83                          // vsub.f32      d23, d21, d3
  .long  0xeec9daaa                          // vdiv.f32      s27, s19, s21
  .long  0xee89da0a                          // vdiv.f32      s26, s18, s20
  .long  0xf2655d87                          // vsub.f32      d21, d21, d7
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf264f1b4                          // vorr          d31, d20, d20
  .long  0xf2411d88                          // vadd.f32      d17, d17, d8
  .long  0xf345ad90                          // vmul.f32      d26, d21, d0
  .long  0xf356f1b3                          // vbsl          d31, d22, d19
  .long  0xf26461b4                          // vorr          d22, d20, d20
  .long  0xf347bd94                          // vmul.f32      d27, d23, d4
  .long  0xf345cd91                          // vmul.f32      d28, d21, d1
  .long  0xf3453d92                          // vmul.f32      d19, d21, d2
  .long  0xf3475d96                          // vmul.f32      d21, d23, d6
  .long  0xf347dd95                          // vmul.f32      d29, d23, d5
  .long  0xf35141b2                          // vbsl          d20, d17, d18
  .long  0xf35861b9                          // vbsl          d22, d24, d25
  .long  0xf2437d07                          // vadd.f32      d23, d3, d7
  .long  0xf24b8daa                          // vadd.f32      d24, d27, d26
  .long  0xf24f1fae                          // vmax.f32      d17, d31, d30
  .long  0xf24d2dac                          // vadd.f32      d18, d29, d28
  .long  0xf2466fae                          // vmax.f32      d22, d22, d30
  .long  0xf2453da3                          // vadd.f32      d19, d21, d19
  .long  0xf2444fae                          // vmax.f32      d20, d20, d30
  .long  0xf2273da0                          // vsub.f32      d3, d23, d16
  .long  0xf2080da1                          // vadd.f32      d0, d24, d17
  .long  0xf2021da6                          // vadd.f32      d1, d18, d22
  .long  0xf2032da4                          // vadd.f32      d2, d19, d20
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_luminosity_vfp4
.globl _sk_luminosity_vfp4
FUNCTION(_sk_luminosity_vfp4)
_sk_luminosity_vfp4:
  .long  0xed2d8b0e                          // vpush         {d8-d14}
  .long  0xeddf0b63                          // vldr          d16, [pc, #396]
  .long  0xf3432d15                          // vmul.f32      d18, d3, d5
  .long  0xeddf3b63                          // vldr          d19, [pc, #396]
  .long  0xf3431d14                          // vmul.f32      d17, d3, d4
  .long  0xf3414d30                          // vmul.f32      d20, d1, d16
  .long  0xeddf7b62                          // vldr          d23, [pc, #392]
  .long  0xf3406d33                          // vmul.f32      d22, d0, d19
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3435d16                          // vmul.f32      d21, d3, d6
  .long  0xf3428db0                          // vmul.f32      d24, d18, d16
  .long  0xf3419db3                          // vmul.f32      d25, d17, d19
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf342ad37                          // vmul.f32      d26, d2, d23
  .long  0xf3456db7                          // vmul.f32      d22, d21, d23
  .long  0xf2498da8                          // vadd.f32      d24, d25, d24
  .long  0xf2c0e010                          // vmov.i32      d30, #0
  .long  0xf2444daa                          // vadd.f32      d20, d20, d26
  .long  0xf2486da6                          // vadd.f32      d22, d24, d22
  .long  0xf3444d97                          // vmul.f32      d20, d20, d7
  .long  0xf2646da6                          // vsub.f32      d22, d20, d22
  .long  0xf2414da6                          // vadd.f32      d20, d17, d22
  .long  0xf2428da6                          // vadd.f32      d24, d18, d22
  .long  0xf2455da6                          // vadd.f32      d21, d21, d22
  .long  0xf3441db3                          // vmul.f32      d17, d20, d19
  .long  0xf3480db0                          // vmul.f32      d16, d24, d16
  .long  0xf3452db7                          // vmul.f32      d18, d21, d23
  .long  0xf2683fa5                          // vmin.f32      d19, d24, d21
  .long  0xf2486fa5                          // vmax.f32      d22, d24, d21
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf2421da0                          // vadd.f32      d17, d18, d16
  .long  0xf2642fa3                          // vmin.f32      d18, d20, d19
  .long  0xf3f934a2                          // vcge.f32      d19, d18, #0
  .long  0xf26391b3                          // vorr          d25, d19, d19
  .long  0xf2650da1                          // vsub.f32      d16, d21, d17
  .long  0xf2219da2                          // vsub.f32      d9, d17, d18
  .long  0xf26321b3                          // vorr          d18, d19, d19
  .long  0xf3018db0                          // vmul.f32      d8, d17, d16
  .long  0xf3430d17                          // vmul.f32      d16, d3, d7
  .long  0xeec8aaa9                          // vdiv.f32      s21, s17, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2417d8a                          // vadd.f32      d23, d17, d10
  .long  0xf35521b7                          // vbsl          d18, d21, d23
  .long  0xf2445fa6                          // vmax.f32      d21, d20, d22
  .long  0xf2626da1                          // vsub.f32      d22, d18, d17
  .long  0xf2607da1                          // vsub.f32      d23, d16, d17
  .long  0xf225ada1                          // vsub.f32      d10, d21, d17
  .long  0xf307bdb6                          // vmul.f32      d11, d23, d22
  .long  0xf2686da1                          // vsub.f32      d22, d24, d17
  .long  0xeecb8aaa                          // vdiv.f32      s17, s23, s21
  .long  0xf301cdb6                          // vmul.f32      d12, d17, d22
  .long  0xee8b8a0a                          // vdiv.f32      s16, s22, s20
  .long  0xeeccdaa9                          // vdiv.f32      s27, s25, s19
  .long  0xee8cda09                          // vdiv.f32      s26, s24, s18
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf35891b6                          // vbsl          d25, d24, d22
  .long  0xf2696da1                          // vsub.f32      d22, d25, d17
  .long  0xf307ddb6                          // vmul.f32      d13, d23, d22
  .long  0xf2646da1                          // vsub.f32      d22, d20, d17
  .long  0xeecdcaaa                          // vdiv.f32      s25, s27, s21
  .long  0xee8dca0a                          // vdiv.f32      s24, s26, s20
  .long  0xf301ddb6                          // vmul.f32      d13, d17, d22
  .long  0xf2418d8c                          // vadd.f32      d24, d17, d12
  .long  0xeecdeaa9                          // vdiv.f32      s29, s27, s19
  .long  0xee8dea09                          // vdiv.f32      s28, s26, s18
  .long  0xf2416d8e                          // vadd.f32      d22, d17, d14
  .long  0xf35431b6                          // vbsl          d19, d20, d22
  .long  0xf2634da1                          // vsub.f32      d20, d19, d17
  .long  0xf3079db4                          // vmul.f32      d9, d23, d20
  .long  0xf3654ea0                          // vcgt.f32      d20, d21, d16
  .long  0xf2c75f10                          // vmov.f32      d21, #1
  .long  0xf2657d83                          // vsub.f32      d23, d21, d3
  .long  0xeec9daaa                          // vdiv.f32      s27, s19, s21
  .long  0xee89da0a                          // vdiv.f32      s26, s18, s20
  .long  0xf2655d87                          // vsub.f32      d21, d21, d7
  .long  0xf2416d8d                          // vadd.f32      d22, d17, d13
  .long  0xf264f1b4                          // vorr          d31, d20, d20
  .long  0xf2411d88                          // vadd.f32      d17, d17, d8
  .long  0xf345ad90                          // vmul.f32      d26, d21, d0
  .long  0xf356f1b3                          // vbsl          d31, d22, d19
  .long  0xf26461b4                          // vorr          d22, d20, d20
  .long  0xf347bd94                          // vmul.f32      d27, d23, d4
  .long  0xf345cd91                          // vmul.f32      d28, d21, d1
  .long  0xf3453d92                          // vmul.f32      d19, d21, d2
  .long  0xf3475d96                          // vmul.f32      d21, d23, d6
  .long  0xf347dd95                          // vmul.f32      d29, d23, d5
  .long  0xf35141b2                          // vbsl          d20, d17, d18
  .long  0xf35861b9                          // vbsl          d22, d24, d25
  .long  0xf2437d07                          // vadd.f32      d23, d3, d7
  .long  0xf24b8daa                          // vadd.f32      d24, d27, d26
  .long  0xf24f1fae                          // vmax.f32      d17, d31, d30
  .long  0xf24d2dac                          // vadd.f32      d18, d29, d28
  .long  0xf2466fae                          // vmax.f32      d22, d22, d30
  .long  0xf2453da3                          // vadd.f32      d19, d21, d19
  .long  0xf2444fae                          // vmax.f32      d20, d20, d30
  .long  0xf2273da0                          // vsub.f32      d3, d23, d16
  .long  0xf2080da1                          // vadd.f32      d0, d24, d17
  .long  0xf2021da6                          // vadd.f32      d1, d18, d22
  .long  0xf2032da4                          // vadd.f32      d2, d19, d20
  .long  0xecbd8b0e                          // vpop          {d8-d14}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3f170a3d                          // .word         0x3f170a3d
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3de147ae                          // .word         0x3de147ae
  .long  0x3de147ae                          // .word         0x3de147ae

HIDDEN _sk_srcover_rgba_8888_vfp4
.globl _sk_srcover_rgba_8888_vfp4
FUNCTION(_sk_srcover_rgba_8888_vfp4)
_sk_srcover_rgba_8888_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc102                          // add           ip, ip, r2, lsl #2
  .long  0x0a00002c                          // beq           1408 <sk_srcover_rgba_8888_vfp4+0xd0>
  .long  0xed9c4b00                          // vldr          d4, [ip]
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xeddf6b2f                          // vldr          d22, [pc, #188]
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xf3f82014                          // vshr.u32      d18, d4, #8
  .long  0xf3e84014                          // vshr.u32      d20, d4, #24
  .long  0xf2611d83                          // vsub.f32      d17, d17, d3
  .long  0xf24221b0                          // vand          d18, d18, d16
  .long  0xf3f03014                          // vshr.u32      d19, d4, #16
  .long  0xf3bb7624                          // vcvt.f32.s32  d7, d20
  .long  0xf2445130                          // vand          d21, d4, d16
  .long  0xf3033d36                          // vmul.f32      d3, d3, d22
  .long  0xf24301b0                          // vand          d16, d19, d16
  .long  0xf3bb5622                          // vcvt.f32.s32  d5, d18
  .long  0xf3011d36                          // vmul.f32      d1, d1, d22
  .long  0xf3bb4625                          // vcvt.f32.s32  d4, d21
  .long  0xf3000d36                          // vmul.f32      d0, d0, d22
  .long  0xf3bb6620                          // vcvt.f32.s32  d6, d16
  .long  0xf2073c31                          // vfma.f32      d3, d7, d17
  .long  0xf3022d36                          // vmul.f32      d2, d2, d22
  .long  0xf2051c31                          // vfma.f32      d1, d5, d17
  .long  0xf2040c31                          // vfma.f32      d0, d4, d17
  .long  0xf2062c31                          // vfma.f32      d2, d6, d17
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xf2431d20                          // vadd.f32      d17, d3, d16
  .long  0xf2413d20                          // vadd.f32      d19, d1, d16
  .long  0xf2402d20                          // vadd.f32      d18, d0, d16
  .long  0xf2420d20                          // vadd.f32      d16, d2, d16
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf3fb37a3                          // vcvt.u32.f32  d19, d19
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf3fb07a0                          // vcvt.u32.f32  d16, d16
  .long  0xf2f81531                          // vshl.s32      d17, d17, #24
  .long  0xf26111b2                          // vorr          d17, d17, d18
  .long  0xf2e82533                          // vshl.s32      d18, d19, #8
  .long  0xf2f00530                          // vshl.s32      d16, d16, #16
  .long  0xf26111b2                          // vorr          d17, d17, d18
  .long  0xf26101b0                          // vorr          d16, d17, d16
  .long  0x0a000007                          // beq           1414 <sk_srcover_rgba_8888_vfp4+0xdc>
  .long  0xedcc0b00                          // vstr          d16, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xeddf4a06                          // vldr          s9, [pc, #24]
  .long  0xed9c4a00                          // vldr          s8, [ip]
  .long  0xeaffffd0                          // b             1358 <sk_srcover_rgba_8888_vfp4+0x20>
  .long  0xf4cc083f                          // vst1.32       {d16[0]}, [ip :32]
  .long  0xeafffff6                          // b             13f8 <sk_srcover_rgba_8888_vfp4+0xc0>
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x00000000                          // .word         0x00000000

HIDDEN _sk_clamp_0_vfp4
.globl _sk_clamp_0_vfp4
FUNCTION(_sk_clamp_0_vfp4)
_sk_clamp_0_vfp4:
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2000f20                          // vmax.f32      d0, d0, d16
  .long  0xf2011f20                          // vmax.f32      d1, d1, d16
  .long  0xf2022f20                          // vmax.f32      d2, d2, d16
  .long  0xf2033f20                          // vmax.f32      d3, d3, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_1_vfp4
.globl _sk_clamp_1_vfp4
FUNCTION(_sk_clamp_1_vfp4)
_sk_clamp_1_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2200f20                          // vmin.f32      d0, d0, d16
  .long  0xf2211f20                          // vmin.f32      d1, d1, d16
  .long  0xf2222f20                          // vmin.f32      d2, d2, d16
  .long  0xf2233f20                          // vmin.f32      d3, d3, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_a_vfp4
.globl _sk_clamp_a_vfp4
FUNCTION(_sk_clamp_a_vfp4)
_sk_clamp_a_vfp4:
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2233f20                          // vmin.f32      d3, d3, d16
  .long  0xf2200f03                          // vmin.f32      d0, d0, d3
  .long  0xf2211f03                          // vmin.f32      d1, d1, d3
  .long  0xf2222f03                          // vmin.f32      d2, d2, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_set_rgb_vfp4
.globl _sk_set_rgb_vfp4
FUNCTION(_sk_set_rgb_vfp4)
_sk_set_rgb_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4ae0c9d                          // vld1.32       {d0[]}, [lr :32]!
  .long  0xf4a42c9f                          // vld1.32       {d2[]}, [r4 :32]
  .long  0xf4ae1c9f                          // vld1.32       {d1[]}, [lr :32]
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_swap_rb_vfp4
.globl _sk_swap_rb_vfp4
FUNCTION(_sk_swap_rb_vfp4)
_sk_swap_rb_vfp4:
  .long  0xeef00b40                          // vmov.f64      d16, d0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb00b42                          // vmov.f64      d0, d2
  .long  0xeeb02b60                          // vmov.f64      d2, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_swap_vfp4
.globl _sk_swap_vfp4
FUNCTION(_sk_swap_vfp4)
_sk_swap_vfp4:
  .long  0xeef00b43                          // vmov.f64      d16, d3
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeef01b42                          // vmov.f64      d17, d2
  .long  0xeef02b41                          // vmov.f64      d18, d1
  .long  0xeef03b40                          // vmov.f64      d19, d0
  .long  0xeeb00b44                          // vmov.f64      d0, d4
  .long  0xeeb01b45                          // vmov.f64      d1, d5
  .long  0xeeb02b46                          // vmov.f64      d2, d6
  .long  0xeeb03b47                          // vmov.f64      d3, d7
  .long  0xeeb04b63                          // vmov.f64      d4, d19
  .long  0xeeb05b62                          // vmov.f64      d5, d18
  .long  0xeeb06b61                          // vmov.f64      d6, d17
  .long  0xeeb07b60                          // vmov.f64      d7, d16
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_move_src_dst_vfp4
.globl _sk_move_src_dst_vfp4
FUNCTION(_sk_move_src_dst_vfp4)
_sk_move_src_dst_vfp4:
  .long  0xeeb04b40                          // vmov.f64      d4, d0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb05b41                          // vmov.f64      d5, d1
  .long  0xeeb06b42                          // vmov.f64      d6, d2
  .long  0xeeb07b43                          // vmov.f64      d7, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_move_dst_src_vfp4
.globl _sk_move_dst_src_vfp4
FUNCTION(_sk_move_dst_src_vfp4)
_sk_move_dst_src_vfp4:
  .long  0xeeb00b44                          // vmov.f64      d0, d4
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb01b45                          // vmov.f64      d1, d5
  .long  0xeeb02b46                          // vmov.f64      d2, d6
  .long  0xeeb03b47                          // vmov.f64      d3, d7
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_premul_vfp4
.globl _sk_premul_vfp4
FUNCTION(_sk_premul_vfp4)
_sk_premul_vfp4:
  .long  0xf3000d13                          // vmul.f32      d0, d0, d3
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3011d13                          // vmul.f32      d1, d1, d3
  .long  0xf3022d13                          // vmul.f32      d2, d2, d3
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_unpremul_vfp4
.globl _sk_unpremul_vfp4
FUNCTION(_sk_unpremul_vfp4)
_sk_unpremul_vfp4:
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xeeb78a00                          // vmov.f32      s16, #112
  .long  0xf3f91503                          // vceq.f32      d17, d3, #0
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeec89a23                          // vdiv.f32      s19, s16, s7
  .long  0xee889a03                          // vdiv.f32      s18, s16, s6
  .long  0xf3501199                          // vbsl          d17, d16, d9
  .long  0xf3010d90                          // vmul.f32      d0, d17, d0
  .long  0xf3011d91                          // vmul.f32      d1, d17, d1
  .long  0xf3012d92                          // vmul.f32      d2, d17, d2
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_from_srgb_vfp4
.globl _sk_from_srgb_vfp4
FUNCTION(_sk_from_srgb_vfp4)
_sk_from_srgb_vfp4:
  .long  0xeddf3b20                          // vldr          d19, [pc, #128]
  .long  0xf3408d10                          // vmul.f32      d24, d0, d0
  .long  0xeddf0b1c                          // vldr          d16, [pc, #112]
  .long  0xf26341b3                          // vorr          d20, d19, d19
  .long  0xf26351b3                          // vorr          d21, d19, d19
  .long  0xeddf9b1f                          // vldr          d25, [pc, #124]
  .long  0xf2404c30                          // vfma.f32      d20, d0, d16
  .long  0xeddf2b1b                          // vldr          d18, [pc, #108]
  .long  0xf2415c30                          // vfma.f32      d21, d1, d16
  .long  0xeddfcb1d                          // vldr          d28, [pc, #116]
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3426d12                          // vmul.f32      d22, d2, d2
  .long  0xf3417d11                          // vmul.f32      d23, d1, d1
  .long  0xf3620e80                          // vcgt.f32      d16, d18, d0
  .long  0xf3621e81                          // vcgt.f32      d17, d18, d1
  .long  0xf341ad39                          // vmul.f32      d26, d1, d25
  .long  0xf342bd39                          // vmul.f32      d27, d2, d25
  .long  0xf3622e82                          // vcgt.f32      d18, d18, d2
  .long  0xf3409d39                          // vmul.f32      d25, d0, d25
  .long  0xf26cd1bc                          // vorr          d29, d28, d28
  .long  0xf248dcb4                          // vfma.f32      d29, d24, d20
  .long  0xf26c41bc                          // vorr          d20, d28, d28
  .long  0xf2474cb5                          // vfma.f32      d20, d23, d21
  .long  0xf246ccb3                          // vfma.f32      d28, d22, d19
  .long  0xf35901bd                          // vbsl          d16, d25, d29
  .long  0xf35a11b4                          // vbsl          d17, d26, d20
  .long  0xf35b21bc                          // vbsl          d18, d27, d28
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff1c                          // bx            ip
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3e99999a                          // .word         0x3e99999a
  .long  0x3f328f5c                          // .word         0x3f328f5c
  .long  0x3f328f5c                          // .word         0x3f328f5c
  .long  0x3d6147ae                          // .word         0x3d6147ae
  .long  0x3d6147ae                          // .word         0x3d6147ae
  .long  0x3d9e8391                          // .word         0x3d9e8391
  .long  0x3d9e8391                          // .word         0x3d9e8391
  .long  0x3b23d70a                          // .word         0x3b23d70a
  .long  0x3b23d70a                          // .word         0x3b23d70a

HIDDEN _sk_to_srgb_vfp4
.globl _sk_to_srgb_vfp4
FUNCTION(_sk_to_srgb_vfp4)
_sk_to_srgb_vfp4:
  .long  0xf3fb0580                          // vrsqrte.f32   d16, d0
  .long  0xeddf9b3b                          // vldr          d25, [pc, #236]
  .long  0xf3fb1581                          // vrsqrte.f32   d17, d1
  .long  0xeddf7b37                          // vldr          d23, [pc, #220]
  .long  0xf3fb2582                          // vrsqrte.f32   d18, d2
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf269a1b9                          // vorr          d26, d25, d25
  .long  0xf269c1b9                          // vorr          d28, d25, d25
  .long  0xf3403db0                          // vmul.f32      d19, d16, d16
  .long  0xf3414db1                          // vmul.f32      d20, d17, d17
  .long  0xf3425db2                          // vmul.f32      d21, d18, d18
  .long  0xf2603f33                          // vrsqrts.f32   d19, d0, d19
  .long  0xf2614f34                          // vrsqrts.f32   d20, d1, d20
  .long  0xf2625f35                          // vrsqrts.f32   d21, d2, d21
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xeddf3b29                          // vldr          d19, [pc, #164]
  .long  0xf3411db4                          // vmul.f32      d17, d17, d20
  .long  0xf3422db5                          // vmul.f32      d18, d18, d21
  .long  0xf2404da3                          // vadd.f32      d20, d16, d19
  .long  0xf2415da3                          // vadd.f32      d21, d17, d19
  .long  0xf2423da3                          // vadd.f32      d19, d18, d19
  .long  0xf240acb7                          // vfma.f32      d26, d16, d23
  .long  0xf3fb6524                          // vrecpe.f32    d22, d20
  .long  0xf3fb8525                          // vrecpe.f32    d24, d21
  .long  0xf3fbb523                          // vrecpe.f32    d27, d19
  .long  0xf241ccb7                          // vfma.f32      d28, d17, d23
  .long  0xf2429cb7                          // vfma.f32      d25, d18, d23
  .long  0xeddf7b23                          // vldr          d23, [pc, #140]
  .long  0xf2455fb8                          // vrecps.f32    d21, d21, d24
  .long  0xf2444fb6                          // vrecps.f32    d20, d20, d22
  .long  0xf2433fbb                          // vrecps.f32    d19, d19, d27
  .long  0xf267d1b7                          // vorr          d29, d23, d23
  .long  0xf240dcba                          // vfma.f32      d29, d16, d26
  .long  0xf267a1b7                          // vorr          d26, d23, d23
  .long  0xf241acbc                          // vfma.f32      d26, d17, d28
  .long  0xf2427cb9                          // vfma.f32      d23, d18, d25
  .long  0xeddf2b1e                          // vldr          d18, [pc, #120]
  .long  0xf3620e80                          // vcgt.f32      d16, d18, d0
  .long  0xf3485db5                          // vmul.f32      d21, d24, d21
  .long  0xeddf8b19                          // vldr          d24, [pc, #100]
  .long  0xf3464db4                          // vmul.f32      d20, d22, d20
  .long  0xf34b3db3                          // vmul.f32      d19, d27, d19
  .long  0xf3621e81                          // vcgt.f32      d17, d18, d1
  .long  0xf3406d38                          // vmul.f32      d22, d0, d24
  .long  0xf3419d38                          // vmul.f32      d25, d1, d24
  .long  0xf3622e82                          // vcgt.f32      d18, d18, d2
  .long  0xf3428d38                          // vmul.f32      d24, d2, d24
  .long  0xf34d4db4                          // vmul.f32      d20, d29, d20
  .long  0xf34a5db5                          // vmul.f32      d21, d26, d21
  .long  0xf3473db3                          // vmul.f32      d19, d23, d19
  .long  0xf35601b4                          // vbsl          d16, d22, d20
  .long  0xf35911b5                          // vbsl          d17, d25, d21
  .long  0xf35821b3                          // vbsl          d18, d24, d19
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22221b2                          // vorr          d2, d18, d18
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3e10c64c                          // .word         0x3e10c64c
  .long  0x3e10c64c                          // .word         0x3e10c64c
  .long  0xbb20d739                          // .word         0xbb20d739
  .long  0xbb20d739                          // .word         0xbb20d739
  .long  0x3c629fba                          // .word         0x3c629fba
  .long  0x3c629fba                          // .word         0x3c629fba
  .long  0x3f90a3d7                          // .word         0x3f90a3d7
  .long  0x3f90a3d7                          // .word         0x3f90a3d7
  .long  0x414eb852                          // .word         0x414eb852
  .long  0x414eb852                          // .word         0x414eb852
  .long  0x3b98b1a8                          // .word         0x3b98b1a8
  .long  0x3b98b1a8                          // .word         0x3b98b1a8

HIDDEN _sk_rgb_to_hsl_vfp4
.globl _sk_rgb_to_hsl_vfp4
FUNCTION(_sk_rgb_to_hsl_vfp4)
_sk_rgb_to_hsl_vfp4:
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xf2401f01                          // vmax.f32      d17, d0, d1
  .long  0xeddf9b2c                          // vldr          d25, [pc, #176]
  .long  0xf2600f01                          // vmin.f32      d16, d0, d1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xeeb78a00                          // vmov.f32      s16, #112
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xf2411f82                          // vmax.f32      d17, d17, d2
  .long  0xf2602f82                          // vmin.f32      d18, d16, d2
  .long  0xf2c45610                          // vmov.i32      d21, #1073741824
  .long  0xf2607d01                          // vsub.f32      d23, d0, d1
  .long  0xf2656da1                          // vsub.f32      d22, d21, d17
  .long  0xf221ada2                          // vsub.f32      d10, d17, d18
  .long  0xf2413da2                          // vadd.f32      d19, d17, d18
  .long  0xf2c08010                          // vmov.i32      d24, #0
  .long  0xf2666da2                          // vsub.f32      d22, d22, d18
  .long  0xf241ae80                          // vceq.f32      d26, d17, d0
  .long  0xeec8ba2a                          // vdiv.f32      s23, s16, s21
  .long  0xf3430db4                          // vmul.f32      d16, d19, d20
  .long  0xee88ba0a                          // vdiv.f32      s22, s16, s20
  .long  0xf3209ea4                          // vcgt.f32      d9, d16, d20
  .long  0xf2614d02                          // vsub.f32      d20, d1, d2
  .long  0xf3477d9b                          // vmul.f32      d23, d23, d11
  .long  0xf31691b3                          // vbsl          d9, d22, d19
  .long  0xf2623d00                          // vsub.f32      d19, d2, d0
  .long  0xf3626e01                          // vcgt.f32      d22, d2, d1
  .long  0xeeca8aa9                          // vdiv.f32      s17, s21, s19
  .long  0xee8a8a09                          // vdiv.f32      s16, s20, s18
  .long  0xf3433d9b                          // vmul.f32      d19, d19, d11
  .long  0xf3444d9b                          // vmul.f32      d20, d20, d11
  .long  0xf35961b8                          // vbsl          d22, d25, d24
  .long  0xf2419e81                          // vceq.f32      d25, d17, d1
  .long  0xf2011ea2                          // vceq.f32      d1, d17, d18
  .long  0xf2433da5                          // vadd.f32      d19, d19, d21
  .long  0xf2c15f10                          // vmov.f32      d21, #4
  .long  0xf2464da4                          // vadd.f32      d20, d22, d20
  .long  0xf2471da5                          // vadd.f32      d17, d23, d21
  .long  0xf35391b1                          // vbsl          d25, d19, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf2612111                          // vorr          d18, d1, d1
  .long  0xf354a1b9                          // vbsl          d26, d20, d25
  .long  0xf35821ba                          // vbsl          d18, d24, d26
  .long  0xf3181198                          // vbsl          d1, d24, d8
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x40c00000                          // .word         0x40c00000
  .long  0x40c00000                          // .word         0x40c00000
  .long  0x3e2aaaab                          // .word         0x3e2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab

HIDDEN _sk_hsl_to_rgb_vfp4
.globl _sk_hsl_to_rgb_vfp4
FUNCTION(_sk_hsl_to_rgb_vfp4)
_sk_hsl_to_rgb_vfp4:
  .long  0xed2d8b02                          // vpush         {d8}
  .long  0xeddf0b51                          // vldr          d16, [pc, #324]
  .long  0xf3fb2700                          // vcvt.s32.f32  d18, d0
  .long  0xeddf1b51                          // vldr          d17, [pc, #324]
  .long  0xf2400d20                          // vadd.f32      d16, d0, d16
  .long  0xf2401d21                          // vadd.f32      d17, d0, d17
  .long  0xeddfab50                          // vldr          d26, [pc, #320]
  .long  0xf3416d12                          // vmul.f32      d22, d1, d2
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3720                          // vcvt.s32.f32  d19, d16
  .long  0xf3fb4721                          // vcvt.s32.f32  d20, d17
  .long  0xf2c3761f                          // vmov.i32      d23, #1056964608
  .long  0xf3625e80                          // vcgt.f32      d21, d18, d0
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf2c08010                          // vmov.i32      d24, #0
  .long  0xf35a51b8                          // vbsl          d21, d26, d24
  .long  0xf3639ea0                          // vcgt.f32      d25, d19, d16
  .long  0xf364bea1                          // vcgt.f32      d27, d20, d17
  .long  0xf342ce27                          // vcge.f32      d28, d2, d23
  .long  0xf261dd26                          // vsub.f32      d29, d1, d22
  .long  0xf35a91b8                          // vbsl          d25, d26, d24
  .long  0xf35ab1b8                          // vbsl          d27, d26, d24
  .long  0xf2622da5                          // vsub.f32      d18, d18, d21
  .long  0xf2633da9                          // vsub.f32      d19, d19, d25
  .long  0xf2644dab                          // vsub.f32      d20, d20, d27
  .long  0xf35dc1b6                          // vbsl          d28, d29, d22
  .long  0xeddfdb3c                          // vldr          d29, [pc, #240]
  .long  0xf2602d22                          // vsub.f32      d18, d0, d18
  .long  0xf2600da3                          // vsub.f32      d16, d16, d19
  .long  0xf2c15f18                          // vmov.f32      d21, #6
  .long  0xf2426d02                          // vadd.f32      d22, d2, d2
  .long  0xf24c8d82                          // vadd.f32      d24, d28, d2
  .long  0xf2611da4                          // vsub.f32      d17, d17, d20
  .long  0xf3423db5                          // vmul.f32      d19, d18, d21
  .long  0xf3409db5                          // vmul.f32      d25, d16, d21
  .long  0xf2664da8                          // vsub.f32      d20, d22, d24
  .long  0xf3415db5                          // vmul.f32      d21, d17, d21
  .long  0xf2c16f10                          // vmov.f32      d22, #4
  .long  0xf342eead                          // vcge.f32      d30, d18, d29
  .long  0xf266ada3                          // vsub.f32      d26, d22, d19
  .long  0xf268bda4                          // vsub.f32      d27, d24, d20
  .long  0xf266cda9                          // vsub.f32      d28, d22, d25
  .long  0xf2666da5                          // vsub.f32      d22, d22, d21
  .long  0xf340fead                          // vcge.f32      d31, d16, d29
  .long  0xf34badba                          // vmul.f32      d26, d27, d26
  .long  0xf341dead                          // vcge.f32      d29, d17, d29
  .long  0xf34bcdbc                          // vmul.f32      d28, d27, d28
  .long  0xf34b6db6                          // vmul.f32      d22, d27, d22
  .long  0xf244adaa                          // vadd.f32      d26, d20, d26
  .long  0xf3020ea7                          // vcge.f32      d0, d18, d23
  .long  0xf3008ea7                          // vcge.f32      d8, d16, d23
  .long  0xf354e1ba                          // vbsl          d30, d20, d26
  .long  0xeddfab24                          // vldr          d26, [pc, #144]
  .long  0xf244cdac                          // vadd.f32      d28, d20, d28
  .long  0xf2446da6                          // vadd.f32      d22, d20, d22
  .long  0xf34b3db3                          // vmul.f32      d19, d27, d19
  .long  0xf34b9db9                          // vmul.f32      d25, d27, d25
  .long  0xf3417ea7                          // vcge.f32      d23, d17, d23
  .long  0xf354d1b6                          // vbsl          d29, d20, d22
  .long  0xf354f1bc                          // vbsl          d31, d20, d28
  .long  0xf3406eaa                          // vcge.f32      d22, d16, d26
  .long  0xf3422eaa                          // vcge.f32      d18, d18, d26
  .long  0xf34b5db5                          // vmul.f32      d21, d27, d21
  .long  0xf3411eaa                          // vcge.f32      d17, d17, d26
  .long  0xf31e01b8                          // vbsl          d0, d30, d24
  .long  0xf31f81b8                          // vbsl          d8, d31, d24
  .long  0xf2440da3                          // vadd.f32      d16, d20, d19
  .long  0xf2443da9                          // vadd.f32      d19, d20, d25
  .long  0xf3502130                          // vbsl          d18, d0, d16
  .long  0xf3f90501                          // vceq.f32      d16, d1, #0
  .long  0xf35d71b8                          // vbsl          d23, d29, d24
  .long  0xf3586133                          // vbsl          d22, d8, d19
  .long  0xf22011b0                          // vorr          d1, d16, d16
  .long  0xf2444da5                          // vadd.f32      d20, d20, d21
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf3520136                          // vbsl          d16, d2, d22
  .long  0xf35711b4                          // vbsl          d17, d23, d20
  .long  0xf3121132                          // vbsl          d1, d2, d18
  .long  0xf3120131                          // vbsl          d0, d2, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xecbd8b02                          // vpop          {d8}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0x3eaaaaab                          // .word         0x3eaaaaab
  .long  0x3eaaaaab                          // .word         0x3eaaaaab
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f2aaaab                          // .word         0x3f2aaaab
  .long  0x3f2aaaab                          // .word         0x3f2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab
  .long  0x3e2aaaab                          // .word         0x3e2aaaab

HIDDEN _sk_scale_1_float_vfp4
.globl _sk_scale_1_float_vfp4
FUNCTION(_sk_scale_1_float_vfp4)
_sk_scale_1_float_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee0c9f                          // vld1.32       {d16[]}, [lr :32]
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_scale_u8_vfp4
.globl _sk_scale_u8_vfp4
FUNCTION(_sk_scale_u8_vfp4)
_sk_scale_u8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe24dd008                          // sub           sp, sp, #8
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de020                          // ldr           lr, [sp, #32]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a000014                          // beq           1a20 <sk_scale_u8_vfp4+0x78>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b4                          // strh          ip, [sp, #4]
  .long  0xe28dc004                          // add           ip, sp, #4
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3908a30                          // vmovl.u16     q4, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b10                          // vldr          d17, [pc, #64]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2480130                          // vand          d16, d8, d16
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3000d90                          // vmul.f32      d0, d16, d0
  .long  0xf3001d91                          // vmul.f32      d1, d16, d1
  .long  0xf3002d92                          // vmul.f32      d2, d16, d2
  .long  0xf3003d93                          // vmul.f32      d3, d16, d3
  .long  0xe28dd008                          // add           sp, sp, #8
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf8a03                          // vldr          s17, [pc, #12]
  .long  0xee08ca10                          // vmov          s16, ip
  .long  0xeaffffec                          // b             19e4 <sk_scale_u8_vfp4+0x3c>
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000

HIDDEN _sk_lerp_1_float_vfp4
.globl _sk_lerp_1_float_vfp4
FUNCTION(_sk_lerp_1_float_vfp4)
_sk_lerp_1_float_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2600d04                          // vsub.f32      d16, d0, d4
  .long  0xf2611d05                          // vsub.f32      d17, d1, d5
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2622d06                          // vsub.f32      d18, d2, d6
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2633d07                          // vsub.f32      d19, d3, d7
  .long  0xf4ee4c9f                          // vld1.32       {d20[]}, [lr :32]
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xf2273117                          // vorr          d3, d7, d7
  .long  0xf2000cb4                          // vfma.f32      d0, d16, d20
  .long  0xf2011cb4                          // vfma.f32      d1, d17, d20
  .long  0xf2022cb4                          // vfma.f32      d2, d18, d20
  .long  0xf2033cb4                          // vfma.f32      d3, d19, d20
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_lerp_u8_vfp4
.globl _sk_lerp_u8_vfp4
FUNCTION(_sk_lerp_u8_vfp4)
_sk_lerp_u8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe24dd008                          // sub           sp, sp, #8
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de020                          // ldr           lr, [sp, #32]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a00001e                          // beq           1b28 <sk_lerp_u8_vfp4+0xa0>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b4                          // strh          ip, [sp, #4]
  .long  0xe28dc004                          // add           ip, sp, #4
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3908a30                          // vmovl.u16     q4, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b1a                          // vldr          d17, [pc, #104]
  .long  0xf2602d04                          // vsub.f32      d18, d0, d4
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xf2480130                          // vand          d16, d8, d16
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xf2623d06                          // vsub.f32      d19, d2, d6
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xf2634d07                          // vsub.f32      d20, d3, d7
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf2611d05                          // vsub.f32      d17, d1, d5
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xf2273117                          // vorr          d3, d7, d7
  .long  0xf2020cb0                          // vfma.f32      d0, d18, d16
  .long  0xf2011cb0                          // vfma.f32      d1, d17, d16
  .long  0xf2032cb0                          // vfma.f32      d2, d19, d16
  .long  0xf2043cb0                          // vfma.f32      d3, d20, d16
  .long  0xe28dd008                          // add           sp, sp, #8
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf8a03                          // vldr          s17, [pc, #12]
  .long  0xee08ca10                          // vmov          s16, ip
  .long  0xeaffffe2                          // b             1ac4 <sk_lerp_u8_vfp4+0x3c>
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_lerp_565_vfp4
.globl _sk_lerp_565_vfp4
FUNCTION(_sk_lerp_565_vfp4)
_sk_lerp_565_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b04                          // vpush         {d8-d9}
  .long  0xe24dd008                          // sub           sp, sp, #8
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de020                          // ldr           lr, [sp, #32]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0x0a00002e                          // beq           1c28 <sk_lerp_565_vfp4+0xe0>
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe58dc004                          // str           ip, [sp, #4]
  .long  0xe28dc004                          // add           ip, sp, #4
  .long  0xf4ec083f                          // vld1.32       {d16[0]}, [ip :32]
  .long  0xf3908a30                          // vmovl.u16     q4, d16
  .long  0xf2c1001f                          // vmov.i32      d16, #31
  .long  0xe3a0ce7e                          // mov           ip, #2016
  .long  0xee82cb90                          // vdup.32       d18, ip
  .long  0xf3c71218                          // vmov.i32      d17, #63488
  .long  0xf2480130                          // vand          d16, d8, d16
  .long  0xeddf3b27                          // vldr          d19, [pc, #156]
  .long  0xf2482132                          // vand          d18, d8, d18
  .long  0xeddf4b27                          // vldr          d20, [pc, #156]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xf2481131                          // vand          d17, d8, d17
  .long  0xf2635d07                          // vsub.f32      d21, d3, d7
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xeddf3b1e                          // vldr          d19, [pc, #120]
  .long  0xf3422db4                          // vmul.f32      d18, d18, d20
  .long  0xf2674117                          // vorr          d20, d7, d7
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xf2673117                          // vorr          d19, d7, d7
  .long  0xf2453cb0                          // vfma.f32      d19, d21, d16
  .long  0xf2454cb2                          // vfma.f32      d20, d21, d18
  .long  0xf2679117                          // vorr          d25, d7, d7
  .long  0xf2628d06                          // vsub.f32      d24, d2, d6
  .long  0xf2459cb1                          // vfma.f32      d25, d21, d17
  .long  0xf2262116                          // vorr          d2, d6, d6
  .long  0xf2606d04                          // vsub.f32      d22, d0, d4
  .long  0xf2617d05                          // vsub.f32      d23, d1, d5
  .long  0xf2082cb0                          // vfma.f32      d2, d24, d16
  .long  0xf2440fa3                          // vmax.f32      d16, d20, d19
  .long  0xf2240114                          // vorr          d0, d4, d4
  .long  0xf2251115                          // vorr          d1, d5, d5
  .long  0xf2060cb1                          // vfma.f32      d0, d22, d17
  .long  0xf2071cb2                          // vfma.f32      d1, d23, d18
  .long  0xf2093fa0                          // vmax.f32      d3, d25, d16
  .long  0xe28dd008                          // add           sp, sp, #8
  .long  0xecbd8b04                          // vpop          {d8-d9}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xeddf8a07                          // vldr          s17, [pc, #28]
  .long  0xee08ca10                          // vmov          s16, ip
  .long  0xeaffffd1                          // b             1b80 <sk_lerp_565_vfp4+0x38>
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_tables_vfp4
.globl _sk_load_tables_vfp4
FUNCTION(_sk_load_tables_vfp4)
_sk_load_tables_vfp4:
  .long  0xe92d47f0                          // push          {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59d4020                          // ldr           r4, [sp, #32]
  .long  0xe59ce000                          // ldr           lr, [ip]
  .long  0xe3540001                          // cmp           r4, #1
  .long  0xe08ee102                          // add           lr, lr, r2, lsl #2
  .long  0x0a000023                          // beq           1d04 <sk_load_tables_vfp4+0xac>
  .long  0xed9e0b00                          // vldr          d0, [lr]
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe59c7004                          // ldr           r7, [ip, #4]
  .long  0xf3f01010                          // vshr.u32      d17, d0, #16
  .long  0xe59c6008                          // ldr           r6, [ip, #8]
  .long  0xf3f82010                          // vshr.u32      d18, d0, #8
  .long  0xe59c400c                          // ldr           r4, [ip, #12]
  .long  0xf24111b0                          // vand          d17, d17, d16
  .long  0xf24221b0                          // vand          d18, d18, d16
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xee319b90                          // vmov.32       r9, d17[1]
  .long  0xee32eb90                          // vmov.32       lr, d18[1]
  .long  0xee305b90                          // vmov.32       r5, d16[1]
  .long  0xee108b90                          // vmov.32       r8, d16[0]
  .long  0xf3e80010                          // vshr.u32      d16, d0, #24
  .long  0xee12cb90                          // vmov.32       ip, d18[0]
  .long  0xee11ab90                          // vmov.32       sl, d17[0]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xeddf1b13                          // vldr          d17, [pc, #76]
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe0849109                          // add           r9, r4, r9, lsl #2
  .long  0xe086e10e                          // add           lr, r6, lr, lsl #2
  .long  0xe0875105                          // add           r5, r7, r5, lsl #2
  .long  0xedd92a00                          // vldr          s5, [r9]
  .long  0xedde1a00                          // vldr          s3, [lr]
  .long  0xedd50a00                          // vldr          s1, [r5]
  .long  0xe0875108                          // add           r5, r7, r8, lsl #2
  .long  0xe086710c                          // add           r7, r6, ip, lsl #2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xed950a00                          // vldr          s0, [r5]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed971a00                          // vldr          s2, [r7]
  .long  0xe084710a                          // add           r7, r4, sl, lsl #2
  .long  0xed972a00                          // vldr          s4, [r7]
  .long  0xe8bd47f0                          // pop           {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xeddf0a03                          // vldr          s1, [pc, #12]
  .long  0xed9e0a00                          // vldr          s0, [lr]
  .long  0xeaffffd9                          // b             1c78 <sk_load_tables_vfp4+0x20>
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_load_tables_u16_be_vfp4
.globl _sk_load_tables_u16_be_vfp4
FUNCTION(_sk_load_tables_u16_be_vfp4)
_sk_load_tables_u16_be_vfp4:
  .long  0xe92d47f0                          // push          {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59d4020                          // ldr           r4, [sp, #32]
  .long  0xe59ce000                          // ldr           lr, [ip]
  .long  0xe3540000                          // cmp           r4, #0
  .long  0xe08ee182                          // add           lr, lr, r2, lsl #3
  .long  0xf4ee070f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [lr]
  .long  0x1a000001                          // bne           1d48 <sk_load_tables_u16_be_vfp4+0x28>
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e4074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [r4]
  .long  0xee924bb0                          // vmov.u16      r4, d18[0]
  .long  0xf3c7701f                          // vmov.i32      d23, #255
  .long  0xee905bb0                          // vmov.u16      r5, d16[0]
  .long  0xee91ebb0                          // vmov.u16      lr, d17[0]
  .long  0xee926bf0                          // vmov.u16      r6, d18[1]
  .long  0xee908bf0                          // vmov.u16      r8, d16[1]
  .long  0xee917bf0                          // vmov.u16      r7, d17[1]
  .long  0xee044b90                          // vmov.32       d20[0], r4
  .long  0xe59c400c                          // ldr           r4, [ip, #12]
  .long  0xee065b90                          // vmov.32       d22[0], r5
  .long  0xee05eb90                          // vmov.32       d21[0], lr
  .long  0xee246b90                          // vmov.32       d20[1], r6
  .long  0xee936bb0                          // vmov.u16      r6, d19[0]
  .long  0xee268b90                          // vmov.32       d22[1], r8
  .long  0xee257b90                          // vmov.32       d21[1], r7
  .long  0xee937bf0                          // vmov.u16      r7, d19[1]
  .long  0xf24621b7                          // vand          d18, d22, d23
  .long  0xf24401b7                          // vand          d16, d20, d23
  .long  0xf24511b7                          // vand          d17, d21, d23
  .long  0xee32eb90                          // vmov.32       lr, d18[1]
  .long  0xee305b90                          // vmov.32       r5, d16[1]
  .long  0xee319b90                          // vmov.32       r9, d17[1]
  .long  0xee128b90                          // vmov.32       r8, d18[0]
  .long  0xf3c72c1f                          // vmov.i32      d18, #65535
  .long  0xee036b90                          // vmov.32       d19[0], r6
  .long  0xe59c6008                          // ldr           r6, [ip, #8]
  .long  0xee237b90                          // vmov.32       d19[1], r7
  .long  0xe59c7004                          // ldr           r7, [ip, #4]
  .long  0xee11cb90                          // vmov.32       ip, d17[0]
  .long  0xf24311b2                          // vand          d17, d19, d18
  .long  0xe084a105                          // add           sl, r4, r5, lsl #2
  .long  0xe087510e                          // add           r5, r7, lr, lsl #2
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xf2e80533                          // vshl.s32      d16, d19, #8
  .long  0xf3f81031                          // vshr.u32      d17, d17, #8
  .long  0xe0869109                          // add           r9, r6, r9, lsl #2
  .long  0xedd50a00                          // vldr          s1, [r5]
  .long  0xe0875108                          // add           r5, r7, r8, lsl #2
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xedd91a00                          // vldr          s3, [r9]
  .long  0xeddf1b0c                          // vldr          d17, [pc, #48]
  .long  0xf24001b2                          // vand          d16, d16, d18
  .long  0xedda2a00                          // vldr          s5, [sl]
  .long  0xed950a00                          // vldr          s0, [r5]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe086710c                          // add           r7, r6, ip, lsl #2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed971a00                          // vldr          s2, [r7]
  .long  0xe084710e                          // add           r7, r4, lr, lsl #2
  .long  0xed972a00                          // vldr          s4, [r7]
  .long  0xe8bd47f0                          // pop           {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_load_tables_rgb_u16_be_vfp4
.globl _sk_load_tables_rgb_u16_be_vfp4
FUNCTION(_sk_load_tables_rgb_u16_be_vfp4)
_sk_load_tables_rgb_u16_be_vfp4:
  .long  0xe92d47f0                          // push          {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe0824082                          // add           r4, r2, r2, lsl #1
  .long  0xe59ce000                          // ldr           lr, [ip]
  .long  0xe08ee084                          // add           lr, lr, r4, lsl #1
  .long  0xe59d4020                          // ldr           r4, [sp, #32]
  .long  0xf4ee060f                          // vld3.16       {d16[0],d17[0],d18[0]}, [lr]
  .long  0xe3540000                          // cmp           r4, #0
  .long  0x1a000001                          // bne           1e54 <sk_load_tables_rgb_u16_be_vfp4+0x2c>
  .long  0xe28e4006                          // add           r4, lr, #6
  .long  0xf4e4064f                          // vld3.16       {d16[1],d17[1],d18[1]}, [r4]
  .long  0xee924bb0                          // vmov.u16      r4, d18[0]
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xee905bb0                          // vmov.u16      r5, d16[0]
  .long  0xee908bf0                          // vmov.u16      r8, d16[1]
  .long  0xf3c7301f                          // vmov.i32      d19, #255
  .long  0xee926bf0                          // vmov.u16      r6, d18[1]
  .long  0xee91ebb0                          // vmov.u16      lr, d17[0]
  .long  0xee917bf0                          // vmov.u16      r7, d17[1]
  .long  0xee004b90                          // vmov.32       d16[0], r4
  .long  0xee025b90                          // vmov.32       d18[0], r5
  .long  0xee206b90                          // vmov.32       d16[1], r6
  .long  0xe99c0070                          // ldmib         ip, {r4, r5, r6}
  .long  0xee228b90                          // vmov.32       d18[1], r8
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xee01eb90                          // vmov.32       d17[0], lr
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xee217b90                          // vmov.32       d17[1], r7
  .long  0xee307b90                          // vmov.32       r7, d16[1]
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xee328b90                          // vmov.32       r8, d18[1]
  .long  0xee12eb90                          // vmov.32       lr, d18[0]
  .long  0xee319b90                          // vmov.32       r9, d17[1]
  .long  0xee11cb90                          // vmov.32       ip, d17[0]
  .long  0xe086a107                          // add           sl, r6, r7, lsl #2
  .long  0xe0847108                          // add           r7, r4, r8, lsl #2
  .long  0xee108b90                          // vmov.32       r8, d16[0]
  .long  0xedda2a00                          // vldr          s5, [sl]
  .long  0xe0859109                          // add           r9, r5, r9, lsl #2
  .long  0xedd70a00                          // vldr          s1, [r7]
  .long  0xe084710e                          // add           r7, r4, lr, lsl #2
  .long  0xedd91a00                          // vldr          s3, [r9]
  .long  0xed970a00                          // vldr          s0, [r7]
  .long  0xe085710c                          // add           r7, r5, ip, lsl #2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed971a00                          // vldr          s2, [r7]
  .long  0xe0867108                          // add           r7, r6, r8, lsl #2
  .long  0xed972a00                          // vldr          s4, [r7]
  .long  0xe8bd47f0                          // pop           {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_byte_tables_vfp4
.globl _sk_byte_tables_vfp4
FUNCTION(_sk_byte_tables_vfp4)
_sk_byte_tables_vfp4:
  .long  0xe92d47f0                          // push          {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xeddf0b37                          // vldr          d16, [pc, #220]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xe8911020                          // ldm           r1, {r5, ip}
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xe89504c0                          // ldm           r5, {r6, r7, sl}
  .long  0xf2404c30                          // vfma.f32      d20, d0, d16
  .long  0xe595900c                          // ldr           r9, [r5, #12]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb37a3                          // vcvt.u32.f32  d19, d19
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf3fb47a4                          // vcvt.u32.f32  d20, d20
  .long  0xee138b90                          // vmov.32       r8, d19[0]
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee12eb90                          // vmov.32       lr, d18[0]
  .long  0xee144b90                          // vmov.32       r4, d20[0]
  .long  0xe7d75008                          // ldrb          r5, [r7, r8]
  .long  0xe7dae00e                          // ldrb          lr, [sl, lr]
  .long  0xee055b90                          // vmov.32       d21[0], r5
  .long  0xe7d64004                          // ldrb          r4, [r6, r4]
  .long  0xee345b90                          // vmov.32       r5, d20[1]
  .long  0xee04eb90                          // vmov.32       d20[0], lr
  .long  0xee014b90                          // vmov.32       d17[0], r4
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xe7d6e005                          // ldrb          lr, [r6, r5]
  .long  0xee335b90                          // vmov.32       r5, d19[1]
  .long  0xee326b90                          // vmov.32       r6, d18[1]
  .long  0xf3c7201f                          // vmov.i32      d18, #255
  .long  0xee21eb90                          // vmov.32       d17[1], lr
  .long  0xe7d94004                          // ldrb          r4, [r9, r4]
  .long  0xf24111b2                          // vand          d17, d17, d18
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xe7d75005                          // ldrb          r5, [r7, r5]
  .long  0xee307b90                          // vmov.32       r7, d16[1]
  .long  0xee004b90                          // vmov.32       d16[0], r4
  .long  0xee255b90                          // vmov.32       d21[1], r5
  .long  0xe7da5006                          // ldrb          r5, [sl, r6]
  .long  0xf24531b2                          // vand          d19, d21, d18
  .long  0xee245b90                          // vmov.32       d20[1], r5
  .long  0xf24441b2                          // vand          d20, d20, d18
  .long  0xf3fb46a4                          // vcvt.f32.u32  d20, d20
  .long  0xe7d94007                          // ldrb          r4, [r9, r7]
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24001b2                          // vand          d16, d16, d18
  .long  0xf3fb26a3                          // vcvt.f32.u32  d18, d19
  .long  0xeddf3b08                          // vldr          d19, [pc, #32]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3010db3                          // vmul.f32      d0, d17, d19
  .long  0xf3042db3                          // vmul.f32      d2, d20, d19
  .long  0xf3021db3                          // vmul.f32      d1, d18, d19
  .long  0xf3003db3                          // vmul.f32      d3, d16, d19
  .long  0xe8bd47f0                          // pop           {r4, r5, r6, r7, r8, r9, sl, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_byte_tables_rgb_vfp4
.globl _sk_byte_tables_rgb_vfp4
FUNCTION(_sk_byte_tables_rgb_vfp4)
_sk_byte_tables_rgb_vfp4:
  .long  0xe92d4bf0                          // push          {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf3c7301f                          // vmov.i32      d19, #255
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe89e0210                          // ldm           lr, {r4, r9}
  .long  0xe59e600c                          // ldr           r6, [lr, #12]
  .long  0xe59e8008                          // ldr           r8, [lr, #8]
  .long  0xe2466001                          // sub           r6, r6, #1
  .long  0xee806b90                          // vdup.32       d16, r6
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2402c30                          // vfma.f32      d18, d0, d16
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xee126b90                          // vmov.32       r6, d18[0]
  .long  0xee327b90                          // vmov.32       r7, d18[1]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xee105b90                          // vmov.32       r5, d16[0]
  .long  0xe7d46006                          // ldrb          r6, [r4, r6]
  .long  0xe7d4e007                          // ldrb          lr, [r4, r7]
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xee026b90                          // vmov.32       d18[0], r6
  .long  0xee116b90                          // vmov.32       r6, d17[0]
  .long  0xee307b90                          // vmov.32       r7, d16[1]
  .long  0xee22eb90                          // vmov.32       d18[1], lr
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xf3fb26a2                          // vcvt.f32.u32  d18, d18
  .long  0xe7d85005                          // ldrb          r5, [r8, r5]
  .long  0xee015b90                          // vmov.32       d17[0], r5
  .long  0xe7d94004                          // ldrb          r4, [r9, r4]
  .long  0xe7d96006                          // ldrb          r6, [r9, r6]
  .long  0xe7d85007                          // ldrb          r5, [r8, r7]
  .long  0xee006b90                          // vmov.32       d16[0], r6
  .long  0xee215b90                          // vmov.32       d17[1], r5
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xeddf3b06                          // vldr          d19, [pc, #24]
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3020db3                          // vmul.f32      d0, d18, d19
  .long  0xf3012db3                          // vmul.f32      d2, d17, d19
  .long  0xf3001db3                          // vmul.f32      d1, d16, d19
  .long  0xe8bd4bf0                          // pop           {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_table_r_vfp4
.globl _sk_table_r_vfp4
FUNCTION(_sk_table_r_vfp4)
_sk_table_r_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xe59e5000                          // ldr           r5, [lr]
  .long  0xe2444001                          // sub           r4, r4, #1
  .long  0xee804b90                          // vdup.32       d16, r4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe0854104                          // add           r4, r5, r4, lsl #2
  .long  0xe085510e                          // add           r5, r5, lr, lsl #2
  .long  0xedd40a00                          // vldr          s1, [r4]
  .long  0xed950a00                          // vldr          s0, [r5]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_g_vfp4
.globl _sk_table_g_vfp4
FUNCTION(_sk_table_g_vfp4)
_sk_table_g_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xe59e5000                          // ldr           r5, [lr]
  .long  0xe2444001                          // sub           r4, r4, #1
  .long  0xee804b90                          // vdup.32       d16, r4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe0854104                          // add           r4, r5, r4, lsl #2
  .long  0xe085510e                          // add           r5, r5, lr, lsl #2
  .long  0xedd41a00                          // vldr          s3, [r4]
  .long  0xed951a00                          // vldr          s2, [r5]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_b_vfp4
.globl _sk_table_b_vfp4
FUNCTION(_sk_table_b_vfp4)
_sk_table_b_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xe59e5000                          // ldr           r5, [lr]
  .long  0xe2444001                          // sub           r4, r4, #1
  .long  0xee804b90                          // vdup.32       d16, r4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2421c30                          // vfma.f32      d17, d2, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe0854104                          // add           r4, r5, r4, lsl #2
  .long  0xe085510e                          // add           r5, r5, lr, lsl #2
  .long  0xedd42a00                          // vldr          s5, [r4]
  .long  0xed952a00                          // vldr          s4, [r5]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_table_a_vfp4
.globl _sk_table_a_vfp4
FUNCTION(_sk_table_a_vfp4)
_sk_table_a_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xe59e5000                          // ldr           r5, [lr]
  .long  0xe2444001                          // sub           r4, r4, #1
  .long  0xee804b90                          // vdup.32       d16, r4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe0854104                          // add           r4, r5, r4, lsl #2
  .long  0xe085510e                          // add           r5, r5, lr, lsl #2
  .long  0xedd43a00                          // vldr          s7, [r4]
  .long  0xed953a00                          // vldr          s6, [r5]
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_parametric_r_vfp4
.globl _sk_parametric_r_vfp4
FUNCTION(_sk_parametric_r_vfp4)
_sk_parametric_r_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf2412c90                          // vfma.f32      d18, d17, d0
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2401c90                          // vfma.f32      d17, d16, d0
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf3400e80                          // vcge.f32      d16, d16, d0
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_g_vfp4
.globl _sk_parametric_g_vfp4
FUNCTION(_sk_parametric_g_vfp4)
_sk_parametric_g_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf2412c91                          // vfma.f32      d18, d17, d1
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2401c91                          // vfma.f32      d17, d16, d1
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf3400e81                          // vcge.f32      d16, d16, d1
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2201fa1                          // vmin.f32      d1, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_b_vfp4
.globl _sk_parametric_b_vfp4
FUNCTION(_sk_parametric_b_vfp4)
_sk_parametric_b_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf2412c92                          // vfma.f32      d18, d17, d2
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2401c92                          // vfma.f32      d17, d16, d2
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf3400e82                          // vcge.f32      d16, d16, d2
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2202fa1                          // vmin.f32      d2, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_parametric_a_vfp4
.globl _sk_parametric_a_vfp4
FUNCTION(_sk_parametric_a_vfp4)
_sk_parametric_a_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xeddf3b41                          // vldr          d19, [pc, #260]
  .long  0xed9f8a4e                          // vldr          s16, [pc, #312]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xeddf4b42                          // vldr          d20, [pc, #264]
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf2412c93                          // vfma.f32      d18, d17, d3
  .long  0xf2c71d1f                          // vmov.i32      d17, #8388607
  .long  0xf24211b1                          // vand          d17, d18, d17
  .long  0xf2c3171f                          // vorr.i32      d17, #1056964608
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf2019da3                          // vadd.f32      d9, d17, d19
  .long  0xf2c33614                          // vmov.i32      d19, #872415232
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b30                          // vldr          d19, [pc, #192]
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xed9f8a39                          // vldr          s16, [pc, #228]
  .long  0xf2422da4                          // vadd.f32      d18, d18, d20
  .long  0xeddf4b2e                          // vldr          d20, [pc, #184]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf2611d8a                          // vsub.f32      d17, d17, d10
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf3fb1720                          // vcvt.s32.f32  d17, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3612ea0                          // vcgt.f32      d18, d17, d16
  .long  0xf35421b3                          // vbsl          d18, d20, d19
  .long  0xeddf4b2b                          // vldr          d20, [pc, #172]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xeddf2b25                          // vldr          d18, [pc, #148]
  .long  0xf2601da1                          // vsub.f32      d17, d16, d17
  .long  0xf2400da4                          // vadd.f32      d16, d16, d20
  .long  0xf2229da1                          // vsub.f32      d9, d18, d17
  .long  0xeddf2b23                          // vldr          d18, [pc, #140]
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xeec8aa29                          // vdiv.f32      s21, s16, s19
  .long  0xee88aa09                          // vdiv.f32      s20, s16, s18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2c4161b                          // vmov.i32      d17, #1258291200
  .long  0xf2400d8a                          // vadd.f32      d16, d16, d10
  .long  0xf2402cb1                          // vfma.f32      d18, d16, d17
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2401c93                          // vfma.f32      d17, d16, d3
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf3400e83                          // vcge.f32      d16, d16, d3
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2442da2                          // vadd.f32      d18, d20, d18
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400fa3                          // vmax.f32      d16, d16, d19
  .long  0xf2203fa1                          // vmin.f32      d3, d16, d17
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3eb444f9                          // .word         0x3eb444f9
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0x3fbfbf75                          // .word         0x3fbfbf75
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0xc2f87377                          // .word         0xc2f87377
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x409af5f8                          // .word         0x409af5f8
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x3fbebc8d                          // .word         0x3fbebc8d
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x42f28c51                          // .word         0x42f28c51
  .long  0x3fdce9a3                          // .word         0x3fdce9a3
  .long  0x41ddd2fe                          // .word         0x41ddd2fe

HIDDEN _sk_lab_to_xyz_vfp4
.globl _sk_lab_to_xyz_vfp4
FUNCTION(_sk_lab_to_xyz_vfp4)
_sk_lab_to_xyz_vfp4:
  .long  0xeddf1b2e                          // vldr          d17, [pc, #184]
  .long  0xf3c43613                          // vmov.i32      d19, #-1023410176
  .long  0xeddf0b2a                          // vldr          d16, [pc, #168]
  .long  0xf2c34f10                          // vmov.f32      d20, #16
  .long  0xf3401d31                          // vmul.f32      d17, d0, d17
  .long  0xeddf5b2f                          // vldr          d21, [pc, #188]
  .long  0xf3412d30                          // vmul.f32      d18, d1, d16
  .long  0xeddf6b2f                          // vldr          d22, [pc, #188]
  .long  0xf3420d30                          // vmul.f32      d16, d2, d16
  .long  0xeddf7b2f                          // vldr          d23, [pc, #188]
  .long  0xeddf8b30                          // vldr          d24, [pc, #192]
  .long  0xf2411da4                          // vadd.f32      d17, d17, d20
  .long  0xeddf4b24                          // vldr          d20, [pc, #144]
  .long  0xf2422da3                          // vadd.f32      d18, d18, d19
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2400da3                          // vadd.f32      d16, d16, d19
  .long  0xeddf3b22                          // vldr          d19, [pc, #136]
  .long  0xf3411db3                          // vmul.f32      d17, d17, d19
  .long  0xf3422db4                          // vmul.f32      d18, d18, d20
  .long  0xf3400db5                          // vmul.f32      d16, d16, d21
  .long  0xf2412da2                          // vadd.f32      d18, d17, d18
  .long  0xf2610da0                          // vsub.f32      d16, d17, d16
  .long  0xf3415db1                          // vmul.f32      d21, d17, d17
  .long  0xf3423db2                          // vmul.f32      d19, d18, d18
  .long  0xf3404db0                          // vmul.f32      d20, d16, d16
  .long  0xf3415db5                          // vmul.f32      d21, d17, d21
  .long  0xf2411da6                          // vadd.f32      d17, d17, d22
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf3404db4                          // vmul.f32      d20, d16, d20
  .long  0xf2400da6                          // vadd.f32      d16, d16, d22
  .long  0xf2422da6                          // vadd.f32      d18, d18, d22
  .long  0xeddf6b1d                          // vldr          d22, [pc, #116]
  .long  0xf3639ea7                          // vcgt.f32      d25, d19, d23
  .long  0xf364aea7                          // vcgt.f32      d26, d20, d23
  .long  0xf3400db8                          // vmul.f32      d16, d16, d24
  .long  0xf3422db8                          // vmul.f32      d18, d18, d24
  .long  0xf35391b2                          // vbsl          d25, d19, d18
  .long  0xeddf2b19                          // vldr          d18, [pc, #100]
  .long  0xf354a1b0                          // vbsl          d26, d20, d16
  .long  0xf3251ea7                          // vcgt.f32      d1, d21, d23
  .long  0xf3090db6                          // vmul.f32      d0, d25, d22
  .long  0xf30a2db2                          // vmul.f32      d2, d26, d18
  .long  0xf3410db8                          // vmul.f32      d16, d17, d24
  .long  0xf31511b0                          // vbsl          d1, d21, d16
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x42c80000                          // .word         0x42c80000
  .long  0x42c80000                          // .word         0x42c80000
  .long  0x3b03126f                          // .word         0x3b03126f
  .long  0x3b03126f                          // .word         0x3b03126f
  .long  0x3c0d3dcb                          // .word         0x3c0d3dcb
  .long  0x3c0d3dcb                          // .word         0x3c0d3dcb
  .long  0x3ba3d70a                          // .word         0x3ba3d70a
  .long  0x3ba3d70a                          // .word         0x3ba3d70a
  .long  0xbe0d3dcb                          // .word         0xbe0d3dcb
  .long  0xbe0d3dcb                          // .word         0xbe0d3dcb
  .long  0x3c1118c2                          // .word         0x3c1118c2
  .long  0x3c1118c2                          // .word         0x3c1118c2
  .long  0x3e038050                          // .word         0x3e038050
  .long  0x3e038050                          // .word         0x3e038050
  .long  0x3f76d71f                          // .word         0x3f76d71f
  .long  0x3f76d71f                          // .word         0x3f76d71f
  .long  0x3f5340f6                          // .word         0x3f5340f6
  .long  0x3f5340f6                          // .word         0x3f5340f6

HIDDEN _sk_load_a8_vfp4
.globl _sk_load_a8_vfp4
FUNCTION(_sk_load_a8_vfp4)
_sk_load_a8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a000012                          // beq           28d4 <sk_load_a8_vfp4+0x6c>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b0                          // strh          ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3900a30                          // vmovl.u16     q0, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b0f                          // vldr          d17, [pc, #60]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf0a04                          // vldr          s1, [pc, #16]
  .long  0xee00ca10                          // vmov          s0, ip
  .long  0xeaffffee                          // b             28a0 <sk_load_a8_vfp4+0x38>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_a8_vfp4
.globl _sk_gather_a8_vfp4
FUNCTION(_sk_gather_a8_vfp4)
_sk_gather_a8_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee315b90                          // vmov.32       r5, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7d4e00e                          // ldrb          lr, [r4, lr]
  .long  0xe7d44005                          // ldrb          r4, [r4, r5]
  .long  0xee00eb90                          // vmov.32       d16[0], lr
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b04                          // vldr          d17, [pc, #16]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_store_a8_vfp4
.globl _sk_store_a8_vfp4
FUNCTION(_sk_store_a8_vfp4)
_sk_store_a8_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xeddf0b13                          // vldr          d16, [pc, #76]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0xf3fb07a1                          // vcvt.u32.f32  d16, d17
  .long  0x0a000007                          // beq           29b4 <sk_store_a8_vfp4+0x4c>
  .long  0xee30eb90                          // vmov.32       lr, d16[1]
  .long  0xee104b90                          // vmov.32       r4, d16[0]
  .long  0xe5cce001                          // strb          lr, [ip, #1]
  .long  0xe5cc4000                          // strb          r4, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe5cce000                          // strb          lr, [ip]
  .long  0xeafffff8                          // b             29a4 <sk_store_a8_vfp4+0x3c>
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000

HIDDEN _sk_load_g8_vfp4
.globl _sk_load_g8_vfp4
FUNCTION(_sk_load_g8_vfp4)
_sk_load_g8_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc002                          // add           ip, ip, r2
  .long  0x0a000012                          // beq           2a34 <sk_load_g8_vfp4+0x6c>
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xe1cdc0b0                          // strh          ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec041f                          // vld1.16       {d16[0]}, [ip :16]
  .long  0xf3c80a30                          // vmovl.u8      q8, d16
  .long  0xf3900a30                          // vmovl.u16     q0, d16
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xeddf1b0f                          // vldr          d17, [pc, #60]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3000db1                          // vmul.f32      d0, d16, d17
  .long  0xf2201110                          // vorr          d1, d0, d0
  .long  0xf2202110                          // vorr          d2, d0, d0
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe5dcc000                          // ldrb          ip, [ip]
  .long  0xeddf0a04                          // vldr          s1, [pc, #16]
  .long  0xee00ca10                          // vmov          s0, ip
  .long  0xeaffffee                          // b             2a00 <sk_load_g8_vfp4+0x38>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_g8_vfp4
.globl _sk_gather_g8_vfp4
FUNCTION(_sk_gather_g8_vfp4)
_sk_gather_g8_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee315b90                          // vmov.32       r5, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7d4e00e                          // ldrb          lr, [r4, lr]
  .long  0xe7d44005                          // ldrb          r4, [r4, r5]
  .long  0xee00eb90                          // vmov.32       d16[0], lr
  .long  0xee204b90                          // vmov.32       d16[1], r4
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b06                          // vldr          d17, [pc, #24]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3000db1                          // vmul.f32      d0, d16, d17
  .long  0xf2201110                          // vorr          d1, d0, d0
  .long  0xf2202110                          // vorr          d2, d0, d0
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_gather_i8_vfp4
.globl _sk_gather_i8_vfp4
FUNCTION(_sk_gather_i8_vfp4)
_sk_gather_i8_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe1a0c001                          // mov           ip, r1
  .long  0xe491e004                          // ldr           lr, [r1], #4
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0x028c1008                          // addeq         r1, ip, #8
  .long  0x059c4004                          // ldreq         r4, [ip, #4]
  .long  0xe494c008                          // ldr           ip, [r4], #8
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee114b90                          // vmov.32       r4, d17[0]
  .long  0xee315b90                          // vmov.32       r5, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe7dc4004                          // ldrb          r4, [ip, r4]
  .long  0xe7dc5005                          // ldrb          r5, [ip, r5]
  .long  0xee004b90                          // vmov.32       d16[0], r4
  .long  0xe59e4004                          // ldr           r4, [lr, #4]
  .long  0xee205b90                          // vmov.32       d16[1], r5
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xee105b90                          // vmov.32       r5, d16[0]
  .long  0xee30cb90                          // vmov.32       ip, d16[1]
  .long  0xe0845105                          // add           r5, r4, r5, lsl #2
  .long  0xf4e5083f                          // vld1.32       {d16[0]}, [r5 :32]
  .long  0xe084510c                          // add           r5, r4, ip, lsl #2
  .long  0xf4e508bf                          // vld1.32       {d16[1]}, [r5 :32]
  .long  0xf24021b1                          // vand          d18, d16, d17
  .long  0xf3f83030                          // vshr.u32      d19, d16, #8
  .long  0xf3e84030                          // vshr.u32      d20, d16, #24
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3f00030                          // vshr.u32      d16, d16, #16
  .long  0xf24331b1                          // vand          d19, d19, d17
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf3043db1                          // vmul.f32      d3, d20, d17
  .long  0xf3031db1                          // vmul.f32      d1, d19, d17
  .long  0xf3002db1                          // vmul.f32      d2, d16, d17
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_load_565_vfp4
.globl _sk_load_565_vfp4
FUNCTION(_sk_load_565_vfp4)
_sk_load_565_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0x0a00001a                          // beq           2c14 <sk_load_565_vfp4+0x8c>
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe58dc000                          // str           ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec083f                          // vld1.32       {d16[0]}, [ip :32]
  .long  0xf3900a30                          // vmovl.u16     q0, d16
  .long  0xf3c70218                          // vmov.i32      d16, #63488
  .long  0xe3a0ce7e                          // mov           ip, #2016
  .long  0xf2c1101f                          // vmov.i32      d17, #31
  .long  0xee82cb90                          // vdup.32       d18, ip
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xeddf3b14                          // vldr          d19, [pc, #80]
  .long  0xf2402132                          // vand          d18, d0, d18
  .long  0xeddf4b14                          // vldr          d20, [pc, #80]
  .long  0xf2401131                          // vand          d17, d0, d17
  .long  0xeddf5b14                          // vldr          d21, [pc, #80]
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xf3000db3                          // vmul.f32      d0, d16, d19
  .long  0xf3021db4                          // vmul.f32      d1, d18, d20
  .long  0xf3012db5                          // vmul.f32      d2, d17, d21
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xeddf0a08                          // vldr          s1, [pc, #32]
  .long  0xee00ca10                          // vmov          s0, ip
  .long  0xeaffffe5                          // b             2bbc <sk_load_565_vfp4+0x34>
  .long  0xe320f000                          // nop           {0}
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_565_vfp4
.globl _sk_gather_565_vfp4
FUNCTION(_sk_gather_565_vfp4)
_sk_gather_565_vfp4:
  .long  0xe92d4070                          // push          {r4, r5, r6, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xeddf4b20                          // vldr          d20, [pc, #128]
  .long  0xeddf5b21                          // vldr          d21, [pc, #132]
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xf2c1201f                          // vmov.i32      d18, #31
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee316b90                          // vmov.32       r6, d17[1]
  .long  0xf3c71218                          // vmov.i32      d17, #63488
  .long  0xe084508e                          // add           r5, r4, lr, lsl #1
  .long  0xe0846086                          // add           r6, r4, r6, lsl #1
  .long  0xe1d550b0                          // ldrh          r5, [r5]
  .long  0xe1d660b0                          // ldrh          r6, [r6]
  .long  0xee005b90                          // vmov.32       d16[0], r5
  .long  0xee206b90                          // vmov.32       d16[1], r6
  .long  0xe3a06e7e                          // mov           r6, #2016
  .long  0xee836b90                          // vdup.32       d19, r6
  .long  0xf24011b1                          // vand          d17, d16, d17
  .long  0xf24031b3                          // vand          d19, d16, d19
  .long  0xf24001b2                          // vand          d16, d16, d18
  .long  0xf3fb2623                          // vcvt.f32.s32  d18, d19
  .long  0xeddf3b06                          // vldr          d19, [pc, #24]
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3021db4                          // vmul.f32      d1, d18, d20
  .long  0xf3010db3                          // vmul.f32      d0, d17, d19
  .long  0xf3002db5                          // vmul.f32      d2, d16, d21
  .long  0xe8bd4070                          // pop           {r4, r5, r6, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x37842108                          // .word         0x37842108
  .long  0x37842108                          // .word         0x37842108
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3a020821                          // .word         0x3a020821
  .long  0x3d042108                          // .word         0x3d042108
  .long  0x3d042108                          // .word         0x3d042108

HIDDEN _sk_store_565_vfp4
.globl _sk_store_565_vfp4
FUNCTION(_sk_store_565_vfp4)
_sk_store_565_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c30f1f                          // vmov.f32      d16, #31
  .long  0xeddf1b1c                          // vldr          d17, [pc, #112]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2413c31                          // vfma.f32      d19, d1, d17
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xf2422c30                          // vfma.f32      d18, d2, d16
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0xf3fb07a3                          // vcvt.u32.f32  d16, d19
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf3fb27a2                          // vcvt.u32.f32  d18, d18
  .long  0xf2e50530                          // vshl.s32      d16, d16, #5
  .long  0xf2eb1531                          // vshl.s32      d17, d17, #11
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0x0a000005                          // beq           2d60 <sk_store_565_vfp4+0x70>
  .long  0xf3f60121                          // vuzp.16       d16, d17
  .long  0xf4cc080f                          // vst1.32       {d16[0]}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe1cce0b0                          // strh          lr, [ip]
  .long  0xeafffff8                          // b             2d50 <sk_store_565_vfp4+0x60>
  .long  0xe320f000                          // nop           {0}
  .long  0x427c0000                          // .word         0x427c0000
  .long  0x427c0000                          // .word         0x427c0000

HIDDEN _sk_load_4444_vfp4
.globl _sk_load_4444_vfp4
FUNCTION(_sk_load_4444_vfp4)
_sk_load_4444_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de00c                          // ldr           lr, [sp, #12]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0x0a00001d                          // beq           2e10 <sk_load_4444_vfp4+0x98>
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe58dc000                          // str           ip, [sp]
  .long  0xe1a0c00d                          // mov           ip, sp
  .long  0xf4ec083f                          // vld1.32       {d16[0]}, [ip :32]
  .long  0xf3900a30                          // vmovl.u16     q0, d16
  .long  0xf3c70210                          // vmov.i32      d16, #61440
  .long  0xeddf4b1a                          // vldr          d20, [pc, #104]
  .long  0xf2c0121f                          // vmov.i32      d17, #3840
  .long  0xeddf5b1a                          // vldr          d21, [pc, #104]
  .long  0xf3c72010                          // vmov.i32      d18, #240
  .long  0xeddf6b1a                          // vldr          d22, [pc, #104]
  .long  0xf2400130                          // vand          d16, d0, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2c0301f                          // vmov.i32      d19, #15
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf2401131                          // vand          d17, d0, d17
  .long  0xf2402132                          // vand          d18, d0, d18
  .long  0xf2403133                          // vand          d19, d0, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3000db4                          // vmul.f32      d0, d16, d20
  .long  0xeddf0b0f                          // vldr          d16, [pc, #60]
  .long  0xf3011db5                          // vmul.f32      d1, d17, d21
  .long  0xf3022db6                          // vmul.f32      d2, d18, d22
  .long  0xf3033db0                          // vmul.f32      d3, d19, d16
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe1dcc0b0                          // ldrh          ip, [ip]
  .long  0xeddf0a09                          // vldr          s1, [pc, #36]
  .long  0xee00ca10                          // vmov          s0, ip
  .long  0xeaffffe2                          // b             2dac <sk_load_4444_vfp4+0x34>
  .long  0x37888889                          // .word         0x37888889
  .long  0x37888889                          // .word         0x37888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_4444_vfp4
.globl _sk_gather_4444_vfp4
FUNCTION(_sk_gather_4444_vfp4)
_sk_gather_4444_vfp4:
  .long  0xe92d4070                          // push          {r4, r5, r6, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xeddf5b24                          // vldr          d21, [pc, #144]
  .long  0xf3c73010                          // vmov.i32      d19, #240
  .long  0xeddf6b24                          // vldr          d22, [pc, #144]
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xf2c0401f                          // vmov.i32      d20, #15
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xf2c0221f                          // vmov.i32      d18, #3840
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee316b90                          // vmov.32       r6, d17[1]
  .long  0xf3c71210                          // vmov.i32      d17, #61440
  .long  0xe084508e                          // add           r5, r4, lr, lsl #1
  .long  0xe0846086                          // add           r6, r4, r6, lsl #1
  .long  0xe1d550b0                          // ldrh          r5, [r5]
  .long  0xe1d660b0                          // ldrh          r6, [r6]
  .long  0xee005b90                          // vmov.32       d16[0], r5
  .long  0xee206b90                          // vmov.32       d16[1], r6
  .long  0xf24011b1                          // vand          d17, d16, d17
  .long  0xf24021b2                          // vand          d18, d16, d18
  .long  0xf24031b3                          // vand          d19, d16, d19
  .long  0xf24001b4                          // vand          d16, d16, d20
  .long  0xeddf4b0b                          // vldr          d20, [pc, #44]
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3010db4                          // vmul.f32      d0, d17, d20
  .long  0xeddf1b0b                          // vldr          d17, [pc, #44]
  .long  0xf3021db5                          // vmul.f32      d1, d18, d21
  .long  0xf3032db6                          // vmul.f32      d2, d19, d22
  .long  0xf3003db1                          // vmul.f32      d3, d16, d17
  .long  0xe8bd4070                          // pop           {r4, r5, r6, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x37888889                          // .word         0x37888889
  .long  0x37888889                          // .word         0x37888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x39888889                          // .word         0x39888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3b888889                          // .word         0x3b888889
  .long  0x3d888889                          // .word         0x3d888889
  .long  0x3d888889                          // .word         0x3d888889

HIDDEN _sk_store_4444_vfp4
.globl _sk_store_4444_vfp4
FUNCTION(_sk_store_4444_vfp4)
_sk_store_4444_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c20f1e                          // vmov.f32      d16, #15
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf2402c30                          // vfma.f32      d18, d0, d16
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xe08cc082                          // add           ip, ip, r2, lsl #1
  .long  0xf2424c30                          // vfma.f32      d20, d2, d16
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3fb37a4                          // vcvt.u32.f32  d19, d20
  .long  0xf2ec0530                          // vshl.s32      d16, d16, #12
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf2e43533                          // vshl.s32      d19, d19, #4
  .long  0xf26201b0                          // vorr          d16, d18, d16
  .long  0xf26001b3                          // vorr          d16, d16, d19
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0x0a000005                          // beq           2f88 <sk_store_4444_vfp4+0x80>
  .long  0xf3f60121                          // vuzp.16       d16, d17
  .long  0xf4cc080f                          // vst1.32       {d16[0]}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe1cce0b0                          // strh          lr, [ip]
  .long  0xeafffff8                          // b             2f78 <sk_store_4444_vfp4+0x70>
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_load_8888_vfp4
.globl _sk_load_8888_vfp4
FUNCTION(_sk_load_8888_vfp4)
_sk_load_8888_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xe08cc102                          // add           ip, ip, r2, lsl #2
  .long  0x0a000014                          // beq           3008 <sk_load_8888_vfp4+0x70>
  .long  0xed9c0b00                          // vldr          d0, [ip]
  .long  0xf3c7001f                          // vmov.i32      d16, #255
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf3f81010                          // vshr.u32      d17, d0, #8
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3f03010                          // vshr.u32      d19, d0, #16
  .long  0xf3e82010                          // vshr.u32      d18, d0, #24
  .long  0xf24111b0                          // vand          d17, d17, d16
  .long  0xf2404130                          // vand          d20, d0, d16
  .long  0xf24301b0                          // vand          d16, d19, d16
  .long  0xf3fb3624                          // vcvt.f32.s32  d19, d20
  .long  0xeddf4b0c                          // vldr          d20, [pc, #48]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb1621                          // vcvt.f32.s32  d17, d17
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3030db4                          // vmul.f32      d0, d19, d20
  .long  0xf3023db4                          // vmul.f32      d3, d18, d20
  .long  0xf3011db4                          // vmul.f32      d1, d17, d20
  .long  0xf3002db4                          // vmul.f32      d2, d16, d20
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xeddf0a04                          // vldr          s1, [pc, #16]
  .long  0xed9c0a00                          // vldr          s0, [ip]
  .long  0xeaffffe8                          // b             2fb8 <sk_load_8888_vfp4+0x20>
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x00000000                          // .word         0x00000000
  .long  0xe320f000                          // .word         0xe320f000

HIDDEN _sk_gather_8888_vfp4
.globl _sk_gather_8888_vfp4
FUNCTION(_sk_gather_8888_vfp4)
_sk_gather_8888_vfp4:
  .long  0xe92d4070                          // push          {r4, r5, r6, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe49e4008                          // ldr           r4, [lr], #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee11eb90                          // vmov.32       lr, d17[0]
  .long  0xee316b90                          // vmov.32       r6, d17[1]
  .long  0xf3c7101f                          // vmov.i32      d17, #255
  .long  0xe084510e                          // add           r5, r4, lr, lsl #2
  .long  0xe0846106                          // add           r6, r4, r6, lsl #2
  .long  0xf4e5083f                          // vld1.32       {d16[0]}, [r5 :32]
  .long  0xf4e608bf                          // vld1.32       {d16[1]}, [r6 :32]
  .long  0xf24021b1                          // vand          d18, d16, d17
  .long  0xf3f83030                          // vshr.u32      d19, d16, #8
  .long  0xf3e84030                          // vshr.u32      d20, d16, #24
  .long  0xf3f00030                          // vshr.u32      d16, d16, #16
  .long  0xf24331b1                          // vand          d19, d19, d17
  .long  0xf24001b1                          // vand          d16, d16, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb4624                          // vcvt.f32.s32  d20, d20
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3020db1                          // vmul.f32      d0, d18, d17
  .long  0xf3043db1                          // vmul.f32      d3, d20, d17
  .long  0xf3031db1                          // vmul.f32      d1, d19, d17
  .long  0xf3002db1                          // vmul.f32      d2, d16, d17
  .long  0xe8bd4070                          // pop           {r4, r5, r6, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3b808081                          // .word         0x3b808081
  .long  0x3b808081                          // .word         0x3b808081

HIDDEN _sk_store_8888_vfp4
.globl _sk_store_8888_vfp4
FUNCTION(_sk_store_8888_vfp4)
_sk_store_8888_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xeddf0b1f                          // vldr          d16, [pc, #124]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2412c30                          // vfma.f32      d18, d1, d16
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xe35e0001                          // cmp           lr, #1
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xe08cc102                          // add           ip, ip, r2, lsl #2
  .long  0xf2434c30                          // vfma.f32      d20, d3, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf3fb37a4                          // vcvt.u32.f32  d19, d20
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xf2f02532                          // vshl.s32      d18, d18, #16
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0xf2f81533                          // vshl.s32      d17, d19, #24
  .long  0xf26001b2                          // vorr          d16, d16, d18
  .long  0xf26001b1                          // vorr          d16, d16, d17
  .long  0x0a000004                          // beq           3134 <sk_store_8888_vfp4+0x7c>
  .long  0xedcc0b00                          // vstr          d16, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xf4cc083f                          // vst1.32       {d16[0]}, [ip :32]
  .long  0xeafffff9                          // b             3124 <sk_store_8888_vfp4+0x6c>
  .long  0xe320f000                          // nop           {0}
  .long  0x437f0000                          // .word         0x437f0000
  .long  0x437f0000                          // .word         0x437f0000

HIDDEN _sk_load_f16_vfp4
.globl _sk_load_f16_vfp4
FUNCTION(_sk_load_f16_vfp4)
_sk_load_f16_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf4ec070f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [ip]
  .long  0x1a000001                          // bne           3170 <sk_load_f16_vfp4+0x28>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4ec074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [ip]
  .long  0xf3b60720                          // vcvt.f32.f16  q0, d16
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf3b62722                          // vcvt.f32.f16  q1, d18
  .long  0xf3f64721                          // vcvt.f32.f16  q10, d17
  .long  0xf3f60723                          // vcvt.f32.f16  q8, d19
  .long  0xf22411b4                          // vorr          d1, d20, d20
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_gather_f16_vfp4
.globl _sk_gather_f16_vfp4
FUNCTION(_sk_gather_f16_vfp4)
_sk_gather_f16_vfp4:
  .long  0xe92d4c10                          // push          {r4, sl, fp, lr}
  .long  0xe28db008                          // add           fp, sp, #8
  .long  0xe24dd020                          // sub           sp, sp, #32
  .long  0xe7c3d01f                          // bfc           sp, #0, #4
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf3fb0701                          // vcvt.s32.f32  d16, d1
  .long  0xf3fb1700                          // vcvt.s32.f32  d17, d0
  .long  0xe49ce008                          // ldr           lr, [ip], #8
  .long  0xf4ec2c9f                          // vld1.32       {d18[]}, [ip :32]
  .long  0xf26219a0                          // vmla.i32      d17, d18, d16
  .long  0xee314b90                          // vmov.32       r4, d17[1]
  .long  0xee11cb90                          // vmov.32       ip, d17[0]
  .long  0xe08e4184                          // add           r4, lr, r4, lsl #3
  .long  0xe08ec18c                          // add           ip, lr, ip, lsl #3
  .long  0xedd41b00                          // vldr          d17, [r4]
  .long  0xe28d4010                          // add           r4, sp, #16
  .long  0xeddc0b00                          // vldr          d16, [ip]
  .long  0xe59bc008                          // ldr           ip, [fp, #8]
  .long  0xf4440aef                          // vst1.64       {d16-d17}, [r4 :128]
  .long  0xf4e4071f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [r4 :64]
  .long  0xe3844008                          // orr           r4, r4, #8
  .long  0xf4e4075f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [r4 :64]
  .long  0xf3b60720                          // vcvt.f32.f16  q0, d16
  .long  0xf3b62722                          // vcvt.f32.f16  q1, d18
  .long  0xe5914004                          // ldr           r4, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe58dc000                          // str           ip, [sp]
  .long  0xf3f64721                          // vcvt.f32.f16  q10, d17
  .long  0xf3f60723                          // vcvt.f32.f16  q8, d19
  .long  0xf22411b4                          // vorr          d1, d20, d20
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xe12fff34                          // blx           r4
  .long  0xe24bd008                          // sub           sp, fp, #8
  .long  0xe8bd8c10                          // pop           {r4, sl, fp, pc}

HIDDEN _sk_store_f16_vfp4
.globl _sk_store_f16_vfp4
FUNCTION(_sk_store_f16_vfp4)
_sk_store_f16_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2630113                          // vorr          d16, d3, d3
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2612111                          // vorr          d18, d1, d1
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xf3f67620                          // vcvt.f16.f32  d23, q8
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xf3f66602                          // vcvt.f16.f32  d22, q1
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf3f65622                          // vcvt.f16.f32  d21, q9
  .long  0xf3f64600                          // vcvt.f16.f32  d20, q0
  .long  0xf4cc470f                          // vst4.16       {d20[0],d21[0],d22[0],d23[0]}, [ip]
  .long  0x1a000001                          // bne           3260 <sk_store_f16_vfp4+0x40>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4cc474f                          // vst4.16       {d20[1],d21[1],d22[1],d23[1]}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf22211b2                          // vorr          d1, d18, d18
  .long  0xf22031b0                          // vorr          d3, d16, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_load_u16_be_vfp4
.globl _sk_load_u16_be_vfp4
FUNCTION(_sk_load_u16_be_vfp4)
_sk_load_u16_be_vfp4:
  .long  0xe92d4bf0                          // push          {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de020                          // ldr           lr, [sp, #32]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf4ec070f                          // vld4.16       {d16[0],d17[0],d18[0],d19[0]}, [ip]
  .long  0x1a000001                          // bne           32a0 <sk_load_u16_be_vfp4+0x28>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4ec074f                          // vld4.16       {d16[1],d17[1],d18[1],d19[1]}, [ip]
  .long  0xee90cbb0                          // vmov.u16      ip, d16[0]
  .long  0xee937bb0                          // vmov.u16      r7, d19[0]
  .long  0xee92ebb0                          // vmov.u16      lr, d18[0]
  .long  0xee914bb0                          // vmov.u16      r4, d17[0]
  .long  0xee905bf0                          // vmov.u16      r5, d16[1]
  .long  0xee939bf0                          // vmov.u16      r9, d19[1]
  .long  0xf3c73c1f                          // vmov.i32      d19, #65535
  .long  0xee926bf0                          // vmov.u16      r6, d18[1]
  .long  0xee918bf0                          // vmov.u16      r8, d17[1]
  .long  0xee00cb90                          // vmov.32       d16[0], ip
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xee01eb90                          // vmov.32       d17[0], lr
  .long  0xee024b90                          // vmov.32       d18[0], r4
  .long  0xee047b90                          // vmov.32       d20[0], r7
  .long  0xee205b90                          // vmov.32       d16[1], r5
  .long  0xf24051b3                          // vand          d21, d16, d19
  .long  0xee216b90                          // vmov.32       d17[1], r6
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xee228b90                          // vmov.32       d18[1], r8
  .long  0xf24161b3                          // vand          d22, d17, d19
  .long  0xf3f85035                          // vshr.u32      d21, d21, #8
  .long  0xee249b90                          // vmov.32       d20[1], r9
  .long  0xf24271b3                          // vand          d23, d18, d19
  .long  0xf26001b5                          // vorr          d16, d16, d21
  .long  0xf24481b3                          // vand          d24, d20, d19
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3f87037                          // vshr.u32      d23, d23, #8
  .long  0xf2e81531                          // vshl.s32      d17, d17, #8
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf2e84534                          // vshl.s32      d20, d20, #8
  .long  0xf3f85038                          // vshr.u32      d21, d24, #8
  .long  0xf26221b7                          // vorr          d18, d18, d23
  .long  0xf26111b6                          // vorr          d17, d17, d22
  .long  0xf26441b5                          // vorr          d20, d20, d21
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xf24431b3                          // vand          d19, d20, d19
  .long  0xeddf4b09                          // vldr          d20, [pc, #36]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3fb26a2                          // vcvt.f32.u32  d18, d18
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3fb36a3                          // vcvt.f32.u32  d19, d19
  .long  0xf3000db4                          // vmul.f32      d0, d16, d20
  .long  0xf3021db4                          // vmul.f32      d1, d18, d20
  .long  0xf3012db4                          // vmul.f32      d2, d17, d20
  .long  0xf3033db4                          // vmul.f32      d3, d19, d20
  .long  0xe8bd4bf0                          // pop           {r4, r5, r6, r7, r8, r9, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_load_rgb_u16_be_vfp4
.globl _sk_load_rgb_u16_be_vfp4
FUNCTION(_sk_load_rgb_u16_be_vfp4)
_sk_load_rgb_u16_be_vfp4:
  .long  0xe92d48f0                          // push          {r4, r5, r6, r7, fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe082e082                          // add           lr, r2, r2, lsl #1
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe08cc08e                          // add           ip, ip, lr, lsl #1
  .long  0xe59de018                          // ldr           lr, [sp, #24]
  .long  0xf4ec060f                          // vld3.16       {d16[0],d17[0],d18[0]}, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0x1a000001                          // bne           339c <sk_load_rgb_u16_be_vfp4+0x2c>
  .long  0xe28cc006                          // add           ip, ip, #6
  .long  0xf4ec064f                          // vld3.16       {d16[1],d17[1],d18[1]}, [ip]
  .long  0xee90cbb0                          // vmov.u16      ip, d16[0]
  .long  0xf2873f10                          // vmov.f32      d3, #1
  .long  0xee91ebb0                          // vmov.u16      lr, d17[0]
  .long  0xee924bb0                          // vmov.u16      r4, d18[0]
  .long  0xee927bf0                          // vmov.u16      r7, d18[1]
  .long  0xf3c73c1f                          // vmov.i32      d19, #65535
  .long  0xee905bf0                          // vmov.u16      r5, d16[1]
  .long  0xee916bf0                          // vmov.u16      r6, d17[1]
  .long  0xee00cb90                          // vmov.32       d16[0], ip
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xee01eb90                          // vmov.32       d17[0], lr
  .long  0xee024b90                          // vmov.32       d18[0], r4
  .long  0xee205b90                          // vmov.32       d16[1], r5
  .long  0xee216b90                          // vmov.32       d17[1], r6
  .long  0xf24041b3                          // vand          d20, d16, d19
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xee227b90                          // vmov.32       d18[1], r7
  .long  0xf24151b3                          // vand          d21, d17, d19
  .long  0xf3f84034                          // vshr.u32      d20, d20, #8
  .long  0xf24261b3                          // vand          d22, d18, d19
  .long  0xf2e81531                          // vshl.s32      d17, d17, #8
  .long  0xf3f85035                          // vshr.u32      d21, d21, #8
  .long  0xf2e82532                          // vshl.s32      d18, d18, #8
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf26001b4                          // vorr          d16, d16, d20
  .long  0xf26111b5                          // vorr          d17, d17, d21
  .long  0xf26221b6                          // vorr          d18, d18, d22
  .long  0xf24001b3                          // vand          d16, d16, d19
  .long  0xf24111b3                          // vand          d17, d17, d19
  .long  0xf24221b3                          // vand          d18, d18, d19
  .long  0xeddf3b08                          // vldr          d19, [pc, #32]
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3fb16a1                          // vcvt.f32.u32  d17, d17
  .long  0xf3fb26a2                          // vcvt.f32.u32  d18, d18
  .long  0xf3000db3                          // vmul.f32      d0, d16, d19
  .long  0xf3011db3                          // vmul.f32      d1, d17, d19
  .long  0xf3022db3                          // vmul.f32      d2, d18, d19
  .long  0xe8bd48f0                          // pop           {r4, r5, r6, r7, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x37800080                          // .word         0x37800080
  .long  0x37800080                          // .word         0x37800080

HIDDEN _sk_store_u16_be_vfp4
.globl _sk_store_u16_be_vfp4
FUNCTION(_sk_store_u16_be_vfp4)
_sk_store_u16_be_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xeddf0b2d                          // vldr          d16, [pc, #180]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2432c30                          // vfma.f32      d18, d3, d16
  .long  0xf2c3161f                          // vmov.i32      d17, #1056964608
  .long  0xf2c3461f                          // vmov.i32      d20, #1056964608
  .long  0xf2423c30                          // vfma.f32      d19, d2, d16
  .long  0xf2414c30                          // vfma.f32      d20, d1, d16
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf3fb07a2                          // vcvt.u32.f32  d16, d18
  .long  0xf3fb27a3                          // vcvt.u32.f32  d18, d19
  .long  0xf3c73c1f                          // vmov.i32      d19, #65535
  .long  0xf3fb47a4                          // vcvt.u32.f32  d20, d20
  .long  0xf3fb17a1                          // vcvt.u32.f32  d17, d17
  .long  0xf24051b3                          // vand          d21, d16, d19
  .long  0xf24261b3                          // vand          d22, d18, d19
  .long  0xf24471b3                          // vand          d23, d20, d19
  .long  0xf24131b3                          // vand          d19, d17, d19
  .long  0xf2e80530                          // vshl.s32      d16, d16, #8
  .long  0xf3f85035                          // vshr.u32      d21, d21, #8
  .long  0xf2e88532                          // vshl.s32      d24, d18, #8
  .long  0xf3f86036                          // vshr.u32      d22, d22, #8
  .long  0xf2e84534                          // vshl.s32      d20, d20, #8
  .long  0xf3f87037                          // vshr.u32      d23, d23, #8
  .long  0xf2e89531                          // vshl.s32      d25, d17, #8
  .long  0xf3f8a033                          // vshr.u32      d26, d19, #8
  .long  0xf26031b5                          // vorr          d19, d16, d21
  .long  0xf26821b6                          // vorr          d18, d24, d22
  .long  0xf26411b7                          // vorr          d17, d20, d23
  .long  0xf26901ba                          // vorr          d16, d25, d26
  .long  0xf3f63124                          // vuzp.16       d19, d20
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xf3f62124                          // vuzp.16       d18, d20
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe08cc182                          // add           ip, ip, r2, lsl #3
  .long  0xf3f61124                          // vuzp.16       d17, d20
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xf3f60124                          // vuzp.16       d16, d20
  .long  0xf4cc070f                          // vst4.16       {d16[0],d17[0],d18[0],d19[0]}, [ip]
  .long  0x1a000001                          // bne           34f8 <sk_store_u16_be_vfp4+0xb0>
  .long  0xe28cc008                          // add           ip, ip, #8
  .long  0xf4cc074f                          // vst4.16       {d16[1],d17[1],d18[1],d19[1]}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x477fff00                          // .word         0x477fff00
  .long  0x477fff00                          // .word         0x477fff00

HIDDEN _sk_load_f32_vfp4
.globl _sk_load_f32_vfp4
FUNCTION(_sk_load_f32_vfp4)
_sk_load_f32_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc202                          // add           ip, ip, r2, lsl #4
  .long  0x1a000004                          // bne           3540 <sk_load_f32_vfp4+0x30>
  .long  0xf42c008f                          // vld4.32       {d0-d3}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xf4ac0f8f                          // vld4.32       {d0[]-d3[]}, [ip]
  .long  0xeafffff9                          // b             3530 <sk_load_f32_vfp4+0x20>

HIDDEN _sk_store_f32_vfp4
.globl _sk_store_f32_vfp4
FUNCTION(_sk_store_f32_vfp4)
_sk_store_f32_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59de008                          // ldr           lr, [sp, #8]
  .long  0xe59cc000                          // ldr           ip, [ip]
  .long  0xe35e0000                          // cmp           lr, #0
  .long  0xe08cc202                          // add           ip, ip, r2, lsl #4
  .long  0x1a000004                          // bne           3578 <sk_store_f32_vfp4+0x30>
  .long  0xf40c008f                          // vst4.32       {d0-d3}, [ip]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xf48c0b0f                          // vst4.32       {d0[0],d1[0],d2[0],d3[0]}, [ip]
  .long  0xeafffff9                          // b             3568 <sk_store_f32_vfp4+0x20>

HIDDEN _sk_clamp_x_vfp4
.globl _sk_clamp_x_vfp4
FUNCTION(_sk_clamp_x_vfp4)
_sk_clamp_x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3c71e1f                          // vmov.i8       d17, #255
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2400f80                          // vmax.f32      d16, d16, d0
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26218a1                          // vadd.i32      d17, d18, d17
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_clamp_y_vfp4
.globl _sk_clamp_y_vfp4
FUNCTION(_sk_clamp_y_vfp4)
_sk_clamp_y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf3c71e1f                          // vmov.i8       d17, #255
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2400f81                          // vmax.f32      d16, d16, d1
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee2c9f                          // vld1.32       {d18[]}, [lr :32]
  .long  0xf26218a1                          // vadd.i32      d17, d18, d17
  .long  0xf2201fa1                          // vmin.f32      d1, d16, d17
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_repeat_x_vfp4
.globl _sk_repeat_x_vfp4
FUNCTION(_sk_repeat_x_vfp4)
_sk_repeat_x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xeddf4b11                          // vldr          d20, [pc, #68]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee0c9d                          // vld1.32       {d16[]}, [lr :32]!
  .long  0xf4ee1c9f                          // vld1.32       {d17[]}, [lr :32]
  .long  0xf3411d90                          // vmul.f32      d17, d17, d0
  .long  0xf3fb2721                          // vcvt.s32.f32  d18, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3621ea1                          // vcgt.f32      d17, d18, d17
  .long  0xf35411b3                          // vbsl          d17, d20, d19
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf3c72e1f                          // vmov.i8       d18, #255
  .long  0xf3401db1                          // vmul.f32      d17, d16, d17
  .long  0xf26008a2                          // vadd.i32      d16, d16, d18
  .long  0xf2601d21                          // vsub.f32      d17, d0, d17
  .long  0xf2210fa0                          // vmin.f32      d0, d17, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_repeat_y_vfp4
.globl _sk_repeat_y_vfp4
FUNCTION(_sk_repeat_y_vfp4)
_sk_repeat_y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c03010                          // vmov.i32      d19, #0
  .long  0xeddf4b11                          // vldr          d20, [pc, #68]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xf4ee0c9d                          // vld1.32       {d16[]}, [lr :32]!
  .long  0xf4ee1c9f                          // vld1.32       {d17[]}, [lr :32]
  .long  0xf3411d91                          // vmul.f32      d17, d17, d1
  .long  0xf3fb2721                          // vcvt.s32.f32  d18, d17
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3621ea1                          // vcgt.f32      d17, d18, d17
  .long  0xf35411b3                          // vbsl          d17, d20, d19
  .long  0xf2621da1                          // vsub.f32      d17, d18, d17
  .long  0xf3c72e1f                          // vmov.i8       d18, #255
  .long  0xf3401db1                          // vmul.f32      d17, d16, d17
  .long  0xf26008a2                          // vadd.i32      d16, d16, d18
  .long  0xf2611d21                          // vsub.f32      d17, d1, d17
  .long  0xf2211fa0                          // vmin.f32      d1, d17, d16
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_mirror_x_vfp4
.globl _sk_mirror_x_vfp4
FUNCTION(_sk_mirror_x_vfp4)
_sk_mirror_x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xeeb68a00                          // vmov.f32      s16, #96
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c04010                          // vmov.i32      d20, #0
  .long  0xeddf5b17                          // vldr          d21, [pc, #92]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed9e9a00                          // vldr          s18, [lr]
  .long  0xed9eaa01                          // vldr          s20, [lr, #4]
  .long  0xf3f40c09                          // vdup.32       d16, d9[0]
  .long  0xf2601d20                          // vsub.f32      d17, d0, d16
  .long  0xee2a0a08                          // vmul.f32      s0, s20, s16
  .long  0xf2e129c0                          // vmul.f32      d18, d17, d0[0]
  .long  0xee390a09                          // vadd.f32      s0, s18, s18
  .long  0xf3fb3722                          // vcvt.s32.f32  d19, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3632ea2                          // vcgt.f32      d18, d19, d18
  .long  0xf35521b4                          // vbsl          d18, d21, d20
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2e229c0                          // vmul.f32      d18, d18, d0[0]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf3c72e1f                          // vmov.i8       d18, #255
  .long  0xf2611da0                          // vsub.f32      d17, d17, d16
  .long  0xf26008a2                          // vadd.i32      d16, d16, d18
  .long  0xf3f91721                          // vabs.f32      d17, d17
  .long  0xf2210fa0                          // vmin.f32      d0, d17, d16
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_mirror_y_vfp4
.globl _sk_mirror_y_vfp4
FUNCTION(_sk_mirror_y_vfp4)
_sk_mirror_y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xeeb68a00                          // vmov.f32      s16, #96
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2c04010                          // vmov.i32      d20, #0
  .long  0xeddf5b17                          // vldr          d21, [pc, #92]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed9e9a00                          // vldr          s18, [lr]
  .long  0xed9eaa01                          // vldr          s20, [lr, #4]
  .long  0xf3f40c09                          // vdup.32       d16, d9[0]
  .long  0xf2611d20                          // vsub.f32      d17, d1, d16
  .long  0xee2a1a08                          // vmul.f32      s2, s20, s16
  .long  0xf2e129c1                          // vmul.f32      d18, d17, d1[0]
  .long  0xee391a09                          // vadd.f32      s2, s18, s18
  .long  0xf3fb3722                          // vcvt.s32.f32  d19, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3632ea2                          // vcgt.f32      d18, d19, d18
  .long  0xf35521b4                          // vbsl          d18, d21, d20
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2e229c1                          // vmul.f32      d18, d18, d1[0]
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf3c72e1f                          // vmov.i8       d18, #255
  .long  0xf2611da0                          // vsub.f32      d17, d17, d16
  .long  0xf26008a2                          // vadd.i32      d16, d16, d18
  .long  0xf3f91721                          // vabs.f32      d17, d17
  .long  0xf2211fa0                          // vmin.f32      d1, d17, d16
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_clamp_x_1_vfp4
.globl _sk_clamp_x_1_vfp4
FUNCTION(_sk_clamp_x_1_vfp4)
_sk_clamp_x_1_vfp4:
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2c71f10                          // vmov.f32      d17, #1
  .long  0xf2400f80                          // vmax.f32      d16, d16, d0
  .long  0xf2200fa1                          // vmin.f32      d0, d16, d17
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_repeat_x_1_vfp4
.globl _sk_repeat_x_1_vfp4
FUNCTION(_sk_repeat_x_1_vfp4)
_sk_repeat_x_1_vfp4:
  .long  0xf3fb0700                          // vcvt.s32.f32  d16, d0
  .long  0xeddf3b07                          // vldr          d19, [pc, #28]
  .long  0xf2c02010                          // vmov.i32      d18, #0
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3fb0620                          // vcvt.f32.s32  d16, d16
  .long  0xf3601e80                          // vcgt.f32      d17, d16, d0
  .long  0xf35311b2                          // vbsl          d17, d19, d18
  .long  0xf2600da1                          // vsub.f32      d16, d16, d17
  .long  0xf2200d20                          // vsub.f32      d0, d0, d16
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_mirror_x_1_vfp4
.globl _sk_mirror_x_1_vfp4
FUNCTION(_sk_mirror_x_1_vfp4)
_sk_mirror_x_1_vfp4:
  .long  0xf3c70f10                          // vmov.f32      d16, #-1
  .long  0xeddf5b0f                          // vldr          d21, [pc, #60]
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2401d20                          // vadd.f32      d17, d0, d16
  .long  0xf2c04010                          // vmov.i32      d20, #0
  .long  0xf3412db2                          // vmul.f32      d18, d17, d18
  .long  0xf3fb3722                          // vcvt.s32.f32  d19, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3632ea2                          // vcgt.f32      d18, d19, d18
  .long  0xf35521b4                          // vbsl          d18, d21, d20
  .long  0xf2632da2                          // vsub.f32      d18, d19, d18
  .long  0xf2422da2                          // vadd.f32      d18, d18, d18
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf3b90720                          // vabs.f32      d0, d16
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_luminance_to_alpha_vfp4
.globl _sk_luminance_to_alpha_vfp4
FUNCTION(_sk_luminance_to_alpha_vfp4)
_sk_luminance_to_alpha_vfp4:
  .long  0xeddf0b0a                          // vldr          d16, [pc, #40]
  .long  0xeddf1b0b                          // vldr          d17, [pc, #44]
  .long  0xf3410d30                          // vmul.f32      d16, d1, d16
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3401d31                          // vmul.f32      d17, d0, d17
  .long  0xf2800010                          // vmov.i32      d0, #0
  .long  0xf2801010                          // vmov.i32      d1, #0
  .long  0xf2013da0                          // vadd.f32      d3, d17, d16
  .long  0xeddf0b06                          // vldr          d16, [pc, #24]
  .long  0xf2023c30                          // vfma.f32      d3, d2, d16
  .long  0xf2802010                          // vmov.i32      d2, #0
  .long  0xe12fff1c                          // bx            ip
  .long  0x3f371759                          // .word         0x3f371759
  .long  0x3f371759                          // .word         0x3f371759
  .long  0x3e59b3d0                          // .word         0x3e59b3d0
  .long  0x3e59b3d0                          // .word         0x3e59b3d0
  .long  0x3d93dd98                          // .word         0x3d93dd98
  .long  0x3d93dd98                          // .word         0x3d93dd98

HIDDEN _sk_matrix_2x3_vfp4
.globl _sk_matrix_2x3_vfp4
FUNCTION(_sk_matrix_2x3_vfp4)
_sk_matrix_2x3_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf2410c31                          // vfma.f32      d16, d1, d17
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xf2411c32                          // vfma.f32      d17, d1, d18
  .long  0xf4ee2c9d                          // vld1.32       {d18[]}, [lr :32]!
  .long  0xf4ee3c9f                          // vld1.32       {d19[]}, [lr :32]
  .long  0xf2400c32                          // vfma.f32      d16, d0, d18
  .long  0xf2401c33                          // vfma.f32      d17, d0, d19
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_3x4_vfp4
.globl _sk_matrix_3x4_vfp4
FUNCTION(_sk_matrix_3x4_vfp4)
_sk_matrix_3x4_vfp4:
  .long  0xe92d4010                          // push          {r4, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e4020                          // add           r4, lr, #32
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xe28e402c                          // add           r4, lr, #44
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e401c                          // add           r4, lr, #28
  .long  0xf2420c33                          // vfma.f32      d16, d2, d19
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e4024                          // add           r4, lr, #36
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4028                          // add           r4, lr, #40
  .long  0xf2421c32                          // vfma.f32      d17, d2, d18
  .long  0xf4e42c9f                          // vld1.32       {d18[]}, [r4 :32]
  .long  0xe28e4010                          // add           r4, lr, #16
  .long  0xf2422c34                          // vfma.f32      d18, d2, d20
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xe28e400c                          // add           r4, lr, #12
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf2411c34                          // vfma.f32      d17, d1, d20
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf2410c34                          // vfma.f32      d16, d1, d20
  .long  0xe28e4008                          // add           r4, lr, #8
  .long  0xf2412c33                          // vfma.f32      d18, d1, d19
  .long  0xf4ee3c9d                          // vld1.32       {d19[]}, [lr :32]!
  .long  0xf4ee4c9f                          // vld1.32       {d20[]}, [lr :32]
  .long  0xf2401c33                          // vfma.f32      d17, d0, d19
  .long  0xf4e43c9f                          // vld1.32       {d19[]}, [r4 :32]
  .long  0xf2400c33                          // vfma.f32      d16, d0, d19
  .long  0xf2402c34                          // vfma.f32      d18, d0, d20
  .long  0xf22101b1                          // vorr          d0, d17, d17
  .long  0xf22021b0                          // vorr          d2, d16, d16
  .long  0xf22211b2                          // vorr          d1, d18, d18
  .long  0xe8bd4010                          // pop           {r4, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_4x5_vfp4
.globl _sk_matrix_4x5_vfp4
FUNCTION(_sk_matrix_4x5_vfp4)
_sk_matrix_4x5_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xf2620112                          // vorr          d16, d2, d2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e5014                          // add           r5, lr, #20
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4e55c9f                          // vld1.32       {d21[]}, [r5 :32]
  .long  0xe28e5028                          // add           r5, lr, #40
  .long  0xf4e56c9f                          // vld1.32       {d22[]}, [r5 :32]
  .long  0xe28e5038                          // add           r5, lr, #56
  .long  0xf4e57c9f                          // vld1.32       {d23[]}, [r5 :32]
  .long  0xe28e5048                          // add           r5, lr, #72
  .long  0xf4a52c9f                          // vld1.32       {d2[]}, [r5 :32]
  .long  0xe28e5034                          // add           r5, lr, #52
  .long  0xf2032c37                          // vfma.f32      d2, d3, d23
  .long  0xf4e58c9f                          // vld1.32       {d24[]}, [r5 :32]
  .long  0xe28e5044                          // add           r5, lr, #68
  .long  0xf4e51c9f                          // vld1.32       {d17[]}, [r5 :32]
  .long  0xe28e5030                          // add           r5, lr, #48
  .long  0xf2431c38                          // vfma.f32      d17, d3, d24
  .long  0xf4e59c9f                          // vld1.32       {d25[]}, [r5 :32]
  .long  0xe28e503c                          // add           r5, lr, #60
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e504c                          // add           r5, lr, #76
  .long  0xf2002cb6                          // vfma.f32      d2, d16, d22
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xe28e5040                          // add           r5, lr, #64
  .long  0xf2432c33                          // vfma.f32      d18, d3, d19
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e5020                          // add           r5, lr, #32
  .long  0xf2433c39                          // vfma.f32      d19, d3, d25
  .long  0xf4e57c9f                          // vld1.32       {d23[]}, [r5 :32]
  .long  0xe28e502c                          // add           r5, lr, #44
  .long  0xf4e58c9f                          // vld1.32       {d24[]}, [r5 :32]
  .long  0xe28e5024                          // add           r5, lr, #36
  .long  0xf2402cb8                          // vfma.f32      d18, d16, d24
  .long  0xf4e58c9f                          // vld1.32       {d24[]}, [r5 :32]
  .long  0xf2401cb8                          // vfma.f32      d17, d16, d24
  .long  0xe28e5010                          // add           r5, lr, #16
  .long  0xf2403cb7                          // vfma.f32      d19, d16, d23
  .long  0xf4e44c9d                          // vld1.32       {d20[]}, [r4 :32]!
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e501c                          // add           r5, lr, #28
  .long  0xf4e56c9f                          // vld1.32       {d22[]}, [r5 :32]
  .long  0xe28e5018                          // add           r5, lr, #24
  .long  0xf2412c36                          // vfma.f32      d18, d1, d22
  .long  0xf2411c35                          // vfma.f32      d17, d1, d21
  .long  0xf4e45c9f                          // vld1.32       {d21[]}, [r4 :32]
  .long  0xf2413c30                          // vfma.f32      d19, d1, d16
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf2012c30                          // vfma.f32      d2, d1, d16
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xf2401c35                          // vfma.f32      d17, d0, d21
  .long  0xf2403c34                          // vfma.f32      d19, d0, d20
  .long  0xf4e54c9f                          // vld1.32       {d20[]}, [r5 :32]
  .long  0xf2402c34                          // vfma.f32      d18, d0, d20
  .long  0xf2002c30                          // vfma.f32      d2, d0, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xf22301b3                          // vorr          d0, d19, d19
  .long  0xf22231b2                          // vorr          d3, d18, d18
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_4x3_vfp4
.globl _sk_matrix_4x3_vfp4
FUNCTION(_sk_matrix_4x3_vfp4)
_sk_matrix_4x3_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e5018                          // add           r5, lr, #24
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e5028                          // add           r5, lr, #40
  .long  0xf4a52c9f                          // vld1.32       {d2[]}, [r5 :32]
  .long  0xe28e5014                          // add           r5, lr, #20
  .long  0xf2012c33                          // vfma.f32      d2, d1, d19
  .long  0xf4e54c9f                          // vld1.32       {d20[]}, [r5 :32]
  .long  0xe28e5010                          // add           r5, lr, #16
  .long  0xf4e51c9f                          // vld1.32       {d17[]}, [r5 :32]
  .long  0xe28e5020                          // add           r5, lr, #32
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e501c                          // add           r5, lr, #28
  .long  0xf2410c31                          // vfma.f32      d16, d1, d17
  .long  0xf4e55c9f                          // vld1.32       {d21[]}, [r5 :32]
  .long  0xe28e502c                          // add           r5, lr, #44
  .long  0xf4a53c9f                          // vld1.32       {d3[]}, [r5 :32]
  .long  0xe28e5024                          // add           r5, lr, #36
  .long  0xf2013c35                          // vfma.f32      d3, d1, d21
  .long  0xf4e51c9f                          // vld1.32       {d17[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf2411c34                          // vfma.f32      d17, d1, d20
  .long  0xf4e42c9d                          // vld1.32       {d18[]}, [r4 :32]!
  .long  0xf2400c32                          // vfma.f32      d16, d0, d18
  .long  0xf4e44c9f                          // vld1.32       {d20[]}, [r4 :32]
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xf2002c33                          // vfma.f32      d2, d0, d19
  .long  0xf2401c34                          // vfma.f32      d17, d0, d20
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xf2003c32                          // vfma.f32      d3, d0, d18
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xf22111b1                          // vorr          d1, d17, d17
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_matrix_perspective_vfp4
.globl _sk_matrix_perspective_vfp4
FUNCTION(_sk_matrix_perspective_vfp4)
_sk_matrix_perspective_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e401c                          // add           r4, lr, #28
  .long  0xe28e5010                          // add           r5, lr, #16
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe28e4020                          // add           r4, lr, #32
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xe28e4018                          // add           r4, lr, #24
  .long  0xf2411c30                          // vfma.f32      d17, d1, d16
  .long  0xf4e40c9f                          // vld1.32       {d16[]}, [r4 :32]
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xf2401c30                          // vfma.f32      d17, d0, d16
  .long  0xf4e40c9d                          // vld1.32       {d16[]}, [r4 :32]!
  .long  0xf4e45c9f                          // vld1.32       {d21[]}, [r4 :32]
  .long  0xe28e4014                          // add           r4, lr, #20
  .long  0xf2413c35                          // vfma.f32      d19, d1, d21
  .long  0xf4e45c9f                          // vld1.32       {d21[]}, [r4 :32]
  .long  0xf2415c32                          // vfma.f32      d21, d1, d18
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xf3fb4521                          // vrecpe.f32    d20, d17
  .long  0xf2403c30                          // vfma.f32      d19, d0, d16
  .long  0xf2411fb4                          // vrecps.f32    d17, d17, d20
  .long  0xf2405c32                          // vfma.f32      d21, d0, d18
  .long  0xf3440db1                          // vmul.f32      d16, d20, d17
  .long  0xf3030db0                          // vmul.f32      d0, d19, d16
  .long  0xf3051db0                          // vmul.f32      d1, d21, d16
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_evenly_spaced_gradient_vfp4
.globl _sk_evenly_spaced_gradient_vfp4
FUNCTION(_sk_evenly_spaced_gradient_vfp4)
_sk_evenly_spaced_gradient_vfp4:
  .long  0xe92d4ff0                          // push          {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xed2d8b0a                          // vpush         {d8-d12}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe89e0720                          // ldm           lr, {r5, r8, r9, sl}
  .long  0xe2455001                          // sub           r5, r5, #1
  .long  0xe59e4010                          // ldr           r4, [lr, #16]
  .long  0xe59eb020                          // ldr           fp, [lr, #32]
  .long  0xee805b90                          // vdup.32       d16, r5
  .long  0xf3fb06a0                          // vcvt.f32.u32  d16, d16
  .long  0xf3400d90                          // vmul.f32      d16, d16, d0
  .long  0xf3fb0720                          // vcvt.s32.f32  d16, d16
  .long  0xee305b90                          // vmov.32       r5, d16[1]
  .long  0xe0846105                          // add           r6, r4, r5, lsl #2
  .long  0xe08b7105                          // add           r7, fp, r5, lsl #2
  .long  0xedd69a00                          // vldr          s19, [r6]
  .long  0xee106b90                          // vmov.32       r6, d16[0]
  .long  0xedd73a00                          // vldr          s7, [r7]
  .long  0xe08a7105                          // add           r7, sl, r5, lsl #2
  .long  0xedd7aa00                          // vldr          s21, [r7]
  .long  0xe08a7106                          // add           r7, sl, r6, lsl #2
  .long  0xe0844106                          // add           r4, r4, r6, lsl #2
  .long  0xe59ea018                          // ldr           sl, [lr, #24]
  .long  0xed97aa00                          // vldr          s20, [r7]
  .long  0xe59e701c                          // ldr           r7, [lr, #28]
  .long  0xed949a00                          // vldr          s18, [r4]
  .long  0xe0874105                          // add           r4, r7, r5, lsl #2
  .long  0xedd42a00                          // vldr          s5, [r4]
  .long  0xe0894105                          // add           r4, r9, r5, lsl #2
  .long  0xedd4ba00                          // vldr          s23, [r4]
  .long  0xe0894106                          // add           r4, r9, r6, lsl #2
  .long  0xe08b9106                          // add           r9, fp, r6, lsl #2
  .long  0xe087b106                          // add           fp, r7, r6, lsl #2
  .long  0xed94ba00                          // vldr          s22, [r4]
  .long  0xe08a4105                          // add           r4, sl, r5, lsl #2
  .long  0xe0887105                          // add           r7, r8, r5, lsl #2
  .long  0xed9b2a00                          // vldr          s4, [fp]
  .long  0xedd41a00                          // vldr          s3, [r4]
  .long  0xe59e4014                          // ldr           r4, [lr, #20]
  .long  0xf2002c1a                          // vfma.f32      d2, d0, d10
  .long  0xedd7ca00                          // vldr          s25, [r7]
  .long  0xe0887106                          // add           r7, r8, r6, lsl #2
  .long  0xe0845105                          // add           r5, r4, r5, lsl #2
  .long  0xed993a00                          // vldr          s6, [r9]
  .long  0xed97ca00                          // vldr          s24, [r7]
  .long  0xe0847106                          // add           r7, r4, r6, lsl #2
  .long  0xedd58a00                          // vldr          s17, [r5]
  .long  0xf2003c19                          // vfma.f32      d3, d0, d9
  .long  0xed978a00                          // vldr          s16, [r7]
  .long  0xe08a7106                          // add           r7, sl, r6, lsl #2
  .long  0xf2008c1c                          // vfma.f32      d8, d0, d12
  .long  0xed971a00                          // vldr          s2, [r7]
  .long  0xf2001c1b                          // vfma.f32      d1, d0, d11
  .long  0xf2280118                          // vorr          d0, d8, d8
  .long  0xecbd8b0a                          // vpop          {d8-d12}
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4ff0                          // pop           {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_gauss_a_to_rgba_vfp4
.globl _sk_gauss_a_to_rgba_vfp4
FUNCTION(_sk_gauss_a_to_rgba_vfp4)
_sk_gauss_a_to_rgba_vfp4:
  .long  0xeddf0b0c                          // vldr          d16, [pc, #48]
  .long  0xeddf1b0d                          // vldr          d17, [pc, #52]
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xeddf0b0d                          // vldr          d16, [pc, #52]
  .long  0xed9f0b10                          // vldr          d0, [pc, #64]
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2430c31                          // vfma.f32      d16, d3, d17
  .long  0xeddf1b0b                          // vldr          d17, [pc, #44]
  .long  0xf2431c30                          // vfma.f32      d17, d3, d16
  .long  0xf2030c31                          // vfma.f32      d0, d3, d17
  .long  0xf2201110                          // vorr          d1, d0, d0
  .long  0xf2202110                          // vorr          d2, d0, d0
  .long  0xf2203110                          // vorr          d3, d0, d0
  .long  0xe12fff1c                          // bx            ip
  .long  0xc011102d                          // .word         0xc011102d
  .long  0xc011102d                          // .word         0xc011102d
  .long  0x40397812                          // .word         0x40397812
  .long  0x40397812                          // .word         0x40397812
  .long  0x3e5a9420                          // .word         0x3e5a9420
  .long  0x3e5a9420                          // .word         0x3e5a9420
  .long  0x3e1e9d04                          // .word         0x3e1e9d04
  .long  0x3e1e9d04                          // .word         0x3e1e9d04
  .long  0x39a11800                          // .word         0x39a11800
  .long  0x39a11800                          // .word         0x39a11800

HIDDEN _sk_gradient_vfp4
.globl _sk_gradient_vfp4
FUNCTION(_sk_gradient_vfp4)
_sk_gradient_vfp4:
  .long  0xe92d4ff0                          // push          {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe24dd004                          // sub           sp, sp, #4
  .long  0xed2d8b0a                          // vpush         {d8-d12}
  .long  0xe24dd008                          // sub           sp, sp, #8
  .long  0xe58d3004                          // str           r3, [sp, #4]
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xe59c4000                          // ldr           r4, [ip]
  .long  0xe3540002                          // cmp           r4, #2
  .long  0x3a00000b                          // bcc           3d48 <sk_gradient_vfp4+0x58>
  .long  0xe59c5024                          // ldr           r5, [ip, #36]
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf2c02011                          // vmov.i32      d18, #1
  .long  0xe244e001                          // sub           lr, r4, #1
  .long  0xf2c00010                          // vmov.i32      d16, #0
  .long  0xe2854004                          // add           r4, r5, #4
  .long  0xf4e43c9d                          // vld1.32       {d19[]}, [r4 :32]!
  .long  0xe25ee001                          // subs          lr, lr, #1
  .long  0xf3403e23                          // vcge.f32      d19, d0, d19
  .long  0xf35231b1                          // vbsl          d19, d18, d17
  .long  0xf26308a0                          // vadd.i32      d16, d19, d16
  .long  0x1afffff9                          // bne           3d30 <sk_gradient_vfp4+0x40>
  .long  0xee304b90                          // vmov.32       r4, d16[1]
  .long  0xe59c6010                          // ldr           r6, [ip, #16]
  .long  0xee10eb90                          // vmov.32       lr, d16[0]
  .long  0xe59c700c                          // ldr           r7, [ip, #12]
  .long  0xe59ca020                          // ldr           sl, [ip, #32]
  .long  0xe59c9004                          // ldr           r9, [ip, #4]
  .long  0xe59c8008                          // ldr           r8, [ip, #8]
  .long  0xe0865104                          // add           r5, r6, r4, lsl #2
  .long  0xe089310e                          // add           r3, r9, lr, lsl #2
  .long  0xe0899104                          // add           r9, r9, r4, lsl #2
  .long  0xedd59a00                          // vldr          s19, [r5]
  .long  0xe086510e                          // add           r5, r6, lr, lsl #2
  .long  0xedd9ca00                          // vldr          s25, [r9]
  .long  0xed959a00                          // vldr          s18, [r5]
  .long  0xe0875104                          // add           r5, r7, r4, lsl #2
  .long  0xed93ca00                          // vldr          s24, [r3]
  .long  0xedd5aa00                          // vldr          s21, [r5]
  .long  0xe087510e                          // add           r5, r7, lr, lsl #2
  .long  0xed95aa00                          // vldr          s20, [r5]
  .long  0xe08a5104                          // add           r5, sl, r4, lsl #2
  .long  0xe08aa10e                          // add           sl, sl, lr, lsl #2
  .long  0xedd53a00                          // vldr          s7, [r5]
  .long  0xe59c501c                          // ldr           r5, [ip, #28]
  .long  0xed9a3a00                          // vldr          s6, [sl]
  .long  0xe0856104                          // add           r6, r5, r4, lsl #2
  .long  0xe085b10e                          // add           fp, r5, lr, lsl #2
  .long  0xe0885104                          // add           r5, r8, r4, lsl #2
  .long  0xe088810e                          // add           r8, r8, lr, lsl #2
  .long  0xedd62a00                          // vldr          s5, [r6]
  .long  0xf2003c19                          // vfma.f32      d3, d0, d9
  .long  0xedd5ba00                          // vldr          s23, [r5]
  .long  0xe59c6014                          // ldr           r6, [ip, #20]
  .long  0xe59c5018                          // ldr           r5, [ip, #24]
  .long  0xe0863104                          // add           r3, r6, r4, lsl #2
  .long  0xed9b2a00                          // vldr          s4, [fp]
  .long  0xe0857104                          // add           r7, r5, r4, lsl #2
  .long  0xed98ba00                          // vldr          s22, [r8]
  .long  0xedd38a00                          // vldr          s17, [r3]
  .long  0xe085310e                          // add           r3, r5, lr, lsl #2
  .long  0xedd71a00                          // vldr          s3, [r7]
  .long  0xe086710e                          // add           r7, r6, lr, lsl #2
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xf2002c1a                          // vfma.f32      d2, d0, d10
  .long  0xed978a00                          // vldr          s16, [r7]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xed931a00                          // vldr          s2, [r3]
  .long  0xf2008c1c                          // vfma.f32      d8, d0, d12
  .long  0xe59d3004                          // ldr           r3, [sp, #4]
  .long  0xf2001c1b                          // vfma.f32      d1, d0, d11
  .long  0xf2280118                          // vorr          d0, d8, d8
  .long  0xe28dd008                          // add           sp, sp, #8
  .long  0xecbd8b0a                          // vpop          {d8-d12}
  .long  0xe28dd004                          // add           sp, sp, #4
  .long  0xe8bd4ff0                          // pop           {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_evenly_spaced_2_stop_gradient_vfp4
.globl _sk_evenly_spaced_2_stop_gradient_vfp4
FUNCTION(_sk_evenly_spaced_2_stop_gradient_vfp4)
_sk_evenly_spaced_2_stop_gradient_vfp4:
  .long  0xe92d4830                          // push          {r4, r5, fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xe28e500c                          // add           r5, lr, #12
  .long  0xe1a0400e                          // mov           r4, lr
  .long  0xf4e52c9f                          // vld1.32       {d18[]}, [r5 :32]
  .long  0xe28e5008                          // add           r5, lr, #8
  .long  0xf4e53c9f                          // vld1.32       {d19[]}, [r5 :32]
  .long  0xe28e5018                          // add           r5, lr, #24
  .long  0xf4a52c9f                          // vld1.32       {d2[]}, [r5 :32]
  .long  0xe28e5010                          // add           r5, lr, #16
  .long  0xf2002c33                          // vfma.f32      d2, d0, d19
  .long  0xf4e50c9f                          // vld1.32       {d16[]}, [r5 :32]
  .long  0xe28e501c                          // add           r5, lr, #28
  .long  0xf4e41c9d                          // vld1.32       {d17[]}, [r4 :32]!
  .long  0xf2400c31                          // vfma.f32      d16, d0, d17
  .long  0xf4a53c9f                          // vld1.32       {d3[]}, [r5 :32]
  .long  0xe28e5014                          // add           r5, lr, #20
  .long  0xf2003c32                          // vfma.f32      d3, d0, d18
  .long  0xf4e41c9f                          // vld1.32       {d17[]}, [r4 :32]
  .long  0xf4a51c9f                          // vld1.32       {d1[]}, [r5 :32]
  .long  0xf2001c31                          // vfma.f32      d1, d0, d17
  .long  0xf22001b0                          // vorr          d0, d16, d16
  .long  0xe8bd4830                          // pop           {r4, r5, fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_xy_to_unit_angle_vfp4
.globl _sk_xy_to_unit_angle_vfp4
FUNCTION(_sk_xy_to_unit_angle_vfp4)
_sk_xy_to_unit_angle_vfp4:
  .long  0xed2d8b06                          // vpush         {d8-d10}
  .long  0xf3f90701                          // vabs.f32      d16, d1
  .long  0xeddf3b24                          // vldr          d19, [pc, #144]
  .long  0xf3f91700                          // vabs.f32      d17, d0
  .long  0xeddf4b24                          // vldr          d20, [pc, #144]
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf2018fa0                          // vmax.f32      d8, d17, d16
  .long  0xf2219fa0                          // vmin.f32      d9, d17, d16
  .long  0xf3600ea1                          // vcgt.f32      d16, d16, d17
  .long  0xeec9aaa8                          // vdiv.f32      s21, s19, s17
  .long  0xee89aa08                          // vdiv.f32      s20, s18, s16
  .long  0xf34a2d1a                          // vmul.f32      d18, d10, d10
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf2433da4                          // vadd.f32      d19, d19, d20
  .long  0xeddf4b1c                          // vldr          d20, [pc, #112]
  .long  0xf3423db3                          // vmul.f32      d19, d18, d19
  .long  0xf2433da4                          // vadd.f32      d19, d19, d20
  .long  0xf3422db3                          // vmul.f32      d18, d18, d19
  .long  0xeddf3b1a                          // vldr          d19, [pc, #104]
  .long  0xf2422da3                          // vadd.f32      d18, d18, d19
  .long  0xf2c53f10                          // vmov.f32      d19, #0.25
  .long  0xf34a2d32                          // vmul.f32      d18, d10, d18
  .long  0xf2631da2                          // vsub.f32      d17, d19, d18
  .long  0xf2c3361f                          // vmov.i32      d19, #1056964608
  .long  0xf35101b2                          // vbsl          d16, d17, d18
  .long  0xf2c72f10                          // vmov.f32      d18, #1
  .long  0xf2631da0                          // vsub.f32      d17, d19, d16
  .long  0xf3f93600                          // vclt.f32      d19, d0, #0
  .long  0xf35131b0                          // vbsl          d19, d17, d16
  .long  0xf2c01010                          // vmov.i32      d17, #0
  .long  0xf2620da3                          // vsub.f32      d16, d18, d19
  .long  0xf3f92601                          // vclt.f32      d18, d1, #0
  .long  0xf35021b3                          // vbsl          d18, d16, d19
  .long  0xf3420ea1                          // vcge.f32      d16, d18, d17
  .long  0xf3613ea2                          // vcgt.f32      d19, d17, d18
  .long  0xf26301b0                          // vorr          d16, d19, d16
  .long  0xf3b005a0                          // vmvn          d0, d16
  .long  0xf31101b2                          // vbsl          d0, d17, d18
  .long  0xecbd8b06                          // vpop          {d8-d10}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbbe72b6f                          // .word         0xbbe72b6f
  .long  0xbbe72b6f                          // .word         0xbbe72b6f
  .long  0x3ccad79f                          // .word         0x3ccad79f
  .long  0x3ccad79f                          // .word         0x3ccad79f
  .long  0xbd5464d4                          // .word         0xbd5464d4
  .long  0xbd5464d4                          // .word         0xbd5464d4
  .long  0x3e22f0a9                          // .word         0x3e22f0a9
  .long  0x3e22f0a9                          // .word         0x3e22f0a9

HIDDEN _sk_xy_to_radius_vfp4
.globl _sk_xy_to_radius_vfp4
FUNCTION(_sk_xy_to_radius_vfp4)
_sk_xy_to_radius_vfp4:
  .long  0xf3410d11                          // vmul.f32      d16, d1, d1
  .long  0xe491c004                          // ldr           ip, [r1], #4
  .long  0xf3401d10                          // vmul.f32      d17, d0, d0
  .long  0xf2410da0                          // vadd.f32      d16, d17, d16
  .long  0xf3fb15a0                          // vrsqrte.f32   d17, d16
  .long  0xf3412db1                          // vmul.f32      d18, d17, d17
  .long  0xf2602fb2                          // vrsqrts.f32   d18, d16, d18
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf3412db1                          // vmul.f32      d18, d17, d17
  .long  0xf2602fb2                          // vrsqrts.f32   d18, d16, d18
  .long  0xf3411db2                          // vmul.f32      d17, d17, d18
  .long  0xf3000db1                          // vmul.f32      d0, d16, d17
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_save_xy_vfp4
.globl _sk_save_xy_vfp4
FUNCTION(_sk_save_xy_vfp4)
_sk_save_xy_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xeddf7b1a                          // vldr          d23, [pc, #104]
  .long  0xf2c06010                          // vmov.i32      d22, #0
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2401d20                          // vadd.f32      d17, d0, d16
  .long  0xf2410d20                          // vadd.f32      d16, d1, d16
  .long  0xed8c0b00                          // vstr          d0, [ip]
  .long  0xed8c1b08                          // vstr          d1, [ip, #32]
  .long  0xf3fb2721                          // vcvt.s32.f32  d18, d17
  .long  0xf3fb3720                          // vcvt.s32.f32  d19, d16
  .long  0xf3fb2622                          // vcvt.f32.s32  d18, d18
  .long  0xf3fb3623                          // vcvt.f32.s32  d19, d19
  .long  0xf3624ea1                          // vcgt.f32      d20, d18, d17
  .long  0xf3635ea0                          // vcgt.f32      d21, d19, d16
  .long  0xf35741b6                          // vbsl          d20, d23, d22
  .long  0xf35751b6                          // vbsl          d21, d23, d22
  .long  0xf2622da4                          // vsub.f32      d18, d18, d20
  .long  0xf2633da5                          // vsub.f32      d19, d19, d21
  .long  0xf2611da2                          // vsub.f32      d17, d17, d18
  .long  0xf2600da3                          // vsub.f32      d16, d16, d19
  .long  0xedcc1b10                          // vstr          d17, [ip, #64]
  .long  0xedcc0b18                          // vstr          d16, [ip, #96]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0x3f800000                          // .word         0x3f800000
  .long  0x3f800000                          // .word         0x3f800000

HIDDEN _sk_accumulate_vfp4
.globl _sk_accumulate_vfp4
FUNCTION(_sk_accumulate_vfp4)
_sk_accumulate_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591e000                          // ldr           lr, [r1]
  .long  0xe591c004                          // ldr           ip, [r1, #4]
  .long  0xe2811008                          // add           r1, r1, #8
  .long  0xedde1b28                          // vldr          d17, [lr, #160]
  .long  0xedde0b20                          // vldr          d16, [lr, #128]
  .long  0xf3400db1                          // vmul.f32      d16, d16, d17
  .long  0xf2004c90                          // vfma.f32      d4, d16, d0
  .long  0xf2005c91                          // vfma.f32      d5, d16, d1
  .long  0xf2006c92                          // vfma.f32      d6, d16, d2
  .long  0xf2007c93                          // vfma.f32      d7, d16, d3
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_nx_vfp4
.globl _sk_bilinear_nx_vfp4
FUNCTION(_sk_bilinear_nx_vfp4)
_sk_bilinear_nx_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xf3c3261f                          // vmov.i32      d18, #-1090519040
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xedcc0b20                          // vstr          d16, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_px_vfp4
.globl _sk_bilinear_px_vfp4
FUNCTION(_sk_bilinear_px_vfp4)
_sk_bilinear_px_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xedcc2b20                          // vstr          d18, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xf2010da0                          // vadd.f32      d0, d17, d16
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_ny_vfp4
.globl _sk_bilinear_ny_vfp4
FUNCTION(_sk_bilinear_ny_vfp4)
_sk_bilinear_ny_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xf3c3261f                          // vmov.i32      d18, #-1090519040
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xedcc0b28                          // vstr          d16, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip

HIDDEN _sk_bilinear_py_vfp4
.globl _sk_bilinear_py_vfp4
FUNCTION(_sk_bilinear_py_vfp4)
_sk_bilinear_py_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xedcc2b28                          // vstr          d18, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xf2011da0                          // vadd.f32      d1, d17, d16
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}

HIDDEN _sk_bicubic_n3x_vfp4
.globl _sk_bicubic_n3x_vfp4
FUNCTION(_sk_bicubic_n3x_vfp4)
_sk_bicubic_n3x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddf3b11                          // vldr          d19, [pc, #68]
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0c                          // vldr          d18, [pc, #48]
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3400db0                          // vmul.f32      d16, d16, d16
  .long  0xf3c72f18                          // vmov.f32      d18, #-1.5
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedcc0b20                          // vstr          d16, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n1x_vfp4
.globl _sk_bicubic_n1x_vfp4
FUNCTION(_sk_bicubic_n1x_vfp4)
_sk_bicubic_n1x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2c73f18                          // vmov.f32      d19, #1.5
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0e                          // vldr          d18, [pc, #56]
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2402cb3                          // vfma.f32      d18, d16, d19
  .long  0xeddf3b0b                          // vldr          d19, [pc, #44]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3c3061f                          // vmov.i32      d16, #-1090519040
  .long  0xf2010da0                          // vadd.f32      d0, d17, d16
  .long  0xedcc3b20                          // vstr          d19, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p1x_vfp4
.globl _sk_bicubic_p1x_vfp4
FUNCTION(_sk_bicubic_p1x_vfp4)
_sk_bicubic_p1x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c71f18                          // vmov.f32      d17, #1.5
  .long  0xeddf0b0f                          // vldr          d16, [pc, #60]
  .long  0xeddc3b10                          // vldr          d19, [ip, #64]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xeddc2b00                          // vldr          d18, [ip]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xf2020da0                          // vadd.f32      d0, d18, d16
  .long  0xf2430cb1                          // vfma.f32      d16, d19, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xedcc1b20                          // vstr          d17, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p3x_vfp4
.globl _sk_bicubic_p3x_vfp4
FUNCTION(_sk_bicubic_p3x_vfp4)
_sk_bicubic_p3x_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xeddf0b0e                          // vldr          d16, [pc, #56]
  .long  0xeddf3b0f                          // vldr          d19, [pc, #60]
  .long  0xeddc2b10                          // vldr          d18, [ip, #64]
  .long  0xf2423cb0                          // vfma.f32      d19, d18, d16
  .long  0xeddc1b00                          // vldr          d17, [ip]
  .long  0xf3420db2                          // vmul.f32      d16, d18, d18
  .long  0xf2c72f18                          // vmov.f32      d18, #1.5
  .long  0xf2010da2                          // vadd.f32      d0, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedcc0b20                          // vstr          d16, [ip, #128]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n3y_vfp4
.globl _sk_bicubic_n3y_vfp4
FUNCTION(_sk_bicubic_n3y_vfp4)
_sk_bicubic_n3y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xeddf3b11                          // vldr          d19, [pc, #68]
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0c                          // vldr          d18, [pc, #48]
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3400db0                          // vmul.f32      d16, d16, d16
  .long  0xf3c72f18                          // vmov.f32      d18, #-1.5
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedcc0b28                          // vstr          d16, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_bicubic_n1y_vfp4
.globl _sk_bicubic_n1y_vfp4
FUNCTION(_sk_bicubic_n1y_vfp4)
_sk_bicubic_n1y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c70f10                          // vmov.f32      d16, #1
  .long  0xf2c73f18                          // vmov.f32      d19, #1.5
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xf2600da2                          // vsub.f32      d16, d16, d18
  .long  0xeddf2b0e                          // vldr          d18, [pc, #56]
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf2c3261f                          // vmov.i32      d18, #1056964608
  .long  0xf2402cb3                          // vfma.f32      d18, d16, d19
  .long  0xeddf3b0b                          // vldr          d19, [pc, #44]
  .long  0xf2403cb2                          // vfma.f32      d19, d16, d18
  .long  0xf3c3061f                          // vmov.i32      d16, #-1090519040
  .long  0xf2011da0                          // vadd.f32      d1, d17, d16
  .long  0xedcc3b28                          // vstr          d19, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p1y_vfp4
.globl _sk_bicubic_p1y_vfp4
FUNCTION(_sk_bicubic_p1y_vfp4)
_sk_bicubic_p1y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xf2c71f18                          // vmov.f32      d17, #1.5
  .long  0xeddf0b0f                          // vldr          d16, [pc, #60]
  .long  0xeddc3b18                          // vldr          d19, [ip, #96]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xeddc2b08                          // vldr          d18, [ip, #32]
  .long  0xf2c3061f                          // vmov.i32      d16, #1056964608
  .long  0xf2021da0                          // vadd.f32      d1, d18, d16
  .long  0xf2430cb1                          // vfma.f32      d16, d19, d17
  .long  0xeddf1b0a                          // vldr          d17, [pc, #40]
  .long  0xf2431cb0                          // vfma.f32      d17, d19, d16
  .long  0xedcc1b28                          // vstr          d17, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0xe320f000                          // nop           {0}
  .long  0xbf955555                          // .word         0xbf955555
  .long  0xbf955555                          // .word         0xbf955555
  .long  0x3d638e39                          // .word         0x3d638e39
  .long  0x3d638e39                          // .word         0x3d638e39

HIDDEN _sk_bicubic_p3y_vfp4
.globl _sk_bicubic_p3y_vfp4
FUNCTION(_sk_bicubic_p3y_vfp4)
_sk_bicubic_p3y_vfp4:
  .long  0xe92d4800                          // push          {fp, lr}
  .long  0xe591c000                          // ldr           ip, [r1]
  .long  0xeddf0b0e                          // vldr          d16, [pc, #56]
  .long  0xeddf3b0f                          // vldr          d19, [pc, #60]
  .long  0xeddc2b18                          // vldr          d18, [ip, #96]
  .long  0xf2423cb0                          // vfma.f32      d19, d18, d16
  .long  0xeddc1b08                          // vldr          d17, [ip, #32]
  .long  0xf3420db2                          // vmul.f32      d16, d18, d18
  .long  0xf2c72f18                          // vmov.f32      d18, #1.5
  .long  0xf2011da2                          // vadd.f32      d1, d17, d18
  .long  0xf3400db3                          // vmul.f32      d16, d16, d19
  .long  0xedcc0b28                          // vstr          d16, [ip, #160]
  .long  0xe281c008                          // add           ip, r1, #8
  .long  0xe591e004                          // ldr           lr, [r1, #4]
  .long  0xe1a0100c                          // mov           r1, ip
  .long  0xe1a0c00e                          // mov           ip, lr
  .long  0xe8bd4800                          // pop           {fp, lr}
  .long  0xe12fff1c                          // bx            ip
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0x3ec71c72                          // .word         0x3ec71c72
  .long  0xbeaaaaab                          // .word         0xbeaaaaab
  .long  0xbeaaaaab                          // .word         0xbeaaaaab

HIDDEN _sk_callback_vfp4
.globl _sk_callback_vfp4
FUNCTION(_sk_callback_vfp4)
_sk_callback_vfp4:
  .long  0xe92d4df0                          // push          {r4, r5, r6, r7, r8, sl, fp, lr}
  .long  0xe28db018                          // add           fp, sp, #24
  .long  0xed2d8b08                          // vpush         {d8-d11}
  .long  0xe1a06001                          // mov           r6, r1
  .long  0xe1a07000                          // mov           r7, r0
  .long  0xe5964000                          // ldr           r4, [r6]
  .long  0xe1a05002                          // mov           r5, r2
  .long  0xe59b1008                          // ldr           r1, [fp, #8]
  .long  0xeeb08b47                          // vmov.f64      d8, d7
  .long  0xe2840004                          // add           r0, r4, #4
  .long  0xe1a08003                          // mov           r8, r3
  .long  0xe3510000                          // cmp           r1, #0
  .long  0x03a01002                          // moveq         r1, #2
  .long  0xf400008f                          // vst4.32       {d0-d3}, [r0]
  .long  0xe1a00004                          // mov           r0, r4
  .long  0xe5942000                          // ldr           r2, [r4]
  .long  0xeeb09b46                          // vmov.f64      d9, d6
  .long  0xeeb0ab45                          // vmov.f64      d10, d5
  .long  0xeeb0bb44                          // vmov.f64      d11, d4
  .long  0xe12fff32                          // blx           r2
  .long  0xe5940084                          // ldr           r0, [r4, #132]
  .long  0xe2861008                          // add           r1, r6, #8
  .long  0xe596c004                          // ldr           ip, [r6, #4]
  .long  0xe1a02005                          // mov           r2, r5
  .long  0xe1a03008                          // mov           r3, r8
  .long  0xeeb04b4b                          // vmov.f64      d4, d11
  .long  0xf420008f                          // vld4.32       {d0-d3}, [r0]
  .long  0xe1a00007                          // mov           r0, r7
  .long  0xeeb05b4a                          // vmov.f64      d5, d10
  .long  0xeeb06b49                          // vmov.f64      d6, d9
  .long  0xeeb07b48                          // vmov.f64      d7, d8
  .long  0xecbd8b08                          // vpop          {d8-d11}
  .long  0xe8bd4df0                          // pop           {r4, r5, r6, r7, r8, sl, fp, lr}
  .long  0xe12fff1c                          // bx            ip
#elif defined(__x86_64__)
BALIGN32

HIDDEN _sk_start_pipeline_hsw
.globl _sk_start_pipeline_hsw
FUNCTION(_sk_start_pipeline_hsw)
_sk_start_pipeline_hsw:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  73,137,208                          // mov           %rdx,%r8
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  73,137,254                          // mov           %rdi,%r14
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,197                          // mov           %rax,%r13
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  73,141,78,8                         // lea           0x8(%r14),%rcx
  .byte  76,57,193                           // cmp           %r8,%rcx
  .byte  118,5                               // jbe           33 <_sk_start_pipeline_hsw+0x33>
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  235,77                              // jmp           80 <_sk_start_pipeline_hsw+0x80>
  .byte  76,137,69,208                       // mov           %r8,-0x30(%rbp)
  .byte  65,184,0,0,0,0                      // mov           $0x0,%r8d
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,139,69,208                       // mov           -0x30(%rbp),%r8
  .byte  73,141,86,8                         // lea           0x8(%r14),%rdx
  .byte  73,131,198,16                       // add           $0x10,%r14
  .byte  77,57,198                           // cmp           %r8,%r14
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  118,183                             // jbe           37 <_sk_start_pipeline_hsw+0x37>
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,44                              // je            b1 <_sk_start_pipeline_hsw+0xb1>
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  197,248,119                         // vzeroupper
  .byte  195                                 // retq

HIDDEN _sk_just_return_hsw
.globl _sk_just_return_hsw
FUNCTION(_sk_just_return_hsw)
_sk_just_return_hsw:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_hsw
.globl _sk_seed_shader_hsw
FUNCTION(_sk_seed_shader_hsw)
_sk_seed_shader_hsw:
  .byte  197,249,110,194                     // vmovd         %edx,%xmm0
  .byte  196,226,125,88,192                  // vpbroadcastd  %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,14,75,0,0         // vbroadcastss  0x4b0e(%rip),%ymm1        # 4be8 <_sk_callback_hsw+0x144>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,88,7                        // vaddps        (%rdi),%ymm0,%ymm0
  .byte  197,249,110,209                     // vmovd         %ecx,%xmm2
  .byte  196,226,125,88,210                  // vpbroadcastd  %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,21,238,74,0,0        // vbroadcastss  0x4aee(%rip),%ymm2        # 4bec <_sk_callback_hsw+0x148>
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_hsw
.globl _sk_dither_hsw
FUNCTION(_sk_dither_hsw)
_sk_dither_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,194                     // vmovd         %edx,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  197,61,254,71,32                    // vpaddd        0x20(%rdi),%ymm8,%ymm8
  .byte  197,121,110,201                     // vmovd         %ecx,%xmm9
  .byte  196,66,125,88,201                   // vpbroadcastd  %xmm9,%ymm9
  .byte  196,65,53,239,200                   // vpxor         %ymm8,%ymm9,%ymm9
  .byte  196,98,125,88,21,181,74,0,0         // vpbroadcastd  0x4ab5(%rip),%ymm10        # 4bf0 <_sk_callback_hsw+0x14c>
  .byte  196,65,53,219,218                   // vpand         %ymm10,%ymm9,%ymm11
  .byte  196,193,37,114,243,5                // vpslld        $0x5,%ymm11,%ymm11
  .byte  196,65,61,219,210                   // vpand         %ymm10,%ymm8,%ymm10
  .byte  196,193,45,114,242,4                // vpslld        $0x4,%ymm10,%ymm10
  .byte  196,98,125,88,37,154,74,0,0         // vpbroadcastd  0x4a9a(%rip),%ymm12        # 4bf4 <_sk_callback_hsw+0x150>
  .byte  196,98,125,88,45,149,74,0,0         // vpbroadcastd  0x4a95(%rip),%ymm13        # 4bf8 <_sk_callback_hsw+0x154>
  .byte  196,65,53,219,245                   // vpand         %ymm13,%ymm9,%ymm14
  .byte  196,193,13,114,246,2                // vpslld        $0x2,%ymm14,%ymm14
  .byte  196,65,61,219,237                   // vpand         %ymm13,%ymm8,%ymm13
  .byte  196,65,21,254,237                   // vpaddd        %ymm13,%ymm13,%ymm13
  .byte  196,65,53,219,204                   // vpand         %ymm12,%ymm9,%ymm9
  .byte  196,193,53,114,209,1                // vpsrld        $0x1,%ymm9,%ymm9
  .byte  196,65,61,219,196                   // vpand         %ymm12,%ymm8,%ymm8
  .byte  196,193,61,114,208,2                // vpsrld        $0x2,%ymm8,%ymm8
  .byte  196,65,21,235,210                   // vpor          %ymm10,%ymm13,%ymm10
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,37,235,214                   // vpor          %ymm14,%ymm11,%ymm10
  .byte  196,65,61,235,194                   // vpor          %ymm10,%ymm8,%ymm8
  .byte  196,65,61,235,193                   // vpor          %ymm9,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,71,74,0,0          // vbroadcastss  0x4a47(%rip),%ymm9        # 4bfc <_sk_callback_hsw+0x158>
  .byte  196,98,125,24,21,66,74,0,0          // vbroadcastss  0x4a42(%rip),%ymm10        # 4c00 <_sk_callback_hsw+0x15c>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,188,95,201                      // vmaxps        %ymm1,%ymm8,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  197,188,95,210                      // vmaxps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_hsw
.globl _sk_constant_color_hsw
FUNCTION(_sk_constant_color_hsw)
_sk_constant_color_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgba_hsw
.globl _sk_load_rgba_hsw
FUNCTION(_sk_load_rgba_hsw)
_sk_load_rgba_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,0                        // vmovups       (%rax),%ymm0
  .byte  197,252,16,72,32                    // vmovups       0x20(%rax),%ymm1
  .byte  197,252,16,80,64                    // vmovups       0x40(%rax),%ymm2
  .byte  197,252,16,88,96                    // vmovups       0x60(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_rgba_hsw
.globl _sk_store_rgba_hsw
FUNCTION(_sk_store_rgba_hsw)
_sk_store_rgba_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,252,17,80,64                    // vmovups       %ymm2,0x40(%rax)
  .byte  197,252,17,88,96                    // vmovups       %ymm3,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_hsw
.globl _sk_clear_hsw
FUNCTION(_sk_clear_hsw)
_sk_clear_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_hsw
.globl _sk_srcatop_hsw
FUNCTION(_sk_srcatop_hsw)
_sk_srcatop_hsw:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,98,125,24,5,154,73,0,0          // vbroadcastss  0x499a(%rip),%ymm8        # 4c04 <_sk_callback_hsw+0x160>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_hsw
.globl _sk_dstatop_hsw
FUNCTION(_sk_dstatop_hsw)
_sk_dstatop_hsw:
  .byte  196,98,125,24,5,109,73,0,0          // vbroadcastss  0x496d(%rip),%ymm8        # 4c08 <_sk_callback_hsw+0x164>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,226,101,184,196                 // vfmadd231ps   %ymm4,%ymm3,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  196,226,101,184,205                 // vfmadd231ps   %ymm5,%ymm3,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  196,226,101,184,214                 // vfmadd231ps   %ymm6,%ymm3,%ymm2
  .byte  197,60,89,195                       // vmulps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_hsw
.globl _sk_srcin_hsw
FUNCTION(_sk_srcin_hsw)
_sk_srcin_hsw:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_hsw
.globl _sk_dstin_hsw
FUNCTION(_sk_dstin_hsw)
_sk_dstin_hsw:
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_hsw
.globl _sk_srcout_hsw
FUNCTION(_sk_srcout_hsw)
_sk_srcout_hsw:
  .byte  196,98,125,24,5,20,73,0,0           // vbroadcastss  0x4914(%rip),%ymm8        # 4c0c <_sk_callback_hsw+0x168>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_hsw
.globl _sk_dstout_hsw
FUNCTION(_sk_dstout_hsw)
_sk_dstout_hsw:
  .byte  196,226,125,24,5,247,72,0,0         // vbroadcastss  0x48f7(%rip),%ymm0        # 4c10 <_sk_callback_hsw+0x16c>
  .byte  197,252,92,219                      // vsubps        %ymm3,%ymm0,%ymm3
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_hsw
.globl _sk_srcover_hsw
FUNCTION(_sk_srcover_hsw)
_sk_srcover_hsw:
  .byte  196,98,125,24,5,218,72,0,0          // vbroadcastss  0x48da(%rip),%ymm8        # 4c14 <_sk_callback_hsw+0x170>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,93,184,192                  // vfmadd231ps   %ymm8,%ymm4,%ymm0
  .byte  196,194,85,184,200                  // vfmadd231ps   %ymm8,%ymm5,%ymm1
  .byte  196,194,77,184,208                  // vfmadd231ps   %ymm8,%ymm6,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_hsw
.globl _sk_dstover_hsw
FUNCTION(_sk_dstover_hsw)
_sk_dstover_hsw:
  .byte  196,98,125,24,5,185,72,0,0          // vbroadcastss  0x48b9(%rip),%ymm8        # 4c18 <_sk_callback_hsw+0x174>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_hsw
.globl _sk_modulate_hsw
FUNCTION(_sk_modulate_hsw)
_sk_modulate_hsw:
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_hsw
.globl _sk_multiply_hsw
FUNCTION(_sk_multiply_hsw)
_sk_multiply_hsw:
  .byte  196,98,125,24,5,132,72,0,0          // vbroadcastss  0x4884(%rip),%ymm8        # 4c1c <_sk_callback_hsw+0x178>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,208                       // vmulps        %ymm0,%ymm9,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,212                   // vfmadd231ps   %ymm4,%ymm8,%ymm10
  .byte  196,194,93,168,194                  // vfmadd213ps   %ymm10,%ymm4,%ymm0
  .byte  197,52,89,209                       // vmulps        %ymm1,%ymm9,%ymm10
  .byte  196,98,61,184,213                   // vfmadd231ps   %ymm5,%ymm8,%ymm10
  .byte  196,194,85,168,202                  // vfmadd213ps   %ymm10,%ymm5,%ymm1
  .byte  197,52,89,210                       // vmulps        %ymm2,%ymm9,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  196,194,77,168,210                  // vfmadd213ps   %ymm10,%ymm6,%ymm2
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  196,66,69,168,193                   // vfmadd213ps   %ymm9,%ymm7,%ymm8
  .byte  196,194,69,168,216                  // vfmadd213ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__hsw
.globl _sk_plus__hsw
FUNCTION(_sk_plus__hsw)
_sk_plus__hsw:
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_hsw
.globl _sk_screen_hsw
FUNCTION(_sk_screen_hsw)
_sk_screen_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  196,194,93,172,192                  // vfnmadd213ps  %ymm8,%ymm4,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  196,194,85,172,200                  // vfnmadd213ps  %ymm8,%ymm5,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  196,194,77,172,208                  // vfnmadd213ps  %ymm8,%ymm6,%ymm2
  .byte  197,100,88,199                      // vaddps        %ymm7,%ymm3,%ymm8
  .byte  196,194,69,172,216                  // vfnmadd213ps  %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__hsw
.globl _sk_xor__hsw
FUNCTION(_sk_xor__hsw)
_sk_xor__hsw:
  .byte  196,98,125,24,5,255,71,0,0          // vbroadcastss  0x47ff(%rip),%ymm8        # 4c20 <_sk_callback_hsw+0x17c>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  196,98,69,168,195                   // vfmadd213ps   %ymm3,%ymm7,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,195                      // vmovaps       %ymm8,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_hsw
.globl _sk_darken_hsw
FUNCTION(_sk_darken_hsw)
_sk_darken_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,95,193                  // vmaxps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,95,201                  // vmaxps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,95,209                  // vmaxps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,135,71,0,0          // vbroadcastss  0x4787(%rip),%ymm8        # 4c24 <_sk_callback_hsw+0x180>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_hsw
.globl _sk_lighten_hsw
FUNCTION(_sk_lighten_hsw)
_sk_lighten_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,54,71,0,0           // vbroadcastss  0x4736(%rip),%ymm8        # 4c28 <_sk_callback_hsw+0x184>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_hsw
.globl _sk_difference_hsw
FUNCTION(_sk_difference_hsw)
_sk_difference_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,217,70,0,0          // vbroadcastss  0x46d9(%rip),%ymm8        # 4c2c <_sk_callback_hsw+0x188>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_hsw
.globl _sk_exclusion_hsw
FUNCTION(_sk_exclusion_hsw)
_sk_exclusion_hsw:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,151,70,0,0          // vbroadcastss  0x4697(%rip),%ymm8        # 4c30 <_sk_callback_hsw+0x18c>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_hsw
.globl _sk_colorburn_hsw
FUNCTION(_sk_colorburn_hsw)
_sk_colorburn_hsw:
  .byte  196,98,125,24,5,133,70,0,0          // vbroadcastss  0x4685(%rip),%ymm8        # 4c34 <_sk_callback_hsw+0x190>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,216                       // vmulps        %ymm0,%ymm9,%ymm11
  .byte  196,65,44,87,210                    // vxorps        %ymm10,%ymm10,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,228                       // vmulps        %ymm4,%ymm8,%ymm12
  .byte  197,68,92,236                       // vsubps        %ymm4,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,232                       // vdivps        %ymm0,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  196,66,101,168,235                  // vfmadd213ps   %ymm11,%ymm3,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,224                       // vaddps        %ymm0,%ymm12,%ymm12
  .byte  196,193,124,194,194,0               // vcmpeqps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,196,0                 // vblendvps     %ymm0,%ymm12,%ymm13,%ymm0
  .byte  197,92,194,231,0                    // vcmpeqps      %ymm7,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,52,89,217                       // vmulps        %ymm1,%ymm9,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  197,68,92,237                       // vsubps        %ymm5,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,233                       // vdivps        %ymm1,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  196,66,101,168,235                  // vfmadd213ps   %ymm11,%ymm3,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,225                       // vaddps        %ymm1,%ymm12,%ymm12
  .byte  196,193,116,194,202,0               // vcmpeqps      %ymm10,%ymm1,%ymm1
  .byte  196,195,21,74,204,16                // vblendvps     %ymm1,%ymm12,%ymm13,%ymm1
  .byte  197,84,194,231,0                    // vcmpeqps      %ymm7,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,108,194,210,0                // vcmpeqps      %ymm10,%ymm2,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  197,68,92,230                       // vsubps        %ymm6,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  197,28,94,226                       // vdivps        %ymm2,%ymm12,%ymm12
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,65,68,92,228                    // vsubps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,225                  // vfmadd213ps   %ymm9,%ymm3,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,227,37,74,210,160               // vblendvps     %ymm10,%ymm2,%ymm11,%ymm2
  .byte  197,76,194,215,0                    // vcmpeqps      %ymm7,%ymm6,%ymm10
  .byte  197,52,88,206                       // vaddps        %ymm6,%ymm9,%ymm9
  .byte  196,195,109,74,209,160              // vblendvps     %ymm10,%ymm9,%ymm2,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_hsw
.globl _sk_colordodge_hsw
FUNCTION(_sk_colordodge_hsw)
_sk_colordodge_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,13,144,69,0,0         // vbroadcastss  0x4590(%rip),%ymm9        # 4c38 <_sk_callback_hsw+0x194>
  .byte  197,52,92,215                       // vsubps        %ymm7,%ymm9,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,52,92,203                       // vsubps        %ymm3,%ymm9,%ymm9
  .byte  197,100,89,228                      // vmulps        %ymm4,%ymm3,%ymm12
  .byte  197,100,92,232                      // vsubps        %ymm0,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,236                       // vmulps        %ymm4,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,227                  // vfmadd213ps   %ymm11,%ymm3,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,232                       // vaddps        %ymm0,%ymm13,%ymm13
  .byte  197,252,194,195,0                   // vcmpeqps      %ymm3,%ymm0,%ymm0
  .byte  196,195,29,74,197,0                 // vblendvps     %ymm0,%ymm13,%ymm12,%ymm0
  .byte  196,65,92,194,224,0                 // vcmpeqps      %ymm8,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,100,89,229                      // vmulps        %ymm5,%ymm3,%ymm12
  .byte  197,100,92,233                      // vsubps        %ymm1,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,237                       // vmulps        %ymm5,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,66,101,168,227                  // vfmadd213ps   %ymm11,%ymm3,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,233                       // vaddps        %ymm1,%ymm13,%ymm13
  .byte  197,244,194,203,0                   // vcmpeqps      %ymm3,%ymm1,%ymm1
  .byte  196,195,29,74,205,16                // vblendvps     %ymm1,%ymm13,%ymm12,%ymm1
  .byte  196,65,84,194,224,0                 // vcmpeqps      %ymm8,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,100,92,226                      // vsubps        %ymm2,%ymm3,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  197,52,89,230                       // vmulps        %ymm6,%ymm9,%ymm12
  .byte  196,65,68,93,219                    // vminps        %ymm11,%ymm7,%ymm11
  .byte  196,66,101,168,218                  // vfmadd213ps   %ymm10,%ymm3,%ymm11
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  197,236,194,211,0                   // vcmpeqps      %ymm3,%ymm2,%ymm2
  .byte  196,195,37,74,212,32                // vblendvps     %ymm2,%ymm12,%ymm11,%ymm2
  .byte  196,65,76,194,192,0                 // vcmpeqps      %ymm8,%ymm6,%ymm8
  .byte  197,44,88,214                       // vaddps        %ymm6,%ymm10,%ymm10
  .byte  196,195,109,74,210,128              // vblendvps     %ymm8,%ymm10,%ymm2,%ymm2
  .byte  196,194,69,184,217                  // vfmadd231ps   %ymm9,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_hsw
.globl _sk_hardlight_hsw
FUNCTION(_sk_hardlight_hsw)
_sk_hardlight_hsw:
  .byte  196,98,125,24,5,177,68,0,0          // vbroadcastss  0x44b1(%rip),%ymm8        # 4c3c <_sk_callback_hsw+0x198>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,220                   // vfmadd231ps   %ymm4,%ymm8,%ymm11
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  197,52,194,227,2                    // vcmpleps      %ymm3,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  196,98,61,184,221                   // vfmadd231ps   %ymm5,%ymm8,%ymm11
  .byte  197,116,88,225                      // vaddps        %ymm1,%ymm1,%ymm12
  .byte  197,28,194,227,2                    // vcmpleps      %ymm3,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  197,108,88,218                      // vaddps        %ymm2,%ymm2,%ymm11
  .byte  197,36,194,219,2                    // vcmpleps      %ymm3,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_hsw
.globl _sk_overlay_hsw
FUNCTION(_sk_overlay_hsw)
_sk_overlay_hsw:
  .byte  196,98,125,24,5,233,67,0,0          // vbroadcastss  0x43e9(%rip),%ymm8        # 4c40 <_sk_callback_hsw+0x19c>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,61,184,220                   // vfmadd231ps   %ymm4,%ymm8,%ymm11
  .byte  197,92,88,204                       // vaddps        %ymm4,%ymm4,%ymm9
  .byte  197,52,194,231,2                    // vcmpleps      %ymm7,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  196,98,61,184,221                   // vfmadd231ps   %ymm5,%ymm8,%ymm11
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,98,61,184,214                   // vfmadd231ps   %ymm6,%ymm8,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_hsw
.globl _sk_softlight_hsw
FUNCTION(_sk_softlight_hsw)
_sk_softlight_hsw:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,252,40,209                      // vmovaps       %ymm1,%ymm2
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  197,52,194,215,1                    // vcmpltps      %ymm7,%ymm9,%ymm10
  .byte  197,92,94,199                       // vdivps        %ymm7,%ymm4,%ymm8
  .byte  196,67,53,74,232,160                // vblendvps     %ymm10,%ymm8,%ymm9,%ymm13
  .byte  196,65,20,88,197                    // vaddps        %ymm13,%ymm13,%ymm8
  .byte  196,65,60,88,192                    // vaddps        %ymm8,%ymm8,%ymm8
  .byte  196,66,61,168,192                   // vfmadd213ps   %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,29,244,66,0,0         // vbroadcastss  0x42f4(%rip),%ymm11        # 4c48 <_sk_callback_hsw+0x1a4>
  .byte  196,65,20,88,227                    // vaddps        %ymm11,%ymm13,%ymm12
  .byte  196,65,28,89,192                    // vmulps        %ymm8,%ymm12,%ymm8
  .byte  196,98,125,24,37,229,66,0,0         // vbroadcastss  0x42e5(%rip),%ymm12        # 4c4c <_sk_callback_hsw+0x1a8>
  .byte  196,66,21,184,196                   // vfmadd231ps   %ymm12,%ymm13,%ymm8
  .byte  196,65,124,82,245                   // vrsqrtps      %ymm13,%ymm14
  .byte  196,65,124,83,246                   // vrcpps        %ymm14,%ymm14
  .byte  196,65,12,92,245                    // vsubps        %ymm13,%ymm14,%ymm14
  .byte  197,92,88,252                       // vaddps        %ymm4,%ymm4,%ymm15
  .byte  196,65,4,88,255                     // vaddps        %ymm15,%ymm15,%ymm15
  .byte  197,4,194,255,2                     // vcmpleps      %ymm7,%ymm15,%ymm15
  .byte  196,67,13,74,240,240                // vblendvps     %ymm15,%ymm8,%ymm14,%ymm14
  .byte  197,116,88,249                      // vaddps        %ymm1,%ymm1,%ymm15
  .byte  196,98,125,24,5,168,66,0,0          // vbroadcastss  0x42a8(%rip),%ymm8        # 4c44 <_sk_callback_hsw+0x1a0>
  .byte  196,65,60,92,237                    // vsubps        %ymm13,%ymm8,%ymm13
  .byte  197,132,92,195                      // vsubps        %ymm3,%ymm15,%ymm0
  .byte  196,98,125,168,235                  // vfmadd213ps   %ymm3,%ymm0,%ymm13
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,20,89,236                       // vmulps        %ymm4,%ymm13,%ymm13
  .byte  196,226,101,184,196                 // vfmadd231ps   %ymm4,%ymm3,%ymm0
  .byte  197,4,194,243,2                     // vcmpleps      %ymm3,%ymm15,%ymm14
  .byte  196,195,125,74,197,224              // vblendvps     %ymm14,%ymm13,%ymm0,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,212,94,199                      // vdivps        %ymm7,%ymm5,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,240                      // vaddps        %ymm0,%ymm0,%ymm14
  .byte  196,65,12,88,246                    // vaddps        %ymm14,%ymm14,%ymm14
  .byte  196,66,13,168,246                   // vfmadd213ps   %ymm14,%ymm14,%ymm14
  .byte  196,65,124,88,251                   // vaddps        %ymm11,%ymm0,%ymm15
  .byte  196,65,4,89,246                     // vmulps        %ymm14,%ymm15,%ymm14
  .byte  196,66,125,184,244                  // vfmadd231ps   %ymm12,%ymm0,%ymm14
  .byte  197,124,82,248                      // vrsqrtps      %ymm0,%ymm15
  .byte  196,65,124,83,255                   // vrcpps        %ymm15,%ymm15
  .byte  197,4,92,248                        // vsubps        %ymm0,%ymm15,%ymm15
  .byte  197,84,88,237                       // vaddps        %ymm5,%ymm5,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,20,194,239,2                    // vcmpleps      %ymm7,%ymm13,%ymm13
  .byte  196,67,5,74,238,208                 // vblendvps     %ymm13,%ymm14,%ymm15,%ymm13
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,108,88,242                      // vaddps        %ymm2,%ymm2,%ymm14
  .byte  197,12,92,251                       // vsubps        %ymm3,%ymm14,%ymm15
  .byte  196,226,5,168,195                   // vfmadd213ps   %ymm3,%ymm15,%ymm0
  .byte  197,4,89,255                        // vmulps        %ymm7,%ymm15,%ymm15
  .byte  196,65,4,89,237                     // vmulps        %ymm13,%ymm15,%ymm13
  .byte  197,252,89,197                      // vmulps        %ymm5,%ymm0,%ymm0
  .byte  196,98,101,184,237                  // vfmadd231ps   %ymm5,%ymm3,%ymm13
  .byte  197,12,194,243,2                    // vcmpleps      %ymm3,%ymm14,%ymm14
  .byte  196,99,21,74,240,224                // vblendvps     %ymm14,%ymm0,%ymm13,%ymm14
  .byte  197,204,94,199                      // vdivps        %ymm7,%ymm6,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,66,53,168,201                   // vfmadd213ps   %ymm9,%ymm9,%ymm9
  .byte  196,65,124,88,211                   // vaddps        %ymm11,%ymm0,%ymm10
  .byte  196,65,44,89,201                    // vmulps        %ymm9,%ymm10,%ymm9
  .byte  196,66,125,184,204                  // vfmadd231ps   %ymm12,%ymm0,%ymm9
  .byte  197,124,82,208                      // vrsqrtps      %ymm0,%ymm10
  .byte  196,65,124,83,210                   // vrcpps        %ymm10,%ymm10
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  196,65,36,88,219                    // vaddps        %ymm11,%ymm11,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  196,67,45,74,201,176                // vblendvps     %ymm11,%ymm9,%ymm10,%ymm9
  .byte  197,124,16,100,36,200               // vmovups       -0x38(%rsp),%ymm12
  .byte  196,65,28,88,212                    // vaddps        %ymm12,%ymm12,%ymm10
  .byte  197,44,92,219                       // vsubps        %ymm3,%ymm10,%ymm11
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  196,226,37,168,195                  // vfmadd213ps   %ymm3,%ymm11,%ymm0
  .byte  197,36,89,223                       // vmulps        %ymm7,%ymm11,%ymm11
  .byte  196,65,36,89,201                    // vmulps        %ymm9,%ymm11,%ymm9
  .byte  197,252,89,198                      // vmulps        %ymm6,%ymm0,%ymm0
  .byte  196,98,101,184,206                  // vfmadd231ps   %ymm6,%ymm3,%ymm9
  .byte  197,44,194,211,2                    // vcmpleps      %ymm3,%ymm10,%ymm10
  .byte  196,99,53,74,200,160                // vblendvps     %ymm10,%ymm0,%ymm9,%ymm9
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,226,61,184,196                  // vfmadd231ps   %ymm4,%ymm8,%ymm0
  .byte  197,252,88,68,36,168                // vaddps        -0x58(%rsp),%ymm0,%ymm0
  .byte  197,172,89,202                      // vmulps        %ymm2,%ymm10,%ymm1
  .byte  196,226,61,184,205                  // vfmadd231ps   %ymm5,%ymm8,%ymm1
  .byte  196,193,116,88,206                  // vaddps        %ymm14,%ymm1,%ymm1
  .byte  196,193,44,89,212                   // vmulps        %ymm12,%ymm10,%ymm2
  .byte  196,226,61,184,214                  // vfmadd231ps   %ymm6,%ymm8,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_hsw
.globl _sk_hue_hsw
FUNCTION(_sk_hue_hsw)
_sk_hue_hsw:
  .byte  197,124,40,194                      // vmovaps       %ymm2,%ymm8
  .byte  197,124,17,68,36,200                // vmovups       %ymm8,-0x38(%rsp)
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,108,89,203                      // vmulps        %ymm3,%ymm2,%ymm9
  .byte  197,116,89,211                      // vmulps        %ymm3,%ymm1,%ymm10
  .byte  197,60,89,219                       // vmulps        %ymm3,%ymm8,%ymm11
  .byte  197,84,95,198                       // vmaxps        %ymm6,%ymm5,%ymm8
  .byte  196,65,92,95,192                    // vmaxps        %ymm8,%ymm4,%ymm8
  .byte  197,84,93,230                       // vminps        %ymm6,%ymm5,%ymm12
  .byte  196,65,92,93,228                    // vminps        %ymm12,%ymm4,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,227                       // vmulps        %ymm3,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,195,45,74,200,240               // vblendvps     %ymm15,%ymm8,%ymm10,%ymm1
  .byte  196,65,36,92,213                    // vsubps        %ymm13,%ymm11,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm12
  .byte  196,98,125,24,53,172,64,0,0         // vbroadcastss  0x40ac(%rip),%ymm14        # 4c50 <_sk_callback_hsw+0x1ac>
  .byte  196,98,125,24,61,167,64,0,0         // vbroadcastss  0x40a7(%rip),%ymm15        # 4c54 <_sk_callback_hsw+0x1b0>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,66,93,184,238                   // vfmadd231ps   %ymm14,%ymm4,%ymm13
  .byte  196,226,125,24,5,152,64,0,0         // vbroadcastss  0x4098(%rip),%ymm0        # 4c58 <_sk_callback_hsw+0x1b4>
  .byte  196,98,77,184,232                   // vfmadd231ps   %ymm0,%ymm6,%ymm13
  .byte  196,65,116,89,215                   // vmulps        %ymm15,%ymm1,%ymm10
  .byte  196,66,53,184,214                   // vfmadd231ps   %ymm14,%ymm9,%ymm10
  .byte  196,98,29,184,208                   // vfmadd231ps   %ymm0,%ymm12,%ymm10
  .byte  196,66,101,170,234                  // vfmsub213ps   %ymm10,%ymm3,%ymm13
  .byte  196,65,52,88,213                    // vaddps        %ymm13,%ymm9,%ymm10
  .byte  196,65,116,88,221                   // vaddps        %ymm13,%ymm1,%ymm11
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,193,36,93,204                   // vminps        %ymm12,%ymm11,%ymm1
  .byte  197,44,93,233                       // vminps        %ymm1,%ymm10,%ymm13
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  196,66,45,184,206                   // vfmadd231ps   %ymm14,%ymm10,%ymm9
  .byte  196,98,29,184,200                   // vfmadd231ps   %ymm0,%ymm12,%ymm9
  .byte  196,193,44,92,193                   // vsubps        %ymm9,%ymm10,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,193,52,92,205                   // vsubps        %ymm13,%ymm9,%ymm1
  .byte  197,252,94,193                      // vdivps        %ymm1,%ymm0,%ymm0
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  197,12,94,241                       // vdivps        %ymm1,%ymm14,%ymm14
  .byte  196,65,28,92,249                    // vsubps        %ymm9,%ymm12,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  197,132,94,201                      // vdivps        %ymm1,%ymm15,%ymm1
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,204,208              // vblendvps     %ymm13,%ymm12,%ymm1,%ymm1
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,194,208              // vblendvps     %ymm13,%ymm10,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,124,92,217                   // vsubps        %ymm9,%ymm0,%ymm11
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,250,1                 // vcmpltps      %ymm10,%ymm12,%ymm15
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,217                    // vsubps        %ymm9,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,116,92,241                   // vsubps        %ymm9,%ymm1,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,210                    // vdivps        %ymm10,%ymm13,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,195,117,74,201,240              // vblendvps     %ymm15,%ymm9,%ymm1,%ymm1
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,200                    // vmaxps        %ymm8,%ymm11,%ymm9
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  196,226,125,24,13,133,63,0,0        // vbroadcastss  0x3f85(%rip),%ymm1        # 4c5c <_sk_callback_hsw+0x1b8>
  .byte  197,116,92,215                      // vsubps        %ymm7,%ymm1,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,116,92,219                      // vsubps        %ymm3,%ymm1,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,192                      // vaddps        %ymm0,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,208                   // vaddps        %ymm8,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_hsw
.globl _sk_saturation_hsw
FUNCTION(_sk_saturation_hsw)
_sk_saturation_hsw:
  .byte  197,124,40,194                      // vmovaps       %ymm2,%ymm8
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,17,68,36,200                // vmovups       %ymm0,-0x38(%rsp)
  .byte  197,116,95,192                      // vmaxps        %ymm0,%ymm1,%ymm8
  .byte  196,65,108,95,192                   // vmaxps        %ymm8,%ymm2,%ymm8
  .byte  197,116,93,224                      // vminps        %ymm0,%ymm1,%ymm12
  .byte  196,65,108,93,228                   // vminps        %ymm12,%ymm2,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,231                       // vmulps        %ymm7,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,195,45,74,200,240               // vblendvps     %ymm15,%ymm8,%ymm10,%ymm1
  .byte  196,65,36,92,213                    // vsubps        %ymm13,%ymm11,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm12
  .byte  196,98,125,24,53,156,62,0,0         // vbroadcastss  0x3e9c(%rip),%ymm14        # 4c60 <_sk_callback_hsw+0x1bc>
  .byte  196,98,125,24,61,151,62,0,0         // vbroadcastss  0x3e97(%rip),%ymm15        # 4c64 <_sk_callback_hsw+0x1c0>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,66,93,184,238                   // vfmadd231ps   %ymm14,%ymm4,%ymm13
  .byte  196,226,125,24,5,136,62,0,0         // vbroadcastss  0x3e88(%rip),%ymm0        # 4c68 <_sk_callback_hsw+0x1c4>
  .byte  196,98,77,184,232                   // vfmadd231ps   %ymm0,%ymm6,%ymm13
  .byte  196,65,116,89,215                   // vmulps        %ymm15,%ymm1,%ymm10
  .byte  196,66,53,184,214                   // vfmadd231ps   %ymm14,%ymm9,%ymm10
  .byte  196,98,29,184,208                   // vfmadd231ps   %ymm0,%ymm12,%ymm10
  .byte  196,66,101,170,234                  // vfmsub213ps   %ymm10,%ymm3,%ymm13
  .byte  196,65,52,88,213                    // vaddps        %ymm13,%ymm9,%ymm10
  .byte  196,65,116,88,221                   // vaddps        %ymm13,%ymm1,%ymm11
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,193,36,93,204                   // vminps        %ymm12,%ymm11,%ymm1
  .byte  197,44,93,233                       // vminps        %ymm1,%ymm10,%ymm13
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  196,66,45,184,206                   // vfmadd231ps   %ymm14,%ymm10,%ymm9
  .byte  196,98,29,184,200                   // vfmadd231ps   %ymm0,%ymm12,%ymm9
  .byte  196,193,44,92,193                   // vsubps        %ymm9,%ymm10,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,193,52,92,205                   // vsubps        %ymm13,%ymm9,%ymm1
  .byte  197,252,94,193                      // vdivps        %ymm1,%ymm0,%ymm0
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  197,12,94,241                       // vdivps        %ymm1,%ymm14,%ymm14
  .byte  196,65,28,92,249                    // vsubps        %ymm9,%ymm12,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  197,132,94,201                      // vdivps        %ymm1,%ymm15,%ymm1
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,204,208              // vblendvps     %ymm13,%ymm12,%ymm1,%ymm1
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,194,208              // vblendvps     %ymm13,%ymm10,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,124,92,217                   // vsubps        %ymm9,%ymm0,%ymm11
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,250,1                 // vcmpltps      %ymm10,%ymm12,%ymm15
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,217                    // vsubps        %ymm9,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  196,65,52,88,219                    // vaddps        %ymm11,%ymm9,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,116,92,241                   // vsubps        %ymm9,%ymm1,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,210                    // vdivps        %ymm10,%ymm13,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,195,117,74,201,240              // vblendvps     %ymm15,%ymm9,%ymm1,%ymm1
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,200                    // vmaxps        %ymm8,%ymm11,%ymm9
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  196,226,125,24,13,117,61,0,0        // vbroadcastss  0x3d75(%rip),%ymm1        # 4c6c <_sk_callback_hsw+0x1c8>
  .byte  197,116,92,215                      // vsubps        %ymm7,%ymm1,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,116,92,219                      // vsubps        %ymm3,%ymm1,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,192                      // vaddps        %ymm0,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,208                   // vaddps        %ymm8,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_hsw
.globl _sk_color_hsw
FUNCTION(_sk_color_hsw)
_sk_color_hsw:
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,17,76,36,200                // vmovups       %ymm9,-0x38(%rsp)
  .byte  197,252,17,76,36,168                // vmovups       %ymm1,-0x58(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,108,89,199                      // vmulps        %ymm7,%ymm2,%ymm8
  .byte  197,116,89,215                      // vmulps        %ymm7,%ymm1,%ymm10
  .byte  197,52,89,223                       // vmulps        %ymm7,%ymm9,%ymm11
  .byte  196,98,125,24,45,14,61,0,0          // vbroadcastss  0x3d0e(%rip),%ymm13        # 4c70 <_sk_callback_hsw+0x1cc>
  .byte  196,98,125,24,53,9,61,0,0           // vbroadcastss  0x3d09(%rip),%ymm14        # 4c74 <_sk_callback_hsw+0x1d0>
  .byte  196,65,84,89,230                    // vmulps        %ymm14,%ymm5,%ymm12
  .byte  196,66,93,184,229                   // vfmadd231ps   %ymm13,%ymm4,%ymm12
  .byte  196,98,125,24,61,250,60,0,0         // vbroadcastss  0x3cfa(%rip),%ymm15        # 4c78 <_sk_callback_hsw+0x1d4>
  .byte  196,66,77,184,231                   // vfmadd231ps   %ymm15,%ymm6,%ymm12
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,66,61,184,205                   // vfmadd231ps   %ymm13,%ymm8,%ymm9
  .byte  196,66,37,184,207                   // vfmadd231ps   %ymm15,%ymm11,%ymm9
  .byte  196,66,101,170,225                  // vfmsub213ps   %ymm9,%ymm3,%ymm12
  .byte  196,65,60,88,204                    // vaddps        %ymm12,%ymm8,%ymm9
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,224                    // vminps        %ymm8,%ymm9,%ymm12
  .byte  196,65,44,89,198                    // vmulps        %ymm14,%ymm10,%ymm8
  .byte  196,66,53,184,197                   // vfmadd231ps   %ymm13,%ymm9,%ymm8
  .byte  196,66,37,184,199                   // vfmadd231ps   %ymm15,%ymm11,%ymm8
  .byte  196,65,52,92,232                    // vsubps        %ymm8,%ymm9,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,60,92,244                    // vsubps        %ymm12,%ymm8,%ymm14
  .byte  196,193,20,94,198                   // vdivps        %ymm14,%ymm13,%ymm0
  .byte  196,65,44,92,248                    // vsubps        %ymm8,%ymm10,%ymm15
  .byte  196,65,60,89,255                    // vmulps        %ymm15,%ymm8,%ymm15
  .byte  196,65,4,94,254                     // vdivps        %ymm14,%ymm15,%ymm15
  .byte  196,65,36,92,232                    // vsubps        %ymm8,%ymm11,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,20,94,238                    // vdivps        %ymm14,%ymm13,%ymm13
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,194,228,2                 // vcmpleps      %ymm12,%ymm14,%ymm12
  .byte  196,65,60,88,255                    // vaddps        %ymm15,%ymm8,%ymm15
  .byte  196,67,5,74,250,192                 // vblendvps     %ymm12,%ymm10,%ymm15,%ymm15
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,60,88,237                    // vaddps        %ymm13,%ymm8,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  196,195,125,74,201,192              // vblendvps     %ymm12,%ymm9,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,202                    // vmaxps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,92,208                   // vsubps        %ymm8,%ymm1,%ymm10
  .byte  196,65,28,92,232                    // vsubps        %ymm8,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,193,1                // vcmpltps      %ymm9,%ymm12,%ymm0
  .byte  196,65,52,92,200                    // vsubps        %ymm8,%ymm9,%ymm9
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,4,92,208                     // vsubps        %ymm8,%ymm15,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,67,5,74,210,0                   // vblendvps     %ymm0,%ymm10,%ymm15,%ymm10
  .byte  196,65,36,92,248                    // vsubps        %ymm8,%ymm11,%ymm15
  .byte  196,65,20,89,239                    // vmulps        %ymm15,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,193,116,95,206                  // vmaxps        %ymm14,%ymm1,%ymm1
  .byte  196,65,44,95,198                    // vmaxps        %ymm14,%ymm10,%ymm8
  .byte  196,65,124,95,206                   // vmaxps        %ymm14,%ymm0,%ymm9
  .byte  196,226,125,24,5,220,59,0,0         // vbroadcastss  0x3bdc(%rip),%ymm0        # 4c7c <_sk_callback_hsw+0x1d8>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,193                      // vaddps        %ymm1,%ymm2,%ymm0
  .byte  197,172,89,76,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,200                  // vaddps        %ymm8,%ymm1,%ymm1
  .byte  197,172,89,84,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,209                   // vaddps        %ymm9,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_hsw
.globl _sk_luminosity_hsw
FUNCTION(_sk_luminosity_hsw)
_sk_luminosity_hsw:
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,17,76,36,168                // vmovups       %ymm9,-0x58(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  196,98,125,24,45,117,59,0,0         // vbroadcastss  0x3b75(%rip),%ymm13        # 4c80 <_sk_callback_hsw+0x1dc>
  .byte  196,98,125,24,53,112,59,0,0         // vbroadcastss  0x3b70(%rip),%ymm14        # 4c84 <_sk_callback_hsw+0x1e0>
  .byte  196,65,116,89,230                   // vmulps        %ymm14,%ymm1,%ymm12
  .byte  196,66,109,184,229                  // vfmadd231ps   %ymm13,%ymm2,%ymm12
  .byte  196,98,125,24,61,97,59,0,0          // vbroadcastss  0x3b61(%rip),%ymm15        # 4c88 <_sk_callback_hsw+0x1e4>
  .byte  196,66,53,184,231                   // vfmadd231ps   %ymm15,%ymm9,%ymm12
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,66,61,184,205                   // vfmadd231ps   %ymm13,%ymm8,%ymm9
  .byte  196,66,37,184,207                   // vfmadd231ps   %ymm15,%ymm11,%ymm9
  .byte  196,66,69,170,225                   // vfmsub213ps   %ymm9,%ymm7,%ymm12
  .byte  196,65,60,88,204                    // vaddps        %ymm12,%ymm8,%ymm9
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,224                    // vminps        %ymm8,%ymm9,%ymm12
  .byte  196,65,44,89,198                    // vmulps        %ymm14,%ymm10,%ymm8
  .byte  196,66,53,184,197                   // vfmadd231ps   %ymm13,%ymm9,%ymm8
  .byte  196,66,37,184,199                   // vfmadd231ps   %ymm15,%ymm11,%ymm8
  .byte  196,65,52,92,232                    // vsubps        %ymm8,%ymm9,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,60,92,244                    // vsubps        %ymm12,%ymm8,%ymm14
  .byte  196,193,20,94,198                   // vdivps        %ymm14,%ymm13,%ymm0
  .byte  196,65,44,92,248                    // vsubps        %ymm8,%ymm10,%ymm15
  .byte  196,65,60,89,255                    // vmulps        %ymm15,%ymm8,%ymm15
  .byte  196,65,4,94,254                     // vdivps        %ymm14,%ymm15,%ymm15
  .byte  196,65,36,92,232                    // vsubps        %ymm8,%ymm11,%ymm13
  .byte  196,65,60,89,237                    // vmulps        %ymm13,%ymm8,%ymm13
  .byte  196,65,20,94,238                    // vdivps        %ymm14,%ymm13,%ymm13
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,194,228,2                 // vcmpleps      %ymm12,%ymm14,%ymm12
  .byte  196,65,60,88,255                    // vaddps        %ymm15,%ymm8,%ymm15
  .byte  196,67,5,74,250,192                 // vblendvps     %ymm12,%ymm10,%ymm15,%ymm15
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,60,88,237                    // vaddps        %ymm13,%ymm8,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  196,195,125,74,201,192              // vblendvps     %ymm12,%ymm9,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,202                    // vmaxps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,92,208                   // vsubps        %ymm8,%ymm1,%ymm10
  .byte  196,65,28,92,232                    // vsubps        %ymm8,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,193,1                // vcmpltps      %ymm9,%ymm12,%ymm0
  .byte  196,65,52,92,200                    // vsubps        %ymm8,%ymm9,%ymm9
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,4,92,208                     // vsubps        %ymm8,%ymm15,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,209                    // vdivps        %ymm9,%ymm10,%ymm10
  .byte  196,65,60,88,210                    // vaddps        %ymm10,%ymm8,%ymm10
  .byte  196,67,5,74,210,0                   // vblendvps     %ymm0,%ymm10,%ymm15,%ymm10
  .byte  196,65,36,92,248                    // vsubps        %ymm8,%ymm11,%ymm15
  .byte  196,65,20,89,239                    // vmulps        %ymm15,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,193,116,95,206                  // vmaxps        %ymm14,%ymm1,%ymm1
  .byte  196,65,44,95,198                    // vmaxps        %ymm14,%ymm10,%ymm8
  .byte  196,65,124,95,206                   // vmaxps        %ymm14,%ymm0,%ymm9
  .byte  196,226,125,24,5,67,58,0,0          // vbroadcastss  0x3a43(%rip),%ymm0        # 4c8c <_sk_callback_hsw+0x1e8>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  196,226,37,184,212                  // vfmadd231ps   %ymm4,%ymm11,%ymm2
  .byte  197,236,88,193                      // vaddps        %ymm1,%ymm2,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  196,226,37,184,205                  // vfmadd231ps   %ymm5,%ymm11,%ymm1
  .byte  196,193,116,88,200                  // vaddps        %ymm8,%ymm1,%ymm1
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  196,98,77,168,218                   // vfmadd213ps   %ymm2,%ymm6,%ymm11
  .byte  196,193,36,88,209                   // vaddps        %ymm9,%ymm11,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_rgba_8888_hsw
.globl _sk_srcover_rgba_8888_hsw
FUNCTION(_sk_srcover_rgba_8888_hsw)
_sk_srcover_rgba_8888_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,180,0,0,0                    // jne           1358 <_sk_srcover_rgba_8888_hsw+0xcd>
  .byte  196,193,124,16,58                   // vmovups       (%r10),%ymm7
  .byte  197,196,84,37,79,61,0,0             // vandps        0x3d4f(%rip),%ymm7,%ymm4        # 5000 <_sk_callback_hsw+0x55c>
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  196,226,69,0,45,98,61,0,0           // vpshufb       0x3d62(%rip),%ymm7,%ymm5        # 5020 <_sk_callback_hsw+0x57c>
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  196,226,69,0,53,117,61,0,0          // vpshufb       0x3d75(%rip),%ymm7,%ymm6        # 5040 <_sk_callback_hsw+0x59c>
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  197,197,114,215,24                  // vpsrld        $0x18,%ymm7,%ymm7
  .byte  197,252,91,255                      // vcvtdq2ps     %ymm7,%ymm7
  .byte  196,98,125,24,5,175,57,0,0          // vbroadcastss  0x39af(%rip),%ymm8        # 4c90 <_sk_callback_hsw+0x1ec>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,125,24,13,166,57,0,0         // vbroadcastss  0x39a6(%rip),%ymm9        # 4c94 <_sk_callback_hsw+0x1f0>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,194,93,184,192                  // vfmadd231ps   %ymm8,%ymm4,%ymm0
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,194,85,184,200                  // vfmadd231ps   %ymm8,%ymm5,%ymm1
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,194,77,184,208                  // vfmadd231ps   %ymm8,%ymm6,%ymm2
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  196,194,69,184,216                  // vfmadd231ps   %ymm8,%ymm7,%ymm3
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  197,125,91,201                      // vcvtps2dq     %ymm1,%ymm9
  .byte  196,193,53,114,241,8                // vpslld        $0x8,%ymm9,%ymm9
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  197,125,91,202                      // vcvtps2dq     %ymm2,%ymm9
  .byte  196,193,53,114,241,16               // vpslld        $0x10,%ymm9,%ymm9
  .byte  197,125,91,211                      // vcvtps2dq     %ymm3,%ymm10
  .byte  196,193,45,114,242,24               // vpslld        $0x18,%ymm10,%ymm10
  .byte  196,65,53,235,202                   // vpor          %ymm10,%ymm9,%ymm9
  .byte  196,65,61,235,193                   // vpor          %ymm9,%ymm8,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,53                              // jne           1381 <_sk_srcover_rgba_8888_hsw+0xf6>
  .byte  196,65,124,17,2                     // vmovups       %ymm8,(%r10)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,224                 // vmovq         %rax,%xmm4
  .byte  196,226,125,33,228                  // vpmovsxbd     %xmm4,%ymm4
  .byte  196,194,93,44,58                    // vmaskmovps    (%r10),%ymm4,%ymm7
  .byte  233,40,255,255,255                  // jmpq          12a9 <_sk_srcover_rgba_8888_hsw+0x1e>
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,125,33,201                   // vpmovsxbd     %xmm9,%ymm9
  .byte  196,66,53,46,2                      // vmaskmovps    %ymm8,%ymm9,(%r10)
  .byte  235,170                             // jmp           1351 <_sk_srcover_rgba_8888_hsw+0xc6>

HIDDEN _sk_clamp_0_hsw
.globl _sk_clamp_0_hsw
FUNCTION(_sk_clamp_0_hsw)
_sk_clamp_0_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_hsw
.globl _sk_clamp_1_hsw
FUNCTION(_sk_clamp_1_hsw)
_sk_clamp_1_hsw:
  .byte  196,98,125,24,5,203,56,0,0          // vbroadcastss  0x38cb(%rip),%ymm8        # 4c98 <_sk_callback_hsw+0x1f4>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_hsw
.globl _sk_clamp_a_hsw
FUNCTION(_sk_clamp_a_hsw)
_sk_clamp_a_hsw:
  .byte  196,98,125,24,5,174,56,0,0          // vbroadcastss  0x38ae(%rip),%ymm8        # 4c9c <_sk_callback_hsw+0x1f8>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_hsw
.globl _sk_set_rgb_hsw
FUNCTION(_sk_set_rgb_hsw)
_sk_set_rgb_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_hsw
.globl _sk_swap_rb_hsw
FUNCTION(_sk_swap_rb_hsw)
_sk_swap_rb_hsw:
  .byte  197,124,40,192                      // vmovaps       %ymm0,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,194                      // vmovaps       %ymm2,%ymm0
  .byte  197,124,41,194                      // vmovaps       %ymm8,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_hsw
.globl _sk_swap_hsw
FUNCTION(_sk_swap_hsw)
_sk_swap_hsw:
  .byte  197,124,40,195                      // vmovaps       %ymm3,%ymm8
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,40,209                      // vmovaps       %ymm1,%ymm10
  .byte  197,124,40,216                      // vmovaps       %ymm0,%ymm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  197,124,41,220                      // vmovaps       %ymm11,%ymm4
  .byte  197,124,41,213                      // vmovaps       %ymm10,%ymm5
  .byte  197,124,41,206                      // vmovaps       %ymm9,%ymm6
  .byte  197,124,41,199                      // vmovaps       %ymm8,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_hsw
.globl _sk_move_src_dst_hsw
FUNCTION(_sk_move_src_dst_hsw)
_sk_move_src_dst_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,242                      // vmovaps       %ymm2,%ymm6
  .byte  197,252,40,251                      // vmovaps       %ymm3,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_hsw
.globl _sk_move_dst_src_hsw
FUNCTION(_sk_move_dst_src_hsw)
_sk_move_dst_src_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_hsw
.globl _sk_premul_hsw
FUNCTION(_sk_premul_hsw)
_sk_premul_hsw:
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_hsw
.globl _sk_unpremul_hsw
FUNCTION(_sk_unpremul_hsw)
_sk_unpremul_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,100,194,200,0                // vcmpeqps      %ymm8,%ymm3,%ymm9
  .byte  196,98,125,24,21,246,55,0,0         // vbroadcastss  0x37f6(%rip),%ymm10        # 4ca0 <_sk_callback_hsw+0x1fc>
  .byte  197,44,94,211                       // vdivps        %ymm3,%ymm10,%ymm10
  .byte  196,67,45,74,192,144                // vblendvps     %ymm9,%ymm8,%ymm10,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_hsw
.globl _sk_from_srgb_hsw
FUNCTION(_sk_from_srgb_hsw)
_sk_from_srgb_hsw:
  .byte  196,98,125,24,5,215,55,0,0          // vbroadcastss  0x37d7(%rip),%ymm8        # 4ca4 <_sk_callback_hsw+0x200>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  197,124,89,208                      // vmulps        %ymm0,%ymm0,%ymm10
  .byte  196,98,125,24,29,201,55,0,0         // vbroadcastss  0x37c9(%rip),%ymm11        # 4ca8 <_sk_callback_hsw+0x204>
  .byte  196,98,125,24,37,196,55,0,0         // vbroadcastss  0x37c4(%rip),%ymm12        # 4cac <_sk_callback_hsw+0x208>
  .byte  196,65,124,40,236                   // vmovaps       %ymm12,%ymm13
  .byte  196,66,125,168,235                  // vfmadd213ps   %ymm11,%ymm0,%ymm13
  .byte  196,98,125,24,53,181,55,0,0         // vbroadcastss  0x37b5(%rip),%ymm14        # 4cb0 <_sk_callback_hsw+0x20c>
  .byte  196,66,45,168,238                   // vfmadd213ps   %ymm14,%ymm10,%ymm13
  .byte  196,98,125,24,21,171,55,0,0         // vbroadcastss  0x37ab(%rip),%ymm10        # 4cb4 <_sk_callback_hsw+0x210>
  .byte  196,193,124,194,194,1               // vcmpltps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,193,0                 // vblendvps     %ymm0,%ymm9,%ymm13,%ymm0
  .byte  196,65,116,89,200                   // vmulps        %ymm8,%ymm1,%ymm9
  .byte  197,116,89,233                      // vmulps        %ymm1,%ymm1,%ymm13
  .byte  196,65,124,40,252                   // vmovaps       %ymm12,%ymm15
  .byte  196,66,117,168,251                  // vfmadd213ps   %ymm11,%ymm1,%ymm15
  .byte  196,66,21,168,254                   // vfmadd213ps   %ymm14,%ymm13,%ymm15
  .byte  196,193,116,194,202,1               // vcmpltps      %ymm10,%ymm1,%ymm1
  .byte  196,195,5,74,201,16                 // vblendvps     %ymm1,%ymm9,%ymm15,%ymm1
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  197,108,89,202                      // vmulps        %ymm2,%ymm2,%ymm9
  .byte  196,66,109,168,227                  // vfmadd213ps   %ymm11,%ymm2,%ymm12
  .byte  196,66,53,168,230                   // vfmadd213ps   %ymm14,%ymm9,%ymm12
  .byte  196,193,108,194,210,1               // vcmpltps      %ymm10,%ymm2,%ymm2
  .byte  196,195,29,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm12,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_hsw
.globl _sk_to_srgb_hsw
FUNCTION(_sk_to_srgb_hsw)
_sk_to_srgb_hsw:
  .byte  197,124,82,200                      // vrsqrtps      %ymm0,%ymm9
  .byte  196,98,125,24,5,79,55,0,0           // vbroadcastss  0x374f(%rip),%ymm8        # 4cb8 <_sk_callback_hsw+0x214>
  .byte  196,65,124,89,208                   // vmulps        %ymm8,%ymm0,%ymm10
  .byte  196,98,125,24,29,69,55,0,0          // vbroadcastss  0x3745(%rip),%ymm11        # 4cbc <_sk_callback_hsw+0x218>
  .byte  196,98,125,24,37,64,55,0,0          // vbroadcastss  0x3740(%rip),%ymm12        # 4cc0 <_sk_callback_hsw+0x21c>
  .byte  196,65,124,40,236                   // vmovaps       %ymm12,%ymm13
  .byte  196,66,53,168,235                   // vfmadd213ps   %ymm11,%ymm9,%ymm13
  .byte  196,98,125,24,53,49,55,0,0          // vbroadcastss  0x3731(%rip),%ymm14        # 4cc4 <_sk_callback_hsw+0x220>
  .byte  196,66,53,168,238                   // vfmadd213ps   %ymm14,%ymm9,%ymm13
  .byte  196,98,125,24,61,39,55,0,0          // vbroadcastss  0x3727(%rip),%ymm15        # 4cc8 <_sk_callback_hsw+0x224>
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,20,89,201                    // vmulps        %ymm9,%ymm13,%ymm9
  .byte  196,98,125,24,45,19,55,0,0          // vbroadcastss  0x3713(%rip),%ymm13        # 4ccc <_sk_callback_hsw+0x228>
  .byte  196,193,124,194,197,1               // vcmpltps      %ymm13,%ymm0,%ymm0
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  197,124,82,201                      // vrsqrtps      %ymm1,%ymm9
  .byte  196,65,124,40,212                   // vmovaps       %ymm12,%ymm10
  .byte  196,66,53,168,211                   // vfmadd213ps   %ymm11,%ymm9,%ymm10
  .byte  196,66,53,168,214                   // vfmadd213ps   %ymm14,%ymm9,%ymm10
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,44,89,201                    // vmulps        %ymm9,%ymm10,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,193,116,194,205,1               // vcmpltps      %ymm13,%ymm1,%ymm1
  .byte  196,195,53,74,202,16                // vblendvps     %ymm1,%ymm10,%ymm9,%ymm1
  .byte  197,124,82,202                      // vrsqrtps      %ymm2,%ymm9
  .byte  196,66,53,168,227                   // vfmadd213ps   %ymm11,%ymm9,%ymm12
  .byte  196,66,53,168,230                   // vfmadd213ps   %ymm14,%ymm9,%ymm12
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,193,108,194,213,1               // vcmpltps      %ymm13,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_hsw
.globl _sk_rgb_to_hsl_hsw
FUNCTION(_sk_rgb_to_hsl_hsw)
_sk_rgb_to_hsl_hsw:
  .byte  197,124,95,193                      // vmaxps        %ymm1,%ymm0,%ymm8
  .byte  197,60,95,194                       // vmaxps        %ymm2,%ymm8,%ymm8
  .byte  197,124,93,201                      // vminps        %ymm1,%ymm0,%ymm9
  .byte  197,52,93,202                       // vminps        %ymm2,%ymm9,%ymm9
  .byte  196,65,60,92,209                    // vsubps        %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,29,136,54,0,0         // vbroadcastss  0x3688(%rip),%ymm11        # 4cd0 <_sk_callback_hsw+0x22c>
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  197,116,92,226                      // vsubps        %ymm2,%ymm1,%ymm12
  .byte  197,116,194,234,1                   // vcmpltps      %ymm2,%ymm1,%ymm13
  .byte  196,98,125,24,53,117,54,0,0         // vbroadcastss  0x3675(%rip),%ymm14        # 4cd4 <_sk_callback_hsw+0x230>
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,67,5,74,238,208                 // vblendvps     %ymm13,%ymm14,%ymm15,%ymm13
  .byte  196,66,37,168,229                   // vfmadd213ps   %ymm13,%ymm11,%ymm12
  .byte  197,236,92,208                      // vsubps        %ymm0,%ymm2,%ymm2
  .byte  197,124,92,233                      // vsubps        %ymm1,%ymm0,%ymm13
  .byte  196,98,125,24,53,92,54,0,0          // vbroadcastss  0x365c(%rip),%ymm14        # 4cdc <_sk_callback_hsw+0x238>
  .byte  196,66,37,168,238                   // vfmadd213ps   %ymm14,%ymm11,%ymm13
  .byte  196,98,125,24,53,74,54,0,0          // vbroadcastss  0x364a(%rip),%ymm14        # 4cd8 <_sk_callback_hsw+0x234>
  .byte  196,194,37,168,214                  // vfmadd213ps   %ymm14,%ymm11,%ymm2
  .byte  197,188,194,201,0                   // vcmpeqps      %ymm1,%ymm8,%ymm1
  .byte  196,227,21,74,202,16                // vblendvps     %ymm1,%ymm2,%ymm13,%ymm1
  .byte  197,188,194,192,0                   // vcmpeqps      %ymm0,%ymm8,%ymm0
  .byte  196,195,117,74,196,0                // vblendvps     %ymm0,%ymm12,%ymm1,%ymm0
  .byte  196,193,60,88,201                   // vaddps        %ymm9,%ymm8,%ymm1
  .byte  196,98,125,24,29,45,54,0,0          // vbroadcastss  0x362d(%rip),%ymm11        # 4ce4 <_sk_callback_hsw+0x240>
  .byte  196,193,116,89,211                  // vmulps        %ymm11,%ymm1,%ymm2
  .byte  197,36,194,218,1                    // vcmpltps      %ymm2,%ymm11,%ymm11
  .byte  196,65,12,92,224                    // vsubps        %ymm8,%ymm14,%ymm12
  .byte  196,65,28,92,225                    // vsubps        %ymm9,%ymm12,%ymm12
  .byte  196,195,117,74,204,176              // vblendvps     %ymm11,%ymm12,%ymm1,%ymm1
  .byte  196,65,60,194,193,0                 // vcmpeqps      %ymm9,%ymm8,%ymm8
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  196,195,125,74,199,128              // vblendvps     %ymm8,%ymm15,%ymm0,%ymm0
  .byte  196,195,117,74,207,128              // vblendvps     %ymm8,%ymm15,%ymm1,%ymm1
  .byte  196,98,125,24,5,240,53,0,0          // vbroadcastss  0x35f0(%rip),%ymm8        # 4ce0 <_sk_callback_hsw+0x23c>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_hsw
.globl _sk_hsl_to_rgb_hsw
FUNCTION(_sk_hsl_to_rgb_hsw)
_sk_hsl_to_rgb_hsw:
  .byte  72,131,236,56                       // sub           $0x38,%rsp
  .byte  197,252,17,60,36                    // vmovups       %ymm7,(%rsp)
  .byte  197,252,17,116,36,224               // vmovups       %ymm6,-0x20(%rsp)
  .byte  197,252,17,108,36,192               // vmovups       %ymm5,-0x40(%rsp)
  .byte  197,252,17,100,36,160               // vmovups       %ymm4,-0x60(%rsp)
  .byte  197,252,17,92,36,128                // vmovups       %ymm3,-0x80(%rsp)
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  196,98,125,24,5,189,53,0,0          // vbroadcastss  0x35bd(%rip),%ymm8        # 4ce8 <_sk_callback_hsw+0x244>
  .byte  197,60,194,202,2                    // vcmpleps      %ymm2,%ymm8,%ymm9
  .byte  197,84,89,210                       // vmulps        %ymm2,%ymm5,%ymm10
  .byte  196,65,84,92,218                    // vsubps        %ymm10,%ymm5,%ymm11
  .byte  196,67,45,74,203,144                // vblendvps     %ymm9,%ymm11,%ymm10,%ymm9
  .byte  197,52,88,210                       // vaddps        %ymm2,%ymm9,%ymm10
  .byte  196,98,125,24,13,160,53,0,0         // vbroadcastss  0x35a0(%rip),%ymm9        # 4cec <_sk_callback_hsw+0x248>
  .byte  196,66,109,170,202                  // vfmsub213ps   %ymm10,%ymm2,%ymm9
  .byte  196,98,125,24,29,150,53,0,0         // vbroadcastss  0x3596(%rip),%ymm11        # 4cf0 <_sk_callback_hsw+0x24c>
  .byte  196,65,92,88,219                    // vaddps        %ymm11,%ymm4,%ymm11
  .byte  196,67,125,8,227,1                  // vroundps      $0x1,%ymm11,%ymm12
  .byte  196,65,36,92,252                    // vsubps        %ymm12,%ymm11,%ymm15
  .byte  196,65,44,92,217                    // vsubps        %ymm9,%ymm10,%ymm11
  .byte  196,98,125,24,45,128,53,0,0         // vbroadcastss  0x3580(%rip),%ymm13        # 4cf8 <_sk_callback_hsw+0x254>
  .byte  196,193,4,89,197                    // vmulps        %ymm13,%ymm15,%ymm0
  .byte  196,98,125,24,53,118,53,0,0         // vbroadcastss  0x3576(%rip),%ymm14        # 4cfc <_sk_callback_hsw+0x258>
  .byte  197,12,92,224                       // vsubps        %ymm0,%ymm14,%ymm12
  .byte  196,66,37,168,225                   // vfmadd213ps   %ymm9,%ymm11,%ymm12
  .byte  196,226,125,24,29,92,53,0,0         // vbroadcastss  0x355c(%rip),%ymm3        # 4cf4 <_sk_callback_hsw+0x250>
  .byte  196,193,100,194,255,2               // vcmpleps      %ymm15,%ymm3,%ymm7
  .byte  196,195,29,74,249,112               // vblendvps     %ymm7,%ymm9,%ymm12,%ymm7
  .byte  196,65,60,194,231,2                 // vcmpleps      %ymm15,%ymm8,%ymm12
  .byte  196,227,45,74,255,192               // vblendvps     %ymm12,%ymm7,%ymm10,%ymm7
  .byte  196,98,125,24,37,71,53,0,0          // vbroadcastss  0x3547(%rip),%ymm12        # 4d00 <_sk_callback_hsw+0x25c>
  .byte  196,65,28,194,255,2                 // vcmpleps      %ymm15,%ymm12,%ymm15
  .byte  196,194,37,168,193                  // vfmadd213ps   %ymm9,%ymm11,%ymm0
  .byte  196,99,125,74,255,240               // vblendvps     %ymm15,%ymm7,%ymm0,%ymm15
  .byte  196,227,125,8,196,1                 // vroundps      $0x1,%ymm4,%ymm0
  .byte  197,220,92,192                      // vsubps        %ymm0,%ymm4,%ymm0
  .byte  196,193,124,89,253                  // vmulps        %ymm13,%ymm0,%ymm7
  .byte  197,140,92,207                      // vsubps        %ymm7,%ymm14,%ymm1
  .byte  196,194,37,168,201                  // vfmadd213ps   %ymm9,%ymm11,%ymm1
  .byte  197,228,194,240,2                   // vcmpleps      %ymm0,%ymm3,%ymm6
  .byte  196,195,117,74,201,96               // vblendvps     %ymm6,%ymm9,%ymm1,%ymm1
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,201,96                // vblendvps     %ymm6,%ymm1,%ymm10,%ymm1
  .byte  197,156,194,192,2                   // vcmpleps      %ymm0,%ymm12,%ymm0
  .byte  196,194,37,168,249                  // vfmadd213ps   %ymm9,%ymm11,%ymm7
  .byte  196,227,69,74,201,0                 // vblendvps     %ymm0,%ymm1,%ymm7,%ymm1
  .byte  196,226,125,24,5,243,52,0,0         // vbroadcastss  0x34f3(%rip),%ymm0        # 4d04 <_sk_callback_hsw+0x260>
  .byte  197,220,88,192                      // vaddps        %ymm0,%ymm4,%ymm0
  .byte  196,227,125,8,224,1                 // vroundps      $0x1,%ymm0,%ymm4
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  197,228,194,216,2                   // vcmpleps      %ymm0,%ymm3,%ymm3
  .byte  196,193,124,89,229                  // vmulps        %ymm13,%ymm0,%ymm4
  .byte  197,140,92,244                      // vsubps        %ymm4,%ymm14,%ymm6
  .byte  196,194,37,168,241                  // vfmadd213ps   %ymm9,%ymm11,%ymm6
  .byte  196,195,77,74,217,48                // vblendvps     %ymm3,%ymm9,%ymm6,%ymm3
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,219,96                // vblendvps     %ymm6,%ymm3,%ymm10,%ymm3
  .byte  196,98,37,184,204                   // vfmadd231ps   %ymm4,%ymm11,%ymm9
  .byte  197,156,194,192,2                   // vcmpleps      %ymm0,%ymm12,%ymm0
  .byte  196,227,53,74,219,0                 // vblendvps     %ymm0,%ymm3,%ymm9,%ymm3
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,212,194,224,0                   // vcmpeqps      %ymm0,%ymm5,%ymm4
  .byte  196,227,5,74,194,64                 // vblendvps     %ymm4,%ymm2,%ymm15,%ymm0
  .byte  196,227,117,74,202,64               // vblendvps     %ymm4,%ymm2,%ymm1,%ymm1
  .byte  196,227,101,74,210,64               // vblendvps     %ymm4,%ymm2,%ymm3,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,92,36,128                // vmovups       -0x80(%rsp),%ymm3
  .byte  197,252,16,100,36,160               // vmovups       -0x60(%rsp),%ymm4
  .byte  197,252,16,108,36,192               // vmovups       -0x40(%rsp),%ymm5
  .byte  197,252,16,116,36,224               // vmovups       -0x20(%rsp),%ymm6
  .byte  197,252,16,60,36                    // vmovups       (%rsp),%ymm7
  .byte  72,131,196,56                       // add           $0x38,%rsp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_hsw
.globl _sk_scale_1_float_hsw
FUNCTION(_sk_scale_1_float_hsw)
_sk_scale_1_float_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_hsw
.globl _sk_scale_u8_hsw
FUNCTION(_sk_scale_u8_hsw)
_sk_scale_u8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,58                              // jne           18f2 <_sk_scale_u8_hsw+0x44>
  .byte  196,66,121,48,4,19                  // vpmovzxbw     (%r11,%rdx,1),%xmm8
  .byte  197,57,219,5,26,57,0,0              // vpand         0x391a(%rip),%xmm8,%xmm8        # 51e0 <_sk_callback_hsw+0x73c>
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,47,52,0,0          // vbroadcastss  0x342f(%rip),%ymm9        # 4d08 <_sk_callback_hsw+0x264>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,183                             // ja            18be <_sk_scale_u8_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,98,0,0,0                  // lea           0x62(%rip),%r10        # 1974 <_sk_scale_u8_hsw+0xc6>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,6                    // vpinsrw       $0x6,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,57,196,192,5                    // vpinsrw       $0x5,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,57,196,192,4                    // vpinsrw       $0x4,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  197,57,196,192,3                    // vpinsrw       $0x3,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,57,196,192,2                    // vpinsrw       $0x2,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  197,57,196,192,1                    // vpinsrw       $0x1,%eax,%xmm8,%xmm8
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,57,196,192,0                    // vpinsrw       $0x0,%eax,%xmm8,%xmm8
  .byte  233,77,255,255,255                  // jmpq          18be <_sk_scale_u8_hsw+0x10>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,227                             // jmpq          *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  216,255                             // fdivr         %st(7),%st
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,183,255,255,255,167             // pushq         -0x58000001(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_1_float_hsw
.globl _sk_lerp_1_float_hsw
FUNCTION(_sk_lerp_1_float_hsw)
_sk_lerp_1_float_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_hsw
.globl _sk_lerp_u8_hsw
FUNCTION(_sk_lerp_u8_hsw)
_sk_lerp_u8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,78                              // jne           1a17 <_sk_lerp_u8_hsw+0x58>
  .byte  196,66,121,48,4,19                  // vpmovzxbw     (%r11,%rdx,1),%xmm8
  .byte  197,57,219,5,25,56,0,0              // vpand         0x3819(%rip),%xmm8,%xmm8        # 51f0 <_sk_callback_hsw+0x74c>
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,34,51,0,0          // vbroadcastss  0x3322(%rip),%ymm9        # 4d0c <_sk_callback_hsw+0x268>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,61,168,196                  // vfmadd213ps   %ymm4,%ymm8,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,61,168,205                  // vfmadd213ps   %ymm5,%ymm8,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,226,61,168,223                  // vfmadd213ps   %ymm7,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,163                             // ja            19cf <_sk_lerp_u8_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,97,0,0,0                  // lea           0x61(%rip),%r10        # 1a98 <_sk_lerp_u8_hsw+0xd9>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,6                    // vpinsrw       $0x6,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,57,196,192,5                    // vpinsrw       $0x5,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,57,196,192,4                    // vpinsrw       $0x4,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  197,57,196,192,3                    // vpinsrw       $0x3,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,57,196,192,2                    // vpinsrw       $0x2,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  197,57,196,192,1                    // vpinsrw       $0x1,%eax,%xmm8,%xmm8
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,57,196,192,0                    // vpinsrw       $0x0,%eax,%xmm8,%xmm8
  .byte  233,57,255,255,255                  // jmpq          19cf <_sk_lerp_u8_hsw+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  239                                 // out           %eax,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  217,255                             // fcos
  .byte  255                                 // (bad)
  .byte  255,206                             // dec           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  184,255,255,255,168                 // mov           $0xa8ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_565_hsw
.globl _sk_lerp_565_hsw
FUNCTION(_sk_lerp_565_hsw)
_sk_lerp_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,169,0,0,0                    // jne           1b6b <_sk_lerp_565_hsw+0xb7>
  .byte  196,65,122,111,4,83                 // vmovdqu       (%r11,%rdx,2),%xmm8
  .byte  196,66,125,51,192                   // vpmovzxwd     %xmm8,%ymm8
  .byte  196,98,125,88,13,58,50,0,0          // vpbroadcastd  0x323a(%rip),%ymm9        # 4d10 <_sk_callback_hsw+0x26c>
  .byte  196,65,61,219,201                   // vpand         %ymm9,%ymm8,%ymm9
  .byte  196,65,124,91,201                   // vcvtdq2ps     %ymm9,%ymm9
  .byte  196,98,125,24,21,43,50,0,0          // vbroadcastss  0x322b(%rip),%ymm10        # 4d14 <_sk_callback_hsw+0x270>
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,88,21,33,50,0,0          // vpbroadcastd  0x3221(%rip),%ymm10        # 4d18 <_sk_callback_hsw+0x274>
  .byte  196,65,61,219,210                   // vpand         %ymm10,%ymm8,%ymm10
  .byte  196,65,124,91,210                   // vcvtdq2ps     %ymm10,%ymm10
  .byte  196,98,125,24,29,18,50,0,0          // vbroadcastss  0x3212(%rip),%ymm11        # 4d1c <_sk_callback_hsw+0x278>
  .byte  196,65,44,89,211                    // vmulps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,88,29,8,50,0,0           // vpbroadcastd  0x3208(%rip),%ymm11        # 4d20 <_sk_callback_hsw+0x27c>
  .byte  196,65,61,219,195                   // vpand         %ymm11,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,29,249,49,0,0         // vbroadcastss  0x31f9(%rip),%ymm11        # 4d24 <_sk_callback_hsw+0x280>
  .byte  196,65,60,89,195                    // vmulps        %ymm11,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,226,53,168,196                  // vfmadd213ps   %ymm4,%ymm9,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,226,45,168,205                  // vfmadd213ps   %ymm5,%ymm10,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,226,61,168,214                  // vfmadd213ps   %ymm6,%ymm8,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,98,101,168,207                  // vfmadd213ps   %ymm7,%ymm3,%ymm9
  .byte  196,98,101,168,215                  // vfmadd213ps   %ymm7,%ymm3,%ymm10
  .byte  196,98,101,168,199                  // vfmadd213ps   %ymm7,%ymm3,%ymm8
  .byte  196,193,44,95,216                   // vmaxps        %ymm8,%ymm10,%ymm3
  .byte  197,180,95,219                      // vmaxps        %ymm3,%ymm9,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,68,255,255,255               // ja            1ac8 <_sk_lerp_565_hsw+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,77,0,0,0                  // lea           0x4d(%rip),%r10        # 1bdc <_sk_lerp_565_hsw+0x128>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,65,57,196,68,83,12,6            // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,10,5            // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,8,4             // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,6,3             // vpinsrw       $0x3,0x6(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,4,2             // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,2,1             // vpinsrw       $0x1,0x2(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,4,83,0                // vpinsrw       $0x0,(%r11,%rdx,2),%xmm8,%xmm8
  .byte  233,239,254,255,255                 // jmpq          1ac8 <_sk_lerp_565_hsw+0x14>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  241                                 // icebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  233,255,255,255,225                 // jmpq          ffffffffe2001be4 <_sk_callback_hsw+0xffffffffe1ffd140>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  217,255                             // fcos
  .byte  255                                 // (bad)
  .byte  255,209                             // callq         *%rcx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  188                                 // .byte         0xbc
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_tables_hsw
.globl _sk_load_tables_hsw
FUNCTION(_sk_load_tables_hsw)
_sk_load_tables_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,105                             // jne           1c76 <_sk_load_tables_hsw+0x7e>
  .byte  196,193,124,16,26                   // vmovups       (%r10),%ymm3
  .byte  197,228,84,13,70,52,0,0             // vandps        0x3446(%rip),%ymm3,%ymm1        # 5060 <_sk_callback_hsw+0x5bc>
  .byte  196,65,61,118,192                   // vpcmpeqd      %ymm8,%ymm8,%ymm8
  .byte  72,139,72,8                         // mov           0x8(%rax),%rcx
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,226,109,146,4,137               // vgatherdps    %ymm2,(%rcx,%ymm1,4),%ymm0
  .byte  196,226,101,0,21,70,52,0,0          // vpshufb       0x3446(%rip),%ymm3,%ymm2        # 5080 <_sk_callback_hsw+0x5dc>
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,194,53,146,12,146               // vgatherdps    %ymm9,(%r10,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,98,101,0,13,78,52,0,0           // vpshufb       0x344e(%rip),%ymm3,%ymm9        # 50a0 <_sk_callback_hsw+0x5fc>
  .byte  196,162,61,146,20,136               // vgatherdps    %ymm8,(%rax,%ymm9,4),%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,190,48,0,0          // vbroadcastss  0x30be(%rip),%ymm8        # 4d28 <_sk_callback_hsw+0x284>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  73,199,195,255,255,255,255          // mov           $0xffffffffffffffff,%r11
  .byte  73,211,235                          // shr           %cl,%r11
  .byte  196,193,249,110,195                 // vmovq         %r11,%xmm0
  .byte  196,226,125,33,192                  // vpmovsxbd     %xmm0,%ymm0
  .byte  196,194,125,44,26                   // vmaskmovps    (%r10),%ymm0,%ymm3
  .byte  233,115,255,255,255                 // jmpq          1c12 <_sk_load_tables_hsw+0x1a>

HIDDEN _sk_load_tables_u16_be_hsw
.globl _sk_load_tables_u16_be_hsw
FUNCTION(_sk_load_tables_u16_be_hsw)
_sk_load_tables_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,201,0,0,0                    // jne           1d7e <_sk_load_tables_u16_be_hsw+0xdf>
  .byte  196,1,121,16,4,81                   // vmovupd       (%r9,%r10,2),%xmm8
  .byte  196,129,121,16,84,81,16             // vmovupd       0x10(%r9,%r10,2),%xmm2
  .byte  196,129,121,16,92,81,32             // vmovupd       0x20(%r9,%r10,2),%xmm3
  .byte  196,1,122,111,76,81,48              // vmovdqu       0x30(%r9,%r10,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,195                      // vpunpcklwd    %xmm3,%xmm1,%xmm0
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,200                     // vpunpcklqdq   %xmm0,%xmm8,%xmm1
  .byte  197,185,109,208                     // vpunpckhqdq   %xmm0,%xmm8,%xmm2
  .byte  197,49,108,195                      // vpunpcklqdq   %xmm3,%xmm9,%xmm8
  .byte  197,121,111,21,250,52,0,0           // vmovdqa       0x34fa(%rip),%xmm10        # 5200 <_sk_callback_hsw+0x75c>
  .byte  196,193,113,219,194                 // vpand         %xmm10,%xmm1,%xmm0
  .byte  196,226,125,51,200                  // vpmovzxwd     %xmm0,%ymm1
  .byte  196,65,37,118,219                   // vpcmpeqd      %ymm11,%ymm11,%ymm11
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  196,65,29,118,228                   // vpcmpeqd      %ymm12,%ymm12,%ymm12
  .byte  196,194,29,146,4,137                // vgatherdps    %ymm12,(%r9,%ymm1,4),%ymm0
  .byte  196,193,105,219,202                 // vpand         %xmm10,%xmm2,%xmm1
  .byte  196,226,125,51,209                  // vpmovzxwd     %xmm1,%ymm2
  .byte  196,65,29,118,228                   // vpcmpeqd      %ymm12,%ymm12,%ymm12
  .byte  196,194,29,146,12,146               // vgatherdps    %ymm12,(%r10,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,57,219,210                  // vpand         %xmm10,%xmm8,%xmm2
  .byte  196,98,125,51,194                   // vpmovzxwd     %xmm2,%ymm8
  .byte  196,162,37,146,20,128               // vgatherdps    %ymm11,(%rax,%ymm8,4),%ymm2
  .byte  197,177,109,219                     // vpunpckhqdq   %xmm3,%xmm9,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,226,125,51,219                  // vpmovzxwd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,183,47,0,0          // vbroadcastss  0x2fb7(%rip),%ymm8        # 4d2c <_sk_callback_hsw+0x288>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,1,123,16,4,81                   // vmovsd        (%r9,%r10,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,85                              // je            1de4 <_sk_load_tables_u16_be_hsw+0x145>
  .byte  196,1,57,22,68,81,8                 // vmovhpd       0x8(%r9,%r10,2),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,72                              // jb            1de4 <_sk_load_tables_u16_be_hsw+0x145>
  .byte  196,129,123,16,84,81,16             // vmovsd        0x10(%r9,%r10,2),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,72                              // je            1df1 <_sk_load_tables_u16_be_hsw+0x152>
  .byte  196,129,105,22,84,81,24             // vmovhpd       0x18(%r9,%r10,2),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,59                              // jb            1df1 <_sk_load_tables_u16_be_hsw+0x152>
  .byte  196,129,123,16,92,81,32             // vmovsd        0x20(%r9,%r10,2),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,9,255,255,255                // je            1cd0 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  196,129,97,22,92,81,40              // vmovhpd       0x28(%r9,%r10,2),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,248,254,255,255              // jb            1cd0 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  196,1,122,126,76,81,48              // vmovq         0x30(%r9,%r10,2),%xmm9
  .byte  233,236,254,255,255                 // jmpq          1cd0 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,223,254,255,255                 // jmpq          1cd0 <_sk_load_tables_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,214,254,255,255                 // jmpq          1cd0 <_sk_load_tables_u16_be_hsw+0x31>

HIDDEN _sk_load_tables_rgb_u16_be_hsw
.globl _sk_load_tables_rgb_u16_be_hsw
FUNCTION(_sk_load_tables_rgb_u16_be_hsw)
_sk_load_tables_rgb_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,82                        // lea           (%rdx,%rdx,2),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,193,0,0,0                    // jne           1ecd <_sk_load_tables_rgb_u16_be_hsw+0xd3>
  .byte  196,129,122,111,4,81                // vmovdqu       (%r9,%r10,2),%xmm0
  .byte  196,129,122,111,84,81,12            // vmovdqu       0xc(%r9,%r10,2),%xmm2
  .byte  196,129,122,111,76,81,24            // vmovdqu       0x18(%r9,%r10,2),%xmm1
  .byte  196,129,122,111,92,81,32            // vmovdqu       0x20(%r9,%r10,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,249,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm0
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,203                     // vpunpckhwd    %xmm3,%xmm1,%xmm1
  .byte  197,185,108,218                     // vpunpcklqdq   %xmm2,%xmm8,%xmm3
  .byte  197,185,109,210                     // vpunpckhqdq   %xmm2,%xmm8,%xmm2
  .byte  197,121,108,193                     // vpunpcklqdq   %xmm1,%xmm0,%xmm8
  .byte  197,121,111,13,154,51,0,0           // vmovdqa       0x339a(%rip),%xmm9        # 5210 <_sk_callback_hsw+0x76c>
  .byte  196,193,97,219,193                  // vpand         %xmm9,%xmm3,%xmm0
  .byte  196,226,125,51,200                  // vpmovzxwd     %xmm0,%ymm1
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  196,65,45,118,210                   // vpcmpeqd      %ymm10,%ymm10,%ymm10
  .byte  196,194,45,146,4,137                // vgatherdps    %ymm10,(%r9,%ymm1,4),%ymm0
  .byte  196,193,105,219,201                 // vpand         %xmm9,%xmm2,%xmm1
  .byte  196,226,125,51,209                  // vpmovzxwd     %xmm1,%ymm2
  .byte  196,65,45,118,210                   // vpcmpeqd      %ymm10,%ymm10,%ymm10
  .byte  196,194,45,146,12,146               // vgatherdps    %ymm10,(%r10,%ymm2,4),%ymm1
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,57,219,209                  // vpand         %xmm9,%xmm8,%xmm2
  .byte  196,98,125,51,194                   // vpmovzxwd     %xmm2,%ymm8
  .byte  196,162,101,146,20,128              // vgatherdps    %ymm3,(%rax,%ymm8,4),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,101,46,0,0        // vbroadcastss  0x2e65(%rip),%ymm3        # 4d30 <_sk_callback_hsw+0x28c>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,129,121,110,4,81                // vmovd         (%r9,%r10,2),%xmm0
  .byte  196,129,121,196,68,81,4,2           // vpinsrw       $0x2,0x4(%r9,%r10,2),%xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,5                               // jne           1ee6 <_sk_load_tables_rgb_u16_be_hsw+0xec>
  .byte  233,90,255,255,255                  // jmpq          1e40 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,76,81,6             // vmovd         0x6(%r9,%r10,2),%xmm1
  .byte  196,1,113,196,68,81,10,2            // vpinsrw       $0x2,0xa(%r9,%r10,2),%xmm1,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,26                              // jb            1f15 <_sk_load_tables_rgb_u16_be_hsw+0x11b>
  .byte  196,129,121,110,76,81,12            // vmovd         0xc(%r9,%r10,2),%xmm1
  .byte  196,129,113,196,84,81,16,2          // vpinsrw       $0x2,0x10(%r9,%r10,2),%xmm1,%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  117,10                              // jne           1f1a <_sk_load_tables_rgb_u16_be_hsw+0x120>
  .byte  233,43,255,255,255                  // jmpq          1e40 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,38,255,255,255                  // jmpq          1e40 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,76,81,18            // vmovd         0x12(%r9,%r10,2),%xmm1
  .byte  196,1,113,196,76,81,22,2            // vpinsrw       $0x2,0x16(%r9,%r10,2),%xmm1,%xmm9
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,26                              // jb            1f49 <_sk_load_tables_rgb_u16_be_hsw+0x14f>
  .byte  196,129,121,110,76,81,24            // vmovd         0x18(%r9,%r10,2),%xmm1
  .byte  196,129,113,196,76,81,28,2          // vpinsrw       $0x2,0x1c(%r9,%r10,2),%xmm1,%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  117,10                              // jne           1f4e <_sk_load_tables_rgb_u16_be_hsw+0x154>
  .byte  233,247,254,255,255                 // jmpq          1e40 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,242,254,255,255                 // jmpq          1e40 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  196,129,121,110,92,81,30            // vmovd         0x1e(%r9,%r10,2),%xmm3
  .byte  196,1,97,196,92,81,34,2             // vpinsrw       $0x2,0x22(%r9,%r10,2),%xmm3,%xmm11
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,20                              // jb            1f77 <_sk_load_tables_rgb_u16_be_hsw+0x17d>
  .byte  196,129,121,110,92,81,36            // vmovd         0x24(%r9,%r10,2),%xmm3
  .byte  196,129,97,196,92,81,40,2           // vpinsrw       $0x2,0x28(%r9,%r10,2),%xmm3,%xmm3
  .byte  233,201,254,255,255                 // jmpq          1e40 <_sk_load_tables_rgb_u16_be_hsw+0x46>
  .byte  233,196,254,255,255                 // jmpq          1e40 <_sk_load_tables_rgb_u16_be_hsw+0x46>

HIDDEN _sk_byte_tables_hsw
.globl _sk_byte_tables_hsw
FUNCTION(_sk_byte_tables_hsw)
_sk_byte_tables_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,173,45,0,0          // vbroadcastss  0x2dad(%rip),%ymm8        # 4d34 <_sk_callback_hsw+0x290>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,125,91,200                      // vcvtps2dq     %ymm0,%ymm9
  .byte  196,65,249,126,201                  // vmovq         %xmm9,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,131,121,32,4,19,0               // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm0
  .byte  196,67,249,22,202,1                 // vpextrq       $0x1,%xmm9,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,121,32,20,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm0,%xmm10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,99,125,57,200,1                 // vextracti128  $0x1,%ymm9,%xmm0
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,67,41,32,201,2                  // vpinsrb       $0x2,%r9d,%xmm10,%xmm9
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,3                  // vpinsrb       $0x3,%r10d,%xmm9,%xmm9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,4                  // vpinsrb       $0x4,%r10d,%xmm9,%xmm9
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,49,32,193,5                 // vpinsrb       $0x5,%r9d,%xmm9,%xmm0
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,121,32,193,6                // vpinsrb       $0x6,%r9d,%xmm0,%xmm0
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,121,32,202,7                 // vpinsrb       $0x7,%r10d,%xmm0,%xmm9
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,201,1                // vextracti128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,121,32,195,3                // vpinsrb       $0x3,%r11d,%xmm0,%xmm0
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,121,32,195,4                // vpinsrb       $0x4,%r11d,%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,5                // vpinsrb       $0x5,%r10d,%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,6                // vpinsrb       $0x6,%r10d,%xmm0,%xmm0
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,195,121,32,201,7                // vpinsrb       $0x7,%r9d,%xmm0,%xmm1
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,193,108,89,192                  // vmulps        %ymm8,%ymm2,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,20,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,20,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm2
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,105,32,210,2                // vpinsrb       $0x2,%r10d,%xmm2,%xmm2
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,105,32,211,3                // vpinsrb       $0x3,%r11d,%xmm2,%xmm2
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,105,32,211,4                // vpinsrb       $0x4,%r11d,%xmm2,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,105,32,194,5                // vpinsrb       $0x5,%r10d,%xmm2,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,6                // vpinsrb       $0x6,%r10d,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,195,121,32,209,7                // vpinsrb       $0x7,%r9d,%xmm0,%xmm2
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,193,100,89,192                  // vmulps        %ymm8,%ymm3,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,28,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm3
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,97,32,28,10,1               // vpinsrb       $0x1,(%r10,%r9,1),%xmm3,%xmm3
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  196,195,97,32,217,2                 // vpinsrb       $0x2,%r9d,%xmm3,%xmm3
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,97,32,216,3                 // vpinsrb       $0x3,%eax,%xmm3,%xmm3
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,97,32,216,4                 // vpinsrb       $0x4,%eax,%xmm3,%xmm3
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  67,15,182,4,10                      // movzbl        (%r10,%r9,1),%eax
  .byte  196,227,97,32,192,5                 // vpinsrb       $0x5,%eax,%xmm3,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,121,32,216,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm3
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,26                      // movzbl        (%r10,%r11,1),%eax
  .byte  196,194,125,49,193                  // vpmovzxbd     %xmm9,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,82,43,0,0           // vbroadcastss  0x2b52(%rip),%ymm8        # 4d38 <_sk_callback_hsw+0x294>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,125,49,201                  // vpmovzxbd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,125,49,210                  // vpmovzxbd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,227,97,32,216,7                 // vpinsrb       $0x7,%eax,%xmm3,%xmm3
  .byte  196,226,125,49,219                  // vpmovzxbd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_hsw
.globl _sk_byte_tables_rgb_hsw
FUNCTION(_sk_byte_tables_rgb_hsw)
_sk_byte_tables_rgb_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,72,24                        // mov           0x18(%rax),%r9d
  .byte  65,255,201                          // dec           %r9d
  .byte  196,65,121,110,193                  // vmovd         %r9d,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,200                      // vcvtps2dq     %ymm0,%ymm9
  .byte  196,65,249,126,201                  // vmovq         %xmm9,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,131,121,32,4,19,0               // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm0
  .byte  196,67,249,22,202,1                 // vpextrq       $0x1,%xmm9,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,121,32,20,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm0,%xmm10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,99,125,57,200,1                 // vextracti128  $0x1,%ymm9,%xmm0
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,67,41,32,201,2                  // vpinsrb       $0x2,%r9d,%xmm10,%xmm9
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,3                  // vpinsrb       $0x3,%r10d,%xmm9,%xmm9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,4                  // vpinsrb       $0x4,%r10d,%xmm9,%xmm9
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,49,32,193,5                 // vpinsrb       $0x5,%r9d,%xmm9,%xmm0
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,121,32,193,6                // vpinsrb       $0x6,%r9d,%xmm0,%xmm0
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,121,32,202,7                 // vpinsrb       $0x7,%r10d,%xmm0,%xmm9
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,201,1                // vextracti128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,121,32,195,3                // vpinsrb       $0x3,%r11d,%xmm0,%xmm0
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,195,121,32,195,4                // vpinsrb       $0x4,%r11d,%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,5                // vpinsrb       $0x5,%r10d,%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,6                // vpinsrb       $0x6,%r10d,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,195,121,32,201,7                // vpinsrb       $0x7,%r9d,%xmm0,%xmm1
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  197,188,89,194                      // vmulps        %ymm2,%ymm8,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,20,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm2
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,105,32,20,10,1              // vpinsrb       $0x1,(%r10,%r9,1),%xmm2,%xmm2
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  196,195,105,32,209,2                // vpinsrb       $0x2,%r9d,%xmm2,%xmm2
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,105,32,208,3                // vpinsrb       $0x3,%eax,%xmm2,%xmm2
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,105,32,208,4                // vpinsrb       $0x4,%eax,%xmm2,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  67,15,182,4,10                      // movzbl        (%r10,%r9,1),%eax
  .byte  196,227,105,32,192,5                // vpinsrb       $0x5,%eax,%xmm2,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,227,121,32,208,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm2
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,26                      // movzbl        (%r10,%r11,1),%eax
  .byte  196,194,125,49,193                  // vpmovzxbd     %xmm9,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,62,41,0,0           // vbroadcastss  0x293e(%rip),%ymm8        # 4d3c <_sk_callback_hsw+0x298>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,125,49,201                  // vpmovzxbd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,227,105,32,208,7                // vpinsrb       $0x7,%eax,%xmm2,%xmm2
  .byte  196,226,125,49,210                  // vpmovzxbd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_hsw
.globl _sk_table_r_hsw
FUNCTION(_sk_table_r_hsw)
_sk_table_r_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,4,129                // vgatherdps    %ymm9,(%r9,%ymm8,4),%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_hsw
.globl _sk_table_g_hsw
FUNCTION(_sk_table_g_hsw)
_sk_table_g_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,125,91,193                      // vcvtps2dq     %ymm1,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,12,129               // vgatherdps    %ymm9,(%r9,%ymm8,4),%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_hsw
.globl _sk_table_b_hsw
FUNCTION(_sk_table_b_hsw)
_sk_table_b_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,125,91,194                      // vcvtps2dq     %ymm2,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,20,129               // vgatherdps    %ymm9,(%r9,%ymm8,4),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_hsw
.globl _sk_table_a_hsw
FUNCTION(_sk_table_a_hsw)
_sk_table_a_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,66,125,88,192                   // vpbroadcastd  %xmm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,125,91,195                      // vcvtps2dq     %ymm3,%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,130,53,146,28,129               // vgatherdps    %ymm9,(%r9,%ymm8,4),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_hsw
.globl _sk_parametric_r_hsw
FUNCTION(_sk_parametric_r_hsw)
_sk_parametric_r_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,124,194,192,2                // vcmpleps      %ymm8,%ymm0,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,125,168,202                  // vfmadd213ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,125,168,211                  // vfmadd213ps   %ymm11,%ymm0,%ymm10
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,24,40,0,0          // vbroadcastss  0x2818(%rip),%ymm12        # 4d40 <_sk_callback_hsw+0x29c>
  .byte  196,98,125,24,45,19,40,0,0          // vbroadcastss  0x2813(%rip),%ymm13        # 4d44 <_sk_callback_hsw+0x2a0>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,9,40,0,0           // vbroadcastss  0x2809(%rip),%ymm13        # 4d48 <_sk_callback_hsw+0x2a4>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,255,39,0,0         // vbroadcastss  0x27ff(%rip),%ymm13        # 4d4c <_sk_callback_hsw+0x2a8>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,245,39,0,0         // vbroadcastss  0x27f5(%rip),%ymm11        # 4d50 <_sk_callback_hsw+0x2ac>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,235,39,0,0         // vbroadcastss  0x27eb(%rip),%ymm12        # 4d54 <_sk_callback_hsw+0x2b0>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,225,39,0,0         // vbroadcastss  0x27e1(%rip),%ymm12        # 4d58 <_sk_callback_hsw+0x2b4>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  196,99,125,8,208,1                  // vroundps      $0x1,%ymm0,%ymm10
  .byte  196,65,124,92,210                   // vsubps        %ymm10,%ymm0,%ymm10
  .byte  196,98,125,24,29,194,39,0,0         // vbroadcastss  0x27c2(%rip),%ymm11        # 4d5c <_sk_callback_hsw+0x2b8>
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,184,39,0,0         // vbroadcastss  0x27b8(%rip),%ymm11        # 4d60 <_sk_callback_hsw+0x2bc>
  .byte  196,98,45,172,216                   // vfnmadd213ps  %ymm0,%ymm10,%ymm11
  .byte  196,226,125,24,5,174,39,0,0         // vbroadcastss  0x27ae(%rip),%ymm0        # 4d64 <_sk_callback_hsw+0x2c0>
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  196,98,125,24,21,164,39,0,0         // vbroadcastss  0x27a4(%rip),%ymm10        # 4d68 <_sk_callback_hsw+0x2c4>
  .byte  197,172,94,192                      // vdivps        %ymm0,%ymm10,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  196,98,125,24,21,151,39,0,0         // vbroadcastss  0x2797(%rip),%ymm10        # 4d6c <_sk_callback_hsw+0x2c8>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,195,125,74,193,128              // vblendvps     %ymm8,%ymm9,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,110,39,0,0          // vbroadcastss  0x276e(%rip),%ymm8        # 4d70 <_sk_callback_hsw+0x2cc>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_hsw
.globl _sk_parametric_g_hsw
FUNCTION(_sk_parametric_g_hsw)
_sk_parametric_g_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,116,194,192,2                // vcmpleps      %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,117,168,202                  // vfmadd213ps   %ymm10,%ymm1,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,117,168,211                  // vfmadd213ps   %ymm11,%ymm1,%ymm10
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,38,39,0,0          // vbroadcastss  0x2726(%rip),%ymm12        # 4d74 <_sk_callback_hsw+0x2d0>
  .byte  196,98,125,24,45,33,39,0,0          // vbroadcastss  0x2721(%rip),%ymm13        # 4d78 <_sk_callback_hsw+0x2d4>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,23,39,0,0          // vbroadcastss  0x2717(%rip),%ymm13        # 4d7c <_sk_callback_hsw+0x2d8>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,13,39,0,0          // vbroadcastss  0x270d(%rip),%ymm13        # 4d80 <_sk_callback_hsw+0x2dc>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,3,39,0,0           // vbroadcastss  0x2703(%rip),%ymm11        # 4d84 <_sk_callback_hsw+0x2e0>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,249,38,0,0         // vbroadcastss  0x26f9(%rip),%ymm12        # 4d88 <_sk_callback_hsw+0x2e4>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,239,38,0,0         // vbroadcastss  0x26ef(%rip),%ymm12        # 4d8c <_sk_callback_hsw+0x2e8>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  196,99,125,8,209,1                  // vroundps      $0x1,%ymm1,%ymm10
  .byte  196,65,116,92,210                   // vsubps        %ymm10,%ymm1,%ymm10
  .byte  196,98,125,24,29,208,38,0,0         // vbroadcastss  0x26d0(%rip),%ymm11        # 4d90 <_sk_callback_hsw+0x2ec>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,198,38,0,0         // vbroadcastss  0x26c6(%rip),%ymm11        # 4d94 <_sk_callback_hsw+0x2f0>
  .byte  196,98,45,172,217                   // vfnmadd213ps  %ymm1,%ymm10,%ymm11
  .byte  196,226,125,24,13,188,38,0,0        // vbroadcastss  0x26bc(%rip),%ymm1        # 4d98 <_sk_callback_hsw+0x2f4>
  .byte  196,193,116,92,202                  // vsubps        %ymm10,%ymm1,%ymm1
  .byte  196,98,125,24,21,178,38,0,0         // vbroadcastss  0x26b2(%rip),%ymm10        # 4d9c <_sk_callback_hsw+0x2f8>
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,98,125,24,21,165,38,0,0         // vbroadcastss  0x26a5(%rip),%ymm10        # 4da0 <_sk_callback_hsw+0x2fc>
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,195,117,74,201,128              // vblendvps     %ymm8,%ymm9,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,5,124,38,0,0          // vbroadcastss  0x267c(%rip),%ymm8        # 4da4 <_sk_callback_hsw+0x300>
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_hsw
.globl _sk_parametric_b_hsw
FUNCTION(_sk_parametric_b_hsw)
_sk_parametric_b_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,108,194,192,2                // vcmpleps      %ymm8,%ymm2,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,109,168,202                  // vfmadd213ps   %ymm10,%ymm2,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,109,168,211                  // vfmadd213ps   %ymm11,%ymm2,%ymm10
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,52,38,0,0          // vbroadcastss  0x2634(%rip),%ymm12        # 4da8 <_sk_callback_hsw+0x304>
  .byte  196,98,125,24,45,47,38,0,0          // vbroadcastss  0x262f(%rip),%ymm13        # 4dac <_sk_callback_hsw+0x308>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,37,38,0,0          // vbroadcastss  0x2625(%rip),%ymm13        # 4db0 <_sk_callback_hsw+0x30c>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,27,38,0,0          // vbroadcastss  0x261b(%rip),%ymm13        # 4db4 <_sk_callback_hsw+0x310>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,17,38,0,0          // vbroadcastss  0x2611(%rip),%ymm11        # 4db8 <_sk_callback_hsw+0x314>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,7,38,0,0           // vbroadcastss  0x2607(%rip),%ymm12        # 4dbc <_sk_callback_hsw+0x318>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,253,37,0,0         // vbroadcastss  0x25fd(%rip),%ymm12        # 4dc0 <_sk_callback_hsw+0x31c>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  196,99,125,8,210,1                  // vroundps      $0x1,%ymm2,%ymm10
  .byte  196,65,108,92,210                   // vsubps        %ymm10,%ymm2,%ymm10
  .byte  196,98,125,24,29,222,37,0,0         // vbroadcastss  0x25de(%rip),%ymm11        # 4dc4 <_sk_callback_hsw+0x320>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,212,37,0,0         // vbroadcastss  0x25d4(%rip),%ymm11        # 4dc8 <_sk_callback_hsw+0x324>
  .byte  196,98,45,172,218                   // vfnmadd213ps  %ymm2,%ymm10,%ymm11
  .byte  196,226,125,24,21,202,37,0,0        // vbroadcastss  0x25ca(%rip),%ymm2        # 4dcc <_sk_callback_hsw+0x328>
  .byte  196,193,108,92,210                  // vsubps        %ymm10,%ymm2,%ymm2
  .byte  196,98,125,24,21,192,37,0,0         // vbroadcastss  0x25c0(%rip),%ymm10        # 4dd0 <_sk_callback_hsw+0x32c>
  .byte  197,172,94,210                      // vdivps        %ymm2,%ymm10,%ymm2
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,98,125,24,21,179,37,0,0         // vbroadcastss  0x25b3(%rip),%ymm10        # 4dd4 <_sk_callback_hsw+0x330>
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,195,109,74,209,128              // vblendvps     %ymm8,%ymm9,%ymm2,%ymm2
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,138,37,0,0          // vbroadcastss  0x258a(%rip),%ymm8        # 4dd8 <_sk_callback_hsw+0x334>
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_hsw
.globl _sk_parametric_a_hsw
FUNCTION(_sk_parametric_a_hsw)
_sk_parametric_a_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,100,194,192,2                // vcmpleps      %ymm8,%ymm3,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,66,101,168,202                  // vfmadd213ps   %ymm10,%ymm3,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,66,101,168,211                  // vfmadd213ps   %ymm11,%ymm3,%ymm10
  .byte  196,226,125,24,24                   // vbroadcastss  (%rax),%ymm3
  .byte  196,65,124,91,218                   // vcvtdq2ps     %ymm10,%ymm11
  .byte  196,98,125,24,37,66,37,0,0          // vbroadcastss  0x2542(%rip),%ymm12        # 4ddc <_sk_callback_hsw+0x338>
  .byte  196,98,125,24,45,61,37,0,0          // vbroadcastss  0x253d(%rip),%ymm13        # 4de0 <_sk_callback_hsw+0x33c>
  .byte  196,65,44,84,213                    // vandps        %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,51,37,0,0          // vbroadcastss  0x2533(%rip),%ymm13        # 4de4 <_sk_callback_hsw+0x340>
  .byte  196,65,44,86,213                    // vorps         %ymm13,%ymm10,%ymm10
  .byte  196,98,125,24,45,41,37,0,0          // vbroadcastss  0x2529(%rip),%ymm13        # 4de8 <_sk_callback_hsw+0x344>
  .byte  196,66,37,184,236                   // vfmadd231ps   %ymm12,%ymm11,%ymm13
  .byte  196,98,125,24,29,31,37,0,0          // vbroadcastss  0x251f(%rip),%ymm11        # 4dec <_sk_callback_hsw+0x348>
  .byte  196,66,45,172,221                   // vfnmadd213ps  %ymm13,%ymm10,%ymm11
  .byte  196,98,125,24,37,21,37,0,0          // vbroadcastss  0x2515(%rip),%ymm12        # 4df0 <_sk_callback_hsw+0x34c>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,11,37,0,0          // vbroadcastss  0x250b(%rip),%ymm12        # 4df4 <_sk_callback_hsw+0x350>
  .byte  196,65,28,94,210                    // vdivps        %ymm10,%ymm12,%ymm10
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  196,99,125,8,211,1                  // vroundps      $0x1,%ymm3,%ymm10
  .byte  196,65,100,92,210                   // vsubps        %ymm10,%ymm3,%ymm10
  .byte  196,98,125,24,29,236,36,0,0         // vbroadcastss  0x24ec(%rip),%ymm11        # 4df8 <_sk_callback_hsw+0x354>
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,226,36,0,0         // vbroadcastss  0x24e2(%rip),%ymm11        # 4dfc <_sk_callback_hsw+0x358>
  .byte  196,98,45,172,219                   // vfnmadd213ps  %ymm3,%ymm10,%ymm11
  .byte  196,226,125,24,29,216,36,0,0        // vbroadcastss  0x24d8(%rip),%ymm3        # 4e00 <_sk_callback_hsw+0x35c>
  .byte  196,193,100,92,218                  // vsubps        %ymm10,%ymm3,%ymm3
  .byte  196,98,125,24,21,206,36,0,0         // vbroadcastss  0x24ce(%rip),%ymm10        # 4e04 <_sk_callback_hsw+0x360>
  .byte  197,172,94,219                      // vdivps        %ymm3,%ymm10,%ymm3
  .byte  197,164,88,219                      // vaddps        %ymm3,%ymm11,%ymm3
  .byte  196,98,125,24,21,193,36,0,0         // vbroadcastss  0x24c1(%rip),%ymm10        # 4e08 <_sk_callback_hsw+0x364>
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,195,101,74,217,128              // vblendvps     %ymm8,%ymm9,%ymm3,%ymm3
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  196,98,125,24,5,152,36,0,0          // vbroadcastss  0x2498(%rip),%ymm8        # 4e0c <_sk_callback_hsw+0x368>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_hsw
.globl _sk_lab_to_xyz_hsw
FUNCTION(_sk_lab_to_xyz_hsw)
_sk_lab_to_xyz_hsw:
  .byte  196,98,125,24,5,138,36,0,0          // vbroadcastss  0x248a(%rip),%ymm8        # 4e10 <_sk_callback_hsw+0x36c>
  .byte  196,98,125,24,13,133,36,0,0         // vbroadcastss  0x2485(%rip),%ymm9        # 4e14 <_sk_callback_hsw+0x370>
  .byte  196,98,125,24,21,128,36,0,0         // vbroadcastss  0x2480(%rip),%ymm10        # 4e18 <_sk_callback_hsw+0x374>
  .byte  196,194,53,168,202                  // vfmadd213ps   %ymm10,%ymm9,%ymm1
  .byte  196,194,53,168,210                  // vfmadd213ps   %ymm10,%ymm9,%ymm2
  .byte  196,98,125,24,13,113,36,0,0         // vbroadcastss  0x2471(%rip),%ymm9        # 4e1c <_sk_callback_hsw+0x378>
  .byte  196,66,125,184,200                  // vfmadd231ps   %ymm8,%ymm0,%ymm9
  .byte  196,226,125,24,5,103,36,0,0         // vbroadcastss  0x2467(%rip),%ymm0        # 4e20 <_sk_callback_hsw+0x37c>
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,98,125,24,5,94,36,0,0           // vbroadcastss  0x245e(%rip),%ymm8        # 4e24 <_sk_callback_hsw+0x380>
  .byte  196,98,117,168,192                  // vfmadd213ps   %ymm0,%ymm1,%ymm8
  .byte  196,98,125,24,13,84,36,0,0          // vbroadcastss  0x2454(%rip),%ymm9        # 4e28 <_sk_callback_hsw+0x384>
  .byte  196,98,109,172,200                  // vfnmadd213ps  %ymm0,%ymm2,%ymm9
  .byte  196,193,60,89,200                   // vmulps        %ymm8,%ymm8,%ymm1
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  196,226,125,24,21,65,36,0,0         // vbroadcastss  0x2441(%rip),%ymm2        # 4e2c <_sk_callback_hsw+0x388>
  .byte  197,108,194,209,1                   // vcmpltps      %ymm1,%ymm2,%ymm10
  .byte  196,98,125,24,29,55,36,0,0          // vbroadcastss  0x2437(%rip),%ymm11        # 4e30 <_sk_callback_hsw+0x38c>
  .byte  196,65,60,88,195                    // vaddps        %ymm11,%ymm8,%ymm8
  .byte  196,98,125,24,37,45,36,0,0          // vbroadcastss  0x242d(%rip),%ymm12        # 4e34 <_sk_callback_hsw+0x390>
  .byte  196,65,60,89,196                    // vmulps        %ymm12,%ymm8,%ymm8
  .byte  196,99,61,74,193,160                // vblendvps     %ymm10,%ymm1,%ymm8,%ymm8
  .byte  197,252,89,200                      // vmulps        %ymm0,%ymm0,%ymm1
  .byte  197,252,89,201                      // vmulps        %ymm1,%ymm0,%ymm1
  .byte  197,108,194,209,1                   // vcmpltps      %ymm1,%ymm2,%ymm10
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,193,124,89,196                  // vmulps        %ymm12,%ymm0,%ymm0
  .byte  196,227,125,74,201,160              // vblendvps     %ymm10,%ymm1,%ymm0,%ymm1
  .byte  196,193,52,89,193                   // vmulps        %ymm9,%ymm9,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,236,194,208,1                   // vcmpltps      %ymm0,%ymm2,%ymm2
  .byte  196,65,52,88,203                    // vaddps        %ymm11,%ymm9,%ymm9
  .byte  196,65,52,89,204                    // vmulps        %ymm12,%ymm9,%ymm9
  .byte  196,227,53,74,208,32                // vblendvps     %ymm2,%ymm0,%ymm9,%ymm2
  .byte  196,226,125,24,5,226,35,0,0         // vbroadcastss  0x23e2(%rip),%ymm0        # 4e38 <_sk_callback_hsw+0x394>
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,217,35,0,0          // vbroadcastss  0x23d9(%rip),%ymm8        # 4e3c <_sk_callback_hsw+0x398>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_hsw
.globl _sk_load_a8_hsw
FUNCTION(_sk_load_a8_hsw)
_sk_load_a8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,52                              // jne           2aaa <_sk_load_a8_hsw+0x3e>
  .byte  196,194,121,48,4,19                 // vpmovzxbw     (%r11,%rdx,1),%xmm0
  .byte  197,249,219,5,156,39,0,0            // vpand         0x279c(%rip),%xmm0,%xmm0        # 5220 <_sk_callback_hsw+0x77c>
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,170,35,0,0        // vbroadcastss  0x23aa(%rip),%ymm1        # 4e40 <_sk_callback_hsw+0x39c>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,190                             // ja            2a7c <_sk_load_a8_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,95,0,0,0                  // lea           0x5f(%rip),%r10        # 2b28 <_sk_load_a8_hsw+0xbc>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  197,249,196,192,3                   // vpinsrw       $0x3,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,249,196,192,2                   // vpinsrw       $0x2,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  197,249,196,192,1                   // vpinsrw       $0x1,%eax,%xmm0,%xmm0
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,196,192,0                   // vpinsrw       $0x0,%eax,%xmm0,%xmm0
  .byte  233,85,255,255,255                  // jmpq          2a7c <_sk_load_a8_hsw+0x10>
  .byte  144                                 // nop
  .byte  240,255                             // lock          (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  218,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,207                             // dec           %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,196                             // inc           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  185,255,255,255,170                 // mov           $0xaaffffff,%ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_a8_hsw
.globl _sk_gather_a8_hsw
FUNCTION(_sk_gather_a8_hsw)
_sk_gather_a8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,12,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm1
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,113,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm1,%xmm1
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,113,32,202,2                // vpinsrb       $0x2,%r10d,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,4                // vpinsrb       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,182,4,17                      // movzbl        (%r9,%r10,1),%eax
  .byte  196,227,113,32,192,5                // vpinsrb       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,121,32,192,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,227,121,32,192,7                // vpinsrb       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,74,34,0,0         // vbroadcastss  0x224a(%rip),%ymm1        # 4e44 <_sk_callback_hsw+0x3a0>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,237,239,210                     // vpxor         %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_hsw
.globl _sk_store_a8_hsw
FUNCTION(_sk_store_a8_hsw)
_sk_store_a8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,44,34,0,0           // vbroadcastss  0x222c(%rip),%ymm8        # 4e48 <_sk_callback_hsw+0x3a4>
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  196,65,57,103,192                   // vpackuswb     %xmm8,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           2c45 <_sk_store_a8_hsw+0x37>
  .byte  196,65,123,17,4,19                  // vmovsd        %xmm8,(%r11,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            2c41 <_sk_store_a8_hsw+0x33>
  .byte  196,66,121,48,192                   // vpmovzxbw     %xmm8,%xmm8
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,67,0,0,0                  // lea           0x43(%rip),%r10        # 2ca8 <_sk_store_a8_hsw+0x9a>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,20,68,19,6,12            // vpextrb       $0xc,%xmm8,0x6(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,5,10            // vpextrb       $0xa,%xmm8,0x5(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,4,8             // vpextrb       $0x8,%xmm8,0x4(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,3,6             // vpextrb       $0x6,%xmm8,0x3(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,2,4             // vpextrb       $0x4,%xmm8,0x2(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,1,2             // vpextrb       $0x2,%xmm8,0x1(%r11,%rdx,1)
  .byte  196,67,121,20,4,19,0                // vpextrb       $0x0,%xmm8,(%r11,%rdx,1)
  .byte  235,154                             // jmp           2c41 <_sk_store_a8_hsw+0x33>
  .byte  144                                 // nop
  .byte  246,255                             // idiv          %bh
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  222,255                             // fdivrp        %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,206                             // dec           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,198                             // inc           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_hsw
.globl _sk_load_g8_hsw
FUNCTION(_sk_load_g8_hsw)
_sk_load_g8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,57                              // jne           2d07 <_sk_load_g8_hsw+0x43>
  .byte  196,194,121,48,4,19                 // vpmovzxbw     (%r11,%rdx,1),%xmm0
  .byte  197,249,219,5,84,37,0,0             // vpand         0x2554(%rip),%xmm0,%xmm0        # 5230 <_sk_callback_hsw+0x78c>
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,94,33,0,0         // vbroadcastss  0x215e(%rip),%ymm1        # 4e4c <_sk_callback_hsw+0x3a8>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,83,33,0,0         // vbroadcastss  0x2153(%rip),%ymm3        # 4e50 <_sk_callback_hsw+0x3ac>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,185                             // ja            2cd4 <_sk_load_g8_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,94,0,0,0                  // lea           0x5e(%rip),%r10        # 2d84 <_sk_load_g8_hsw+0xc0>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  197,249,196,192,3                   // vpinsrw       $0x3,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,249,196,192,2                   // vpinsrw       $0x2,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  197,249,196,192,1                   // vpinsrw       $0x1,%eax,%xmm0,%xmm0
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,196,192,0                   // vpinsrw       $0x0,%eax,%xmm0,%xmm0
  .byte  233,80,255,255,255                  // jmpq          2cd4 <_sk_load_g8_hsw+0x10>
  .byte  241                                 // icebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  219,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  186,255,255,255,171                 // mov           $0xabffffff,%edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_g8_hsw
.globl _sk_gather_g8_hsw
FUNCTION(_sk_gather_g8_hsw)
_sk_gather_g8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,12,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm1
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,113,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm1,%xmm1
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,113,32,202,2                // vpinsrb       $0x2,%r10d,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,4                // vpinsrb       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,182,4,17                      // movzbl        (%r9,%r10,1),%eax
  .byte  196,227,113,32,192,5                // vpinsrb       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,121,32,192,6                // vpinsrb       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,227,121,32,192,7                // vpinsrb       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,254,31,0,0        // vbroadcastss  0x1ffe(%rip),%ymm1        # 4e54 <_sk_callback_hsw+0x3b0>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,243,31,0,0        // vbroadcastss  0x1ff3(%rip),%ymm3        # 4e58 <_sk_callback_hsw+0x3b4>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_hsw
.globl _sk_gather_i8_hsw
FUNCTION(_sk_gather_i8_hsw)
_sk_gather_i8_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,193                          // mov           %rax,%r9
  .byte  77,133,201                          // test          %r9,%r9
  .byte  116,5                               // je            2e7e <_sk_gather_i8_hsw+0xf>
  .byte  76,137,200                          // mov           %r9,%rax
  .byte  235,2                               // jmp           2e80 <_sk_gather_i8_hsw+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  83                                  // push          %rbx
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,121,32,12,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm1
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,131,113,32,12,26,1              // vpinsrb       $0x1,(%r10,%r11,1),%xmm1,%xmm1
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,131,113,32,12,26,2              // vpinsrb       $0x2,(%r10,%r11,1),%xmm1,%xmm1
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  196,195,113,32,12,2,3               // vpinsrb       $0x3,(%r10,%rax,1),%xmm1,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,113,32,12,2,4               // vpinsrb       $0x4,(%r10,%rax,1),%xmm1,%xmm1
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,131,113,32,4,26,5               // vpinsrb       $0x5,(%r10,%r11,1),%xmm1,%xmm0
  .byte  137,216                             // mov           %ebx,%eax
  .byte  196,195,121,32,4,2,6                // vpinsrb       $0x6,(%r10,%rax,1),%xmm0,%xmm0
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,195,121,32,4,26,7               // vpinsrb       $0x7,(%r10,%rbx,1),%xmm0,%xmm0
  .byte  196,226,125,49,192                  // vpmovzxbd     %xmm0,%ymm0
  .byte  73,139,65,8                         // mov           0x8(%r9),%rax
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,226,117,144,28,128              // vpgatherdd    %ymm1,(%rax,%ymm0,4),%ymm3
  .byte  197,229,219,5,155,33,0,0            // vpand         0x219b(%rip),%ymm3,%ymm0        # 50c0 <_sk_callback_hsw+0x61c>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,42,31,0,0           // vbroadcastss  0x1f2a(%rip),%ymm8        # 4e5c <_sk_callback_hsw+0x3b8>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,160,33,0,0         // vpshufb       0x21a0(%rip),%ymm3,%ymm1        # 50e0 <_sk_callback_hsw+0x63c>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,174,33,0,0         // vpshufb       0x21ae(%rip),%ymm3,%ymm2        # 5100 <_sk_callback_hsw+0x65c>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_hsw
.globl _sk_load_565_hsw
FUNCTION(_sk_load_565_hsw)
_sk_load_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,114                             // jne           2fea <_sk_load_565_hsw+0x7c>
  .byte  196,193,122,111,4,83                // vmovdqu       (%r11,%rdx,2),%xmm0
  .byte  196,226,125,51,208                  // vpmovzxwd     %xmm0,%ymm2
  .byte  196,226,125,88,5,212,30,0,0         // vpbroadcastd  0x1ed4(%rip),%ymm0        # 4e60 <_sk_callback_hsw+0x3bc>
  .byte  197,237,219,192                     // vpand         %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,199,30,0,0        // vbroadcastss  0x1ec7(%rip),%ymm1        # 4e64 <_sk_callback_hsw+0x3c0>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,190,30,0,0        // vpbroadcastd  0x1ebe(%rip),%ymm1        # 4e68 <_sk_callback_hsw+0x3c4>
  .byte  197,237,219,201                     // vpand         %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,177,30,0,0        // vbroadcastss  0x1eb1(%rip),%ymm3        # 4e6c <_sk_callback_hsw+0x3c8>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,88,29,168,30,0,0        // vpbroadcastd  0x1ea8(%rip),%ymm3        # 4e70 <_sk_callback_hsw+0x3cc>
  .byte  197,237,219,211                     // vpand         %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,155,30,0,0        // vbroadcastss  0x1e9b(%rip),%ymm3        # 4e74 <_sk_callback_hsw+0x3d0>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,144,30,0,0        // vbroadcastss  0x1e90(%rip),%ymm3        # 4e78 <_sk_callback_hsw+0x3d4>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,128                             // ja            2f7e <_sk_load_565_hsw+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,75,0,0,0                  // lea           0x4b(%rip),%r10        # 3054 <_sk_load_565_hsw+0xe6>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,6,3           // vpinsrw       $0x3,0x6(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,2,1           // vpinsrw       $0x1,0x2(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,4,83,0              // vpinsrw       $0x0,(%r11,%rdx,2),%xmm0,%xmm0
  .byte  233,44,255,255,255                  // jmpq          2f7e <_sk_load_565_hsw+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  242,255                             // repnz         (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,226                             // jmpq          *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  218,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,210                             // callq         *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190                                 // .byte         0xbe
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_565_hsw
.globl _sk_gather_565_hsw
FUNCTION(_sk_gather_565_hsw)
_sk_gather_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,200,1                   // vpinsrw       $0x1,%eax,%xmm1,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,2                   // vpinsrw       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,241,196,200,3                   // vpinsrw       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,4                   // vpinsrw       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,192,5                   // vpinsrw       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,51,208                  // vpmovzxwd     %xmm0,%ymm2
  .byte  196,226,125,88,5,91,29,0,0          // vpbroadcastd  0x1d5b(%rip),%ymm0        # 4e7c <_sk_callback_hsw+0x3d8>
  .byte  197,237,219,192                     // vpand         %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,78,29,0,0         // vbroadcastss  0x1d4e(%rip),%ymm1        # 4e80 <_sk_callback_hsw+0x3dc>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,69,29,0,0         // vpbroadcastd  0x1d45(%rip),%ymm1        # 4e84 <_sk_callback_hsw+0x3e0>
  .byte  197,237,219,201                     // vpand         %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,56,29,0,0         // vbroadcastss  0x1d38(%rip),%ymm3        # 4e88 <_sk_callback_hsw+0x3e4>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,88,29,47,29,0,0         // vpbroadcastd  0x1d2f(%rip),%ymm3        # 4e8c <_sk_callback_hsw+0x3e8>
  .byte  197,237,219,211                     // vpand         %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,34,29,0,0         // vbroadcastss  0x1d22(%rip),%ymm3        # 4e90 <_sk_callback_hsw+0x3ec>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,23,29,0,0         // vbroadcastss  0x1d17(%rip),%ymm3        # 4e94 <_sk_callback_hsw+0x3f0>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_hsw
.globl _sk_store_565_hsw
FUNCTION(_sk_store_565_hsw)
_sk_store_565_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,11,29,0,0           // vbroadcastss  0x1d0b(%rip),%ymm8        # 4e98 <_sk_callback_hsw+0x3f4>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,53,114,241,11               // vpslld        $0xb,%ymm9,%ymm9
  .byte  196,98,125,24,21,246,28,0,0         // vbroadcastss  0x1cf6(%rip),%ymm10        # 4e9c <_sk_callback_hsw+0x3f8>
  .byte  196,65,116,89,210                   // vmulps        %ymm10,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,5                // vpslld        $0x5,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           31e4 <_sk_store_565_hsw+0x65>
  .byte  196,65,122,127,4,83                 // vmovdqu       %xmm8,(%r11,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            31e0 <_sk_store_565_hsw+0x61>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,69,0,0,0                  // lea           0x45(%rip),%r10        # 3244 <_sk_store_565_hsw+0xc5>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,68,83,12,6            // vpextrw       $0x6,%xmm8,0xc(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,10,5            // vpextrw       $0x5,%xmm8,0xa(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,8,4             // vpextrw       $0x4,%xmm8,0x8(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,6,3             // vpextrw       $0x3,%xmm8,0x6(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,4,2             // vpextrw       $0x2,%xmm8,0x4(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,2,1             // vpextrw       $0x1,%xmm8,0x2(%r11,%rdx,2)
  .byte  196,67,121,21,4,83,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,2)
  .byte  235,159                             // jmp           31e0 <_sk_store_565_hsw+0x61>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  244                                 // hlt
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,196                             // inc           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_4444_hsw
.globl _sk_load_4444_hsw
FUNCTION(_sk_load_4444_hsw)
_sk_load_4444_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,138,0,0,0                    // jne           32f8 <_sk_load_4444_hsw+0x98>
  .byte  196,193,122,111,4,83                // vmovdqu       (%r11,%rdx,2),%xmm0
  .byte  196,226,125,51,216                  // vpmovzxwd     %xmm0,%ymm3
  .byte  196,226,125,88,5,30,28,0,0          // vpbroadcastd  0x1c1e(%rip),%ymm0        # 4ea0 <_sk_callback_hsw+0x3fc>
  .byte  197,229,219,192                     // vpand         %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,17,28,0,0         // vbroadcastss  0x1c11(%rip),%ymm1        # 4ea4 <_sk_callback_hsw+0x400>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,8,28,0,0          // vpbroadcastd  0x1c08(%rip),%ymm1        # 4ea8 <_sk_callback_hsw+0x404>
  .byte  197,229,219,201                     // vpand         %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,251,27,0,0        // vbroadcastss  0x1bfb(%rip),%ymm2        # 4eac <_sk_callback_hsw+0x408>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,88,21,242,27,0,0        // vpbroadcastd  0x1bf2(%rip),%ymm2        # 4eb0 <_sk_callback_hsw+0x40c>
  .byte  197,229,219,210                     // vpand         %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,229,27,0,0          // vbroadcastss  0x1be5(%rip),%ymm8        # 4eb4 <_sk_callback_hsw+0x410>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,88,5,219,27,0,0          // vpbroadcastd  0x1bdb(%rip),%ymm8        # 4eb8 <_sk_callback_hsw+0x414>
  .byte  196,193,101,219,216                 // vpand         %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,205,27,0,0          // vbroadcastss  0x1bcd(%rip),%ymm8        # 4ebc <_sk_callback_hsw+0x418>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,100,255,255,255              // ja            3274 <_sk_load_4444_hsw+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,73,0,0,0                  // lea           0x49(%rip),%r10        # 3364 <_sk_load_4444_hsw+0x104>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,6,3           // vpinsrw       $0x3,0x6(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,2,1           // vpinsrw       $0x1,0x2(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,4,83,0              // vpinsrw       $0x0,(%r11,%rdx,2),%xmm0,%xmm0
  .byte  233,16,255,255,255                  // jmpq          3274 <_sk_load_4444_hsw+0x14>
  .byte  244                                 // hlt
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_4444_hsw
.globl _sk_gather_4444_hsw
FUNCTION(_sk_gather_4444_hsw)
_sk_gather_4444_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,110,200                     // vmovd         %eax,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,200,1                   // vpinsrw       $0x1,%eax,%xmm1,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,2                   // vpinsrw       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,241,196,200,3                   // vpinsrw       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,4                   // vpinsrw       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,192,5                   // vpinsrw       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  196,226,125,51,216                  // vpmovzxwd     %xmm0,%ymm3
  .byte  196,226,125,88,5,143,26,0,0         // vpbroadcastd  0x1a8f(%rip),%ymm0        # 4ec0 <_sk_callback_hsw+0x41c>
  .byte  197,229,219,192                     // vpand         %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,130,26,0,0        // vbroadcastss  0x1a82(%rip),%ymm1        # 4ec4 <_sk_callback_hsw+0x420>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,88,13,121,26,0,0        // vpbroadcastd  0x1a79(%rip),%ymm1        # 4ec8 <_sk_callback_hsw+0x424>
  .byte  197,229,219,201                     // vpand         %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,108,26,0,0        // vbroadcastss  0x1a6c(%rip),%ymm2        # 4ecc <_sk_callback_hsw+0x428>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,88,21,99,26,0,0         // vpbroadcastd  0x1a63(%rip),%ymm2        # 4ed0 <_sk_callback_hsw+0x42c>
  .byte  197,229,219,210                     // vpand         %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,86,26,0,0           // vbroadcastss  0x1a56(%rip),%ymm8        # 4ed4 <_sk_callback_hsw+0x430>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,88,5,76,26,0,0           // vpbroadcastd  0x1a4c(%rip),%ymm8        # 4ed8 <_sk_callback_hsw+0x434>
  .byte  196,193,101,219,216                 // vpand         %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,62,26,0,0           // vbroadcastss  0x1a3e(%rip),%ymm8        # 4edc <_sk_callback_hsw+0x438>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_hsw
.globl _sk_store_4444_hsw
FUNCTION(_sk_store_4444_hsw)
_sk_store_4444_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,43,26,0,0           // vbroadcastss  0x1a2b(%rip),%ymm8        # 4ee0 <_sk_callback_hsw+0x43c>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,53,114,241,12               // vpslld        $0xc,%ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,8                // vpslld        $0x8,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,4                // vpslld        $0x4,%ymm10,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  196,67,125,57,193,1                 // vextracti128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3518 <_sk_store_4444_hsw+0x71>
  .byte  196,65,122,127,4,83                 // vmovdqu       %xmm8,(%r11,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            3514 <_sk_store_4444_hsw+0x6d>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,69,0,0,0                  // lea           0x45(%rip),%r10        # 3578 <_sk_store_4444_hsw+0xd1>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,68,83,12,6            // vpextrw       $0x6,%xmm8,0xc(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,10,5            // vpextrw       $0x5,%xmm8,0xa(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,8,4             // vpextrw       $0x4,%xmm8,0x8(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,6,3             // vpextrw       $0x3,%xmm8,0x6(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,4,2             // vpextrw       $0x2,%xmm8,0x4(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,2,1             // vpextrw       $0x1,%xmm8,0x2(%r11,%rdx,2)
  .byte  196,67,121,21,4,83,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,2)
  .byte  235,159                             // jmp           3514 <_sk_store_4444_hsw+0x6d>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  244                                 // hlt
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,196                             // inc           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_8888_hsw
.globl _sk_load_8888_hsw
FUNCTION(_sk_load_8888_hsw)
_sk_load_8888_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,88                              // jne           3601 <_sk_load_8888_hsw+0x6d>
  .byte  196,193,124,16,26                   // vmovups       (%r10),%ymm3
  .byte  197,228,84,5,106,27,0,0             // vandps        0x1b6a(%rip),%ymm3,%ymm0        # 5120 <_sk_callback_hsw+0x67c>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,33,25,0,0           // vbroadcastss  0x1921(%rip),%ymm8        # 4ee4 <_sk_callback_hsw+0x440>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,111,27,0,0         // vpshufb       0x1b6f(%rip),%ymm3,%ymm1        # 5140 <_sk_callback_hsw+0x69c>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,125,27,0,0         // vpshufb       0x1b7d(%rip),%ymm3,%ymm2        # 5160 <_sk_callback_hsw+0x6bc>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,192                 // vmovq         %rax,%xmm0
  .byte  196,226,125,33,192                  // vpmovsxbd     %xmm0,%ymm0
  .byte  196,194,125,44,26                   // vmaskmovps    (%r10),%ymm0,%ymm3
  .byte  235,135                             // jmp           35ae <_sk_load_8888_hsw+0x1a>

HIDDEN _sk_gather_8888_hsw
.globl _sk_gather_8888_hsw
FUNCTION(_sk_gather_8888_hsw)
_sk_gather_8888_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,194,117,144,28,129              // vpgatherdd    %ymm1,(%r9,%ymm0,4),%ymm3
  .byte  197,229,219,5,43,27,0,0             // vpand         0x1b2b(%rip),%ymm3,%ymm0        # 5180 <_sk_callback_hsw+0x6dc>
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,134,24,0,0          // vbroadcastss  0x1886(%rip),%ymm8        # 4ee8 <_sk_callback_hsw+0x444>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,226,101,0,13,48,27,0,0          // vpshufb       0x1b30(%rip),%ymm3,%ymm1        # 51a0 <_sk_callback_hsw+0x6fc>
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,101,0,21,62,27,0,0          // vpshufb       0x1b3e(%rip),%ymm3,%ymm2        # 51c0 <_sk_callback_hsw+0x71c>
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,229,114,211,24                  // vpsrld        $0x18,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_hsw
.globl _sk_store_8888_hsw
FUNCTION(_sk_store_8888_hsw)
_sk_store_8888_hsw:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  196,98,125,24,5,54,24,0,0           // vbroadcastss  0x1836(%rip),%ymm8        # 4eec <_sk_callback_hsw+0x448>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,8                // vpslld        $0x8,%ymm10,%ymm10
  .byte  196,65,45,235,201                   // vpor          %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,45,114,242,16               // vpslld        $0x10,%ymm10,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,193,61,114,240,24               // vpslld        $0x18,%ymm8,%ymm8
  .byte  196,65,45,235,192                   // vpor          %ymm8,%ymm10,%ymm8
  .byte  196,65,53,235,192                   // vpor          %ymm8,%ymm9,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,12                              // jne           3710 <_sk_store_8888_hsw+0x73>
  .byte  196,65,124,17,2                     // vmovups       %ymm8,(%r10)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,125,33,201                   // vpmovsxbd     %xmm9,%ymm9
  .byte  196,66,53,46,2                      // vmaskmovps    %ymm8,%ymm9,(%r10)
  .byte  235,211                             // jmp           3709 <_sk_store_8888_hsw+0x6c>

HIDDEN _sk_load_f16_hsw
.globl _sk_load_f16_hsw
FUNCTION(_sk_load_f16_hsw)
_sk_load_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,97                              // jne           37a1 <_sk_load_f16_hsw+0x6b>
  .byte  197,121,16,4,208                    // vmovupd       (%rax,%rdx,8),%xmm8
  .byte  197,249,16,84,208,16                // vmovupd       0x10(%rax,%rdx,8),%xmm2
  .byte  197,249,16,92,208,32                // vmovupd       0x20(%rax,%rdx,8),%xmm3
  .byte  197,122,111,76,208,48               // vmovdqu       0x30(%rax,%rdx,8),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  196,226,125,19,192                  // vcvtph2ps     %xmm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  196,226,125,19,201                  // vcvtph2ps     %xmm1,%ymm1
  .byte  197,177,108,211                     // vpunpcklqdq   %xmm3,%xmm9,%xmm2
  .byte  196,226,125,19,210                  // vcvtph2ps     %xmm2,%ymm2
  .byte  197,177,109,219                     // vpunpckhqdq   %xmm3,%xmm9,%xmm3
  .byte  196,226,125,19,219                  // vcvtph2ps     %xmm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,123,16,4,208                    // vmovsd        (%rax,%rdx,8),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,79                              // je            3800 <_sk_load_f16_hsw+0xca>
  .byte  197,57,22,68,208,8                  // vmovhpd       0x8(%rax,%rdx,8),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,67                              // jb            3800 <_sk_load_f16_hsw+0xca>
  .byte  197,251,16,84,208,16                // vmovsd        0x10(%rax,%rdx,8),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,68                              // je            380d <_sk_load_f16_hsw+0xd7>
  .byte  197,233,22,84,208,24                // vmovhpd       0x18(%rax,%rdx,8),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,56                              // jb            380d <_sk_load_f16_hsw+0xd7>
  .byte  197,251,16,92,208,32                // vmovsd        0x20(%rax,%rdx,8),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,114,255,255,255              // je            3757 <_sk_load_f16_hsw+0x21>
  .byte  197,225,22,92,208,40                // vmovhpd       0x28(%rax,%rdx,8),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,98,255,255,255               // jb            3757 <_sk_load_f16_hsw+0x21>
  .byte  197,122,126,76,208,48               // vmovq         0x30(%rax,%rdx,8),%xmm9
  .byte  233,87,255,255,255                  // jmpq          3757 <_sk_load_f16_hsw+0x21>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,74,255,255,255                  // jmpq          3757 <_sk_load_f16_hsw+0x21>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,65,255,255,255                  // jmpq          3757 <_sk_load_f16_hsw+0x21>

HIDDEN _sk_gather_f16_hsw
.globl _sk_gather_f16_hsw
FUNCTION(_sk_gather_f16_hsw)
_sk_gather_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,226,125,88,80,16                // vpbroadcastd  0x10(%rax),%ymm2
  .byte  196,226,109,64,201                  // vpmulld       %ymm1,%ymm2,%ymm1
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  197,245,254,192                     // vpaddd        %ymm0,%ymm1,%ymm0
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,194,237,144,28,193              // vpgatherdq    %ymm2,(%r9,%xmm0,8),%ymm3
  .byte  196,227,125,57,192,1                // vextracti128  $0x1,%ymm0,%xmm0
  .byte  196,194,245,144,20,193              // vpgatherdq    %ymm1,(%r9,%xmm0,8),%ymm2
  .byte  196,227,125,57,216,1                // vextracti128  $0x1,%ymm3,%xmm0
  .byte  196,227,125,57,209,1                // vextracti128  $0x1,%ymm2,%xmm1
  .byte  197,97,97,192                       // vpunpcklwd    %xmm0,%xmm3,%xmm8
  .byte  197,225,105,192                     // vpunpckhwd    %xmm0,%xmm3,%xmm0
  .byte  197,233,97,217                      // vpunpcklwd    %xmm1,%xmm2,%xmm3
  .byte  197,233,105,201                     // vpunpckhwd    %xmm1,%xmm2,%xmm1
  .byte  197,57,97,200                       // vpunpcklwd    %xmm0,%xmm8,%xmm9
  .byte  197,57,105,192                      // vpunpckhwd    %xmm0,%xmm8,%xmm8
  .byte  197,225,97,209                      // vpunpcklwd    %xmm1,%xmm3,%xmm2
  .byte  197,225,105,217                     // vpunpckhwd    %xmm1,%xmm3,%xmm3
  .byte  197,177,108,194                     // vpunpcklqdq   %xmm2,%xmm9,%xmm0
  .byte  196,226,125,19,192                  // vcvtph2ps     %xmm0,%ymm0
  .byte  197,177,109,202                     // vpunpckhqdq   %xmm2,%xmm9,%xmm1
  .byte  196,226,125,19,201                  // vcvtph2ps     %xmm1,%ymm1
  .byte  197,185,108,211                     // vpunpcklqdq   %xmm3,%xmm8,%xmm2
  .byte  196,226,125,19,210                  // vcvtph2ps     %xmm2,%ymm2
  .byte  197,185,109,219                     // vpunpckhqdq   %xmm3,%xmm8,%xmm3
  .byte  196,226,125,19,219                  // vcvtph2ps     %xmm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_hsw
.globl _sk_store_f16_hsw
FUNCTION(_sk_store_f16_hsw)
_sk_store_f16_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  196,195,125,29,192,4                // vcvtps2ph     $0x4,%ymm0,%xmm8
  .byte  196,195,125,29,201,4                // vcvtps2ph     $0x4,%ymm1,%xmm9
  .byte  196,195,125,29,210,4                // vcvtps2ph     $0x4,%ymm2,%xmm10
  .byte  196,195,125,29,219,4                // vcvtps2ph     $0x4,%ymm3,%xmm11
  .byte  196,65,57,97,225                    // vpunpcklwd    %xmm9,%xmm8,%xmm12
  .byte  196,65,57,105,193                   // vpunpckhwd    %xmm9,%xmm8,%xmm8
  .byte  196,65,41,97,203                    // vpunpcklwd    %xmm11,%xmm10,%xmm9
  .byte  196,65,41,105,235                   // vpunpckhwd    %xmm11,%xmm10,%xmm13
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,57,98,205                    // vpunpckldq    %xmm13,%xmm8,%xmm9
  .byte  196,65,57,106,197                   // vpunpckhdq    %xmm13,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,27                              // jne           3905 <_sk_store_f16_hsw+0x65>
  .byte  197,120,17,28,208                   // vmovups       %xmm11,(%rax,%rdx,8)
  .byte  197,120,17,84,208,16                // vmovups       %xmm10,0x10(%rax,%rdx,8)
  .byte  197,120,17,76,208,32                // vmovups       %xmm9,0x20(%rax,%rdx,8)
  .byte  197,122,127,68,208,48               // vmovdqu       %xmm8,0x30(%rax,%rdx,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,121,214,28,208                  // vmovq         %xmm11,(%rax,%rdx,8)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,241                             // je            3901 <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,92,208,8                 // vmovhpd       %xmm11,0x8(%rax,%rdx,8)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,229                             // jb            3901 <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,84,208,16               // vmovq         %xmm10,0x10(%rax,%rdx,8)
  .byte  116,221                             // je            3901 <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,84,208,24                // vmovhpd       %xmm10,0x18(%rax,%rdx,8)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,209                             // jb            3901 <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,76,208,32               // vmovq         %xmm9,0x20(%rax,%rdx,8)
  .byte  116,201                             // je            3901 <_sk_store_f16_hsw+0x61>
  .byte  197,121,23,76,208,40                // vmovhpd       %xmm9,0x28(%rax,%rdx,8)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,189                             // jb            3901 <_sk_store_f16_hsw+0x61>
  .byte  197,121,214,68,208,48               // vmovq         %xmm8,0x30(%rax,%rdx,8)
  .byte  235,181                             // jmp           3901 <_sk_store_f16_hsw+0x61>

HIDDEN _sk_load_u16_be_hsw
.globl _sk_load_u16_be_hsw
FUNCTION(_sk_load_u16_be_hsw)
_sk_load_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,204,0,0,0                    // jne           3a2e <_sk_load_u16_be_hsw+0xe2>
  .byte  196,65,121,16,4,65                  // vmovupd       (%r9,%rax,2),%xmm8
  .byte  196,193,121,16,84,65,16             // vmovupd       0x10(%r9,%rax,2),%xmm2
  .byte  196,193,121,16,92,65,32             // vmovupd       0x20(%r9,%rax,2),%xmm3
  .byte  196,65,122,111,76,65,48             // vmovdqu       0x30(%r9,%rax,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm11
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,21,45,21,0,0          // vbroadcastss  0x152d(%rip),%ymm10        # 4ef0 <_sk_callback_hsw+0x44c>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,226,125,51,201                  // vpmovzxwd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  196,193,49,108,211                  // vpunpcklqdq   %xmm11,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,226,125,51,210                  // vpmovzxwd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  196,193,49,109,219                  // vpunpckhqdq   %xmm11,%xmm9,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,226,125,51,219                  // vpmovzxwd     %xmm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,123,16,4,65                  // vmovsd        (%r9,%rax,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,85                              // je            3a94 <_sk_load_u16_be_hsw+0x148>
  .byte  196,65,57,22,68,65,8                // vmovhpd       0x8(%r9,%rax,2),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,72                              // jb            3a94 <_sk_load_u16_be_hsw+0x148>
  .byte  196,193,123,16,84,65,16             // vmovsd        0x10(%r9,%rax,2),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,72                              // je            3aa1 <_sk_load_u16_be_hsw+0x155>
  .byte  196,193,105,22,84,65,24             // vmovhpd       0x18(%r9,%rax,2),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,59                              // jb            3aa1 <_sk_load_u16_be_hsw+0x155>
  .byte  196,193,123,16,92,65,32             // vmovsd        0x20(%r9,%rax,2),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,6,255,255,255                // je            397d <_sk_load_u16_be_hsw+0x31>
  .byte  196,193,97,22,92,65,40              // vmovhpd       0x28(%r9,%rax,2),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,245,254,255,255              // jb            397d <_sk_load_u16_be_hsw+0x31>
  .byte  196,65,122,126,76,65,48             // vmovq         0x30(%r9,%rax,2),%xmm9
  .byte  233,233,254,255,255                 // jmpq          397d <_sk_load_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,220,254,255,255                 // jmpq          397d <_sk_load_u16_be_hsw+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,211,254,255,255                 // jmpq          397d <_sk_load_u16_be_hsw+0x31>

HIDDEN _sk_load_rgb_u16_be_hsw
.globl _sk_load_rgb_u16_be_hsw
FUNCTION(_sk_load_rgb_u16_be_hsw)
_sk_load_rgb_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,82                         // lea           (%rdx,%rdx,2),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,204,0,0,0                    // jne           3b88 <_sk_load_rgb_u16_be_hsw+0xde>
  .byte  196,193,122,111,4,65                // vmovdqu       (%r9,%rax,2),%xmm0
  .byte  196,193,122,111,84,65,12            // vmovdqu       0xc(%r9,%rax,2),%xmm2
  .byte  196,193,122,111,76,65,24            // vmovdqu       0x18(%r9,%rax,2),%xmm1
  .byte  196,193,122,111,92,65,32            // vmovdqu       0x20(%r9,%rax,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm3
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,226,125,51,192                  // vpmovzxwd     %xmm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,21,190,19,0,0         // vbroadcastss  0x13be(%rip),%ymm10        # 4ef4 <_sk_callback_hsw+0x450>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,226,125,51,201                  // vpmovzxwd     %xmm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,177,108,211                     // vpunpcklqdq   %xmm3,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,226,125,51,210                  // vpmovzxwd     %xmm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,114,19,0,0        // vbroadcastss  0x1372(%rip),%ymm3        # 4ef8 <_sk_callback_hsw+0x454>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,193,121,110,4,65                // vmovd         (%r9,%rax,2),%xmm0
  .byte  196,193,121,196,68,65,4,2           // vpinsrw       $0x2,0x4(%r9,%rax,2),%xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,5                               // jne           3ba1 <_sk_load_rgb_u16_be_hsw+0xf7>
  .byte  233,79,255,255,255                  // jmpq          3af0 <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,76,65,6             // vmovd         0x6(%r9,%rax,2),%xmm1
  .byte  196,65,113,196,68,65,10,2           // vpinsrw       $0x2,0xa(%r9,%rax,2),%xmm1,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,26                              // jb            3bd0 <_sk_load_rgb_u16_be_hsw+0x126>
  .byte  196,193,121,110,76,65,12            // vmovd         0xc(%r9,%rax,2),%xmm1
  .byte  196,193,113,196,84,65,16,2          // vpinsrw       $0x2,0x10(%r9,%rax,2),%xmm1,%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  117,10                              // jne           3bd5 <_sk_load_rgb_u16_be_hsw+0x12b>
  .byte  233,32,255,255,255                  // jmpq          3af0 <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,27,255,255,255                  // jmpq          3af0 <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,76,65,18            // vmovd         0x12(%r9,%rax,2),%xmm1
  .byte  196,65,113,196,76,65,22,2           // vpinsrw       $0x2,0x16(%r9,%rax,2),%xmm1,%xmm9
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,26                              // jb            3c04 <_sk_load_rgb_u16_be_hsw+0x15a>
  .byte  196,193,121,110,76,65,24            // vmovd         0x18(%r9,%rax,2),%xmm1
  .byte  196,193,113,196,76,65,28,2          // vpinsrw       $0x2,0x1c(%r9,%rax,2),%xmm1,%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  117,10                              // jne           3c09 <_sk_load_rgb_u16_be_hsw+0x15f>
  .byte  233,236,254,255,255                 // jmpq          3af0 <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,231,254,255,255                 // jmpq          3af0 <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  196,193,121,110,92,65,30            // vmovd         0x1e(%r9,%rax,2),%xmm3
  .byte  196,65,97,196,92,65,34,2            // vpinsrw       $0x2,0x22(%r9,%rax,2),%xmm3,%xmm11
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,20                              // jb            3c32 <_sk_load_rgb_u16_be_hsw+0x188>
  .byte  196,193,121,110,92,65,36            // vmovd         0x24(%r9,%rax,2),%xmm3
  .byte  196,193,97,196,92,65,40,2           // vpinsrw       $0x2,0x28(%r9,%rax,2),%xmm3,%xmm3
  .byte  233,190,254,255,255                 // jmpq          3af0 <_sk_load_rgb_u16_be_hsw+0x46>
  .byte  233,185,254,255,255                 // jmpq          3af0 <_sk_load_rgb_u16_be_hsw+0x46>

HIDDEN _sk_store_u16_be_hsw
.globl _sk_store_u16_be_hsw
FUNCTION(_sk_store_u16_be_hsw)
_sk_store_u16_be_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  196,98,125,24,5,175,18,0,0          // vbroadcastss  0x12af(%rip),%ymm8        # 4efc <_sk_callback_hsw+0x458>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,67,125,25,202,1                 // vextractf128  $0x1,%ymm9,%xmm10
  .byte  196,66,49,43,202                    // vpackusdw     %xmm10,%xmm9,%xmm9
  .byte  196,193,41,113,241,8                // vpsllw        $0x8,%xmm9,%xmm10
  .byte  196,193,49,113,209,8                // vpsrlw        $0x8,%xmm9,%xmm9
  .byte  196,65,41,235,201                   // vpor          %xmm9,%xmm10,%xmm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,67,125,25,211,1                 // vextractf128  $0x1,%ymm10,%xmm11
  .byte  196,66,41,43,211                    // vpackusdw     %xmm11,%xmm10,%xmm10
  .byte  196,193,33,113,242,8                // vpsllw        $0x8,%xmm10,%xmm11
  .byte  196,193,41,113,210,8                // vpsrlw        $0x8,%xmm10,%xmm10
  .byte  196,65,33,235,210                   // vpor          %xmm10,%xmm11,%xmm10
  .byte  196,65,108,89,216                   // vmulps        %ymm8,%ymm2,%ymm11
  .byte  196,65,125,91,219                   // vcvtps2dq     %ymm11,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,66,33,43,220                    // vpackusdw     %xmm12,%xmm11,%xmm11
  .byte  196,193,25,113,243,8                // vpsllw        $0x8,%xmm11,%xmm12
  .byte  196,193,33,113,211,8                // vpsrlw        $0x8,%xmm11,%xmm11
  .byte  196,65,25,235,219                   // vpor          %xmm11,%xmm12,%xmm11
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,196,1                 // vextractf128  $0x1,%ymm8,%xmm12
  .byte  196,66,57,43,196                    // vpackusdw     %xmm12,%xmm8,%xmm8
  .byte  196,193,25,113,240,8                // vpsllw        $0x8,%xmm8,%xmm12
  .byte  196,193,57,113,208,8                // vpsrlw        $0x8,%xmm8,%xmm8
  .byte  196,65,25,235,192                   // vpor          %xmm8,%xmm12,%xmm8
  .byte  196,65,49,97,226                    // vpunpcklwd    %xmm10,%xmm9,%xmm12
  .byte  196,65,49,105,234                   // vpunpckhwd    %xmm10,%xmm9,%xmm13
  .byte  196,65,33,97,200                    // vpunpcklwd    %xmm8,%xmm11,%xmm9
  .byte  196,65,33,105,192                   // vpunpckhwd    %xmm8,%xmm11,%xmm8
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,17,98,200                    // vpunpckldq    %xmm8,%xmm13,%xmm9
  .byte  196,65,17,106,192                   // vpunpckhdq    %xmm8,%xmm13,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,31                              // jne           3d31 <_sk_store_u16_be_hsw+0xfa>
  .byte  196,65,120,17,28,65                 // vmovups       %xmm11,(%r9,%rax,2)
  .byte  196,65,120,17,84,65,16              // vmovups       %xmm10,0x10(%r9,%rax,2)
  .byte  196,65,120,17,76,65,32              // vmovups       %xmm9,0x20(%r9,%rax,2)
  .byte  196,65,122,127,68,65,48             // vmovdqu       %xmm8,0x30(%r9,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,214,28,65                // vmovq         %xmm11,(%r9,%rax,2)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            3d2d <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,92,65,8               // vmovhpd       %xmm11,0x8(%r9,%rax,2)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            3d2d <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,84,65,16             // vmovq         %xmm10,0x10(%r9,%rax,2)
  .byte  116,218                             // je            3d2d <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,84,65,24              // vmovhpd       %xmm10,0x18(%r9,%rax,2)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,205                             // jb            3d2d <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,76,65,32             // vmovq         %xmm9,0x20(%r9,%rax,2)
  .byte  116,196                             // je            3d2d <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,23,76,65,40              // vmovhpd       %xmm9,0x28(%r9,%rax,2)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,183                             // jb            3d2d <_sk_store_u16_be_hsw+0xf6>
  .byte  196,65,121,214,68,65,48             // vmovq         %xmm8,0x30(%r9,%rax,2)
  .byte  235,174                             // jmp           3d2d <_sk_store_u16_be_hsw+0xf6>

HIDDEN _sk_load_f32_hsw
.globl _sk_load_f32_hsw
FUNCTION(_sk_load_f32_hsw)
_sk_load_f32_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  119,110                             // ja            3df5 <_sk_load_f32_hsw+0x76>
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,141,29,135,0,0,0                 // lea           0x87(%rip),%r11        # 3e20 <_sk_load_f32_hsw+0xa1>
  .byte  75,99,4,131                         // movslq        (%r11,%r8,4),%rax
  .byte  76,1,216                            // add           %r11,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,3,125,24,68,145,112,1           // vinsertf128   $0x1,0x70(%r9,%r10,4),%ymm0,%ymm8
  .byte  196,131,125,24,92,145,96,1          // vinsertf128   $0x1,0x60(%r9,%r10,4),%ymm0,%ymm3
  .byte  196,131,125,24,76,145,80,1          // vinsertf128   $0x1,0x50(%r9,%r10,4),%ymm0,%ymm1
  .byte  196,131,125,24,84,145,64,1          // vinsertf128   $0x1,0x40(%r9,%r10,4),%ymm0,%ymm2
  .byte  196,129,121,16,68,145,48            // vmovupd       0x30(%r9,%r10,4),%xmm0
  .byte  196,195,125,13,192,12               // vblendpd      $0xc,%ymm8,%ymm0,%ymm0
  .byte  196,1,121,16,68,145,32              // vmovupd       0x20(%r9,%r10,4),%xmm8
  .byte  196,99,61,13,203,12                 // vblendpd      $0xc,%ymm3,%ymm8,%ymm9
  .byte  196,129,121,16,92,145,16            // vmovupd       0x10(%r9,%r10,4),%xmm3
  .byte  196,99,101,13,209,12                // vblendpd      $0xc,%ymm1,%ymm3,%ymm10
  .byte  196,129,121,16,12,145               // vmovupd       (%r9,%r10,4),%xmm1
  .byte  196,227,117,13,202,12               // vblendpd      $0xc,%ymm2,%ymm1,%ymm1
  .byte  196,193,116,20,210                  // vunpcklps     %ymm10,%ymm1,%ymm2
  .byte  196,193,116,21,218                  // vunpckhps     %ymm10,%ymm1,%ymm3
  .byte  197,180,20,200                      // vunpcklps     %ymm0,%ymm9,%ymm1
  .byte  197,52,21,192                       // vunpckhps     %ymm0,%ymm9,%ymm8
  .byte  197,237,20,193                      // vunpcklpd     %ymm1,%ymm2,%ymm0
  .byte  197,237,21,201                      // vunpckhpd     %ymm1,%ymm2,%ymm1
  .byte  196,193,101,20,208                  // vunpcklpd     %ymm8,%ymm3,%ymm2
  .byte  196,193,101,21,216                  // vunpckhpd     %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  15,31,0                             // nopl          (%rax)
  .byte  130                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  188,255,255,255,175                 // mov           $0xafffffff,%esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,162,255,255,255,154             // jmpq          *-0x65000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,146,255,255,255,138             // callq         *-0x75000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_f32_hsw
.globl _sk_store_f32_hsw
FUNCTION(_sk_store_f32_hsw)
_sk_store_f32_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  197,124,20,193                      // vunpcklps     %ymm1,%ymm0,%ymm8
  .byte  197,124,21,217                      // vunpckhps     %ymm1,%ymm0,%ymm11
  .byte  197,108,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm9
  .byte  197,108,21,227                      // vunpckhps     %ymm3,%ymm2,%ymm12
  .byte  196,65,61,20,209                    // vunpcklpd     %ymm9,%ymm8,%ymm10
  .byte  196,65,61,21,201                    // vunpckhpd     %ymm9,%ymm8,%ymm9
  .byte  196,65,37,20,196                    // vunpcklpd     %ymm12,%ymm11,%ymm8
  .byte  196,65,37,21,220                    // vunpckhpd     %ymm12,%ymm11,%ymm11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,55                              // jne           3ead <_sk_store_f32_hsw+0x6d>
  .byte  196,67,45,24,225,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm12
  .byte  196,67,61,24,235,1                  // vinsertf128   $0x1,%xmm11,%ymm8,%ymm13
  .byte  196,67,45,6,201,49                  // vperm2f128    $0x31,%ymm9,%ymm10,%ymm9
  .byte  196,67,61,6,195,49                  // vperm2f128    $0x31,%ymm11,%ymm8,%ymm8
  .byte  196,65,125,17,36,129                // vmovupd       %ymm12,(%r9,%rax,4)
  .byte  196,65,125,17,108,129,32            // vmovupd       %ymm13,0x20(%r9,%rax,4)
  .byte  196,65,125,17,76,129,64             // vmovupd       %ymm9,0x40(%r9,%rax,4)
  .byte  196,65,125,17,68,129,96             // vmovupd       %ymm8,0x60(%r9,%rax,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,17,20,129                // vmovupd       %xmm10,(%r9,%rax,4)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            3ea9 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,76,129,16             // vmovupd       %xmm9,0x10(%r9,%rax,4)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            3ea9 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,68,129,32             // vmovupd       %xmm8,0x20(%r9,%rax,4)
  .byte  116,218                             // je            3ea9 <_sk_store_f32_hsw+0x69>
  .byte  196,65,121,17,92,129,48             // vmovupd       %xmm11,0x30(%r9,%rax,4)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,205                             // jb            3ea9 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,84,129,64,1           // vextractf128  $0x1,%ymm10,0x40(%r9,%rax,4)
  .byte  116,195                             // je            3ea9 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,76,129,80,1           // vextractf128  $0x1,%ymm9,0x50(%r9,%rax,4)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,181                             // jb            3ea9 <_sk_store_f32_hsw+0x69>
  .byte  196,67,125,25,68,129,96,1           // vextractf128  $0x1,%ymm8,0x60(%r9,%rax,4)
  .byte  235,171                             // jmp           3ea9 <_sk_store_f32_hsw+0x69>

HIDDEN _sk_clamp_x_hsw
.globl _sk_clamp_x_hsw
FUNCTION(_sk_clamp_x_hsw)
_sk_clamp_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,88,0                     // vpbroadcastd  (%rax),%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,65,61,254,193                   // vpaddd        %ymm9,%ymm8,%ymm8
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_hsw
.globl _sk_clamp_y_hsw
FUNCTION(_sk_clamp_y_hsw)
_sk_clamp_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,201                      // vmaxps        %ymm1,%ymm8,%ymm1
  .byte  196,98,125,88,0                     // vpbroadcastd  (%rax),%ymm8
  .byte  196,65,53,118,201                   // vpcmpeqd      %ymm9,%ymm9,%ymm9
  .byte  196,65,61,254,193                   // vpaddd        %ymm9,%ymm8,%ymm8
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_hsw
.globl _sk_repeat_x_hsw
FUNCTION(_sk_repeat_x_hsw)
_sk_repeat_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,4                  // vbroadcastss  0x4(%rax),%ymm8
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,53,172,192                   // vfnmadd213ps  %ymm0,%ymm9,%ymm8
  .byte  197,253,118,192                     // vpcmpeqd      %ymm0,%ymm0,%ymm0
  .byte  197,181,254,192                     // vpaddd        %ymm0,%ymm9,%ymm0
  .byte  197,188,93,192                      // vminps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_hsw
.globl _sk_repeat_y_hsw
FUNCTION(_sk_repeat_y_hsw)
_sk_repeat_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,4                  // vbroadcastss  0x4(%rax),%ymm8
  .byte  197,60,89,193                       // vmulps        %ymm1,%ymm8,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,53,172,193                   // vfnmadd213ps  %ymm1,%ymm9,%ymm8
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  197,181,254,201                     // vpaddd        %ymm1,%ymm9,%ymm1
  .byte  197,188,93,201                      // vminps        %ymm1,%ymm8,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_hsw
.globl _sk_mirror_x_hsw
FUNCTION(_sk_mirror_x_hsw)
_sk_mirror_x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,122,16,0                        // vmovss        (%rax),%xmm8
  .byte  197,122,16,72,4                     // vmovss        0x4(%rax),%xmm9
  .byte  196,66,125,24,208                   // vbroadcastss  %xmm8,%ymm10
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,193,58,88,192                   // vaddss        %xmm8,%xmm8,%xmm0
  .byte  196,98,125,24,192                   // vbroadcastss  %xmm0,%ymm8
  .byte  197,178,89,5,61,15,0,0              // vmulss        0xf3d(%rip),%xmm9,%xmm0        # 4f00 <_sk_callback_hsw+0x45c>
  .byte  196,226,125,24,192                  // vbroadcastss  %xmm0,%ymm0
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  196,227,125,8,192,1                 // vroundps      $0x1,%ymm0,%ymm0
  .byte  196,194,61,172,195                  // vfnmadd213ps  %ymm11,%ymm8,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,188,84,192                      // vandps        %ymm0,%ymm8,%ymm0
  .byte  196,65,61,118,192                   // vpcmpeqd      %ymm8,%ymm8,%ymm8
  .byte  196,65,45,254,192                   // vpaddd        %ymm8,%ymm10,%ymm8
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_hsw
.globl _sk_mirror_y_hsw
FUNCTION(_sk_mirror_y_hsw)
_sk_mirror_y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,122,16,0                        // vmovss        (%rax),%xmm8
  .byte  197,122,16,72,4                     // vmovss        0x4(%rax),%xmm9
  .byte  196,66,125,24,208                   // vbroadcastss  %xmm8,%ymm10
  .byte  196,65,116,92,218                   // vsubps        %ymm10,%ymm1,%ymm11
  .byte  196,193,58,88,200                   // vaddss        %xmm8,%xmm8,%xmm1
  .byte  196,98,125,24,193                   // vbroadcastss  %xmm1,%ymm8
  .byte  197,178,89,13,225,14,0,0            // vmulss        0xee1(%rip),%xmm9,%xmm1        # 4f04 <_sk_callback_hsw+0x460>
  .byte  196,226,125,24,201                  // vbroadcastss  %xmm1,%ymm1
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  196,227,125,8,201,1                 // vroundps      $0x1,%ymm1,%ymm1
  .byte  196,194,61,172,203                  // vfnmadd213ps  %ymm11,%ymm8,%ymm1
  .byte  196,193,116,92,202                  // vsubps        %ymm10,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,193                       // vsubps        %ymm1,%ymm8,%ymm8
  .byte  197,188,84,201                      // vandps        %ymm1,%ymm8,%ymm1
  .byte  196,65,61,118,192                   // vpcmpeqd      %ymm8,%ymm8,%ymm8
  .byte  196,65,45,254,192                   // vpaddd        %ymm8,%ymm10,%ymm8
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_1_hsw
.globl _sk_clamp_x_1_hsw
FUNCTION(_sk_clamp_x_1_hsw)
_sk_clamp_x_1_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,154,14,0,0          // vbroadcastss  0xe9a(%rip),%ymm8        # 4f08 <_sk_callback_hsw+0x464>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_1_hsw
.globl _sk_repeat_x_1_hsw
FUNCTION(_sk_repeat_x_1_hsw)
_sk_repeat_x_1_hsw:
  .byte  196,99,125,8,192,1                  // vroundps      $0x1,%ymm0,%ymm8
  .byte  196,193,124,92,192                  // vsubps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_1_hsw
.globl _sk_mirror_x_1_hsw
FUNCTION(_sk_mirror_x_1_hsw)
_sk_mirror_x_1_hsw:
  .byte  196,98,125,24,5,125,14,0,0          // vbroadcastss  0xe7d(%rip),%ymm8        # 4f0c <_sk_callback_hsw+0x468>
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,13,115,14,0,0         // vbroadcastss  0xe73(%rip),%ymm9        # 4f10 <_sk_callback_hsw+0x46c>
  .byte  196,65,124,89,201                   // vmulps        %ymm9,%ymm0,%ymm9
  .byte  196,67,125,8,201,1                  // vroundps      $0x1,%ymm9,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,193,124,92,193                  // vsubps        %ymm9,%ymm0,%ymm0
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,188,84,192                      // vandps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_hsw
.globl _sk_luminance_to_alpha_hsw
FUNCTION(_sk_luminance_to_alpha_hsw)
_sk_luminance_to_alpha_hsw:
  .byte  196,226,125,24,29,67,14,0,0         // vbroadcastss  0xe43(%rip),%ymm3        # 4f14 <_sk_callback_hsw+0x470>
  .byte  196,98,125,24,5,62,14,0,0           // vbroadcastss  0xe3e(%rip),%ymm8        # 4f18 <_sk_callback_hsw+0x474>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,226,125,184,203                 // vfmadd231ps   %ymm3,%ymm0,%ymm1
  .byte  196,226,125,24,29,47,14,0,0         // vbroadcastss  0xe2f(%rip),%ymm3        # 4f1c <_sk_callback_hsw+0x478>
  .byte  196,226,109,168,217                 // vfmadd213ps   %ymm1,%ymm2,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_hsw
.globl _sk_matrix_2x3_hsw
FUNCTION(_sk_matrix_2x3_hsw)
_sk_matrix_2x3_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,12                 // vbroadcastss  0xc(%rax),%ymm11
  .byte  196,98,125,24,72,20                 // vbroadcastss  0x14(%rax),%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_hsw
.globl _sk_matrix_3x4_hsw
FUNCTION(_sk_matrix_3x4_hsw)
_sk_matrix_3x4_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,12                 // vbroadcastss  0xc(%rax),%ymm10
  .byte  196,98,125,24,88,24                 // vbroadcastss  0x18(%rax),%ymm11
  .byte  196,98,125,24,64,36                 // vbroadcastss  0x24(%rax),%ymm8
  .byte  196,66,109,184,195                  // vfmadd231ps   %ymm11,%ymm2,%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,16                 // vbroadcastss  0x10(%rax),%ymm11
  .byte  196,98,125,24,96,28                 // vbroadcastss  0x1c(%rax),%ymm12
  .byte  196,98,125,24,72,40                 // vbroadcastss  0x28(%rax),%ymm9
  .byte  196,66,109,184,204                  // vfmadd231ps   %ymm12,%ymm2,%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,98,125,24,96,20                 // vbroadcastss  0x14(%rax),%ymm12
  .byte  196,98,125,24,104,32                // vbroadcastss  0x20(%rax),%ymm13
  .byte  196,98,125,24,80,44                 // vbroadcastss  0x2c(%rax),%ymm10
  .byte  196,66,109,184,213                  // vfmadd231ps   %ymm13,%ymm2,%ymm10
  .byte  196,66,117,184,212                  // vfmadd231ps   %ymm12,%ymm1,%ymm10
  .byte  196,66,125,184,211                  // vfmadd231ps   %ymm11,%ymm0,%ymm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_hsw
.globl _sk_matrix_4x5_hsw
FUNCTION(_sk_matrix_4x5_hsw)
_sk_matrix_4x5_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,32                 // vbroadcastss  0x20(%rax),%ymm11
  .byte  196,98,125,24,96,48                 // vbroadcastss  0x30(%rax),%ymm12
  .byte  196,98,125,24,64,64                 // vbroadcastss  0x40(%rax),%ymm8
  .byte  196,66,101,184,196                  // vfmadd231ps   %ymm12,%ymm3,%ymm8
  .byte  196,66,109,184,195                  // vfmadd231ps   %ymm11,%ymm2,%ymm8
  .byte  196,66,117,184,194                  // vfmadd231ps   %ymm10,%ymm1,%ymm8
  .byte  196,66,125,184,193                  // vfmadd231ps   %ymm9,%ymm0,%ymm8
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,98,125,24,96,36                 // vbroadcastss  0x24(%rax),%ymm12
  .byte  196,98,125,24,104,52                // vbroadcastss  0x34(%rax),%ymm13
  .byte  196,98,125,24,72,68                 // vbroadcastss  0x44(%rax),%ymm9
  .byte  196,66,101,184,205                  // vfmadd231ps   %ymm13,%ymm3,%ymm9
  .byte  196,66,109,184,204                  // vfmadd231ps   %ymm12,%ymm2,%ymm9
  .byte  196,66,117,184,203                  // vfmadd231ps   %ymm11,%ymm1,%ymm9
  .byte  196,66,125,184,202                  // vfmadd231ps   %ymm10,%ymm0,%ymm9
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  196,98,125,24,96,24                 // vbroadcastss  0x18(%rax),%ymm12
  .byte  196,98,125,24,104,40                // vbroadcastss  0x28(%rax),%ymm13
  .byte  196,98,125,24,112,56                // vbroadcastss  0x38(%rax),%ymm14
  .byte  196,98,125,24,80,72                 // vbroadcastss  0x48(%rax),%ymm10
  .byte  196,66,101,184,214                  // vfmadd231ps   %ymm14,%ymm3,%ymm10
  .byte  196,66,109,184,213                  // vfmadd231ps   %ymm13,%ymm2,%ymm10
  .byte  196,66,117,184,212                  // vfmadd231ps   %ymm12,%ymm1,%ymm10
  .byte  196,66,125,184,211                  // vfmadd231ps   %ymm11,%ymm0,%ymm10
  .byte  196,98,125,24,96,12                 // vbroadcastss  0xc(%rax),%ymm12
  .byte  196,98,125,24,104,28                // vbroadcastss  0x1c(%rax),%ymm13
  .byte  196,98,125,24,112,44                // vbroadcastss  0x2c(%rax),%ymm14
  .byte  196,98,125,24,120,60                // vbroadcastss  0x3c(%rax),%ymm15
  .byte  196,98,125,24,88,76                 // vbroadcastss  0x4c(%rax),%ymm11
  .byte  196,66,101,184,223                  // vfmadd231ps   %ymm15,%ymm3,%ymm11
  .byte  196,66,109,184,222                  // vfmadd231ps   %ymm14,%ymm2,%ymm11
  .byte  196,66,117,184,221                  // vfmadd231ps   %ymm13,%ymm1,%ymm11
  .byte  196,66,125,184,220                  // vfmadd231ps   %ymm12,%ymm0,%ymm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  197,124,41,219                      // vmovaps       %ymm11,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x3_hsw
.globl _sk_matrix_4x3_hsw
FUNCTION(_sk_matrix_4x3_hsw)
_sk_matrix_4x3_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  196,226,125,24,88,16                // vbroadcastss  0x10(%rax),%ymm3
  .byte  196,98,125,24,64,32                 // vbroadcastss  0x20(%rax),%ymm8
  .byte  196,98,117,184,195                  // vfmadd231ps   %ymm3,%ymm1,%ymm8
  .byte  196,98,125,184,194                  // vfmadd231ps   %ymm2,%ymm0,%ymm8
  .byte  196,226,125,24,80,4                 // vbroadcastss  0x4(%rax),%ymm2
  .byte  196,226,125,24,88,20                // vbroadcastss  0x14(%rax),%ymm3
  .byte  196,98,125,24,72,36                 // vbroadcastss  0x24(%rax),%ymm9
  .byte  196,98,117,184,203                  // vfmadd231ps   %ymm3,%ymm1,%ymm9
  .byte  196,98,125,184,202                  // vfmadd231ps   %ymm2,%ymm0,%ymm9
  .byte  196,226,125,24,88,8                 // vbroadcastss  0x8(%rax),%ymm3
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,226,125,24,80,40                // vbroadcastss  0x28(%rax),%ymm2
  .byte  196,194,117,184,210                 // vfmadd231ps   %ymm10,%ymm1,%ymm2
  .byte  196,226,125,184,211                 // vfmadd231ps   %ymm3,%ymm0,%ymm2
  .byte  196,98,125,24,80,12                 // vbroadcastss  0xc(%rax),%ymm10
  .byte  196,98,125,24,88,28                 // vbroadcastss  0x1c(%rax),%ymm11
  .byte  196,226,125,24,88,44                // vbroadcastss  0x2c(%rax),%ymm3
  .byte  196,194,117,184,219                 // vfmadd231ps   %ymm11,%ymm1,%ymm3
  .byte  196,194,125,184,218                 // vfmadd231ps   %ymm10,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_hsw
.globl _sk_matrix_perspective_hsw
FUNCTION(_sk_matrix_perspective_hsw)
_sk_matrix_perspective_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,66,117,184,209                  // vfmadd231ps   %ymm9,%ymm1,%ymm10
  .byte  196,66,125,184,208                  // vfmadd231ps   %ymm8,%ymm0,%ymm10
  .byte  196,98,125,24,64,12                 // vbroadcastss  0xc(%rax),%ymm8
  .byte  196,98,125,24,72,16                 // vbroadcastss  0x10(%rax),%ymm9
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,66,117,184,217                  // vfmadd231ps   %ymm9,%ymm1,%ymm11
  .byte  196,66,125,184,216                  // vfmadd231ps   %ymm8,%ymm0,%ymm11
  .byte  196,98,125,24,64,24                 // vbroadcastss  0x18(%rax),%ymm8
  .byte  196,98,125,24,72,28                 // vbroadcastss  0x1c(%rax),%ymm9
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  196,66,117,184,225                  // vfmadd231ps   %ymm9,%ymm1,%ymm12
  .byte  196,66,125,184,224                  // vfmadd231ps   %ymm8,%ymm0,%ymm12
  .byte  196,193,124,83,204                  // vrcpps        %ymm12,%ymm1
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_gradient_hsw
.globl _sk_evenly_spaced_gradient_hsw
FUNCTION(_sk_evenly_spaced_gradient_hsw)
_sk_evenly_spaced_gradient_hsw:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  77,137,211                          // mov           %r10,%r11
  .byte  73,255,203                          // dec           %r11
  .byte  120,7                               // js            43a6 <_sk_evenly_spaced_gradient_hsw+0x19>
  .byte  196,193,242,42,203                  // vcvtsi2ss     %r11,%xmm1,%xmm1
  .byte  235,22                              // jmp           43bc <_sk_evenly_spaced_gradient_hsw+0x2f>
  .byte  76,137,219                          // mov           %r11,%rbx
  .byte  72,209,235                          // shr           %rbx
  .byte  65,131,227,1                        // and           $0x1,%r11d
  .byte  73,9,219                            // or            %rbx,%r11
  .byte  196,193,242,42,203                  // vcvtsi2ss     %r11,%xmm1,%xmm1
  .byte  197,242,88,201                      // vaddss        %xmm1,%xmm1,%xmm1
  .byte  196,226,125,24,201                  // vbroadcastss  %xmm1,%ymm1
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,126,91,217                      // vcvttps2dq    %ymm1,%ymm11
  .byte  73,131,250,8                        // cmp           $0x8,%r10
  .byte  119,70                              // ja            4415 <_sk_evenly_spaced_gradient_hsw+0x88>
  .byte  196,66,37,22,1                      // vpermps       (%r9),%ymm11,%ymm8
  .byte  72,139,88,40                        // mov           0x28(%rax),%rbx
  .byte  196,98,37,22,11                     // vpermps       (%rbx),%ymm11,%ymm9
  .byte  72,139,88,16                        // mov           0x10(%rax),%rbx
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  196,226,37,22,11                    // vpermps       (%rbx),%ymm11,%ymm1
  .byte  72,139,88,48                        // mov           0x30(%rax),%rbx
  .byte  196,98,37,22,19                     // vpermps       (%rbx),%ymm11,%ymm10
  .byte  196,194,37,22,17                    // vpermps       (%r9),%ymm11,%ymm2
  .byte  72,139,88,56                        // mov           0x38(%rax),%rbx
  .byte  196,98,37,22,35                     // vpermps       (%rbx),%ymm11,%ymm12
  .byte  72,139,88,32                        // mov           0x20(%rax),%rbx
  .byte  196,226,37,22,27                    // vpermps       (%rbx),%ymm11,%ymm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,98,37,22,40                     // vpermps       (%rax),%ymm11,%ymm13
  .byte  235,110                             // jmp           4483 <_sk_evenly_spaced_gradient_hsw+0xf6>
  .byte  196,65,13,118,246                   // vpcmpeqd      %ymm14,%ymm14,%ymm14
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,2,117,146,4,153                 // vgatherdps    %ymm1,(%r9,%ymm11,4),%ymm8
  .byte  72,139,88,40                        // mov           0x28(%rax),%rbx
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,34,117,146,12,155               // vgatherdps    %ymm1,(%rbx,%ymm11,4),%ymm9
  .byte  72,139,88,16                        // mov           0x10(%rax),%rbx
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,162,109,146,12,155              // vgatherdps    %ymm2,(%rbx,%ymm11,4),%ymm1
  .byte  72,139,88,48                        // mov           0x30(%rax),%rbx
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,34,109,146,20,155               // vgatherdps    %ymm2,(%rbx,%ymm11,4),%ymm10
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  196,130,101,146,20,153              // vgatherdps    %ymm3,(%r9,%ymm11,4),%ymm2
  .byte  72,139,88,56                        // mov           0x38(%rax),%rbx
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  196,34,101,146,36,155               // vgatherdps    %ymm3,(%rbx,%ymm11,4),%ymm12
  .byte  72,139,88,32                        // mov           0x20(%rax),%rbx
  .byte  196,65,21,118,237                   // vpcmpeqd      %ymm13,%ymm13,%ymm13
  .byte  196,162,21,146,28,155               // vgatherdps    %ymm13,(%rbx,%ymm11,4),%ymm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,34,13,146,44,152                // vgatherdps    %ymm14,(%rax,%ymm11,4),%ymm13
  .byte  196,66,125,168,193                  // vfmadd213ps   %ymm9,%ymm0,%ymm8
  .byte  196,194,125,168,202                 // vfmadd213ps   %ymm10,%ymm0,%ymm1
  .byte  196,194,125,168,212                 // vfmadd213ps   %ymm12,%ymm0,%ymm2
  .byte  196,194,125,168,221                 // vfmadd213ps   %ymm13,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gauss_a_to_rgba_hsw
.globl _sk_gauss_a_to_rgba_hsw
FUNCTION(_sk_gauss_a_to_rgba_hsw)
_sk_gauss_a_to_rgba_hsw:
  .byte  196,226,125,24,5,119,10,0,0         // vbroadcastss  0xa77(%rip),%ymm0        # 4f20 <_sk_callback_hsw+0x47c>
  .byte  196,226,125,24,13,114,10,0,0        // vbroadcastss  0xa72(%rip),%ymm1        # 4f24 <_sk_callback_hsw+0x480>
  .byte  196,226,101,168,200                 // vfmadd213ps   %ymm0,%ymm3,%ymm1
  .byte  196,226,125,24,5,104,10,0,0         // vbroadcastss  0xa68(%rip),%ymm0        # 4f28 <_sk_callback_hsw+0x484>
  .byte  196,226,101,184,193                 // vfmadd231ps   %ymm1,%ymm3,%ymm0
  .byte  196,226,125,24,13,94,10,0,0         // vbroadcastss  0xa5e(%rip),%ymm1        # 4f2c <_sk_callback_hsw+0x488>
  .byte  196,226,101,184,200                 // vfmadd231ps   %ymm0,%ymm3,%ymm1
  .byte  196,226,125,24,5,84,10,0,0          // vbroadcastss  0xa54(%rip),%ymm0        # 4f30 <_sk_callback_hsw+0x48c>
  .byte  196,226,101,184,193                 // vfmadd231ps   %ymm1,%ymm3,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,252,40,216                      // vmovaps       %ymm0,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_hsw
.globl _sk_gradient_hsw
FUNCTION(_sk_gradient_hsw)
_sk_gradient_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  73,131,249,1                        // cmp           $0x1,%r9
  .byte  15,134,180,0,0,0                    // jbe           45b4 <_sk_gradient_hsw+0xc3>
  .byte  76,139,80,72                        // mov           0x48(%rax),%r10
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  65,187,1,0,0,0                      // mov           $0x1,%r11d
  .byte  196,226,125,24,21,29,10,0,0         // vbroadcastss  0xa1d(%rip),%ymm2        # 4f34 <_sk_callback_hsw+0x490>
  .byte  196,65,53,239,201                   // vpxor         %ymm9,%ymm9,%ymm9
  .byte  196,130,125,24,28,154               // vbroadcastss  (%r10,%r11,4),%ymm3
  .byte  197,228,194,216,2                   // vcmpleps      %ymm0,%ymm3,%ymm3
  .byte  196,227,117,74,218,48               // vblendvps     %ymm3,%ymm2,%ymm1,%ymm3
  .byte  196,65,101,254,201                  // vpaddd        %ymm9,%ymm3,%ymm9
  .byte  73,255,195                          // inc           %r11
  .byte  77,57,217                           // cmp           %r11,%r9
  .byte  117,226                             // jne           451c <_sk_gradient_hsw+0x2b>
  .byte  76,139,80,8                         // mov           0x8(%rax),%r10
  .byte  73,131,249,8                        // cmp           $0x8,%r9
  .byte  118,121                             // jbe           45bd <_sk_gradient_hsw+0xcc>
  .byte  196,65,13,118,246                   // vpcmpeqd      %ymm14,%ymm14,%ymm14
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,2,117,146,4,138                 // vgatherdps    %ymm1,(%r10,%ymm9,4),%ymm8
  .byte  76,139,72,40                        // mov           0x28(%rax),%r9
  .byte  197,245,118,201                     // vpcmpeqd      %ymm1,%ymm1,%ymm1
  .byte  196,2,117,146,20,137                // vgatherdps    %ymm1,(%r9,%ymm9,4),%ymm10
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,130,109,146,12,137              // vgatherdps    %ymm2,(%r9,%ymm9,4),%ymm1
  .byte  76,139,72,48                        // mov           0x30(%rax),%r9
  .byte  197,237,118,210                     // vpcmpeqd      %ymm2,%ymm2,%ymm2
  .byte  196,2,109,146,28,137                // vgatherdps    %ymm2,(%r9,%ymm9,4),%ymm11
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  196,130,101,146,20,138              // vgatherdps    %ymm3,(%r10,%ymm9,4),%ymm2
  .byte  76,139,72,56                        // mov           0x38(%rax),%r9
  .byte  197,229,118,219                     // vpcmpeqd      %ymm3,%ymm3,%ymm3
  .byte  196,2,101,146,36,137                // vgatherdps    %ymm3,(%r9,%ymm9,4),%ymm12
  .byte  76,139,72,32                        // mov           0x20(%rax),%r9
  .byte  196,65,21,118,237                   // vpcmpeqd      %ymm13,%ymm13,%ymm13
  .byte  196,130,21,146,28,137               // vgatherdps    %ymm13,(%r9,%ymm9,4),%ymm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,34,13,146,44,136                // vgatherdps    %ymm14,(%rax,%ymm9,4),%ymm13
  .byte  235,77                              // jmp           4601 <_sk_gradient_hsw+0x110>
  .byte  76,139,80,8                         // mov           0x8(%rax),%r10
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  196,66,53,22,2                      // vpermps       (%r10),%ymm9,%ymm8
  .byte  76,139,72,40                        // mov           0x28(%rax),%r9
  .byte  196,66,53,22,17                     // vpermps       (%r9),%ymm9,%ymm10
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,194,53,22,9                     // vpermps       (%r9),%ymm9,%ymm1
  .byte  76,139,72,48                        // mov           0x30(%rax),%r9
  .byte  196,66,53,22,25                     // vpermps       (%r9),%ymm9,%ymm11
  .byte  196,194,53,22,18                    // vpermps       (%r10),%ymm9,%ymm2
  .byte  76,139,72,56                        // mov           0x38(%rax),%r9
  .byte  196,66,53,22,33                     // vpermps       (%r9),%ymm9,%ymm12
  .byte  76,139,72,32                        // mov           0x20(%rax),%r9
  .byte  196,194,53,22,25                    // vpermps       (%r9),%ymm9,%ymm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,98,53,22,40                     // vpermps       (%rax),%ymm9,%ymm13
  .byte  196,66,125,168,194                  // vfmadd213ps   %ymm10,%ymm0,%ymm8
  .byte  196,194,125,168,203                 // vfmadd213ps   %ymm11,%ymm0,%ymm1
  .byte  196,194,125,168,212                 // vfmadd213ps   %ymm12,%ymm0,%ymm2
  .byte  196,194,125,168,221                 // vfmadd213ps   %ymm13,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_hsw
.globl _sk_evenly_spaced_2_stop_gradient_hsw
FUNCTION(_sk_evenly_spaced_2_stop_gradient_hsw)
_sk_evenly_spaced_2_stop_gradient_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,98,125,184,193                  // vfmadd231ps   %ymm1,%ymm0,%ymm8
  .byte  196,226,125,24,80,4                 // vbroadcastss  0x4(%rax),%ymm2
  .byte  196,226,125,24,72,20                // vbroadcastss  0x14(%rax),%ymm1
  .byte  196,226,125,184,202                 // vfmadd231ps   %ymm2,%ymm0,%ymm1
  .byte  196,226,125,24,88,8                 // vbroadcastss  0x8(%rax),%ymm3
  .byte  196,226,125,24,80,24                // vbroadcastss  0x18(%rax),%ymm2
  .byte  196,226,125,184,211                 // vfmadd231ps   %ymm3,%ymm0,%ymm2
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,226,125,24,88,28                // vbroadcastss  0x1c(%rax),%ymm3
  .byte  196,194,125,184,217                 // vfmadd231ps   %ymm9,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_hsw
.globl _sk_xy_to_unit_angle_hsw
FUNCTION(_sk_xy_to_unit_angle_hsw)
_sk_xy_to_unit_angle_hsw:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,200                       // vsubps        %ymm0,%ymm8,%ymm9
  .byte  197,52,84,200                       // vandps        %ymm0,%ymm9,%ymm9
  .byte  197,60,92,209                       // vsubps        %ymm1,%ymm8,%ymm10
  .byte  197,44,84,209                       // vandps        %ymm1,%ymm10,%ymm10
  .byte  196,65,52,93,218                    // vminps        %ymm10,%ymm9,%ymm11
  .byte  196,65,52,95,226                    // vmaxps        %ymm10,%ymm9,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  196,65,36,89,227                    // vmulps        %ymm11,%ymm11,%ymm12
  .byte  196,98,125,24,45,156,8,0,0          // vbroadcastss  0x89c(%rip),%ymm13        # 4f38 <_sk_callback_hsw+0x494>
  .byte  196,98,125,24,53,151,8,0,0          // vbroadcastss  0x897(%rip),%ymm14        # 4f3c <_sk_callback_hsw+0x498>
  .byte  196,66,29,184,245                   // vfmadd231ps   %ymm13,%ymm12,%ymm14
  .byte  196,98,125,24,45,141,8,0,0          // vbroadcastss  0x88d(%rip),%ymm13        # 4f40 <_sk_callback_hsw+0x49c>
  .byte  196,66,29,184,238                   // vfmadd231ps   %ymm14,%ymm12,%ymm13
  .byte  196,98,125,24,53,131,8,0,0          // vbroadcastss  0x883(%rip),%ymm14        # 4f44 <_sk_callback_hsw+0x4a0>
  .byte  196,66,29,184,245                   // vfmadd231ps   %ymm13,%ymm12,%ymm14
  .byte  196,65,36,89,222                    // vmulps        %ymm14,%ymm11,%ymm11
  .byte  196,65,52,194,202,1                 // vcmpltps      %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,110,8,0,0          // vbroadcastss  0x86e(%rip),%ymm10        # 4f48 <_sk_callback_hsw+0x4a4>
  .byte  196,65,44,92,211                    // vsubps        %ymm11,%ymm10,%ymm10
  .byte  196,67,37,74,202,144                // vblendvps     %ymm9,%ymm10,%ymm11,%ymm9
  .byte  196,193,124,194,192,1               // vcmpltps      %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,21,88,8,0,0           // vbroadcastss  0x858(%rip),%ymm10        # 4f4c <_sk_callback_hsw+0x4a8>
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  196,65,116,194,200,1                // vcmpltps      %ymm8,%ymm1,%ymm9
  .byte  196,98,125,24,21,66,8,0,0           // vbroadcastss  0x842(%rip),%ymm10        # 4f50 <_sk_callback_hsw+0x4ac>
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  196,195,125,74,194,144              // vblendvps     %ymm9,%ymm10,%ymm0,%ymm0
  .byte  196,65,124,194,200,3                // vcmpunordps   %ymm8,%ymm0,%ymm9
  .byte  196,195,125,74,192,144              // vblendvps     %ymm9,%ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_hsw
.globl _sk_xy_to_radius_hsw
FUNCTION(_sk_xy_to_radius_hsw)
_sk_xy_to_radius_hsw:
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,98,125,184,192                  // vfmadd231ps   %ymm0,%ymm0,%ymm8
  .byte  196,193,124,81,192                  // vsqrtps       %ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_hsw
.globl _sk_save_xy_hsw
FUNCTION(_sk_save_xy_hsw)
_sk_save_xy_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,15,8,0,0            // vbroadcastss  0x80f(%rip),%ymm8        # 4f54 <_sk_callback_hsw+0x4b0>
  .byte  196,65,124,88,200                   // vaddps        %ymm8,%ymm0,%ymm9
  .byte  196,67,125,8,209,1                  // vroundps      $0x1,%ymm9,%ymm10
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,88,192                   // vaddps        %ymm8,%ymm1,%ymm8
  .byte  196,67,125,8,208,1                  // vroundps      $0x1,%ymm8,%ymm10
  .byte  196,65,60,92,194                    // vsubps        %ymm10,%ymm8,%ymm8
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,124,17,72,64                    // vmovups       %ymm9,0x40(%rax)
  .byte  197,124,17,64,96                    // vmovups       %ymm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_hsw
.globl _sk_accumulate_hsw
FUNCTION(_sk_accumulate_hsw)
_sk_accumulate_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,16,128,128,0,0,0            // vmovups       0x80(%rax),%ymm8
  .byte  197,60,89,128,160,0,0,0             // vmulps        0xa0(%rax),%ymm8,%ymm8
  .byte  196,226,61,184,224                  // vfmadd231ps   %ymm0,%ymm8,%ymm4
  .byte  196,226,61,184,233                  // vfmadd231ps   %ymm1,%ymm8,%ymm5
  .byte  196,226,61,184,242                  // vfmadd231ps   %ymm2,%ymm8,%ymm6
  .byte  196,98,101,168,199                  // vfmadd213ps   %ymm7,%ymm3,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,199                      // vmovaps       %ymm8,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_hsw
.globl _sk_bilinear_nx_hsw
FUNCTION(_sk_bilinear_nx_hsw)
_sk_bilinear_nx_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,163,7,0,0          // vbroadcastss  0x7a3(%rip),%ymm0        # 4f58 <_sk_callback_hsw+0x4b4>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,154,7,0,0           // vbroadcastss  0x79a(%rip),%ymm8        # 4f5c <_sk_callback_hsw+0x4b8>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_hsw
.globl _sk_bilinear_px_hsw
FUNCTION(_sk_bilinear_px_hsw)
_sk_bilinear_px_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,130,7,0,0          // vbroadcastss  0x782(%rip),%ymm0        # 4f60 <_sk_callback_hsw+0x4bc>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_hsw
.globl _sk_bilinear_ny_hsw
FUNCTION(_sk_bilinear_ny_hsw)
_sk_bilinear_ny_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,102,7,0,0         // vbroadcastss  0x766(%rip),%ymm1        # 4f64 <_sk_callback_hsw+0x4c0>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,92,7,0,0            // vbroadcastss  0x75c(%rip),%ymm8        # 4f68 <_sk_callback_hsw+0x4c4>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_hsw
.globl _sk_bilinear_py_hsw
FUNCTION(_sk_bilinear_py_hsw)
_sk_bilinear_py_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,68,7,0,0          // vbroadcastss  0x744(%rip),%ymm1        # 4f6c <_sk_callback_hsw+0x4c8>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_hsw
.globl _sk_bicubic_n3x_hsw
FUNCTION(_sk_bicubic_n3x_hsw)
_sk_bicubic_n3x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,39,7,0,0           // vbroadcastss  0x727(%rip),%ymm0        # 4f70 <_sk_callback_hsw+0x4cc>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,30,7,0,0            // vbroadcastss  0x71e(%rip),%ymm8        # 4f74 <_sk_callback_hsw+0x4d0>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,15,7,0,0           // vbroadcastss  0x70f(%rip),%ymm10        # 4f78 <_sk_callback_hsw+0x4d4>
  .byte  196,98,125,24,29,10,7,0,0           // vbroadcastss  0x70a(%rip),%ymm11        # 4f7c <_sk_callback_hsw+0x4d8>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,36,89,193                    // vmulps        %ymm9,%ymm11,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_hsw
.globl _sk_bicubic_n1x_hsw
FUNCTION(_sk_bicubic_n1x_hsw)
_sk_bicubic_n1x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,237,6,0,0          // vbroadcastss  0x6ed(%rip),%ymm0        # 4f80 <_sk_callback_hsw+0x4dc>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,228,6,0,0           // vbroadcastss  0x6e4(%rip),%ymm8        # 4f84 <_sk_callback_hsw+0x4e0>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,218,6,0,0          // vbroadcastss  0x6da(%rip),%ymm9        # 4f88 <_sk_callback_hsw+0x4e4>
  .byte  196,98,125,24,21,213,6,0,0          // vbroadcastss  0x6d5(%rip),%ymm10        # 4f8c <_sk_callback_hsw+0x4e8>
  .byte  196,66,61,168,209                   // vfmadd213ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,13,203,6,0,0          // vbroadcastss  0x6cb(%rip),%ymm9        # 4f90 <_sk_callback_hsw+0x4ec>
  .byte  196,66,61,184,202                   // vfmadd231ps   %ymm10,%ymm8,%ymm9
  .byte  196,98,125,24,21,193,6,0,0          // vbroadcastss  0x6c1(%rip),%ymm10        # 4f94 <_sk_callback_hsw+0x4f0>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  197,124,17,144,128,0,0,0            // vmovups       %ymm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_hsw
.globl _sk_bicubic_p1x_hsw
FUNCTION(_sk_bicubic_p1x_hsw)
_sk_bicubic_p1x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,169,6,0,0           // vbroadcastss  0x6a9(%rip),%ymm8        # 4f98 <_sk_callback_hsw+0x4f4>
  .byte  197,188,88,0                        // vaddps        (%rax),%ymm8,%ymm0
  .byte  197,124,16,72,64                    // vmovups       0x40(%rax),%ymm9
  .byte  196,98,125,24,21,155,6,0,0          // vbroadcastss  0x69b(%rip),%ymm10        # 4f9c <_sk_callback_hsw+0x4f8>
  .byte  196,98,125,24,29,150,6,0,0          // vbroadcastss  0x696(%rip),%ymm11        # 4fa0 <_sk_callback_hsw+0x4fc>
  .byte  196,66,53,168,218                   // vfmadd213ps   %ymm10,%ymm9,%ymm11
  .byte  196,66,53,168,216                   // vfmadd213ps   %ymm8,%ymm9,%ymm11
  .byte  196,98,125,24,5,135,6,0,0           // vbroadcastss  0x687(%rip),%ymm8        # 4fa4 <_sk_callback_hsw+0x500>
  .byte  196,66,53,184,195                   // vfmadd231ps   %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_hsw
.globl _sk_bicubic_p3x_hsw
FUNCTION(_sk_bicubic_p3x_hsw)
_sk_bicubic_p3x_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,111,6,0,0          // vbroadcastss  0x66f(%rip),%ymm0        # 4fa8 <_sk_callback_hsw+0x504>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,92,6,0,0           // vbroadcastss  0x65c(%rip),%ymm10        # 4fac <_sk_callback_hsw+0x508>
  .byte  196,98,125,24,29,87,6,0,0           // vbroadcastss  0x657(%rip),%ymm11        # 4fb0 <_sk_callback_hsw+0x50c>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,52,89,195                    // vmulps        %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_hsw
.globl _sk_bicubic_n3y_hsw
FUNCTION(_sk_bicubic_n3y_hsw)
_sk_bicubic_n3y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,58,6,0,0          // vbroadcastss  0x63a(%rip),%ymm1        # 4fb4 <_sk_callback_hsw+0x510>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,48,6,0,0            // vbroadcastss  0x630(%rip),%ymm8        # 4fb8 <_sk_callback_hsw+0x514>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,33,6,0,0           // vbroadcastss  0x621(%rip),%ymm10        # 4fbc <_sk_callback_hsw+0x518>
  .byte  196,98,125,24,29,28,6,0,0           // vbroadcastss  0x61c(%rip),%ymm11        # 4fc0 <_sk_callback_hsw+0x51c>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,36,89,193                    // vmulps        %ymm9,%ymm11,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_hsw
.globl _sk_bicubic_n1y_hsw
FUNCTION(_sk_bicubic_n1y_hsw)
_sk_bicubic_n1y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,255,5,0,0         // vbroadcastss  0x5ff(%rip),%ymm1        # 4fc4 <_sk_callback_hsw+0x520>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,245,5,0,0           // vbroadcastss  0x5f5(%rip),%ymm8        # 4fc8 <_sk_callback_hsw+0x524>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,235,5,0,0          // vbroadcastss  0x5eb(%rip),%ymm9        # 4fcc <_sk_callback_hsw+0x528>
  .byte  196,98,125,24,21,230,5,0,0          // vbroadcastss  0x5e6(%rip),%ymm10        # 4fd0 <_sk_callback_hsw+0x52c>
  .byte  196,66,61,168,209                   // vfmadd213ps   %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,13,220,5,0,0          // vbroadcastss  0x5dc(%rip),%ymm9        # 4fd4 <_sk_callback_hsw+0x530>
  .byte  196,66,61,184,202                   // vfmadd231ps   %ymm10,%ymm8,%ymm9
  .byte  196,98,125,24,21,210,5,0,0          // vbroadcastss  0x5d2(%rip),%ymm10        # 4fd8 <_sk_callback_hsw+0x534>
  .byte  196,66,61,184,209                   // vfmadd231ps   %ymm9,%ymm8,%ymm10
  .byte  197,124,17,144,160,0,0,0            // vmovups       %ymm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_hsw
.globl _sk_bicubic_p1y_hsw
FUNCTION(_sk_bicubic_p1y_hsw)
_sk_bicubic_p1y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,186,5,0,0           // vbroadcastss  0x5ba(%rip),%ymm8        # 4fdc <_sk_callback_hsw+0x538>
  .byte  197,188,88,72,32                    // vaddps        0x20(%rax),%ymm8,%ymm1
  .byte  197,124,16,72,96                    // vmovups       0x60(%rax),%ymm9
  .byte  196,98,125,24,21,171,5,0,0          // vbroadcastss  0x5ab(%rip),%ymm10        # 4fe0 <_sk_callback_hsw+0x53c>
  .byte  196,98,125,24,29,166,5,0,0          // vbroadcastss  0x5a6(%rip),%ymm11        # 4fe4 <_sk_callback_hsw+0x540>
  .byte  196,66,53,168,218                   // vfmadd213ps   %ymm10,%ymm9,%ymm11
  .byte  196,66,53,168,216                   // vfmadd213ps   %ymm8,%ymm9,%ymm11
  .byte  196,98,125,24,5,151,5,0,0           // vbroadcastss  0x597(%rip),%ymm8        # 4fe8 <_sk_callback_hsw+0x544>
  .byte  196,66,53,184,195                   // vfmadd231ps   %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_hsw
.globl _sk_bicubic_p3y_hsw
FUNCTION(_sk_bicubic_p3y_hsw)
_sk_bicubic_p3y_hsw:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,127,5,0,0         // vbroadcastss  0x57f(%rip),%ymm1        # 4fec <_sk_callback_hsw+0x548>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,107,5,0,0          // vbroadcastss  0x56b(%rip),%ymm10        # 4ff0 <_sk_callback_hsw+0x54c>
  .byte  196,98,125,24,29,102,5,0,0          // vbroadcastss  0x566(%rip),%ymm11        # 4ff4 <_sk_callback_hsw+0x550>
  .byte  196,66,61,168,218                   // vfmadd213ps   %ymm10,%ymm8,%ymm11
  .byte  196,65,52,89,195                    // vmulps        %ymm11,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_hsw
.globl _sk_callback_hsw
FUNCTION(_sk_callback_hsw)
_sk_callback_hsw:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,228,224                      // and           $0xffffffffffffffe0,%rsp
  .byte  72,129,236,192,0,0,0                // sub           $0xc0,%rsp
  .byte  197,252,41,188,36,128,0,0,0         // vmovaps       %ymm7,0x80(%rsp)
  .byte  197,252,41,116,36,96                // vmovaps       %ymm6,0x60(%rsp)
  .byte  197,252,41,108,36,64                // vmovaps       %ymm5,0x40(%rsp)
  .byte  197,252,41,100,36,32                // vmovaps       %ymm4,0x20(%rsp)
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  72,137,76,36,24                     // mov           %rcx,0x18(%rsp)
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,252                          // mov           %rdi,%r12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,193                      // vunpckhps     %ymm1,%ymm0,%ymm0
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,211                      // vunpckhps     %ymm3,%ymm2,%ymm2
  .byte  197,221,20,217                      // vunpcklpd     %ymm1,%ymm4,%ymm3
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,253,20,226                      // vunpcklpd     %ymm2,%ymm0,%ymm4
  .byte  197,253,21,194                      // vunpckhpd     %ymm2,%ymm0,%ymm0
  .byte  196,227,101,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm2
  .byte  196,227,93,24,232,1                 // vinsertf128   $0x1,%xmm0,%ymm4,%ymm5
  .byte  196,227,101,6,201,49                // vperm2f128    $0x31,%ymm1,%ymm3,%ymm1
  .byte  196,227,93,6,192,49                 // vperm2f128    $0x31,%ymm0,%ymm4,%ymm0
  .byte  196,193,125,17,86,8                 // vmovupd       %ymm2,0x8(%r14)
  .byte  196,193,125,17,110,40               // vmovupd       %ymm5,0x28(%r14)
  .byte  196,193,125,17,78,72                // vmovupd       %ymm1,0x48(%r14)
  .byte  196,193,125,17,70,104               // vmovupd       %ymm0,0x68(%r14)
  .byte  72,133,219                          // test          %rbx,%rbx
  .byte  190,8,0,0,0                         // mov           $0x8,%esi
  .byte  15,69,243                           // cmovne        %ebx,%esi
  .byte  76,137,247                          // mov           %r14,%rdi
  .byte  197,248,119                         // vzeroupper
  .byte  65,255,22                           // callq         *(%r14)
  .byte  73,139,134,136,0,0,0                // mov           0x88(%r14),%rax
  .byte  197,248,16,0                        // vmovups       (%rax),%xmm0
  .byte  197,248,16,72,16                    // vmovups       0x10(%rax),%xmm1
  .byte  197,248,16,80,32                    // vmovups       0x20(%rax),%xmm2
  .byte  197,248,16,88,48                    // vmovups       0x30(%rax),%xmm3
  .byte  196,227,101,24,88,112,1             // vinsertf128   $0x1,0x70(%rax),%ymm3,%ymm3
  .byte  196,227,109,24,80,96,1              // vinsertf128   $0x1,0x60(%rax),%ymm2,%ymm2
  .byte  196,227,117,24,72,80,1              // vinsertf128   $0x1,0x50(%rax),%ymm1,%ymm1
  .byte  196,227,125,24,64,64,1              // vinsertf128   $0x1,0x40(%rax),%ymm0,%ymm0
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,233                      // vunpckhps     %ymm1,%ymm0,%ymm5
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,219                      // vunpckhps     %ymm3,%ymm2,%ymm3
  .byte  197,221,20,193                      // vunpcklpd     %ymm1,%ymm4,%ymm0
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,213,20,211                      // vunpcklpd     %ymm3,%ymm5,%ymm2
  .byte  197,213,21,219                      // vunpckhpd     %ymm3,%ymm5,%ymm3
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,250                          // mov           %r15,%rdx
  .byte  72,139,76,36,24                     // mov           0x18(%rsp),%rcx
  .byte  73,137,216                          // mov           %rbx,%r8
  .byte  197,252,40,100,36,32                // vmovaps       0x20(%rsp),%ymm4
  .byte  197,252,40,108,36,64                // vmovaps       0x40(%rsp),%ymm5
  .byte  197,252,40,116,36,96                // vmovaps       0x60(%rsp),%ymm6
  .byte  197,252,40,188,36,128,0,0,0         // vmovaps       0x80(%rsp),%ymm7
  .byte  72,141,101,216                      // lea           -0x28(%rbp),%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,128,63                      // mov           $0x3f800000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,224                   // add           %al,-0x1fffff41(%rax)
  .byte  64,154                              // rex           (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 4c99 <.literal4+0xb1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 4ca9 <.literal4+0xc1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 4cb9 <.literal4+0xd1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 4cc9 <.literal4+0xe1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%rax)
  .byte  67,0,0                              // rex.XB        add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,92,143,50,63             // sbbl          $0x3f,0x328f5c3d(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,10,215                           // ds            or  %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,82,184,78,65                     // cmp           $0x414eb852,%eax
  .byte  186,159,98,60,57                    // mov           $0x393c629f,%edx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  32,187,109,165,144,63               // and           %bh,0x3f90a56d(%rbx)
  .byte  252                                 // cld
  .byte  191,16,62,168,177                   // mov           $0xb1a83e10,%edi
  .byte  152                                 // cwtl
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,128,64,171,170,42                 // add           %al,0x2aaaab40(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,64,171                            // add           %al,-0x55(%rax)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,129,128,128,59                  // mov           $0x3b808081,%esi
  .byte  129,128,128,59,0,248,0,0,8,33       // addl          $0x21080000,-0x7ffc480(%rax)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4d21 <.literal4+0x139>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,129,128,128,59              // and           %eax,0x3b808081(,%rdi,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  0,52,255                            // add           %dh,(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4d48 <.literal4+0x160>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4dc1 <.literal4+0x1d9>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4d7c <.literal4+0x194>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4df5 <.literal4+0x20d>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4db0 <.literal4+0x1c8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4e29 <.literal4+0x241>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            4de4 <.literal4+0x1fc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            4e5d <.literal4+0x275>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,200                    // add           %al,-0x37ffffc1(%rax)
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  127,67                              // jg            4e5b <.literal4+0x273>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,203,61,13       // movabs        %eax,0xd3dcb3c1118c23b
  .byte  190,80,128,3,62                     // mov           $0x3e038050,%esi
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           4e7b <.literal4+0x293>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  127,67                              // jg            4e8f <.literal4+0x2a7>
  .byte  129,128,128,59,0,0,128,63,129,128   // addl          $0x80813f80,0x3b80(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,128,63,129,128,128                // add           %al,-0x7f7f7ec1(%rax)
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4e71 <.literal4+0x289>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        4e8d <.literal4+0x2a5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            4ee2 <.literal4+0x2fa>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,240                // mov           %ecx,-0xfffc278(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,0                  // mov           %ecx,0x3d88(%rax)
  .byte  112,65                              // jo            4f25 <.literal4+0x33d>
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  127,67                              // jg            4f33 <.literal4+0x34b>
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            4f47 <.literal4+0x35f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,0                     // add           %al,0xbf(%rax)
  .byte  63                                  // (bad)
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,18,120,57                // fstl          0x3978123d(%rbx)
  .byte  64,45,16,17,192,32                  // rex           sub $0x20c01110,%eax
  .byte  148                                 // xchg          %eax,%esp
  .byte  90                                  // pop           %rdx
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,0,24                             // add           %bl,%ds:(%rax)
  .byte  161,57,1,0,0,0,111,43,231           // movabs        0xe72b6f0000000139,%eax
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,169,240,34,62                   // mov           $0x3e22f0a9,%ebp
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,171              // sarb          $0xab,0x3f800000(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,57,142,99,61                    // mov           $0x3d638e39,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,171                          // sarb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,171              // sarb          $0xab,0x3f800000(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,85                           // sarb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,57,142,99,61                    // mov           $0x3d638e39,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,171                          // sarb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,114,28,199,62                   // mov           $0x3ec71c72,%esi

BALIGN32
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005028 <_sk_callback_hsw+0xa000584>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12005030 <_sk_callback_hsw+0x1200058c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a005038 <_sk_callback_hsw+0x1a000594>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3005040 <_sk_callback_hsw+0x300059c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005088 <_sk_callback_hsw+0xa0005e4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12005090 <_sk_callback_hsw+0x120005ec>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a005098 <_sk_callback_hsw+0x1a0005f4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 30050a0 <_sk_callback_hsw+0x30005fc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a0050e8 <_sk_callback_hsw+0xa000644>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 120050f0 <_sk_callback_hsw+0x1200064c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a0050f8 <_sk_callback_hsw+0x1a000654>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3005100 <_sk_callback_hsw+0x300065c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005148 <_sk_callback_hsw+0xa0006a4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 12005150 <_sk_callback_hsw+0x120006ac>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a005158 <_sk_callback_hsw+0x1a0006b4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 3005160 <_sk_callback_hsw+0x30006bc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a0051a8 <_sk_callback_hsw+0xa000704>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,17               // decl          0x11ffffff(%rip)        # 120051b0 <_sk_callback_hsw+0x1200070c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,21,255,255,255,25               // callq         *0x19ffffff(%rip)        # 1a0051b8 <_sk_callback_hsw+0x1a000714>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,29,255,255,255,2                // lcall         *0x2ffffff(%rip)        # 30051c0 <_sk_callback_hsw+0x300071c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,18                              // callq         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,22                              // callq         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,30                              // lcall         *(%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

BALIGN16
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
BALIGN32

HIDDEN _sk_start_pipeline_avx
.globl _sk_start_pipeline_avx
FUNCTION(_sk_start_pipeline_avx)
_sk_start_pipeline_avx:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  73,137,208                          // mov           %rdx,%r8
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  73,137,254                          // mov           %rdi,%r14
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,197                          // mov           %rax,%r13
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  73,141,78,8                         // lea           0x8(%r14),%rcx
  .byte  76,57,193                           // cmp           %r8,%rcx
  .byte  118,5                               // jbe           33 <_sk_start_pipeline_avx+0x33>
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  235,77                              // jmp           80 <_sk_start_pipeline_avx+0x80>
  .byte  76,137,69,208                       // mov           %r8,-0x30(%rbp)
  .byte  65,184,0,0,0,0                      // mov           $0x0,%r8d
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,139,69,208                       // mov           -0x30(%rbp),%r8
  .byte  73,141,86,8                         // lea           0x8(%r14),%rdx
  .byte  73,131,198,16                       // add           $0x10,%r14
  .byte  77,57,198                           // cmp           %r8,%r14
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  118,183                             // jbe           37 <_sk_start_pipeline_avx+0x37>
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,44                              // je            b1 <_sk_start_pipeline_avx+0xb1>
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  197,248,119                         // vzeroupper
  .byte  195                                 // retq

HIDDEN _sk_just_return_avx
.globl _sk_just_return_avx
FUNCTION(_sk_just_return_avx)
_sk_just_return_avx:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_avx
.globl _sk_seed_shader_avx
FUNCTION(_sk_seed_shader_avx)
_sk_seed_shader_avx:
  .byte  197,249,110,194                     // vmovd         %edx,%xmm0
  .byte  197,249,112,192,0                   // vpshufd       $0x0,%xmm0,%xmm0
  .byte  196,227,125,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,28,103,0,0        // vbroadcastss  0x671c(%rip),%ymm1        # 67fc <_sk_callback_avx+0x142>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,88,7                        // vaddps        (%rdi),%ymm0,%ymm0
  .byte  197,249,110,209                     // vmovd         %ecx,%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,227,109,24,210,1                // vinsertf128   $0x1,%xmm2,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,21,246,102,0,0       // vbroadcastss  0x66f6(%rip),%ymm2        # 6800 <_sk_callback_avx+0x146>
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  197,220,87,228                      // vxorps        %ymm4,%ymm4,%ymm4
  .byte  197,212,87,237                      // vxorps        %ymm5,%ymm5,%ymm5
  .byte  197,204,87,246                      // vxorps        %ymm6,%ymm6,%ymm6
  .byte  197,196,87,255                      // vxorps        %ymm7,%ymm7,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_avx
.globl _sk_dither_avx
FUNCTION(_sk_dither_avx)
_sk_dither_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,16,71,32                    // vmovups       0x20(%rdi),%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  197,121,110,210                     // vmovd         %edx,%xmm10
  .byte  196,65,121,112,210,0                // vpshufd       $0x0,%xmm10,%xmm10
  .byte  196,65,49,254,202                   // vpaddd        %xmm10,%xmm9,%xmm9
  .byte  196,65,57,254,194                   // vpaddd        %xmm10,%xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  197,121,110,201                     // vmovd         %ecx,%xmm9
  .byte  196,65,121,112,201,0                // vpshufd       $0x0,%xmm9,%xmm9
  .byte  196,67,53,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm9,%ymm9
  .byte  196,65,52,87,208                    // vxorps        %ymm8,%ymm9,%ymm10
  .byte  196,98,125,24,29,159,102,0,0        // vbroadcastss  0x669f(%rip),%ymm11        # 6804 <_sk_callback_avx+0x14a>
  .byte  196,65,44,84,203                    // vandps        %ymm11,%ymm10,%ymm9
  .byte  196,193,25,114,241,5                // vpslld        $0x5,%xmm9,%xmm12
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,5                // vpslld        $0x5,%xmm9,%xmm9
  .byte  196,67,29,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm12,%ymm9
  .byte  196,65,60,84,219                    // vandps        %ymm11,%ymm8,%ymm11
  .byte  196,193,25,114,243,4                // vpslld        $0x4,%xmm11,%xmm12
  .byte  196,67,125,25,219,1                 // vextractf128  $0x1,%ymm11,%xmm11
  .byte  196,193,33,114,243,4                // vpslld        $0x4,%xmm11,%xmm11
  .byte  196,67,29,24,219,1                  // vinsertf128   $0x1,%xmm11,%ymm12,%ymm11
  .byte  196,98,125,24,37,96,102,0,0         // vbroadcastss  0x6660(%rip),%ymm12        # 6808 <_sk_callback_avx+0x14e>
  .byte  196,98,125,24,45,91,102,0,0         // vbroadcastss  0x665b(%rip),%ymm13        # 680c <_sk_callback_avx+0x152>
  .byte  196,65,44,84,245                    // vandps        %ymm13,%ymm10,%ymm14
  .byte  196,193,1,114,246,2                 // vpslld        $0x2,%xmm14,%xmm15
  .byte  196,67,125,25,246,1                 // vextractf128  $0x1,%ymm14,%xmm14
  .byte  196,193,9,114,246,2                 // vpslld        $0x2,%xmm14,%xmm14
  .byte  196,67,5,24,246,1                   // vinsertf128   $0x1,%xmm14,%ymm15,%ymm14
  .byte  196,65,60,84,237                    // vandps        %ymm13,%ymm8,%ymm13
  .byte  196,65,17,254,253                   // vpaddd        %xmm13,%xmm13,%xmm15
  .byte  196,67,125,25,237,1                 // vextractf128  $0x1,%ymm13,%xmm13
  .byte  196,65,17,254,237                   // vpaddd        %xmm13,%xmm13,%xmm13
  .byte  196,67,5,24,237,1                   // vinsertf128   $0x1,%xmm13,%ymm15,%ymm13
  .byte  196,65,44,84,212                    // vandps        %ymm12,%ymm10,%ymm10
  .byte  196,193,1,114,210,1                 // vpsrld        $0x1,%xmm10,%xmm15
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,210,1                // vpsrld        $0x1,%xmm10,%xmm10
  .byte  196,67,5,24,210,1                   // vinsertf128   $0x1,%xmm10,%ymm15,%ymm10
  .byte  196,65,60,84,196                    // vandps        %ymm12,%ymm8,%ymm8
  .byte  196,193,25,114,208,2                // vpsrld        $0x2,%xmm8,%xmm12
  .byte  196,67,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm8
  .byte  196,193,57,114,208,2                // vpsrld        $0x2,%xmm8,%xmm8
  .byte  196,67,29,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm12,%ymm8
  .byte  196,65,20,86,219                    // vorps         %ymm11,%ymm13,%ymm11
  .byte  196,65,36,86,192                    // vorps         %ymm8,%ymm11,%ymm8
  .byte  196,65,52,86,206                    // vorps         %ymm14,%ymm9,%ymm9
  .byte  196,65,60,86,193                    // vorps         %ymm9,%ymm8,%ymm8
  .byte  196,65,60,86,194                    // vorps         %ymm10,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,198,101,0,0        // vbroadcastss  0x65c6(%rip),%ymm9        # 6810 <_sk_callback_avx+0x156>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,188,101,0,0        // vbroadcastss  0x65bc(%rip),%ymm9        # 6814 <_sk_callback_avx+0x15a>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,188,95,201                      // vmaxps        %ymm1,%ymm8,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  197,188,95,210                      // vmaxps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_avx
.globl _sk_constant_color_avx
FUNCTION(_sk_constant_color_avx)
_sk_constant_color_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgba_avx
.globl _sk_load_rgba_avx
FUNCTION(_sk_load_rgba_avx)
_sk_load_rgba_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,0                        // vmovups       (%rax),%ymm0
  .byte  197,252,16,72,32                    // vmovups       0x20(%rax),%ymm1
  .byte  197,252,16,80,64                    // vmovups       0x40(%rax),%ymm2
  .byte  197,252,16,88,96                    // vmovups       0x60(%rax),%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_rgba_avx
.globl _sk_store_rgba_avx
FUNCTION(_sk_store_rgba_avx)
_sk_store_rgba_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,252,17,80,64                    // vmovups       %ymm2,0x40(%rax)
  .byte  197,252,17,88,96                    // vmovups       %ymm3,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_avx
.globl _sk_clear_avx
FUNCTION(_sk_clear_avx)
_sk_clear_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  197,228,87,219                      // vxorps        %ymm3,%ymm3,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_avx
.globl _sk_srcatop_avx
FUNCTION(_sk_srcatop_avx)
_sk_srcatop_avx:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,98,125,24,5,20,101,0,0          // vbroadcastss  0x6514(%rip),%ymm8        # 6818 <_sk_callback_avx+0x15e>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,204                       // vmulps        %ymm4,%ymm8,%ymm9
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,60,89,205                       // vmulps        %ymm5,%ymm8,%ymm9
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,60,89,206                       // vmulps        %ymm6,%ymm8,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_avx
.globl _sk_dstatop_avx
FUNCTION(_sk_dstatop_avx)
_sk_dstatop_avx:
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  196,98,125,24,13,214,100,0,0        // vbroadcastss  0x64d6(%rip),%ymm9        # 681c <_sk_callback_avx+0x162>
  .byte  197,52,92,207                       // vsubps        %ymm7,%ymm9,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,188,88,192                      // vaddps        %ymm0,%ymm8,%ymm0
  .byte  197,100,89,197                      // vmulps        %ymm5,%ymm3,%ymm8
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,188,88,201                      // vaddps        %ymm1,%ymm8,%ymm1
  .byte  197,100,89,198                      // vmulps        %ymm6,%ymm3,%ymm8
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,100,89,199                      // vmulps        %ymm7,%ymm3,%ymm8
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_avx
.globl _sk_srcin_avx
FUNCTION(_sk_srcin_avx)
_sk_srcin_avx:
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_avx
.globl _sk_dstin_avx
FUNCTION(_sk_dstin_avx)
_sk_dstin_avx:
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_avx
.globl _sk_srcout_avx
FUNCTION(_sk_srcout_avx)
_sk_srcout_avx:
  .byte  196,98,125,24,5,117,100,0,0         // vbroadcastss  0x6475(%rip),%ymm8        # 6820 <_sk_callback_avx+0x166>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_avx
.globl _sk_dstout_avx
FUNCTION(_sk_dstout_avx)
_sk_dstout_avx:
  .byte  196,226,125,24,5,88,100,0,0         // vbroadcastss  0x6458(%rip),%ymm0        # 6824 <_sk_callback_avx+0x16a>
  .byte  197,252,92,219                      // vsubps        %ymm3,%ymm0,%ymm3
  .byte  197,228,89,196                      // vmulps        %ymm4,%ymm3,%ymm0
  .byte  197,228,89,205                      // vmulps        %ymm5,%ymm3,%ymm1
  .byte  197,228,89,214                      // vmulps        %ymm6,%ymm3,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_avx
.globl _sk_srcover_avx
FUNCTION(_sk_srcover_avx)
_sk_srcover_avx:
  .byte  196,98,125,24,5,59,100,0,0          // vbroadcastss  0x643b(%rip),%ymm8        # 6828 <_sk_callback_avx+0x16e>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,204                       // vmulps        %ymm4,%ymm8,%ymm9
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  197,60,89,205                       // vmulps        %ymm5,%ymm8,%ymm9
  .byte  197,180,88,201                      // vaddps        %ymm1,%ymm9,%ymm1
  .byte  197,60,89,206                       // vmulps        %ymm6,%ymm8,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_avx
.globl _sk_dstover_avx
FUNCTION(_sk_dstover_avx)
_sk_dstover_avx:
  .byte  196,98,125,24,5,14,100,0,0          // vbroadcastss  0x640e(%rip),%ymm8        # 682c <_sk_callback_avx+0x172>
  .byte  197,60,92,199                       // vsubps        %ymm7,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_avx
.globl _sk_modulate_avx
FUNCTION(_sk_modulate_avx)
_sk_modulate_avx:
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_avx
.globl _sk_multiply_avx
FUNCTION(_sk_multiply_avx)
_sk_multiply_avx:
  .byte  196,98,125,24,5,205,99,0,0          // vbroadcastss  0x63cd(%rip),%ymm8        # 6830 <_sk_callback_avx+0x176>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,208                       // vmulps        %ymm0,%ymm9,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  197,52,89,209                       // vmulps        %ymm1,%ymm9,%ymm10
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,210                       // vmulps        %ymm2,%ymm9,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__avx
.globl _sk_plus__avx
FUNCTION(_sk_plus__avx)
_sk_plus__avx:
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_avx
.globl _sk_screen_avx
FUNCTION(_sk_screen_avx)
_sk_screen_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  197,100,88,199                      // vaddps        %ymm7,%ymm3,%ymm8
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  197,188,92,219                      // vsubps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__avx
.globl _sk_xor__avx
FUNCTION(_sk_xor__avx)
_sk_xor__avx:
  .byte  196,98,125,24,5,28,99,0,0           // vbroadcastss  0x631c(%rip),%ymm8        # 6834 <_sk_callback_avx+0x17a>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,212                       // vmulps        %ymm4,%ymm8,%ymm10
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,89,213                       // vmulps        %ymm5,%ymm8,%ymm10
  .byte  197,172,88,201                      // vaddps        %ymm1,%ymm10,%ymm1
  .byte  197,180,89,210                      // vmulps        %ymm2,%ymm9,%ymm2
  .byte  197,60,89,214                       // vmulps        %ymm6,%ymm8,%ymm10
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,180,89,219                      // vmulps        %ymm3,%ymm9,%ymm3
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_avx
.globl _sk_darken_avx
FUNCTION(_sk_darken_avx)
_sk_darken_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,95,193                  // vmaxps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,95,201                  // vmaxps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,95,209                  // vmaxps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,156,98,0,0          // vbroadcastss  0x629c(%rip),%ymm8        # 6838 <_sk_callback_avx+0x17e>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_avx
.globl _sk_lighten_avx
FUNCTION(_sk_lighten_avx)
_sk_lighten_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,72,98,0,0           // vbroadcastss  0x6248(%rip),%ymm8        # 683c <_sk_callback_avx+0x182>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_avx
.globl _sk_difference_avx
FUNCTION(_sk_difference_avx)
_sk_difference_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  196,193,124,93,193                  // vminps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,207                      // vmulps        %ymm7,%ymm1,%ymm1
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,193,116,93,201                  // vminps        %ymm9,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,215                      // vmulps        %ymm7,%ymm2,%ymm2
  .byte  197,100,89,206                      // vmulps        %ymm6,%ymm3,%ymm9
  .byte  196,193,108,93,209                  // vminps        %ymm9,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,232,97,0,0          // vbroadcastss  0x61e8(%rip),%ymm8        # 6840 <_sk_callback_avx+0x186>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_avx
.globl _sk_exclusion_avx
FUNCTION(_sk_exclusion_avx)
_sk_exclusion_avx:
  .byte  197,124,88,196                      // vaddps        %ymm4,%ymm0,%ymm8
  .byte  197,252,89,196                      // vmulps        %ymm4,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,116,88,197                      // vaddps        %ymm5,%ymm1,%ymm8
  .byte  197,244,89,205                      // vmulps        %ymm5,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,188,92,201                      // vsubps        %ymm1,%ymm8,%ymm1
  .byte  197,108,88,198                      // vaddps        %ymm6,%ymm2,%ymm8
  .byte  197,236,89,214                      // vmulps        %ymm6,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,188,92,210                      // vsubps        %ymm2,%ymm8,%ymm2
  .byte  196,98,125,24,5,163,97,0,0          // vbroadcastss  0x61a3(%rip),%ymm8        # 6844 <_sk_callback_avx+0x18a>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_avx
.globl _sk_colorburn_avx
FUNCTION(_sk_colorburn_avx)
_sk_colorburn_avx:
  .byte  196,98,125,24,5,142,97,0,0          // vbroadcastss  0x618e(%rip),%ymm8        # 6848 <_sk_callback_avx+0x18e>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,52,89,216                       // vmulps        %ymm0,%ymm9,%ymm11
  .byte  196,65,44,87,210                    // vxorps        %ymm10,%ymm10,%ymm10
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,228                       // vmulps        %ymm4,%ymm8,%ymm12
  .byte  197,68,92,236                       // vsubps        %ymm4,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,232                       // vdivps        %ymm0,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,36,88,237                    // vaddps        %ymm13,%ymm11,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,224                       // vaddps        %ymm0,%ymm12,%ymm12
  .byte  196,193,124,194,194,0               // vcmpeqps      %ymm10,%ymm0,%ymm0
  .byte  196,195,21,74,196,0                 // vblendvps     %ymm0,%ymm12,%ymm13,%ymm0
  .byte  197,92,194,231,0                    // vcmpeqps      %ymm7,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,52,89,217                       // vmulps        %ymm1,%ymm9,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  197,68,92,237                       // vsubps        %ymm5,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  197,20,94,233                       // vdivps        %ymm1,%ymm13,%ymm13
  .byte  196,65,68,93,237                    // vminps        %ymm13,%ymm7,%ymm13
  .byte  196,65,68,92,237                    // vsubps        %ymm13,%ymm7,%ymm13
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,36,88,237                    // vaddps        %ymm13,%ymm11,%ymm13
  .byte  196,65,28,88,237                    // vaddps        %ymm13,%ymm12,%ymm13
  .byte  197,28,88,225                       // vaddps        %ymm1,%ymm12,%ymm12
  .byte  196,193,116,194,202,0               // vcmpeqps      %ymm10,%ymm1,%ymm1
  .byte  196,195,21,74,204,16                // vblendvps     %ymm1,%ymm12,%ymm13,%ymm1
  .byte  197,84,194,231,0                    // vcmpeqps      %ymm7,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,108,194,210,0                // vcmpeqps      %ymm10,%ymm2,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  197,68,92,230                       // vsubps        %ymm6,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  197,28,94,226                       // vdivps        %ymm2,%ymm12,%ymm12
  .byte  197,164,88,210                      // vaddps        %ymm2,%ymm11,%ymm2
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  196,65,68,92,228                    // vsubps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,52,88,228                    // vaddps        %ymm12,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,227,37,74,210,160               // vblendvps     %ymm10,%ymm2,%ymm11,%ymm2
  .byte  197,76,194,215,0                    // vcmpeqps      %ymm7,%ymm6,%ymm10
  .byte  197,52,88,206                       // vaddps        %ymm6,%ymm9,%ymm9
  .byte  196,195,109,74,209,160              // vblendvps     %ymm10,%ymm9,%ymm2,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_avx
.globl _sk_colordodge_avx
FUNCTION(_sk_colordodge_avx)
_sk_colordodge_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,98,125,24,13,138,96,0,0         // vbroadcastss  0x608a(%rip),%ymm9        # 684c <_sk_callback_avx+0x192>
  .byte  197,52,92,215                       // vsubps        %ymm7,%ymm9,%ymm10
  .byte  197,44,89,216                       // vmulps        %ymm0,%ymm10,%ymm11
  .byte  197,52,92,203                       // vsubps        %ymm3,%ymm9,%ymm9
  .byte  197,100,89,228                      // vmulps        %ymm4,%ymm3,%ymm12
  .byte  197,100,92,232                      // vsubps        %ymm0,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,236                       // vmulps        %ymm4,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,36,88,228                    // vaddps        %ymm12,%ymm11,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,232                       // vaddps        %ymm0,%ymm13,%ymm13
  .byte  197,252,194,195,0                   // vcmpeqps      %ymm3,%ymm0,%ymm0
  .byte  196,195,29,74,197,0                 // vblendvps     %ymm0,%ymm13,%ymm12,%ymm0
  .byte  196,65,92,194,224,0                 // vcmpeqps      %ymm8,%ymm4,%ymm12
  .byte  197,36,88,220                       // vaddps        %ymm4,%ymm11,%ymm11
  .byte  196,195,125,74,195,192              // vblendvps     %ymm12,%ymm11,%ymm0,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,100,89,229                      // vmulps        %ymm5,%ymm3,%ymm12
  .byte  197,100,92,233                      // vsubps        %ymm1,%ymm3,%ymm13
  .byte  196,65,28,94,229                    // vdivps        %ymm13,%ymm12,%ymm12
  .byte  197,52,89,237                       // vmulps        %ymm5,%ymm9,%ymm13
  .byte  196,65,68,93,228                    // vminps        %ymm12,%ymm7,%ymm12
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,36,88,228                    // vaddps        %ymm12,%ymm11,%ymm12
  .byte  196,65,20,88,228                    // vaddps        %ymm12,%ymm13,%ymm12
  .byte  197,20,88,233                       // vaddps        %ymm1,%ymm13,%ymm13
  .byte  197,244,194,203,0                   // vcmpeqps      %ymm3,%ymm1,%ymm1
  .byte  196,195,29,74,205,16                // vblendvps     %ymm1,%ymm13,%ymm12,%ymm1
  .byte  196,65,84,194,224,0                 // vcmpeqps      %ymm8,%ymm5,%ymm12
  .byte  197,36,88,221                       // vaddps        %ymm5,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,100,92,226                      // vsubps        %ymm2,%ymm3,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  197,52,89,230                       // vmulps        %ymm6,%ymm9,%ymm12
  .byte  196,65,68,93,219                    // vminps        %ymm11,%ymm7,%ymm11
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  197,236,194,211,0                   // vcmpeqps      %ymm3,%ymm2,%ymm2
  .byte  196,195,37,74,212,32                // vblendvps     %ymm2,%ymm12,%ymm11,%ymm2
  .byte  196,65,76,194,192,0                 // vcmpeqps      %ymm8,%ymm6,%ymm8
  .byte  197,44,88,214                       // vaddps        %ymm6,%ymm10,%ymm10
  .byte  196,195,109,74,210,128              // vblendvps     %ymm8,%ymm10,%ymm2,%ymm2
  .byte  197,52,89,199                       // vmulps        %ymm7,%ymm9,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_avx
.globl _sk_hardlight_avx
FUNCTION(_sk_hardlight_avx)
_sk_hardlight_avx:
  .byte  196,98,125,24,5,156,95,0,0          // vbroadcastss  0x5f9c(%rip),%ymm8        # 6850 <_sk_callback_avx+0x196>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,200                       // vmulps        %ymm0,%ymm10,%ymm9
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,217                    // vaddps        %ymm9,%ymm11,%ymm11
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  197,52,194,227,2                    // vcmpleps      %ymm3,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,116,88,225                      // vaddps        %ymm1,%ymm1,%ymm12
  .byte  197,28,194,227,2                    // vcmpleps      %ymm3,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,108,88,218                      // vaddps        %ymm2,%ymm2,%ymm11
  .byte  197,36,194,219,2                    // vcmpleps      %ymm3,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_avx
.globl _sk_overlay_avx
FUNCTION(_sk_overlay_avx)
_sk_overlay_avx:
  .byte  196,98,125,24,5,197,94,0,0          // vbroadcastss  0x5ec5(%rip),%ymm8        # 6854 <_sk_callback_avx+0x19a>
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,44,89,200                       // vmulps        %ymm0,%ymm10,%ymm9
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  196,65,36,88,217                    // vaddps        %ymm9,%ymm11,%ymm11
  .byte  197,92,88,204                       // vaddps        %ymm4,%ymm4,%ymm9
  .byte  197,52,194,231,2                    // vcmpleps      %ymm7,%ymm9,%ymm12
  .byte  197,124,89,204                      // vmulps        %ymm4,%ymm0,%ymm9
  .byte  196,65,52,88,233                    // vaddps        %ymm9,%ymm9,%ymm13
  .byte  197,100,89,207                      // vmulps        %ymm7,%ymm3,%ymm9
  .byte  197,68,92,244                       // vsubps        %ymm4,%ymm7,%ymm14
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,252,88,192                      // vaddps        %ymm0,%ymm0,%ymm0
  .byte  197,180,92,192                      // vsubps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,197,192              // vblendvps     %ymm12,%ymm13,%ymm0,%ymm0
  .byte  197,164,88,192                      // vaddps        %ymm0,%ymm11,%ymm0
  .byte  197,44,89,217                       // vmulps        %ymm1,%ymm10,%ymm11
  .byte  197,60,89,229                       // vmulps        %ymm5,%ymm8,%ymm12
  .byte  196,65,28,88,219                    // vaddps        %ymm11,%ymm12,%ymm11
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  197,116,89,237                      // vmulps        %ymm5,%ymm1,%ymm13
  .byte  196,65,20,88,237                    // vaddps        %ymm13,%ymm13,%ymm13
  .byte  197,68,92,245                       // vsubps        %ymm5,%ymm7,%ymm14
  .byte  197,228,92,201                      // vsubps        %ymm1,%ymm3,%ymm1
  .byte  196,193,116,89,206                  // vmulps        %ymm14,%ymm1,%ymm1
  .byte  197,244,88,201                      // vaddps        %ymm1,%ymm1,%ymm1
  .byte  197,180,92,201                      // vsubps        %ymm1,%ymm9,%ymm1
  .byte  196,195,117,74,205,192              // vblendvps     %ymm12,%ymm13,%ymm1,%ymm1
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  197,60,89,222                       // vmulps        %ymm6,%ymm8,%ymm11
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  197,108,89,230                      // vmulps        %ymm6,%ymm2,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,68,92,238                       // vsubps        %ymm6,%ymm7,%ymm13
  .byte  197,228,92,210                      // vsubps        %ymm2,%ymm3,%ymm2
  .byte  196,193,108,89,213                  // vmulps        %ymm13,%ymm2,%ymm2
  .byte  197,236,88,210                      // vaddps        %ymm2,%ymm2,%ymm2
  .byte  197,180,92,210                      // vsubps        %ymm2,%ymm9,%ymm2
  .byte  196,195,109,74,212,176              // vblendvps     %ymm11,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_avx
.globl _sk_softlight_avx
FUNCTION(_sk_softlight_avx)
_sk_softlight_avx:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,252,40,209                      // vmovaps       %ymm1,%ymm2
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  197,52,194,215,1                    // vcmpltps      %ymm7,%ymm9,%ymm10
  .byte  197,92,94,199                       // vdivps        %ymm7,%ymm4,%ymm8
  .byte  196,67,53,74,224,160                // vblendvps     %ymm10,%ymm8,%ymm9,%ymm12
  .byte  196,65,28,88,196                    // vaddps        %ymm12,%ymm12,%ymm8
  .byte  196,65,60,88,192                    // vaddps        %ymm8,%ymm8,%ymm8
  .byte  196,65,60,89,216                    // vmulps        %ymm8,%ymm8,%ymm11
  .byte  196,65,60,88,195                    // vaddps        %ymm11,%ymm8,%ymm8
  .byte  196,98,125,24,29,188,93,0,0         // vbroadcastss  0x5dbc(%rip),%ymm11        # 685c <_sk_callback_avx+0x1a2>
  .byte  196,65,28,88,235                    // vaddps        %ymm11,%ymm12,%ymm13
  .byte  196,65,20,89,192                    // vmulps        %ymm8,%ymm13,%ymm8
  .byte  196,98,125,24,45,173,93,0,0         // vbroadcastss  0x5dad(%rip),%ymm13        # 6860 <_sk_callback_avx+0x1a6>
  .byte  196,65,28,89,245                    // vmulps        %ymm13,%ymm12,%ymm14
  .byte  196,65,12,88,192                    // vaddps        %ymm8,%ymm14,%ymm8
  .byte  196,65,124,82,244                   // vrsqrtps      %ymm12,%ymm14
  .byte  196,65,124,83,246                   // vrcpps        %ymm14,%ymm14
  .byte  196,65,12,92,244                    // vsubps        %ymm12,%ymm14,%ymm14
  .byte  197,92,88,252                       // vaddps        %ymm4,%ymm4,%ymm15
  .byte  196,65,4,88,255                     // vaddps        %ymm15,%ymm15,%ymm15
  .byte  197,4,194,255,2                     // vcmpleps      %ymm7,%ymm15,%ymm15
  .byte  196,67,13,74,240,240                // vblendvps     %ymm15,%ymm8,%ymm14,%ymm14
  .byte  197,116,88,249                      // vaddps        %ymm1,%ymm1,%ymm15
  .byte  196,98,125,24,5,107,93,0,0          // vbroadcastss  0x5d6b(%rip),%ymm8        # 6858 <_sk_callback_avx+0x19e>
  .byte  196,65,60,92,228                    // vsubps        %ymm12,%ymm8,%ymm12
  .byte  197,132,92,195                      // vsubps        %ymm3,%ymm15,%ymm0
  .byte  196,65,124,89,228                   // vmulps        %ymm12,%ymm0,%ymm12
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,89,198                  // vmulps        %ymm14,%ymm0,%ymm0
  .byte  197,100,89,244                      // vmulps        %ymm4,%ymm3,%ymm14
  .byte  197,140,88,192                      // vaddps        %ymm0,%ymm14,%ymm0
  .byte  197,28,88,227                       // vaddps        %ymm3,%ymm12,%ymm12
  .byte  197,28,89,228                       // vmulps        %ymm4,%ymm12,%ymm12
  .byte  197,4,194,243,2                     // vcmpleps      %ymm3,%ymm15,%ymm14
  .byte  196,195,125,74,196,224              // vblendvps     %ymm14,%ymm12,%ymm0,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,212,94,199                      // vdivps        %ymm7,%ymm5,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,240                      // vaddps        %ymm0,%ymm0,%ymm14
  .byte  196,65,12,88,246                    // vaddps        %ymm14,%ymm14,%ymm14
  .byte  196,65,12,89,254                    // vmulps        %ymm14,%ymm14,%ymm15
  .byte  196,65,12,88,247                    // vaddps        %ymm15,%ymm14,%ymm14
  .byte  196,65,124,88,251                   // vaddps        %ymm11,%ymm0,%ymm15
  .byte  196,65,4,89,246                     // vmulps        %ymm14,%ymm15,%ymm14
  .byte  196,65,124,89,253                   // vmulps        %ymm13,%ymm0,%ymm15
  .byte  196,65,4,88,246                     // vaddps        %ymm14,%ymm15,%ymm14
  .byte  197,124,82,248                      // vrsqrtps      %ymm0,%ymm15
  .byte  196,65,124,83,255                   // vrcpps        %ymm15,%ymm15
  .byte  197,4,92,248                        // vsubps        %ymm0,%ymm15,%ymm15
  .byte  197,84,88,229                       // vaddps        %ymm5,%ymm5,%ymm12
  .byte  196,65,28,88,228                    // vaddps        %ymm12,%ymm12,%ymm12
  .byte  197,28,194,231,2                    // vcmpleps      %ymm7,%ymm12,%ymm12
  .byte  196,67,5,74,230,192                 // vblendvps     %ymm12,%ymm14,%ymm15,%ymm12
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,108,88,242                      // vaddps        %ymm2,%ymm2,%ymm14
  .byte  197,12,92,251                       // vsubps        %ymm3,%ymm14,%ymm15
  .byte  197,132,89,192                      // vmulps        %ymm0,%ymm15,%ymm0
  .byte  197,4,89,255                        // vmulps        %ymm7,%ymm15,%ymm15
  .byte  196,65,4,89,228                     // vmulps        %ymm12,%ymm15,%ymm12
  .byte  197,100,89,253                      // vmulps        %ymm5,%ymm3,%ymm15
  .byte  196,65,4,88,228                     // vaddps        %ymm12,%ymm15,%ymm12
  .byte  197,252,88,195                      // vaddps        %ymm3,%ymm0,%ymm0
  .byte  197,252,89,197                      // vmulps        %ymm5,%ymm0,%ymm0
  .byte  197,12,194,243,2                    // vcmpleps      %ymm3,%ymm14,%ymm14
  .byte  196,99,29,74,240,224                // vblendvps     %ymm14,%ymm0,%ymm12,%ymm14
  .byte  197,204,94,199                      // vdivps        %ymm7,%ymm6,%ymm0
  .byte  196,227,53,74,192,160               // vblendvps     %ymm10,%ymm0,%ymm9,%ymm0
  .byte  197,124,88,200                      // vaddps        %ymm0,%ymm0,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,65,52,89,209                    // vmulps        %ymm9,%ymm9,%ymm10
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,124,88,211                   // vaddps        %ymm11,%ymm0,%ymm10
  .byte  196,65,44,89,201                    // vmulps        %ymm9,%ymm10,%ymm9
  .byte  196,65,124,89,213                   // vmulps        %ymm13,%ymm0,%ymm10
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  197,124,82,208                      // vrsqrtps      %ymm0,%ymm10
  .byte  196,65,124,83,210                   // vrcpps        %ymm10,%ymm10
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  197,76,88,222                       // vaddps        %ymm6,%ymm6,%ymm11
  .byte  196,65,36,88,219                    // vaddps        %ymm11,%ymm11,%ymm11
  .byte  197,36,194,223,2                    // vcmpleps      %ymm7,%ymm11,%ymm11
  .byte  196,67,45,74,201,176                // vblendvps     %ymm11,%ymm9,%ymm10,%ymm9
  .byte  197,124,16,100,36,200               // vmovups       -0x38(%rsp),%ymm12
  .byte  196,65,28,88,212                    // vaddps        %ymm12,%ymm12,%ymm10
  .byte  197,44,92,219                       // vsubps        %ymm3,%ymm10,%ymm11
  .byte  197,188,92,192                      // vsubps        %ymm0,%ymm8,%ymm0
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  197,36,89,223                       // vmulps        %ymm7,%ymm11,%ymm11
  .byte  196,65,36,89,201                    // vmulps        %ymm9,%ymm11,%ymm9
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  196,65,36,88,201                    // vaddps        %ymm9,%ymm11,%ymm9
  .byte  197,252,88,195                      // vaddps        %ymm3,%ymm0,%ymm0
  .byte  197,252,89,198                      // vmulps        %ymm6,%ymm0,%ymm0
  .byte  197,44,194,211,2                    // vcmpleps      %ymm3,%ymm10,%ymm10
  .byte  196,99,53,74,200,160                // vblendvps     %ymm10,%ymm0,%ymm9,%ymm9
  .byte  197,60,92,215                       // vsubps        %ymm7,%ymm8,%ymm10
  .byte  197,172,89,193                      // vmulps        %ymm1,%ymm10,%ymm0
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,188,89,204                      // vmulps        %ymm4,%ymm8,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,252,88,68,36,168                // vaddps        -0x58(%rsp),%ymm0,%ymm0
  .byte  197,172,89,202                      // vmulps        %ymm2,%ymm10,%ymm1
  .byte  197,188,89,213                      // vmulps        %ymm5,%ymm8,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,206                  // vaddps        %ymm14,%ymm1,%ymm1
  .byte  196,193,44,89,212                   // vmulps        %ymm12,%ymm10,%ymm2
  .byte  197,60,89,214                       // vmulps        %ymm6,%ymm8,%ymm10
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  197,188,88,219                      // vaddps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_avx
.globl _sk_hue_avx
FUNCTION(_sk_hue_avx)
_sk_hue_avx:
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,124,40,193                      // vmovaps       %ymm1,%ymm8
  .byte  197,124,17,68,36,168                // vmovups       %ymm8,-0x58(%rsp)
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,116,89,203                      // vmulps        %ymm3,%ymm1,%ymm9
  .byte  197,60,89,211                       // vmulps        %ymm3,%ymm8,%ymm10
  .byte  197,108,89,219                      // vmulps        %ymm3,%ymm2,%ymm11
  .byte  197,84,95,198                       // vmaxps        %ymm6,%ymm5,%ymm8
  .byte  196,65,92,95,192                    // vmaxps        %ymm8,%ymm4,%ymm8
  .byte  197,84,93,230                       // vminps        %ymm6,%ymm5,%ymm12
  .byte  196,65,92,93,228                    // vminps        %ymm12,%ymm4,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,227                       // vmulps        %ymm3,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,208,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm10
  .byte  196,65,36,92,221                    // vsubps        %ymm13,%ymm11,%ymm11
  .byte  196,65,28,89,219                    // vmulps        %ymm11,%ymm12,%ymm11
  .byte  196,65,36,94,222                    // vdivps        %ymm14,%ymm11,%ymm11
  .byte  196,67,37,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm11,%ymm12
  .byte  196,98,125,24,53,58,91,0,0          // vbroadcastss  0x5b3a(%rip),%ymm14        # 6864 <_sk_callback_avx+0x1aa>
  .byte  196,65,92,89,222                    // vmulps        %ymm14,%ymm4,%ymm11
  .byte  196,98,125,24,61,48,91,0,0          // vbroadcastss  0x5b30(%rip),%ymm15        # 6868 <_sk_callback_avx+0x1ae>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,226,125,24,5,33,91,0,0          // vbroadcastss  0x5b21(%rip),%ymm0        # 686c <_sk_callback_avx+0x1b2>
  .byte  197,76,89,232                       // vmulps        %ymm0,%ymm6,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,65,52,89,238                    // vmulps        %ymm14,%ymm9,%ymm13
  .byte  196,193,44,89,215                   // vmulps        %ymm15,%ymm10,%ymm2
  .byte  197,148,88,210                      // vaddps        %ymm2,%ymm13,%ymm2
  .byte  197,28,89,232                       // vmulps        %ymm0,%ymm12,%ymm13
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,52,88,202                       // vaddps        %ymm2,%ymm9,%ymm9
  .byte  197,44,88,218                       // vaddps        %ymm2,%ymm10,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  196,193,36,93,212                   // vminps        %ymm12,%ymm11,%ymm2
  .byte  197,52,93,234                       // vminps        %ymm2,%ymm9,%ymm13
  .byte  196,193,52,89,214                   // vmulps        %ymm14,%ymm9,%ymm2
  .byte  196,65,36,89,215                    // vmulps        %ymm15,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,124,88,210                      // vaddps        %ymm2,%ymm0,%ymm10
  .byte  196,193,52,92,194                   // vsubps        %ymm10,%ymm9,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,44,92,213                   // vsubps        %ymm13,%ymm10,%ymm2
  .byte  197,252,94,194                      // vdivps        %ymm2,%ymm0,%ymm0
  .byte  196,65,36,92,242                    // vsubps        %ymm10,%ymm11,%ymm14
  .byte  196,65,44,89,246                    // vmulps        %ymm14,%ymm10,%ymm14
  .byte  197,12,94,242                       // vdivps        %ymm2,%ymm14,%ymm14
  .byte  196,65,28,92,250                    // vsubps        %ymm10,%ymm12,%ymm15
  .byte  196,65,44,89,255                    // vmulps        %ymm15,%ymm10,%ymm15
  .byte  197,132,94,210                      // vdivps        %ymm2,%ymm15,%ymm2
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,44,88,246                    // vaddps        %ymm14,%ymm10,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,195,109,74,212,208              // vblendvps     %ymm13,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  196,195,125,74,193,208              // vblendvps     %ymm13,%ymm9,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,203                    // vmaxps        %ymm11,%ymm9,%ymm9
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,65,28,92,234                    // vsubps        %ymm10,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,249,1                 // vcmpltps      %ymm9,%ymm12,%ymm15
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,218                    // vsubps        %ymm10,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,108,92,242                   // vsubps        %ymm10,%ymm2,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,208                    // vmaxps        %ymm8,%ymm11,%ymm10
  .byte  196,195,109,74,209,240              // vblendvps     %ymm15,%ymm9,%ymm2,%ymm2
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,250,89,0,0          // vbroadcastss  0x59fa(%rip),%ymm8        # 6870 <_sk_callback_avx+0x1b6>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,180,89,76,36,168                // vmulps        -0x58(%rsp),%ymm9,%ymm1
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,76,36,200                 // vmulps        -0x38(%rsp),%ymm9,%ymm9
  .byte  197,60,89,198                       // vmulps        %ymm6,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_avx
.globl _sk_saturation_avx
FUNCTION(_sk_saturation_avx)
_sk_saturation_avx:
  .byte  197,124,40,193                      // vmovaps       %ymm1,%ymm8
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,100,89,204                      // vmulps        %ymm4,%ymm3,%ymm9
  .byte  197,100,89,213                      // vmulps        %ymm5,%ymm3,%ymm10
  .byte  197,100,89,222                      // vmulps        %ymm6,%ymm3,%ymm11
  .byte  197,252,17,84,36,200                // vmovups       %ymm2,-0x38(%rsp)
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,124,95,194                      // vmaxps        %ymm2,%ymm0,%ymm8
  .byte  196,65,116,95,192                   // vmaxps        %ymm8,%ymm1,%ymm8
  .byte  197,124,93,226                      // vminps        %ymm2,%ymm0,%ymm12
  .byte  196,65,116,93,228                   // vminps        %ymm12,%ymm1,%ymm12
  .byte  196,65,60,92,196                    // vsubps        %ymm12,%ymm8,%ymm8
  .byte  197,60,89,231                       // vmulps        %ymm7,%ymm8,%ymm12
  .byte  196,65,44,93,195                    // vminps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,93,232                    // vminps        %ymm8,%ymm9,%ymm13
  .byte  196,65,44,95,195                    // vmaxps        %ymm11,%ymm10,%ymm8
  .byte  196,65,52,95,192                    // vmaxps        %ymm8,%ymm9,%ymm8
  .byte  196,65,60,92,245                    // vsubps        %ymm13,%ymm8,%ymm14
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,12,194,248,0                 // vcmpeqps      %ymm8,%ymm14,%ymm15
  .byte  196,65,52,92,205                    // vsubps        %ymm13,%ymm9,%ymm9
  .byte  196,65,28,89,201                    // vmulps        %ymm9,%ymm12,%ymm9
  .byte  196,65,52,94,206                    // vdivps        %ymm14,%ymm9,%ymm9
  .byte  196,67,53,74,200,240                // vblendvps     %ymm15,%ymm8,%ymm9,%ymm9
  .byte  196,65,44,92,213                    // vsubps        %ymm13,%ymm10,%ymm10
  .byte  196,65,28,89,210                    // vmulps        %ymm10,%ymm12,%ymm10
  .byte  196,65,44,94,214                    // vdivps        %ymm14,%ymm10,%ymm10
  .byte  196,67,45,74,208,240                // vblendvps     %ymm15,%ymm8,%ymm10,%ymm10
  .byte  196,65,36,92,221                    // vsubps        %ymm13,%ymm11,%ymm11
  .byte  196,65,28,89,219                    // vmulps        %ymm11,%ymm12,%ymm11
  .byte  196,65,36,94,222                    // vdivps        %ymm14,%ymm11,%ymm11
  .byte  196,67,37,74,224,240                // vblendvps     %ymm15,%ymm8,%ymm11,%ymm12
  .byte  196,98,125,24,53,8,89,0,0           // vbroadcastss  0x5908(%rip),%ymm14        # 6874 <_sk_callback_avx+0x1ba>
  .byte  196,65,92,89,222                    // vmulps        %ymm14,%ymm4,%ymm11
  .byte  196,98,125,24,61,254,88,0,0         // vbroadcastss  0x58fe(%rip),%ymm15        # 6878 <_sk_callback_avx+0x1be>
  .byte  196,65,84,89,239                    // vmulps        %ymm15,%ymm5,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,226,125,24,5,239,88,0,0         // vbroadcastss  0x58ef(%rip),%ymm0        # 687c <_sk_callback_avx+0x1c2>
  .byte  197,76,89,232                       // vmulps        %ymm0,%ymm6,%ymm13
  .byte  196,65,36,88,221                    // vaddps        %ymm13,%ymm11,%ymm11
  .byte  196,65,52,89,238                    // vmulps        %ymm14,%ymm9,%ymm13
  .byte  196,193,44,89,215                   // vmulps        %ymm15,%ymm10,%ymm2
  .byte  197,148,88,210                      // vaddps        %ymm2,%ymm13,%ymm2
  .byte  197,28,89,232                       // vmulps        %ymm0,%ymm12,%ymm13
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,52,88,202                       // vaddps        %ymm2,%ymm9,%ymm9
  .byte  197,44,88,218                       // vaddps        %ymm2,%ymm10,%ymm11
  .byte  197,28,88,226                       // vaddps        %ymm2,%ymm12,%ymm12
  .byte  196,193,36,93,212                   // vminps        %ymm12,%ymm11,%ymm2
  .byte  197,52,93,234                       // vminps        %ymm2,%ymm9,%ymm13
  .byte  196,193,52,89,214                   // vmulps        %ymm14,%ymm9,%ymm2
  .byte  196,65,36,89,215                    // vmulps        %ymm15,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,124,88,210                      // vaddps        %ymm2,%ymm0,%ymm10
  .byte  196,193,52,92,194                   // vsubps        %ymm10,%ymm9,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,44,92,213                   // vsubps        %ymm13,%ymm10,%ymm2
  .byte  197,252,94,194                      // vdivps        %ymm2,%ymm0,%ymm0
  .byte  196,65,36,92,242                    // vsubps        %ymm10,%ymm11,%ymm14
  .byte  196,65,44,89,246                    // vmulps        %ymm14,%ymm10,%ymm14
  .byte  197,12,94,242                       // vdivps        %ymm2,%ymm14,%ymm14
  .byte  196,65,28,92,250                    // vsubps        %ymm10,%ymm12,%ymm15
  .byte  196,65,44,89,255                    // vmulps        %ymm15,%ymm10,%ymm15
  .byte  197,132,94,210                      // vdivps        %ymm2,%ymm15,%ymm2
  .byte  196,65,60,194,237,2                 // vcmpleps      %ymm13,%ymm8,%ymm13
  .byte  196,65,44,88,246                    // vaddps        %ymm14,%ymm10,%ymm14
  .byte  196,67,13,74,243,208                // vblendvps     %ymm13,%ymm11,%ymm14,%ymm14
  .byte  196,65,36,95,220                    // vmaxps        %ymm12,%ymm11,%ymm11
  .byte  197,172,88,210                      // vaddps        %ymm2,%ymm10,%ymm2
  .byte  196,195,109,74,212,208              // vblendvps     %ymm13,%ymm12,%ymm2,%ymm2
  .byte  197,172,88,192                      // vaddps        %ymm0,%ymm10,%ymm0
  .byte  196,195,125,74,193,208              // vblendvps     %ymm13,%ymm9,%ymm0,%ymm0
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,52,95,203                    // vmaxps        %ymm11,%ymm9,%ymm9
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,65,28,92,234                    // vsubps        %ymm10,%ymm12,%ymm13
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,28,194,249,1                 // vcmpltps      %ymm9,%ymm12,%ymm15
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,195,125,74,195,240              // vblendvps     %ymm15,%ymm11,%ymm0,%ymm0
  .byte  196,65,12,92,218                    // vsubps        %ymm10,%ymm14,%ymm11
  .byte  196,65,20,89,219                    // vmulps        %ymm11,%ymm13,%ymm11
  .byte  196,65,36,94,217                    // vdivps        %ymm9,%ymm11,%ymm11
  .byte  196,65,44,88,219                    // vaddps        %ymm11,%ymm10,%ymm11
  .byte  196,67,13,74,219,240                // vblendvps     %ymm15,%ymm11,%ymm14,%ymm11
  .byte  196,65,108,92,242                   // vsubps        %ymm10,%ymm2,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,201                    // vdivps        %ymm9,%ymm13,%ymm9
  .byte  196,65,44,88,201                    // vaddps        %ymm9,%ymm10,%ymm9
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,65,36,95,208                    // vmaxps        %ymm8,%ymm11,%ymm10
  .byte  196,195,109,74,209,240              // vblendvps     %ymm15,%ymm9,%ymm2,%ymm2
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,200,87,0,0          // vbroadcastss  0x57c8(%rip),%ymm8        # 6880 <_sk_callback_avx+0x1c6>
  .byte  197,60,92,207                       // vsubps        %ymm7,%ymm8,%ymm9
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  197,60,89,220                       // vmulps        %ymm4,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,192                      // vaddps        %ymm0,%ymm1,%ymm0
  .byte  197,180,89,76,36,168                // vmulps        -0x58(%rsp),%ymm9,%ymm1
  .byte  197,60,89,221                       // vmulps        %ymm5,%ymm8,%ymm11
  .byte  197,164,88,201                      // vaddps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  197,52,89,76,36,200                 // vmulps        -0x38(%rsp),%ymm9,%ymm9
  .byte  197,60,89,198                       // vmulps        %ymm6,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,188,88,210                      // vaddps        %ymm2,%ymm8,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_avx
.globl _sk_color_avx
FUNCTION(_sk_color_avx)
_sk_color_avx:
  .byte  197,252,17,84,36,136                // vmovups       %ymm2,-0x78(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,17,68,36,168                // vmovups       %ymm0,-0x58(%rsp)
  .byte  197,124,89,199                      // vmulps        %ymm7,%ymm0,%ymm8
  .byte  197,116,89,207                      // vmulps        %ymm7,%ymm1,%ymm9
  .byte  196,98,125,24,45,94,87,0,0          // vbroadcastss  0x575e(%rip),%ymm13        # 6884 <_sk_callback_avx+0x1ca>
  .byte  196,65,92,89,213                    // vmulps        %ymm13,%ymm4,%ymm10
  .byte  196,98,125,24,53,84,87,0,0          // vbroadcastss  0x5754(%rip),%ymm14        # 6888 <_sk_callback_avx+0x1ce>
  .byte  196,65,84,89,222                    // vmulps        %ymm14,%ymm5,%ymm11
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,61,69,87,0,0          // vbroadcastss  0x5745(%rip),%ymm15        # 688c <_sk_callback_avx+0x1d2>
  .byte  196,65,76,89,223                    // vmulps        %ymm15,%ymm6,%ymm11
  .byte  196,193,44,88,195                   // vaddps        %ymm11,%ymm10,%ymm0
  .byte  196,65,60,89,221                    // vmulps        %ymm13,%ymm8,%ymm11
  .byte  196,65,52,89,230                    // vmulps        %ymm14,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,108,89,231                      // vmulps        %ymm7,%ymm2,%ymm12
  .byte  196,65,28,89,215                    // vmulps        %ymm15,%ymm12,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  197,60,88,192                       // vaddps        %ymm0,%ymm8,%ymm8
  .byte  197,52,88,208                       // vaddps        %ymm0,%ymm9,%ymm10
  .byte  197,28,88,216                       // vaddps        %ymm0,%ymm12,%ymm11
  .byte  196,193,44,93,195                   // vminps        %ymm11,%ymm10,%ymm0
  .byte  197,60,93,224                       // vminps        %ymm0,%ymm8,%ymm12
  .byte  196,193,60,89,197                   // vmulps        %ymm13,%ymm8,%ymm0
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,193,124,88,193                  // vaddps        %ymm9,%ymm0,%ymm0
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  197,52,88,200                       // vaddps        %ymm0,%ymm9,%ymm9
  .byte  196,193,60,92,193                   // vsubps        %ymm9,%ymm8,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,65,52,92,236                    // vsubps        %ymm12,%ymm9,%ymm13
  .byte  196,193,124,94,197                  // vdivps        %ymm13,%ymm0,%ymm0
  .byte  196,65,44,92,241                    // vsubps        %ymm9,%ymm10,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  196,65,12,94,245                    // vdivps        %ymm13,%ymm14,%ymm14
  .byte  196,65,36,92,249                    // vsubps        %ymm9,%ymm11,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  196,65,4,94,237                     // vdivps        %ymm13,%ymm15,%ymm13
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,65,4,194,228,2                  // vcmpleps      %ymm12,%ymm15,%ymm12
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,242,192                // vblendvps     %ymm12,%ymm10,%ymm14,%ymm14
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,88,237                    // vaddps        %ymm13,%ymm9,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,200,192              // vblendvps     %ymm12,%ymm8,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,60,95,194                    // vmaxps        %ymm10,%ymm8,%ymm8
  .byte  196,65,116,92,209                   // vsubps        %ymm9,%ymm1,%ymm10
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,192,1                // vcmpltps      %ymm8,%ymm12,%ymm0
  .byte  196,65,60,92,193                    // vsubps        %ymm9,%ymm8,%ymm8
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,12,92,209                    // vsubps        %ymm9,%ymm14,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,67,13,74,210,0                  // vblendvps     %ymm0,%ymm10,%ymm14,%ymm10
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,192                    // vdivps        %ymm8,%ymm13,%ymm8
  .byte  196,65,52,88,192                    // vaddps        %ymm8,%ymm9,%ymm8
  .byte  196,193,116,95,207                  // vmaxps        %ymm15,%ymm1,%ymm1
  .byte  196,65,44,95,207                    // vmaxps        %ymm15,%ymm10,%ymm9
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,65,124,95,199                   // vmaxps        %ymm15,%ymm0,%ymm8
  .byte  196,226,125,24,5,12,86,0,0          // vbroadcastss  0x560c(%rip),%ymm0        # 6890 <_sk_callback_avx+0x1d6>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  197,164,89,196                      // vmulps        %ymm4,%ymm11,%ymm0
  .byte  197,252,88,194                      // vaddps        %ymm2,%ymm0,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  197,164,89,213                      // vmulps        %ymm5,%ymm11,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,136                // vmulps        -0x78(%rsp),%ymm10,%ymm2
  .byte  197,36,89,206                       // vmulps        %ymm6,%ymm11,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  196,193,108,88,208                  // vaddps        %ymm8,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_avx
.globl _sk_luminosity_avx
FUNCTION(_sk_luminosity_avx)
_sk_luminosity_avx:
  .byte  197,124,40,226                      // vmovaps       %ymm2,%ymm12
  .byte  197,124,17,100,36,168               // vmovups       %ymm12,-0x58(%rsp)
  .byte  197,252,17,76,36,200                // vmovups       %ymm1,-0x38(%rsp)
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,100,89,196                      // vmulps        %ymm4,%ymm3,%ymm8
  .byte  197,100,89,205                      // vmulps        %ymm5,%ymm3,%ymm9
  .byte  196,98,125,24,45,158,85,0,0         // vbroadcastss  0x559e(%rip),%ymm13        # 6894 <_sk_callback_avx+0x1da>
  .byte  196,65,108,89,213                   // vmulps        %ymm13,%ymm2,%ymm10
  .byte  196,98,125,24,53,148,85,0,0         // vbroadcastss  0x5594(%rip),%ymm14        # 6898 <_sk_callback_avx+0x1de>
  .byte  196,65,116,89,222                   // vmulps        %ymm14,%ymm1,%ymm11
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,61,133,85,0,0         // vbroadcastss  0x5585(%rip),%ymm15        # 689c <_sk_callback_avx+0x1e2>
  .byte  196,65,28,89,223                    // vmulps        %ymm15,%ymm12,%ymm11
  .byte  196,193,44,88,195                   // vaddps        %ymm11,%ymm10,%ymm0
  .byte  196,65,60,89,221                    // vmulps        %ymm13,%ymm8,%ymm11
  .byte  196,65,52,89,230                    // vmulps        %ymm14,%ymm9,%ymm12
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,100,89,230                      // vmulps        %ymm6,%ymm3,%ymm12
  .byte  196,65,28,89,215                    // vmulps        %ymm15,%ymm12,%ymm10
  .byte  196,65,36,88,210                    // vaddps        %ymm10,%ymm11,%ymm10
  .byte  197,252,89,199                      // vmulps        %ymm7,%ymm0,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  197,60,88,192                       // vaddps        %ymm0,%ymm8,%ymm8
  .byte  197,52,88,208                       // vaddps        %ymm0,%ymm9,%ymm10
  .byte  197,28,88,216                       // vaddps        %ymm0,%ymm12,%ymm11
  .byte  196,193,44,93,195                   // vminps        %ymm11,%ymm10,%ymm0
  .byte  197,60,93,224                       // vminps        %ymm0,%ymm8,%ymm12
  .byte  196,193,60,89,197                   // vmulps        %ymm13,%ymm8,%ymm0
  .byte  196,65,44,89,206                    // vmulps        %ymm14,%ymm10,%ymm9
  .byte  196,193,124,88,193                  // vaddps        %ymm9,%ymm0,%ymm0
  .byte  196,65,36,89,207                    // vmulps        %ymm15,%ymm11,%ymm9
  .byte  197,52,88,200                       // vaddps        %ymm0,%ymm9,%ymm9
  .byte  196,193,60,92,193                   // vsubps        %ymm9,%ymm8,%ymm0
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  196,65,52,92,236                    // vsubps        %ymm12,%ymm9,%ymm13
  .byte  196,193,124,94,197                  // vdivps        %ymm13,%ymm0,%ymm0
  .byte  196,65,44,92,241                    // vsubps        %ymm9,%ymm10,%ymm14
  .byte  196,65,52,89,246                    // vmulps        %ymm14,%ymm9,%ymm14
  .byte  196,65,12,94,245                    // vdivps        %ymm13,%ymm14,%ymm14
  .byte  196,65,36,92,249                    // vsubps        %ymm9,%ymm11,%ymm15
  .byte  196,65,52,89,255                    // vmulps        %ymm15,%ymm9,%ymm15
  .byte  196,65,4,94,237                     // vdivps        %ymm13,%ymm15,%ymm13
  .byte  196,65,4,87,255                     // vxorps        %ymm15,%ymm15,%ymm15
  .byte  196,65,4,194,228,2                  // vcmpleps      %ymm12,%ymm15,%ymm12
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,67,13,74,242,192                // vblendvps     %ymm12,%ymm10,%ymm14,%ymm14
  .byte  196,65,44,95,211                    // vmaxps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,88,237                    // vaddps        %ymm13,%ymm9,%ymm13
  .byte  196,67,21,74,219,192                // vblendvps     %ymm12,%ymm11,%ymm13,%ymm11
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,195,125,74,200,192              // vblendvps     %ymm12,%ymm8,%ymm0,%ymm1
  .byte  197,100,89,231                      // vmulps        %ymm7,%ymm3,%ymm12
  .byte  196,65,60,95,194                    // vmaxps        %ymm10,%ymm8,%ymm8
  .byte  196,65,116,92,209                   // vsubps        %ymm9,%ymm1,%ymm10
  .byte  196,65,28,92,233                    // vsubps        %ymm9,%ymm12,%ymm13
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,193,28,194,192,1                // vcmpltps      %ymm8,%ymm12,%ymm0
  .byte  196,65,60,92,193                    // vsubps        %ymm9,%ymm8,%ymm8
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,195,117,74,202,0                // vblendvps     %ymm0,%ymm10,%ymm1,%ymm1
  .byte  196,65,12,92,209                    // vsubps        %ymm9,%ymm14,%ymm10
  .byte  196,65,20,89,210                    // vmulps        %ymm10,%ymm13,%ymm10
  .byte  196,65,44,94,208                    // vdivps        %ymm8,%ymm10,%ymm10
  .byte  196,65,52,88,210                    // vaddps        %ymm10,%ymm9,%ymm10
  .byte  196,67,13,74,210,0                  // vblendvps     %ymm0,%ymm10,%ymm14,%ymm10
  .byte  196,65,36,92,241                    // vsubps        %ymm9,%ymm11,%ymm14
  .byte  196,65,20,89,238                    // vmulps        %ymm14,%ymm13,%ymm13
  .byte  196,65,20,94,192                    // vdivps        %ymm8,%ymm13,%ymm8
  .byte  196,65,52,88,192                    // vaddps        %ymm8,%ymm9,%ymm8
  .byte  196,193,116,95,207                  // vmaxps        %ymm15,%ymm1,%ymm1
  .byte  196,65,44,95,207                    // vmaxps        %ymm15,%ymm10,%ymm9
  .byte  196,195,37,74,192,0                 // vblendvps     %ymm0,%ymm8,%ymm11,%ymm0
  .byte  196,65,124,95,199                   // vmaxps        %ymm15,%ymm0,%ymm8
  .byte  196,226,125,24,5,76,84,0,0          // vbroadcastss  0x544c(%rip),%ymm0        # 68a0 <_sk_callback_avx+0x1e6>
  .byte  197,124,92,215                      // vsubps        %ymm7,%ymm0,%ymm10
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  197,124,92,219                      // vsubps        %ymm3,%ymm0,%ymm11
  .byte  197,164,89,196                      // vmulps        %ymm4,%ymm11,%ymm0
  .byte  197,252,88,194                      // vaddps        %ymm2,%ymm0,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,172,89,76,36,200                // vmulps        -0x38(%rsp),%ymm10,%ymm1
  .byte  197,164,89,213                      // vmulps        %ymm5,%ymm11,%ymm2
  .byte  197,236,88,201                      // vaddps        %ymm1,%ymm2,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,84,36,168                // vmulps        -0x58(%rsp),%ymm10,%ymm2
  .byte  197,36,89,206                       // vmulps        %ymm6,%ymm11,%ymm9
  .byte  197,180,88,210                      // vaddps        %ymm2,%ymm9,%ymm2
  .byte  196,193,108,88,208                  // vaddps        %ymm8,%ymm2,%ymm2
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,92,220                  // vsubps        %ymm12,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_rgba_8888_avx
.globl _sk_srcover_rgba_8888_avx
FUNCTION(_sk_srcover_rgba_8888_avx)
_sk_srcover_rgba_8888_avx:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,43,1,0,0                     // jne           15e3 <_sk_srcover_rgba_8888_avx+0x144>
  .byte  196,193,124,16,58                   // vmovups       (%r10),%ymm7
  .byte  197,124,40,13,91,88,0,0             // vmovaps       0x585b(%rip),%ymm9        # 6d20 <_sk_callback_avx+0x666>
  .byte  196,193,68,84,225                   // vandps        %ymm9,%ymm7,%ymm4
  .byte  197,252,91,228                      // vcvtdq2ps     %ymm4,%ymm4
  .byte  197,209,114,215,8                   // vpsrld        $0x8,%xmm7,%xmm5
  .byte  196,195,125,25,248,1                // vextractf128  $0x1,%ymm7,%xmm8
  .byte  196,193,73,114,208,8                // vpsrld        $0x8,%xmm8,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  196,193,84,84,233                   // vandps        %ymm9,%ymm5,%ymm5
  .byte  197,252,91,237                      // vcvtdq2ps     %ymm5,%ymm5
  .byte  197,169,114,215,16                  // vpsrld        $0x10,%xmm7,%xmm10
  .byte  196,193,73,114,208,16               // vpsrld        $0x10,%xmm8,%xmm6
  .byte  196,227,45,24,246,1                 // vinsertf128   $0x1,%xmm6,%ymm10,%ymm6
  .byte  196,193,76,84,241                   // vandps        %ymm9,%ymm6,%ymm6
  .byte  197,252,91,246                      // vcvtdq2ps     %ymm6,%ymm6
  .byte  197,177,114,215,24                  // vpsrld        $0x18,%xmm7,%xmm9
  .byte  196,193,65,114,208,24               // vpsrld        $0x18,%xmm8,%xmm7
  .byte  196,227,53,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm9,%ymm7
  .byte  197,252,91,255                      // vcvtdq2ps     %ymm7,%ymm7
  .byte  196,98,125,24,5,126,83,0,0          // vbroadcastss  0x537e(%rip),%ymm8        # 68a4 <_sk_callback_avx+0x1ea>
  .byte  197,60,92,195                       // vsubps        %ymm3,%ymm8,%ymm8
  .byte  196,98,125,24,13,117,83,0,0         // vbroadcastss  0x5375(%rip),%ymm9        # 68a8 <_sk_callback_avx+0x1ee>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,60,89,212                       // vmulps        %ymm4,%ymm8,%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  197,60,89,213                       // vmulps        %ymm5,%ymm8,%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  197,60,89,214                       // vmulps        %ymm6,%ymm8,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  197,60,89,199                       // vmulps        %ymm7,%ymm8,%ymm8
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  197,125,91,201                      // vcvtps2dq     %ymm1,%ymm9
  .byte  196,193,41,114,241,8                // vpslld        $0x8,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,8                // vpslld        $0x8,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  197,125,91,202                      // vcvtps2dq     %ymm2,%ymm9
  .byte  196,193,41,114,241,16               // vpslld        $0x10,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,16               // vpslld        $0x10,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  197,125,91,211                      // vcvtps2dq     %ymm3,%ymm10
  .byte  196,193,33,114,242,24               // vpslld        $0x18,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,24               // vpslld        $0x18,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,53,86,202                    // vorpd         %ymm10,%ymm9,%ymm9
  .byte  196,65,61,86,193                    // vorpd         %ymm9,%ymm8,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,87                              // jne           162e <_sk_srcover_rgba_8888_avx+0x18f>
  .byte  196,65,124,17,2                     // vmovups       %ymm8,(%r10)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,224                 // vmovq         %rax,%xmm4
  .byte  196,226,121,48,228                  // vpmovzxbw     %xmm4,%xmm4
  .byte  196,226,89,0,45,53,86,0,0           // vpshufb       0x5635(%rip),%xmm4,%xmm5        # 6c40 <_sk_callback_avx+0x586>
  .byte  196,226,121,33,237                  // vpmovsxbd     %xmm5,%xmm5
  .byte  196,226,89,0,37,55,86,0,0           // vpshufb       0x5637(%rip),%xmm4,%xmm4        # 6c50 <_sk_callback_avx+0x596>
  .byte  196,226,121,33,228                  // vpmovsxbd     %xmm4,%xmm4
  .byte  196,227,85,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm5,%ymm4
  .byte  196,194,93,44,58                    // vmaskmovps    (%r10),%ymm4,%ymm7
  .byte  233,143,254,255,255                 // jmpq          14bd <_sk_srcover_rgba_8888_avx+0x1e>
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,98,49,0,21,234,85,0,0           // vpshufb       0x55ea(%rip),%xmm9,%xmm10        # 6c40 <_sk_callback_avx+0x586>
  .byte  196,66,121,33,210                   // vpmovsxbd     %xmm10,%xmm10
  .byte  196,98,49,0,13,236,85,0,0           // vpshufb       0x55ec(%rip),%xmm9,%xmm9        # 6c50 <_sk_callback_avx+0x596>
  .byte  196,66,121,33,201                   // vpmovsxbd     %xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,66,53,46,2                      // vmaskmovps    %ymm8,%ymm9,(%r10)
  .byte  233,99,255,255,255                  // jmpq          15dc <_sk_srcover_rgba_8888_avx+0x13d>

HIDDEN _sk_clamp_0_avx
.globl _sk_clamp_0_avx
FUNCTION(_sk_clamp_0_avx)
_sk_clamp_0_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_avx
.globl _sk_clamp_1_avx
FUNCTION(_sk_clamp_1_avx)
_sk_clamp_1_avx:
  .byte  196,98,125,24,5,13,82,0,0           // vbroadcastss  0x520d(%rip),%ymm8        # 68ac <_sk_callback_avx+0x1f2>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_avx
.globl _sk_clamp_a_avx
FUNCTION(_sk_clamp_a_avx)
_sk_clamp_a_avx:
  .byte  196,98,125,24,5,240,81,0,0          // vbroadcastss  0x51f0(%rip),%ymm8        # 68b0 <_sk_callback_avx+0x1f6>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  197,252,93,195                      // vminps        %ymm3,%ymm0,%ymm0
  .byte  197,244,93,203                      // vminps        %ymm3,%ymm1,%ymm1
  .byte  197,236,93,211                      // vminps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_avx
.globl _sk_set_rgb_avx
FUNCTION(_sk_set_rgb_avx)
_sk_set_rgb_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,0                    // vbroadcastss  (%rax),%ymm0
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_avx
.globl _sk_swap_rb_avx
FUNCTION(_sk_swap_rb_avx)
_sk_swap_rb_avx:
  .byte  197,124,40,192                      // vmovaps       %ymm0,%ymm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,194                      // vmovaps       %ymm2,%ymm0
  .byte  197,124,41,194                      // vmovaps       %ymm8,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_avx
.globl _sk_swap_avx
FUNCTION(_sk_swap_avx)
_sk_swap_avx:
  .byte  197,124,40,195                      // vmovaps       %ymm3,%ymm8
  .byte  197,124,40,202                      // vmovaps       %ymm2,%ymm9
  .byte  197,124,40,209                      // vmovaps       %ymm1,%ymm10
  .byte  197,124,40,216                      // vmovaps       %ymm0,%ymm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  197,124,41,220                      // vmovaps       %ymm11,%ymm4
  .byte  197,124,41,213                      // vmovaps       %ymm10,%ymm5
  .byte  197,124,41,206                      // vmovaps       %ymm9,%ymm6
  .byte  197,124,41,199                      // vmovaps       %ymm8,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_avx
.globl _sk_move_src_dst_avx
FUNCTION(_sk_move_src_dst_avx)
_sk_move_src_dst_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,224                      // vmovaps       %ymm0,%ymm4
  .byte  197,252,40,233                      // vmovaps       %ymm1,%ymm5
  .byte  197,252,40,242                      // vmovaps       %ymm2,%ymm6
  .byte  197,252,40,251                      // vmovaps       %ymm3,%ymm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_avx
.globl _sk_move_dst_src_avx
FUNCTION(_sk_move_dst_src_avx)
_sk_move_dst_src_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,196                      // vmovaps       %ymm4,%ymm0
  .byte  197,252,40,205                      // vmovaps       %ymm5,%ymm1
  .byte  197,252,40,214                      // vmovaps       %ymm6,%ymm2
  .byte  197,252,40,223                      // vmovaps       %ymm7,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_avx
.globl _sk_premul_avx
FUNCTION(_sk_premul_avx)
_sk_premul_avx:
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_avx
.globl _sk_unpremul_avx
FUNCTION(_sk_unpremul_avx)
_sk_unpremul_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,65,100,194,200,0                // vcmpeqps      %ymm8,%ymm3,%ymm9
  .byte  196,98,125,24,21,56,81,0,0          // vbroadcastss  0x5138(%rip),%ymm10        # 68b4 <_sk_callback_avx+0x1fa>
  .byte  197,44,94,211                       // vdivps        %ymm3,%ymm10,%ymm10
  .byte  196,67,45,74,192,144                // vblendvps     %ymm9,%ymm8,%ymm10,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_avx
.globl _sk_from_srgb_avx
FUNCTION(_sk_from_srgb_avx)
_sk_from_srgb_avx:
  .byte  196,98,125,24,5,25,81,0,0           // vbroadcastss  0x5119(%rip),%ymm8        # 68b8 <_sk_callback_avx+0x1fe>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  197,124,89,208                      // vmulps        %ymm0,%ymm0,%ymm10
  .byte  196,98,125,24,29,11,81,0,0          // vbroadcastss  0x510b(%rip),%ymm11        # 68bc <_sk_callback_avx+0x202>
  .byte  196,65,124,89,227                   // vmulps        %ymm11,%ymm0,%ymm12
  .byte  196,98,125,24,45,1,81,0,0           // vbroadcastss  0x5101(%rip),%ymm13        # 68c0 <_sk_callback_avx+0x206>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,44,89,212                    // vmulps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,37,242,80,0,0         // vbroadcastss  0x50f2(%rip),%ymm12        # 68c4 <_sk_callback_avx+0x20a>
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,98,125,24,53,232,80,0,0         // vbroadcastss  0x50e8(%rip),%ymm14        # 68c8 <_sk_callback_avx+0x20e>
  .byte  196,193,124,194,198,1               // vcmpltps      %ymm14,%ymm0,%ymm0
  .byte  196,195,45,74,193,0                 // vblendvps     %ymm0,%ymm9,%ymm10,%ymm0
  .byte  196,65,116,89,200                   // vmulps        %ymm8,%ymm1,%ymm9
  .byte  197,116,89,209                      // vmulps        %ymm1,%ymm1,%ymm10
  .byte  196,65,116,89,251                   // vmulps        %ymm11,%ymm1,%ymm15
  .byte  196,65,4,88,253                     // vaddps        %ymm13,%ymm15,%ymm15
  .byte  196,65,44,89,215                    // vmulps        %ymm15,%ymm10,%ymm10
  .byte  196,65,44,88,212                    // vaddps        %ymm12,%ymm10,%ymm10
  .byte  196,193,116,194,206,1               // vcmpltps      %ymm14,%ymm1,%ymm1
  .byte  196,195,45,74,201,16                // vblendvps     %ymm1,%ymm9,%ymm10,%ymm1
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  197,108,89,202                      // vmulps        %ymm2,%ymm2,%ymm9
  .byte  196,65,108,89,211                   // vmulps        %ymm11,%ymm2,%ymm10
  .byte  196,65,44,88,213                    // vaddps        %ymm13,%ymm10,%ymm10
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,65,52,88,204                    // vaddps        %ymm12,%ymm9,%ymm9
  .byte  196,193,108,194,214,1               // vcmpltps      %ymm14,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_avx
.globl _sk_to_srgb_avx
FUNCTION(_sk_to_srgb_avx)
_sk_to_srgb_avx:
  .byte  197,124,82,200                      // vrsqrtps      %ymm0,%ymm9
  .byte  196,98,125,24,5,125,80,0,0          // vbroadcastss  0x507d(%rip),%ymm8        # 68cc <_sk_callback_avx+0x212>
  .byte  196,65,124,89,208                   // vmulps        %ymm8,%ymm0,%ymm10
  .byte  196,98,125,24,29,115,80,0,0         // vbroadcastss  0x5073(%rip),%ymm11        # 68d0 <_sk_callback_avx+0x216>
  .byte  196,65,52,89,227                    // vmulps        %ymm11,%ymm9,%ymm12
  .byte  196,98,125,24,45,105,80,0,0         // vbroadcastss  0x5069(%rip),%ymm13        # 68d4 <_sk_callback_avx+0x21a>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,52,89,228                    // vmulps        %ymm12,%ymm9,%ymm12
  .byte  196,98,125,24,53,90,80,0,0          // vbroadcastss  0x505a(%rip),%ymm14        # 68d8 <_sk_callback_avx+0x21e>
  .byte  196,65,28,88,230                    // vaddps        %ymm14,%ymm12,%ymm12
  .byte  196,98,125,24,61,80,80,0,0          // vbroadcastss  0x5050(%rip),%ymm15        # 68dc <_sk_callback_avx+0x222>
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,52,89,204                    // vmulps        %ymm12,%ymm9,%ymm9
  .byte  196,98,125,24,37,60,80,0,0          // vbroadcastss  0x503c(%rip),%ymm12        # 68e0 <_sk_callback_avx+0x226>
  .byte  196,193,124,194,196,1               // vcmpltps      %ymm12,%ymm0,%ymm0
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  197,124,82,201                      // vrsqrtps      %ymm1,%ymm9
  .byte  196,65,52,89,211                    // vmulps        %ymm11,%ymm9,%ymm10
  .byte  196,65,44,88,213                    // vaddps        %ymm13,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,214                    // vaddps        %ymm14,%ymm10,%ymm10
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,193,116,194,204,1               // vcmpltps      %ymm12,%ymm1,%ymm1
  .byte  196,195,53,74,202,16                // vblendvps     %ymm1,%ymm10,%ymm9,%ymm1
  .byte  197,124,82,202                      // vrsqrtps      %ymm2,%ymm9
  .byte  196,65,52,89,211                    // vmulps        %ymm11,%ymm9,%ymm10
  .byte  196,65,44,88,213                    // vaddps        %ymm13,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,214                    // vaddps        %ymm14,%ymm10,%ymm10
  .byte  196,65,52,88,207                    // vaddps        %ymm15,%ymm9,%ymm9
  .byte  196,65,124,83,201                   // vrcpps        %ymm9,%ymm9
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,193,108,194,212,1               // vcmpltps      %ymm12,%ymm2,%ymm2
  .byte  196,195,53,74,208,32                // vblendvps     %ymm2,%ymm8,%ymm9,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_avx
.globl _sk_rgb_to_hsl_avx
FUNCTION(_sk_rgb_to_hsl_avx)
_sk_rgb_to_hsl_avx:
  .byte  197,124,95,193                      // vmaxps        %ymm1,%ymm0,%ymm8
  .byte  197,60,95,194                       // vmaxps        %ymm2,%ymm8,%ymm8
  .byte  197,124,93,201                      // vminps        %ymm1,%ymm0,%ymm9
  .byte  197,52,93,202                       // vminps        %ymm2,%ymm9,%ymm9
  .byte  196,65,60,92,209                    // vsubps        %ymm9,%ymm8,%ymm10
  .byte  196,98,125,24,29,162,79,0,0         // vbroadcastss  0x4fa2(%rip),%ymm11        # 68e4 <_sk_callback_avx+0x22a>
  .byte  196,65,36,94,218                    // vdivps        %ymm10,%ymm11,%ymm11
  .byte  197,116,92,226                      // vsubps        %ymm2,%ymm1,%ymm12
  .byte  196,65,28,89,227                    // vmulps        %ymm11,%ymm12,%ymm12
  .byte  197,116,194,234,1                   // vcmpltps      %ymm2,%ymm1,%ymm13
  .byte  197,60,194,241,0                    // vcmpeqps      %ymm1,%ymm8,%ymm14
  .byte  197,236,92,208                      // vsubps        %ymm0,%ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  197,252,92,201                      // vsubps        %ymm1,%ymm0,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,123,79,0,0         // vbroadcastss  0x4f7b(%rip),%ymm11        # 68f0 <_sk_callback_avx+0x236>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,105,79,0,0         // vbroadcastss  0x4f69(%rip),%ymm11        # 68ec <_sk_callback_avx+0x232>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,227,117,74,202,224              // vblendvps     %ymm14,%ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,81,79,0,0         // vbroadcastss  0x4f51(%rip),%ymm2        # 68e8 <_sk_callback_avx+0x22e>
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,227,13,74,210,208               // vblendvps     %ymm13,%ymm2,%ymm14,%ymm2
  .byte  197,188,194,192,0                   // vcmpeqps      %ymm0,%ymm8,%ymm0
  .byte  196,193,108,88,212                  // vaddps        %ymm12,%ymm2,%ymm2
  .byte  196,227,117,74,194,0                // vblendvps     %ymm0,%ymm2,%ymm1,%ymm0
  .byte  196,193,60,88,201                   // vaddps        %ymm9,%ymm8,%ymm1
  .byte  196,98,125,24,37,56,79,0,0          // vbroadcastss  0x4f38(%rip),%ymm12        # 68f8 <_sk_callback_avx+0x23e>
  .byte  196,193,116,89,212                  // vmulps        %ymm12,%ymm1,%ymm2
  .byte  197,28,194,226,1                    // vcmpltps      %ymm2,%ymm12,%ymm12
  .byte  196,65,36,92,216                    // vsubps        %ymm8,%ymm11,%ymm11
  .byte  196,65,36,92,217                    // vsubps        %ymm9,%ymm11,%ymm11
  .byte  196,195,117,74,203,192              // vblendvps     %ymm12,%ymm11,%ymm1,%ymm1
  .byte  196,65,60,194,193,0                 // vcmpeqps      %ymm9,%ymm8,%ymm8
  .byte  197,172,94,201                      // vdivps        %ymm1,%ymm10,%ymm1
  .byte  196,195,125,74,198,128              // vblendvps     %ymm8,%ymm14,%ymm0,%ymm0
  .byte  196,195,117,74,206,128              // vblendvps     %ymm8,%ymm14,%ymm1,%ymm1
  .byte  196,98,125,24,5,251,78,0,0          // vbroadcastss  0x4efb(%rip),%ymm8        # 68f4 <_sk_callback_avx+0x23a>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_avx
.globl _sk_hsl_to_rgb_avx
FUNCTION(_sk_hsl_to_rgb_avx)
_sk_hsl_to_rgb_avx:
  .byte  72,131,236,56                       // sub           $0x38,%rsp
  .byte  197,252,17,60,36                    // vmovups       %ymm7,(%rsp)
  .byte  197,252,17,116,36,224               // vmovups       %ymm6,-0x20(%rsp)
  .byte  197,252,17,108,36,192               // vmovups       %ymm5,-0x40(%rsp)
  .byte  197,252,17,100,36,160               // vmovups       %ymm4,-0x60(%rsp)
  .byte  197,252,17,92,36,128                // vmovups       %ymm3,-0x80(%rsp)
  .byte  197,252,40,225                      // vmovaps       %ymm1,%ymm4
  .byte  197,252,40,216                      // vmovaps       %ymm0,%ymm3
  .byte  196,98,125,24,5,200,78,0,0          // vbroadcastss  0x4ec8(%rip),%ymm8        # 68fc <_sk_callback_avx+0x242>
  .byte  197,60,194,202,2                    // vcmpleps      %ymm2,%ymm8,%ymm9
  .byte  197,92,89,210                       // vmulps        %ymm2,%ymm4,%ymm10
  .byte  196,65,92,92,218                    // vsubps        %ymm10,%ymm4,%ymm11
  .byte  196,67,45,74,203,144                // vblendvps     %ymm9,%ymm11,%ymm10,%ymm9
  .byte  197,52,88,210                       // vaddps        %ymm2,%ymm9,%ymm10
  .byte  197,108,88,202                      // vaddps        %ymm2,%ymm2,%ymm9
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,29,162,78,0,0         // vbroadcastss  0x4ea2(%rip),%ymm11        # 6900 <_sk_callback_avx+0x246>
  .byte  196,65,100,88,219                   // vaddps        %ymm11,%ymm3,%ymm11
  .byte  196,67,125,8,227,1                  // vroundps      $0x1,%ymm11,%ymm12
  .byte  196,65,36,92,252                    // vsubps        %ymm12,%ymm11,%ymm15
  .byte  196,65,44,92,217                    // vsubps        %ymm9,%ymm10,%ymm11
  .byte  196,98,125,24,37,140,78,0,0         // vbroadcastss  0x4e8c(%rip),%ymm12        # 6908 <_sk_callback_avx+0x24e>
  .byte  196,193,4,89,196                    // vmulps        %ymm12,%ymm15,%ymm0
  .byte  196,98,125,24,45,130,78,0,0         // vbroadcastss  0x4e82(%rip),%ymm13        # 690c <_sk_callback_avx+0x252>
  .byte  197,20,92,240                       // vsubps        %ymm0,%ymm13,%ymm14
  .byte  196,65,36,89,246                    // vmulps        %ymm14,%ymm11,%ymm14
  .byte  196,65,52,88,246                    // vaddps        %ymm14,%ymm9,%ymm14
  .byte  196,226,125,24,13,99,78,0,0         // vbroadcastss  0x4e63(%rip),%ymm1        # 6904 <_sk_callback_avx+0x24a>
  .byte  196,193,116,194,255,2               // vcmpleps      %ymm15,%ymm1,%ymm7
  .byte  196,195,13,74,249,112               // vblendvps     %ymm7,%ymm9,%ymm14,%ymm7
  .byte  196,65,60,194,247,2                 // vcmpleps      %ymm15,%ymm8,%ymm14
  .byte  196,227,45,74,255,224               // vblendvps     %ymm14,%ymm7,%ymm10,%ymm7
  .byte  196,98,125,24,53,78,78,0,0          // vbroadcastss  0x4e4e(%rip),%ymm14        # 6910 <_sk_callback_avx+0x256>
  .byte  196,65,12,194,255,2                 // vcmpleps      %ymm15,%ymm14,%ymm15
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,180,88,192                      // vaddps        %ymm0,%ymm9,%ymm0
  .byte  196,99,125,74,255,240               // vblendvps     %ymm15,%ymm7,%ymm0,%ymm15
  .byte  196,227,125,8,195,1                 // vroundps      $0x1,%ymm3,%ymm0
  .byte  197,228,92,192                      // vsubps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,89,252                  // vmulps        %ymm12,%ymm0,%ymm7
  .byte  197,148,92,247                      // vsubps        %ymm7,%ymm13,%ymm6
  .byte  197,164,89,246                      // vmulps        %ymm6,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  197,244,194,232,2                   // vcmpleps      %ymm0,%ymm1,%ymm5
  .byte  196,195,77,74,233,80                // vblendvps     %ymm5,%ymm9,%ymm6,%ymm5
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,237,96                // vblendvps     %ymm6,%ymm5,%ymm10,%ymm5
  .byte  197,140,194,192,2                   // vcmpleps      %ymm0,%ymm14,%ymm0
  .byte  197,164,89,247                      // vmulps        %ymm7,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  196,227,77,74,237,0                 // vblendvps     %ymm0,%ymm5,%ymm6,%ymm5
  .byte  196,226,125,24,5,240,77,0,0         // vbroadcastss  0x4df0(%rip),%ymm0        # 6914 <_sk_callback_avx+0x25a>
  .byte  197,228,88,192                      // vaddps        %ymm0,%ymm3,%ymm0
  .byte  196,227,125,8,216,1                 // vroundps      $0x1,%ymm0,%ymm3
  .byte  197,252,92,195                      // vsubps        %ymm3,%ymm0,%ymm0
  .byte  197,244,194,200,2                   // vcmpleps      %ymm0,%ymm1,%ymm1
  .byte  196,193,124,89,220                  // vmulps        %ymm12,%ymm0,%ymm3
  .byte  197,148,92,243                      // vsubps        %ymm3,%ymm13,%ymm6
  .byte  197,164,89,246                      // vmulps        %ymm6,%ymm11,%ymm6
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  196,195,77,74,201,16                // vblendvps     %ymm1,%ymm9,%ymm6,%ymm1
  .byte  197,188,194,240,2                   // vcmpleps      %ymm0,%ymm8,%ymm6
  .byte  196,227,45,74,201,96                // vblendvps     %ymm6,%ymm1,%ymm10,%ymm1
  .byte  197,140,194,192,2                   // vcmpleps      %ymm0,%ymm14,%ymm0
  .byte  197,164,89,219                      // vmulps        %ymm3,%ymm11,%ymm3
  .byte  197,180,88,219                      // vaddps        %ymm3,%ymm9,%ymm3
  .byte  196,227,101,74,217,0                // vblendvps     %ymm0,%ymm1,%ymm3,%ymm3
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,220,194,224,0                   // vcmpeqps      %ymm0,%ymm4,%ymm4
  .byte  196,227,5,74,194,64                 // vblendvps     %ymm4,%ymm2,%ymm15,%ymm0
  .byte  196,227,85,74,202,64                // vblendvps     %ymm4,%ymm2,%ymm5,%ymm1
  .byte  196,227,101,74,210,64               // vblendvps     %ymm4,%ymm2,%ymm3,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,92,36,128                // vmovups       -0x80(%rsp),%ymm3
  .byte  197,252,16,100,36,160               // vmovups       -0x60(%rsp),%ymm4
  .byte  197,252,16,108,36,192               // vmovups       -0x40(%rsp),%ymm5
  .byte  197,252,16,116,36,224               // vmovups       -0x20(%rsp),%ymm6
  .byte  197,252,16,60,36                    // vmovups       (%rsp),%ymm7
  .byte  72,131,196,56                       // add           $0x38,%rsp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_avx
.globl _sk_scale_1_float_avx
FUNCTION(_sk_scale_1_float_avx)
_sk_scale_1_float_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_avx
.globl _sk_scale_u8_avx
FUNCTION(_sk_scale_u8_avx)
_sk_scale_u8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,74                              // jne           1c1b <_sk_scale_u8_avx+0x54>
  .byte  196,66,121,48,4,19                  // vpmovzxbw     (%r11,%rdx,1),%xmm8
  .byte  197,57,219,5,129,80,0,0             // vpand         0x5081(%rip),%xmm8,%xmm8        # 6c60 <_sk_callback_avx+0x5a6>
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,65,57,105,201                   // vpunpckhwd    %xmm9,%xmm8,%xmm9
  .byte  196,66,121,51,192                   // vpmovzxwd     %xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,22,77,0,0          // vbroadcastss  0x4d16(%rip),%ymm9        # 6918 <_sk_callback_avx+0x25e>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,167                             // ja            1bd7 <_sk_scale_u8_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,97,0,0,0                  // lea           0x61(%rip),%r10        # 1c9c <_sk_scale_u8_avx+0xd5>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,6                    // vpinsrw       $0x6,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,57,196,192,5                    // vpinsrw       $0x5,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,57,196,192,4                    // vpinsrw       $0x4,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  197,57,196,192,3                    // vpinsrw       $0x3,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,57,196,192,2                    // vpinsrw       $0x2,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  197,57,196,192,1                    // vpinsrw       $0x1,%eax,%xmm8,%xmm8
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,57,196,192,0                    // vpinsrw       $0x0,%eax,%xmm8,%xmm8
  .byte  233,61,255,255,255                  // jmpq          1bd7 <_sk_scale_u8_avx+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  239                                 // out           %eax,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  217,255                             // fcos
  .byte  255                                 // (bad)
  .byte  255,206                             // dec           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  184,255,255,255,168                 // mov           $0xa8ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_1_float_avx
.globl _sk_lerp_1_float_avx
FUNCTION(_sk_lerp_1_float_avx)
_sk_lerp_1_float_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_avx
.globl _sk_lerp_u8_avx
FUNCTION(_sk_lerp_u8_avx)
_sk_lerp_u8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,110                             // jne           1d6f <_sk_lerp_u8_avx+0x78>
  .byte  196,66,121,48,4,19                  // vpmovzxbw     (%r11,%rdx,1),%xmm8
  .byte  197,57,219,5,97,79,0,0              // vpand         0x4f61(%rip),%xmm8,%xmm8        # 6c70 <_sk_callback_avx+0x5b6>
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,65,57,105,201                   // vpunpckhwd    %xmm9,%xmm8,%xmm9
  .byte  196,66,121,51,192                   // vpmovzxwd     %xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,13,234,75,0,0         // vbroadcastss  0x4bea(%rip),%ymm9        # 691c <_sk_callback_avx+0x262>
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,131                             // ja            1d07 <_sk_lerp_u8_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,97,0,0,0                  // lea           0x61(%rip),%r10        # 1df0 <_sk_lerp_u8_avx+0xf9>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  197,57,196,192,6                    // vpinsrw       $0x6,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,57,196,192,5                    // vpinsrw       $0x5,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,57,196,192,4                    // vpinsrw       $0x4,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  197,57,196,192,3                    // vpinsrw       $0x3,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,57,196,192,2                    // vpinsrw       $0x2,%eax,%xmm8,%xmm8
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  197,57,196,192,1                    // vpinsrw       $0x1,%eax,%xmm8,%xmm8
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,57,196,192,0                    // vpinsrw       $0x0,%eax,%xmm8,%xmm8
  .byte  233,25,255,255,255                  // jmpq          1d07 <_sk_lerp_u8_avx+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  239                                 // out           %eax,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  217,255                             // fcos
  .byte  255                                 // (bad)
  .byte  255,206                             // dec           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  184,255,255,255,168                 // mov           $0xa8ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_565_avx
.globl _sk_lerp_565_avx
FUNCTION(_sk_lerp_565_avx)
_sk_lerp_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,208,0,0,0                    // jne           1eea <_sk_lerp_565_avx+0xde>
  .byte  196,65,122,111,4,83                 // vmovdqu       (%r11,%rdx,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,65,57,105,201                   // vpunpckhwd    %xmm9,%xmm8,%xmm9
  .byte  196,66,121,51,192                   // vpmovzxwd     %xmm8,%xmm8
  .byte  196,67,61,24,193,1                  // vinsertf128   $0x1,%xmm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,226,74,0,0         // vbroadcastss  0x4ae2(%rip),%ymm9        # 6920 <_sk_callback_avx+0x266>
  .byte  196,65,60,84,201                    // vandps        %ymm9,%ymm8,%ymm9
  .byte  196,65,124,91,201                   // vcvtdq2ps     %ymm9,%ymm9
  .byte  196,98,125,24,21,211,74,0,0         // vbroadcastss  0x4ad3(%rip),%ymm10        # 6924 <_sk_callback_avx+0x26a>
  .byte  196,65,52,89,202                    // vmulps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,201,74,0,0         // vbroadcastss  0x4ac9(%rip),%ymm10        # 6928 <_sk_callback_avx+0x26e>
  .byte  196,65,60,84,210                    // vandps        %ymm10,%ymm8,%ymm10
  .byte  196,65,124,91,210                   // vcvtdq2ps     %ymm10,%ymm10
  .byte  196,98,125,24,29,186,74,0,0         // vbroadcastss  0x4aba(%rip),%ymm11        # 692c <_sk_callback_avx+0x272>
  .byte  196,65,44,89,211                    // vmulps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,29,176,74,0,0         // vbroadcastss  0x4ab0(%rip),%ymm11        # 6930 <_sk_callback_avx+0x276>
  .byte  196,65,60,84,195                    // vandps        %ymm11,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  196,98,125,24,29,161,74,0,0         // vbroadcastss  0x4aa1(%rip),%ymm11        # 6934 <_sk_callback_avx+0x27a>
  .byte  196,65,60,89,195                    // vmulps        %ymm11,%ymm8,%ymm8
  .byte  197,252,92,196                      // vsubps        %ymm4,%ymm0,%ymm0
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,252,88,196                      // vaddps        %ymm4,%ymm0,%ymm0
  .byte  197,244,92,205                      // vsubps        %ymm5,%ymm1,%ymm1
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,244,88,205                      // vaddps        %ymm5,%ymm1,%ymm1
  .byte  197,236,92,214                      // vsubps        %ymm6,%ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,236,88,214                      // vaddps        %ymm6,%ymm2,%ymm2
  .byte  197,228,92,223                      // vsubps        %ymm7,%ymm3,%ymm3
  .byte  196,65,100,89,201                   // vmulps        %ymm9,%ymm3,%ymm9
  .byte  197,52,88,207                       // vaddps        %ymm7,%ymm9,%ymm9
  .byte  196,65,100,89,210                   // vmulps        %ymm10,%ymm3,%ymm10
  .byte  197,44,88,215                       // vaddps        %ymm7,%ymm10,%ymm10
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  197,228,88,223                      // vaddps        %ymm7,%ymm3,%ymm3
  .byte  197,172,95,219                      // vmaxps        %ymm3,%ymm10,%ymm3
  .byte  197,180,95,219                      // vmaxps        %ymm3,%ymm9,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,29,255,255,255               // ja            1e20 <_sk_lerp_565_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,74,0,0,0                  // lea           0x4a(%rip),%r10        # 1f58 <_sk_lerp_565_avx+0x14c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,57,239,192                   // vpxor         %xmm8,%xmm8,%xmm8
  .byte  196,65,57,196,68,83,12,6            // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,10,5            // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,8,4             // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,6,3             // vpinsrw       $0x3,0x6(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,4,2             // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,68,83,2,1             // vpinsrw       $0x1,0x2(%r11,%rdx,2),%xmm8,%xmm8
  .byte  196,65,57,196,4,83,0                // vpinsrw       $0x0,(%r11,%rdx,2),%xmm8,%xmm8
  .byte  233,200,254,255,255                 // jmpq          1e20 <_sk_lerp_565_avx+0x14>
  .byte  244                                 // hlt
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  191                                 // .byte         0xbf
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_tables_avx
.globl _sk_load_tables_avx
FUNCTION(_sk_load_tables_avx)
_sk_load_tables_avx:
  .byte  83                                  // push          %rbx
  .byte  197,252,17,124,36,208               // vmovups       %ymm7,-0x30(%rsp)
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,248,1,0,0                    // jne           218c <_sk_load_tables_avx+0x218>
  .byte  196,65,124,16,18                    // vmovups       (%r10),%ymm10
  .byte  197,124,40,13,159,77,0,0            // vmovaps       0x4d9f(%rip),%ymm9        # 6d40 <_sk_callback_avx+0x686>
  .byte  196,193,44,84,201                   // vandps        %ymm9,%ymm10,%ymm1
  .byte  196,227,125,25,200,1                // vextractf128  $0x1,%ymm1,%xmm0
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  196,161,122,16,20,147               // vmovss        (%rbx,%r10,4),%xmm2
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,163,105,33,4,155,16             // vinsertps     $0x10,(%rbx,%r11,4),%xmm2,%xmm0
  .byte  68,137,209                          // mov           %r10d,%ecx
  .byte  196,227,121,33,4,139,32             // vinsertps     $0x20,(%rbx,%rcx,4),%xmm0,%xmm0
  .byte  196,193,249,126,203                 // vmovq         %xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,35,121,33,44,147,48             // vinsertps     $0x30,(%rbx,%r10,4),%xmm0,%xmm13
  .byte  68,137,217                          // mov           %r11d,%ecx
  .byte  197,250,16,20,139                   // vmovss        (%rbx,%rcx,4),%xmm2
  .byte  196,227,249,22,201,1                // vpextrq       $0x1,%xmm1,%rcx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,163,105,33,12,155,16            // vinsertps     $0x10,(%rbx,%r11,4),%xmm2,%xmm1
  .byte  65,137,202                          // mov           %ecx,%r10d
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,163,113,33,12,147,32            // vinsertps     $0x20,(%rbx,%r10,4),%xmm1,%xmm1
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  196,99,113,33,36,139,48             // vinsertps     $0x30,(%rbx,%rcx,4),%xmm1,%xmm12
  .byte  196,193,105,114,210,8               // vpsrld        $0x8,%xmm10,%xmm2
  .byte  196,67,125,25,208,1                 // vextractf128  $0x1,%ymm10,%xmm8
  .byte  196,193,121,114,208,8               // vpsrld        $0x8,%xmm8,%xmm0
  .byte  196,227,109,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm2,%ymm0
  .byte  196,193,124,84,209                  // vandps        %ymm9,%ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  196,225,249,126,193                 // vmovq         %xmm0,%rcx
  .byte  137,203                             // mov           %ecx,%ebx
  .byte  196,193,122,16,12,154               // vmovss        (%r10,%rbx,4),%xmm1
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,67,113,33,52,138,16             // vinsertps     $0x10,(%r10,%rcx,4),%xmm1,%xmm14
  .byte  137,217                             // mov           %ebx,%ecx
  .byte  196,193,122,16,28,138               // vmovss        (%r10,%rcx,4),%xmm3
  .byte  196,225,249,126,209                 // vmovq         %xmm2,%rcx
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,193,122,16,12,154               // vmovss        (%r10,%rbx,4),%xmm1
  .byte  137,203                             // mov           %ecx,%ebx
  .byte  196,193,122,16,4,154                // vmovss        (%r10,%rbx,4),%xmm0
  .byte  196,227,249,22,211,1                // vpextrq       $0x1,%xmm2,%rbx
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,67,121,33,28,138,16             // vinsertps     $0x10,(%r10,%rcx,4),%xmm0,%xmm11
  .byte  137,217                             // mov           %ebx,%ecx
  .byte  196,65,122,16,60,138                // vmovss        (%r10,%rcx,4),%xmm15
  .byte  196,195,29,24,197,1                 // vinsertf128   $0x1,%xmm13,%ymm12,%ymm0
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,227,9,33,219,32                 // vinsertps     $0x20,%xmm3,%xmm14,%xmm3
  .byte  196,227,97,33,249,48                // vinsertps     $0x30,%xmm1,%xmm3,%xmm7
  .byte  196,65,122,16,52,154                // vmovss        (%r10,%rbx,4),%xmm14
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  196,193,97,114,210,16               // vpsrld        $0x10,%xmm10,%xmm3
  .byte  196,193,105,114,208,16              // vpsrld        $0x10,%xmm8,%xmm2
  .byte  196,227,101,24,210,1                // vinsertf128   $0x1,%xmm2,%ymm3,%ymm2
  .byte  196,65,108,84,201                   // vandps        %ymm9,%ymm2,%ymm9
  .byte  196,99,125,25,202,1                 // vextractf128  $0x1,%ymm9,%xmm2
  .byte  196,225,249,126,209                 // vmovq         %xmm2,%rcx
  .byte  137,203                             // mov           %ecx,%ebx
  .byte  197,250,16,28,152                   // vmovss        (%rax,%rbx,4),%xmm3
  .byte  196,227,249,22,211,1                // vpextrq       $0x1,%xmm2,%rbx
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,99,97,33,36,136,16              // vinsertps     $0x10,(%rax,%rcx,4),%xmm3,%xmm12
  .byte  137,217                             // mov           %ebx,%ecx
  .byte  197,250,16,28,136                   // vmovss        (%rax,%rcx,4),%xmm3
  .byte  196,97,249,126,201                  // vmovq         %xmm9,%rcx
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  197,250,16,20,152                   // vmovss        (%rax,%rbx,4),%xmm2
  .byte  137,203                             // mov           %ecx,%ebx
  .byte  197,250,16,12,152                   // vmovss        (%rax,%rbx,4),%xmm1
  .byte  196,99,249,22,203,1                 // vpextrq       $0x1,%xmm9,%rbx
  .byte  72,193,233,32                       // shr           $0x20,%rcx
  .byte  196,99,113,33,12,136,16             // vinsertps     $0x10,(%rax,%rcx,4),%xmm1,%xmm9
  .byte  137,217                             // mov           %ebx,%ecx
  .byte  197,122,16,44,136                   // vmovss        (%rax,%rcx,4),%xmm13
  .byte  196,195,33,33,207,32                // vinsertps     $0x20,%xmm15,%xmm11,%xmm1
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  197,122,16,28,152                   // vmovss        (%rax,%rbx,4),%xmm11
  .byte  196,195,113,33,206,48               // vinsertps     $0x30,%xmm14,%xmm1,%xmm1
  .byte  196,227,117,24,207,1                // vinsertf128   $0x1,%xmm7,%ymm1,%ymm1
  .byte  196,227,25,33,219,32                // vinsertps     $0x20,%xmm3,%xmm12,%xmm3
  .byte  196,227,97,33,210,48                // vinsertps     $0x30,%xmm2,%xmm3,%xmm2
  .byte  196,195,49,33,221,32                // vinsertps     $0x20,%xmm13,%xmm9,%xmm3
  .byte  196,195,97,33,219,48                // vinsertps     $0x30,%xmm11,%xmm3,%xmm3
  .byte  196,227,101,24,210,1                // vinsertf128   $0x1,%xmm2,%ymm3,%ymm2
  .byte  196,193,97,114,210,24               // vpsrld        $0x18,%xmm10,%xmm3
  .byte  196,193,65,114,208,24               // vpsrld        $0x18,%xmm8,%xmm7
  .byte  196,227,101,24,223,1                // vinsertf128   $0x1,%xmm7,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,226,125,24,61,190,71,0,0        // vbroadcastss  0x47be(%rip),%ymm7        # 6938 <_sk_callback_avx+0x27e>
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  197,252,16,124,36,208               // vmovups       -0x30(%rsp),%ymm7
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  73,199,195,255,255,255,255          // mov           $0xffffffffffffffff,%r11
  .byte  73,211,235                          // shr           %cl,%r11
  .byte  196,193,249,110,195                 // vmovq         %r11,%xmm0
  .byte  196,226,121,48,192                  // vpmovzxbw     %xmm0,%xmm0
  .byte  196,226,121,0,13,204,74,0,0         // vpshufb       0x4acc(%rip),%xmm0,%xmm1        # 6c80 <_sk_callback_avx+0x5c6>
  .byte  196,226,121,33,201                  // vpmovsxbd     %xmm1,%xmm1
  .byte  196,226,121,0,5,206,74,0,0          // vpshufb       0x4ace(%rip),%xmm0,%xmm0        # 6c90 <_sk_callback_avx+0x5d6>
  .byte  196,226,121,33,192                  // vpmovsxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  196,66,125,44,18                    // vmaskmovps    (%r10),%ymm0,%ymm10
  .byte  233,194,253,255,255                 // jmpq          1f99 <_sk_load_tables_avx+0x25>

HIDDEN _sk_load_tables_u16_be_avx
.globl _sk_load_tables_u16_be_avx
FUNCTION(_sk_load_tables_u16_be_avx)
_sk_load_tables_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  197,252,17,124,36,200               // vmovups       %ymm7,-0x38(%rsp)
  .byte  15,133,84,2,0,0                     // jne           2447 <_sk_load_tables_u16_be_avx+0x270>
  .byte  196,1,121,16,4,81                   // vmovupd       (%r9,%r10,2),%xmm8
  .byte  196,129,121,16,84,81,16             // vmovupd       0x10(%r9,%r10,2),%xmm2
  .byte  196,129,121,16,92,81,32             // vmovupd       0x20(%r9,%r10,2),%xmm3
  .byte  196,1,122,111,76,81,48              // vmovdqu       0x30(%r9,%r10,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,202                      // vpunpcklwd    %xmm2,%xmm0,%xmm9
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,241,97,195                      // vpunpcklwd    %xmm3,%xmm1,%xmm0
  .byte  197,113,105,219                     // vpunpckhwd    %xmm3,%xmm1,%xmm11
  .byte  197,177,108,200                     // vpunpcklqdq   %xmm0,%xmm9,%xmm1
  .byte  197,49,109,224                      // vpunpckhqdq   %xmm0,%xmm9,%xmm12
  .byte  197,121,111,21,96,74,0,0            // vmovdqa       0x4a60(%rip),%xmm10        # 6ca0 <_sk_callback_avx+0x5e6>
  .byte  196,193,113,219,202                 // vpand         %xmm10,%xmm1,%xmm1
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  196,193,113,105,209                 // vpunpckhwd    %xmm9,%xmm1,%xmm2
  .byte  196,193,249,126,209                 // vmovq         %xmm2,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,88,8                         // mov           0x8(%rax),%r11
  .byte  196,129,122,16,28,147               // vmovss        (%r11,%r10,4),%xmm3
  .byte  196,195,249,22,210,1                // vpextrq       $0x1,%xmm2,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,97,33,44,139,16               // vinsertps     $0x10,(%r11,%r9,4),%xmm3,%xmm13
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,129,122,16,28,139               // vmovss        (%r11,%r9,4),%xmm3
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  196,129,122,16,4,147                // vmovss        (%r11,%r10,4),%xmm0
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,129,122,16,20,147               // vmovss        (%r11,%r10,4),%xmm2
  .byte  196,195,249,22,202,1                // vpextrq       $0x1,%xmm1,%r10
  .byte  196,131,105,33,12,11,16             // vinsertps     $0x10,(%r11,%r9,1),%xmm2,%xmm1
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,129,122,16,20,139               // vmovss        (%r11,%r9,4),%xmm2
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,227,17,33,219,32                // vinsertps     $0x20,%xmm3,%xmm13,%xmm3
  .byte  196,99,97,33,232,48                 // vinsertps     $0x30,%xmm0,%xmm3,%xmm13
  .byte  196,99,113,33,242,32                // vinsertps     $0x20,%xmm2,%xmm1,%xmm14
  .byte  196,1,122,16,60,19                  // vmovss        (%r11,%r10,1),%xmm15
  .byte  196,193,25,219,210                  // vpand         %xmm10,%xmm12,%xmm2
  .byte  196,193,105,105,193                 // vpunpckhwd    %xmm9,%xmm2,%xmm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,129,122,16,12,153               // vmovss        (%r9,%r11,4),%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,113,33,36,145,16              // vinsertps     $0x10,(%r9,%r10,4),%xmm1,%xmm12
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,226,121,51,194                  // vpmovzxwd     %xmm2,%xmm0
  .byte  196,129,122,16,20,145               // vmovss        (%r9,%r10,4),%xmm2
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  196,129,122,16,28,153               // vmovss        (%r9,%r11,4),%xmm3
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,129,122,16,12,153               // vmovss        (%r9,%r11,4),%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  196,131,113,33,12,17,16             // vinsertps     $0x10,(%r9,%r10,1),%xmm1,%xmm1
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  196,129,122,16,60,145               // vmovss        (%r9,%r10,4),%xmm7
  .byte  196,195,9,33,199,48                 // vinsertps     $0x30,%xmm15,%xmm14,%xmm0
  .byte  196,65,57,108,243                   // vpunpcklqdq   %xmm11,%xmm8,%xmm14
  .byte  196,195,125,24,197,1                // vinsertf128   $0x1,%xmm13,%ymm0,%ymm0
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,227,25,33,210,32                // vinsertps     $0x20,%xmm2,%xmm12,%xmm2
  .byte  196,227,105,33,219,48               // vinsertps     $0x30,%xmm3,%xmm2,%xmm3
  .byte  196,99,113,33,239,32                // vinsertps     $0x20,%xmm7,%xmm1,%xmm13
  .byte  196,1,122,16,60,25                  // vmovss        (%r9,%r11,1),%xmm15
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,193,9,219,250                   // vpand         %xmm10,%xmm14,%xmm7
  .byte  196,193,65,105,209                  // vpunpckhwd    %xmm9,%xmm7,%xmm2
  .byte  196,193,249,126,209                 // vmovq         %xmm2,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,193,122,16,12,130               // vmovss        (%r10,%rax,4),%xmm1
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,113,33,20,138,16              // vinsertps     $0x10,(%r10,%r9,4),%xmm1,%xmm10
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,226,121,51,207                  // vpmovzxwd     %xmm7,%xmm1
  .byte  196,1,122,16,52,138                 // vmovss        (%r10,%r9,4),%xmm14
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  196,65,122,16,36,130                // vmovss        (%r10,%rax,4),%xmm12
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,193,122,16,20,130               // vmovss        (%r10,%rax,4),%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  196,131,105,33,20,10,16             // vinsertps     $0x10,(%r10,%r9,1),%xmm2,%xmm2
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,193,122,16,60,130               // vmovss        (%r10,%rax,4),%xmm7
  .byte  196,195,17,33,207,48                // vinsertps     $0x30,%xmm15,%xmm13,%xmm1
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,1,122,16,44,26                  // vmovss        (%r10,%r11,1),%xmm13
  .byte  196,227,117,24,203,1                // vinsertf128   $0x1,%xmm3,%ymm1,%ymm1
  .byte  196,195,41,33,222,32                // vinsertps     $0x20,%xmm14,%xmm10,%xmm3
  .byte  196,195,97,33,220,48                // vinsertps     $0x30,%xmm12,%xmm3,%xmm3
  .byte  196,227,105,33,215,32               // vinsertps     $0x20,%xmm7,%xmm2,%xmm2
  .byte  196,195,105,33,213,48               // vinsertps     $0x30,%xmm13,%xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  196,193,57,109,219                  // vpunpckhqdq   %xmm11,%xmm8,%xmm3
  .byte  197,193,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm7
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,193,235,219                     // vpor          %xmm3,%xmm7,%xmm3
  .byte  196,193,97,105,249                  // vpunpckhwd    %xmm9,%xmm3,%xmm7
  .byte  196,226,121,51,219                  // vpmovzxwd     %xmm3,%xmm3
  .byte  196,227,101,24,223,1                // vinsertf128   $0x1,%xmm7,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,226,125,24,61,3,69,0,0          // vbroadcastss  0x4503(%rip),%ymm7        # 693c <_sk_callback_avx+0x282>
  .byte  197,228,89,223                      // vmulps        %ymm7,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,124,36,200               // vmovups       -0x38(%rsp),%ymm7
  .byte  255,224                             // jmpq          *%rax
  .byte  196,1,123,16,4,81                   // vmovsd        (%r9,%r10,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,85                              // je            24ad <_sk_load_tables_u16_be_avx+0x2d6>
  .byte  196,1,57,22,68,81,8                 // vmovhpd       0x8(%r9,%r10,2),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,72                              // jb            24ad <_sk_load_tables_u16_be_avx+0x2d6>
  .byte  196,129,123,16,84,81,16             // vmovsd        0x10(%r9,%r10,2),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,72                              // je            24ba <_sk_load_tables_u16_be_avx+0x2e3>
  .byte  196,129,105,22,84,81,24             // vmovhpd       0x18(%r9,%r10,2),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,59                              // jb            24ba <_sk_load_tables_u16_be_avx+0x2e3>
  .byte  196,129,123,16,92,81,32             // vmovsd        0x20(%r9,%r10,2),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,126,253,255,255              // je            220e <_sk_load_tables_u16_be_avx+0x37>
  .byte  196,129,97,22,92,81,40              // vmovhpd       0x28(%r9,%r10,2),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,109,253,255,255              // jb            220e <_sk_load_tables_u16_be_avx+0x37>
  .byte  196,1,122,126,76,81,48              // vmovq         0x30(%r9,%r10,2),%xmm9
  .byte  233,97,253,255,255                  // jmpq          220e <_sk_load_tables_u16_be_avx+0x37>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,84,253,255,255                  // jmpq          220e <_sk_load_tables_u16_be_avx+0x37>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,75,253,255,255                  // jmpq          220e <_sk_load_tables_u16_be_avx+0x37>

HIDDEN _sk_load_tables_rgb_u16_be_avx
.globl _sk_load_tables_rgb_u16_be_avx
FUNCTION(_sk_load_tables_rgb_u16_be_avx)
_sk_load_tables_rgb_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,82                        // lea           (%rdx,%rdx,2),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  197,252,17,124,36,200               // vmovups       %ymm7,-0x38(%rsp)
  .byte  197,252,17,116,36,168               // vmovups       %ymm6,-0x58(%rsp)
  .byte  15,133,71,2,0,0                     // jne           2728 <_sk_load_tables_rgb_u16_be_avx+0x265>
  .byte  196,129,122,111,4,81                // vmovdqu       (%r9,%r10,2),%xmm0
  .byte  196,129,122,111,84,81,12            // vmovdqu       0xc(%r9,%r10,2),%xmm2
  .byte  196,129,122,111,76,81,24            // vmovdqu       0x18(%r9,%r10,2),%xmm1
  .byte  196,129,122,111,92,81,32            // vmovdqu       0x20(%r9,%r10,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,249,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm0
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,241,105,203                     // vpunpckhwd    %xmm3,%xmm1,%xmm1
  .byte  197,185,108,218                     // vpunpcklqdq   %xmm2,%xmm8,%xmm3
  .byte  197,57,109,218                      // vpunpckhqdq   %xmm2,%xmm8,%xmm11
  .byte  197,121,108,193                     // vpunpcklqdq   %xmm1,%xmm0,%xmm8
  .byte  197,121,111,13,101,71,0,0           // vmovdqa       0x4765(%rip),%xmm9        # 6cb0 <_sk_callback_avx+0x5f6>
  .byte  196,193,97,219,193                  // vpand         %xmm9,%xmm3,%xmm0
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,193,121,105,202                 // vpunpckhwd    %xmm10,%xmm0,%xmm1
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,88,8                         // mov           0x8(%rax),%r11
  .byte  196,129,122,16,20,147               // vmovss        (%r11,%r10,4),%xmm2
  .byte  196,195,249,22,202,1                // vpextrq       $0x1,%xmm1,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,105,33,36,139,16              // vinsertps     $0x10,(%r11,%r9,4),%xmm2,%xmm12
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,129,122,16,20,139               // vmovss        (%r11,%r9,4),%xmm2
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  196,129,122,16,12,147               // vmovss        (%r11,%r10,4),%xmm1
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,129,122,16,28,147               // vmovss        (%r11,%r10,4),%xmm3
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  196,131,97,33,28,11,16              // vinsertps     $0x10,(%r11,%r9,1),%xmm3,%xmm3
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,129,122,16,4,139                // vmovss        (%r11,%r9,4),%xmm0
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,227,25,33,210,32                // vinsertps     $0x20,%xmm2,%xmm12,%xmm2
  .byte  196,227,105,33,201,48               // vinsertps     $0x30,%xmm1,%xmm2,%xmm1
  .byte  196,129,122,16,20,19                // vmovss        (%r11,%r10,1),%xmm2
  .byte  196,65,33,219,225                   // vpand         %xmm9,%xmm11,%xmm12
  .byte  196,65,25,105,218                   // vpunpckhwd    %xmm10,%xmm12,%xmm11
  .byte  196,65,249,126,218                  // vmovq         %xmm11,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,67,249,22,219,1                 // vpextrq       $0x1,%xmm11,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,17,33,28,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm13,%xmm11
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,66,121,51,244                   // vpmovzxwd     %xmm12,%xmm14
  .byte  196,1,122,16,44,145                 // vmovss        (%r9,%r10,4),%xmm13
  .byte  196,65,249,126,242                  // vmovq         %xmm14,%r10
  .byte  196,1,122,16,36,153                 // vmovss        (%r9,%r11,4),%xmm12
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,1,122,16,60,153                 // vmovss        (%r9,%r11,4),%xmm15
  .byte  196,67,249,22,243,1                 // vpextrq       $0x1,%xmm14,%r11
  .byte  196,3,1,33,52,17,16                 // vinsertps     $0x10,(%r9,%r10,1),%xmm15,%xmm14
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  196,1,122,16,60,145                 // vmovss        (%r9,%r10,4),%xmm15
  .byte  196,227,97,33,192,32                // vinsertps     $0x20,%xmm0,%xmm3,%xmm0
  .byte  196,227,121,33,194,48               // vinsertps     $0x30,%xmm2,%xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,129,122,16,52,25                // vmovss        (%r9,%r11,1),%xmm6
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,65,57,219,193                   // vpand         %xmm9,%xmm8,%xmm8
  .byte  196,193,57,105,210                  // vpunpckhwd    %xmm10,%xmm8,%xmm2
  .byte  196,193,249,126,209                 // vmovq         %xmm2,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,193,122,16,12,130               // vmovss        (%r10,%rax,4),%xmm1
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,113,33,12,138,16              // vinsertps     $0x10,(%r10,%r9,4),%xmm1,%xmm9
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,194,121,51,200                  // vpmovzxwd     %xmm8,%xmm1
  .byte  196,1,122,16,4,138                  // vmovss        (%r10,%r9,4),%xmm8
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  196,65,122,16,20,130                // vmovss        (%r10,%rax,4),%xmm10
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  196,193,122,16,20,130               // vmovss        (%r10,%rax,4),%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  196,131,105,33,20,10,16             // vinsertps     $0x10,(%r10,%r9,1),%xmm2,%xmm2
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,193,122,16,60,130               // vmovss        (%r10,%rax,4),%xmm7
  .byte  196,195,33,33,205,32                // vinsertps     $0x20,%xmm13,%xmm11,%xmm1
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  196,1,122,16,28,26                  // vmovss        (%r10,%r11,1),%xmm11
  .byte  196,195,113,33,204,48               // vinsertps     $0x30,%xmm12,%xmm1,%xmm1
  .byte  196,195,9,33,223,32                 // vinsertps     $0x20,%xmm15,%xmm14,%xmm3
  .byte  196,227,97,33,222,48                // vinsertps     $0x30,%xmm6,%xmm3,%xmm3
  .byte  196,227,101,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm1
  .byte  196,195,49,33,216,32                // vinsertps     $0x20,%xmm8,%xmm9,%xmm3
  .byte  196,195,97,33,218,48                // vinsertps     $0x30,%xmm10,%xmm3,%xmm3
  .byte  196,227,105,33,215,32               // vinsertps     $0x20,%xmm7,%xmm2,%xmm2
  .byte  196,195,105,33,211,48               // vinsertps     $0x30,%xmm11,%xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,38,66,0,0         // vbroadcastss  0x4226(%rip),%ymm3        # 6940 <_sk_callback_avx+0x286>
  .byte  197,252,16,116,36,168               // vmovups       -0x58(%rsp),%ymm6
  .byte  197,252,16,124,36,200               // vmovups       -0x38(%rsp),%ymm7
  .byte  255,224                             // jmpq          *%rax
  .byte  196,129,121,110,4,81                // vmovd         (%r9,%r10,2),%xmm0
  .byte  196,129,121,196,68,81,4,2           // vpinsrw       $0x2,0x4(%r9,%r10,2),%xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,5                               // jne           2741 <_sk_load_tables_rgb_u16_be_avx+0x27e>
  .byte  233,212,253,255,255                 // jmpq          2515 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  196,129,121,110,76,81,6             // vmovd         0x6(%r9,%r10,2),%xmm1
  .byte  196,1,113,196,68,81,10,2            // vpinsrw       $0x2,0xa(%r9,%r10,2),%xmm1,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,26                              // jb            2770 <_sk_load_tables_rgb_u16_be_avx+0x2ad>
  .byte  196,129,121,110,76,81,12            // vmovd         0xc(%r9,%r10,2),%xmm1
  .byte  196,129,113,196,84,81,16,2          // vpinsrw       $0x2,0x10(%r9,%r10,2),%xmm1,%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  117,10                              // jne           2775 <_sk_load_tables_rgb_u16_be_avx+0x2b2>
  .byte  233,165,253,255,255                 // jmpq          2515 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  233,160,253,255,255                 // jmpq          2515 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  196,129,121,110,76,81,18            // vmovd         0x12(%r9,%r10,2),%xmm1
  .byte  196,1,113,196,76,81,22,2            // vpinsrw       $0x2,0x16(%r9,%r10,2),%xmm1,%xmm9
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,26                              // jb            27a4 <_sk_load_tables_rgb_u16_be_avx+0x2e1>
  .byte  196,129,121,110,76,81,24            // vmovd         0x18(%r9,%r10,2),%xmm1
  .byte  196,129,113,196,76,81,28,2          // vpinsrw       $0x2,0x1c(%r9,%r10,2),%xmm1,%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  117,10                              // jne           27a9 <_sk_load_tables_rgb_u16_be_avx+0x2e6>
  .byte  233,113,253,255,255                 // jmpq          2515 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  233,108,253,255,255                 // jmpq          2515 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  196,129,121,110,92,81,30            // vmovd         0x1e(%r9,%r10,2),%xmm3
  .byte  196,1,97,196,92,81,34,2             // vpinsrw       $0x2,0x22(%r9,%r10,2),%xmm3,%xmm11
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,20                              // jb            27d2 <_sk_load_tables_rgb_u16_be_avx+0x30f>
  .byte  196,129,121,110,92,81,36            // vmovd         0x24(%r9,%r10,2),%xmm3
  .byte  196,129,97,196,92,81,40,2           // vpinsrw       $0x2,0x28(%r9,%r10,2),%xmm3,%xmm3
  .byte  233,67,253,255,255                  // jmpq          2515 <_sk_load_tables_rgb_u16_be_avx+0x52>
  .byte  233,62,253,255,255                  // jmpq          2515 <_sk_load_tables_rgb_u16_be_avx+0x52>

HIDDEN _sk_byte_tables_avx
.globl _sk_byte_tables_avx
FUNCTION(_sk_byte_tables_avx)
_sk_byte_tables_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,98,65,0,0           // vbroadcastss  0x4162(%rip),%ymm8        # 6944 <_sk_callback_avx+0x28a>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,125,91,200                      // vcvtps2dq     %ymm0,%ymm9
  .byte  196,65,249,126,201                  // vmovq         %xmm9,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,131,121,32,4,19,0               // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm0
  .byte  196,67,249,22,202,1                 // vpextrq       $0x1,%xmm9,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,121,32,20,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm0,%xmm10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,99,125,25,200,1                 // vextractf128  $0x1,%ymm9,%xmm0
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,67,41,32,201,2                  // vpinsrb       $0x2,%r9d,%xmm10,%xmm9
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,3                  // vpinsrb       $0x3,%r10d,%xmm9,%xmm9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  196,3,121,32,20,19,0                // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm10
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,41,32,4,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm10,%xmm0
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,121,32,193,2                // vpinsrb       $0x2,%r9d,%xmm0,%xmm0
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,121,32,210,3                 // vpinsrb       $0x3,%r10d,%xmm0,%xmm10
  .byte  196,193,116,89,192                  // vmulps        %ymm8,%ymm1,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,12,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,113,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm1,%xmm1
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,192,1                // vextractf128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,113,32,202,2                // vpinsrb       $0x2,%r10d,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,67,113,32,227,3                 // vpinsrb       $0x3,%r11d,%xmm1,%xmm12
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,12,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,113,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm1,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,67,121,32,233,3                 // vpinsrb       $0x3,%r9d,%xmm0,%xmm13
  .byte  76,139,72,16                        // mov           0x10(%rax),%r9
  .byte  196,193,108,89,200                  // vmulps        %ymm8,%ymm2,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,20,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,20,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm2
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,105,32,210,2                // vpinsrb       $0x2,%r10d,%xmm2,%xmm2
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,67,105,32,219,3                 // vpinsrb       $0x3,%r11d,%xmm2,%xmm11
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,20,25,0              // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm1
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,113,32,202,2                // vpinsrb       $0x2,%r10d,%xmm1,%xmm1
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,67,113,32,241,3                 // vpinsrb       $0x3,%r9d,%xmm1,%xmm14
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  196,193,100,89,200                  // vmulps        %ymm8,%ymm3,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,28,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm3
  .byte  196,227,249,22,200,1                // vpextrq       $0x1,%xmm1,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,97,32,28,10,1               // vpinsrb       $0x1,(%r10,%r9,1),%xmm3,%xmm3
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  196,195,97,32,217,2                 // vpinsrb       $0x2,%r9d,%xmm3,%xmm3
  .byte  196,193,249,126,201                 // vmovq         %xmm1,%r9
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,99,97,32,192,3                  // vpinsrb       $0x3,%eax,%xmm3,%xmm8
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,4,2,0                // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,121,32,4,10,1               // vpinsrb       $0x1,(%r10,%r9,1),%xmm0,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,99,121,32,248,2                 // vpinsrb       $0x2,%eax,%xmm0,%xmm15
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,26                      // movzbl        (%r10,%r11,1),%eax
  .byte  196,194,121,49,193                  // vpmovzxbd     %xmm9,%xmm0
  .byte  196,194,121,49,202                  // vpmovzxbd     %xmm10,%xmm1
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,194,121,49,204                  // vpmovzxbd     %xmm12,%xmm1
  .byte  196,194,121,49,213                  // vpmovzxbd     %xmm13,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,98,125,24,13,12,63,0,0          // vbroadcastss  0x3f0c(%rip),%ymm9        # 6948 <_sk_callback_avx+0x28e>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,194,121,49,211                  // vpmovzxbd     %xmm11,%xmm2
  .byte  196,194,121,49,222                  // vpmovzxbd     %xmm14,%xmm3
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,66,121,49,192                   // vpmovzxbd     %xmm8,%xmm8
  .byte  196,227,1,32,216,3                  // vpinsrb       $0x3,%eax,%xmm15,%xmm3
  .byte  196,226,121,49,219                  // vpmovzxbd     %xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_avx
.globl _sk_byte_tables_rgb_avx
FUNCTION(_sk_byte_tables_rgb_avx)
_sk_byte_tables_rgb_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,72,24                        // mov           0x18(%rax),%r9d
  .byte  65,255,201                          // dec           %r9d
  .byte  196,65,121,110,193                  // vmovd         %r9d,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,200                      // vcvtps2dq     %ymm0,%ymm9
  .byte  196,65,249,126,201                  // vmovq         %xmm9,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,131,121,32,4,19,0               // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm0
  .byte  196,67,249,22,202,1                 // vpextrq       $0x1,%xmm9,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,3,121,32,20,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm0,%xmm10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,99,125,25,200,1                 // vextractf128  $0x1,%ymm9,%xmm0
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,67,41,32,201,2                  // vpinsrb       $0x2,%r9d,%xmm10,%xmm9
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,49,32,202,3                  // vpinsrb       $0x3,%r10d,%xmm9,%xmm9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  196,3,121,32,20,19,0                // vpinsrb       $0x0,(%r11,%r10,1),%xmm0,%xmm10
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,41,32,4,11,1                // vpinsrb       $0x1,(%r11,%r9,1),%xmm10,%xmm0
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  71,15,182,12,11                     // movzbl        (%r11,%r9,1),%r9d
  .byte  196,195,121,32,193,2                // vpinsrb       $0x2,%r9d,%xmm0,%xmm0
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  71,15,182,20,19                     // movzbl        (%r11,%r10,1),%r10d
  .byte  196,67,121,32,218,3                 // vpinsrb       $0x3,%r10d,%xmm0,%xmm11
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  196,67,121,32,211,3                 // vpinsrb       $0x3,%r11d,%xmm0,%xmm10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  196,131,121,32,4,25,0               // vpinsrb       $0x0,(%r9,%r11,1),%xmm0,%xmm0
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm0,%xmm0
  .byte  69,137,218                          // mov           %r11d,%r10d
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  196,195,121,32,194,2                // vpinsrb       $0x2,%r10d,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  71,15,182,12,25                     // movzbl        (%r9,%r11,1),%r9d
  .byte  196,67,121,32,225,3                 // vpinsrb       $0x3,%r9d,%xmm0,%xmm12
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  197,188,89,194                      // vmulps        %ymm2,%ymm8,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,20,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm2
  .byte  196,227,249,22,192,1                // vpextrq       $0x1,%xmm0,%rax
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,105,32,20,10,1              // vpinsrb       $0x1,(%r10,%r9,1),%xmm2,%xmm2
  .byte  65,137,193                          // mov           %eax,%r9d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,227,125,25,192,1                // vextractf128  $0x1,%ymm0,%xmm0
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  196,195,105,32,209,2                // vpinsrb       $0x2,%r9d,%xmm2,%xmm2
  .byte  196,193,249,126,193                 // vmovq         %xmm0,%r9
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,99,105,32,192,3                 // vpinsrb       $0x3,%eax,%xmm2,%xmm8
  .byte  68,137,200                          // mov           %r9d,%eax
  .byte  196,195,121,32,12,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,131,113,32,4,10,1               // vpinsrb       $0x1,(%r10,%r9,1),%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  196,99,121,32,232,2                 // vpinsrb       $0x2,%eax,%xmm0,%xmm13
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,26                      // movzbl        (%r10,%r11,1),%eax
  .byte  196,194,121,49,193                  // vpmovzxbd     %xmm9,%xmm0
  .byte  196,194,121,49,203                  // vpmovzxbd     %xmm11,%xmm1
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,237,60,0,0         // vbroadcastss  0x3ced(%rip),%ymm9        # 694c <_sk_callback_avx+0x292>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,194,121,49,202                  // vpmovzxbd     %xmm10,%xmm1
  .byte  196,194,121,49,212                  // vpmovzxbd     %xmm12,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,66,121,49,192                   // vpmovzxbd     %xmm8,%xmm8
  .byte  196,227,17,32,208,3                 // vpinsrb       $0x3,%eax,%xmm13,%xmm2
  .byte  196,226,121,49,210                  // vpmovzxbd     %xmm2,%xmm2
  .byte  196,227,61,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm8,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_avx
.globl _sk_table_r_avx
FUNCTION(_sk_table_r_avx)
_sk_table_r_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  197,125,91,192                      // vcvtps2dq     %ymm0,%ymm8
  .byte  196,99,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm0
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,65,122,16,12,129                // vmovss        (%r9,%rax,4),%xmm9
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,49,33,12,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm9,%xmm9
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,20,129                // vmovss        (%r9,%rax,4),%xmm10
  .byte  196,65,249,126,194                  // vmovq         %xmm8,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,28,153                 // vmovss        (%r9,%r11,4),%xmm11
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,122,16,4,129                // vmovss        (%r9,%rax,4),%xmm0
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,121,33,4,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm0,%xmm8
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,36,129                // vmovss        (%r9,%rax,4),%xmm12
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,195,49,33,194,32                // vinsertps     $0x20,%xmm10,%xmm9,%xmm0
  .byte  196,67,121,33,203,48                // vinsertps     $0x30,%xmm11,%xmm0,%xmm9
  .byte  196,195,57,33,196,32                // vinsertps     $0x20,%xmm12,%xmm8,%xmm0
  .byte  196,195,121,33,197,48               // vinsertps     $0x30,%xmm13,%xmm0,%xmm0
  .byte  196,195,125,24,193,1                // vinsertf128   $0x1,%xmm9,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_avx
.globl _sk_table_g_avx
FUNCTION(_sk_table_g_avx)
_sk_table_g_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,201                      // vmulps        %ymm1,%ymm8,%ymm1
  .byte  197,125,91,193                      // vcvtps2dq     %ymm1,%ymm8
  .byte  196,99,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,65,122,16,12,129                // vmovss        (%r9,%rax,4),%xmm9
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,49,33,12,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm9,%xmm9
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,20,129                // vmovss        (%r9,%rax,4),%xmm10
  .byte  196,65,249,126,194                  // vmovq         %xmm8,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,28,153                 // vmovss        (%r9,%r11,4),%xmm11
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,122,16,12,129               // vmovss        (%r9,%rax,4),%xmm1
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,113,33,4,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm1,%xmm8
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,36,129                // vmovss        (%r9,%rax,4),%xmm12
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,195,49,33,202,32                // vinsertps     $0x20,%xmm10,%xmm9,%xmm1
  .byte  196,67,113,33,203,48                // vinsertps     $0x30,%xmm11,%xmm1,%xmm9
  .byte  196,195,57,33,204,32                // vinsertps     $0x20,%xmm12,%xmm8,%xmm1
  .byte  196,195,113,33,205,48               // vinsertps     $0x30,%xmm13,%xmm1,%xmm1
  .byte  196,195,117,24,201,1                // vinsertf128   $0x1,%xmm9,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_avx
.globl _sk_table_b_avx
FUNCTION(_sk_table_b_avx)
_sk_table_b_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,210                      // vmulps        %ymm2,%ymm8,%ymm2
  .byte  197,125,91,194                      // vcvtps2dq     %ymm2,%ymm8
  .byte  196,99,125,25,194,1                 // vextractf128  $0x1,%ymm8,%xmm2
  .byte  196,193,249,126,210                 // vmovq         %xmm2,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,65,122,16,12,129                // vmovss        (%r9,%rax,4),%xmm9
  .byte  196,195,249,22,211,1                // vpextrq       $0x1,%xmm2,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,49,33,12,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm9,%xmm9
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,20,129                // vmovss        (%r9,%rax,4),%xmm10
  .byte  196,65,249,126,194                  // vmovq         %xmm8,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,28,153                 // vmovss        (%r9,%r11,4),%xmm11
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,122,16,20,129               // vmovss        (%r9,%rax,4),%xmm2
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,105,33,4,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm2,%xmm8
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,36,129                // vmovss        (%r9,%rax,4),%xmm12
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,195,49,33,210,32                // vinsertps     $0x20,%xmm10,%xmm9,%xmm2
  .byte  196,67,105,33,203,48                // vinsertps     $0x30,%xmm11,%xmm2,%xmm9
  .byte  196,195,57,33,212,32                // vinsertps     $0x20,%xmm12,%xmm8,%xmm2
  .byte  196,195,105,33,213,48               // vinsertps     $0x30,%xmm13,%xmm2,%xmm2
  .byte  196,195,109,24,209,1                // vinsertf128   $0x1,%xmm9,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_avx
.globl _sk_table_a_avx
FUNCTION(_sk_table_a_avx)
_sk_table_a_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  197,121,110,192                     // vmovd         %eax,%xmm8
  .byte  196,65,121,112,192,0                // vpshufd       $0x0,%xmm8,%xmm8
  .byte  196,67,61,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm8,%ymm8
  .byte  196,65,124,91,192                   // vcvtdq2ps     %ymm8,%ymm8
  .byte  197,188,89,219                      // vmulps        %ymm3,%ymm8,%ymm3
  .byte  197,125,91,195                      // vcvtps2dq     %ymm3,%ymm8
  .byte  196,99,125,25,195,1                 // vextractf128  $0x1,%ymm8,%xmm3
  .byte  196,193,249,126,218                 // vmovq         %xmm3,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,65,122,16,12,129                // vmovss        (%r9,%rax,4),%xmm9
  .byte  196,195,249,22,219,1                // vpextrq       $0x1,%xmm3,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,49,33,12,145,16               // vinsertps     $0x10,(%r9,%r10,4),%xmm9,%xmm9
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,20,129                // vmovss        (%r9,%rax,4),%xmm10
  .byte  196,65,249,126,194                  // vmovq         %xmm8,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,28,153                 // vmovss        (%r9,%r11,4),%xmm11
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,122,16,28,129               // vmovss        (%r9,%rax,4),%xmm3
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,3,97,33,4,145,16                // vinsertps     $0x10,(%r9,%r10,4),%xmm3,%xmm8
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,65,122,16,36,129                // vmovss        (%r9,%rax,4),%xmm12
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,1,122,16,44,153                 // vmovss        (%r9,%r11,4),%xmm13
  .byte  196,195,49,33,218,32                // vinsertps     $0x20,%xmm10,%xmm9,%xmm3
  .byte  196,67,97,33,203,48                 // vinsertps     $0x30,%xmm11,%xmm3,%xmm9
  .byte  196,195,57,33,220,32                // vinsertps     $0x20,%xmm12,%xmm8,%xmm3
  .byte  196,195,97,33,221,48                // vinsertps     $0x30,%xmm13,%xmm3,%xmm3
  .byte  196,195,101,24,217,1                // vinsertf128   $0x1,%xmm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_avx
.globl _sk_parametric_r_avx
FUNCTION(_sk_parametric_r_avx)
_sk_parametric_r_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,124,194,192,2                // vcmpleps      %ymm8,%ymm0,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,216                      // vcvtdq2ps     %ymm0,%ymm11
  .byte  196,98,125,24,37,154,57,0,0         // vbroadcastss  0x399a(%rip),%ymm12        # 6950 <_sk_callback_avx+0x296>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,144,57,0,0         // vbroadcastss  0x3990(%rip),%ymm12        # 6954 <_sk_callback_avx+0x29a>
  .byte  196,193,124,84,196                  // vandps        %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,134,57,0,0         // vbroadcastss  0x3986(%rip),%ymm12        # 6958 <_sk_callback_avx+0x29e>
  .byte  196,193,124,86,196                  // vorps         %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,124,57,0,0         // vbroadcastss  0x397c(%rip),%ymm12        # 695c <_sk_callback_avx+0x2a2>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,114,57,0,0         // vbroadcastss  0x3972(%rip),%ymm12        # 6960 <_sk_callback_avx+0x2a6>
  .byte  196,65,124,89,228                   // vmulps        %ymm12,%ymm0,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,99,57,0,0          // vbroadcastss  0x3963(%rip),%ymm12        # 6964 <_sk_callback_avx+0x2aa>
  .byte  196,193,124,88,196                  // vaddps        %ymm12,%ymm0,%ymm0
  .byte  196,98,125,24,37,89,57,0,0          // vbroadcastss  0x3959(%rip),%ymm12        # 6968 <_sk_callback_avx+0x2ae>
  .byte  197,156,94,192                      // vdivps        %ymm0,%ymm12,%ymm0
  .byte  197,164,92,192                      // vsubps        %ymm0,%ymm11,%ymm0
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  196,99,125,8,208,1                  // vroundps      $0x1,%ymm0,%ymm10
  .byte  196,65,124,92,210                   // vsubps        %ymm10,%ymm0,%ymm10
  .byte  196,98,125,24,29,61,57,0,0          // vbroadcastss  0x393d(%rip),%ymm11        # 696c <_sk_callback_avx+0x2b2>
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,51,57,0,0          // vbroadcastss  0x3933(%rip),%ymm11        # 6970 <_sk_callback_avx+0x2b6>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,124,92,195                  // vsubps        %ymm11,%ymm0,%ymm0
  .byte  196,98,125,24,29,36,57,0,0          // vbroadcastss  0x3924(%rip),%ymm11        # 6974 <_sk_callback_avx+0x2ba>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,26,57,0,0          // vbroadcastss  0x391a(%rip),%ymm11        # 6978 <_sk_callback_avx+0x2be>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,98,125,24,21,11,57,0,0          // vbroadcastss  0x390b(%rip),%ymm10        # 697c <_sk_callback_avx+0x2c2>
  .byte  196,193,124,89,194                  // vmulps        %ymm10,%ymm0,%ymm0
  .byte  197,253,91,192                      // vcvtps2dq     %ymm0,%ymm0
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,124,88,194                  // vaddps        %ymm10,%ymm0,%ymm0
  .byte  196,195,125,74,193,128              // vblendvps     %ymm8,%ymm9,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,124,95,192                  // vmaxps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,226,56,0,0          // vbroadcastss  0x38e2(%rip),%ymm8        # 6980 <_sk_callback_avx+0x2c6>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_avx
.globl _sk_parametric_g_avx
FUNCTION(_sk_parametric_g_avx)
_sk_parametric_g_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,116,194,192,2                // vcmpleps      %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,217                      // vcvtdq2ps     %ymm1,%ymm11
  .byte  196,98,125,24,37,147,56,0,0         // vbroadcastss  0x3893(%rip),%ymm12        # 6984 <_sk_callback_avx+0x2ca>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,137,56,0,0         // vbroadcastss  0x3889(%rip),%ymm12        # 6988 <_sk_callback_avx+0x2ce>
  .byte  196,193,116,84,204                  // vandps        %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,127,56,0,0         // vbroadcastss  0x387f(%rip),%ymm12        # 698c <_sk_callback_avx+0x2d2>
  .byte  196,193,116,86,204                  // vorps         %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,117,56,0,0         // vbroadcastss  0x3875(%rip),%ymm12        # 6990 <_sk_callback_avx+0x2d6>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,107,56,0,0         // vbroadcastss  0x386b(%rip),%ymm12        # 6994 <_sk_callback_avx+0x2da>
  .byte  196,65,116,89,228                   // vmulps        %ymm12,%ymm1,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,92,56,0,0          // vbroadcastss  0x385c(%rip),%ymm12        # 6998 <_sk_callback_avx+0x2de>
  .byte  196,193,116,88,204                  // vaddps        %ymm12,%ymm1,%ymm1
  .byte  196,98,125,24,37,82,56,0,0          // vbroadcastss  0x3852(%rip),%ymm12        # 699c <_sk_callback_avx+0x2e2>
  .byte  197,156,94,201                      // vdivps        %ymm1,%ymm12,%ymm1
  .byte  197,164,92,201                      // vsubps        %ymm1,%ymm11,%ymm1
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,99,125,8,209,1                  // vroundps      $0x1,%ymm1,%ymm10
  .byte  196,65,116,92,210                   // vsubps        %ymm10,%ymm1,%ymm10
  .byte  196,98,125,24,29,54,56,0,0          // vbroadcastss  0x3836(%rip),%ymm11        # 69a0 <_sk_callback_avx+0x2e6>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,44,56,0,0          // vbroadcastss  0x382c(%rip),%ymm11        # 69a4 <_sk_callback_avx+0x2ea>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,116,92,203                  // vsubps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,29,29,56,0,0          // vbroadcastss  0x381d(%rip),%ymm11        # 69a8 <_sk_callback_avx+0x2ee>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,19,56,0,0          // vbroadcastss  0x3813(%rip),%ymm11        # 69ac <_sk_callback_avx+0x2f2>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,98,125,24,21,4,56,0,0           // vbroadcastss  0x3804(%rip),%ymm10        # 69b0 <_sk_callback_avx+0x2f6>
  .byte  196,193,116,89,202                  // vmulps        %ymm10,%ymm1,%ymm1
  .byte  197,253,91,201                      // vcvtps2dq     %ymm1,%ymm1
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,116,88,202                  // vaddps        %ymm10,%ymm1,%ymm1
  .byte  196,195,117,74,201,128              // vblendvps     %ymm8,%ymm9,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,116,95,200                  // vmaxps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,5,219,55,0,0          // vbroadcastss  0x37db(%rip),%ymm8        # 69b4 <_sk_callback_avx+0x2fa>
  .byte  196,193,116,93,200                  // vminps        %ymm8,%ymm1,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_avx
.globl _sk_parametric_b_avx
FUNCTION(_sk_parametric_b_avx)
_sk_parametric_b_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,108,194,192,2                // vcmpleps      %ymm8,%ymm2,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,202                       // vmulps        %ymm2,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,218                      // vcvtdq2ps     %ymm2,%ymm11
  .byte  196,98,125,24,37,140,55,0,0         // vbroadcastss  0x378c(%rip),%ymm12        # 69b8 <_sk_callback_avx+0x2fe>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,130,55,0,0         // vbroadcastss  0x3782(%rip),%ymm12        # 69bc <_sk_callback_avx+0x302>
  .byte  196,193,108,84,212                  // vandps        %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,120,55,0,0         // vbroadcastss  0x3778(%rip),%ymm12        # 69c0 <_sk_callback_avx+0x306>
  .byte  196,193,108,86,212                  // vorps         %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,110,55,0,0         // vbroadcastss  0x376e(%rip),%ymm12        # 69c4 <_sk_callback_avx+0x30a>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,100,55,0,0         // vbroadcastss  0x3764(%rip),%ymm12        # 69c8 <_sk_callback_avx+0x30e>
  .byte  196,65,108,89,228                   // vmulps        %ymm12,%ymm2,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,85,55,0,0          // vbroadcastss  0x3755(%rip),%ymm12        # 69cc <_sk_callback_avx+0x312>
  .byte  196,193,108,88,212                  // vaddps        %ymm12,%ymm2,%ymm2
  .byte  196,98,125,24,37,75,55,0,0          // vbroadcastss  0x374b(%rip),%ymm12        # 69d0 <_sk_callback_avx+0x316>
  .byte  197,156,94,210                      // vdivps        %ymm2,%ymm12,%ymm2
  .byte  197,164,92,210                      // vsubps        %ymm2,%ymm11,%ymm2
  .byte  197,172,89,210                      // vmulps        %ymm2,%ymm10,%ymm2
  .byte  196,99,125,8,210,1                  // vroundps      $0x1,%ymm2,%ymm10
  .byte  196,65,108,92,210                   // vsubps        %ymm10,%ymm2,%ymm10
  .byte  196,98,125,24,29,47,55,0,0          // vbroadcastss  0x372f(%rip),%ymm11        # 69d4 <_sk_callback_avx+0x31a>
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,37,55,0,0          // vbroadcastss  0x3725(%rip),%ymm11        # 69d8 <_sk_callback_avx+0x31e>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,108,92,211                  // vsubps        %ymm11,%ymm2,%ymm2
  .byte  196,98,125,24,29,22,55,0,0          // vbroadcastss  0x3716(%rip),%ymm11        # 69dc <_sk_callback_avx+0x322>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,12,55,0,0          // vbroadcastss  0x370c(%rip),%ymm11        # 69e0 <_sk_callback_avx+0x326>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,98,125,24,21,253,54,0,0         // vbroadcastss  0x36fd(%rip),%ymm10        # 69e4 <_sk_callback_avx+0x32a>
  .byte  196,193,108,89,210                  // vmulps        %ymm10,%ymm2,%ymm2
  .byte  197,253,91,210                      // vcvtps2dq     %ymm2,%ymm2
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,108,88,210                  // vaddps        %ymm10,%ymm2,%ymm2
  .byte  196,195,109,74,209,128              // vblendvps     %ymm8,%ymm9,%ymm2,%ymm2
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,108,95,208                  // vmaxps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,212,54,0,0          // vbroadcastss  0x36d4(%rip),%ymm8        # 69e8 <_sk_callback_avx+0x32e>
  .byte  196,193,108,93,208                  // vminps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_avx
.globl _sk_parametric_a_avx
FUNCTION(_sk_parametric_a_avx)
_sk_parametric_a_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,16                 // vbroadcastss  0x10(%rax),%ymm8
  .byte  196,65,100,194,192,2                // vcmpleps      %ymm8,%ymm3,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  197,52,89,203                       // vmulps        %ymm3,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,4                  // vbroadcastss  0x4(%rax),%ymm10
  .byte  196,98,125,24,88,8                  // vbroadcastss  0x8(%rax),%ymm11
  .byte  197,172,89,219                      // vmulps        %ymm3,%ymm10,%ymm3
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,16                    // vbroadcastss  (%rax),%ymm10
  .byte  197,124,91,219                      // vcvtdq2ps     %ymm3,%ymm11
  .byte  196,98,125,24,37,133,54,0,0         // vbroadcastss  0x3685(%rip),%ymm12        # 69ec <_sk_callback_avx+0x332>
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,123,54,0,0         // vbroadcastss  0x367b(%rip),%ymm12        # 69f0 <_sk_callback_avx+0x336>
  .byte  196,193,100,84,220                  // vandps        %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,113,54,0,0         // vbroadcastss  0x3671(%rip),%ymm12        # 69f4 <_sk_callback_avx+0x33a>
  .byte  196,193,100,86,220                  // vorps         %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,103,54,0,0         // vbroadcastss  0x3667(%rip),%ymm12        # 69f8 <_sk_callback_avx+0x33e>
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,93,54,0,0          // vbroadcastss  0x365d(%rip),%ymm12        # 69fc <_sk_callback_avx+0x342>
  .byte  196,65,100,89,228                   // vmulps        %ymm12,%ymm3,%ymm12
  .byte  196,65,36,92,220                    // vsubps        %ymm12,%ymm11,%ymm11
  .byte  196,98,125,24,37,78,54,0,0          // vbroadcastss  0x364e(%rip),%ymm12        # 6a00 <_sk_callback_avx+0x346>
  .byte  196,193,100,88,220                  // vaddps        %ymm12,%ymm3,%ymm3
  .byte  196,98,125,24,37,68,54,0,0          // vbroadcastss  0x3644(%rip),%ymm12        # 6a04 <_sk_callback_avx+0x34a>
  .byte  197,156,94,219                      // vdivps        %ymm3,%ymm12,%ymm3
  .byte  197,164,92,219                      // vsubps        %ymm3,%ymm11,%ymm3
  .byte  197,172,89,219                      // vmulps        %ymm3,%ymm10,%ymm3
  .byte  196,99,125,8,211,1                  // vroundps      $0x1,%ymm3,%ymm10
  .byte  196,65,100,92,210                   // vsubps        %ymm10,%ymm3,%ymm10
  .byte  196,98,125,24,29,40,54,0,0          // vbroadcastss  0x3628(%rip),%ymm11        # 6a08 <_sk_callback_avx+0x34e>
  .byte  196,193,100,88,219                  // vaddps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,30,54,0,0          // vbroadcastss  0x361e(%rip),%ymm11        # 6a0c <_sk_callback_avx+0x352>
  .byte  196,65,44,89,219                    // vmulps        %ymm11,%ymm10,%ymm11
  .byte  196,193,100,92,219                  // vsubps        %ymm11,%ymm3,%ymm3
  .byte  196,98,125,24,29,15,54,0,0          // vbroadcastss  0x360f(%rip),%ymm11        # 6a10 <_sk_callback_avx+0x356>
  .byte  196,65,36,92,210                    // vsubps        %ymm10,%ymm11,%ymm10
  .byte  196,98,125,24,29,5,54,0,0           // vbroadcastss  0x3605(%rip),%ymm11        # 6a14 <_sk_callback_avx+0x35a>
  .byte  196,65,36,94,210                    // vdivps        %ymm10,%ymm11,%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,98,125,24,21,246,53,0,0         // vbroadcastss  0x35f6(%rip),%ymm10        # 6a18 <_sk_callback_avx+0x35e>
  .byte  196,193,100,89,218                  // vmulps        %ymm10,%ymm3,%ymm3
  .byte  197,253,91,219                      // vcvtps2dq     %ymm3,%ymm3
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  196,195,101,74,217,128              // vblendvps     %ymm8,%ymm9,%ymm3,%ymm3
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  196,193,100,95,216                  // vmaxps        %ymm8,%ymm3,%ymm3
  .byte  196,98,125,24,5,205,53,0,0          // vbroadcastss  0x35cd(%rip),%ymm8        # 6a1c <_sk_callback_avx+0x362>
  .byte  196,193,100,93,216                  // vminps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_avx
.globl _sk_lab_to_xyz_avx
FUNCTION(_sk_lab_to_xyz_avx)
_sk_lab_to_xyz_avx:
  .byte  196,98,125,24,5,191,53,0,0          // vbroadcastss  0x35bf(%rip),%ymm8        # 6a20 <_sk_callback_avx+0x366>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,181,53,0,0          // vbroadcastss  0x35b5(%rip),%ymm8        # 6a24 <_sk_callback_avx+0x36a>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  196,98,125,24,13,171,53,0,0         // vbroadcastss  0x35ab(%rip),%ymm9        # 6a28 <_sk_callback_avx+0x36e>
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,193,108,88,209                  // vaddps        %ymm9,%ymm2,%ymm2
  .byte  196,98,125,24,5,151,53,0,0          // vbroadcastss  0x3597(%rip),%ymm8        # 6a2c <_sk_callback_avx+0x372>
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,141,53,0,0          // vbroadcastss  0x358d(%rip),%ymm8        # 6a30 <_sk_callback_avx+0x376>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,5,131,53,0,0          // vbroadcastss  0x3583(%rip),%ymm8        # 6a34 <_sk_callback_avx+0x37a>
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,252,88,201                      // vaddps        %ymm1,%ymm0,%ymm1
  .byte  196,98,125,24,5,117,53,0,0          // vbroadcastss  0x3575(%rip),%ymm8        # 6a38 <_sk_callback_avx+0x37e>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,252,92,210                      // vsubps        %ymm2,%ymm0,%ymm2
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,65,116,89,192                   // vmulps        %ymm8,%ymm1,%ymm8
  .byte  196,98,125,24,13,94,53,0,0          // vbroadcastss  0x355e(%rip),%ymm9        # 6a3c <_sk_callback_avx+0x382>
  .byte  196,65,52,194,208,1                 // vcmpltps      %ymm8,%ymm9,%ymm10
  .byte  196,98,125,24,29,83,53,0,0          // vbroadcastss  0x3553(%rip),%ymm11        # 6a40 <_sk_callback_avx+0x386>
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  196,98,125,24,37,73,53,0,0          // vbroadcastss  0x3549(%rip),%ymm12        # 6a44 <_sk_callback_avx+0x38a>
  .byte  196,193,116,89,204                  // vmulps        %ymm12,%ymm1,%ymm1
  .byte  196,67,117,74,192,160               // vblendvps     %ymm10,%ymm8,%ymm1,%ymm8
  .byte  197,252,89,200                      // vmulps        %ymm0,%ymm0,%ymm1
  .byte  197,252,89,201                      // vmulps        %ymm1,%ymm0,%ymm1
  .byte  197,52,194,209,1                    // vcmpltps      %ymm1,%ymm9,%ymm10
  .byte  196,193,124,88,195                  // vaddps        %ymm11,%ymm0,%ymm0
  .byte  196,193,124,89,196                  // vmulps        %ymm12,%ymm0,%ymm0
  .byte  196,227,125,74,201,160              // vblendvps     %ymm10,%ymm1,%ymm0,%ymm1
  .byte  197,236,89,194                      // vmulps        %ymm2,%ymm2,%ymm0
  .byte  197,236,89,192                      // vmulps        %ymm0,%ymm2,%ymm0
  .byte  197,52,194,200,1                    // vcmpltps      %ymm0,%ymm9,%ymm9
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  196,193,108,89,212                  // vmulps        %ymm12,%ymm2,%ymm2
  .byte  196,227,109,74,208,144              // vblendvps     %ymm9,%ymm0,%ymm2,%ymm2
  .byte  196,226,125,24,5,255,52,0,0         // vbroadcastss  0x34ff(%rip),%ymm0        # 6a48 <_sk_callback_avx+0x38e>
  .byte  197,188,89,192                      // vmulps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,246,52,0,0          // vbroadcastss  0x34f6(%rip),%ymm8        # 6a4c <_sk_callback_avx+0x392>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_avx
.globl _sk_load_a8_avx
FUNCTION(_sk_load_a8_avx)
_sk_load_a8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           35ab <_sk_load_a8_avx+0x4c>
  .byte  196,194,121,48,4,19                 // vpmovzxbw     (%r11,%rdx,1),%xmm0
  .byte  197,249,219,5,73,55,0,0             // vpand         0x3749(%rip),%xmm0,%xmm0        # 6cc0 <_sk_callback_avx+0x606>
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,185,52,0,0        // vbroadcastss  0x34b9(%rip),%ymm1        # 6a50 <_sk_callback_avx+0x396>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,176                             // ja            356f <_sk_load_a8_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,94,0,0,0                  // lea           0x5e(%rip),%r10        # 3628 <_sk_load_a8_avx+0xc9>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  197,249,196,192,3                   // vpinsrw       $0x3,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,249,196,192,2                   // vpinsrw       $0x2,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  197,249,196,192,1                   // vpinsrw       $0x1,%eax,%xmm0,%xmm0
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,196,192,0                   // vpinsrw       $0x0,%eax,%xmm0,%xmm0
  .byte  233,71,255,255,255                  // jmpq          356f <_sk_load_a8_avx+0x10>
  .byte  241                                 // icebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  219,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  186,255,255,255,171                 // mov           $0xabffffff,%edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_a8_avx
.globl _sk_gather_a8_avx
FUNCTION(_sk_gather_a8_avx)
_sk_gather_a8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,20,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,2                // vpinsrb       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,20,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,121,32,192,2                // vpinsrb       $0x2,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,227,121,32,192,3                // vpinsrb       $0x3,%eax,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,68,51,0,0         // vbroadcastss  0x3344(%rip),%ymm1        # 6a54 <_sk_callback_avx+0x39a>
  .byte  197,252,89,217                      // vmulps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_avx
.globl _sk_store_a8_avx
FUNCTION(_sk_store_a8_avx)
_sk_store_a8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,38,51,0,0           // vbroadcastss  0x3326(%rip),%ymm8        # 6a58 <_sk_callback_avx+0x39e>
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  196,65,57,103,192                   // vpackuswb     %xmm8,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           375b <_sk_store_a8_avx+0x37>
  .byte  196,65,123,17,4,19                  // vmovsd        %xmm8,(%r11,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            3757 <_sk_store_a8_avx+0x33>
  .byte  196,66,121,48,192                   // vpmovzxbw     %xmm8,%xmm8
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,69,0,0,0                  // lea           0x45(%rip),%r10        # 37c0 <_sk_store_a8_avx+0x9c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,20,68,19,6,12            // vpextrb       $0xc,%xmm8,0x6(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,5,10            // vpextrb       $0xa,%xmm8,0x5(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,4,8             // vpextrb       $0x8,%xmm8,0x4(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,3,6             // vpextrb       $0x6,%xmm8,0x3(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,2,4             // vpextrb       $0x4,%xmm8,0x2(%r11,%rdx,1)
  .byte  196,67,121,20,68,19,1,2             // vpextrb       $0x2,%xmm8,0x1(%r11,%rdx,1)
  .byte  196,67,121,20,4,19,0                // vpextrb       $0x0,%xmm8,(%r11,%rdx,1)
  .byte  235,154                             // jmp           3757 <_sk_store_a8_avx+0x33>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  244                                 // hlt
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  236                                 // in            (%dx),%al
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,212                             // callq         *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,196                             // inc           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_avx
.globl _sk_load_g8_avx
FUNCTION(_sk_load_g8_avx)
_sk_load_g8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,71                              // jne           382d <_sk_load_g8_avx+0x51>
  .byte  196,194,121,48,4,19                 // vpmovzxbw     (%r11,%rdx,1),%xmm0
  .byte  197,249,219,5,220,52,0,0            // vpand         0x34dc(%rip),%xmm0,%xmm0        # 6cd0 <_sk_callback_avx+0x616>
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,72,50,0,0         // vbroadcastss  0x3248(%rip),%ymm1        # 6a5c <_sk_callback_avx+0x3a2>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,61,50,0,0         // vbroadcastss  0x323d(%rip),%ymm3        # 6a60 <_sk_callback_avx+0x3a6>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,171                             // ja            37ec <_sk_load_g8_avx+0x10>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,96,0,0,0                  // lea           0x60(%rip),%r10        # 38ac <_sk_load_g8_avx+0xd0>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  197,249,196,192,5                   // vpinsrw       $0x5,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  197,249,196,192,4                   // vpinsrw       $0x4,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  197,249,196,192,3                   // vpinsrw       $0x3,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  197,249,196,192,2                   // vpinsrw       $0x2,%eax,%xmm0,%xmm0
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  197,249,196,192,1                   // vpinsrw       $0x1,%eax,%xmm0,%xmm0
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  197,249,196,192,0                   // vpinsrw       $0x0,%eax,%xmm0,%xmm0
  .byte  233,66,255,255,255                  // jmpq          37ec <_sk_load_g8_avx+0x10>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  239                                 // out           %eax,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  217,255                             // fcos
  .byte  255                                 // (bad)
  .byte  255,206                             // dec           %esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,195                             // inc           %ebx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  184,255,255,255,169                 // mov           $0xa9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_g8_avx
.globl _sk_gather_g8_avx
FUNCTION(_sk_gather_g8_avx)
_sk_gather_g8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,20,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,12,17,1              // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,113,32,200,2                // vpinsrb       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,227,113,32,200,3                // vpinsrb       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,32,20,1,0               // vpinsrb       $0x0,(%r9,%rax,1),%xmm0,%xmm2
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,32,4,17,1               // vpinsrb       $0x1,(%r9,%r10,1),%xmm2,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  196,227,121,32,192,2                // vpinsrb       $0x2,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,182,4,25                      // movzbl        (%r9,%r11,1),%eax
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,227,121,32,192,3                // vpinsrb       $0x3,%eax,%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,208,48,0,0        // vbroadcastss  0x30d0(%rip),%ymm1        # 6a64 <_sk_callback_avx+0x3aa>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,197,48,0,0        // vbroadcastss  0x30c5(%rip),%ymm3        # 6a68 <_sk_callback_avx+0x3ae>
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_avx
.globl _sk_gather_i8_avx
FUNCTION(_sk_gather_i8_avx)
_sk_gather_i8_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,193                          // mov           %rax,%r9
  .byte  77,133,201                          // test          %r9,%r9
  .byte  116,5                               // je            39bc <_sk_gather_i8_avx+0xf>
  .byte  76,137,200                          // mov           %r9,%rax
  .byte  235,2                               // jmp           39be <_sk_gather_i8_avx+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  83                                  // push          %rbx
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  197,254,91,209                      // vcvttps2dq    %ymm1,%ymm2
  .byte  197,249,110,72,16                   // vmovd         0x10(%rax),%xmm1
  .byte  197,249,112,217,0                   // vpshufd       $0x0,%xmm1,%xmm3
  .byte  196,226,97,64,202                   // vpmulld       %xmm2,%xmm3,%xmm1
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  196,226,97,64,210                   // vpmulld       %xmm2,%xmm3,%xmm2
  .byte  197,254,91,192                      // vcvttps2dq    %ymm0,%ymm0
  .byte  196,227,125,25,195,1                // vextractf128  $0x1,%ymm0,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,193,249,126,211                 // vmovq         %xmm2,%r11
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,121,32,28,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm3
  .byte  196,227,249,22,208,1                // vpextrq       $0x1,%xmm2,%rax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,131,97,32,20,26,1               // vpinsrb       $0x1,(%r10,%r11,1),%xmm3,%xmm2
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  196,131,105,32,12,26,2              // vpinsrb       $0x2,(%r10,%r11,1),%xmm2,%xmm1
  .byte  196,193,249,126,195                 // vmovq         %xmm0,%r11
  .byte  196,195,113,32,12,2,3               // vpinsrb       $0x3,(%r10,%rax,1),%xmm1,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,121,32,20,2,0               // vpinsrb       $0x0,(%r10,%rax,1),%xmm0,%xmm2
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,131,105,32,4,26,1               // vpinsrb       $0x1,(%r10,%r11,1),%xmm2,%xmm0
  .byte  137,216                             // mov           %ebx,%eax
  .byte  196,195,121,32,4,2,2                // vpinsrb       $0x2,(%r10,%rax,1),%xmm0,%xmm0
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,226,121,49,201                  // vpmovzxbd     %xmm1,%xmm1
  .byte  196,195,121,32,4,26,3               // vpinsrb       $0x3,(%r10,%rbx,1),%xmm0,%xmm0
  .byte  196,226,121,49,192                  // vpmovzxbd     %xmm0,%xmm0
  .byte  77,139,89,8                         // mov           0x8(%r9),%r11
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  69,137,209                          // mov           %r10d,%r9d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  196,129,121,110,20,139              // vmovd         (%r11,%r9,4),%xmm2
  .byte  196,227,249,22,195,1                // vpextrq       $0x1,%xmm0,%rbx
  .byte  196,131,105,34,4,19,1               // vpinsrd       $0x1,(%r11,%r10,1),%xmm2,%xmm0
  .byte  137,216                             // mov           %ebx,%eax
  .byte  196,195,121,34,4,131,2              // vpinsrd       $0x2,(%r11,%rax,4),%xmm0,%xmm0
  .byte  196,225,249,126,200                 // vmovq         %xmm1,%rax
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  196,67,121,34,4,27,3                // vpinsrd       $0x3,(%r11,%rbx,1),%xmm0,%xmm8
  .byte  137,195                             // mov           %eax,%ebx
  .byte  196,193,121,110,4,155               // vmovd         (%r11,%rbx,4),%xmm0
  .byte  196,227,249,22,203,1                // vpextrq       $0x1,%xmm1,%rbx
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  196,195,121,34,4,3,1                // vpinsrd       $0x1,(%r11,%rax,1),%xmm0,%xmm0
  .byte  137,216                             // mov           %ebx,%eax
  .byte  196,195,121,34,4,131,2              // vpinsrd       $0x2,(%r11,%rax,4),%xmm0,%xmm0
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  196,195,121,34,28,27,3              // vpinsrd       $0x3,(%r11,%rbx,1),%xmm0,%xmm3
  .byte  196,227,61,24,195,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm0
  .byte  197,124,40,21,132,50,0,0            // vmovaps       0x3284(%rip),%ymm10        # 6d60 <_sk_callback_avx+0x6a6>
  .byte  196,193,124,84,194                  // vandps        %ymm10,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,126,47,0,0         // vbroadcastss  0x2f7e(%rip),%ymm9        # 6a6c <_sk_callback_avx+0x3b2>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,193,113,114,208,8               // vpsrld        $0x8,%xmm8,%xmm1
  .byte  197,233,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,193,33,114,208,16               // vpsrld        $0x10,%xmm8,%xmm11
  .byte  197,233,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,193,57,114,208,24               // vpsrld        $0x18,%xmm8,%xmm8
  .byte  197,225,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_avx
.globl _sk_load_565_avx
FUNCTION(_sk_load_565_avx)
_sk_load_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,128,0,0,0                    // jne           3bde <_sk_load_565_avx+0x8e>
  .byte  196,193,122,111,4,83                // vmovdqu       (%r11,%rdx,2),%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm2
  .byte  196,226,125,24,5,240,46,0,0         // vbroadcastss  0x2ef0(%rip),%ymm0        # 6a70 <_sk_callback_avx+0x3b6>
  .byte  197,236,84,192                      // vandps        %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,227,46,0,0        // vbroadcastss  0x2ee3(%rip),%ymm1        # 6a74 <_sk_callback_avx+0x3ba>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,218,46,0,0        // vbroadcastss  0x2eda(%rip),%ymm1        # 6a78 <_sk_callback_avx+0x3be>
  .byte  197,236,84,201                      // vandps        %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,205,46,0,0        // vbroadcastss  0x2ecd(%rip),%ymm3        # 6a7c <_sk_callback_avx+0x3c2>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,24,29,196,46,0,0        // vbroadcastss  0x2ec4(%rip),%ymm3        # 6a80 <_sk_callback_avx+0x3c6>
  .byte  197,236,84,211                      // vandps        %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,183,46,0,0        // vbroadcastss  0x2eb7(%rip),%ymm3        # 6a84 <_sk_callback_avx+0x3ca>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,172,46,0,0        // vbroadcastss  0x2eac(%rip),%ymm3        # 6a88 <_sk_callback_avx+0x3ce>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,110,255,255,255              // ja            3b64 <_sk_load_565_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,75,0,0,0                  // lea           0x4b(%rip),%r10        # 3c4c <_sk_load_565_avx+0xfc>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,6,3           // vpinsrw       $0x3,0x6(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,2,1           // vpinsrw       $0x1,0x2(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,4,83,0              // vpinsrw       $0x0,(%r11,%rdx,2),%xmm0,%xmm0
  .byte  233,26,255,255,255                  // jmpq          3b64 <_sk_load_565_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  242,255                             // repnz         (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,226                             // jmpq          *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  218,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,210                             // callq         *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190                                 // .byte         0xbe
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_565_avx
.globl _sk_gather_565_avx
FUNCTION(_sk_gather_565_avx)
_sk_gather_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,110,208                     // vmovd         %eax,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,233,196,200,1                   // vpinsrw       $0x1,%eax,%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,2                   // vpinsrw       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,241,196,200,3                   // vpinsrw       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,4                   // vpinsrw       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,192,5                   // vpinsrw       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm2
  .byte  196,226,125,24,5,82,45,0,0          // vbroadcastss  0x2d52(%rip),%ymm0        # 6a8c <_sk_callback_avx+0x3d2>
  .byte  197,236,84,192                      // vandps        %ymm0,%ymm2,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,69,45,0,0         // vbroadcastss  0x2d45(%rip),%ymm1        # 6a90 <_sk_callback_avx+0x3d6>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,60,45,0,0         // vbroadcastss  0x2d3c(%rip),%ymm1        # 6a94 <_sk_callback_avx+0x3da>
  .byte  197,236,84,201                      // vandps        %ymm1,%ymm2,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,29,47,45,0,0         // vbroadcastss  0x2d2f(%rip),%ymm3        # 6a98 <_sk_callback_avx+0x3de>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  196,226,125,24,29,38,45,0,0         // vbroadcastss  0x2d26(%rip),%ymm3        # 6a9c <_sk_callback_avx+0x3e2>
  .byte  197,236,84,211                      // vandps        %ymm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,226,125,24,29,25,45,0,0         // vbroadcastss  0x2d19(%rip),%ymm3        # 6aa0 <_sk_callback_avx+0x3e6>
  .byte  197,236,89,211                      // vmulps        %ymm3,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,14,45,0,0         // vbroadcastss  0x2d0e(%rip),%ymm3        # 6aa4 <_sk_callback_avx+0x3ea>
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_avx
.globl _sk_store_565_avx
FUNCTION(_sk_store_565_avx)
_sk_store_565_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,2,45,0,0            // vbroadcastss  0x2d02(%rip),%ymm8        # 6aa8 <_sk_callback_avx+0x3ee>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,41,114,241,11               // vpslld        $0xb,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,11               // vpslld        $0xb,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,98,125,24,21,219,44,0,0         // vbroadcastss  0x2cdb(%rip),%ymm10        # 6aac <_sk_callback_avx+0x3f2>
  .byte  196,65,116,89,210                   // vmulps        %ymm10,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,5                // vpslld        $0x5,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,5                // vpslld        $0x5,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,192                   // vmulps        %ymm8,%ymm2,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3e21 <_sk_store_565_avx+0x89>
  .byte  196,65,122,127,4,83                 // vmovdqu       %xmm8,(%r11,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            3e1d <_sk_store_565_avx+0x85>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,68,0,0,0                  // lea           0x44(%rip),%r10        # 3e80 <_sk_store_565_avx+0xe8>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,68,83,12,6            // vpextrw       $0x6,%xmm8,0xc(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,10,5            // vpextrw       $0x5,%xmm8,0xa(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,8,4             // vpextrw       $0x4,%xmm8,0x8(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,6,3             // vpextrw       $0x3,%xmm8,0x6(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,4,2             // vpextrw       $0x2,%xmm8,0x4(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,2,1             // vpextrw       $0x1,%xmm8,0x2(%r11,%rdx,2)
  .byte  196,67,121,21,4,83,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,2)
  .byte  235,159                             // jmp           3e1d <_sk_store_565_avx+0x85>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  245                                 // cmc
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  237                                 // in            (%dx),%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,229                             // jmpq          *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,213                             // callq         *%rbp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_4444_avx
.globl _sk_load_4444_avx
FUNCTION(_sk_load_4444_avx)
_sk_load_4444_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,152,0,0,0                    // jne           3f42 <_sk_load_4444_avx+0xa6>
  .byte  196,193,122,111,4,83                // vmovdqu       (%r11,%rdx,2),%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm3
  .byte  196,226,125,24,5,228,43,0,0         // vbroadcastss  0x2be4(%rip),%ymm0        # 6ab0 <_sk_callback_avx+0x3f6>
  .byte  197,228,84,192                      // vandps        %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,215,43,0,0        // vbroadcastss  0x2bd7(%rip),%ymm1        # 6ab4 <_sk_callback_avx+0x3fa>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,206,43,0,0        // vbroadcastss  0x2bce(%rip),%ymm1        # 6ab8 <_sk_callback_avx+0x3fe>
  .byte  197,228,84,201                      // vandps        %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,193,43,0,0        // vbroadcastss  0x2bc1(%rip),%ymm2        # 6abc <_sk_callback_avx+0x402>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,184,43,0,0        // vbroadcastss  0x2bb8(%rip),%ymm2        # 6ac0 <_sk_callback_avx+0x406>
  .byte  197,228,84,210                      // vandps        %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,171,43,0,0          // vbroadcastss  0x2bab(%rip),%ymm8        # 6ac4 <_sk_callback_avx+0x40a>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,161,43,0,0          // vbroadcastss  0x2ba1(%rip),%ymm8        # 6ac8 <_sk_callback_avx+0x40e>
  .byte  196,193,100,84,216                  // vandps        %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,147,43,0,0          // vbroadcastss  0x2b93(%rip),%ymm8        # 6acc <_sk_callback_avx+0x412>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,86,255,255,255               // ja            3eb0 <_sk_load_4444_avx+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,75,0,0,0                  // lea           0x4b(%rip),%r10        # 3fb0 <_sk_load_4444_avx+0x114>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  197,249,239,192                     // vpxor         %xmm0,%xmm0,%xmm0
  .byte  196,193,121,196,68,83,12,6          // vpinsrw       $0x6,0xc(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,10,5          // vpinsrw       $0x5,0xa(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,8,4           // vpinsrw       $0x4,0x8(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,6,3           // vpinsrw       $0x3,0x6(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,4,2           // vpinsrw       $0x2,0x4(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,68,83,2,1           // vpinsrw       $0x1,0x2(%r11,%rdx,2),%xmm0,%xmm0
  .byte  196,193,121,196,4,83,0              // vpinsrw       $0x0,(%r11,%rdx,2),%xmm0,%xmm0
  .byte  233,2,255,255,255                   // jmpq          3eb0 <_sk_load_4444_avx+0x14>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  242,255                             // repnz         (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,226                             // jmpq          *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  218,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,210                             // callq         *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190                                 // .byte         0xbe
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_gather_4444_avx
.globl _sk_gather_4444_avx
FUNCTION(_sk_gather_4444_avx)
_sk_gather_4444_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,110,208                     // vmovd         %eax,%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,233,196,200,1                   // vpinsrw       $0x1,%eax,%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,2                   // vpinsrw       $0x2,%eax,%xmm1,%xmm1
  .byte  196,193,249,126,194                 // vmovq         %xmm0,%r10
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,241,196,200,3                   // vpinsrw       $0x3,%eax,%xmm1,%xmm1
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,241,196,200,4                   // vpinsrw       $0x4,%eax,%xmm1,%xmm1
  .byte  196,195,249,22,195,1                // vpextrq       $0x1,%xmm0,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  67,15,183,4,81                      // movzwl        (%r9,%r10,2),%eax
  .byte  197,241,196,192,5                   // vpinsrw       $0x5,%eax,%xmm1,%xmm0
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  197,249,196,192,6                   // vpinsrw       $0x6,%eax,%xmm0,%xmm0
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  67,15,183,4,89                      // movzwl        (%r9,%r11,2),%eax
  .byte  197,249,196,192,7                   // vpinsrw       $0x7,%eax,%xmm0,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm3
  .byte  196,226,125,24,5,50,42,0,0          // vbroadcastss  0x2a32(%rip),%ymm0        # 6ad0 <_sk_callback_avx+0x416>
  .byte  197,228,84,192                      // vandps        %ymm0,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,226,125,24,13,37,42,0,0         // vbroadcastss  0x2a25(%rip),%ymm1        # 6ad4 <_sk_callback_avx+0x41a>
  .byte  197,252,89,193                      // vmulps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,28,42,0,0         // vbroadcastss  0x2a1c(%rip),%ymm1        # 6ad8 <_sk_callback_avx+0x41e>
  .byte  197,228,84,201                      // vandps        %ymm1,%ymm3,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,226,125,24,21,15,42,0,0         // vbroadcastss  0x2a0f(%rip),%ymm2        # 6adc <_sk_callback_avx+0x422>
  .byte  197,244,89,202                      // vmulps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,21,6,42,0,0          // vbroadcastss  0x2a06(%rip),%ymm2        # 6ae0 <_sk_callback_avx+0x426>
  .byte  197,228,84,210                      // vandps        %ymm2,%ymm3,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,98,125,24,5,249,41,0,0          // vbroadcastss  0x29f9(%rip),%ymm8        # 6ae4 <_sk_callback_avx+0x42a>
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  196,98,125,24,5,239,41,0,0          // vbroadcastss  0x29ef(%rip),%ymm8        # 6ae8 <_sk_callback_avx+0x42e>
  .byte  196,193,100,84,216                  // vandps        %ymm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,98,125,24,5,225,41,0,0          // vbroadcastss  0x29e1(%rip),%ymm8        # 6aec <_sk_callback_avx+0x432>
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_avx
.globl _sk_store_4444_avx
FUNCTION(_sk_store_4444_avx)
_sk_store_4444_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  196,98,125,24,5,206,41,0,0          // vbroadcastss  0x29ce(%rip),%ymm8        # 6af0 <_sk_callback_avx+0x436>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,193,41,114,241,12               // vpslld        $0xc,%xmm9,%xmm10
  .byte  196,67,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm9
  .byte  196,193,49,114,241,12               // vpslld        $0xc,%xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,8                // vpslld        $0x8,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,8                // vpslld        $0x8,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,4                // vpslld        $0x4,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,4                // vpslld        $0x4,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,65,45,86,192                    // vorpd         %ymm8,%ymm10,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  196,67,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm9
  .byte  196,66,57,43,193                    // vpackusdw     %xmm9,%xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           41bb <_sk_store_4444_avx+0xa7>
  .byte  196,65,122,127,4,83                 // vmovdqu       %xmm8,(%r11,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            41b7 <_sk_store_4444_avx+0xa3>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,66,0,0,0                  // lea           0x42(%rip),%r10        # 4218 <_sk_store_4444_avx+0x104>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,67,121,21,68,83,12,6            // vpextrw       $0x6,%xmm8,0xc(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,10,5            // vpextrw       $0x5,%xmm8,0xa(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,8,4             // vpextrw       $0x4,%xmm8,0x8(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,6,3             // vpextrw       $0x3,%xmm8,0x6(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,4,2             // vpextrw       $0x2,%xmm8,0x4(%r11,%rdx,2)
  .byte  196,67,121,21,68,83,2,1             // vpextrw       $0x1,%xmm8,0x2(%r11,%rdx,2)
  .byte  196,67,121,21,4,83,0                // vpextrw       $0x0,%xmm8,(%r11,%rdx,2)
  .byte  235,159                             // jmp           41b7 <_sk_store_4444_avx+0xa3>
  .byte  247,255                             // idiv          %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  239                                 // out           %eax,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,231                             // jmpq          *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  223,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,215                             // callq         *%rdi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,207                             // dec           %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,199                             // inc           %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_8888_avx
.globl _sk_load_8888_avx
FUNCTION(_sk_load_8888_avx)
_sk_load_8888_avx:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,137,0,0,0                    // jne           42d6 <_sk_load_8888_avx+0xa2>
  .byte  196,193,124,16,26                   // vmovups       (%r10),%ymm3
  .byte  197,124,40,21,38,43,0,0             // vmovaps       0x2b26(%rip),%ymm10        # 6d80 <_sk_callback_avx+0x6c6>
  .byte  196,193,100,84,194                  // vandps        %ymm10,%ymm3,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,5,136,40,0,0          // vbroadcastss  0x2888(%rip),%ymm8        # 6af4 <_sk_callback_avx+0x43a>
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,241,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm1
  .byte  196,195,125,25,217,1                // vextractf128  $0x1,%ymm3,%xmm9
  .byte  196,193,105,114,209,8               // vpsrld        $0x8,%xmm9,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,161,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm11
  .byte  196,193,105,114,209,16              // vpsrld        $0x10,%xmm9,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,208                  // vmulps        %ymm8,%ymm2,%ymm2
  .byte  197,169,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm10
  .byte  196,193,97,114,209,24               // vpsrld        $0x18,%xmm9,%xmm3
  .byte  196,227,45,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm10,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,216                  // vmulps        %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,225,249,110,192                 // vmovq         %rax,%xmm0
  .byte  196,226,121,48,192                  // vpmovzxbw     %xmm0,%xmm0
  .byte  196,226,121,0,13,226,41,0,0         // vpshufb       0x29e2(%rip),%xmm0,%xmm1        # 6ce0 <_sk_callback_avx+0x626>
  .byte  196,226,121,33,201                  // vpmovsxbd     %xmm1,%xmm1
  .byte  196,226,121,0,5,228,41,0,0          // vpshufb       0x29e4(%rip),%xmm0,%xmm0        # 6cf0 <_sk_callback_avx+0x636>
  .byte  196,226,121,33,192                  // vpmovsxbd     %xmm0,%xmm0
  .byte  196,227,117,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm1,%ymm0
  .byte  196,194,125,44,26                   // vmaskmovps    (%r10),%ymm0,%ymm3
  .byte  233,49,255,255,255                  // jmpq          4252 <_sk_load_8888_avx+0x1e>

HIDDEN _sk_gather_8888_avx
.globl _sk_gather_8888_avx
FUNCTION(_sk_gather_8888_avx)
_sk_gather_8888_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,241,254,192                     // vpaddd        %xmm0,%xmm1,%xmm0
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,193,249,126,202                 // vmovq         %xmm1,%r10
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,193,121,110,20,129              // vmovd         (%r9,%rax,4),%xmm2
  .byte  196,195,249,22,203,1                // vpextrq       $0x1,%xmm1,%r11
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,105,34,12,145,1             // vpinsrd       $0x1,(%r9,%r10,4),%xmm2,%xmm1
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,195,113,34,12,129,2             // vpinsrd       $0x2,(%r9,%rax,4),%xmm1,%xmm1
  .byte  196,225,249,126,192                 // vmovq         %xmm0,%rax
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,3,113,34,4,153,3                // vpinsrd       $0x3,(%r9,%r11,4),%xmm1,%xmm8
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,129,121,110,12,145              // vmovd         (%r9,%r10,4),%xmm1
  .byte  196,195,249,22,194,1                // vpextrq       $0x1,%xmm0,%r10
  .byte  196,195,113,34,4,129,1              // vpinsrd       $0x1,(%r9,%rax,4),%xmm1,%xmm0
  .byte  68,137,208                          // mov           %r10d,%eax
  .byte  196,195,121,34,4,129,2              // vpinsrd       $0x2,(%r9,%rax,4),%xmm0,%xmm0
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  196,131,121,34,28,145,3             // vpinsrd       $0x3,(%r9,%r10,4),%xmm0,%xmm3
  .byte  196,227,61,24,195,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm0
  .byte  197,124,40,21,212,41,0,0            // vmovaps       0x29d4(%rip),%ymm10        # 6da0 <_sk_callback_avx+0x6e6>
  .byte  196,193,124,84,194                  // vandps        %ymm10,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,13,26,39,0,0          // vbroadcastss  0x271a(%rip),%ymm9        # 6af8 <_sk_callback_avx+0x43e>
  .byte  196,193,124,89,193                  // vmulps        %ymm9,%ymm0,%ymm0
  .byte  196,193,113,114,208,8               // vpsrld        $0x8,%xmm8,%xmm1
  .byte  197,233,114,211,8                   // vpsrld        $0x8,%xmm3,%xmm2
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,202                  // vandps        %ymm10,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,201                  // vmulps        %ymm9,%ymm1,%ymm1
  .byte  196,193,33,114,208,16               // vpsrld        $0x10,%xmm8,%xmm11
  .byte  197,233,114,211,16                  // vpsrld        $0x10,%xmm3,%xmm2
  .byte  196,227,37,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm11,%ymm2
  .byte  196,193,108,84,210                  // vandps        %ymm10,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,209                  // vmulps        %ymm9,%ymm2,%ymm2
  .byte  196,193,57,114,208,24               // vpsrld        $0x18,%xmm8,%xmm8
  .byte  197,225,114,211,24                  // vpsrld        $0x18,%xmm3,%xmm3
  .byte  196,227,61,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm8,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,217                  // vmulps        %ymm9,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_avx
.globl _sk_store_8888_avx
FUNCTION(_sk_store_8888_avx)
_sk_store_8888_avx:
  .byte  73,137,201                          // mov           %rcx,%r9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,3,16                             // add           (%rax),%r10
  .byte  196,98,125,24,5,164,38,0,0          // vbroadcastss  0x26a4(%rip),%ymm8        # 6afc <_sk_callback_avx+0x442>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,8                // vpslld        $0x8,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,8                // vpslld        $0x8,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,45,86,201                    // vorpd         %ymm9,%ymm10,%ymm9
  .byte  196,65,108,89,208                   // vmulps        %ymm8,%ymm2,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,193,33,114,242,16               // vpslld        $0x10,%xmm10,%xmm11
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,242,16               // vpslld        $0x10,%xmm10,%xmm10
  .byte  196,67,37,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm11,%ymm10
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,193,33,114,240,24               // vpslld        $0x18,%xmm8,%xmm11
  .byte  196,67,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm8
  .byte  196,193,57,114,240,24               // vpslld        $0x18,%xmm8,%xmm8
  .byte  196,67,37,24,192,1                  // vinsertf128   $0x1,%xmm8,%ymm11,%ymm8
  .byte  196,65,45,86,192                    // vorpd         %ymm8,%ymm10,%ymm8
  .byte  196,65,53,86,192                    // vorpd         %ymm8,%ymm9,%ymm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,12                              // jne           44e8 <_sk_store_8888_avx+0xa9>
  .byte  196,65,124,17,2                     // vmovups       %ymm8,(%r10)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,201                          // mov           %r9,%rcx
  .byte  255,224                             // jmpq          *%rax
  .byte  185,8,0,0,0                         // mov           $0x8,%ecx
  .byte  68,41,193                           // sub           %r8d,%ecx
  .byte  192,225,3                           // shl           $0x3,%cl
  .byte  72,199,192,255,255,255,255          // mov           $0xffffffffffffffff,%rax
  .byte  72,211,232                          // shr           %cl,%rax
  .byte  196,97,249,110,200                  // vmovq         %rax,%xmm9
  .byte  196,66,121,48,201                   // vpmovzxbw     %xmm9,%xmm9
  .byte  196,98,49,0,21,240,39,0,0           // vpshufb       0x27f0(%rip),%xmm9,%xmm10        # 6d00 <_sk_callback_avx+0x646>
  .byte  196,66,121,33,210                   // vpmovsxbd     %xmm10,%xmm10
  .byte  196,98,49,0,13,242,39,0,0           // vpshufb       0x27f2(%rip),%xmm9,%xmm9        # 6d10 <_sk_callback_avx+0x656>
  .byte  196,66,121,33,201                   // vpmovsxbd     %xmm9,%xmm9
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,66,53,46,2                      // vmaskmovps    %ymm8,%ymm9,(%r10)
  .byte  235,177                             // jmp           44e1 <_sk_store_8888_avx+0xa2>

HIDDEN _sk_load_f16_avx
.globl _sk_load_f16_avx
FUNCTION(_sk_load_f16_avx)
_sk_load_f16_avx:
  .byte  72,131,236,24                       // sub           $0x18,%rsp
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  197,252,17,124,36,224               // vmovups       %ymm7,-0x20(%rsp)
  .byte  197,252,17,116,36,192               // vmovups       %ymm6,-0x40(%rsp)
  .byte  197,252,17,108,36,160               // vmovups       %ymm5,-0x60(%rsp)
  .byte  197,254,127,100,36,128              // vmovdqu       %ymm4,-0x80(%rsp)
  .byte  15,133,141,2,0,0                    // jne           47e7 <_sk_load_f16_avx+0x2b7>
  .byte  197,121,16,4,208                    // vmovupd       (%rax,%rdx,8),%xmm8
  .byte  197,249,16,84,208,16                // vmovupd       0x10(%rax,%rdx,8),%xmm2
  .byte  197,249,16,76,208,32                // vmovupd       0x20(%rax,%rdx,8),%xmm1
  .byte  197,122,111,76,208,48               // vmovdqu       0x30(%rax,%rdx,8),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,113,97,217                  // vpunpcklwd    %xmm9,%xmm1,%xmm3
  .byte  196,193,113,105,201                 // vpunpckhwd    %xmm9,%xmm1,%xmm1
  .byte  197,121,97,250                      // vpunpcklwd    %xmm2,%xmm0,%xmm15
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,225,97,209                      // vpunpcklwd    %xmm1,%xmm3,%xmm2
  .byte  197,97,105,201                      // vpunpckhwd    %xmm1,%xmm3,%xmm9
  .byte  197,129,108,194                     // vpunpcklqdq   %xmm2,%xmm15,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,98,125,24,37,77,37,0,0          // vbroadcastss  0x254d(%rip),%ymm12        # 6b00 <_sk_callback_avx+0x446>
  .byte  196,193,124,84,204                  // vandps        %ymm12,%ymm0,%ymm1
  .byte  197,252,87,193                      // vxorps        %ymm1,%ymm0,%ymm0
  .byte  196,195,125,25,198,1                // vextractf128  $0x1,%ymm0,%xmm14
  .byte  196,98,121,24,29,57,37,0,0          // vbroadcastss  0x2539(%rip),%xmm11        # 6b04 <_sk_callback_avx+0x44a>
  .byte  196,193,8,87,219                    // vxorps        %xmm11,%xmm14,%xmm3
  .byte  196,98,121,24,45,47,37,0,0          // vbroadcastss  0x252f(%rip),%xmm13        # 6b08 <_sk_callback_avx+0x44e>
  .byte  197,145,102,219                     // vpcmpgtd      %xmm3,%xmm13,%xmm3
  .byte  196,65,120,87,211                   // vxorps        %xmm11,%xmm0,%xmm10
  .byte  196,65,17,102,210                   // vpcmpgtd      %xmm10,%xmm13,%xmm10
  .byte  196,99,45,24,211,1                  // vinsertf128   $0x1,%xmm3,%ymm10,%ymm10
  .byte  197,225,114,241,16                  // vpslld        $0x10,%xmm1,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  197,241,114,241,16                  // vpslld        $0x10,%xmm1,%xmm1
  .byte  196,227,101,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm1
  .byte  197,249,114,240,13                  // vpslld        $0xd,%xmm0,%xmm0
  .byte  196,193,97,114,246,13               // vpslld        $0xd,%xmm14,%xmm3
  .byte  196,227,125,24,195,1                // vinsertf128   $0x1,%xmm3,%ymm0,%ymm0
  .byte  197,252,86,193                      // vorps         %ymm1,%ymm0,%ymm0
  .byte  196,227,125,25,193,1                // vextractf128  $0x1,%ymm0,%xmm1
  .byte  196,226,121,24,29,229,36,0,0        // vbroadcastss  0x24e5(%rip),%xmm3        # 6b0c <_sk_callback_avx+0x452>
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  197,249,254,195                     // vpaddd        %xmm3,%xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,195,125,74,198,160              // vblendvps     %ymm10,%ymm14,%ymm0,%ymm0
  .byte  197,129,109,202                     // vpunpckhqdq   %xmm2,%xmm15,%xmm1
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,241,105,212                     // vpunpckhwd    %xmm4,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,212                  // vandps        %ymm12,%ymm1,%ymm2
  .byte  197,244,87,202                      // vxorps        %ymm2,%ymm1,%ymm1
  .byte  196,195,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm10
  .byte  196,193,40,87,251                   // vxorps        %xmm11,%xmm10,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,193,112,87,243                  // vxorps        %xmm11,%xmm1,%xmm6
  .byte  197,145,102,246                     // vpcmpgtd      %xmm6,%xmm13,%xmm6
  .byte  196,227,77,24,247,1                 // vinsertf128   $0x1,%xmm7,%ymm6,%ymm6
  .byte  197,193,114,242,16                  // vpslld        $0x10,%xmm2,%xmm7
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  197,233,114,242,16                  // vpslld        $0x10,%xmm2,%xmm2
  .byte  196,227,69,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm7,%ymm2
  .byte  197,241,114,241,13                  // vpslld        $0xd,%xmm1,%xmm1
  .byte  196,193,65,114,242,13               // vpslld        $0xd,%xmm10,%xmm7
  .byte  196,227,117,24,207,1                // vinsertf128   $0x1,%xmm7,%ymm1,%ymm1
  .byte  197,244,86,202                      // vorps         %ymm2,%ymm1,%ymm1
  .byte  196,227,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm2
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,195,117,74,206,96               // vblendvps     %ymm6,%ymm14,%ymm1,%ymm1
  .byte  196,193,57,108,209                  // vpunpcklqdq   %xmm9,%xmm8,%xmm2
  .byte  197,233,105,244                     // vpunpckhwd    %xmm4,%xmm2,%xmm6
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  196,193,108,84,244                  // vandps        %ymm12,%ymm2,%ymm6
  .byte  197,236,87,214                      // vxorps        %ymm6,%ymm2,%ymm2
  .byte  196,227,125,25,215,1                // vextractf128  $0x1,%ymm2,%xmm7
  .byte  196,193,64,87,235                   // vxorps        %xmm11,%xmm7,%xmm5
  .byte  197,145,102,237                     // vpcmpgtd      %xmm5,%xmm13,%xmm5
  .byte  196,193,104,87,227                  // vxorps        %xmm11,%xmm2,%xmm4
  .byte  197,145,102,228                     // vpcmpgtd      %xmm4,%xmm13,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  197,209,114,246,16                  // vpslld        $0x10,%xmm6,%xmm5
  .byte  196,227,125,25,246,1                // vextractf128  $0x1,%ymm6,%xmm6
  .byte  197,201,114,246,16                  // vpslld        $0x10,%xmm6,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  197,233,114,242,13                  // vpslld        $0xd,%xmm2,%xmm2
  .byte  197,201,114,247,13                  // vpslld        $0xd,%xmm7,%xmm6
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  197,236,86,213                      // vorps         %ymm5,%ymm2,%ymm2
  .byte  196,227,125,25,213,1                // vextractf128  $0x1,%ymm2,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,213,1                // vinsertf128   $0x1,%xmm5,%ymm2,%ymm2
  .byte  196,195,109,74,214,64               // vblendvps     %ymm4,%ymm14,%ymm2,%ymm2
  .byte  196,193,57,109,225                  // vpunpckhqdq   %xmm9,%xmm8,%xmm4
  .byte  196,193,89,105,234                  // vpunpckhwd    %xmm10,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,193,92,84,236                   // vandps        %ymm12,%ymm4,%ymm5
  .byte  197,220,87,229                      // vxorps        %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,230,1                // vextractf128  $0x1,%ymm4,%xmm6
  .byte  196,193,72,87,251                   // vxorps        %xmm11,%xmm6,%xmm7
  .byte  197,17,102,199                      // vpcmpgtd      %xmm7,%xmm13,%xmm8
  .byte  196,193,88,87,251                   // vxorps        %xmm11,%xmm4,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,195,69,24,248,1                 // vinsertf128   $0x1,%xmm8,%ymm7,%ymm7
  .byte  197,185,114,245,16                  // vpslld        $0x10,%xmm5,%xmm8
  .byte  196,227,125,25,237,1                // vextractf128  $0x1,%ymm5,%xmm5
  .byte  197,209,114,245,16                  // vpslld        $0x10,%xmm5,%xmm5
  .byte  196,227,61,24,237,1                 // vinsertf128   $0x1,%xmm5,%ymm8,%ymm5
  .byte  197,217,114,244,13                  // vpslld        $0xd,%xmm4,%xmm4
  .byte  197,201,114,246,13                  // vpslld        $0xd,%xmm6,%xmm6
  .byte  196,227,93,24,230,1                 // vinsertf128   $0x1,%xmm6,%ymm4,%ymm4
  .byte  197,220,86,229                      // vorps         %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,229,1                // vextractf128  $0x1,%ymm4,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,217,254,219                     // vpaddd        %xmm3,%xmm4,%xmm3
  .byte  196,227,101,24,221,1                // vinsertf128   $0x1,%xmm5,%ymm3,%ymm3
  .byte  196,195,101,74,222,112              // vblendvps     %ymm7,%ymm14,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,100,36,128               // vmovups       -0x80(%rsp),%ymm4
  .byte  197,252,16,108,36,160               // vmovups       -0x60(%rsp),%ymm5
  .byte  197,252,16,116,36,192               // vmovups       -0x40(%rsp),%ymm6
  .byte  197,252,16,124,36,224               // vmovups       -0x20(%rsp),%ymm7
  .byte  72,131,196,24                       // add           $0x18,%rsp
  .byte  255,224                             // jmpq          *%rax
  .byte  197,123,16,4,208                    // vmovsd        (%rax,%rdx,8),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,79                              // je            4846 <_sk_load_f16_avx+0x316>
  .byte  197,57,22,68,208,8                  // vmovhpd       0x8(%rax,%rdx,8),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,67                              // jb            4846 <_sk_load_f16_avx+0x316>
  .byte  197,251,16,84,208,16                // vmovsd        0x10(%rax,%rdx,8),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,68                              // je            4853 <_sk_load_f16_avx+0x323>
  .byte  197,233,22,84,208,24                // vmovhpd       0x18(%rax,%rdx,8),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,56                              // jb            4853 <_sk_load_f16_avx+0x323>
  .byte  197,251,16,76,208,32                // vmovsd        0x20(%rax,%rdx,8),%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,70,253,255,255               // je            4571 <_sk_load_f16_avx+0x41>
  .byte  197,241,22,76,208,40                // vmovhpd       0x28(%rax,%rdx,8),%xmm1,%xmm1
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,54,253,255,255               // jb            4571 <_sk_load_f16_avx+0x41>
  .byte  197,122,126,76,208,48               // vmovq         0x30(%rax,%rdx,8),%xmm9
  .byte  233,43,253,255,255                  // jmpq          4571 <_sk_load_f16_avx+0x41>
  .byte  197,241,87,201                      // vxorpd        %xmm1,%xmm1,%xmm1
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,30,253,255,255                  // jmpq          4571 <_sk_load_f16_avx+0x41>
  .byte  197,241,87,201                      // vxorpd        %xmm1,%xmm1,%xmm1
  .byte  233,21,253,255,255                  // jmpq          4571 <_sk_load_f16_avx+0x41>

HIDDEN _sk_gather_f16_avx
.globl _sk_gather_f16_avx
FUNCTION(_sk_gather_f16_avx)
_sk_gather_f16_avx:
  .byte  72,131,236,24                       // sub           $0x18,%rsp
  .byte  197,252,17,124,36,224               // vmovups       %ymm7,-0x20(%rsp)
  .byte  197,252,17,116,36,192               // vmovups       %ymm6,-0x40(%rsp)
  .byte  197,252,17,108,36,160               // vmovups       %ymm5,-0x60(%rsp)
  .byte  197,254,127,100,36,128              // vmovdqu       %ymm4,-0x80(%rsp)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  197,249,110,80,16                   // vmovd         0x10(%rax),%xmm2
  .byte  197,249,112,210,0                   // vpshufd       $0x0,%xmm2,%xmm2
  .byte  196,226,105,64,217                  // vpmulld       %xmm1,%xmm2,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,226,105,64,201                  // vpmulld       %xmm1,%xmm2,%xmm1
  .byte  197,254,91,208                      // vcvttps2dq    %ymm0,%ymm2
  .byte  196,227,125,25,208,1                // vextractf128  $0x1,%ymm2,%xmm0
  .byte  197,113,254,192                     // vpaddd        %xmm0,%xmm1,%xmm8
  .byte  197,225,254,202                     // vpaddd        %xmm2,%xmm3,%xmm1
  .byte  196,225,249,126,200                 // vmovq         %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,65,122,126,12,193               // vmovq         (%r9,%rax,8),%xmm9
  .byte  196,227,249,22,200,1                // vpextrq       $0x1,%xmm1,%rax
  .byte  196,1,122,126,20,209                // vmovq         (%r9,%r10,8),%xmm10
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,65,122,126,28,193               // vmovq         (%r9,%rax,8),%xmm11
  .byte  196,97,249,126,192                  // vmovq         %xmm8,%rax
  .byte  196,1,122,126,36,209                // vmovq         (%r9,%r10,8),%xmm12
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,65,122,126,44,193               // vmovq         (%r9,%rax,8),%xmm13
  .byte  196,67,249,22,195,1                 // vpextrq       $0x1,%xmm8,%r11
  .byte  196,1,122,126,4,209                 // vmovq         (%r9,%r10,8),%xmm8
  .byte  76,137,216                          // mov           %r11,%rax
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  196,65,122,126,52,193               // vmovq         (%r9,%rax,8),%xmm14
  .byte  68,137,216                          // mov           %r11d,%eax
  .byte  196,193,122,126,4,193               // vmovq         (%r9,%rax,8),%xmm0
  .byte  196,193,41,108,209                  // vpunpcklqdq   %xmm9,%xmm10,%xmm2
  .byte  196,193,25,108,203                  // vpunpcklqdq   %xmm11,%xmm12,%xmm1
  .byte  196,193,57,108,221                  // vpunpcklqdq   %xmm13,%xmm8,%xmm3
  .byte  196,193,121,108,198                 // vpunpcklqdq   %xmm14,%xmm0,%xmm0
  .byte  197,105,97,193                      // vpunpcklwd    %xmm1,%xmm2,%xmm8
  .byte  197,233,105,209                     // vpunpckhwd    %xmm1,%xmm2,%xmm2
  .byte  197,225,97,200                      // vpunpcklwd    %xmm0,%xmm3,%xmm1
  .byte  197,225,105,192                     // vpunpckhwd    %xmm0,%xmm3,%xmm0
  .byte  197,57,97,250                       // vpunpcklwd    %xmm2,%xmm8,%xmm15
  .byte  197,57,105,194                      // vpunpckhwd    %xmm2,%xmm8,%xmm8
  .byte  197,241,97,208                      // vpunpcklwd    %xmm0,%xmm1,%xmm2
  .byte  197,113,105,200                     // vpunpckhwd    %xmm0,%xmm1,%xmm9
  .byte  197,129,108,194                     // vpunpcklqdq   %xmm2,%xmm15,%xmm0
  .byte  197,241,239,201                     // vpxor         %xmm1,%xmm1,%xmm1
  .byte  197,249,105,201                     // vpunpckhwd    %xmm1,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,98,125,24,37,170,33,0,0         // vbroadcastss  0x21aa(%rip),%ymm12        # 6b10 <_sk_callback_avx+0x456>
  .byte  196,193,124,84,204                  // vandps        %ymm12,%ymm0,%ymm1
  .byte  197,252,87,193                      // vxorps        %ymm1,%ymm0,%ymm0
  .byte  196,195,125,25,198,1                // vextractf128  $0x1,%ymm0,%xmm14
  .byte  196,98,121,24,29,150,33,0,0         // vbroadcastss  0x2196(%rip),%xmm11        # 6b14 <_sk_callback_avx+0x45a>
  .byte  196,193,8,87,219                    // vxorps        %xmm11,%xmm14,%xmm3
  .byte  196,98,121,24,45,140,33,0,0         // vbroadcastss  0x218c(%rip),%xmm13        # 6b18 <_sk_callback_avx+0x45e>
  .byte  197,145,102,219                     // vpcmpgtd      %xmm3,%xmm13,%xmm3
  .byte  196,65,120,87,211                   // vxorps        %xmm11,%xmm0,%xmm10
  .byte  196,65,17,102,210                   // vpcmpgtd      %xmm10,%xmm13,%xmm10
  .byte  196,99,45,24,211,1                  // vinsertf128   $0x1,%xmm3,%ymm10,%ymm10
  .byte  197,225,114,241,16                  // vpslld        $0x10,%xmm1,%xmm3
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  197,241,114,241,16                  // vpslld        $0x10,%xmm1,%xmm1
  .byte  196,227,101,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm1
  .byte  197,249,114,240,13                  // vpslld        $0xd,%xmm0,%xmm0
  .byte  196,193,97,114,246,13               // vpslld        $0xd,%xmm14,%xmm3
  .byte  196,227,125,24,195,1                // vinsertf128   $0x1,%xmm3,%ymm0,%ymm0
  .byte  197,252,86,193                      // vorps         %ymm1,%ymm0,%ymm0
  .byte  196,227,125,25,193,1                // vextractf128  $0x1,%ymm0,%xmm1
  .byte  196,226,121,24,29,66,33,0,0         // vbroadcastss  0x2142(%rip),%xmm3        # 6b1c <_sk_callback_avx+0x462>
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  197,249,254,195                     // vpaddd        %xmm3,%xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  196,65,12,87,246                    // vxorps        %ymm14,%ymm14,%ymm14
  .byte  196,195,125,74,198,160              // vblendvps     %ymm10,%ymm14,%ymm0,%ymm0
  .byte  197,129,109,202                     // vpunpckhqdq   %xmm2,%xmm15,%xmm1
  .byte  197,217,239,228                     // vpxor         %xmm4,%xmm4,%xmm4
  .byte  197,241,105,212                     // vpunpckhwd    %xmm4,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,193,116,84,212                  // vandps        %ymm12,%ymm1,%ymm2
  .byte  197,244,87,202                      // vxorps        %ymm2,%ymm1,%ymm1
  .byte  196,195,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm10
  .byte  196,193,40,87,251                   // vxorps        %xmm11,%xmm10,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,193,112,87,243                  // vxorps        %xmm11,%xmm1,%xmm6
  .byte  197,145,102,246                     // vpcmpgtd      %xmm6,%xmm13,%xmm6
  .byte  196,227,77,24,247,1                 // vinsertf128   $0x1,%xmm7,%ymm6,%ymm6
  .byte  197,193,114,242,16                  // vpslld        $0x10,%xmm2,%xmm7
  .byte  196,227,125,25,210,1                // vextractf128  $0x1,%ymm2,%xmm2
  .byte  197,233,114,242,16                  // vpslld        $0x10,%xmm2,%xmm2
  .byte  196,227,69,24,210,1                 // vinsertf128   $0x1,%xmm2,%ymm7,%ymm2
  .byte  197,241,114,241,13                  // vpslld        $0xd,%xmm1,%xmm1
  .byte  196,193,65,114,242,13               // vpslld        $0xd,%xmm10,%xmm7
  .byte  196,227,117,24,207,1                // vinsertf128   $0x1,%xmm7,%ymm1,%ymm1
  .byte  197,244,86,202                      // vorps         %ymm2,%ymm1,%ymm1
  .byte  196,227,125,25,202,1                // vextractf128  $0x1,%ymm1,%xmm2
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,241,254,203                     // vpaddd        %xmm3,%xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  196,195,117,74,206,96               // vblendvps     %ymm6,%ymm14,%ymm1,%ymm1
  .byte  196,193,57,108,209                  // vpunpcklqdq   %xmm9,%xmm8,%xmm2
  .byte  197,233,105,244                     // vpunpckhwd    %xmm4,%xmm2,%xmm6
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  196,193,108,84,244                  // vandps        %ymm12,%ymm2,%ymm6
  .byte  197,236,87,214                      // vxorps        %ymm6,%ymm2,%ymm2
  .byte  196,227,125,25,215,1                // vextractf128  $0x1,%ymm2,%xmm7
  .byte  196,193,64,87,235                   // vxorps        %xmm11,%xmm7,%xmm5
  .byte  197,145,102,237                     // vpcmpgtd      %xmm5,%xmm13,%xmm5
  .byte  196,193,104,87,227                  // vxorps        %xmm11,%xmm2,%xmm4
  .byte  197,145,102,228                     // vpcmpgtd      %xmm4,%xmm13,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  197,209,114,246,16                  // vpslld        $0x10,%xmm6,%xmm5
  .byte  196,227,125,25,246,1                // vextractf128  $0x1,%ymm6,%xmm6
  .byte  197,201,114,246,16                  // vpslld        $0x10,%xmm6,%xmm6
  .byte  196,227,85,24,238,1                 // vinsertf128   $0x1,%xmm6,%ymm5,%ymm5
  .byte  197,233,114,242,13                  // vpslld        $0xd,%xmm2,%xmm2
  .byte  197,201,114,247,13                  // vpslld        $0xd,%xmm7,%xmm6
  .byte  196,227,109,24,214,1                // vinsertf128   $0x1,%xmm6,%ymm2,%ymm2
  .byte  197,236,86,213                      // vorps         %ymm5,%ymm2,%ymm2
  .byte  196,227,125,25,213,1                // vextractf128  $0x1,%ymm2,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  196,227,109,24,213,1                // vinsertf128   $0x1,%xmm5,%ymm2,%ymm2
  .byte  196,195,109,74,214,64               // vblendvps     %ymm4,%ymm14,%ymm2,%ymm2
  .byte  196,193,57,109,225                  // vpunpckhqdq   %xmm9,%xmm8,%xmm4
  .byte  196,193,89,105,234                  // vpunpckhwd    %xmm10,%xmm4,%xmm5
  .byte  196,226,121,51,228                  // vpmovzxwd     %xmm4,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,193,92,84,236                   // vandps        %ymm12,%ymm4,%ymm5
  .byte  197,220,87,229                      // vxorps        %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,230,1                // vextractf128  $0x1,%ymm4,%xmm6
  .byte  196,193,72,87,251                   // vxorps        %xmm11,%xmm6,%xmm7
  .byte  197,17,102,199                      // vpcmpgtd      %xmm7,%xmm13,%xmm8
  .byte  196,193,88,87,251                   // vxorps        %xmm11,%xmm4,%xmm7
  .byte  197,145,102,255                     // vpcmpgtd      %xmm7,%xmm13,%xmm7
  .byte  196,195,69,24,248,1                 // vinsertf128   $0x1,%xmm8,%ymm7,%ymm7
  .byte  197,185,114,245,16                  // vpslld        $0x10,%xmm5,%xmm8
  .byte  196,227,125,25,237,1                // vextractf128  $0x1,%ymm5,%xmm5
  .byte  197,209,114,245,16                  // vpslld        $0x10,%xmm5,%xmm5
  .byte  196,227,61,24,237,1                 // vinsertf128   $0x1,%xmm5,%ymm8,%ymm5
  .byte  197,217,114,244,13                  // vpslld        $0xd,%xmm4,%xmm4
  .byte  197,201,114,246,13                  // vpslld        $0xd,%xmm6,%xmm6
  .byte  196,227,93,24,230,1                 // vinsertf128   $0x1,%xmm6,%ymm4,%ymm4
  .byte  197,220,86,229                      // vorps         %ymm5,%ymm4,%ymm4
  .byte  196,227,125,25,229,1                // vextractf128  $0x1,%ymm4,%xmm5
  .byte  197,209,254,235                     // vpaddd        %xmm3,%xmm5,%xmm5
  .byte  197,217,254,219                     // vpaddd        %xmm3,%xmm4,%xmm3
  .byte  196,227,101,24,221,1                // vinsertf128   $0x1,%xmm5,%ymm3,%ymm3
  .byte  196,195,101,74,222,112              // vblendvps     %ymm7,%ymm14,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,100,36,128               // vmovups       -0x80(%rsp),%ymm4
  .byte  197,252,16,108,36,160               // vmovups       -0x60(%rsp),%ymm5
  .byte  197,252,16,116,36,192               // vmovups       -0x40(%rsp),%ymm6
  .byte  197,252,16,124,36,224               // vmovups       -0x20(%rsp),%ymm7
  .byte  72,131,196,24                       // add           $0x18,%rsp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_avx
.globl _sk_store_f16_avx
FUNCTION(_sk_store_f16_avx)
_sk_store_f16_avx:
  .byte  72,131,236,88                       // sub           $0x58,%rsp
  .byte  197,252,17,124,36,32                // vmovups       %ymm7,0x20(%rsp)
  .byte  197,252,17,52,36                    // vmovups       %ymm6,(%rsp)
  .byte  197,252,17,108,36,224               // vmovups       %ymm5,-0x20(%rsp)
  .byte  197,252,17,100,36,192               // vmovups       %ymm4,-0x40(%rsp)
  .byte  196,98,125,24,13,98,31,0,0          // vbroadcastss  0x1f62(%rip),%ymm9        # 6b20 <_sk_callback_avx+0x466>
  .byte  196,65,124,84,209                   // vandps        %ymm9,%ymm0,%ymm10
  .byte  197,252,17,68,36,128                // vmovups       %ymm0,-0x80(%rsp)
  .byte  196,65,124,87,218                   // vxorps        %ymm10,%ymm0,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,98,121,24,5,71,31,0,0           // vbroadcastss  0x1f47(%rip),%xmm8        # 6b24 <_sk_callback_avx+0x46a>
  .byte  196,65,57,102,236                   // vpcmpgtd      %xmm12,%xmm8,%xmm13
  .byte  196,65,57,102,243                   // vpcmpgtd      %xmm11,%xmm8,%xmm14
  .byte  196,67,13,24,237,1                  // vinsertf128   $0x1,%xmm13,%ymm14,%ymm13
  .byte  196,193,9,114,210,16                // vpsrld        $0x10,%xmm10,%xmm14
  .byte  196,67,125,25,210,1                 // vextractf128  $0x1,%ymm10,%xmm10
  .byte  196,193,41,114,210,16               // vpsrld        $0x10,%xmm10,%xmm10
  .byte  196,67,13,24,242,1                  // vinsertf128   $0x1,%xmm10,%ymm14,%ymm14
  .byte  196,193,33,114,211,13               // vpsrld        $0xd,%xmm11,%xmm11
  .byte  196,193,25,114,212,13               // vpsrld        $0xd,%xmm12,%xmm12
  .byte  196,98,125,24,21,14,31,0,0          // vbroadcastss  0x1f0e(%rip),%ymm10        # 6b28 <_sk_callback_avx+0x46e>
  .byte  196,65,12,86,242                    // vorps         %ymm10,%ymm14,%ymm14
  .byte  196,67,125,25,247,1                 // vextractf128  $0x1,%ymm14,%xmm15
  .byte  196,65,1,254,228                    // vpaddd        %xmm12,%xmm15,%xmm12
  .byte  196,65,9,254,219                    // vpaddd        %xmm11,%xmm14,%xmm11
  .byte  196,67,37,24,228,1                  // vinsertf128   $0x1,%xmm12,%ymm11,%ymm12
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  196,99,29,74,224,208                // vblendvps     %ymm13,%ymm0,%ymm12,%ymm12
  .byte  196,65,116,84,233                   // vandps        %ymm9,%ymm1,%ymm13
  .byte  197,252,17,76,36,160                // vmovups       %ymm1,-0x60(%rsp)
  .byte  196,65,116,87,245                   // vxorps        %ymm13,%ymm1,%ymm14
  .byte  196,67,125,25,247,1                 // vextractf128  $0x1,%ymm14,%xmm15
  .byte  196,193,57,102,255                  // vpcmpgtd      %xmm15,%xmm8,%xmm7
  .byte  196,65,57,102,222                   // vpcmpgtd      %xmm14,%xmm8,%xmm11
  .byte  196,227,37,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm11,%ymm7
  .byte  196,193,33,114,213,16               // vpsrld        $0x10,%xmm13,%xmm11
  .byte  196,99,125,25,238,1                 // vextractf128  $0x1,%ymm13,%xmm6
  .byte  197,201,114,214,16                  // vpsrld        $0x10,%xmm6,%xmm6
  .byte  196,227,37,24,246,1                 // vinsertf128   $0x1,%xmm6,%ymm11,%ymm6
  .byte  196,193,33,114,215,13               // vpsrld        $0xd,%xmm15,%xmm11
  .byte  196,193,76,86,242                   // vorps         %ymm10,%ymm6,%ymm6
  .byte  196,227,125,25,245,1                // vextractf128  $0x1,%ymm6,%xmm5
  .byte  196,193,81,254,235                  // vpaddd        %xmm11,%xmm5,%xmm5
  .byte  196,193,89,114,214,13               // vpsrld        $0xd,%xmm14,%xmm4
  .byte  197,201,254,228                     // vpaddd        %xmm4,%xmm6,%xmm4
  .byte  196,227,93,24,229,1                 // vinsertf128   $0x1,%xmm5,%ymm4,%ymm4
  .byte  196,99,93,74,232,112                // vblendvps     %ymm7,%ymm0,%ymm4,%ymm13
  .byte  196,193,108,84,225                  // vandps        %ymm9,%ymm2,%ymm4
  .byte  197,236,87,236                      // vxorps        %ymm4,%ymm2,%ymm5
  .byte  196,227,125,25,238,1                // vextractf128  $0x1,%ymm5,%xmm6
  .byte  197,185,102,254                     // vpcmpgtd      %xmm6,%xmm8,%xmm7
  .byte  197,57,102,221                      // vpcmpgtd      %xmm5,%xmm8,%xmm11
  .byte  196,227,37,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm11,%ymm7
  .byte  197,161,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm11
  .byte  196,227,125,25,228,1                // vextractf128  $0x1,%ymm4,%xmm4
  .byte  197,217,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm4
  .byte  196,227,37,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm11,%ymm4
  .byte  197,201,114,214,13                  // vpsrld        $0xd,%xmm6,%xmm6
  .byte  196,193,92,86,226                   // vorps         %ymm10,%ymm4,%ymm4
  .byte  196,227,125,25,225,1                // vextractf128  $0x1,%ymm4,%xmm1
  .byte  197,241,254,206                     // vpaddd        %xmm6,%xmm1,%xmm1
  .byte  197,209,114,213,13                  // vpsrld        $0xd,%xmm5,%xmm5
  .byte  197,217,254,229                     // vpaddd        %xmm5,%xmm4,%xmm4
  .byte  196,227,93,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm4,%ymm1
  .byte  196,99,117,74,216,112               // vblendvps     %ymm7,%ymm0,%ymm1,%ymm11
  .byte  196,193,100,84,225                  // vandps        %ymm9,%ymm3,%ymm4
  .byte  197,228,87,236                      // vxorps        %ymm4,%ymm3,%ymm5
  .byte  196,227,125,25,238,1                // vextractf128  $0x1,%ymm5,%xmm6
  .byte  197,185,102,254                     // vpcmpgtd      %xmm6,%xmm8,%xmm7
  .byte  197,57,102,197                      // vpcmpgtd      %xmm5,%xmm8,%xmm8
  .byte  196,227,61,24,255,1                 // vinsertf128   $0x1,%xmm7,%ymm8,%ymm7
  .byte  197,185,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm8
  .byte  196,227,125,25,228,1                // vextractf128  $0x1,%ymm4,%xmm4
  .byte  197,217,114,212,16                  // vpsrld        $0x10,%xmm4,%xmm4
  .byte  196,227,61,24,228,1                 // vinsertf128   $0x1,%xmm4,%ymm8,%ymm4
  .byte  196,193,92,86,226                   // vorps         %ymm10,%ymm4,%ymm4
  .byte  197,201,114,214,13                  // vpsrld        $0xd,%xmm6,%xmm6
  .byte  196,227,125,25,225,1                // vextractf128  $0x1,%ymm4,%xmm1
  .byte  197,241,254,206                     // vpaddd        %xmm6,%xmm1,%xmm1
  .byte  197,209,114,213,13                  // vpsrld        $0xd,%xmm5,%xmm5
  .byte  197,217,254,229                     // vpaddd        %xmm5,%xmm4,%xmm4
  .byte  196,227,93,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm4,%ymm1
  .byte  196,227,117,74,200,112              // vblendvps     %ymm7,%ymm0,%ymm1,%ymm1
  .byte  196,99,125,25,224,1                 // vextractf128  $0x1,%ymm12,%xmm0
  .byte  196,226,25,43,192                   // vpackusdw     %xmm0,%xmm12,%xmm0
  .byte  196,99,125,25,236,1                 // vextractf128  $0x1,%ymm13,%xmm4
  .byte  196,226,17,43,228                   // vpackusdw     %xmm4,%xmm13,%xmm4
  .byte  196,99,125,25,221,1                 // vextractf128  $0x1,%ymm11,%xmm5
  .byte  196,226,33,43,245                   // vpackusdw     %xmm5,%xmm11,%xmm6
  .byte  196,227,125,25,205,1                // vextractf128  $0x1,%ymm1,%xmm5
  .byte  196,226,113,43,205                  // vpackusdw     %xmm5,%xmm1,%xmm1
  .byte  197,249,97,236                      // vpunpcklwd    %xmm4,%xmm0,%xmm5
  .byte  197,249,105,196                     // vpunpckhwd    %xmm4,%xmm0,%xmm0
  .byte  197,201,97,225                      // vpunpcklwd    %xmm1,%xmm6,%xmm4
  .byte  197,201,105,201                     // vpunpckhwd    %xmm1,%xmm6,%xmm1
  .byte  197,81,98,220                       // vpunpckldq    %xmm4,%xmm5,%xmm11
  .byte  197,81,106,212                      // vpunpckhdq    %xmm4,%xmm5,%xmm10
  .byte  197,121,98,201                      // vpunpckldq    %xmm1,%xmm0,%xmm9
  .byte  197,121,106,193                     // vpunpckhdq    %xmm1,%xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           4df8 <_sk_store_f16_avx+0x25e>
  .byte  197,120,17,28,208                   // vmovups       %xmm11,(%rax,%rdx,8)
  .byte  197,120,17,84,208,16                // vmovups       %xmm10,0x10(%rax,%rdx,8)
  .byte  197,120,17,76,208,32                // vmovups       %xmm9,0x20(%rax,%rdx,8)
  .byte  197,122,127,68,208,48               // vmovdqu       %xmm8,0x30(%rax,%rdx,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,16,68,36,128                // vmovups       -0x80(%rsp),%ymm0
  .byte  197,252,16,76,36,160                // vmovups       -0x60(%rsp),%ymm1
  .byte  197,252,16,100,36,192               // vmovups       -0x40(%rsp),%ymm4
  .byte  197,252,16,108,36,224               // vmovups       -0x20(%rsp),%ymm5
  .byte  197,252,16,52,36                    // vmovups       (%rsp),%ymm6
  .byte  197,252,16,124,36,32                // vmovups       0x20(%rsp),%ymm7
  .byte  72,131,196,88                       // add           $0x58,%rsp
  .byte  255,224                             // jmpq          *%rax
  .byte  197,121,214,28,208                  // vmovq         %xmm11,(%rax,%rdx,8)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,202                             // je            4dcd <_sk_store_f16_avx+0x233>
  .byte  197,121,23,92,208,8                 // vmovhpd       %xmm11,0x8(%rax,%rdx,8)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,190                             // jb            4dcd <_sk_store_f16_avx+0x233>
  .byte  197,121,214,84,208,16               // vmovq         %xmm10,0x10(%rax,%rdx,8)
  .byte  116,182                             // je            4dcd <_sk_store_f16_avx+0x233>
  .byte  197,121,23,84,208,24                // vmovhpd       %xmm10,0x18(%rax,%rdx,8)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,170                             // jb            4dcd <_sk_store_f16_avx+0x233>
  .byte  197,121,214,76,208,32               // vmovq         %xmm9,0x20(%rax,%rdx,8)
  .byte  116,162                             // je            4dcd <_sk_store_f16_avx+0x233>
  .byte  197,121,23,76,208,40                // vmovhpd       %xmm9,0x28(%rax,%rdx,8)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,150                             // jb            4dcd <_sk_store_f16_avx+0x233>
  .byte  197,121,214,68,208,48               // vmovq         %xmm8,0x30(%rax,%rdx,8)
  .byte  235,142                             // jmp           4dcd <_sk_store_f16_avx+0x233>

HIDDEN _sk_load_u16_be_avx
.globl _sk_load_u16_be_avx
FUNCTION(_sk_load_u16_be_avx)
_sk_load_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,253,0,0,0                    // jne           4f52 <_sk_load_u16_be_avx+0x113>
  .byte  196,65,121,16,4,65                  // vmovupd       (%r9,%rax,2),%xmm8
  .byte  196,193,121,16,84,65,16             // vmovupd       0x10(%r9,%rax,2),%xmm2
  .byte  196,193,121,16,92,65,32             // vmovupd       0x20(%r9,%rax,2),%xmm3
  .byte  196,65,122,111,76,65,48             // vmovdqu       0x30(%r9,%rax,2),%xmm9
  .byte  197,185,97,194                      // vpunpcklwd    %xmm2,%xmm8,%xmm0
  .byte  197,185,105,210                     // vpunpckhwd    %xmm2,%xmm8,%xmm2
  .byte  196,193,97,97,201                   // vpunpcklwd    %xmm9,%xmm3,%xmm1
  .byte  196,193,97,105,217                  // vpunpckhwd    %xmm9,%xmm3,%xmm3
  .byte  197,121,97,202                      // vpunpcklwd    %xmm2,%xmm0,%xmm9
  .byte  197,121,105,194                     // vpunpckhwd    %xmm2,%xmm0,%xmm8
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,227                     // vpunpckhwd    %xmm3,%xmm1,%xmm12
  .byte  197,177,108,194                     // vpunpcklqdq   %xmm2,%xmm9,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,65,41,239,210                   // vpxor         %xmm10,%xmm10,%xmm10
  .byte  196,193,121,105,202                 // vpunpckhwd    %xmm10,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,29,102,28,0,0         // vbroadcastss  0x1c66(%rip),%ymm11        # 6b2c <_sk_callback_avx+0x472>
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,177,109,202                     // vpunpckhqdq   %xmm2,%xmm9,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,193,113,105,210                 // vpunpckhwd    %xmm10,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,193,57,108,212                  // vpunpcklqdq   %xmm12,%xmm8,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,193,105,105,218                 // vpunpckhwd    %xmm10,%xmm2,%xmm3
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  196,193,57,109,220                  // vpunpckhqdq   %xmm12,%xmm8,%xmm3
  .byte  197,185,113,243,8                   // vpsllw        $0x8,%xmm3,%xmm8
  .byte  197,225,113,211,8                   // vpsrlw        $0x8,%xmm3,%xmm3
  .byte  197,185,235,219                     // vpor          %xmm3,%xmm8,%xmm3
  .byte  196,65,97,105,194                   // vpunpckhwd    %xmm10,%xmm3,%xmm8
  .byte  196,226,121,51,219                  // vpmovzxwd     %xmm3,%xmm3
  .byte  196,195,101,24,216,1                // vinsertf128   $0x1,%xmm8,%ymm3,%ymm3
  .byte  197,252,91,219                      // vcvtdq2ps     %ymm3,%ymm3
  .byte  196,193,100,89,219                  // vmulps        %ymm11,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,123,16,4,65                  // vmovsd        (%r9,%rax,2),%xmm8
  .byte  196,65,49,239,201                   // vpxor         %xmm9,%xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,85                              // je            4fb8 <_sk_load_u16_be_avx+0x179>
  .byte  196,65,57,22,68,65,8                // vmovhpd       0x8(%r9,%rax,2),%xmm8,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,72                              // jb            4fb8 <_sk_load_u16_be_avx+0x179>
  .byte  196,193,123,16,84,65,16             // vmovsd        0x10(%r9,%rax,2),%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  116,72                              // je            4fc5 <_sk_load_u16_be_avx+0x186>
  .byte  196,193,105,22,84,65,24             // vmovhpd       0x18(%r9,%rax,2),%xmm2,%xmm2
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,59                              // jb            4fc5 <_sk_load_u16_be_avx+0x186>
  .byte  196,193,123,16,92,65,32             // vmovsd        0x20(%r9,%rax,2),%xmm3
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  15,132,213,254,255,255              // je            4e70 <_sk_load_u16_be_avx+0x31>
  .byte  196,193,97,22,92,65,40              // vmovhpd       0x28(%r9,%rax,2),%xmm3,%xmm3
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  15,130,196,254,255,255              // jb            4e70 <_sk_load_u16_be_avx+0x31>
  .byte  196,65,122,126,76,65,48             // vmovq         0x30(%r9,%rax,2),%xmm9
  .byte  233,184,254,255,255                 // jmpq          4e70 <_sk_load_u16_be_avx+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  197,233,87,210                      // vxorpd        %xmm2,%xmm2,%xmm2
  .byte  233,171,254,255,255                 // jmpq          4e70 <_sk_load_u16_be_avx+0x31>
  .byte  197,225,87,219                      // vxorpd        %xmm3,%xmm3,%xmm3
  .byte  233,162,254,255,255                 // jmpq          4e70 <_sk_load_u16_be_avx+0x31>

HIDDEN _sk_load_rgb_u16_be_avx
.globl _sk_load_rgb_u16_be_avx
FUNCTION(_sk_load_rgb_u16_be_avx)
_sk_load_rgb_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,82                         // lea           (%rdx,%rdx,2),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,243,0,0,0                    // jne           50d3 <_sk_load_rgb_u16_be_avx+0x105>
  .byte  196,193,122,111,4,65                // vmovdqu       (%r9,%rax,2),%xmm0
  .byte  196,193,122,111,84,65,12            // vmovdqu       0xc(%r9,%rax,2),%xmm2
  .byte  196,193,122,111,76,65,24            // vmovdqu       0x18(%r9,%rax,2),%xmm1
  .byte  196,193,122,111,92,65,32            // vmovdqu       0x20(%r9,%rax,2),%xmm3
  .byte  197,225,115,219,4                   // vpsrldq       $0x4,%xmm3,%xmm3
  .byte  197,185,115,216,6                   // vpsrldq       $0x6,%xmm0,%xmm8
  .byte  197,177,115,218,6                   // vpsrldq       $0x6,%xmm2,%xmm9
  .byte  197,161,115,217,6                   // vpsrldq       $0x6,%xmm1,%xmm11
  .byte  197,169,115,219,6                   // vpsrldq       $0x6,%xmm3,%xmm10
  .byte  197,249,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm0
  .byte  196,193,57,97,209                   // vpunpcklwd    %xmm9,%xmm8,%xmm2
  .byte  197,241,97,203                      // vpunpcklwd    %xmm3,%xmm1,%xmm1
  .byte  196,193,33,97,218                   // vpunpcklwd    %xmm10,%xmm11,%xmm3
  .byte  197,121,97,194                      // vpunpcklwd    %xmm2,%xmm0,%xmm8
  .byte  197,121,105,202                     // vpunpckhwd    %xmm2,%xmm0,%xmm9
  .byte  197,241,97,211                      // vpunpcklwd    %xmm3,%xmm1,%xmm2
  .byte  197,113,105,211                     // vpunpckhwd    %xmm3,%xmm1,%xmm10
  .byte  197,185,108,194                     // vpunpcklqdq   %xmm2,%xmm8,%xmm0
  .byte  197,241,113,240,8                   // vpsllw        $0x8,%xmm0,%xmm1
  .byte  197,249,113,208,8                   // vpsrlw        $0x8,%xmm0,%xmm0
  .byte  197,241,235,192                     // vpor          %xmm0,%xmm1,%xmm0
  .byte  196,65,25,239,228                   // vpxor         %xmm12,%xmm12,%xmm12
  .byte  196,193,121,105,204                 // vpunpckhwd    %xmm12,%xmm0,%xmm1
  .byte  196,226,121,51,192                  // vpmovzxwd     %xmm0,%xmm0
  .byte  196,227,125,24,193,1                // vinsertf128   $0x1,%xmm1,%ymm0,%ymm0
  .byte  197,252,91,192                      // vcvtdq2ps     %ymm0,%ymm0
  .byte  196,98,125,24,29,198,26,0,0         // vbroadcastss  0x1ac6(%rip),%ymm11        # 6b30 <_sk_callback_avx+0x476>
  .byte  196,193,124,89,195                  // vmulps        %ymm11,%ymm0,%ymm0
  .byte  197,185,109,202                     // vpunpckhqdq   %xmm2,%xmm8,%xmm1
  .byte  197,233,113,241,8                   // vpsllw        $0x8,%xmm1,%xmm2
  .byte  197,241,113,209,8                   // vpsrlw        $0x8,%xmm1,%xmm1
  .byte  197,233,235,201                     // vpor          %xmm1,%xmm2,%xmm1
  .byte  196,193,113,105,212                 // vpunpckhwd    %xmm12,%xmm1,%xmm2
  .byte  196,226,121,51,201                  // vpmovzxwd     %xmm1,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  197,252,91,201                      // vcvtdq2ps     %ymm1,%ymm1
  .byte  196,193,116,89,203                  // vmulps        %ymm11,%ymm1,%ymm1
  .byte  196,193,49,108,210                  // vpunpcklqdq   %xmm10,%xmm9,%xmm2
  .byte  197,225,113,242,8                   // vpsllw        $0x8,%xmm2,%xmm3
  .byte  197,233,113,210,8                   // vpsrlw        $0x8,%xmm2,%xmm2
  .byte  197,225,235,210                     // vpor          %xmm2,%xmm3,%xmm2
  .byte  196,193,105,105,220                 // vpunpckhwd    %xmm12,%xmm2,%xmm3
  .byte  196,226,121,51,210                  // vpmovzxwd     %xmm2,%xmm2
  .byte  196,227,109,24,211,1                // vinsertf128   $0x1,%xmm3,%ymm2,%ymm2
  .byte  197,252,91,210                      // vcvtdq2ps     %ymm2,%ymm2
  .byte  196,193,108,89,211                  // vmulps        %ymm11,%ymm2,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,29,99,26,0,0         // vbroadcastss  0x1a63(%rip),%ymm3        # 6b34 <_sk_callback_avx+0x47a>
  .byte  255,224                             // jmpq          *%rax
  .byte  196,193,121,110,4,65                // vmovd         (%r9,%rax,2),%xmm0
  .byte  196,193,121,196,68,65,4,2           // vpinsrw       $0x2,0x4(%r9,%rax,2),%xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,5                               // jne           50ec <_sk_load_rgb_u16_be_avx+0x11e>
  .byte  233,40,255,255,255                  // jmpq          5014 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,76,65,6             // vmovd         0x6(%r9,%rax,2),%xmm1
  .byte  196,65,113,196,68,65,10,2           // vpinsrw       $0x2,0xa(%r9,%rax,2),%xmm1,%xmm8
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,26                              // jb            511b <_sk_load_rgb_u16_be_avx+0x14d>
  .byte  196,193,121,110,76,65,12            // vmovd         0xc(%r9,%rax,2),%xmm1
  .byte  196,193,113,196,84,65,16,2          // vpinsrw       $0x2,0x10(%r9,%rax,2),%xmm1,%xmm2
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  117,10                              // jne           5120 <_sk_load_rgb_u16_be_avx+0x152>
  .byte  233,249,254,255,255                 // jmpq          5014 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,244,254,255,255                 // jmpq          5014 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,76,65,18            // vmovd         0x12(%r9,%rax,2),%xmm1
  .byte  196,65,113,196,76,65,22,2           // vpinsrw       $0x2,0x16(%r9,%rax,2),%xmm1,%xmm9
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,26                              // jb            514f <_sk_load_rgb_u16_be_avx+0x181>
  .byte  196,193,121,110,76,65,24            // vmovd         0x18(%r9,%rax,2),%xmm1
  .byte  196,193,113,196,76,65,28,2          // vpinsrw       $0x2,0x1c(%r9,%rax,2),%xmm1,%xmm1
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  117,10                              // jne           5154 <_sk_load_rgb_u16_be_avx+0x186>
  .byte  233,197,254,255,255                 // jmpq          5014 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,192,254,255,255                 // jmpq          5014 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  196,193,121,110,92,65,30            // vmovd         0x1e(%r9,%rax,2),%xmm3
  .byte  196,65,97,196,92,65,34,2            // vpinsrw       $0x2,0x22(%r9,%rax,2),%xmm3,%xmm11
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,20                              // jb            517d <_sk_load_rgb_u16_be_avx+0x1af>
  .byte  196,193,121,110,92,65,36            // vmovd         0x24(%r9,%rax,2),%xmm3
  .byte  196,193,97,196,92,65,40,2           // vpinsrw       $0x2,0x28(%r9,%rax,2),%xmm3,%xmm3
  .byte  233,151,254,255,255                 // jmpq          5014 <_sk_load_rgb_u16_be_avx+0x46>
  .byte  233,146,254,255,255                 // jmpq          5014 <_sk_load_rgb_u16_be_avx+0x46>

HIDDEN _sk_store_u16_be_avx
.globl _sk_store_u16_be_avx
FUNCTION(_sk_store_u16_be_avx)
_sk_store_u16_be_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  196,98,125,24,5,160,25,0,0          // vbroadcastss  0x19a0(%rip),%ymm8        # 6b38 <_sk_callback_avx+0x47e>
  .byte  196,65,124,89,200                   // vmulps        %ymm8,%ymm0,%ymm9
  .byte  196,65,125,91,201                   // vcvtps2dq     %ymm9,%ymm9
  .byte  196,67,125,25,202,1                 // vextractf128  $0x1,%ymm9,%xmm10
  .byte  196,66,49,43,202                    // vpackusdw     %xmm10,%xmm9,%xmm9
  .byte  196,193,41,113,241,8                // vpsllw        $0x8,%xmm9,%xmm10
  .byte  196,193,49,113,209,8                // vpsrlw        $0x8,%xmm9,%xmm9
  .byte  196,65,41,235,201                   // vpor          %xmm9,%xmm10,%xmm9
  .byte  196,65,116,89,208                   // vmulps        %ymm8,%ymm1,%ymm10
  .byte  196,65,125,91,210                   // vcvtps2dq     %ymm10,%ymm10
  .byte  196,67,125,25,211,1                 // vextractf128  $0x1,%ymm10,%xmm11
  .byte  196,66,41,43,211                    // vpackusdw     %xmm11,%xmm10,%xmm10
  .byte  196,193,33,113,242,8                // vpsllw        $0x8,%xmm10,%xmm11
  .byte  196,193,41,113,210,8                // vpsrlw        $0x8,%xmm10,%xmm10
  .byte  196,65,33,235,210                   // vpor          %xmm10,%xmm11,%xmm10
  .byte  196,65,108,89,216                   // vmulps        %ymm8,%ymm2,%ymm11
  .byte  196,65,125,91,219                   // vcvtps2dq     %ymm11,%ymm11
  .byte  196,67,125,25,220,1                 // vextractf128  $0x1,%ymm11,%xmm12
  .byte  196,66,33,43,220                    // vpackusdw     %xmm12,%xmm11,%xmm11
  .byte  196,193,25,113,243,8                // vpsllw        $0x8,%xmm11,%xmm12
  .byte  196,193,33,113,211,8                // vpsrlw        $0x8,%xmm11,%xmm11
  .byte  196,65,25,235,219                   // vpor          %xmm11,%xmm12,%xmm11
  .byte  196,65,100,89,192                   // vmulps        %ymm8,%ymm3,%ymm8
  .byte  196,65,125,91,192                   // vcvtps2dq     %ymm8,%ymm8
  .byte  196,67,125,25,196,1                 // vextractf128  $0x1,%ymm8,%xmm12
  .byte  196,66,57,43,196                    // vpackusdw     %xmm12,%xmm8,%xmm8
  .byte  196,193,25,113,240,8                // vpsllw        $0x8,%xmm8,%xmm12
  .byte  196,193,57,113,208,8                // vpsrlw        $0x8,%xmm8,%xmm8
  .byte  196,65,25,235,192                   // vpor          %xmm8,%xmm12,%xmm8
  .byte  196,65,49,97,226                    // vpunpcklwd    %xmm10,%xmm9,%xmm12
  .byte  196,65,49,105,234                   // vpunpckhwd    %xmm10,%xmm9,%xmm13
  .byte  196,65,33,97,200                    // vpunpcklwd    %xmm8,%xmm11,%xmm9
  .byte  196,65,33,105,192                   // vpunpckhwd    %xmm8,%xmm11,%xmm8
  .byte  196,65,25,98,217                    // vpunpckldq    %xmm9,%xmm12,%xmm11
  .byte  196,65,25,106,209                   // vpunpckhdq    %xmm9,%xmm12,%xmm10
  .byte  196,65,17,98,200                    // vpunpckldq    %xmm8,%xmm13,%xmm9
  .byte  196,65,17,106,192                   // vpunpckhdq    %xmm8,%xmm13,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,31                              // jne           527c <_sk_store_u16_be_avx+0xfa>
  .byte  196,65,120,17,28,65                 // vmovups       %xmm11,(%r9,%rax,2)
  .byte  196,65,120,17,84,65,16              // vmovups       %xmm10,0x10(%r9,%rax,2)
  .byte  196,65,120,17,76,65,32              // vmovups       %xmm9,0x20(%r9,%rax,2)
  .byte  196,65,122,127,68,65,48             // vmovdqu       %xmm8,0x30(%r9,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,214,28,65                // vmovq         %xmm11,(%r9,%rax,2)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            5278 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,92,65,8               // vmovhpd       %xmm11,0x8(%r9,%rax,2)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            5278 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,84,65,16             // vmovq         %xmm10,0x10(%r9,%rax,2)
  .byte  116,218                             // je            5278 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,84,65,24              // vmovhpd       %xmm10,0x18(%r9,%rax,2)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,205                             // jb            5278 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,76,65,32             // vmovq         %xmm9,0x20(%r9,%rax,2)
  .byte  116,196                             // je            5278 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,23,76,65,40              // vmovhpd       %xmm9,0x28(%r9,%rax,2)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,183                             // jb            5278 <_sk_store_u16_be_avx+0xf6>
  .byte  196,65,121,214,68,65,48             // vmovq         %xmm8,0x30(%r9,%rax,2)
  .byte  235,174                             // jmp           5278 <_sk_store_u16_be_avx+0xf6>

HIDDEN _sk_load_f32_avx
.globl _sk_load_f32_avx
FUNCTION(_sk_load_f32_avx)
_sk_load_f32_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  119,110                             // ja            5340 <_sk_load_f32_avx+0x76>
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  76,141,29,132,0,0,0                 // lea           0x84(%rip),%r11        # 5368 <_sk_load_f32_avx+0x9e>
  .byte  75,99,4,131                         // movslq        (%r11,%r8,4),%rax
  .byte  76,1,216                            // add           %r11,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,3,125,24,68,145,112,1           // vinsertf128   $0x1,0x70(%r9,%r10,4),%ymm0,%ymm8
  .byte  196,131,125,24,92,145,96,1          // vinsertf128   $0x1,0x60(%r9,%r10,4),%ymm0,%ymm3
  .byte  196,131,125,24,76,145,80,1          // vinsertf128   $0x1,0x50(%r9,%r10,4),%ymm0,%ymm1
  .byte  196,131,125,24,84,145,64,1          // vinsertf128   $0x1,0x40(%r9,%r10,4),%ymm0,%ymm2
  .byte  196,129,121,16,68,145,48            // vmovupd       0x30(%r9,%r10,4),%xmm0
  .byte  196,195,125,13,192,12               // vblendpd      $0xc,%ymm8,%ymm0,%ymm0
  .byte  196,1,121,16,68,145,32              // vmovupd       0x20(%r9,%r10,4),%xmm8
  .byte  196,99,61,13,203,12                 // vblendpd      $0xc,%ymm3,%ymm8,%ymm9
  .byte  196,129,121,16,92,145,16            // vmovupd       0x10(%r9,%r10,4),%xmm3
  .byte  196,99,101,13,209,12                // vblendpd      $0xc,%ymm1,%ymm3,%ymm10
  .byte  196,129,121,16,12,145               // vmovupd       (%r9,%r10,4),%xmm1
  .byte  196,227,117,13,202,12               // vblendpd      $0xc,%ymm2,%ymm1,%ymm1
  .byte  196,193,116,20,210                  // vunpcklps     %ymm10,%ymm1,%ymm2
  .byte  196,193,116,21,218                  // vunpckhps     %ymm10,%ymm1,%ymm3
  .byte  197,180,20,200                      // vunpcklps     %ymm0,%ymm9,%ymm1
  .byte  197,52,21,192                       // vunpckhps     %ymm0,%ymm9,%ymm8
  .byte  197,237,20,193                      // vunpcklpd     %ymm1,%ymm2,%ymm0
  .byte  197,237,21,201                      // vunpckhpd     %ymm1,%ymm2,%ymm1
  .byte  196,193,101,20,208                  // vunpcklpd     %ymm8,%ymm3,%ymm2
  .byte  196,193,101,21,216                  // vunpckhpd     %ymm8,%ymm3,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  133,255                             // test          %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  191,255,255,255,178                 // mov           $0xb2ffffff,%edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,165,255,255,255,157             // jmpq          *-0x62000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,149,255,255,255,141             // callq         *-0x72000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_f32_avx
.globl _sk_store_f32_avx
FUNCTION(_sk_store_f32_avx)
_sk_store_f32_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  197,124,20,193                      // vunpcklps     %ymm1,%ymm0,%ymm8
  .byte  197,124,21,217                      // vunpckhps     %ymm1,%ymm0,%ymm11
  .byte  197,108,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm9
  .byte  197,108,21,227                      // vunpckhps     %ymm3,%ymm2,%ymm12
  .byte  196,65,61,20,209                    // vunpcklpd     %ymm9,%ymm8,%ymm10
  .byte  196,65,61,21,201                    // vunpckhpd     %ymm9,%ymm8,%ymm9
  .byte  196,65,37,20,196                    // vunpcklpd     %ymm12,%ymm11,%ymm8
  .byte  196,65,37,21,220                    // vunpckhpd     %ymm12,%ymm11,%ymm11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,55                              // jne           53f5 <_sk_store_f32_avx+0x6d>
  .byte  196,67,45,24,225,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm12
  .byte  196,67,61,24,235,1                  // vinsertf128   $0x1,%xmm11,%ymm8,%ymm13
  .byte  196,67,45,6,201,49                  // vperm2f128    $0x31,%ymm9,%ymm10,%ymm9
  .byte  196,67,61,6,195,49                  // vperm2f128    $0x31,%ymm11,%ymm8,%ymm8
  .byte  196,65,125,17,36,129                // vmovupd       %ymm12,(%r9,%rax,4)
  .byte  196,65,125,17,108,129,32            // vmovupd       %ymm13,0x20(%r9,%rax,4)
  .byte  196,65,125,17,76,129,64             // vmovupd       %ymm9,0x40(%r9,%rax,4)
  .byte  196,65,125,17,68,129,96             // vmovupd       %ymm8,0x60(%r9,%rax,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  196,65,121,17,20,129                // vmovupd       %xmm10,(%r9,%rax,4)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            53f1 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,76,129,16             // vmovupd       %xmm9,0x10(%r9,%rax,4)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            53f1 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,68,129,32             // vmovupd       %xmm8,0x20(%r9,%rax,4)
  .byte  116,218                             // je            53f1 <_sk_store_f32_avx+0x69>
  .byte  196,65,121,17,92,129,48             // vmovupd       %xmm11,0x30(%r9,%rax,4)
  .byte  73,131,248,5                        // cmp           $0x5,%r8
  .byte  114,205                             // jb            53f1 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,84,129,64,1           // vextractf128  $0x1,%ymm10,0x40(%r9,%rax,4)
  .byte  116,195                             // je            53f1 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,76,129,80,1           // vextractf128  $0x1,%ymm9,0x50(%r9,%rax,4)
  .byte  73,131,248,7                        // cmp           $0x7,%r8
  .byte  114,181                             // jb            53f1 <_sk_store_f32_avx+0x69>
  .byte  196,67,125,25,68,129,96,1           // vextractf128  $0x1,%ymm8,0x60(%r9,%rax,4)
  .byte  235,171                             // jmp           53f1 <_sk_store_f32_avx+0x69>

HIDDEN _sk_clamp_x_avx
.globl _sk_clamp_x_avx
FUNCTION(_sk_clamp_x_avx)
_sk_clamp_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,95,200                       // vmaxps        %ymm0,%ymm8,%ymm9
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,99,125,25,192,1                 // vextractf128  $0x1,%ymm8,%xmm0
  .byte  196,65,41,118,210                   // vpcmpeqd      %xmm10,%xmm10,%xmm10
  .byte  196,193,121,254,194                 // vpaddd        %xmm10,%xmm0,%xmm0
  .byte  196,65,57,254,194                   // vpaddd        %xmm10,%xmm8,%xmm8
  .byte  196,227,61,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm8,%ymm0
  .byte  197,180,93,192                      // vminps        %ymm0,%ymm9,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_avx
.globl _sk_clamp_y_avx
FUNCTION(_sk_clamp_y_avx)
_sk_clamp_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,95,201                       // vmaxps        %ymm1,%ymm8,%ymm9
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,99,125,25,193,1                 // vextractf128  $0x1,%ymm8,%xmm1
  .byte  196,65,41,118,210                   // vpcmpeqd      %xmm10,%xmm10,%xmm10
  .byte  196,193,113,254,202                 // vpaddd        %xmm10,%xmm1,%xmm1
  .byte  196,65,57,254,194                   // vpaddd        %xmm10,%xmm8,%xmm8
  .byte  196,227,61,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm8,%ymm1
  .byte  197,180,93,201                      // vminps        %ymm1,%ymm9,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_avx
.globl _sk_repeat_x_avx
FUNCTION(_sk_repeat_x_avx)
_sk_repeat_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,4                  // vbroadcastss  0x4(%rax),%ymm8
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,65,124,92,192                   // vsubps        %ymm8,%ymm0,%ymm8
  .byte  196,99,125,25,200,1                 // vextractf128  $0x1,%ymm9,%xmm0
  .byte  196,65,41,118,210                   // vpcmpeqd      %xmm10,%xmm10,%xmm10
  .byte  196,193,121,254,194                 // vpaddd        %xmm10,%xmm0,%xmm0
  .byte  196,65,49,254,202                   // vpaddd        %xmm10,%xmm9,%xmm9
  .byte  196,227,53,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm9,%ymm0
  .byte  197,188,93,192                      // vminps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_avx
.globl _sk_repeat_y_avx
FUNCTION(_sk_repeat_y_avx)
_sk_repeat_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,64,4                  // vbroadcastss  0x4(%rax),%ymm8
  .byte  197,60,89,193                       // vmulps        %ymm1,%ymm8,%ymm8
  .byte  196,67,125,8,192,1                  // vroundps      $0x1,%ymm8,%ymm8
  .byte  196,98,125,24,8                     // vbroadcastss  (%rax),%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,65,116,92,192                   // vsubps        %ymm8,%ymm1,%ymm8
  .byte  196,99,125,25,201,1                 // vextractf128  $0x1,%ymm9,%xmm1
  .byte  196,65,41,118,210                   // vpcmpeqd      %xmm10,%xmm10,%xmm10
  .byte  196,193,113,254,202                 // vpaddd        %xmm10,%xmm1,%xmm1
  .byte  196,65,49,254,202                   // vpaddd        %xmm10,%xmm9,%xmm9
  .byte  196,227,53,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm9,%ymm1
  .byte  197,188,93,201                      // vminps        %ymm1,%ymm8,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_avx
.globl _sk_mirror_x_avx
FUNCTION(_sk_mirror_x_avx)
_sk_mirror_x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,0                       // vmovd         (%rax),%xmm8
  .byte  197,122,16,72,4                     // vmovss        0x4(%rax),%xmm9
  .byte  196,65,121,112,208,0                // vpshufd       $0x0,%xmm8,%xmm10
  .byte  196,67,45,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm10,%ymm10
  .byte  196,65,124,92,218                   // vsubps        %ymm10,%ymm0,%ymm11
  .byte  196,193,58,88,192                   // vaddss        %xmm8,%xmm8,%xmm0
  .byte  196,227,121,4,192,0                 // vpermilps     $0x0,%xmm0,%xmm0
  .byte  196,99,125,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm0,%ymm8
  .byte  197,178,89,5,211,21,0,0             // vmulss        0x15d3(%rip),%xmm9,%xmm0        # 6b3c <_sk_callback_avx+0x482>
  .byte  196,227,121,4,192,0                 // vpermilps     $0x0,%xmm0,%xmm0
  .byte  196,227,125,24,192,1                // vinsertf128   $0x1,%xmm0,%ymm0,%ymm0
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  196,227,125,8,192,1                 // vroundps      $0x1,%ymm0,%ymm0
  .byte  196,193,124,89,192                  // vmulps        %ymm8,%ymm0,%ymm0
  .byte  197,164,92,192                      // vsubps        %ymm0,%ymm11,%ymm0
  .byte  196,193,124,92,194                  // vsubps        %ymm10,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,60,84,192                       // vandps        %ymm0,%ymm8,%ymm8
  .byte  196,99,125,25,208,1                 // vextractf128  $0x1,%ymm10,%xmm0
  .byte  196,65,49,118,201                   // vpcmpeqd      %xmm9,%xmm9,%xmm9
  .byte  196,193,121,254,193                 // vpaddd        %xmm9,%xmm0,%xmm0
  .byte  196,65,41,254,201                   // vpaddd        %xmm9,%xmm10,%xmm9
  .byte  196,227,53,24,192,1                 // vinsertf128   $0x1,%xmm0,%ymm9,%ymm0
  .byte  197,188,93,192                      // vminps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_avx
.globl _sk_mirror_y_avx
FUNCTION(_sk_mirror_y_avx)
_sk_mirror_y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,121,110,0                       // vmovd         (%rax),%xmm8
  .byte  197,122,16,72,4                     // vmovss        0x4(%rax),%xmm9
  .byte  196,65,121,112,208,0                // vpshufd       $0x0,%xmm8,%xmm10
  .byte  196,67,45,24,210,1                  // vinsertf128   $0x1,%xmm10,%ymm10,%ymm10
  .byte  196,65,116,92,218                   // vsubps        %ymm10,%ymm1,%ymm11
  .byte  196,193,58,88,200                   // vaddss        %xmm8,%xmm8,%xmm1
  .byte  196,227,121,4,201,0                 // vpermilps     $0x0,%xmm1,%xmm1
  .byte  196,99,117,24,193,1                 // vinsertf128   $0x1,%xmm1,%ymm1,%ymm8
  .byte  197,178,89,13,78,21,0,0             // vmulss        0x154e(%rip),%xmm9,%xmm1        # 6b40 <_sk_callback_avx+0x486>
  .byte  196,227,121,4,201,0                 // vpermilps     $0x0,%xmm1,%xmm1
  .byte  196,227,117,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm1,%ymm1
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  196,227,125,8,201,1                 // vroundps      $0x1,%ymm1,%ymm1
  .byte  196,193,116,89,200                  // vmulps        %ymm8,%ymm1,%ymm1
  .byte  197,164,92,201                      // vsubps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,92,202                  // vsubps        %ymm10,%ymm1,%ymm1
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,193                       // vsubps        %ymm1,%ymm8,%ymm8
  .byte  197,60,84,193                       // vandps        %ymm1,%ymm8,%ymm8
  .byte  196,99,125,25,209,1                 // vextractf128  $0x1,%ymm10,%xmm1
  .byte  196,65,49,118,201                   // vpcmpeqd      %xmm9,%xmm9,%xmm9
  .byte  196,193,113,254,201                 // vpaddd        %xmm9,%xmm1,%xmm1
  .byte  196,65,41,254,201                   // vpaddd        %xmm9,%xmm10,%xmm9
  .byte  196,227,53,24,201,1                 // vinsertf128   $0x1,%xmm1,%ymm9,%ymm1
  .byte  197,188,93,201                      // vminps        %ymm1,%ymm8,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_1_avx
.globl _sk_clamp_x_1_avx
FUNCTION(_sk_clamp_x_1_avx)
_sk_clamp_x_1_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,188,95,192                      // vmaxps        %ymm0,%ymm8,%ymm0
  .byte  196,98,125,24,5,236,20,0,0          // vbroadcastss  0x14ec(%rip),%ymm8        # 6b44 <_sk_callback_avx+0x48a>
  .byte  196,193,124,93,192                  // vminps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_1_avx
.globl _sk_repeat_x_1_avx
FUNCTION(_sk_repeat_x_1_avx)
_sk_repeat_x_1_avx:
  .byte  196,99,125,8,192,1                  // vroundps      $0x1,%ymm0,%ymm8
  .byte  196,193,124,92,192                  // vsubps        %ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_1_avx
.globl _sk_mirror_x_1_avx
FUNCTION(_sk_mirror_x_1_avx)
_sk_mirror_x_1_avx:
  .byte  196,98,125,24,5,207,20,0,0          // vbroadcastss  0x14cf(%rip),%ymm8        # 6b48 <_sk_callback_avx+0x48e>
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,13,197,20,0,0         // vbroadcastss  0x14c5(%rip),%ymm9        # 6b4c <_sk_callback_avx+0x492>
  .byte  196,65,124,89,201                   // vmulps        %ymm9,%ymm0,%ymm9
  .byte  196,67,125,8,201,1                  // vroundps      $0x1,%ymm9,%ymm9
  .byte  196,65,52,88,201                    // vaddps        %ymm9,%ymm9,%ymm9
  .byte  196,193,124,92,193                  // vsubps        %ymm9,%ymm0,%ymm0
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,192                       // vsubps        %ymm0,%ymm8,%ymm8
  .byte  197,188,84,192                      // vandps        %ymm0,%ymm8,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_avx
.globl _sk_luminance_to_alpha_avx
FUNCTION(_sk_luminance_to_alpha_avx)
_sk_luminance_to_alpha_avx:
  .byte  196,226,125,24,29,149,20,0,0        // vbroadcastss  0x1495(%rip),%ymm3        # 6b50 <_sk_callback_avx+0x496>
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,29,140,20,0,0        // vbroadcastss  0x148c(%rip),%ymm3        # 6b54 <_sk_callback_avx+0x49a>
  .byte  197,244,89,203                      // vmulps        %ymm3,%ymm1,%ymm1
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  196,226,125,24,13,127,20,0,0        // vbroadcastss  0x147f(%rip),%ymm1        # 6b58 <_sk_callback_avx+0x49e>
  .byte  197,236,89,201                      // vmulps        %ymm1,%ymm2,%ymm1
  .byte  197,252,88,217                      // vaddps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,87,192                      // vxorps        %ymm0,%ymm0,%ymm0
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  197,236,87,210                      // vxorps        %ymm2,%ymm2,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_avx
.globl _sk_matrix_2x3_avx
FUNCTION(_sk_matrix_2x3_avx)
_sk_matrix_2x3_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,8                  // vbroadcastss  0x8(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,12                 // vbroadcastss  0xc(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  197,180,89,192                      // vmulps        %ymm0,%ymm9,%ymm0
  .byte  197,252,88,201                      // vaddps        %ymm1,%ymm0,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_avx
.globl _sk_matrix_3x4_avx
FUNCTION(_sk_matrix_3x4_avx)
_sk_matrix_3x4_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,98,125,24,88,36                 // vbroadcastss  0x24(%rax),%ymm11
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,28                 // vbroadcastss  0x1c(%rax),%ymm11
  .byte  196,98,125,24,96,40                 // vbroadcastss  0x28(%rax),%ymm12
  .byte  197,36,89,218                       // vmulps        %ymm2,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  196,98,125,24,104,44                // vbroadcastss  0x2c(%rax),%ymm13
  .byte  197,156,89,210                      // vmulps        %ymm2,%ymm12,%ymm2
  .byte  196,193,108,88,213                  // vaddps        %ymm13,%ymm2,%ymm2
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  197,252,88,209                      // vaddps        %ymm1,%ymm0,%ymm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_avx
.globl _sk_matrix_4x5_avx
FUNCTION(_sk_matrix_4x5_avx)
_sk_matrix_4x5_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,16                 // vbroadcastss  0x10(%rax),%ymm9
  .byte  196,98,125,24,80,32                 // vbroadcastss  0x20(%rax),%ymm10
  .byte  196,98,125,24,88,48                 // vbroadcastss  0x30(%rax),%ymm11
  .byte  196,98,125,24,96,64                 // vbroadcastss  0x40(%rax),%ymm12
  .byte  197,36,89,219                       // vmulps        %ymm3,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,210                       // vmulps        %ymm2,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,20                 // vbroadcastss  0x14(%rax),%ymm10
  .byte  196,98,125,24,88,36                 // vbroadcastss  0x24(%rax),%ymm11
  .byte  196,98,125,24,96,52                 // vbroadcastss  0x34(%rax),%ymm12
  .byte  196,98,125,24,104,68                // vbroadcastss  0x44(%rax),%ymm13
  .byte  197,28,89,227                       // vmulps        %ymm3,%ymm12,%ymm12
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  197,36,89,218                       // vmulps        %ymm2,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  196,98,125,24,88,24                 // vbroadcastss  0x18(%rax),%ymm11
  .byte  196,98,125,24,96,40                 // vbroadcastss  0x28(%rax),%ymm12
  .byte  196,98,125,24,104,56                // vbroadcastss  0x38(%rax),%ymm13
  .byte  196,98,125,24,112,72                // vbroadcastss  0x48(%rax),%ymm14
  .byte  197,20,89,235                       // vmulps        %ymm3,%ymm13,%ymm13
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  197,28,89,226                       // vmulps        %ymm2,%ymm12,%ymm12
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  197,36,89,217                       // vmulps        %ymm1,%ymm11,%ymm11
  .byte  196,65,36,88,220                    // vaddps        %ymm12,%ymm11,%ymm11
  .byte  197,44,89,208                       // vmulps        %ymm0,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,98,125,24,88,12                 // vbroadcastss  0xc(%rax),%ymm11
  .byte  196,98,125,24,96,28                 // vbroadcastss  0x1c(%rax),%ymm12
  .byte  196,98,125,24,104,44                // vbroadcastss  0x2c(%rax),%ymm13
  .byte  196,98,125,24,112,60                // vbroadcastss  0x3c(%rax),%ymm14
  .byte  196,98,125,24,120,76                // vbroadcastss  0x4c(%rax),%ymm15
  .byte  197,140,89,219                      // vmulps        %ymm3,%ymm14,%ymm3
  .byte  196,193,100,88,223                  // vaddps        %ymm15,%ymm3,%ymm3
  .byte  197,148,89,210                      // vmulps        %ymm2,%ymm13,%ymm2
  .byte  197,236,88,211                      // vaddps        %ymm3,%ymm2,%ymm2
  .byte  197,156,89,201                      // vmulps        %ymm1,%ymm12,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  197,164,89,192                      // vmulps        %ymm0,%ymm11,%ymm0
  .byte  197,252,88,217                      // vaddps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  197,124,41,210                      // vmovaps       %ymm10,%ymm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x3_avx
.globl _sk_matrix_4x3_avx
FUNCTION(_sk_matrix_4x3_avx)
_sk_matrix_4x3_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,16                   // vbroadcastss  (%rax),%ymm2
  .byte  196,226,125,24,88,16                // vbroadcastss  0x10(%rax),%ymm3
  .byte  196,98,125,24,64,32                 // vbroadcastss  0x20(%rax),%ymm8
  .byte  197,228,89,217                      // vmulps        %ymm1,%ymm3,%ymm3
  .byte  196,193,100,88,216                  // vaddps        %ymm8,%ymm3,%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,108,88,195                      // vaddps        %ymm3,%ymm2,%ymm8
  .byte  196,226,125,24,80,4                 // vbroadcastss  0x4(%rax),%ymm2
  .byte  196,226,125,24,88,20                // vbroadcastss  0x14(%rax),%ymm3
  .byte  196,98,125,24,72,36                 // vbroadcastss  0x24(%rax),%ymm9
  .byte  197,228,89,217                      // vmulps        %ymm1,%ymm3,%ymm3
  .byte  196,193,100,88,217                  // vaddps        %ymm9,%ymm3,%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,108,88,203                      // vaddps        %ymm3,%ymm2,%ymm9
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,24                // vbroadcastss  0x18(%rax),%ymm3
  .byte  196,98,125,24,80,40                 // vbroadcastss  0x28(%rax),%ymm10
  .byte  197,228,89,217                      // vmulps        %ymm1,%ymm3,%ymm3
  .byte  196,193,100,88,218                  // vaddps        %ymm10,%ymm3,%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,236,88,211                      // vaddps        %ymm3,%ymm2,%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  196,98,125,24,80,28                 // vbroadcastss  0x1c(%rax),%ymm10
  .byte  196,98,125,24,88,44                 // vbroadcastss  0x2c(%rax),%ymm11
  .byte  197,172,89,201                      // vmulps        %ymm1,%ymm10,%ymm1
  .byte  196,193,116,88,203                  // vaddps        %ymm11,%ymm1,%ymm1
  .byte  197,228,89,192                      // vmulps        %ymm0,%ymm3,%ymm0
  .byte  197,252,88,217                      // vaddps        %ymm1,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,124,41,201                      // vmovaps       %ymm9,%ymm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_avx
.globl _sk_matrix_perspective_avx
FUNCTION(_sk_matrix_perspective_avx)
_sk_matrix_perspective_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,0                     // vbroadcastss  (%rax),%ymm8
  .byte  196,98,125,24,72,4                  // vbroadcastss  0x4(%rax),%ymm9
  .byte  196,98,125,24,80,8                  // vbroadcastss  0x8(%rax),%ymm10
  .byte  197,52,89,201                       // vmulps        %ymm1,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  197,60,89,192                       // vmulps        %ymm0,%ymm8,%ymm8
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,72,12                 // vbroadcastss  0xc(%rax),%ymm9
  .byte  196,98,125,24,80,16                 // vbroadcastss  0x10(%rax),%ymm10
  .byte  196,98,125,24,88,20                 // vbroadcastss  0x14(%rax),%ymm11
  .byte  197,44,89,209                       // vmulps        %ymm1,%ymm10,%ymm10
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  197,52,89,200                       // vmulps        %ymm0,%ymm9,%ymm9
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,80,24                 // vbroadcastss  0x18(%rax),%ymm10
  .byte  196,98,125,24,88,28                 // vbroadcastss  0x1c(%rax),%ymm11
  .byte  196,98,125,24,96,32                 // vbroadcastss  0x20(%rax),%ymm12
  .byte  197,164,89,201                      // vmulps        %ymm1,%ymm11,%ymm1
  .byte  196,193,116,88,204                  // vaddps        %ymm12,%ymm1,%ymm1
  .byte  197,172,89,192                      // vmulps        %ymm0,%ymm10,%ymm0
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,83,200                      // vrcpps        %ymm0,%ymm1
  .byte  197,188,89,193                      // vmulps        %ymm1,%ymm8,%ymm0
  .byte  197,180,89,201                      // vmulps        %ymm1,%ymm9,%ymm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_gradient_avx
.globl _sk_evenly_spaced_gradient_avx
FUNCTION(_sk_evenly_spaced_gradient_avx)
_sk_evenly_spaced_gradient_avx:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  197,252,17,124,36,216               // vmovups       %ymm7,-0x28(%rsp)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  72,139,104,8                        // mov           0x8(%rax),%rbp
  .byte  72,255,203                          // dec           %rbx
  .byte  120,7                               // js            5a35 <_sk_evenly_spaced_gradient_avx+0x25>
  .byte  196,225,242,42,203                  // vcvtsi2ss     %rbx,%xmm1,%xmm1
  .byte  235,21                              // jmp           5a4a <_sk_evenly_spaced_gradient_avx+0x3a>
  .byte  73,137,217                          // mov           %rbx,%r9
  .byte  73,209,233                          // shr           %r9
  .byte  131,227,1                           // and           $0x1,%ebx
  .byte  76,9,203                            // or            %r9,%rbx
  .byte  196,225,242,42,203                  // vcvtsi2ss     %rbx,%xmm1,%xmm1
  .byte  197,242,88,201                      // vaddss        %xmm1,%xmm1,%xmm1
  .byte  196,227,121,4,201,0                 // vpermilps     $0x0,%xmm1,%xmm1
  .byte  196,227,117,24,201,1                // vinsertf128   $0x1,%xmm1,%ymm1,%ymm1
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,254,91,201                      // vcvttps2dq    %ymm1,%ymm1
  .byte  196,195,249,22,201,1                // vpextrq       $0x1,%xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,193,249,126,203                 // vmovq         %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,195,249,22,204,1                // vpextrq       $0x1,%xmm1,%r12
  .byte  69,137,231                          // mov           %r12d,%r15d
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,225,249,126,203                 // vmovq         %xmm1,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,227,113,33,76,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm1
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,33,122,16,68,165,0              // vmovss        0x0(%rbp,%r12,4),%xmm8
  .byte  196,161,122,16,92,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm3
  .byte  196,35,97,33,76,157,0,16            // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm3,%xmm9
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,33,122,16,92,141,0              // vmovss        0x0(%rbp,%r9,4),%xmm11
  .byte  196,99,113,33,226,32                // vinsertps     $0x20,%xmm2,%xmm1,%xmm12
  .byte  72,139,104,40                       // mov           0x28(%rax),%rbp
  .byte  196,161,122,16,84,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm2
  .byte  196,99,105,33,108,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm2,%xmm13
  .byte  196,161,122,16,92,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm3
  .byte  196,161,122,16,76,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm1
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,35,105,33,116,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm14
  .byte  196,33,122,16,124,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm15
  .byte  196,33,122,16,84,141,0              // vmovss        0x0(%rbp,%r9,4),%xmm10
  .byte  196,67,25,33,192,48                 // vinsertps     $0x30,%xmm8,%xmm12,%xmm8
  .byte  196,227,49,33,215,32                // vinsertps     $0x20,%xmm7,%xmm9,%xmm2
  .byte  196,195,105,33,211,48               // vinsertps     $0x30,%xmm11,%xmm2,%xmm2
  .byte  196,67,109,24,192,1                 // vinsertf128   $0x1,%xmm8,%ymm2,%ymm8
  .byte  196,227,17,33,211,32                // vinsertps     $0x20,%xmm3,%xmm13,%xmm2
  .byte  196,99,105,33,201,48                // vinsertps     $0x30,%xmm1,%xmm2,%xmm9
  .byte  72,139,104,16                       // mov           0x10(%rax),%rbp
  .byte  196,161,122,16,84,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm2
  .byte  196,99,105,33,92,157,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm2,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,161,122,16,76,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm1
  .byte  196,161,122,16,124,181,0            // vmovss        0x0(%rbp,%r14,4),%xmm7
  .byte  196,163,65,33,124,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm7,%xmm7
  .byte  196,161,122,16,92,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm3
  .byte  196,33,122,16,108,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm13
  .byte  196,195,9,33,215,32                 // vinsertps     $0x20,%xmm15,%xmm14,%xmm2
  .byte  196,195,105,33,210,48               // vinsertps     $0x30,%xmm10,%xmm2,%xmm2
  .byte  196,67,109,24,241,1                 // vinsertf128   $0x1,%xmm9,%ymm2,%ymm14
  .byte  196,195,33,33,212,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm2
  .byte  196,99,105,33,201,48                // vinsertps     $0x30,%xmm1,%xmm2,%xmm9
  .byte  196,99,65,33,211,32                 // vinsertps     $0x20,%xmm3,%xmm7,%xmm10
  .byte  72,139,104,48                       // mov           0x30(%rax),%rbp
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,99,97,33,92,157,0,16            // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm3,%xmm11
  .byte  196,33,122,16,124,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm15
  .byte  196,33,122,16,100,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm12
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,163,105,33,84,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm2
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,161,122,16,92,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm3
  .byte  196,67,41,33,213,48                 // vinsertps     $0x30,%xmm13,%xmm10,%xmm10
  .byte  196,67,45,24,233,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm13
  .byte  196,195,33,33,207,32                // vinsertps     $0x20,%xmm15,%xmm11,%xmm1
  .byte  196,67,113,33,204,48                // vinsertps     $0x30,%xmm12,%xmm1,%xmm9
  .byte  196,227,105,33,215,32               // vinsertps     $0x20,%xmm7,%xmm2,%xmm2
  .byte  196,99,105,33,211,48                // vinsertps     $0x30,%xmm3,%xmm2,%xmm10
  .byte  72,139,104,24                       // mov           0x18(%rax),%rbp
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,99,97,33,92,157,0,16            // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm3,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,33,122,16,124,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm15
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,163,105,33,84,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm2
  .byte  196,161,122,16,92,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm3
  .byte  196,161,122,16,124,141,0            // vmovss        0x0(%rbp,%r9,4),%xmm7
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,195,33,33,204,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm1
  .byte  196,195,113,33,207,48               // vinsertps     $0x30,%xmm15,%xmm1,%xmm1
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,227,105,33,215,48               // vinsertps     $0x30,%xmm7,%xmm2,%xmm2
  .byte  196,99,109,24,209,1                 // vinsertf128   $0x1,%xmm1,%ymm2,%ymm10
  .byte  72,139,104,56                       // mov           0x38(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,99,113,33,92,157,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,33,122,16,124,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm15
  .byte  196,161,122,16,124,181,0            // vmovss        0x0(%rbp,%r14,4),%xmm7
  .byte  196,163,65,33,124,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm7,%xmm7
  .byte  196,161,122,16,76,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm1
  .byte  196,161,122,16,84,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm2
  .byte  196,195,33,33,220,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm3
  .byte  196,195,97,33,223,48                // vinsertps     $0x30,%xmm15,%xmm3,%xmm3
  .byte  196,227,65,33,201,32                // vinsertps     $0x20,%xmm1,%xmm7,%xmm1
  .byte  196,227,113,33,202,48               // vinsertps     $0x30,%xmm2,%xmm1,%xmm1
  .byte  196,99,117,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm1,%ymm11
  .byte  72,139,104,32                       // mov           0x20(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,227,113,33,76,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm1
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,227,113,33,202,32               // vinsertps     $0x20,%xmm2,%xmm1,%xmm1
  .byte  196,161,122,16,84,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm2
  .byte  196,161,122,16,92,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm3
  .byte  196,35,97,33,100,157,0,16           // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm3,%xmm12
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,161,122,16,92,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm3
  .byte  196,99,113,33,250,48                // vinsertps     $0x30,%xmm2,%xmm1,%xmm15
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,161,122,16,20,168               // vmovss        (%rax,%r13,4),%xmm2
  .byte  196,227,105,33,20,152,16            // vinsertps     $0x10,(%rax,%rbx,4),%xmm2,%xmm2
  .byte  196,227,25,33,255,32                // vinsertps     $0x20,%xmm7,%xmm12,%xmm7
  .byte  196,161,122,16,12,184               // vmovss        (%rax,%r15,4),%xmm1
  .byte  196,227,65,33,219,48                // vinsertps     $0x30,%xmm3,%xmm7,%xmm3
  .byte  196,161,122,16,60,160               // vmovss        (%rax,%r12,4),%xmm7
  .byte  196,67,101,24,231,1                 // vinsertf128   $0x1,%xmm15,%ymm3,%ymm12
  .byte  196,161,122,16,28,176               // vmovss        (%rax,%r14,4),%xmm3
  .byte  196,163,97,33,28,152,16             // vinsertps     $0x10,(%rax,%r11,4),%xmm3,%xmm3
  .byte  196,227,105,33,201,32               // vinsertps     $0x20,%xmm1,%xmm2,%xmm1
  .byte  196,161,122,16,20,144               // vmovss        (%rax,%r10,4),%xmm2
  .byte  196,227,113,33,207,48               // vinsertps     $0x30,%xmm7,%xmm1,%xmm1
  .byte  196,161,122,16,60,136               // vmovss        (%rax,%r9,4),%xmm7
  .byte  196,227,97,33,210,32                // vinsertps     $0x20,%xmm2,%xmm3,%xmm2
  .byte  196,227,105,33,215,48               // vinsertps     $0x30,%xmm7,%xmm2,%xmm2
  .byte  196,227,109,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm2,%ymm3
  .byte  197,188,89,200                      // vmulps        %ymm0,%ymm8,%ymm1
  .byte  196,65,116,88,198                   // vaddps        %ymm14,%ymm1,%ymm8
  .byte  197,148,89,200                      // vmulps        %ymm0,%ymm13,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,208                      // vmulps        %ymm0,%ymm10,%ymm2
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,252,88,219                      // vaddps        %ymm3,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,16,124,36,216               // vmovups       -0x28(%rsp),%ymm7
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gauss_a_to_rgba_avx
.globl _sk_gauss_a_to_rgba_avx
FUNCTION(_sk_gauss_a_to_rgba_avx)
_sk_gauss_a_to_rgba_avx:
  .byte  196,226,125,24,5,174,13,0,0         // vbroadcastss  0xdae(%rip),%ymm0        # 6b5c <_sk_callback_avx+0x4a2>
  .byte  197,228,89,192                      // vmulps        %ymm0,%ymm3,%ymm0
  .byte  196,226,125,24,13,165,13,0,0        // vbroadcastss  0xda5(%rip),%ymm1        # 6b60 <_sk_callback_avx+0x4a6>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,13,152,13,0,0        // vbroadcastss  0xd98(%rip),%ymm1        # 6b64 <_sk_callback_avx+0x4aa>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,13,139,13,0,0        // vbroadcastss  0xd8b(%rip),%ymm1        # 6b68 <_sk_callback_avx+0x4ae>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  197,252,89,195                      // vmulps        %ymm3,%ymm0,%ymm0
  .byte  196,226,125,24,13,126,13,0,0        // vbroadcastss  0xd7e(%rip),%ymm1        # 6b6c <_sk_callback_avx+0x4b2>
  .byte  197,252,88,193                      // vaddps        %ymm1,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,252,40,200                      // vmovaps       %ymm0,%ymm1
  .byte  197,252,40,208                      // vmovaps       %ymm0,%ymm2
  .byte  197,252,40,216                      // vmovaps       %ymm0,%ymm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_avx
.globl _sk_gradient_avx
FUNCTION(_sk_gradient_avx)
_sk_gradient_avx:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  197,252,17,124,36,216               // vmovups       %ymm7,-0x28(%rsp)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  73,131,249,2                        // cmp           $0x2,%r9
  .byte  114,80                              // jb            5e71 <_sk_gradient_avx+0x6f>
  .byte  72,139,88,72                        // mov           0x48(%rax),%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  196,65,52,87,201                    // vxorps        %ymm9,%ymm9,%ymm9
  .byte  196,98,125,24,21,54,13,0,0          // vbroadcastss  0xd36(%rip),%ymm10        # 6b70 <_sk_callback_avx+0x4b6>
  .byte  197,244,87,201                      // vxorps        %ymm1,%ymm1,%ymm1
  .byte  196,98,125,24,3                     // vbroadcastss  (%rbx),%ymm8
  .byte  197,60,194,192,2                    // vcmpleps      %ymm0,%ymm8,%ymm8
  .byte  196,67,53,74,194,128                // vblendvps     %ymm8,%ymm10,%ymm9,%ymm8
  .byte  196,99,125,25,194,1                 // vextractf128  $0x1,%ymm8,%xmm2
  .byte  196,227,125,25,203,1                // vextractf128  $0x1,%ymm1,%xmm3
  .byte  197,233,254,211                     // vpaddd        %xmm3,%xmm2,%xmm2
  .byte  197,185,254,201                     // vpaddd        %xmm1,%xmm8,%xmm1
  .byte  196,227,117,24,202,1                // vinsertf128   $0x1,%xmm2,%ymm1,%ymm1
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  117,205                             // jne           5e3e <_sk_gradient_avx+0x3c>
  .byte  196,195,249,22,201,1                // vpextrq       $0x1,%xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  196,193,249,126,203                 // vmovq         %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  196,227,125,25,201,1                // vextractf128  $0x1,%ymm1,%xmm1
  .byte  196,195,249,22,204,1                // vpextrq       $0x1,%xmm1,%r12
  .byte  69,137,231                          // mov           %r12d,%r15d
  .byte  73,193,236,32                       // shr           $0x20,%r12
  .byte  196,225,249,126,203                 // vmovq         %xmm1,%rbx
  .byte  65,137,221                          // mov           %ebx,%r13d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  72,139,104,8                        // mov           0x8(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,227,113,33,76,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm1
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,33,122,16,68,165,0              // vmovss        0x0(%rbp,%r12,4),%xmm8
  .byte  196,161,122,16,92,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm3
  .byte  196,35,97,33,76,157,0,16            // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm3,%xmm9
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,33,122,16,92,141,0              // vmovss        0x0(%rbp,%r9,4),%xmm11
  .byte  196,99,113,33,226,32                // vinsertps     $0x20,%xmm2,%xmm1,%xmm12
  .byte  72,139,104,40                       // mov           0x28(%rax),%rbp
  .byte  196,161,122,16,84,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm2
  .byte  196,99,105,33,108,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm2,%xmm13
  .byte  196,161,122,16,92,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm3
  .byte  196,161,122,16,76,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm1
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,35,105,33,116,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm14
  .byte  196,33,122,16,124,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm15
  .byte  196,33,122,16,84,141,0              // vmovss        0x0(%rbp,%r9,4),%xmm10
  .byte  196,67,25,33,192,48                 // vinsertps     $0x30,%xmm8,%xmm12,%xmm8
  .byte  196,227,49,33,215,32                // vinsertps     $0x20,%xmm7,%xmm9,%xmm2
  .byte  196,195,105,33,211,48               // vinsertps     $0x30,%xmm11,%xmm2,%xmm2
  .byte  196,67,109,24,192,1                 // vinsertf128   $0x1,%xmm8,%ymm2,%ymm8
  .byte  196,227,17,33,211,32                // vinsertps     $0x20,%xmm3,%xmm13,%xmm2
  .byte  196,99,105,33,201,48                // vinsertps     $0x30,%xmm1,%xmm2,%xmm9
  .byte  72,139,104,16                       // mov           0x10(%rax),%rbp
  .byte  196,161,122,16,84,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm2
  .byte  196,99,105,33,92,157,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm2,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,161,122,16,76,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm1
  .byte  196,161,122,16,124,181,0            // vmovss        0x0(%rbp,%r14,4),%xmm7
  .byte  196,163,65,33,124,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm7,%xmm7
  .byte  196,161,122,16,92,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm3
  .byte  196,33,122,16,108,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm13
  .byte  196,195,9,33,215,32                 // vinsertps     $0x20,%xmm15,%xmm14,%xmm2
  .byte  196,195,105,33,210,48               // vinsertps     $0x30,%xmm10,%xmm2,%xmm2
  .byte  196,67,109,24,241,1                 // vinsertf128   $0x1,%xmm9,%ymm2,%ymm14
  .byte  196,195,33,33,212,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm2
  .byte  196,99,105,33,201,48                // vinsertps     $0x30,%xmm1,%xmm2,%xmm9
  .byte  196,99,65,33,211,32                 // vinsertps     $0x20,%xmm3,%xmm7,%xmm10
  .byte  72,139,104,48                       // mov           0x30(%rax),%rbp
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,99,97,33,92,157,0,16            // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm3,%xmm11
  .byte  196,33,122,16,124,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm15
  .byte  196,33,122,16,100,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm12
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,163,105,33,84,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm2
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,161,122,16,92,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm3
  .byte  196,67,41,33,213,48                 // vinsertps     $0x30,%xmm13,%xmm10,%xmm10
  .byte  196,67,45,24,233,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm13
  .byte  196,195,33,33,207,32                // vinsertps     $0x20,%xmm15,%xmm11,%xmm1
  .byte  196,67,113,33,204,48                // vinsertps     $0x30,%xmm12,%xmm1,%xmm9
  .byte  196,227,105,33,215,32               // vinsertps     $0x20,%xmm7,%xmm2,%xmm2
  .byte  196,99,105,33,211,48                // vinsertps     $0x30,%xmm3,%xmm2,%xmm10
  .byte  72,139,104,24                       // mov           0x18(%rax),%rbp
  .byte  196,161,122,16,92,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm3
  .byte  196,99,97,33,92,157,0,16            // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm3,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,33,122,16,124,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm15
  .byte  196,161,122,16,84,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm2
  .byte  196,163,105,33,84,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm2,%xmm2
  .byte  196,161,122,16,92,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm3
  .byte  196,161,122,16,124,141,0            // vmovss        0x0(%rbp,%r9,4),%xmm7
  .byte  196,67,45,24,201,1                  // vinsertf128   $0x1,%xmm9,%ymm10,%ymm9
  .byte  196,195,33,33,204,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm1
  .byte  196,195,113,33,207,48               // vinsertps     $0x30,%xmm15,%xmm1,%xmm1
  .byte  196,227,105,33,211,32               // vinsertps     $0x20,%xmm3,%xmm2,%xmm2
  .byte  196,227,105,33,215,48               // vinsertps     $0x30,%xmm7,%xmm2,%xmm2
  .byte  196,99,109,24,209,1                 // vinsertf128   $0x1,%xmm1,%ymm2,%ymm10
  .byte  72,139,104,56                       // mov           0x38(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,99,113,33,92,157,0,16           // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm11
  .byte  196,33,122,16,100,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm12
  .byte  196,33,122,16,124,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm15
  .byte  196,161,122,16,124,181,0            // vmovss        0x0(%rbp,%r14,4),%xmm7
  .byte  196,163,65,33,124,157,0,16          // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm7,%xmm7
  .byte  196,161,122,16,76,149,0             // vmovss        0x0(%rbp,%r10,4),%xmm1
  .byte  196,161,122,16,84,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm2
  .byte  196,195,33,33,220,32                // vinsertps     $0x20,%xmm12,%xmm11,%xmm3
  .byte  196,195,97,33,223,48                // vinsertps     $0x30,%xmm15,%xmm3,%xmm3
  .byte  196,227,65,33,201,32                // vinsertps     $0x20,%xmm1,%xmm7,%xmm1
  .byte  196,227,113,33,202,48               // vinsertps     $0x30,%xmm2,%xmm1,%xmm1
  .byte  196,99,117,24,219,1                 // vinsertf128   $0x1,%xmm3,%ymm1,%ymm11
  .byte  72,139,104,32                       // mov           0x20(%rax),%rbp
  .byte  196,161,122,16,76,173,0             // vmovss        0x0(%rbp,%r13,4),%xmm1
  .byte  196,227,113,33,76,157,0,16          // vinsertps     $0x10,0x0(%rbp,%rbx,4),%xmm1,%xmm1
  .byte  196,161,122,16,84,189,0             // vmovss        0x0(%rbp,%r15,4),%xmm2
  .byte  196,227,113,33,202,32               // vinsertps     $0x20,%xmm2,%xmm1,%xmm1
  .byte  196,161,122,16,84,165,0             // vmovss        0x0(%rbp,%r12,4),%xmm2
  .byte  196,161,122,16,92,181,0             // vmovss        0x0(%rbp,%r14,4),%xmm3
  .byte  196,35,97,33,100,157,0,16           // vinsertps     $0x10,0x0(%rbp,%r11,4),%xmm3,%xmm12
  .byte  196,161,122,16,124,149,0            // vmovss        0x0(%rbp,%r10,4),%xmm7
  .byte  196,161,122,16,92,141,0             // vmovss        0x0(%rbp,%r9,4),%xmm3
  .byte  196,99,113,33,250,48                // vinsertps     $0x30,%xmm2,%xmm1,%xmm15
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  196,161,122,16,20,168               // vmovss        (%rax,%r13,4),%xmm2
  .byte  196,227,105,33,20,152,16            // vinsertps     $0x10,(%rax,%rbx,4),%xmm2,%xmm2
  .byte  196,227,25,33,255,32                // vinsertps     $0x20,%xmm7,%xmm12,%xmm7
  .byte  196,161,122,16,12,184               // vmovss        (%rax,%r15,4),%xmm1
  .byte  196,227,65,33,219,48                // vinsertps     $0x30,%xmm3,%xmm7,%xmm3
  .byte  196,161,122,16,60,160               // vmovss        (%rax,%r12,4),%xmm7
  .byte  196,67,101,24,231,1                 // vinsertf128   $0x1,%xmm15,%ymm3,%ymm12
  .byte  196,161,122,16,28,176               // vmovss        (%rax,%r14,4),%xmm3
  .byte  196,163,97,33,28,152,16             // vinsertps     $0x10,(%rax,%r11,4),%xmm3,%xmm3
  .byte  196,227,105,33,201,32               // vinsertps     $0x20,%xmm1,%xmm2,%xmm1
  .byte  196,161,122,16,20,144               // vmovss        (%rax,%r10,4),%xmm2
  .byte  196,227,113,33,207,48               // vinsertps     $0x30,%xmm7,%xmm1,%xmm1
  .byte  196,161,122,16,60,136               // vmovss        (%rax,%r9,4),%xmm7
  .byte  196,227,97,33,210,32                // vinsertps     $0x20,%xmm2,%xmm3,%xmm2
  .byte  196,227,105,33,215,48               // vinsertps     $0x30,%xmm7,%xmm2,%xmm2
  .byte  196,227,109,24,217,1                // vinsertf128   $0x1,%xmm1,%ymm2,%ymm3
  .byte  197,188,89,200                      // vmulps        %ymm0,%ymm8,%ymm1
  .byte  196,65,116,88,198                   // vaddps        %ymm14,%ymm1,%ymm8
  .byte  197,148,89,200                      // vmulps        %ymm0,%ymm13,%ymm1
  .byte  196,193,116,88,201                  // vaddps        %ymm9,%ymm1,%ymm1
  .byte  197,172,89,208                      // vmulps        %ymm0,%ymm10,%ymm2
  .byte  196,193,108,88,211                  // vaddps        %ymm11,%ymm2,%ymm2
  .byte  197,156,89,192                      // vmulps        %ymm0,%ymm12,%ymm0
  .byte  197,252,88,219                      // vaddps        %ymm3,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  197,252,16,124,36,216               // vmovups       -0x28(%rsp),%ymm7
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_avx
.globl _sk_evenly_spaced_2_stop_gradient_avx
FUNCTION(_sk_evenly_spaced_2_stop_gradient_avx)
_sk_evenly_spaced_2_stop_gradient_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,8                    // vbroadcastss  (%rax),%ymm1
  .byte  196,226,125,24,80,16                // vbroadcastss  0x10(%rax),%ymm2
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,116,88,194                      // vaddps        %ymm2,%ymm1,%ymm8
  .byte  196,226,125,24,72,4                 // vbroadcastss  0x4(%rax),%ymm1
  .byte  196,226,125,24,80,20                // vbroadcastss  0x14(%rax),%ymm2
  .byte  197,244,89,200                      // vmulps        %ymm0,%ymm1,%ymm1
  .byte  197,244,88,202                      // vaddps        %ymm2,%ymm1,%ymm1
  .byte  196,226,125,24,80,8                 // vbroadcastss  0x8(%rax),%ymm2
  .byte  196,226,125,24,88,24                // vbroadcastss  0x18(%rax),%ymm3
  .byte  197,236,89,208                      // vmulps        %ymm0,%ymm2,%ymm2
  .byte  197,236,88,211                      // vaddps        %ymm3,%ymm2,%ymm2
  .byte  196,226,125,24,88,12                // vbroadcastss  0xc(%rax),%ymm3
  .byte  196,98,125,24,72,28                 // vbroadcastss  0x1c(%rax),%ymm9
  .byte  197,228,89,192                      // vmulps        %ymm0,%ymm3,%ymm0
  .byte  196,193,124,88,217                  // vaddps        %ymm9,%ymm0,%ymm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,41,192                      // vmovaps       %ymm8,%ymm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_avx
.globl _sk_xy_to_unit_angle_avx
FUNCTION(_sk_xy_to_unit_angle_avx)
_sk_xy_to_unit_angle_avx:
  .byte  196,65,60,87,192                    // vxorps        %ymm8,%ymm8,%ymm8
  .byte  197,60,92,200                       // vsubps        %ymm0,%ymm8,%ymm9
  .byte  197,52,84,200                       // vandps        %ymm0,%ymm9,%ymm9
  .byte  197,60,92,209                       // vsubps        %ymm1,%ymm8,%ymm10
  .byte  197,44,84,209                       // vandps        %ymm1,%ymm10,%ymm10
  .byte  196,65,52,93,218                    // vminps        %ymm10,%ymm9,%ymm11
  .byte  196,65,52,95,226                    // vmaxps        %ymm10,%ymm9,%ymm12
  .byte  196,65,36,94,220                    // vdivps        %ymm12,%ymm11,%ymm11
  .byte  196,65,36,89,227                    // vmulps        %ymm11,%ymm11,%ymm12
  .byte  196,98,125,24,45,44,9,0,0           // vbroadcastss  0x92c(%rip),%ymm13        # 6b74 <_sk_callback_avx+0x4ba>
  .byte  196,65,28,89,237                    // vmulps        %ymm13,%ymm12,%ymm13
  .byte  196,98,125,24,53,34,9,0,0           // vbroadcastss  0x922(%rip),%ymm14        # 6b78 <_sk_callback_avx+0x4be>
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  196,65,28,89,237                    // vmulps        %ymm13,%ymm12,%ymm13
  .byte  196,98,125,24,53,19,9,0,0           // vbroadcastss  0x913(%rip),%ymm14        # 6b7c <_sk_callback_avx+0x4c2>
  .byte  196,65,20,88,238                    // vaddps        %ymm14,%ymm13,%ymm13
  .byte  196,65,28,89,229                    // vmulps        %ymm13,%ymm12,%ymm12
  .byte  196,98,125,24,45,4,9,0,0            // vbroadcastss  0x904(%rip),%ymm13        # 6b80 <_sk_callback_avx+0x4c6>
  .byte  196,65,28,88,229                    // vaddps        %ymm13,%ymm12,%ymm12
  .byte  196,65,36,89,220                    // vmulps        %ymm12,%ymm11,%ymm11
  .byte  196,65,52,194,202,1                 // vcmpltps      %ymm10,%ymm9,%ymm9
  .byte  196,98,125,24,21,239,8,0,0          // vbroadcastss  0x8ef(%rip),%ymm10        # 6b84 <_sk_callback_avx+0x4ca>
  .byte  196,65,44,92,211                    // vsubps        %ymm11,%ymm10,%ymm10
  .byte  196,67,37,74,202,144                // vblendvps     %ymm9,%ymm10,%ymm11,%ymm9
  .byte  196,193,124,194,192,1               // vcmpltps      %ymm8,%ymm0,%ymm0
  .byte  196,98,125,24,21,217,8,0,0          // vbroadcastss  0x8d9(%rip),%ymm10        # 6b88 <_sk_callback_avx+0x4ce>
  .byte  196,65,44,92,209                    // vsubps        %ymm9,%ymm10,%ymm10
  .byte  196,195,53,74,194,0                 // vblendvps     %ymm0,%ymm10,%ymm9,%ymm0
  .byte  196,65,116,194,200,1                // vcmpltps      %ymm8,%ymm1,%ymm9
  .byte  196,98,125,24,21,195,8,0,0          // vbroadcastss  0x8c3(%rip),%ymm10        # 6b8c <_sk_callback_avx+0x4d2>
  .byte  197,44,92,208                       // vsubps        %ymm0,%ymm10,%ymm10
  .byte  196,195,125,74,194,144              // vblendvps     %ymm9,%ymm10,%ymm0,%ymm0
  .byte  196,65,124,194,200,3                // vcmpunordps   %ymm8,%ymm0,%ymm9
  .byte  196,195,125,74,192,144              // vblendvps     %ymm9,%ymm8,%ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_avx
.globl _sk_xy_to_radius_avx
FUNCTION(_sk_xy_to_radius_avx)
_sk_xy_to_radius_avx:
  .byte  197,252,89,192                      // vmulps        %ymm0,%ymm0,%ymm0
  .byte  197,116,89,193                      // vmulps        %ymm1,%ymm1,%ymm8
  .byte  196,193,124,88,192                  // vaddps        %ymm8,%ymm0,%ymm0
  .byte  197,252,81,192                      // vsqrtps       %ymm0,%ymm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_avx
.globl _sk_save_xy_avx
FUNCTION(_sk_save_xy_avx)
_sk_save_xy_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,141,8,0,0           // vbroadcastss  0x88d(%rip),%ymm8        # 6b90 <_sk_callback_avx+0x4d6>
  .byte  196,65,124,88,200                   // vaddps        %ymm8,%ymm0,%ymm9
  .byte  196,67,125,8,209,1                  // vroundps      $0x1,%ymm9,%ymm10
  .byte  196,65,52,92,202                    // vsubps        %ymm10,%ymm9,%ymm9
  .byte  196,65,116,88,192                   // vaddps        %ymm8,%ymm1,%ymm8
  .byte  196,67,125,8,208,1                  // vroundps      $0x1,%ymm8,%ymm10
  .byte  196,65,60,92,194                    // vsubps        %ymm10,%ymm8,%ymm8
  .byte  197,252,17,0                        // vmovups       %ymm0,(%rax)
  .byte  197,252,17,72,32                    // vmovups       %ymm1,0x20(%rax)
  .byte  197,124,17,72,64                    // vmovups       %ymm9,0x40(%rax)
  .byte  197,124,17,64,96                    // vmovups       %ymm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_avx
.globl _sk_accumulate_avx
FUNCTION(_sk_accumulate_avx)
_sk_accumulate_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  197,124,16,128,128,0,0,0            // vmovups       0x80(%rax),%ymm8
  .byte  197,60,89,128,160,0,0,0             // vmulps        0xa0(%rax),%ymm8,%ymm8
  .byte  197,60,89,200                       // vmulps        %ymm0,%ymm8,%ymm9
  .byte  197,180,88,228                      // vaddps        %ymm4,%ymm9,%ymm4
  .byte  197,60,89,201                       // vmulps        %ymm1,%ymm8,%ymm9
  .byte  197,180,88,237                      // vaddps        %ymm5,%ymm9,%ymm5
  .byte  197,60,89,202                       // vmulps        %ymm2,%ymm8,%ymm9
  .byte  197,180,88,246                      // vaddps        %ymm6,%ymm9,%ymm6
  .byte  197,60,89,195                       // vmulps        %ymm3,%ymm8,%ymm8
  .byte  197,188,88,255                      // vaddps        %ymm7,%ymm8,%ymm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_avx
.globl _sk_bilinear_nx_avx
FUNCTION(_sk_bilinear_nx_avx)
_sk_bilinear_nx_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,25,8,0,0           // vbroadcastss  0x819(%rip),%ymm0        # 6b94 <_sk_callback_avx+0x4da>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,16,8,0,0            // vbroadcastss  0x810(%rip),%ymm8        # 6b98 <_sk_callback_avx+0x4de>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_avx
.globl _sk_bilinear_px_avx
FUNCTION(_sk_bilinear_px_avx)
_sk_bilinear_px_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,248,7,0,0          // vbroadcastss  0x7f8(%rip),%ymm0        # 6b9c <_sk_callback_avx+0x4e2>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_avx
.globl _sk_bilinear_ny_avx
FUNCTION(_sk_bilinear_ny_avx)
_sk_bilinear_ny_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,220,7,0,0         // vbroadcastss  0x7dc(%rip),%ymm1        # 6ba0 <_sk_callback_avx+0x4e6>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,210,7,0,0           // vbroadcastss  0x7d2(%rip),%ymm8        # 6ba4 <_sk_callback_avx+0x4ea>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_avx
.globl _sk_bilinear_py_avx
FUNCTION(_sk_bilinear_py_avx)
_sk_bilinear_py_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,186,7,0,0         // vbroadcastss  0x7ba(%rip),%ymm1        # 6ba8 <_sk_callback_avx+0x4ee>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_avx
.globl _sk_bicubic_n3x_avx
FUNCTION(_sk_bicubic_n3x_avx)
_sk_bicubic_n3x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,157,7,0,0          // vbroadcastss  0x79d(%rip),%ymm0        # 6bac <_sk_callback_avx+0x4f2>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,148,7,0,0           // vbroadcastss  0x794(%rip),%ymm8        # 6bb0 <_sk_callback_avx+0x4f6>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,133,7,0,0          // vbroadcastss  0x785(%rip),%ymm10        # 6bb4 <_sk_callback_avx+0x4fa>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,123,7,0,0          // vbroadcastss  0x77b(%rip),%ymm10        # 6bb8 <_sk_callback_avx+0x4fe>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_avx
.globl _sk_bicubic_n1x_avx
FUNCTION(_sk_bicubic_n1x_avx)
_sk_bicubic_n1x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,94,7,0,0           // vbroadcastss  0x75e(%rip),%ymm0        # 6bbc <_sk_callback_avx+0x502>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  196,98,125,24,5,85,7,0,0            // vbroadcastss  0x755(%rip),%ymm8        # 6bc0 <_sk_callback_avx+0x506>
  .byte  197,60,92,64,64                     // vsubps        0x40(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,75,7,0,0           // vbroadcastss  0x74b(%rip),%ymm9        # 6bc4 <_sk_callback_avx+0x50a>
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,65,7,0,0           // vbroadcastss  0x741(%rip),%ymm10        # 6bc8 <_sk_callback_avx+0x50e>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,50,7,0,0           // vbroadcastss  0x732(%rip),%ymm10        # 6bcc <_sk_callback_avx+0x512>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,35,7,0,0           // vbroadcastss  0x723(%rip),%ymm9        # 6bd0 <_sk_callback_avx+0x516>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_avx
.globl _sk_bicubic_p1x_avx
FUNCTION(_sk_bicubic_p1x_avx)
_sk_bicubic_p1x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,11,7,0,0            // vbroadcastss  0x70b(%rip),%ymm8        # 6bd4 <_sk_callback_avx+0x51a>
  .byte  197,188,88,0                        // vaddps        (%rax),%ymm8,%ymm0
  .byte  197,124,16,72,64                    // vmovups       0x40(%rax),%ymm9
  .byte  196,98,125,24,21,253,6,0,0          // vbroadcastss  0x6fd(%rip),%ymm10        # 6bd8 <_sk_callback_avx+0x51e>
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,98,125,24,29,243,6,0,0          // vbroadcastss  0x6f3(%rip),%ymm11        # 6bdc <_sk_callback_avx+0x522>
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,192                    // vaddps        %ymm8,%ymm10,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  196,98,125,24,13,218,6,0,0          // vbroadcastss  0x6da(%rip),%ymm9        # 6be0 <_sk_callback_avx+0x526>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_avx
.globl _sk_bicubic_p3x_avx
FUNCTION(_sk_bicubic_p3x_avx)
_sk_bicubic_p3x_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,5,194,6,0,0          // vbroadcastss  0x6c2(%rip),%ymm0        # 6be4 <_sk_callback_avx+0x52a>
  .byte  197,252,88,0                        // vaddps        (%rax),%ymm0,%ymm0
  .byte  197,124,16,64,64                    // vmovups       0x40(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,175,6,0,0          // vbroadcastss  0x6af(%rip),%ymm10        # 6be8 <_sk_callback_avx+0x52e>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,165,6,0,0          // vbroadcastss  0x6a5(%rip),%ymm10        # 6bec <_sk_callback_avx+0x532>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,128,0,0,0            // vmovups       %ymm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_avx
.globl _sk_bicubic_n3y_avx
FUNCTION(_sk_bicubic_n3y_avx)
_sk_bicubic_n3y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,136,6,0,0         // vbroadcastss  0x688(%rip),%ymm1        # 6bf0 <_sk_callback_avx+0x536>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,126,6,0,0           // vbroadcastss  0x67e(%rip),%ymm8        # 6bf4 <_sk_callback_avx+0x53a>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,111,6,0,0          // vbroadcastss  0x66f(%rip),%ymm10        # 6bf8 <_sk_callback_avx+0x53e>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,101,6,0,0          // vbroadcastss  0x665(%rip),%ymm10        # 6bfc <_sk_callback_avx+0x542>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_avx
.globl _sk_bicubic_n1y_avx
FUNCTION(_sk_bicubic_n1y_avx)
_sk_bicubic_n1y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,72,6,0,0          // vbroadcastss  0x648(%rip),%ymm1        # 6c00 <_sk_callback_avx+0x546>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  196,98,125,24,5,62,6,0,0            // vbroadcastss  0x63e(%rip),%ymm8        # 6c04 <_sk_callback_avx+0x54a>
  .byte  197,60,92,64,96                     // vsubps        0x60(%rax),%ymm8,%ymm8
  .byte  196,98,125,24,13,52,6,0,0           // vbroadcastss  0x634(%rip),%ymm9        # 6c08 <_sk_callback_avx+0x54e>
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,42,6,0,0           // vbroadcastss  0x62a(%rip),%ymm10        # 6c0c <_sk_callback_avx+0x552>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,201                    // vmulps        %ymm9,%ymm8,%ymm9
  .byte  196,98,125,24,21,27,6,0,0           // vbroadcastss  0x61b(%rip),%ymm10        # 6c10 <_sk_callback_avx+0x556>
  .byte  196,65,52,88,202                    // vaddps        %ymm10,%ymm9,%ymm9
  .byte  196,65,60,89,193                    // vmulps        %ymm9,%ymm8,%ymm8
  .byte  196,98,125,24,13,12,6,0,0           // vbroadcastss  0x60c(%rip),%ymm9        # 6c14 <_sk_callback_avx+0x55a>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_avx
.globl _sk_bicubic_p1y_avx
FUNCTION(_sk_bicubic_p1y_avx)
_sk_bicubic_p1y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,98,125,24,5,244,5,0,0           // vbroadcastss  0x5f4(%rip),%ymm8        # 6c18 <_sk_callback_avx+0x55e>
  .byte  197,188,88,72,32                    // vaddps        0x20(%rax),%ymm8,%ymm1
  .byte  197,124,16,72,96                    // vmovups       0x60(%rax),%ymm9
  .byte  196,98,125,24,21,229,5,0,0          // vbroadcastss  0x5e5(%rip),%ymm10        # 6c1c <_sk_callback_avx+0x562>
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,98,125,24,29,219,5,0,0          // vbroadcastss  0x5db(%rip),%ymm11        # 6c20 <_sk_callback_avx+0x566>
  .byte  196,65,44,88,211                    // vaddps        %ymm11,%ymm10,%ymm10
  .byte  196,65,52,89,210                    // vmulps        %ymm10,%ymm9,%ymm10
  .byte  196,65,44,88,192                    // vaddps        %ymm8,%ymm10,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  196,98,125,24,13,194,5,0,0          // vbroadcastss  0x5c2(%rip),%ymm9        # 6c24 <_sk_callback_avx+0x56a>
  .byte  196,65,60,88,193                    // vaddps        %ymm9,%ymm8,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_avx
.globl _sk_bicubic_p3y_avx
FUNCTION(_sk_bicubic_p3y_avx)
_sk_bicubic_p3y_avx:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  196,226,125,24,13,170,5,0,0         // vbroadcastss  0x5aa(%rip),%ymm1        # 6c28 <_sk_callback_avx+0x56e>
  .byte  197,244,88,72,32                    // vaddps        0x20(%rax),%ymm1,%ymm1
  .byte  197,124,16,64,96                    // vmovups       0x60(%rax),%ymm8
  .byte  196,65,60,89,200                    // vmulps        %ymm8,%ymm8,%ymm9
  .byte  196,98,125,24,21,150,5,0,0          // vbroadcastss  0x596(%rip),%ymm10        # 6c2c <_sk_callback_avx+0x572>
  .byte  196,65,60,89,194                    // vmulps        %ymm10,%ymm8,%ymm8
  .byte  196,98,125,24,21,140,5,0,0          // vbroadcastss  0x58c(%rip),%ymm10        # 6c30 <_sk_callback_avx+0x576>
  .byte  196,65,60,88,194                    // vaddps        %ymm10,%ymm8,%ymm8
  .byte  196,65,52,89,192                    // vmulps        %ymm8,%ymm9,%ymm8
  .byte  197,124,17,128,160,0,0,0            // vmovups       %ymm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_avx
.globl _sk_callback_avx
FUNCTION(_sk_callback_avx)
_sk_callback_avx:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,228,224                      // and           $0xffffffffffffffe0,%rsp
  .byte  72,129,236,192,0,0,0                // sub           $0xc0,%rsp
  .byte  197,252,41,188,36,128,0,0,0         // vmovaps       %ymm7,0x80(%rsp)
  .byte  197,252,41,116,36,96                // vmovaps       %ymm6,0x60(%rsp)
  .byte  197,252,41,108,36,64                // vmovaps       %ymm5,0x40(%rsp)
  .byte  197,252,41,100,36,32                // vmovaps       %ymm4,0x20(%rsp)
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  72,137,76,36,24                     // mov           %rcx,0x18(%rsp)
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,252                          // mov           %rdi,%r12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,193                      // vunpckhps     %ymm1,%ymm0,%ymm0
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,211                      // vunpckhps     %ymm3,%ymm2,%ymm2
  .byte  197,221,20,217                      // vunpcklpd     %ymm1,%ymm4,%ymm3
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,253,20,226                      // vunpcklpd     %ymm2,%ymm0,%ymm4
  .byte  197,253,21,194                      // vunpckhpd     %ymm2,%ymm0,%ymm0
  .byte  196,227,101,24,209,1                // vinsertf128   $0x1,%xmm1,%ymm3,%ymm2
  .byte  196,227,93,24,232,1                 // vinsertf128   $0x1,%xmm0,%ymm4,%ymm5
  .byte  196,227,101,6,201,49                // vperm2f128    $0x31,%ymm1,%ymm3,%ymm1
  .byte  196,227,93,6,192,49                 // vperm2f128    $0x31,%ymm0,%ymm4,%ymm0
  .byte  196,193,125,17,86,8                 // vmovupd       %ymm2,0x8(%r14)
  .byte  196,193,125,17,110,40               // vmovupd       %ymm5,0x28(%r14)
  .byte  196,193,125,17,78,72                // vmovupd       %ymm1,0x48(%r14)
  .byte  196,193,125,17,70,104               // vmovupd       %ymm0,0x68(%r14)
  .byte  72,133,219                          // test          %rbx,%rbx
  .byte  190,8,0,0,0                         // mov           $0x8,%esi
  .byte  15,69,243                           // cmovne        %ebx,%esi
  .byte  76,137,247                          // mov           %r14,%rdi
  .byte  197,248,119                         // vzeroupper
  .byte  65,255,22                           // callq         *(%r14)
  .byte  73,139,134,136,0,0,0                // mov           0x88(%r14),%rax
  .byte  197,248,16,0                        // vmovups       (%rax),%xmm0
  .byte  197,248,16,72,16                    // vmovups       0x10(%rax),%xmm1
  .byte  197,248,16,80,32                    // vmovups       0x20(%rax),%xmm2
  .byte  197,248,16,88,48                    // vmovups       0x30(%rax),%xmm3
  .byte  196,227,101,24,88,112,1             // vinsertf128   $0x1,0x70(%rax),%ymm3,%ymm3
  .byte  196,227,109,24,80,96,1              // vinsertf128   $0x1,0x60(%rax),%ymm2,%ymm2
  .byte  196,227,117,24,72,80,1              // vinsertf128   $0x1,0x50(%rax),%ymm1,%ymm1
  .byte  196,227,125,24,64,64,1              // vinsertf128   $0x1,0x40(%rax),%ymm0,%ymm0
  .byte  197,252,20,225                      // vunpcklps     %ymm1,%ymm0,%ymm4
  .byte  197,252,21,233                      // vunpckhps     %ymm1,%ymm0,%ymm5
  .byte  197,236,20,203                      // vunpcklps     %ymm3,%ymm2,%ymm1
  .byte  197,236,21,219                      // vunpckhps     %ymm3,%ymm2,%ymm3
  .byte  197,221,20,193                      // vunpcklpd     %ymm1,%ymm4,%ymm0
  .byte  197,221,21,201                      // vunpckhpd     %ymm1,%ymm4,%ymm1
  .byte  197,213,20,211                      // vunpcklpd     %ymm3,%ymm5,%ymm2
  .byte  197,213,21,219                      // vunpckhpd     %ymm3,%ymm5,%ymm3
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,250                          // mov           %r15,%rdx
  .byte  72,139,76,36,24                     // mov           0x18(%rsp),%rcx
  .byte  73,137,216                          // mov           %rbx,%r8
  .byte  197,252,40,100,36,32                // vmovaps       0x20(%rsp),%ymm4
  .byte  197,252,40,108,36,64                // vmovaps       0x40(%rsp),%ymm5
  .byte  197,252,40,116,36,96                // vmovaps       0x60(%rsp),%ymm6
  .byte  197,252,40,188,36,128,0,0,0         // vmovaps       0x80(%rsp),%ymm7
  .byte  72,141,101,216                      // lea           -0x28(%rbp),%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,128,63                      // mov           $0x3f800000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,224                   // add           %al,-0x1fffff41(%rax)
  .byte  64,154                              // rex           (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 68ad <.literal4+0xb1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 68bd <.literal4+0xc1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 68cd <.literal4+0xd1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,174                  // ds            cmp $0xae3f170a,%eax
  .byte  71,225,61                           // rex.RXB       loope 68dd <.literal4+0xe1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%rax)
  .byte  67,0,0                              // rex.XB        add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,154,153,153,62           // sbbl          $0x3e,-0x666665c3(%rsi)
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,82,184,78,65                     // cmp           $0x414eb852,%eax
  .byte  57,215                              // cmp           %edx,%edi
  .byte  32,187,186,159,98,60                // and           %bh,0x3c629fba(%rbx)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  252                                 // cld
  .byte  191,16,62,168,177                   // mov           $0xb1a83e10,%edi
  .byte  152                                 // cwtl
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,128,64,171,170,42                 // add           %al,0x2aaaab40(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,129,128,128,59                  // mov           $0x3b808081,%esi
  .byte  129,128,128,59,0,248,0,0,8,33       // addl          $0x21080000,-0x7ffc480(%rax)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6931 <.literal4+0x135>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,129,128,128,59              // and           %eax,0x3b808081(,%rdi,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  0,52,255                            // add           %dh,(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            6958 <.literal4+0x15c>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            69d1 <.literal4+0x1d5>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            698c <.literal4+0x190>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            6a05 <.literal4+0x209>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            69c0 <.literal4+0x1c4>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            6a39 <.literal4+0x23d>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,0                      // add           %al,0x3f(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            69f4 <.literal4+0x1f8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            6a6d <.literal4+0x271>
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,249,68,180                   // mov           $0xb444f93f,%edi
  .byte  62,163,233,220,63,81,140,242,66,141 // movabs        %eax,%ds:0x8d42f28c513fdce9
  .byte  188,190,63,248,245                  // mov           $0xf5f83fbe,%esp
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,128,63,0,0,200                    // add           %al,-0x37ffffc1(%rax)
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  127,67                              // jg            6a6b <.literal4+0x26f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,203,61,13       // movabs        %eax,0xd3dcb3c1118c23b
  .byte  190,80,128,3,62                     // mov           $0x3e038050,%esi
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           6a8b <.literal4+0x28f>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  127,67                              // jg            6a9f <.literal4+0x2a3>
  .byte  129,128,128,59,0,0,128,63,129,128   // addl          $0x80813f80,0x3b80(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,128,63,129,128,128                // add           %al,-0x7f7f7ec1(%rax)
  .byte  59,0                                // cmp           (%rax),%eax
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6a81 <.literal4+0x285>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6a9d <.literal4+0x2a1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,0,0,128,63                  // and           %eax,0x3f800000(,%rdi,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            6af2 <.literal4+0x2f6>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,240                // mov           %ecx,-0xfffc278(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,0,15                 // mov           %ecx,0xf003788(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,240,0                // mov           %ecx,0xf03988(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,59,15,0                 // mov           %ecx,0xf3b88(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,61,0,0                  // mov           %ecx,0x3d88(%rax)
  .byte  112,65                              // jo            6b35 <.literal4+0x339>
  .byte  129,128,128,59,129,128,128,59,0,0   // addl          $0x3b80,-0x7f7ec480(%rax)
  .byte  127,67                              // jg            6b43 <.literal4+0x347>
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,128,56                    // add           %al,0x38800000(%rax)
  .byte  0,64,254                            // add           %al,-0x2(%rax)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,0,0,128                    // add           %al,-0x7fffffc9(%rax)
  .byte  63                                  // (bad)
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            6b83 <.literal4+0x387>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,0                     // add           %al,0xbf(%rax)
  .byte  63                                  // (bad)
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,45,16,17                 // fstl          0x11102d3d(%rbx)
  .byte  192,18,120                          // rclb          $0x78,(%rdx)
  .byte  57,64,32                            // cmp           %eax,0x20(%rax)
  .byte  148                                 // xchg          %eax,%esp
  .byte  90                                  // pop           %rdx
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,0,24                             // add           %bl,%ds:(%rax)
  .byte  161,57,1,0,0,0,111,43,231           // movabs        0xe72b6f0000000139,%eax
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,169,240,34,62                   // mov           $0x3e22f0a9,%ebp
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,128,63                    // add           %bh,0x3f800000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,128,63,114              // sarb          $0x72,0x3f800000(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,0,191                       // mov           $0xbf000000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,114                          // sarb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,192,191                     // mov           $0xbfc00000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,0,0,0,191                       // mov           $0xbf000000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,0,0,192,63                      // mov           $0x3fc00000,%edi
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,114                          // sarb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190                                 // .byte         0xbe

BALIGN16
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,2                                 // add           %al,(%rdx)
  .byte  4,6                                 // add           $0x6,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,10                                // or            %cl,(%rdx)
  .byte  12,14                               // or            $0xe,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)

BALIGN32
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
BALIGN32

HIDDEN _sk_start_pipeline_sse41
.globl _sk_start_pipeline_sse41
FUNCTION(_sk_start_pipeline_sse41)
_sk_start_pipeline_sse41:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  77,137,199                          // mov           %r8,%r15
  .byte  73,137,208                          // mov           %rdx,%r8
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  72,141,75,4                         // lea           0x4(%rbx),%rcx
  .byte  76,57,193                           // cmp           %r8,%rcx
  .byte  118,5                               // jbe           30 <_sk_start_pipeline_sse41+0x30>
  .byte  72,137,218                          // mov           %rbx,%rdx
  .byte  235,75                              // jmp           7b <_sk_start_pipeline_sse41+0x7b>
  .byte  76,137,69,208                       // mov           %r8,-0x30(%rbp)
  .byte  65,184,0,0,0,0                      // mov           $0x0,%r8d
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  76,137,255                          // mov           %r15,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,137,218                          // mov           %rbx,%rdx
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  65,255,214                          // callq         *%r14
  .byte  76,139,69,208                       // mov           -0x30(%rbp),%r8
  .byte  76,137,240                          // mov           %r14,%rax
  .byte  72,141,83,4                         // lea           0x4(%rbx),%rdx
  .byte  72,131,195,8                        // add           $0x8,%rbx
  .byte  76,57,195                           // cmp           %r8,%rbx
  .byte  72,137,211                          // mov           %rdx,%rbx
  .byte  118,185                             // jbe           34 <_sk_start_pipeline_sse41+0x34>
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,49                              // je            b1 <_sk_start_pipeline_sse41+0xb1>
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  76,137,255                          // mov           %r15,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  195                                 // retq

HIDDEN _sk_just_return_sse41
.globl _sk_just_return_sse41
FUNCTION(_sk_just_return_sse41)
_sk_just_return_sse41:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_sse41
.globl _sk_seed_shader_sse41
FUNCTION(_sk_seed_shader_sse41)
_sk_seed_shader_sse41:
  .byte  102,15,110,194                      // movd          %edx,%xmm0
  .byte  102,15,112,192,0                    // pshufd        $0x0,%xmm0,%xmm0
  .byte  15,91,200                           // cvtdq2ps      %xmm0,%xmm1
  .byte  15,40,21,124,80,0,0                 // movaps        0x507c(%rip),%xmm2        # 5150 <_sk_callback_sse41+0xf7>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,16,7                             // movups        (%rdi),%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  102,15,110,201                      // movd          %ecx,%xmm1
  .byte  102,15,112,201,0                    // pshufd        $0x0,%xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,21,107,80,0,0                 // movaps        0x506b(%rip),%xmm2        # 5160 <_sk_callback_sse41+0x107>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_sse41
.globl _sk_dither_sse41
FUNCTION(_sk_dither_sse41)
_sk_dither_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,68,15,110,194                   // movd          %edx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  243,68,15,111,79,32                 // movdqu        0x20(%rdi),%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  102,68,15,110,193                   // movd          %ecx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,68,15,111,21,57,80,0,0          // movdqa        0x5039(%rip),%xmm10        # 5170 <_sk_callback_sse41+0x117>
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,65,15,114,243,5                 // pslld         $0x5,%xmm11
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,65,15,114,242,4                 // pslld         $0x4,%xmm10
  .byte  102,68,15,111,37,37,80,0,0          // movdqa        0x5025(%rip),%xmm12        # 5180 <_sk_callback_sse41+0x127>
  .byte  102,68,15,111,45,44,80,0,0          // movdqa        0x502c(%rip),%xmm13        # 5190 <_sk_callback_sse41+0x137>
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,69,15,219,245                   // pand          %xmm13,%xmm14
  .byte  102,65,15,114,246,2                 // pslld         $0x2,%xmm14
  .byte  102,69,15,219,233                   // pand          %xmm9,%xmm13
  .byte  102,69,15,254,237                   // paddd         %xmm13,%xmm13
  .byte  102,69,15,219,196                   // pand          %xmm12,%xmm8
  .byte  102,65,15,114,208,1                 // psrld         $0x1,%xmm8
  .byte  102,69,15,219,204                   // pand          %xmm12,%xmm9
  .byte  102,65,15,114,209,2                 // psrld         $0x2,%xmm9
  .byte  102,69,15,235,234                   // por           %xmm10,%xmm13
  .byte  102,69,15,235,233                   // por           %xmm9,%xmm13
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,235,245                   // por           %xmm13,%xmm14
  .byte  102,69,15,235,240                   // por           %xmm8,%xmm14
  .byte  69,15,91,198                        // cvtdq2ps      %xmm14,%xmm8
  .byte  68,15,89,5,231,79,0,0               // mulps         0x4fe7(%rip),%xmm8        # 51a0 <_sk_callback_sse41+0x147>
  .byte  68,15,88,5,239,79,0,0               // addps         0x4fef(%rip),%xmm8        # 51b0 <_sk_callback_sse41+0x157>
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,88,210                        // addps         %xmm2,%xmm10
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  68,15,93,211                        // minps         %xmm3,%xmm10
  .byte  65,15,95,210                        // maxps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_sse41
.globl _sk_constant_color_sse41
FUNCTION(_sk_constant_color_sse41)
_sk_constant_color_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgba_sse41
.globl _sk_load_rgba_sse41
FUNCTION(_sk_load_rgba_sse41)
_sk_load_rgba_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  15,16,72,16                         // movups        0x10(%rax),%xmm1
  .byte  15,16,80,32                         // movups        0x20(%rax),%xmm2
  .byte  15,16,88,48                         // movups        0x30(%rax),%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_rgba_sse41
.globl _sk_store_rgba_sse41
FUNCTION(_sk_store_rgba_sse41)
_sk_store_rgba_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  15,17,72,16                         // movups        %xmm1,0x10(%rax)
  .byte  15,17,80,32                         // movups        %xmm2,0x20(%rax)
  .byte  15,17,88,48                         // movups        %xmm3,0x30(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_sse41
.globl _sk_clear_sse41
FUNCTION(_sk_clear_sse41)
_sk_clear_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_sse41
.globl _sk_srcatop_sse41
FUNCTION(_sk_srcatop_sse41)
_sk_srcatop_sse41:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  68,15,40,5,73,79,0,0                // movaps        0x4f49(%rip),%xmm8        # 51c0 <_sk_callback_sse41+0x167>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_sse41
.globl _sk_dstatop_sse41
FUNCTION(_sk_dstatop_sse41)
_sk_dstatop_sse41:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,40,13,12,79,0,0               // movaps        0x4f0c(%rip),%xmm9        # 51d0 <_sk_callback_sse41+0x177>
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_sse41
.globl _sk_srcin_sse41
FUNCTION(_sk_srcin_sse41)
_sk_srcin_sse41:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_sse41
.globl _sk_dstin_sse41
FUNCTION(_sk_dstin_sse41)
_sk_dstin_sse41:
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_sse41
.globl _sk_srcout_sse41
FUNCTION(_sk_srcout_sse41)
_sk_srcout_sse41:
  .byte  68,15,40,5,176,78,0,0               // movaps        0x4eb0(%rip),%xmm8        # 51e0 <_sk_callback_sse41+0x187>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_sse41
.globl _sk_dstout_sse41
FUNCTION(_sk_dstout_sse41)
_sk_dstout_sse41:
  .byte  68,15,40,5,160,78,0,0               // movaps        0x4ea0(%rip),%xmm8        # 51f0 <_sk_callback_sse41+0x197>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_sse41
.globl _sk_srcover_sse41
FUNCTION(_sk_srcover_sse41)
_sk_srcover_sse41:
  .byte  68,15,40,5,131,78,0,0               // movaps        0x4e83(%rip),%xmm8        # 5200 <_sk_callback_sse41+0x1a7>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_sse41
.globl _sk_dstover_sse41
FUNCTION(_sk_dstover_sse41)
_sk_dstover_sse41:
  .byte  68,15,40,5,87,78,0,0                // movaps        0x4e57(%rip),%xmm8        # 5210 <_sk_callback_sse41+0x1b7>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_sse41
.globl _sk_modulate_sse41
FUNCTION(_sk_modulate_sse41)
_sk_modulate_sse41:
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_sse41
.globl _sk_multiply_sse41
FUNCTION(_sk_multiply_sse41)
_sk_multiply_sse41:
  .byte  68,15,40,5,43,78,0,0                // movaps        0x4e2b(%rip),%xmm8        # 5220 <_sk_callback_sse41+0x1c7>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,221                        // mulps         %xmm5,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__sse41
.globl _sk_plus__sse41
FUNCTION(_sk_plus__sse41)
_sk_plus__sse41:
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_sse41
.globl _sk_screen_sse41
FUNCTION(_sk_screen_sse41)
_sk_screen_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,88,215                        // addps         %xmm7,%xmm10
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__sse41
.globl _sk_xor__sse41
FUNCTION(_sk_xor__sse41)
_sk_xor__sse41:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,40,29,96,77,0,0                  // movaps        0x4d60(%rip),%xmm3        # 5230 <_sk_callback_sse41+0x1d7>
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_sse41
.globl _sk_darken_sse41
FUNCTION(_sk_darken_sse41)
_sk_darken_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,95,209                        // maxps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,203,76,0,0                 // movaps        0x4ccb(%rip),%xmm2        # 5240 <_sk_callback_sse41+0x1e7>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_sse41
.globl _sk_lighten_sse41
FUNCTION(_sk_lighten_sse41)
_sk_lighten_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,112,76,0,0                 // movaps        0x4c70(%rip),%xmm2        # 5250 <_sk_callback_sse41+0x1f7>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_sse41
.globl _sk_difference_sse41
FUNCTION(_sk_difference_sse41)
_sk_difference_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,10,76,0,0                  // movaps        0x4c0a(%rip),%xmm2        # 5260 <_sk_callback_sse41+0x207>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_sse41
.globl _sk_exclusion_sse41
FUNCTION(_sk_exclusion_sse41)
_sk_exclusion_sse41:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,202,75,0,0                 // movaps        0x4bca(%rip),%xmm2        # 5270 <_sk_callback_sse41+0x217>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_sse41
.globl _sk_colorburn_sse41
FUNCTION(_sk_colorburn_sse41)
_sk_colorburn_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,189,75,0,0              // movaps        0x4bbd(%rip),%xmm10        # 5280 <_sk_callback_sse41+0x227>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,94,192                        // divps         %xmm8,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  68,15,88,228                        // addps         %xmm4,%xmm12
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  102,69,15,56,20,232                 // blendvps      %xmm0,%xmm8,%xmm13
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  102,69,15,56,20,196                 // blendvps      %xmm0,%xmm12,%xmm8
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,197                           // subps         %xmm5,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,94,193                           // divps         %xmm1,%xmm0
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,93,232                        // minps         %xmm0,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  68,15,88,229                        // addps         %xmm5,%xmm12
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  102,65,15,56,20,204                 // blendvps      %xmm0,%xmm12,%xmm1
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,94,194                           // divps         %xmm2,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,194,202,0                     // cmpeqps       %xmm2,%xmm9
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,194,199,0                        // cmpeqps       %xmm7,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_sse41
.globl _sk_colordodge_sse41
FUNCTION(_sk_colordodge_sse41)
_sk_colordodge_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,155,74,0,0              // movaps        0x4a9b(%rip),%xmm10        # 5290 <_sk_callback_sse41+0x237>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,224                        // mulps         %xmm8,%xmm12
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,94,200                        // divps         %xmm0,%xmm9
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  69,15,93,241                        // minps         %xmm9,%xmm14
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  102,69,15,56,20,240                 // blendvps      %xmm0,%xmm8,%xmm14
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,88,228                        // addps         %xmm4,%xmm12
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  69,15,88,198                        // addps         %xmm14,%xmm8
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  102,69,15,56,20,196                 // blendvps      %xmm0,%xmm12,%xmm8
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,229                        // mulps         %xmm5,%xmm12
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,94,224                        // divps         %xmm0,%xmm12
  .byte  69,15,40,243                        // movaps        %xmm11,%xmm14
  .byte  68,15,89,241                        // mulps         %xmm1,%xmm14
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  102,68,15,56,20,233                 // blendvps      %xmm0,%xmm1,%xmm13
  .byte  68,15,88,245                        // addps         %xmm5,%xmm14
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  102,65,15,56,20,206                 // blendvps      %xmm0,%xmm14,%xmm1
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  68,15,94,224                        // divps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,194,195,0                        // cmpeqps       %xmm3,%xmm0
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  68,15,194,206,0                     // cmpeqps       %xmm6,%xmm9
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_sse41
.globl _sk_hardlight_sse41
FUNCTION(_sk_hardlight_sse41)
_sk_hardlight_sse41:
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,40,21,116,73,0,0              // movaps        0x4974(%rip),%xmm10        # 52a0 <_sk_callback_sse41+0x247>
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  15,92,239                           // subps         %xmm7,%xmm5
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  68,15,92,212                        // subps         %xmm4,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  68,15,40,252                        // movaps        %xmm4,%xmm15
  .byte  69,15,92,249                        // subps         %xmm9,%xmm15
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,198                           // subps         %xmm6,%xmm0
  .byte  65,15,89,199                        // mulps         %xmm15,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  68,15,40,251                        // movaps        %xmm3,%xmm15
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  102,69,15,56,20,249                 // blendvps      %xmm0,%xmm9,%xmm15
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  69,15,40,204                        // movaps        %xmm12,%xmm9
  .byte  69,15,92,233                        // subps         %xmm9,%xmm13
  .byte  68,15,89,232                        // mulps         %xmm0,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  69,15,88,199                        // addps         %xmm15,%xmm8
  .byte  65,15,89,205                        // mulps         %xmm13,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  68,15,40,92,36,232                  // movaps        -0x18(%rsp),%xmm11
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  68,15,88,205                        // addps         %xmm5,%xmm9
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,196,2                        // cmpleps       %xmm4,%xmm0
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,92,234                           // subps         %xmm2,%xmm5
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  68,15,89,245                        // mulps         %xmm5,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  65,15,92,222                        // subps         %xmm14,%xmm3
  .byte  102,15,56,20,218                    // blendvps      %xmm0,%xmm2,%xmm3
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  65,15,88,226                        // addps         %xmm10,%xmm4
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  65,15,40,237                        // movaps        %xmm13,%xmm5
  .byte  65,15,40,243                        // movaps        %xmm11,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_sse41
.globl _sk_overlay_sse41
FUNCTION(_sk_overlay_sse41)
_sk_overlay_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  68,15,40,21,89,72,0,0               // movaps        0x4859(%rip),%xmm10        # 52b0 <_sk_callback_sse41+0x257>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  68,15,40,235                        // movaps        %xmm3,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,92,204                           // subps         %xmm4,%xmm1
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,231                        // mulps         %xmm7,%xmm12
  .byte  65,15,89,205                        // mulps         %xmm13,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  68,15,92,233                        // subps         %xmm1,%xmm13
  .byte  102,69,15,56,20,238                 // blendvps      %xmm0,%xmm14,%xmm13
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  68,15,40,235                        // movaps        %xmm3,%xmm13
  .byte  69,15,92,233                        // subps         %xmm9,%xmm13
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,92,245                        // subps         %xmm5,%xmm14
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  102,69,15,56,20,233                 // blendvps      %xmm0,%xmm9,%xmm13
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  68,15,92,218                        // subps         %xmm2,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,92,238                        // subps         %xmm6,%xmm13
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  102,68,15,56,20,226                 // blendvps      %xmm0,%xmm2,%xmm12
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_sse41
.globl _sk_softlight_sse41
FUNCTION(_sk_softlight_sse41)
_sk_softlight_sse41:
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,41,76,36,200                     // movaps        %xmm1,-0x38(%rsp)
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,207,1                     // cmpltps       %xmm7,%xmm9
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,94,199                           // divps         %xmm7,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  15,40,13,48,71,0,0                  // movaps        0x4730(%rip),%xmm1        # 52c0 <_sk_callback_sse41+0x267>
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,92,208                        // subps         %xmm0,%xmm10
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  68,15,40,248                        // movaps        %xmm0,%xmm15
  .byte  15,82,208                           // rsqrtps       %xmm0,%xmm2
  .byte  68,15,83,218                        // rcpps         %xmm2,%xmm11
  .byte  68,15,92,216                        // subps         %xmm0,%xmm11
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,40,45,14,71,0,0               // movaps        0x470e(%rip),%xmm13        # 52d0 <_sk_callback_sse41+0x277>
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  68,15,89,242                        // mulps         %xmm2,%xmm14
  .byte  68,15,40,37,14,71,0,0               // movaps        0x470e(%rip),%xmm12        # 52e0 <_sk_callback_sse41+0x287>
  .byte  69,15,89,252                        // mulps         %xmm12,%xmm15
  .byte  69,15,88,254                        // addps         %xmm14,%xmm15
  .byte  15,40,198                           // movaps        %xmm6,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,69,15,56,20,223                 // blendvps      %xmm0,%xmm15,%xmm11
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,88,211                        // addps         %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,69,15,56,20,218                 // blendvps      %xmm0,%xmm10,%xmm11
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,88,197                        // addps         %xmm13,%xmm0
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  65,15,82,194                        // rsqrtps       %xmm10,%xmm0
  .byte  68,15,83,240                        // rcpps         %xmm0,%xmm14
  .byte  69,15,92,242                        // subps         %xmm10,%xmm14
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,68,15,56,20,242                 // blendvps      %xmm0,%xmm2,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  69,15,92,250                        // subps         %xmm10,%xmm15
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  68,15,89,250                        // mulps         %xmm2,%xmm15
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,242                        // mulps         %xmm2,%xmm14
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,242                        // addps         %xmm2,%xmm14
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,252                        // mulps         %xmm4,%xmm15
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,69,15,56,20,247                 // blendvps      %xmm0,%xmm15,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  15,40,100,36,216                    // movaps        -0x28(%rsp),%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,94,199                           // divps         %xmm7,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  15,92,200                           // subps         %xmm0,%xmm1
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,82,208                           // rsqrtps       %xmm0,%xmm2
  .byte  68,15,83,202                        // rcpps         %xmm2,%xmm9
  .byte  68,15,92,200                        // subps         %xmm0,%xmm9
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,89,210                           // mulps         %xmm2,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,194,199,2                        // cmpleps       %xmm7,%xmm0
  .byte  102,69,15,56,20,204                 // blendvps      %xmm0,%xmm12,%xmm9
  .byte  68,15,40,100,36,232                 // movaps        -0x18(%rsp),%xmm12
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  102,68,15,56,20,201                 // blendvps      %xmm0,%xmm1,%xmm9
  .byte  68,15,92,255                        // subps         %xmm7,%xmm15
  .byte  69,15,89,199                        // mulps         %xmm15,%xmm8
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  69,15,89,252                        // mulps         %xmm12,%xmm15
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  69,15,88,195                        // addps         %xmm11,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,40,108,36,184                    // movaps        -0x48(%rsp),%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_sse41
.globl _sk_hue_sse41
FUNCTION(_sk_hue_sse41)
_sk_hue_sse41:
  .byte  15,41,124,36,152                    // movaps        %xmm7,-0x68(%rsp)
  .byte  68,15,40,246                        // movaps        %xmm6,%xmm14
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,41,76,36,216                     // movaps        %xmm1,-0x28(%rsp)
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,41,84,36,200                  // movaps        %xmm10,-0x38(%rsp)
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  68,15,40,234                        // movaps        %xmm2,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,205                        // movaps        %xmm5,%xmm9
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  15,41,108,36,184                    // movaps        %xmm5,-0x48(%rsp)
  .byte  69,15,95,222                        // maxps         %xmm14,%xmm11
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  65,15,95,211                        // maxps         %xmm11,%xmm2
  .byte  65,15,40,230                        // movaps        %xmm14,%xmm4
  .byte  15,41,100,36,168                    // movaps        %xmm4,-0x58(%rsp)
  .byte  68,15,93,204                        // minps         %xmm4,%xmm9
  .byte  65,15,93,249                        // minps         %xmm9,%xmm7
  .byte  15,92,215                           // subps         %xmm7,%xmm2
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,93,253                        // minps         %xmm13,%xmm7
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,223                           // minps         %xmm7,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,95,253                        // maxps         %xmm13,%xmm7
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,95,199                           // maxps         %xmm7,%xmm0
  .byte  15,40,253                           // movaps        %xmm5,%xmm7
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  68,15,92,235                        // subps         %xmm3,%xmm13
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,94,208                        // divps         %xmm0,%xmm10
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,94,200                           // divps         %xmm0,%xmm1
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  68,15,94,232                        // divps         %xmm0,%xmm13
  .byte  15,194,195,4                        // cmpneqps      %xmm3,%xmm0
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  15,84,200                           // andps         %xmm0,%xmm1
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  15,40,5,121,68,0,0                  // movaps        0x4479(%rip),%xmm0        # 52f0 <_sk_callback_sse41+0x297>
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,40,21,126,68,0,0                 // movaps        0x447e(%rip),%xmm2        # 5300 <_sk_callback_sse41+0x2a7>
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  65,15,88,252                        // addps         %xmm12,%xmm7
  .byte  68,15,40,53,127,68,0,0              // movaps        0x447f(%rip),%xmm14        # 5310 <_sk_callback_sse41+0x2b7>
  .byte  68,15,40,252                        // movaps        %xmm4,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  68,15,88,255                        // addps         %xmm7,%xmm15
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  15,89,250                           // mulps         %xmm2,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  65,15,40,221                        // movaps        %xmm13,%xmm3
  .byte  65,15,89,222                        // mulps         %xmm14,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  69,15,89,248                        // mulps         %xmm8,%xmm15
  .byte  68,15,92,251                        // subps         %xmm3,%xmm15
  .byte  69,15,88,215                        // addps         %xmm15,%xmm10
  .byte  65,15,88,207                        // addps         %xmm15,%xmm1
  .byte  69,15,88,253                        // addps         %xmm13,%xmm15
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  65,15,93,223                        // minps         %xmm15,%xmm3
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  15,93,251                           // minps         %xmm3,%xmm7
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  69,15,89,247                        // mulps         %xmm15,%xmm14
  .byte  68,15,88,242                        // addps         %xmm2,%xmm14
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,207,2                     // cmpleps       %xmm7,%xmm9
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  69,15,92,238                        // subps         %xmm14,%xmm13
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,94,235                        // divps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,234                 // blendvps      %xmm0,%xmm10,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,95,199                        // maxps         %xmm15,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  65,15,40,248                        // movaps        %xmm8,%xmm7
  .byte  15,40,108,36,152                    // movaps        -0x68(%rsp),%xmm5
  .byte  15,89,253                           // mulps         %xmm5,%xmm7
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  65,15,194,226,1                     // cmpltps       %xmm10,%xmm4
  .byte  65,15,40,213                        // movaps        %xmm13,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  68,15,40,223                        // movaps        %xmm7,%xmm11
  .byte  69,15,92,222                        // subps         %xmm14,%xmm11
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  69,15,92,214                        // subps         %xmm14,%xmm10
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,92,230                        // subps         %xmm14,%xmm12
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  68,15,94,227                        // divps         %xmm3,%xmm12
  .byte  69,15,88,230                        // addps         %xmm14,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,202                        // divps         %xmm10,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,68,15,56,20,225                 // blendvps      %xmm0,%xmm1,%xmm12
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  15,94,203                           // divps         %xmm3,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,207                 // blendvps      %xmm0,%xmm15,%xmm1
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  102,15,56,20,202                    // blendvps      %xmm0,%xmm2,%xmm1
  .byte  68,15,40,13,67,67,0,0               // movaps        0x4343(%rip),%xmm9        # 5320 <_sk_callback_sse41+0x2c7>
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  15,92,229                           // subps         %xmm5,%xmm4
  .byte  15,40,68,36,200                     // movaps        -0x38(%rsp),%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,92,36,216                     // movaps        -0x28(%rsp),%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  15,89,100,36,232                    // mulps         -0x18(%rsp),%xmm4
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  68,15,95,234                        // maxps         %xmm2,%xmm13
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  15,95,202                           // maxps         %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  65,15,88,197                        // addps         %xmm13,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,108,36,184                    // movaps        -0x48(%rsp),%xmm5
  .byte  15,89,213                           // mulps         %xmm5,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,88,204                        // addps         %xmm4,%xmm9
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_sse41
.globl _sk_saturation_sse41
FUNCTION(_sk_saturation_sse41)
_sk_saturation_sse41:
  .byte  68,15,40,206                        // movaps        %xmm6,%xmm9
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,41,76,36,216                     // movaps        %xmm1,-0x28(%rsp)
  .byte  15,41,68,36,200                     // movaps        %xmm0,-0x38(%rsp)
  .byte  68,15,40,212                        // movaps        %xmm4,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  68,15,40,220                        // movaps        %xmm4,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,41,116,36,184                 // movaps        %xmm14,-0x48(%rsp)
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,41,76,36,232                  // movaps        %xmm9,-0x18(%rsp)
  .byte  65,15,95,217                        // maxps         %xmm9,%xmm3
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,95,211                           // maxps         %xmm3,%xmm2
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,93,225                        // minps         %xmm9,%xmm12
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,93,220                        // minps         %xmm12,%xmm3
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,41,100,36,168                 // movaps        %xmm12,-0x58(%rsp)
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  15,95,248                           // maxps         %xmm0,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,94,223                        // divps         %xmm7,%xmm11
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  68,15,94,199                        // divps         %xmm7,%xmm8
  .byte  15,194,248,4                        // cmpneqps      %xmm0,%xmm7
  .byte  68,15,84,215                        // andps         %xmm7,%xmm10
  .byte  68,15,84,223                        // andps         %xmm7,%xmm11
  .byte  68,15,84,199                        // andps         %xmm7,%xmm8
  .byte  15,40,21,253,65,0,0                 // movaps        0x41fd(%rip),%xmm2        # 5330 <_sk_callback_sse41+0x2d7>
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  15,40,13,0,66,0,0                   // movaps        0x4200(%rip),%xmm1        # 5340 <_sk_callback_sse41+0x2e7>
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  68,15,40,45,255,65,0,0              // movaps        0x41ff(%rip),%xmm13        # 5350 <_sk_callback_sse41+0x2f7>
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  68,15,88,247                        // addps         %xmm7,%xmm14
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,89,218                           // mulps         %xmm2,%xmm3
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  65,15,89,221                        // mulps         %xmm13,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  68,15,92,243                        // subps         %xmm3,%xmm14
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,88,240                        // addps         %xmm8,%xmm14
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,93,198                        // minps         %xmm14,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,88,233                        // addps         %xmm1,%xmm13
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  65,15,40,253                        // movaps        %xmm13,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,92,253                        // subps         %xmm13,%xmm15
  .byte  69,15,89,253                        // mulps         %xmm13,%xmm15
  .byte  68,15,94,255                        // divps         %xmm7,%xmm15
  .byte  69,15,88,253                        // addps         %xmm13,%xmm15
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,250                 // blendvps      %xmm0,%xmm10,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,95,198                        // maxps         %xmm14,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,194,194,1                     // cmpltps       %xmm10,%xmm8
  .byte  65,15,40,223                        // movaps        %xmm15,%xmm3
  .byte  65,15,92,221                        // subps         %xmm13,%xmm3
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,92,205                        // subps         %xmm13,%xmm1
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,251                 // blendvps      %xmm0,%xmm3,%xmm15
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  68,15,94,231                        // divps         %xmm7,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,227                 // blendvps      %xmm0,%xmm11,%xmm12
  .byte  65,15,40,220                        // movaps        %xmm12,%xmm3
  .byte  65,15,92,221                        // subps         %xmm13,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,227                 // blendvps      %xmm0,%xmm3,%xmm12
  .byte  69,15,40,222                        // movaps        %xmm14,%xmm11
  .byte  69,15,92,221                        // subps         %xmm13,%xmm11
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  68,15,94,223                        // divps         %xmm7,%xmm11
  .byte  69,15,88,221                        // addps         %xmm13,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,222                 // blendvps      %xmm0,%xmm14,%xmm11
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  65,15,92,253                        // subps         %xmm13,%xmm7
  .byte  15,89,249                           // mulps         %xmm1,%xmm7
  .byte  65,15,94,250                        // divps         %xmm10,%xmm7
  .byte  65,15,88,253                        // addps         %xmm13,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  102,68,15,56,20,223                 // blendvps      %xmm0,%xmm7,%xmm11
  .byte  68,15,40,13,197,64,0,0              // movaps        0x40c5(%rip),%xmm9        # 5360 <_sk_callback_sse41+0x307>
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,92,204                        // subps         %xmm4,%xmm9
  .byte  15,40,124,36,168                    // movaps        -0x58(%rsp),%xmm7
  .byte  15,88,231                           // addps         %xmm7,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,248                        // maxps         %xmm0,%xmm15
  .byte  68,15,95,224                        // maxps         %xmm0,%xmm12
  .byte  68,15,95,216                        // maxps         %xmm0,%xmm11
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,40,68,36,200                     // movaps        -0x38(%rsp),%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,40,84,36,216                     // movaps        -0x28(%rsp),%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,209                           // addps         %xmm1,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  68,15,89,68,36,232                  // mulps         -0x18(%rsp),%xmm8
  .byte  15,40,84,36,184                     // movaps        -0x48(%rsp),%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_sse41
.globl _sk_color_sse41
FUNCTION(_sk_color_sse41)
_sk_color_sse41:
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,41,100,36,200                 // movaps        %xmm12,-0x38(%rsp)
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,41,92,36,216                  // movaps        %xmm11,-0x28(%rsp)
  .byte  68,15,40,212                        // movaps        %xmm4,%xmm10
  .byte  68,15,41,84,36,232                  // movaps        %xmm10,-0x18(%rsp)
  .byte  15,40,243                           // movaps        %xmm3,%xmm6
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,240                        // movaps        %xmm8,%xmm14
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,40,13,16,64,0,0               // movaps        0x4010(%rip),%xmm9        # 5370 <_sk_callback_sse41+0x317>
  .byte  65,15,40,250                        // movaps        %xmm10,%xmm7
  .byte  65,15,89,249                        // mulps         %xmm9,%xmm7
  .byte  68,15,40,21,16,64,0,0               // movaps        0x4010(%rip),%xmm10        # 5380 <_sk_callback_sse41+0x327>
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,40,29,13,64,0,0               // movaps        0x400d(%rip),%xmm11        # 5390 <_sk_callback_sse41+0x337>
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  68,15,88,235                        // addps         %xmm3,%xmm13
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,89,250                        // mulps         %xmm10,%xmm7
  .byte  15,88,251                           // addps         %xmm3,%xmm7
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,89,238                        // mulps         %xmm6,%xmm13
  .byte  68,15,92,235                        // subps         %xmm3,%xmm13
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  65,15,88,205                        // addps         %xmm13,%xmm1
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,93,197                        // minps         %xmm13,%xmm0
  .byte  65,15,40,222                        // movaps        %xmm14,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  69,15,89,206                        // mulps         %xmm14,%xmm9
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  69,15,40,230                        // movaps        %xmm14,%xmm12
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  68,15,94,231                        // divps         %xmm7,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,230                 // blendvps      %xmm0,%xmm14,%xmm12
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,95,197                        // maxps         %xmm13,%xmm0
  .byte  65,15,40,214                        // movaps        %xmm14,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,89,220                           // mulps         %xmm4,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,194,210,1                     // cmpltps       %xmm2,%xmm10
  .byte  69,15,40,244                        // movaps        %xmm12,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  68,15,40,251                        // movaps        %xmm3,%xmm15
  .byte  69,15,92,251                        // subps         %xmm11,%xmm15
  .byte  69,15,89,247                        // mulps         %xmm15,%xmm14
  .byte  65,15,92,211                        // subps         %xmm11,%xmm2
  .byte  68,15,94,242                        // divps         %xmm2,%xmm14
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,230                 // blendvps      %xmm0,%xmm14,%xmm12
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  68,15,94,247                        // divps         %xmm7,%xmm14
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  65,15,40,206                        // movaps        %xmm14,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,68,15,56,20,241                 // blendvps      %xmm0,%xmm1,%xmm14
  .byte  65,15,40,205                        // movaps        %xmm13,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,94,207                           // divps         %xmm7,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,205                 // blendvps      %xmm0,%xmm13,%xmm1
  .byte  15,40,249                           // movaps        %xmm1,%xmm7
  .byte  65,15,92,251                        // subps         %xmm11,%xmm7
  .byte  65,15,89,255                        // mulps         %xmm15,%xmm7
  .byte  15,94,250                           // divps         %xmm2,%xmm7
  .byte  65,15,88,251                        // addps         %xmm11,%xmm7
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,15,56,20,207                    // blendvps      %xmm0,%xmm7,%xmm1
  .byte  68,15,40,13,201,62,0,0              // movaps        0x3ec9(%rip),%xmm9        # 53a0 <_sk_callback_sse41+0x347>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  15,89,232                           // mulps         %xmm0,%xmm5
  .byte  15,89,68,36,184                     // mulps         -0x48(%rsp),%xmm0
  .byte  68,15,92,206                        // subps         %xmm6,%xmm9
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  68,15,95,242                        // maxps         %xmm2,%xmm14
  .byte  15,95,202                           // maxps         %xmm2,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,100,36,232                    // movaps        -0x18(%rsp),%xmm4
  .byte  15,89,212                           // mulps         %xmm4,%xmm2
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,88,210                        // addps         %xmm2,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  15,40,84,36,200                     // movaps        -0x38(%rsp),%xmm2
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_sse41
.globl _sk_luminosity_sse41
FUNCTION(_sk_luminosity_sse41)
_sk_luminosity_sse41:
  .byte  15,41,116,36,200                    // movaps        %xmm6,-0x38(%rsp)
  .byte  15,41,108,36,232                    // movaps        %xmm5,-0x18(%rsp)
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  68,15,41,68,36,216                  // movaps        %xmm8,-0x28(%rsp)
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,5,33,62,0,0                // movaps        0x3e21(%rip),%xmm8        # 53b0 <_sk_callback_sse41+0x357>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  68,15,40,21,37,62,0,0               // movaps        0x3e25(%rip),%xmm10        # 53c0 <_sk_callback_sse41+0x367>
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  65,15,89,234                        // mulps         %xmm10,%xmm5
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  68,15,40,37,35,62,0,0               // movaps        0x3e23(%rip),%xmm12        # 53d0 <_sk_callback_sse41+0x377>
  .byte  68,15,40,242                        // movaps        %xmm2,%xmm14
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  68,15,88,245                        // addps         %xmm5,%xmm14
  .byte  65,15,40,235                        // movaps        %xmm11,%xmm5
  .byte  65,15,89,232                        // mulps         %xmm8,%xmm5
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  15,88,213                           // addps         %xmm5,%xmm2
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  65,15,89,236                        // mulps         %xmm12,%xmm5
  .byte  15,88,234                           // addps         %xmm2,%xmm5
  .byte  68,15,89,247                        // mulps         %xmm7,%xmm14
  .byte  68,15,92,245                        // subps         %xmm5,%xmm14
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  68,15,88,240                        // addps         %xmm0,%xmm14
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,93,198                        // minps         %xmm14,%xmm0
  .byte  65,15,40,235                        // movaps        %xmm11,%xmm5
  .byte  15,93,232                           // minps         %xmm0,%xmm5
  .byte  69,15,89,195                        // mulps         %xmm11,%xmm8
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  69,15,88,226                        // addps         %xmm10,%xmm12
  .byte  69,15,87,210                        // xorps         %xmm10,%xmm10
  .byte  68,15,194,213,2                     // cmpleps       %xmm5,%xmm10
  .byte  69,15,40,235                        // movaps        %xmm11,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  65,15,40,244                        // movaps        %xmm12,%xmm6
  .byte  15,92,245                           // subps         %xmm5,%xmm6
  .byte  68,15,94,238                        // divps         %xmm6,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,235                 // blendvps      %xmm0,%xmm11,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,95,198                        // maxps         %xmm14,%xmm0
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,89,239                           // mulps         %xmm7,%xmm5
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,194,218,1                     // cmpltps       %xmm2,%xmm11
  .byte  69,15,40,197                        // movaps        %xmm13,%xmm8
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  69,15,92,252                        // subps         %xmm12,%xmm15
  .byte  69,15,89,199                        // mulps         %xmm15,%xmm8
  .byte  65,15,92,212                        // subps         %xmm12,%xmm2
  .byte  68,15,94,194                        // divps         %xmm2,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,69,15,56,20,232                 // blendvps      %xmm0,%xmm8,%xmm13
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,94,198                        // divps         %xmm6,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  68,15,94,202                        // divps         %xmm2,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  69,15,40,206                        // movaps        %xmm14,%xmm9
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,204                        // mulps         %xmm12,%xmm9
  .byte  68,15,94,206                        // divps         %xmm6,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,206                 // blendvps      %xmm0,%xmm14,%xmm9
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,92,244                        // subps         %xmm12,%xmm6
  .byte  65,15,89,247                        // mulps         %xmm15,%xmm6
  .byte  15,94,242                           // divps         %xmm2,%xmm6
  .byte  65,15,88,244                        // addps         %xmm12,%xmm6
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,68,15,56,20,206                 // blendvps      %xmm0,%xmm6,%xmm9
  .byte  15,40,5,217,60,0,0                  // movaps        0x3cd9(%rip),%xmm0        # 53e0 <_sk_callback_sse41+0x387>
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,92,215                           // subps         %xmm7,%xmm2
  .byte  15,89,226                           // mulps         %xmm2,%xmm4
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,89,84,36,184                     // mulps         -0x48(%rsp),%xmm2
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  68,15,95,237                        // maxps         %xmm5,%xmm13
  .byte  68,15,95,197                        // maxps         %xmm5,%xmm8
  .byte  68,15,95,205                        // maxps         %xmm5,%xmm9
  .byte  15,40,232                           // movaps        %xmm0,%xmm5
  .byte  68,15,40,84,36,216                  // movaps        -0x28(%rsp),%xmm10
  .byte  65,15,89,234                        // mulps         %xmm10,%xmm5
  .byte  15,88,229                           // addps         %xmm5,%xmm4
  .byte  65,15,88,229                        // addps         %xmm13,%xmm4
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,40,108,36,232                    // movaps        -0x18(%rsp),%xmm5
  .byte  15,89,245                           // mulps         %xmm5,%xmm6
  .byte  15,88,206                           // addps         %xmm6,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,226                        // movaps        %xmm10,%xmm4
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_rgba_8888_sse41
.globl _sk_srcover_rgba_8888_sse41
FUNCTION(_sk_srcover_rgba_8888_sse41)
_sk_srcover_rgba_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,217,0,0,0                    // jne           185b <_sk_srcover_rgba_8888_sse41+0xe7>
  .byte  243,15,111,60,144                   // movdqu        (%rax,%rdx,4),%xmm7
  .byte  77,133,192                          // test          %r8,%r8
  .byte  102,15,111,37,94,60,0,0             // movdqa        0x3c5e(%rip),%xmm4        # 53f0 <_sk_callback_sse41+0x397>
  .byte  102,15,219,231                      // pand          %xmm7,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  102,15,111,239                      // movdqa        %xmm7,%xmm5
  .byte  102,15,56,0,45,90,60,0,0            // pshufb        0x3c5a(%rip),%xmm5        # 5400 <_sk_callback_sse41+0x3a7>
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  102,15,111,247                      // movdqa        %xmm7,%xmm6
  .byte  102,15,56,0,53,90,60,0,0            // pshufb        0x3c5a(%rip),%xmm6        # 5410 <_sk_callback_sse41+0x3b7>
  .byte  15,91,246                           // cvtdq2ps      %xmm6,%xmm6
  .byte  102,15,114,215,24                   // psrld         $0x18,%xmm7
  .byte  15,91,255                           // cvtdq2ps      %xmm7,%xmm7
  .byte  68,15,40,5,87,60,0,0                // movaps        0x3c57(%rip),%xmm8        # 5420 <_sk_callback_sse41+0x3c7>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  68,15,40,37,91,60,0,0               // movaps        0x3c5b(%rip),%xmm12        # 5430 <_sk_callback_sse41+0x3d7>
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  68,15,88,209                        // addps         %xmm1,%xmm10
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  65,15,89,220                        // mulps         %xmm12,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,88,195                        // addps         %xmm3,%xmm8
  .byte  102,65,15,91,193                    // cvtps2dq      %xmm9,%xmm0
  .byte  102,65,15,91,202                    // cvtps2dq      %xmm10,%xmm1
  .byte  102,15,114,241,8                    // pslld         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,65,15,91,211                    // cvtps2dq      %xmm11,%xmm2
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,91,192                    // cvtps2dq      %xmm8,%xmm0
  .byte  102,15,114,240,24                   // pslld         $0x18,%xmm0
  .byte  102,15,235,194                      // por           %xmm2,%xmm0
  .byte  102,15,235,193                      // por           %xmm1,%xmm0
  .byte  117,89                              // jne           189b <_sk_srcover_rgba_8888_sse41+0x127>
  .byte  243,15,127,4,144                    // movdqu        %xmm0,(%rax,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,255                      // pxor          %xmm7,%xmm7
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,35                              // je            188f <_sk_srcover_rgba_8888_sse41+0x11b>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            1887 <_sk_srcover_rgba_8888_sse41+0x113>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  15,133,11,255,255,255               // jne           1787 <_sk_srcover_rgba_8888_sse41+0x13>
  .byte  102,15,110,100,144,8                // movd          0x8(%rax,%rdx,4),%xmm4
  .byte  102,15,112,252,69                   // pshufd        $0x45,%xmm4,%xmm7
  .byte  102,15,58,34,124,144,4,1            // pinsrd        $0x1,0x4(%rax,%rdx,4),%xmm7
  .byte  102,15,58,34,60,144,0               // pinsrd        $0x0,(%rax,%rdx,4),%xmm7
  .byte  233,236,254,255,255                 // jmpq          1787 <_sk_srcover_rgba_8888_sse41+0x13>
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,28                              // je            18c4 <_sk_srcover_rgba_8888_sse41+0x150>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,14                              // je            18bc <_sk_srcover_rgba_8888_sse41+0x148>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,147                             // jne           1847 <_sk_srcover_rgba_8888_sse41+0xd3>
  .byte  102,15,58,22,68,144,8,2             // pextrd        $0x2,%xmm0,0x8(%rax,%rdx,4)
  .byte  102,15,58,22,68,144,4,1             // pextrd        $0x1,%xmm0,0x4(%rax,%rdx,4)
  .byte  102,15,126,4,144                    // movd          %xmm0,(%rax,%rdx,4)
  .byte  233,121,255,255,255                 // jmpq          1847 <_sk_srcover_rgba_8888_sse41+0xd3>

HIDDEN _sk_clamp_0_sse41
.globl _sk_clamp_0_sse41
FUNCTION(_sk_clamp_0_sse41)
_sk_clamp_0_sse41:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,95,200                        // maxps         %xmm8,%xmm1
  .byte  65,15,95,208                        // maxps         %xmm8,%xmm2
  .byte  65,15,95,216                        // maxps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_sse41
.globl _sk_clamp_1_sse41
FUNCTION(_sk_clamp_1_sse41)
_sk_clamp_1_sse41:
  .byte  68,15,40,5,82,59,0,0                // movaps        0x3b52(%rip),%xmm8        # 5440 <_sk_callback_sse41+0x3e7>
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  65,15,93,208                        // minps         %xmm8,%xmm2
  .byte  65,15,93,216                        // minps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_sse41
.globl _sk_clamp_a_sse41
FUNCTION(_sk_clamp_a_sse41)
_sk_clamp_a_sse41:
  .byte  15,93,29,71,59,0,0                  // minps         0x3b47(%rip),%xmm3        # 5450 <_sk_callback_sse41+0x3f7>
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_sse41
.globl _sk_set_rgb_sse41
FUNCTION(_sk_set_rgb_sse41)
_sk_set_rgb_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_sse41
.globl _sk_swap_rb_sse41
FUNCTION(_sk_swap_rb_sse41)
_sk_swap_rb_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_sse41
.globl _sk_swap_sse41
FUNCTION(_sk_swap_sse41)
_sk_swap_sse41:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,40,248                        // movaps        %xmm8,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_sse41
.globl _sk_move_src_dst_sse41
FUNCTION(_sk_move_src_dst_sse41)
_sk_move_src_dst_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_sse41
.globl _sk_move_dst_src_sse41
FUNCTION(_sk_move_dst_src_sse41)
_sk_move_dst_src_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_sse41
.globl _sk_premul_sse41
FUNCTION(_sk_premul_sse41)
_sk_premul_sse41:
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_sse41
.globl _sk_unpremul_sse41
FUNCTION(_sk_unpremul_sse41)
_sk_unpremul_sse41:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,40,13,178,58,0,0              // movaps        0x3ab2(%rip),%xmm9        # 5460 <_sk_callback_sse41+0x407>
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  68,15,194,195,4                     // cmpneqps      %xmm3,%xmm8
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_sse41
.globl _sk_from_srgb_sse41
FUNCTION(_sk_from_srgb_sse41)
_sk_from_srgb_sse41:
  .byte  68,15,40,29,157,58,0,0              // movaps        0x3a9d(%rip),%xmm11        # 5470 <_sk_callback_sse41+0x417>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  69,15,89,210                        // mulps         %xmm10,%xmm10
  .byte  68,15,40,37,149,58,0,0              // movaps        0x3a95(%rip),%xmm12        # 5480 <_sk_callback_sse41+0x427>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,40,45,149,58,0,0              // movaps        0x3a95(%rip),%xmm13        # 5490 <_sk_callback_sse41+0x437>
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  68,15,40,53,149,58,0,0              // movaps        0x3a95(%rip),%xmm14        # 54a0 <_sk_callback_sse41+0x447>
  .byte  69,15,88,198                        // addps         %xmm14,%xmm8
  .byte  68,15,40,61,153,58,0,0              // movaps        0x3a99(%rip),%xmm15        # 54b0 <_sk_callback_sse41+0x457>
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,211                        // mulps         %xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,89,204                        // mulps         %xmm12,%xmm9
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  65,15,194,207,1                     // cmpltps       %xmm15,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  102,69,15,56,20,202                 // blendvps      %xmm0,%xmm10,%xmm9
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  69,15,89,210                        // mulps         %xmm10,%xmm10
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  65,15,194,215,1                     // cmpltps       %xmm15,%xmm2
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_sse41
.globl _sk_to_srgb_sse41
FUNCTION(_sk_to_srgb_sse41)
_sk_to_srgb_sse41:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  68,15,82,192                        // rsqrtps       %xmm0,%xmm8
  .byte  68,15,40,29,17,58,0,0               // movaps        0x3a11(%rip),%xmm11        # 54c0 <_sk_callback_sse41+0x467>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  68,15,40,37,17,58,0,0               // movaps        0x3a11(%rip),%xmm12        # 54d0 <_sk_callback_sse41+0x477>
  .byte  69,15,40,248                        // movaps        %xmm8,%xmm15
  .byte  69,15,89,252                        // mulps         %xmm12,%xmm15
  .byte  68,15,40,21,17,58,0,0               // movaps        0x3a11(%rip),%xmm10        # 54e0 <_sk_callback_sse41+0x487>
  .byte  69,15,88,250                        // addps         %xmm10,%xmm15
  .byte  69,15,89,248                        // mulps         %xmm8,%xmm15
  .byte  68,15,40,45,17,58,0,0               // movaps        0x3a11(%rip),%xmm13        # 54f0 <_sk_callback_sse41+0x497>
  .byte  69,15,88,253                        // addps         %xmm13,%xmm15
  .byte  68,15,40,53,21,58,0,0               // movaps        0x3a15(%rip),%xmm14        # 5500 <_sk_callback_sse41+0x4a7>
  .byte  69,15,88,198                        // addps         %xmm14,%xmm8
  .byte  69,15,83,192                        // rcpps         %xmm8,%xmm8
  .byte  69,15,89,199                        // mulps         %xmm15,%xmm8
  .byte  68,15,40,61,17,58,0,0               // movaps        0x3a11(%rip),%xmm15        # 5510 <_sk_callback_sse41+0x4b7>
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  68,15,82,202                        // rsqrtps       %xmm2,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,88,197                        // addps         %xmm13,%xmm0
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  69,15,83,201                        // rcpps         %xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,194,215,1                     // cmpltps       %xmm15,%xmm2
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,68,15,56,20,201                 // blendvps      %xmm0,%xmm1,%xmm9
  .byte  15,82,195                           // rsqrtps       %xmm3,%xmm0
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  69,15,88,226                        // addps         %xmm10,%xmm12
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  65,15,88,198                        // addps         %xmm14,%xmm0
  .byte  68,15,83,208                        // rcpps         %xmm0,%xmm10
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  68,15,89,219                        // mulps         %xmm3,%xmm11
  .byte  65,15,194,223,1                     // cmpltps       %xmm15,%xmm3
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_sse41
.globl _sk_rgb_to_hsl_sse41
FUNCTION(_sk_rgb_to_hsl_sse41)
_sk_rgb_to_hsl_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,95,217                        // maxps         %xmm9,%xmm11
  .byte  68,15,95,218                        // maxps         %xmm2,%xmm11
  .byte  69,15,40,224                        // movaps        %xmm8,%xmm12
  .byte  69,15,93,225                        // minps         %xmm9,%xmm12
  .byte  68,15,93,226                        // minps         %xmm2,%xmm12
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,40,53,94,57,0,0               // movaps        0x395e(%rip),%xmm14        # 5520 <_sk_callback_sse41+0x4c7>
  .byte  68,15,94,241                        // divps         %xmm1,%xmm14
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  69,15,194,208,0                     // cmpeqps       %xmm8,%xmm10
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  68,15,194,250,1                     // cmpltps       %xmm2,%xmm15
  .byte  68,15,84,61,69,57,0,0               // andps         0x3945(%rip),%xmm15        # 5530 <_sk_callback_sse41+0x4d7>
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,193,0                     // cmpeqps       %xmm9,%xmm0
  .byte  65,15,92,208                        // subps         %xmm8,%xmm2
  .byte  65,15,89,214                        // mulps         %xmm14,%xmm2
  .byte  68,15,40,45,56,57,0,0               // movaps        0x3938(%rip),%xmm13        # 5540 <_sk_callback_sse41+0x4e7>
  .byte  65,15,88,213                        // addps         %xmm13,%xmm2
  .byte  69,15,92,193                        // subps         %xmm9,%xmm8
  .byte  69,15,89,198                        // mulps         %xmm14,%xmm8
  .byte  68,15,88,5,52,57,0,0                // addps         0x3934(%rip),%xmm8        # 5550 <_sk_callback_sse41+0x4f7>
  .byte  102,68,15,56,20,194                 // blendvps      %xmm0,%xmm2,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  102,69,15,56,20,199                 // blendvps      %xmm0,%xmm15,%xmm8
  .byte  68,15,89,5,44,57,0,0                // mulps         0x392c(%rip),%xmm8        # 5560 <_sk_callback_sse41+0x507>
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  69,15,194,204,4                     // cmpneqps      %xmm12,%xmm9
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  15,40,5,32,57,0,0                   // movaps        0x3920(%rip),%xmm0        # 5570 <_sk_callback_sse41+0x517>
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  15,194,194,1                        // cmpltps       %xmm2,%xmm0
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  102,69,15,56,20,221                 // blendvps      %xmm0,%xmm13,%xmm11
  .byte  65,15,94,203                        // divps         %xmm11,%xmm1
  .byte  65,15,84,201                        // andps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_sse41
.globl _sk_hsl_to_rgb_sse41
FUNCTION(_sk_hsl_to_rgb_sse41)
_sk_hsl_to_rgb_sse41:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,41,92,36,168                     // movaps        %xmm3,-0x58(%rsp)
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,40,13,230,56,0,0              // movaps        0x38e6(%rip),%xmm9        # 5580 <_sk_callback_sse41+0x527>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,194,194,2                        // cmpleps       %xmm2,%xmm0
  .byte  15,40,217                           // movaps        %xmm1,%xmm3
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,89,234                           // mulps         %xmm2,%xmm5
  .byte  15,92,221                           // subps         %xmm5,%xmm3
  .byte  102,15,56,20,235                    // blendvps      %xmm0,%xmm3,%xmm5
  .byte  15,88,234                           // addps         %xmm2,%xmm5
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  15,41,84,36,152                     // movaps        %xmm2,-0x68(%rsp)
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  68,15,92,197                        // subps         %xmm5,%xmm8
  .byte  68,15,40,53,193,56,0,0              // movaps        0x38c1(%rip),%xmm14        # 5590 <_sk_callback_sse41+0x537>
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  102,65,15,58,8,198,1                // roundps       $0x1,%xmm14,%xmm0
  .byte  68,15,92,240                        // subps         %xmm0,%xmm14
  .byte  68,15,40,29,186,56,0,0              // movaps        0x38ba(%rip),%xmm11        # 55a0 <_sk_callback_sse41+0x547>
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  65,15,92,240                        // subps         %xmm8,%xmm6
  .byte  15,40,61,179,56,0,0                 // movaps        0x38b3(%rip),%xmm7        # 55b0 <_sk_callback_sse41+0x557>
  .byte  69,15,40,238                        // movaps        %xmm14,%xmm13
  .byte  68,15,89,239                        // mulps         %xmm7,%xmm13
  .byte  15,40,29,180,56,0,0                 // movaps        0x38b4(%rip),%xmm3        # 55c0 <_sk_callback_sse41+0x567>
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  69,15,88,224                        // addps         %xmm8,%xmm12
  .byte  102,69,15,56,20,224                 // blendvps      %xmm0,%xmm8,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  102,69,15,56,20,252                 // blendvps      %xmm0,%xmm12,%xmm15
  .byte  68,15,40,37,147,56,0,0              // movaps        0x3893(%rip),%xmm12        # 55d0 <_sk_callback_sse41+0x577>
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  65,15,194,198,2                     // cmpleps       %xmm14,%xmm0
  .byte  68,15,89,238                        // mulps         %xmm6,%xmm13
  .byte  69,15,88,232                        // addps         %xmm8,%xmm13
  .byte  102,69,15,56,20,239                 // blendvps      %xmm0,%xmm15,%xmm13
  .byte  69,15,87,246                        // xorps         %xmm14,%xmm14
  .byte  68,15,194,241,0                     // cmpeqps       %xmm1,%xmm14
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  102,68,15,56,20,234                 // blendvps      %xmm0,%xmm2,%xmm13
  .byte  102,65,15,58,8,194,1                // roundps       $0x1,%xmm10,%xmm0
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  102,65,15,56,20,208                 // blendvps      %xmm0,%xmm8,%xmm2
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  102,15,56,20,226                    // blendvps      %xmm0,%xmm2,%xmm4
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  65,15,194,199,2                     // cmpleps       %xmm15,%xmm0
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  102,15,56,20,204                    // blendvps      %xmm0,%xmm4,%xmm1
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  15,40,84,36,152                     // movaps        -0x68(%rsp),%xmm2
  .byte  102,15,56,20,202                    // blendvps      %xmm0,%xmm2,%xmm1
  .byte  68,15,88,21,11,56,0,0               // addps         0x380b(%rip),%xmm10        # 55e0 <_sk_callback_sse41+0x587>
  .byte  102,65,15,58,8,194,1                // roundps       $0x1,%xmm10,%xmm0
  .byte  68,15,92,208                        // subps         %xmm0,%xmm10
  .byte  69,15,194,218,2                     // cmpleps       %xmm10,%xmm11
  .byte  65,15,89,250                        // mulps         %xmm10,%xmm7
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  102,65,15,56,20,216                 // blendvps      %xmm0,%xmm8,%xmm3
  .byte  69,15,194,202,2                     // cmpleps       %xmm10,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,15,56,20,235                    // blendvps      %xmm0,%xmm3,%xmm5
  .byte  69,15,194,226,2                     // cmpleps       %xmm10,%xmm12
  .byte  15,89,254                           // mulps         %xmm6,%xmm7
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  102,68,15,56,20,197                 // blendvps      %xmm0,%xmm5,%xmm8
  .byte  65,15,40,198                        // movaps        %xmm14,%xmm0
  .byte  102,68,15,56,20,194                 // blendvps      %xmm0,%xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  15,40,100,36,184                    // movaps        -0x48(%rsp),%xmm4
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_sse41
.globl _sk_scale_1_float_sse41
FUNCTION(_sk_scale_1_float_sse41)
_sk_scale_1_float_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_sse41
.globl _sk_scale_u8_sse41
FUNCTION(_sk_scale_u8_sse41)
_sk_scale_u8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,52                              // jne           1eae <_sk_scale_u8_sse41+0x3e>
  .byte  102,69,15,56,49,4,18                // pmovzxbd      (%r10,%rdx,1),%xmm8
  .byte  102,68,15,219,5,102,55,0,0          // pand          0x3766(%rip),%xmm8        # 55f0 <_sk_callback_sse41+0x597>
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,106,55,0,0               // mulps         0x376a(%rip),%xmm8        # 5600 <_sk_callback_sse41+0x5a7>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,42                              // je            1eea <_sk_scale_u8_sse41+0x7a>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,23                              // je            1edd <_sk_scale_u8_sse41+0x6d>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,181                             // jne           1e81 <_sk_scale_u8_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,69                // pshufd        $0x45,%xmm8,%xmm8
  .byte  65,15,182,68,18,1                   // movzbl        0x1(%r10,%rdx,1),%eax
  .byte  102,68,15,58,34,192,1               // pinsrd        $0x1,%eax,%xmm8
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,68,15,58,34,192,0               // pinsrd        $0x0,%eax,%xmm8
  .byte  235,137                             // jmp           1e81 <_sk_scale_u8_sse41+0x11>

HIDDEN _sk_lerp_1_float_sse41
.globl _sk_lerp_1_float_sse41
FUNCTION(_sk_lerp_1_float_sse41)
_sk_lerp_1_float_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_sse41
.globl _sk_lerp_u8_sse41
FUNCTION(_sk_lerp_u8_sse41)
_sk_lerp_u8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,72                              // jne           1f82 <_sk_lerp_u8_sse41+0x52>
  .byte  102,69,15,56,49,4,18                // pmovzxbd      (%r10,%rdx,1),%xmm8
  .byte  102,68,15,219,5,198,54,0,0          // pand          0x36c6(%rip),%xmm8        # 5610 <_sk_callback_sse41+0x5b7>
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,202,54,0,0               // mulps         0x36ca(%rip),%xmm8        # 5620 <_sk_callback_sse41+0x5c7>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,42                              // je            1fbe <_sk_lerp_u8_sse41+0x8e>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,23                              // je            1fb1 <_sk_lerp_u8_sse41+0x81>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,161                             // jne           1f41 <_sk_lerp_u8_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,69                // pshufd        $0x45,%xmm8,%xmm8
  .byte  65,15,182,68,18,1                   // movzbl        0x1(%r10,%rdx,1),%eax
  .byte  102,68,15,58,34,192,1               // pinsrd        $0x1,%eax,%xmm8
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,68,15,58,34,192,0               // pinsrd        $0x0,%eax,%xmm8
  .byte  233,114,255,255,255                 // jmpq          1f41 <_sk_lerp_u8_sse41+0x11>

HIDDEN _sk_lerp_565_sse41
.globl _sk_lerp_565_sse41
FUNCTION(_sk_lerp_565_sse41)
_sk_lerp_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,152,0,0,0                    // jne           2075 <_sk_lerp_565_sse41+0xa6>
  .byte  102,69,15,56,51,12,82               // pmovzxwd      (%r10,%rdx,2),%xmm9
  .byte  102,68,15,111,5,67,54,0,0           // movdqa        0x3643(%rip),%xmm8        # 5630 <_sk_callback_sse41+0x5d7>
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,66,54,0,0                // mulps         0x3642(%rip),%xmm8        # 5640 <_sk_callback_sse41+0x5e7>
  .byte  102,68,15,111,21,73,54,0,0          // movdqa        0x3649(%rip),%xmm10        # 5650 <_sk_callback_sse41+0x5f7>
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  68,15,89,21,72,54,0,0               // mulps         0x3648(%rip),%xmm10        # 5660 <_sk_callback_sse41+0x607>
  .byte  102,68,15,219,13,79,54,0,0          // pand          0x364f(%rip),%xmm9        # 5670 <_sk_callback_sse41+0x617>
  .byte  69,15,91,201                        // cvtdq2ps      %xmm9,%xmm9
  .byte  68,15,89,13,83,54,0,0               // mulps         0x3653(%rip),%xmm9        # 5680 <_sk_callback_sse41+0x627>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  68,15,88,215                        // addps         %xmm7,%xmm10
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,95,211                        // maxps         %xmm3,%xmm10
  .byte  69,15,95,194                        // maxps         %xmm10,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,46                              // je            20b5 <_sk_lerp_565_sse41+0xe6>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,27                              // je            20a8 <_sk_lerp_565_sse41+0xd9>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  15,133,77,255,255,255               // jne           1fe4 <_sk_lerp_565_sse41+0x15>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,200,69                // pshufd        $0x45,%xmm8,%xmm9
  .byte  65,15,183,68,82,2                   // movzwl        0x2(%r10,%rdx,2),%eax
  .byte  102,68,15,58,34,200,1               // pinsrd        $0x1,%eax,%xmm9
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,68,15,58,34,200,0               // pinsrd        $0x0,%eax,%xmm9
  .byte  233,30,255,255,255                  // jmpq          1fe4 <_sk_lerp_565_sse41+0x15>

HIDDEN _sk_load_tables_sse41
.globl _sk_load_tables_sse41
FUNCTION(_sk_load_tables_sse41)
_sk_load_tables_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,24,1,0,0                     // jne           21ec <_sk_load_tables_sse41+0x126>
  .byte  243,69,15,111,4,145                 // movdqu        (%r9,%rdx,4),%xmm8
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,15,111,5,169,53,0,0             // movdqa        0x35a9(%rip),%xmm0        # 5690 <_sk_callback_sse41+0x637>
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  69,15,182,241                       // movzbl        %r9b,%r14d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,4,155                  // movss         (%rbx,%r11,4),%xmm0
  .byte  102,66,15,58,33,4,19,16             // insertps      $0x10,(%rbx,%r10,1),%xmm0
  .byte  102,66,15,58,33,4,179,32            // insertps      $0x20,(%rbx,%r14,4),%xmm0
  .byte  102,66,15,58,33,4,11,48             // insertps      $0x30,(%rbx,%r9,1),%xmm0
  .byte  102,65,15,111,200                   // movdqa        %xmm8,%xmm1
  .byte  102,15,56,0,13,100,53,0,0           // pshufb        0x3564(%rip),%xmm1        # 56a0 <_sk_callback_sse41+0x647>
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  68,15,182,211                       // movzbl        %bl,%r10d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,31,16            // insertps      $0x10,(%r15,%rbx,1),%xmm1
  .byte  243,67,15,16,20,159                 // movss         (%r15,%r11,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,67,15,16,20,15                  // movss         (%r15,%r9,1),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,65,15,111,208                   // movdqa        %xmm8,%xmm2
  .byte  102,15,56,0,21,32,53,0,0            // pshufb        0x3520(%rip),%xmm2        # 56b0 <_sk_callback_sse41+0x657>
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,219                       // movzbl        %bl,%r11d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  102,65,15,58,33,20,1,16             // insertps      $0x10,(%r9,%rax,1),%xmm2
  .byte  243,67,15,16,28,153                 // movss         (%r9,%r11,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,25                  // movss         (%r9,%rbx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  102,65,15,114,208,24                // psrld         $0x18,%xmm8
  .byte  65,15,91,216                        // cvtdq2ps      %xmm8,%xmm3
  .byte  15,89,29,221,52,0,0                 // mulps         0x34dd(%rip),%xmm3        # 56c0 <_sk_callback_sse41+0x667>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,194                          // mov           %r8d,%r10d
  .byte  65,128,226,3                        // and           $0x3,%r10b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,250,1                        // cmp           $0x1,%r10b
  .byte  116,38                              // je            2224 <_sk_load_tables_sse41+0x15e>
  .byte  65,128,250,2                        // cmp           $0x2,%r10b
  .byte  116,23                              // je            221b <_sk_load_tables_sse41+0x155>
  .byte  65,128,250,3                        // cmp           $0x3,%r10b
  .byte  15,133,204,254,255,255              // jne           20da <_sk_load_tables_sse41+0x14>
  .byte  102,65,15,110,68,145,8              // movd          0x8(%r9,%rdx,4),%xmm0
  .byte  102,68,15,112,192,69                // pshufd        $0x45,%xmm0,%xmm8
  .byte  102,69,15,58,34,68,145,4,1          // pinsrd        $0x1,0x4(%r9,%rdx,4),%xmm8
  .byte  102,69,15,58,34,4,145,0             // pinsrd        $0x0,(%r9,%rdx,4),%xmm8
  .byte  233,169,254,255,255                 // jmpq          20da <_sk_load_tables_sse41+0x14>

HIDDEN _sk_load_tables_u16_be_sse41
.globl _sk_load_tables_u16_be_sse41
FUNCTION(_sk_load_tables_u16_be_sse41)
_sk_load_tables_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,99,1,0,0                     // jne           23aa <_sk_load_tables_u16_be_sse41+0x179>
  .byte  102,67,15,16,4,81                   // movupd        (%r9,%r10,2),%xmm0
  .byte  243,67,15,111,76,81,16              // movdqu        0x10(%r9,%r10,2),%xmm1
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,68,15,40,200                    // movapd        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,68,15,111,5,82,52,0,0           // movdqa        0x3452(%rip),%xmm8        # 56d0 <_sk_callback_sse41+0x677>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  69,15,182,241                       // movzbl        %r9b,%r14d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,4,155                  // movss         (%rbx,%r11,4),%xmm0
  .byte  102,66,15,58,33,4,19,16             // insertps      $0x10,(%rbx,%r10,1),%xmm0
  .byte  243,66,15,16,20,179                 // movss         (%rbx,%r14,4),%xmm2
  .byte  102,15,58,33,194,32                 // insertps      $0x20,%xmm2,%xmm0
  .byte  243,66,15,16,20,11                  // movss         (%rbx,%r9,1),%xmm2
  .byte  102,15,58,33,194,48                 // insertps      $0x30,%xmm2,%xmm0
  .byte  102,15,56,0,13,1,52,0,0             // pshufb        0x3401(%rip),%xmm1        # 56e0 <_sk_callback_sse41+0x687>
  .byte  102,15,56,51,201                    // pmovzxwd      %xmm1,%xmm1
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  68,15,182,211                       // movzbl        %bl,%r10d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,31,16            // insertps      $0x10,(%r15,%rbx,1),%xmm1
  .byte  243,67,15,16,20,159                 // movss         (%r15,%r11,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,67,15,16,20,15                  // movss         (%r15,%r9,1),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,65,15,56,51,208                 // pmovzxwd      %xmm8,%xmm2
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,219                       // movzbl        %bl,%r11d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  102,65,15,58,33,20,1,16             // insertps      $0x10,(%r9,%rax,1),%xmm2
  .byte  243,67,15,16,28,153                 // movss         (%r9,%r11,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,25                  // movss         (%r9,%rbx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  102,65,15,112,217,78                // pshufd        $0x4e,%xmm9,%xmm3
  .byte  102,68,15,111,195                   // movdqa        %xmm3,%xmm8
  .byte  102,65,15,113,240,8                 // psllw         $0x8,%xmm8
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,216                   // por           %xmm8,%xmm3
  .byte  102,15,56,51,219                    // pmovzxwd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,79,51,0,0                  // mulps         0x334f(%rip),%xmm3        # 56f0 <_sk_callback_sse41+0x697>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  242,67,15,16,4,81                   // movsd         (%r9,%r10,2),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           23c3 <_sk_load_tables_u16_be_sse41+0x192>
  .byte  243,15,126,192                      // movq          %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,145,254,255,255                 // jmpq          2254 <_sk_load_tables_u16_be_sse41+0x23>
  .byte  102,67,15,22,68,81,8                // movhpd        0x8(%r9,%r10,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,124,254,255,255              // jb            2254 <_sk_load_tables_u16_be_sse41+0x23>
  .byte  243,67,15,126,76,81,16              // movq          0x10(%r9,%r10,2),%xmm1
  .byte  233,112,254,255,255                 // jmpq          2254 <_sk_load_tables_u16_be_sse41+0x23>

HIDDEN _sk_load_tables_rgb_u16_be_sse41
.globl _sk_load_tables_rgb_u16_be_sse41
FUNCTION(_sk_load_tables_rgb_u16_be_sse41)
_sk_load_tables_rgb_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,82                        // lea           (%rdx,%rdx,2),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,83,1,0,0                     // jne           2549 <_sk_load_tables_rgb_u16_be_sse41+0x165>
  .byte  243,67,15,111,20,81                 // movdqu        (%r9,%r10,2),%xmm2
  .byte  243,67,15,111,76,81,8               // movdqu        0x8(%r9,%r10,2),%xmm1
  .byte  102,15,115,217,4                    // psrldq        $0x4,%xmm1
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,65,15,115,217,6                 // psrldq        $0x6,%xmm9
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,68,15,97,200                    // punpcklwd     %xmm0,%xmm9
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  102,68,15,111,5,196,50,0,0          // movdqa        0x32c4(%rip),%xmm8        # 5700 <_sk_callback_sse41+0x6a7>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,56,51,192                    // pmovzxwd      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  69,15,182,241                       // movzbl        %r9b,%r14d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,4,155                  // movss         (%rbx,%r11,4),%xmm0
  .byte  102,66,15,58,33,4,19,16             // insertps      $0x10,(%rbx,%r10,1),%xmm0
  .byte  243,66,15,16,28,179                 // movss         (%rbx,%r14,4),%xmm3
  .byte  102,15,58,33,195,32                 // insertps      $0x20,%xmm3,%xmm0
  .byte  243,66,15,16,28,11                  // movss         (%rbx,%r9,1),%xmm3
  .byte  102,15,58,33,195,48                 // insertps      $0x30,%xmm3,%xmm0
  .byte  102,15,56,0,13,115,50,0,0           // pshufb        0x3273(%rip),%xmm1        # 5710 <_sk_callback_sse41+0x6b7>
  .byte  102,15,56,51,201                    // pmovzxwd      %xmm1,%xmm1
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  68,15,182,211                       // movzbl        %bl,%r10d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  102,65,15,58,33,12,31,16            // insertps      $0x10,(%r15,%rbx,1),%xmm1
  .byte  243,67,15,16,28,159                 // movss         (%r15,%r11,4),%xmm3
  .byte  102,15,58,33,203,32                 // insertps      $0x20,%xmm3,%xmm1
  .byte  243,67,15,16,28,15                  // movss         (%r15,%r9,1),%xmm3
  .byte  102,15,58,33,203,48                 // insertps      $0x30,%xmm3,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,65,15,105,209                   // punpckhwd     %xmm9,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,219                       // movzbl        %bl,%r11d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  102,65,15,58,33,20,1,16             // insertps      $0x10,(%r9,%rax,1),%xmm2
  .byte  243,67,15,16,28,153                 // movss         (%r9,%r11,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,65,15,16,28,25                  // movss         (%r9,%rbx,1),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,222,49,0,0                 // movaps        0x31de(%rip),%xmm3        # 5720 <_sk_callback_sse41+0x6c7>
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  102,67,15,110,20,81                 // movd          (%r9,%r10,2),%xmm2
  .byte  102,67,15,196,84,81,4,2             // pinsrw        $0x2,0x4(%r9,%r10,2),%xmm2
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,14                              // jne           256f <_sk_load_tables_rgb_u16_be_sse41+0x18b>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  233,173,254,255,255                 // jmpq          241c <_sk_load_tables_rgb_u16_be_sse41+0x38>
  .byte  102,71,15,110,76,81,6               // movd          0x6(%r9,%r10,2),%xmm9
  .byte  102,71,15,196,76,81,10,2            // pinsrw        $0x2,0xa(%r9,%r10,2),%xmm9
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,24                              // jb            25a0 <_sk_load_tables_rgb_u16_be_sse41+0x1bc>
  .byte  102,67,15,110,76,81,12              // movd          0xc(%r9,%r10,2),%xmm1
  .byte  102,67,15,196,76,81,16,2            // pinsrw        $0x2,0x10(%r9,%r10,2),%xmm1
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,124,254,255,255                 // jmpq          241c <_sk_load_tables_rgb_u16_be_sse41+0x38>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,115,254,255,255                 // jmpq          241c <_sk_load_tables_rgb_u16_be_sse41+0x38>

HIDDEN _sk_byte_tables_sse41
.globl _sk_byte_tables_sse41
FUNCTION(_sk_byte_tables_sse41)
_sk_byte_tables_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,118,49,0,0               // movaps        0x3176(%rip),%xmm8        # 5730 <_sk_callback_sse41+0x6d7>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  76,139,32                           // mov           (%rax),%r12
  .byte  76,139,120,8                        // mov           0x8(%rax),%r15
  .byte  102,67,15,58,32,4,52,0              // pinsrb        $0x0,(%r12,%r14,1),%xmm0
  .byte  102,67,15,58,32,4,28,1              // pinsrb        $0x1,(%r12,%r11,1),%xmm0
  .byte  67,15,182,28,20                     // movzbl        (%r12,%r10,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  67,15,182,28,12                     // movzbl        (%r12,%r9,1),%ebx
  .byte  102,15,58,32,195,3                  // pinsrb        $0x3,%ebx,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,13,39,49,0,0               // movaps        0x3127(%rip),%xmm9        # 5740 <_sk_callback_sse41+0x6e7>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,58,22,203,1               // pextrq        $0x1,%xmm1,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,73,15,126,202                   // movq          %xmm1,%r10
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,32                       // shr           $0x20,%r10
  .byte  102,67,15,58,32,12,31,0             // pinsrb        $0x0,(%r15,%r11,1),%xmm1
  .byte  102,67,15,58,32,12,23,1             // pinsrb        $0x1,(%r15,%r10,1),%xmm1
  .byte  71,15,182,12,15                     // movzbl        (%r15,%r9,1),%r9d
  .byte  102,65,15,58,32,201,2               // pinsrb        $0x2,%r9d,%xmm1
  .byte  65,15,182,28,31                     // movzbl        (%r15,%rbx,1),%ebx
  .byte  102,15,58,32,203,3                  // pinsrb        $0x3,%ebx,%xmm1
  .byte  102,15,56,49,201                    // pmovzxbd      %xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  76,139,88,16                        // mov           0x10(%rax),%r11
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,73,15,58,22,209,1               // pextrq        $0x1,%xmm2,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,67,15,58,32,20,51,0             // pinsrb        $0x0,(%r11,%r14,1),%xmm2
  .byte  102,65,15,58,32,20,27,1             // pinsrb        $0x1,(%r11,%rbx,1),%xmm2
  .byte  67,15,182,28,19                     // movzbl        (%r11,%r10,1),%ebx
  .byte  102,15,58,32,211,2                  // pinsrb        $0x2,%ebx,%xmm2
  .byte  67,15,182,28,11                     // movzbl        (%r11,%r9,1),%ebx
  .byte  102,15,58,32,211,3                  // pinsrb        $0x3,%ebx,%xmm2
  .byte  102,15,56,49,210                    // pmovzxbd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  102,15,91,219                       // cvtps2dq      %xmm3,%xmm3
  .byte  102,72,15,58,22,219,1               // pextrq        $0x1,%xmm3,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,72,15,126,216                   // movq          %xmm3,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,67,15,58,32,28,26,0             // pinsrb        $0x0,(%r10,%r11,1),%xmm3
  .byte  102,65,15,58,32,28,2,1              // pinsrb        $0x1,(%r10,%rax,1),%xmm3
  .byte  67,15,182,4,10                      // movzbl        (%r10,%r9,1),%eax
  .byte  102,15,58,32,216,2                  // pinsrb        $0x2,%eax,%xmm3
  .byte  65,15,182,4,26                      // movzbl        (%r10,%rbx,1),%eax
  .byte  102,15,58,32,216,3                  // pinsrb        $0x3,%eax,%xmm3
  .byte  102,15,56,49,219                    // pmovzxbd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_sse41
.globl _sk_byte_tables_rgb_sse41
FUNCTION(_sk_byte_tables_rgb_sse41)
_sk_byte_tables_rgb_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,72,24                        // mov           0x18(%rax),%r9d
  .byte  65,255,201                          // dec           %r9d
  .byte  102,69,15,110,193                   // movd          %r9d,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,73,15,58,22,193,1               // pextrq        $0x1,%xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,206                          // mov           %r9d,%r14d
  .byte  77,137,207                          // mov           %r9,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  76,139,32                           // mov           (%rax),%r12
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  102,67,15,58,32,4,52,0              // pinsrb        $0x0,(%r12,%r14,1),%xmm0
  .byte  102,67,15,58,32,4,60,1              // pinsrb        $0x1,(%r12,%r15,1),%xmm0
  .byte  67,15,182,28,20                     // movzbl        (%r12,%r10,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  67,15,182,28,28                     // movzbl        (%r12,%r11,1),%ebx
  .byte  102,15,58,32,195,3                  // pinsrb        $0x3,%ebx,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,13,159,47,0,0              // movaps        0x2f9f(%rip),%xmm9        # 5750 <_sk_callback_sse41+0x6f7>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,58,22,203,1               // pextrq        $0x1,%xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,73,15,126,203                   // movq          %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,67,15,58,32,12,49,0             // pinsrb        $0x0,(%r9,%r14,1),%xmm1
  .byte  102,67,15,58,32,12,25,1             // pinsrb        $0x1,(%r9,%r11,1),%xmm1
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  102,65,15,58,32,202,2               // pinsrb        $0x2,%r10d,%xmm1
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  102,15,58,32,203,3                  // pinsrb        $0x3,%ebx,%xmm1
  .byte  102,15,56,49,201                    // pmovzxbd      %xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,58,22,211,1               // pextrq        $0x1,%xmm2,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,67,15,58,32,20,26,0             // pinsrb        $0x0,(%r10,%r11,1),%xmm2
  .byte  102,65,15,58,32,20,2,1              // pinsrb        $0x1,(%r10,%rax,1),%xmm2
  .byte  67,15,182,4,10                      // movzbl        (%r10,%r9,1),%eax
  .byte  102,15,58,32,208,2                  // pinsrb        $0x2,%eax,%xmm2
  .byte  65,15,182,4,26                      // movzbl        (%r10,%rbx,1),%eax
  .byte  102,15,58,32,208,3                  // pinsrb        $0x3,%eax,%xmm2
  .byte  102,15,56,49,210                    // pmovzxbd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_sse41
.globl _sk_table_r_sse41
FUNCTION(_sk_table_r_sse41)
_sk_table_r_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  102,65,15,91,192                    // cvtps2dq      %xmm8,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,65,15,16,4,153                  // movss         (%r9,%rbx,4),%xmm0
  .byte  102,67,15,58,33,4,153,16            // insertps      $0x10,(%r9,%r11,4),%xmm0
  .byte  243,71,15,16,4,145                  // movss         (%r9,%r10,4),%xmm8
  .byte  102,65,15,58,33,192,32              // insertps      $0x20,%xmm8,%xmm0
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,192,48              // insertps      $0x30,%xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_sse41
.globl _sk_table_g_sse41
FUNCTION(_sk_table_g_sse41)
_sk_table_g_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  102,65,15,91,200                    // cvtps2dq      %xmm8,%xmm1
  .byte  102,72,15,58,22,200,1               // pextrq        $0x1,%xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,203                   // movq          %xmm1,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,65,15,16,12,153                 // movss         (%r9,%rbx,4),%xmm1
  .byte  102,67,15,58,33,12,153,16           // insertps      $0x10,(%r9,%r11,4),%xmm1
  .byte  243,71,15,16,4,145                  // movss         (%r9,%r10,4),%xmm8
  .byte  102,65,15,58,33,200,32              // insertps      $0x20,%xmm8,%xmm1
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,200,48              // insertps      $0x30,%xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_sse41
.globl _sk_table_b_sse41
FUNCTION(_sk_table_b_sse41)
_sk_table_b_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,65,15,91,208                    // cvtps2dq      %xmm8,%xmm2
  .byte  102,72,15,58,22,208,1               // pextrq        $0x1,%xmm2,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,211                   // movq          %xmm2,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,65,15,16,20,153                 // movss         (%r9,%rbx,4),%xmm2
  .byte  102,67,15,58,33,20,153,16           // insertps      $0x10,(%r9,%r11,4),%xmm2
  .byte  243,71,15,16,4,145                  // movss         (%r9,%r10,4),%xmm8
  .byte  102,65,15,58,33,208,32              // insertps      $0x20,%xmm8,%xmm2
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,208,48              // insertps      $0x30,%xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_sse41
.globl _sk_table_a_sse41
FUNCTION(_sk_table_a_sse41)
_sk_table_a_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,65,15,91,216                    // cvtps2dq      %xmm8,%xmm3
  .byte  102,72,15,58,22,216,1               // pextrq        $0x1,%xmm3,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,219                   // movq          %xmm3,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,65,15,16,28,153                 // movss         (%r9,%rbx,4),%xmm3
  .byte  102,67,15,58,33,28,153,16           // insertps      $0x10,(%r9,%r11,4),%xmm3
  .byte  243,71,15,16,4,145                  // movss         (%r9,%r10,4),%xmm8
  .byte  102,65,15,58,33,216,32              // insertps      $0x20,%xmm8,%xmm3
  .byte  243,69,15,16,4,129                  // movss         (%r9,%rax,4),%xmm8
  .byte  102,65,15,58,33,216,48              // insertps      $0x30,%xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_sse41
.globl _sk_parametric_r_sse41
FUNCTION(_sk_parametric_r_sse41)
_sk_parametric_r_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,64,16                  // movss         0x10(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  65,15,194,192,2                     // cmpleps       %xmm8,%xmm0
  .byte  243,68,15,16,64,24                  // movss         0x18(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,64,8                   // movss         0x8(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,194                        // cvtdq2ps      %xmm10,%xmm8
  .byte  68,15,89,5,231,44,0,0               // mulps         0x2ce7(%rip),%xmm8        # 5760 <_sk_callback_sse41+0x707>
  .byte  68,15,84,21,239,44,0,0              // andps         0x2cef(%rip),%xmm10        # 5770 <_sk_callback_sse41+0x717>
  .byte  68,15,86,21,247,44,0,0              // orps          0x2cf7(%rip),%xmm10        # 5780 <_sk_callback_sse41+0x727>
  .byte  68,15,88,5,255,44,0,0               // addps         0x2cff(%rip),%xmm8        # 5790 <_sk_callback_sse41+0x737>
  .byte  68,15,40,37,7,45,0,0                // movaps        0x2d07(%rip),%xmm12        # 57a0 <_sk_callback_sse41+0x747>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  68,15,88,21,7,45,0,0                // addps         0x2d07(%rip),%xmm10        # 57b0 <_sk_callback_sse41+0x757>
  .byte  68,15,40,37,15,45,0,0               // movaps        0x2d0f(%rip),%xmm12        # 57c0 <_sk_callback_sse41+0x767>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,196                        // subps         %xmm12,%xmm8
  .byte  69,15,89,195                        // mulps         %xmm11,%xmm8
  .byte  102,69,15,58,8,208,1                // roundps       $0x1,%xmm8,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,5,252,44,0,0               // addps         0x2cfc(%rip),%xmm8        # 57d0 <_sk_callback_sse41+0x777>
  .byte  68,15,40,21,4,45,0,0                // movaps        0x2d04(%rip),%xmm10        # 57e0 <_sk_callback_sse41+0x787>
  .byte  69,15,89,211                        // mulps         %xmm11,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  68,15,40,21,4,45,0,0                // movaps        0x2d04(%rip),%xmm10        # 57f0 <_sk_callback_sse41+0x797>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  68,15,40,29,8,45,0,0                // movaps        0x2d08(%rip),%xmm11        # 5800 <_sk_callback_sse41+0x7a7>
  .byte  69,15,94,218                        // divps         %xmm10,%xmm11
  .byte  69,15,88,216                        // addps         %xmm8,%xmm11
  .byte  68,15,89,29,8,45,0,0                // mulps         0x2d08(%rip),%xmm11        # 5810 <_sk_callback_sse41+0x7b7>
  .byte  102,69,15,91,211                    // cvtps2dq      %xmm11,%xmm10
  .byte  243,68,15,16,64,20                  // movss         0x14(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,88,194                        // addps         %xmm10,%xmm8
  .byte  102,69,15,56,20,193                 // blendvps      %xmm0,%xmm9,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  68,15,93,5,239,44,0,0               // minps         0x2cef(%rip),%xmm8        # 5820 <_sk_callback_sse41+0x7c7>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_sse41
.globl _sk_parametric_g_sse41
FUNCTION(_sk_parametric_g_sse41)
_sk_parametric_g_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,72,24                     // movss         0x18(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  68,15,88,201                        // addps         %xmm1,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,72,8                      // movss         0x8(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  68,15,88,217                        // addps         %xmm1,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,144,44,0,0              // mulps         0x2c90(%rip),%xmm12        # 5830 <_sk_callback_sse41+0x7d7>
  .byte  68,15,84,29,152,44,0,0              // andps         0x2c98(%rip),%xmm11        # 5840 <_sk_callback_sse41+0x7e7>
  .byte  68,15,86,29,160,44,0,0              // orps          0x2ca0(%rip),%xmm11        # 5850 <_sk_callback_sse41+0x7f7>
  .byte  68,15,88,37,168,44,0,0              // addps         0x2ca8(%rip),%xmm12        # 5860 <_sk_callback_sse41+0x807>
  .byte  15,40,13,177,44,0,0                 // movaps        0x2cb1(%rip),%xmm1        # 5870 <_sk_callback_sse41+0x817>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  68,15,88,29,177,44,0,0              // addps         0x2cb1(%rip),%xmm11        # 5880 <_sk_callback_sse41+0x827>
  .byte  15,40,13,186,44,0,0                 // movaps        0x2cba(%rip),%xmm1        # 5890 <_sk_callback_sse41+0x837>
  .byte  65,15,94,203                        // divps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,167,44,0,0              // addps         0x2ca7(%rip),%xmm12        # 58a0 <_sk_callback_sse41+0x847>
  .byte  15,40,13,176,44,0,0                 // movaps        0x2cb0(%rip),%xmm1        # 58b0 <_sk_callback_sse41+0x857>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  68,15,40,21,176,44,0,0              // movaps        0x2cb0(%rip),%xmm10        # 58c0 <_sk_callback_sse41+0x867>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,13,181,44,0,0                 // movaps        0x2cb5(%rip),%xmm1        # 58d0 <_sk_callback_sse41+0x877>
  .byte  65,15,94,202                        // divps         %xmm10,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  15,89,13,182,44,0,0                 // mulps         0x2cb6(%rip),%xmm1        # 58e0 <_sk_callback_sse41+0x887>
  .byte  102,68,15,91,209                    // cvtps2dq      %xmm1,%xmm10
  .byte  243,15,16,72,20                     // movss         0x14(%rax),%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  102,65,15,56,20,201                 // blendvps      %xmm0,%xmm9,%xmm1
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,200                           // maxps         %xmm0,%xmm1
  .byte  15,93,13,161,44,0,0                 // minps         0x2ca1(%rip),%xmm1        # 58f0 <_sk_callback_sse41+0x897>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_sse41
.globl _sk_parametric_b_sse41
FUNCTION(_sk_parametric_b_sse41)
_sk_parametric_b_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,80,24                     // movss         0x18(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,66,44,0,0               // mulps         0x2c42(%rip),%xmm12        # 5900 <_sk_callback_sse41+0x8a7>
  .byte  68,15,84,29,74,44,0,0               // andps         0x2c4a(%rip),%xmm11        # 5910 <_sk_callback_sse41+0x8b7>
  .byte  68,15,86,29,82,44,0,0               // orps          0x2c52(%rip),%xmm11        # 5920 <_sk_callback_sse41+0x8c7>
  .byte  68,15,88,37,90,44,0,0               // addps         0x2c5a(%rip),%xmm12        # 5930 <_sk_callback_sse41+0x8d7>
  .byte  15,40,21,99,44,0,0                  // movaps        0x2c63(%rip),%xmm2        # 5940 <_sk_callback_sse41+0x8e7>
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  68,15,88,29,99,44,0,0               // addps         0x2c63(%rip),%xmm11        # 5950 <_sk_callback_sse41+0x8f7>
  .byte  15,40,21,108,44,0,0                 // movaps        0x2c6c(%rip),%xmm2        # 5960 <_sk_callback_sse41+0x907>
  .byte  65,15,94,211                        // divps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,89,44,0,0               // addps         0x2c59(%rip),%xmm12        # 5970 <_sk_callback_sse41+0x917>
  .byte  15,40,21,98,44,0,0                  // movaps        0x2c62(%rip),%xmm2        # 5980 <_sk_callback_sse41+0x927>
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  68,15,40,21,98,44,0,0               // movaps        0x2c62(%rip),%xmm10        # 5990 <_sk_callback_sse41+0x937>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,21,103,44,0,0                 // movaps        0x2c67(%rip),%xmm2        # 59a0 <_sk_callback_sse41+0x947>
  .byte  65,15,94,210                        // divps         %xmm10,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,89,21,104,44,0,0                 // mulps         0x2c68(%rip),%xmm2        # 59b0 <_sk_callback_sse41+0x957>
  .byte  102,68,15,91,210                    // cvtps2dq      %xmm2,%xmm10
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  102,65,15,56,20,209                 // blendvps      %xmm0,%xmm9,%xmm2
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  15,93,21,83,44,0,0                  // minps         0x2c53(%rip),%xmm2        # 59c0 <_sk_callback_sse41+0x967>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_sse41
.globl _sk_parametric_a_sse41
FUNCTION(_sk_parametric_a_sse41)
_sk_parametric_a_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  243,68,15,16,88,4                   // movss         0x4(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,219                        // mulps         %xmm3,%xmm11
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,194,194,2                     // cmpleps       %xmm10,%xmm0
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  243,15,16,88,8                      // movss         0x8(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  68,15,88,219                        // addps         %xmm3,%xmm11
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,91,227                        // cvtdq2ps      %xmm11,%xmm12
  .byte  68,15,89,37,244,43,0,0              // mulps         0x2bf4(%rip),%xmm12        # 59d0 <_sk_callback_sse41+0x977>
  .byte  68,15,84,29,252,43,0,0              // andps         0x2bfc(%rip),%xmm11        # 59e0 <_sk_callback_sse41+0x987>
  .byte  68,15,86,29,4,44,0,0                // orps          0x2c04(%rip),%xmm11        # 59f0 <_sk_callback_sse41+0x997>
  .byte  68,15,88,37,12,44,0,0               // addps         0x2c0c(%rip),%xmm12        # 5a00 <_sk_callback_sse41+0x9a7>
  .byte  15,40,29,21,44,0,0                  // movaps        0x2c15(%rip),%xmm3        # 5a10 <_sk_callback_sse41+0x9b7>
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  68,15,88,29,21,44,0,0               // addps         0x2c15(%rip),%xmm11        # 5a20 <_sk_callback_sse41+0x9c7>
  .byte  15,40,29,30,44,0,0                  // movaps        0x2c1e(%rip),%xmm3        # 5a30 <_sk_callback_sse41+0x9d7>
  .byte  65,15,94,219                        // divps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  102,69,15,58,8,212,1                // roundps       $0x1,%xmm12,%xmm10
  .byte  69,15,40,220                        // movaps        %xmm12,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  68,15,88,37,11,44,0,0               // addps         0x2c0b(%rip),%xmm12        # 5a40 <_sk_callback_sse41+0x9e7>
  .byte  15,40,29,20,44,0,0                  // movaps        0x2c14(%rip),%xmm3        # 5a50 <_sk_callback_sse41+0x9f7>
  .byte  65,15,89,219                        // mulps         %xmm11,%xmm3
  .byte  68,15,92,227                        // subps         %xmm3,%xmm12
  .byte  68,15,40,21,20,44,0,0               // movaps        0x2c14(%rip),%xmm10        # 5a60 <_sk_callback_sse41+0xa07>
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  15,40,29,25,44,0,0                  // movaps        0x2c19(%rip),%xmm3        # 5a70 <_sk_callback_sse41+0xa17>
  .byte  65,15,94,218                        // divps         %xmm10,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  15,89,29,26,44,0,0                  // mulps         0x2c1a(%rip),%xmm3        # 5a80 <_sk_callback_sse41+0xa27>
  .byte  102,68,15,91,211                    // cvtps2dq      %xmm3,%xmm10
  .byte  243,15,16,88,20                     // movss         0x14(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  102,65,15,56,20,217                 // blendvps      %xmm0,%xmm9,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  15,93,29,5,44,0,0                   // minps         0x2c05(%rip),%xmm3        # 5a90 <_sk_callback_sse41+0xa37>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_sse41
.globl _sk_lab_to_xyz_sse41
FUNCTION(_sk_lab_to_xyz_sse41)
_sk_lab_to_xyz_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,89,5,1,44,0,0                 // mulps         0x2c01(%rip),%xmm8        # 5aa0 <_sk_callback_sse41+0xa47>
  .byte  68,15,40,13,9,44,0,0                // movaps        0x2c09(%rip),%xmm9        # 5ab0 <_sk_callback_sse41+0xa57>
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  15,40,5,14,44,0,0                   // movaps        0x2c0e(%rip),%xmm0        # 5ac0 <_sk_callback_sse41+0xa67>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,208                           // addps         %xmm0,%xmm2
  .byte  68,15,88,5,12,44,0,0                // addps         0x2c0c(%rip),%xmm8        # 5ad0 <_sk_callback_sse41+0xa77>
  .byte  68,15,89,5,20,44,0,0                // mulps         0x2c14(%rip),%xmm8        # 5ae0 <_sk_callback_sse41+0xa87>
  .byte  15,89,13,29,44,0,0                  // mulps         0x2c1d(%rip),%xmm1        # 5af0 <_sk_callback_sse41+0xa97>
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  15,89,21,34,44,0,0                  // mulps         0x2c22(%rip),%xmm2        # 5b00 <_sk_callback_sse41+0xaa7>
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  68,15,92,210                        // subps         %xmm2,%xmm10
  .byte  68,15,40,217                        // movaps        %xmm1,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  68,15,40,13,22,44,0,0               // movaps        0x2c16(%rip),%xmm9        # 5b10 <_sk_callback_sse41+0xab7>
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  15,40,21,22,44,0,0                  // movaps        0x2c16(%rip),%xmm2        # 5b20 <_sk_callback_sse41+0xac7>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  68,15,40,37,27,44,0,0               // movaps        0x2c1b(%rip),%xmm12        # 5b30 <_sk_callback_sse41+0xad7>
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  102,65,15,56,20,203                 // blendvps      %xmm0,%xmm11,%xmm1
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  102,69,15,56,20,195                 // blendvps      %xmm0,%xmm11,%xmm8
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  69,15,89,218                        // mulps         %xmm10,%xmm11
  .byte  69,15,194,203,1                     // cmpltps       %xmm11,%xmm9
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,65,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm2
  .byte  15,89,13,212,43,0,0                 // mulps         0x2bd4(%rip),%xmm1        # 5b40 <_sk_callback_sse41+0xae7>
  .byte  15,89,21,221,43,0,0                 // mulps         0x2bdd(%rip),%xmm2        # 5b50 <_sk_callback_sse41+0xaf7>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_sse41
.globl _sk_load_a8_sse41
FUNCTION(_sk_load_a8_sse41)
_sk_load_a8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,38                              // jne           2fae <_sk_load_a8_sse41+0x30>
  .byte  102,65,15,56,49,4,18                // pmovzxbd      (%r10,%rdx,1),%xmm0
  .byte  102,15,219,5,201,43,0,0             // pand          0x2bc9(%rip),%xmm0        # 5b60 <_sk_callback_sse41+0xb07>
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,207,43,0,0                 // mulps         0x2bcf(%rip),%xmm3        # 5b70 <_sk_callback_sse41+0xb17>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,39                              // je            2fe6 <_sk_load_a8_sse41+0x68>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            2fda <_sk_load_a8_sse41+0x5c>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,196                             // jne           2f8f <_sk_load_a8_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  65,15,182,68,18,1                   // movzbl        0x1(%r10,%rdx,1),%eax
  .byte  102,15,58,34,192,1                  // pinsrd        $0x1,%eax,%xmm0
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,58,34,192,0                  // pinsrd        $0x0,%eax,%xmm0
  .byte  235,156                             // jmp           2f8f <_sk_load_a8_sse41+0x11>

HIDDEN _sk_gather_a8_sse41
.globl _sk_gather_a8_sse41
FUNCTION(_sk_gather_a8_sse41)
_sk_gather_a8_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,58,32,4,25,0              // pinsrb        $0x0,(%r9,%rbx,1),%xmm0
  .byte  102,67,15,58,32,4,25,1              // pinsrb        $0x1,(%r9,%r11,1),%xmm0
  .byte  67,15,182,28,17                     // movzbl        (%r9,%r10,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  102,15,58,32,192,3                  // pinsrb        $0x3,%eax,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,29,43,0,0                  // mulps         0x2b1d(%rip),%xmm3        # 5b80 <_sk_callback_sse41+0xb27>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_sse41
.globl _sk_store_a8_sse41
FUNCTION(_sk_store_a8_sse41)
_sk_store_a8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  68,15,40,5,16,43,0,0                // movaps        0x2b10(%rip),%xmm8        # 5b90 <_sk_callback_sse41+0xb37>
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,13                              // jne           30a6 <_sk_store_a8_sse41+0x33>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  65,137,4,18                         // mov           %eax,(%r10,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,56,49,192                 // pmovzxbd      %xmm8,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,30                              // je            30d7 <_sk_store_a8_sse41+0x64>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,15                              // je            30ce <_sk_store_a8_sse41+0x5b>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,221                             // jne           30a2 <_sk_store_a8_sse41+0x2f>
  .byte  102,69,15,58,20,68,18,2,8           // pextrb        $0x8,%xmm8,0x2(%r10,%rdx,1)
  .byte  102,69,15,58,20,68,18,1,4           // pextrb        $0x4,%xmm8,0x1(%r10,%rdx,1)
  .byte  102,69,15,58,20,4,18,0              // pextrb        $0x0,%xmm8,(%r10,%rdx,1)
  .byte  235,193                             // jmp           30a2 <_sk_store_a8_sse41+0x2f>

HIDDEN _sk_load_g8_sse41
.globl _sk_load_g8_sse41
FUNCTION(_sk_load_g8_sse41)
_sk_load_g8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,42                              // jne           3115 <_sk_load_g8_sse41+0x34>
  .byte  102,65,15,56,49,4,18                // pmovzxbd      (%r10,%rdx,1),%xmm0
  .byte  102,15,219,5,166,42,0,0             // pand          0x2aa6(%rip),%xmm0        # 5ba0 <_sk_callback_sse41+0xb47>
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,172,42,0,0                  // mulps         0x2aac(%rip),%xmm0        # 5bb0 <_sk_callback_sse41+0xb57>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,179,42,0,0                 // movaps        0x2ab3(%rip),%xmm3        # 5bc0 <_sk_callback_sse41+0xb67>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,39                              // je            314d <_sk_load_g8_sse41+0x6c>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3141 <_sk_load_g8_sse41+0x60>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,192                             // jne           30f2 <_sk_load_g8_sse41+0x11>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  65,15,182,68,18,1                   // movzbl        0x1(%r10,%rdx,1),%eax
  .byte  102,15,58,34,192,1                  // pinsrd        $0x1,%eax,%xmm0
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,58,34,192,0                  // pinsrd        $0x0,%eax,%xmm0
  .byte  235,152                             // jmp           30f2 <_sk_load_g8_sse41+0x11>

HIDDEN _sk_gather_g8_sse41
.globl _sk_gather_g8_sse41
FUNCTION(_sk_gather_g8_sse41)
_sk_gather_g8_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,58,32,4,25,0              // pinsrb        $0x0,(%r9,%rbx,1),%xmm0
  .byte  102,67,15,58,32,4,25,1              // pinsrb        $0x1,(%r9,%r11,1),%xmm0
  .byte  67,15,182,28,17                     // movzbl        (%r9,%r10,1),%ebx
  .byte  102,15,58,32,195,2                  // pinsrb        $0x2,%ebx,%xmm0
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  102,15,58,32,192,3                  // pinsrb        $0x3,%eax,%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,6,42,0,0                    // mulps         0x2a06(%rip),%xmm0        # 5bd0 <_sk_callback_sse41+0xb77>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,13,42,0,0                  // movaps        0x2a0d(%rip),%xmm3        # 5be0 <_sk_callback_sse41+0xb87>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_sse41
.globl _sk_gather_i8_sse41
FUNCTION(_sk_gather_i8_sse41)
_sk_gather_i8_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,193                          // mov           %rax,%r9
  .byte  77,133,201                          // test          %r9,%r9
  .byte  116,5                               // je            31eb <_sk_gather_i8_sse41+0xf>
  .byte  76,137,200                          // mov           %r9,%rax
  .byte  235,2                               // jmp           31ed <_sk_gather_i8_sse41+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,195                   // movq          %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,67,15,58,32,4,50,0              // pinsrb        $0x0,(%r10,%r14,1),%xmm0
  .byte  102,65,15,58,32,4,26,1              // pinsrb        $0x1,(%r10,%rbx,1),%xmm0
  .byte  102,67,15,58,32,4,26,2              // pinsrb        $0x2,(%r10,%r11,1),%xmm0
  .byte  102,65,15,58,32,4,2,3               // pinsrb        $0x3,(%r10,%rax,1),%xmm0
  .byte  102,15,56,49,192                    // pmovzxbd      %xmm0,%xmm0
  .byte  102,73,15,58,22,194,1               // pextrq        $0x1,%xmm0,%r10
  .byte  102,72,15,126,195                   // movq          %xmm0,%rbx
  .byte  73,139,65,8                         // mov           0x8(%r9),%rax
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,137,211                          // mov           %r10d,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  102,66,15,110,28,136                // movd          (%rax,%r9,4),%xmm3
  .byte  102,15,58,34,28,24,1                // pinsrd        $0x1,(%rax,%rbx,1),%xmm3
  .byte  102,66,15,58,34,28,152,2            // pinsrd        $0x2,(%rax,%r11,4),%xmm3
  .byte  102,66,15,58,34,28,16,3             // pinsrd        $0x3,(%rax,%r10,1),%xmm3
  .byte  102,15,111,5,96,41,0,0              // movdqa        0x2960(%rip),%xmm0        # 5bf0 <_sk_callback_sse41+0xb97>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,97,41,0,0                // movaps        0x2961(%rip),%xmm8        # 5c00 <_sk_callback_sse41+0xba7>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,56,0,13,96,41,0,0            // pshufb        0x2960(%rip),%xmm1        # 5c10 <_sk_callback_sse41+0xbb7>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,56,0,21,92,41,0,0            // pshufb        0x295c(%rip),%xmm2        # 5c20 <_sk_callback_sse41+0xbc7>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_sse41
.globl _sk_load_565_sse41
FUNCTION(_sk_load_565_sse41)
_sk_load_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,80                              // jne           3338 <_sk_load_565_sse41+0x5a>
  .byte  102,65,15,56,51,20,82               // pmovzxwd      (%r10,%rdx,2),%xmm2
  .byte  102,15,111,5,57,41,0,0              // movdqa        0x2939(%rip),%xmm0        # 5c30 <_sk_callback_sse41+0xbd7>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,59,41,0,0                   // mulps         0x293b(%rip),%xmm0        # 5c40 <_sk_callback_sse41+0xbe7>
  .byte  102,15,111,13,67,41,0,0             // movdqa        0x2943(%rip),%xmm1        # 5c50 <_sk_callback_sse41+0xbf7>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,69,41,0,0                  // mulps         0x2945(%rip),%xmm1        # 5c60 <_sk_callback_sse41+0xc07>
  .byte  102,15,219,21,77,41,0,0             // pand          0x294d(%rip),%xmm2        # 5c70 <_sk_callback_sse41+0xc17>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,83,41,0,0                  // mulps         0x2953(%rip),%xmm2        # 5c80 <_sk_callback_sse41+0xc27>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,90,41,0,0                  // movaps        0x295a(%rip),%xmm3        # 5c90 <_sk_callback_sse41+0xc37>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,39                              // je            3370 <_sk_load_565_sse41+0x92>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            3364 <_sk_load_565_sse41+0x86>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,154                             // jne           32ef <_sk_load_565_sse41+0x11>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,208,69                   // pshufd        $0x45,%xmm0,%xmm2
  .byte  65,15,183,68,82,2                   // movzwl        0x2(%r10,%rdx,2),%eax
  .byte  102,15,58,34,208,1                  // pinsrd        $0x1,%eax,%xmm2
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,58,34,208,0                  // pinsrd        $0x0,%eax,%xmm2
  .byte  233,111,255,255,255                 // jmpq          32ef <_sk_load_565_sse41+0x11>

HIDDEN _sk_gather_565_sse41
.globl _sk_gather_565_sse41
FUNCTION(_sk_gather_565_sse41)
_sk_gather_565_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,196,4,89,0                // pinsrw        $0x0,(%r9,%rbx,2),%xmm0
  .byte  102,67,15,196,4,89,1                // pinsrw        $0x1,(%r9,%r11,2),%xmm0
  .byte  67,15,183,28,81                     // movzwl        (%r9,%r10,2),%ebx
  .byte  102,15,196,195,2                    // pinsrw        $0x2,%ebx,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,192,3                    // pinsrw        $0x3,%eax,%xmm0
  .byte  102,15,56,51,208                    // pmovzxwd      %xmm0,%xmm2
  .byte  102,15,111,5,182,40,0,0             // movdqa        0x28b6(%rip),%xmm0        # 5ca0 <_sk_callback_sse41+0xc47>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,184,40,0,0                  // mulps         0x28b8(%rip),%xmm0        # 5cb0 <_sk_callback_sse41+0xc57>
  .byte  102,15,111,13,192,40,0,0            // movdqa        0x28c0(%rip),%xmm1        # 5cc0 <_sk_callback_sse41+0xc67>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,194,40,0,0                 // mulps         0x28c2(%rip),%xmm1        # 5cd0 <_sk_callback_sse41+0xc77>
  .byte  102,15,219,21,202,40,0,0            // pand          0x28ca(%rip),%xmm2        # 5ce0 <_sk_callback_sse41+0xc87>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,208,40,0,0                 // mulps         0x28d0(%rip),%xmm2        # 5cf0 <_sk_callback_sse41+0xc97>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,215,40,0,0                 // movaps        0x28d7(%rip),%xmm3        # 5d00 <_sk_callback_sse41+0xca7>
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_sse41
.globl _sk_store_565_sse41
FUNCTION(_sk_store_565_sse41)
_sk_store_565_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,215,40,0,0               // movaps        0x28d7(%rip),%xmm8        # 5d10 <_sk_callback_sse41+0xcb7>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,11                // pslld         $0xb,%xmm9
  .byte  68,15,40,21,204,40,0,0              // movaps        0x28cc(%rip),%xmm10        # 5d20 <_sk_callback_sse41+0xcc7>
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,5                 // pslld         $0x5,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           348b <_sk_store_565_sse41+0x5f>
  .byte  242,68,15,17,4,80                   // movsd         %xmm8,(%rax,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,56,51,192                 // pmovzxwd      %xmm8,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,30                              // je            34bc <_sk_store_565_sse41+0x90>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,15                              // je            34b3 <_sk_store_565_sse41+0x87>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,221                             // jne           3487 <_sk_store_565_sse41+0x5b>
  .byte  102,68,15,58,21,68,80,4,4           // pextrw        $0x4,%xmm8,0x4(%rax,%rdx,2)
  .byte  102,68,15,58,21,68,80,2,2           // pextrw        $0x2,%xmm8,0x2(%rax,%rdx,2)
  .byte  102,68,15,58,21,4,80,0              // pextrw        $0x0,%xmm8,(%rax,%rdx,2)
  .byte  235,193                             // jmp           3487 <_sk_store_565_sse41+0x5b>

HIDDEN _sk_load_4444_sse41
.globl _sk_load_4444_sse41
FUNCTION(_sk_load_4444_sse41)
_sk_load_4444_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,95                              // jne           352f <_sk_load_4444_sse41+0x69>
  .byte  102,65,15,56,51,28,82               // pmovzxwd      (%r10,%rdx,2),%xmm3
  .byte  102,15,111,5,81,40,0,0              // movdqa        0x2851(%rip),%xmm0        # 5d30 <_sk_callback_sse41+0xcd7>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,83,40,0,0                   // mulps         0x2853(%rip),%xmm0        # 5d40 <_sk_callback_sse41+0xce7>
  .byte  102,15,111,13,91,40,0,0             // movdqa        0x285b(%rip),%xmm1        # 5d50 <_sk_callback_sse41+0xcf7>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,93,40,0,0                  // mulps         0x285d(%rip),%xmm1        # 5d60 <_sk_callback_sse41+0xd07>
  .byte  102,15,111,21,101,40,0,0            // movdqa        0x2865(%rip),%xmm2        # 5d70 <_sk_callback_sse41+0xd17>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,103,40,0,0                 // mulps         0x2867(%rip),%xmm2        # 5d80 <_sk_callback_sse41+0xd27>
  .byte  102,15,219,29,111,40,0,0            // pand          0x286f(%rip),%xmm3        # 5d90 <_sk_callback_sse41+0xd37>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,117,40,0,0                 // mulps         0x2875(%rip),%xmm3        # 5da0 <_sk_callback_sse41+0xd47>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,39                              // je            3567 <_sk_load_4444_sse41+0xa1>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            355b <_sk_load_4444_sse41+0x95>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,139                             // jne           34d7 <_sk_load_4444_sse41+0x11>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  65,15,183,68,82,2                   // movzwl        0x2(%r10,%rdx,2),%eax
  .byte  102,15,58,34,216,1                  // pinsrd        $0x1,%eax,%xmm3
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,58,34,216,0                  // pinsrd        $0x0,%eax,%xmm3
  .byte  233,96,255,255,255                  // jmpq          34d7 <_sk_load_4444_sse41+0x11>

HIDDEN _sk_gather_4444_sse41
.globl _sk_gather_4444_sse41
FUNCTION(_sk_gather_4444_sse41)
_sk_gather_4444_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,58,22,192,1               // pextrq        $0x1,%xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,196,4,89,0                // pinsrw        $0x0,(%r9,%rbx,2),%xmm0
  .byte  102,67,15,196,4,89,1                // pinsrw        $0x1,(%r9,%r11,2),%xmm0
  .byte  67,15,183,28,81                     // movzwl        (%r9,%r10,2),%ebx
  .byte  102,15,196,195,2                    // pinsrw        $0x2,%ebx,%xmm0
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,192,3                    // pinsrw        $0x3,%eax,%xmm0
  .byte  102,15,56,51,216                    // pmovzxwd      %xmm0,%xmm3
  .byte  102,15,111,5,207,39,0,0             // movdqa        0x27cf(%rip),%xmm0        # 5db0 <_sk_callback_sse41+0xd57>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,209,39,0,0                  // mulps         0x27d1(%rip),%xmm0        # 5dc0 <_sk_callback_sse41+0xd67>
  .byte  102,15,111,13,217,39,0,0            // movdqa        0x27d9(%rip),%xmm1        # 5dd0 <_sk_callback_sse41+0xd77>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,219,39,0,0                 // mulps         0x27db(%rip),%xmm1        # 5de0 <_sk_callback_sse41+0xd87>
  .byte  102,15,111,21,227,39,0,0            // movdqa        0x27e3(%rip),%xmm2        # 5df0 <_sk_callback_sse41+0xd97>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,229,39,0,0                 // mulps         0x27e5(%rip),%xmm2        # 5e00 <_sk_callback_sse41+0xda7>
  .byte  102,15,219,29,237,39,0,0            // pand          0x27ed(%rip),%xmm3        # 5e10 <_sk_callback_sse41+0xdb7>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,243,39,0,0                 // mulps         0x27f3(%rip),%xmm3        # 5e20 <_sk_callback_sse41+0xdc7>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_sse41
.globl _sk_store_4444_sse41
FUNCTION(_sk_store_4444_sse41)
_sk_store_4444_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,241,39,0,0               // movaps        0x27f1(%rip),%xmm8        # 5e30 <_sk_callback_sse41+0xdd7>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,12                // pslld         $0xc,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,4                 // pslld         $0x4,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,193                    // orpd          %xmm9,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           36a5 <_sk_store_4444_sse41+0x73>
  .byte  242,68,15,17,4,80                   // movsd         %xmm8,(%rax,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,56,51,192                 // pmovzxwd      %xmm8,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,30                              // je            36d6 <_sk_store_4444_sse41+0xa4>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,15                              // je            36cd <_sk_store_4444_sse41+0x9b>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,221                             // jne           36a1 <_sk_store_4444_sse41+0x6f>
  .byte  102,68,15,58,21,68,80,4,4           // pextrw        $0x4,%xmm8,0x4(%rax,%rdx,2)
  .byte  102,68,15,58,21,68,80,2,2           // pextrw        $0x2,%xmm8,0x2(%rax,%rdx,2)
  .byte  102,68,15,58,21,4,80,0              // pextrw        $0x0,%xmm8,(%rax,%rdx,2)
  .byte  235,193                             // jmp           36a1 <_sk_store_4444_sse41+0x6f>

HIDDEN _sk_load_8888_sse41
.globl _sk_load_8888_sse41
FUNCTION(_sk_load_8888_sse41)
_sk_load_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,88                              // jne           3742 <_sk_load_8888_sse41+0x62>
  .byte  243,15,111,28,144                   // movdqu        (%rax,%rdx,4),%xmm3
  .byte  102,15,111,5,73,39,0,0              // movdqa        0x2749(%rip),%xmm0        # 5e40 <_sk_callback_sse41+0xde7>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,74,39,0,0                // movaps        0x274a(%rip),%xmm8        # 5e50 <_sk_callback_sse41+0xdf7>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,56,0,13,73,39,0,0            // pshufb        0x2749(%rip),%xmm1        # 5e60 <_sk_callback_sse41+0xe07>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,56,0,21,69,39,0,0            // pshufb        0x2745(%rip),%xmm2        # 5e70 <_sk_callback_sse41+0xe17>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,31                              // je            3772 <_sk_load_8888_sse41+0x92>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,17                              // je            376a <_sk_load_8888_sse41+0x8a>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,144                             // jne           36ef <_sk_load_8888_sse41+0xf>
  .byte  102,15,110,68,144,8                 // movd          0x8(%rax,%rdx,4),%xmm0
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  102,15,58,34,92,144,4,1             // pinsrd        $0x1,0x4(%rax,%rdx,4),%xmm3
  .byte  102,15,58,34,28,144,0               // pinsrd        $0x0,(%rax,%rdx,4),%xmm3
  .byte  233,113,255,255,255                 // jmpq          36ef <_sk_load_8888_sse41+0xf>

HIDDEN _sk_gather_8888_sse41
.globl _sk_gather_8888_sse41
FUNCTION(_sk_gather_8888_sse41)
_sk_gather_8888_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,58,22,195,1               // pextrq        $0x1,%xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,67,15,110,28,145                // movd          (%r9,%r10,4),%xmm3
  .byte  102,65,15,58,34,28,129,1            // pinsrd        $0x1,(%r9,%rax,4),%xmm3
  .byte  102,65,15,58,34,28,153,2            // pinsrd        $0x2,(%r9,%rbx,4),%xmm3
  .byte  102,67,15,58,34,28,153,3            // pinsrd        $0x3,(%r9,%r11,4),%xmm3
  .byte  102,15,111,5,161,38,0,0             // movdqa        0x26a1(%rip),%xmm0        # 5e80 <_sk_callback_sse41+0xe27>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,162,38,0,0               // movaps        0x26a2(%rip),%xmm8        # 5e90 <_sk_callback_sse41+0xe37>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,56,0,13,161,38,0,0           // pshufb        0x26a1(%rip),%xmm1        # 5ea0 <_sk_callback_sse41+0xe47>
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,15,56,0,21,157,38,0,0           // pshufb        0x269d(%rip),%xmm2        # 5eb0 <_sk_callback_sse41+0xe57>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,114,211,24                   // psrld         $0x18,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_sse41
.globl _sk_store_8888_sse41
FUNCTION(_sk_store_8888_sse41)
_sk_store_8888_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,136,38,0,0               // movaps        0x2688(%rip),%xmm8        # 5ec0 <_sk_callback_sse41+0xe67>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,24                // pslld         $0x18,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  102,69,15,235,194                   // por           %xmm10,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3898 <_sk_store_8888_sse41+0x6d>
  .byte  243,68,15,127,4,144                 // movdqu        %xmm8,(%rax,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,30                              // je            38c3 <_sk_store_8888_sse41+0x98>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,15                              // je            38ba <_sk_store_8888_sse41+0x8f>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,227                             // jne           3894 <_sk_store_8888_sse41+0x69>
  .byte  102,68,15,58,22,68,144,8,2          // pextrd        $0x2,%xmm8,0x8(%rax,%rdx,4)
  .byte  102,68,15,58,22,68,144,4,1          // pextrd        $0x1,%xmm8,0x4(%rax,%rdx,4)
  .byte  102,68,15,126,4,144                 // movd          %xmm8,(%rax,%rdx,4)
  .byte  235,201                             // jmp           3894 <_sk_store_8888_sse41+0x69>

HIDDEN _sk_load_f16_sse41
.globl _sk_load_f16_sse41
FUNCTION(_sk_load_f16_sse41)
_sk_load_f16_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,60,1,0,0                     // jne           3a15 <_sk_load_f16_sse41+0x14a>
  .byte  102,15,16,4,208                     // movupd        (%rax,%rdx,8),%xmm0
  .byte  243,15,111,76,208,16                // movdqu        0x10(%rax,%rdx,8),%xmm1
  .byte  102,68,15,40,200                    // movapd        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,68,15,97,216                    // punpcklwd     %xmm0,%xmm11
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,65,15,56,51,203                 // pmovzxwd      %xmm11,%xmm1
  .byte  102,68,15,111,5,192,37,0,0          // movdqa        0x25c0(%rip),%xmm8        # 5ed0 <_sk_callback_sse41+0xe77>
  .byte  102,15,111,209                      // movdqa        %xmm1,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,239,202                      // pxor          %xmm2,%xmm1
  .byte  102,15,111,29,187,37,0,0            // movdqa        0x25bb(%rip),%xmm3        # 5ee0 <_sk_callback_sse41+0xe87>
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,56,63,195                    // pmaxud        %xmm3,%xmm0
  .byte  102,15,118,193                      // pcmpeqd       %xmm1,%xmm0
  .byte  102,15,114,241,13                   // pslld         $0xd,%xmm1
  .byte  102,15,235,202                      // por           %xmm2,%xmm1
  .byte  102,68,15,111,21,167,37,0,0         // movdqa        0x25a7(%rip),%xmm10        # 5ef0 <_sk_callback_sse41+0xe97>
  .byte  102,65,15,254,202                   // paddd         %xmm10,%xmm1
  .byte  102,15,219,193                      // pand          %xmm1,%xmm0
  .byte  102,65,15,115,219,8                 // psrldq        $0x8,%xmm11
  .byte  102,69,15,56,51,219                 // pmovzxwd      %xmm11,%xmm11
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,68,15,239,218                   // pxor          %xmm2,%xmm11
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,111,203                   // movdqa        %xmm11,%xmm1
  .byte  102,15,56,63,203                    // pmaxud        %xmm3,%xmm1
  .byte  102,65,15,118,203                   // pcmpeqd       %xmm11,%xmm1
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,68,15,235,218                   // por           %xmm2,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,203                   // pand          %xmm11,%xmm1
  .byte  102,69,15,56,51,217                 // pmovzxwd      %xmm9,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,69,15,219,224                   // pand          %xmm8,%xmm12
  .byte  102,69,15,239,220                   // pxor          %xmm12,%xmm11
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,15,56,63,211                    // pmaxud        %xmm3,%xmm2
  .byte  102,65,15,118,211                   // pcmpeqd       %xmm11,%xmm2
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,211                   // pand          %xmm11,%xmm2
  .byte  102,65,15,115,217,8                 // psrldq        $0x8,%xmm9
  .byte  102,69,15,56,51,201                 // pmovzxwd      %xmm9,%xmm9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,69,15,239,200                   // pxor          %xmm8,%xmm9
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,56,63,217                 // pmaxud        %xmm9,%xmm3
  .byte  102,65,15,118,217                   // pcmpeqd       %xmm9,%xmm3
  .byte  102,65,15,114,241,13                // pslld         $0xd,%xmm9
  .byte  102,69,15,235,200                   // por           %xmm8,%xmm9
  .byte  102,69,15,254,202                   // paddd         %xmm10,%xmm9
  .byte  102,65,15,219,217                   // pand          %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,15,16,4,208                     // movsd         (%rax,%rdx,8),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           3a2d <_sk_load_f16_sse41+0x162>
  .byte  243,15,126,192                      // movq          %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,183,254,255,255                 // jmpq          38e4 <_sk_load_f16_sse41+0x19>
  .byte  102,15,22,68,208,8                  // movhpd        0x8(%rax,%rdx,8),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,163,254,255,255              // jb            38e4 <_sk_load_f16_sse41+0x19>
  .byte  243,15,126,76,208,16                // movq          0x10(%rax,%rdx,8),%xmm1
  .byte  233,152,254,255,255                 // jmpq          38e4 <_sk_load_f16_sse41+0x19>

HIDDEN _sk_gather_f16_sse41
.globl _sk_gather_f16_sse41
FUNCTION(_sk_gather_f16_sse41)
_sk_gather_f16_sse41:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,56,64,209                    // pmulld        %xmm1,%xmm2
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,194                      // paddd         %xmm2,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,58,22,195,1               // pextrq        $0x1,%xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,67,15,126,4,217                 // movq          (%r9,%r11,8),%xmm0
  .byte  243,65,15,126,12,217                // movq          (%r9,%rbx,8),%xmm1
  .byte  102,15,108,200                      // punpcklqdq    %xmm0,%xmm1
  .byte  243,65,15,126,4,193                 // movq          (%r9,%rax,8),%xmm0
  .byte  243,67,15,126,20,209                // movq          (%r9,%r10,8),%xmm2
  .byte  102,15,108,208                      // punpcklqdq    %xmm0,%xmm2
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,209                      // punpckhwd     %xmm1,%xmm2
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,68,15,97,218                    // punpcklwd     %xmm2,%xmm11
  .byte  102,68,15,105,202                   // punpckhwd     %xmm2,%xmm9
  .byte  102,65,15,56,51,203                 // pmovzxwd      %xmm11,%xmm1
  .byte  102,68,15,111,5,45,36,0,0           // movdqa        0x242d(%rip),%xmm8        # 5f00 <_sk_callback_sse41+0xea7>
  .byte  102,15,111,209                      // movdqa        %xmm1,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,239,202                      // pxor          %xmm2,%xmm1
  .byte  102,15,111,29,40,36,0,0             // movdqa        0x2428(%rip),%xmm3        # 5f10 <_sk_callback_sse41+0xeb7>
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,56,63,195                    // pmaxud        %xmm3,%xmm0
  .byte  102,15,118,193                      // pcmpeqd       %xmm1,%xmm0
  .byte  102,15,114,241,13                   // pslld         $0xd,%xmm1
  .byte  102,15,235,202                      // por           %xmm2,%xmm1
  .byte  102,68,15,111,21,20,36,0,0          // movdqa        0x2414(%rip),%xmm10        # 5f20 <_sk_callback_sse41+0xec7>
  .byte  102,65,15,254,202                   // paddd         %xmm10,%xmm1
  .byte  102,15,219,193                      // pand          %xmm1,%xmm0
  .byte  102,65,15,115,219,8                 // psrldq        $0x8,%xmm11
  .byte  102,69,15,56,51,219                 // pmovzxwd      %xmm11,%xmm11
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,68,15,239,218                   // pxor          %xmm2,%xmm11
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,111,203                   // movdqa        %xmm11,%xmm1
  .byte  102,15,56,63,203                    // pmaxud        %xmm3,%xmm1
  .byte  102,65,15,118,203                   // pcmpeqd       %xmm11,%xmm1
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,68,15,235,218                   // por           %xmm2,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,203                   // pand          %xmm11,%xmm1
  .byte  102,69,15,56,51,217                 // pmovzxwd      %xmm9,%xmm11
  .byte  102,69,15,111,227                   // movdqa        %xmm11,%xmm12
  .byte  102,69,15,219,224                   // pand          %xmm8,%xmm12
  .byte  102,69,15,239,220                   // pxor          %xmm12,%xmm11
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,111,211                   // movdqa        %xmm11,%xmm2
  .byte  102,15,56,63,211                    // pmaxud        %xmm3,%xmm2
  .byte  102,65,15,118,211                   // pcmpeqd       %xmm11,%xmm2
  .byte  102,65,15,114,243,13                // pslld         $0xd,%xmm11
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,218                   // paddd         %xmm10,%xmm11
  .byte  102,65,15,219,211                   // pand          %xmm11,%xmm2
  .byte  102,65,15,115,217,8                 // psrldq        $0x8,%xmm9
  .byte  102,69,15,56,51,201                 // pmovzxwd      %xmm9,%xmm9
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  102,69,15,239,200                   // pxor          %xmm8,%xmm9
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,56,63,217                 // pmaxud        %xmm9,%xmm3
  .byte  102,65,15,118,217                   // pcmpeqd       %xmm9,%xmm3
  .byte  102,65,15,114,241,13                // pslld         $0xd,%xmm9
  .byte  102,69,15,235,200                   // por           %xmm8,%xmm9
  .byte  102,69,15,254,202                   // paddd         %xmm10,%xmm9
  .byte  102,65,15,219,217                   // pand          %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_sse41
.globl _sk_store_f16_sse41
FUNCTION(_sk_store_f16_sse41)
_sk_store_f16_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,111,21,73,35,0,0          // movdqa        0x2349(%rip),%xmm10        # 5f30 <_sk_callback_sse41+0xed7>
  .byte  102,68,15,111,216                   // movdqa        %xmm0,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,68,15,111,232                   // movdqa        %xmm0,%xmm13
  .byte  102,69,15,239,235                   // pxor          %xmm11,%xmm13
  .byte  102,68,15,111,13,60,35,0,0          // movdqa        0x233c(%rip),%xmm9        # 5f40 <_sk_callback_sse41+0xee7>
  .byte  102,65,15,114,211,16                // psrld         $0x10,%xmm11
  .byte  102,69,15,111,193                   // movdqa        %xmm9,%xmm8
  .byte  102,69,15,102,197                   // pcmpgtd       %xmm13,%xmm8
  .byte  102,65,15,114,213,13                // psrld         $0xd,%xmm13
  .byte  102,68,15,111,37,45,35,0,0          // movdqa        0x232d(%rip),%xmm12        # 5f50 <_sk_callback_sse41+0xef7>
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,221                   // paddd         %xmm13,%xmm11
  .byte  102,69,15,223,195                   // pandn         %xmm11,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,68,15,111,217                   // movdqa        %xmm1,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,68,15,111,241                   // movdqa        %xmm1,%xmm14
  .byte  102,69,15,239,243                   // pxor          %xmm11,%xmm14
  .byte  102,65,15,114,211,16                // psrld         $0x10,%xmm11
  .byte  102,69,15,111,233                   // movdqa        %xmm9,%xmm13
  .byte  102,69,15,102,238                   // pcmpgtd       %xmm14,%xmm13
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,220                   // por           %xmm12,%xmm11
  .byte  102,69,15,254,222                   // paddd         %xmm14,%xmm11
  .byte  102,69,15,223,235                   // pandn         %xmm11,%xmm13
  .byte  102,69,15,56,43,237                 // packusdw      %xmm13,%xmm13
  .byte  102,68,15,111,242                   // movdqa        %xmm2,%xmm14
  .byte  102,69,15,219,242                   // pand          %xmm10,%xmm14
  .byte  102,68,15,111,250                   // movdqa        %xmm2,%xmm15
  .byte  102,69,15,239,254                   // pxor          %xmm14,%xmm15
  .byte  102,65,15,114,214,16                // psrld         $0x10,%xmm14
  .byte  102,69,15,111,217                   // movdqa        %xmm9,%xmm11
  .byte  102,69,15,102,223                   // pcmpgtd       %xmm15,%xmm11
  .byte  102,65,15,114,215,13                // psrld         $0xd,%xmm15
  .byte  102,69,15,235,244                   // por           %xmm12,%xmm14
  .byte  102,69,15,254,247                   // paddd         %xmm15,%xmm14
  .byte  102,69,15,223,222                   // pandn         %xmm14,%xmm11
  .byte  102,69,15,56,43,219                 // packusdw      %xmm11,%xmm11
  .byte  102,68,15,219,211                   // pand          %xmm3,%xmm10
  .byte  102,68,15,111,243                   // movdqa        %xmm3,%xmm14
  .byte  102,69,15,239,242                   // pxor          %xmm10,%xmm14
  .byte  102,65,15,114,210,16                // psrld         $0x10,%xmm10
  .byte  102,69,15,102,206                   // pcmpgtd       %xmm14,%xmm9
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,212                   // por           %xmm12,%xmm10
  .byte  102,69,15,254,214                   // paddd         %xmm14,%xmm10
  .byte  102,69,15,223,202                   // pandn         %xmm10,%xmm9
  .byte  102,69,15,56,43,201                 // packusdw      %xmm9,%xmm9
  .byte  102,69,15,97,197                    // punpcklwd     %xmm13,%xmm8
  .byte  102,69,15,97,217                    // punpcklwd     %xmm9,%xmm11
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,69,15,98,203                    // punpckldq     %xmm11,%xmm9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,21                              // jne           3d19 <_sk_store_f16_sse41+0x140>
  .byte  68,15,17,12,208                     // movups        %xmm9,(%rax,%rdx,8)
  .byte  102,69,15,106,195                   // punpckhdq     %xmm11,%xmm8
  .byte  243,68,15,127,68,208,16             // movdqu        %xmm8,0x10(%rax,%rdx,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,214,12,208                // movq          %xmm9,(%rax,%rdx,8)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            3d15 <_sk_store_f16_sse41+0x13c>
  .byte  102,68,15,23,76,208,8               // movhpd        %xmm9,0x8(%rax,%rdx,8)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            3d15 <_sk_store_f16_sse41+0x13c>
  .byte  102,69,15,106,195                   // punpckhdq     %xmm11,%xmm8
  .byte  102,68,15,214,68,208,16             // movq          %xmm8,0x10(%rax,%rdx,8)
  .byte  235,213                             // jmp           3d15 <_sk_store_f16_sse41+0x13c>

HIDDEN _sk_load_u16_be_sse41
.globl _sk_load_u16_be_sse41
FUNCTION(_sk_load_u16_be_sse41)
_sk_load_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,185,0,0,0                    // jne           3e0f <_sk_load_u16_be_sse41+0xcf>
  .byte  102,65,15,16,4,65                   // movupd        (%r9,%rax,2),%xmm0
  .byte  243,65,15,111,76,65,16              // movdqu        0x10(%r9,%rax,2),%xmm1
  .byte  102,15,40,208                       // movapd        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,15,56,51,193                    // pmovzxwd      %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,190,33,0,0               // movaps        0x21be(%rip),%xmm8        # 5f60 <_sk_callback_sse41+0xf07>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,15,56,51,203                    // pmovzxwd      %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,68,15,111,202                   // movdqa        %xmm2,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,65,15,235,209                   // por           %xmm9,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,68,15,111,203                   // movdqa        %xmm3,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,217                   // por           %xmm9,%xmm3
  .byte  102,15,56,51,219                    // pmovzxwd      %xmm3,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,65,15,16,4,65                   // movsd         (%r9,%rax,2),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           3e28 <_sk_load_u16_be_sse41+0xe8>
  .byte  243,15,126,192                      // movq          %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,59,255,255,255                  // jmpq          3d63 <_sk_load_u16_be_sse41+0x23>
  .byte  102,65,15,22,68,65,8                // movhpd        0x8(%r9,%rax,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,38,255,255,255               // jb            3d63 <_sk_load_u16_be_sse41+0x23>
  .byte  243,65,15,126,76,65,16              // movq          0x10(%r9,%rax,2),%xmm1
  .byte  233,26,255,255,255                  // jmpq          3d63 <_sk_load_u16_be_sse41+0x23>

HIDDEN _sk_load_rgb_u16_be_sse41
.globl _sk_load_rgb_u16_be_sse41
FUNCTION(_sk_load_rgb_u16_be_sse41)
_sk_load_rgb_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,82                         // lea           (%rdx,%rdx,2),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,170,0,0,0                    // jne           3f05 <_sk_load_rgb_u16_be_sse41+0xbc>
  .byte  243,65,15,111,20,65                 // movdqu        (%r9,%rax,2),%xmm2
  .byte  243,65,15,111,92,65,8               // movdqu        0x8(%r9,%rax,2),%xmm3
  .byte  102,15,115,219,4                    // psrldq        $0x4,%xmm3
  .byte  102,15,111,194                      // movdqa        %xmm2,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,115,217,6                    // psrldq        $0x6,%xmm1
  .byte  102,15,97,211                       // punpcklwd     %xmm3,%xmm2
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,15,56,51,193                    // pmovzxwd      %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,182,32,0,0               // movaps        0x20b6(%rip),%xmm8        # 5f70 <_sk_callback_sse41+0xf17>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,15,56,51,203                    // pmovzxwd      %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,111,218                      // movdqa        %xmm2,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,15,235,211                      // por           %xmm3,%xmm2
  .byte  102,15,56,51,210                    // pmovzxwd      %xmm2,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,125,32,0,0                 // movaps        0x207d(%rip),%xmm3        # 5f80 <_sk_callback_sse41+0xf27>
  .byte  255,224                             // jmpq          *%rax
  .byte  102,65,15,110,20,65                 // movd          (%r9,%rax,2),%xmm2
  .byte  102,65,15,196,84,65,4,2             // pinsrw        $0x2,0x4(%r9,%rax,2),%xmm2
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           3f2a <_sk_load_rgb_u16_be_sse41+0xe1>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,85,255,255,255                  // jmpq          3e7f <_sk_load_rgb_u16_be_sse41+0x36>
  .byte  102,65,15,110,68,65,6               // movd          0x6(%r9,%rax,2),%xmm0
  .byte  102,65,15,196,68,65,10,2            // pinsrw        $0x2,0xa(%r9,%rax,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,24                              // jb            3f5b <_sk_load_rgb_u16_be_sse41+0x112>
  .byte  102,65,15,110,92,65,12              // movd          0xc(%r9,%rax,2),%xmm3
  .byte  102,65,15,196,92,65,16,2            // pinsrw        $0x2,0x10(%r9,%rax,2),%xmm3
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,36,255,255,255                  // jmpq          3e7f <_sk_load_rgb_u16_be_sse41+0x36>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  233,27,255,255,255                  // jmpq          3e7f <_sk_load_rgb_u16_be_sse41+0x36>

HIDDEN _sk_store_u16_be_sse41
.globl _sk_store_u16_be_sse41
FUNCTION(_sk_store_u16_be_sse41)
_sk_store_u16_be_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  68,15,40,21,23,32,0,0               // movaps        0x2017(%rip),%xmm10        # 5f90 <_sk_callback_sse41+0xf37>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,56,43,192                 // packusdw      %xmm8,%xmm8
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,65,15,113,208,8                 // psrlw         $0x8,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  102,69,15,91,217                    // cvtps2dq      %xmm9,%xmm11
  .byte  102,69,15,56,43,219                 // packusdw      %xmm11,%xmm11
  .byte  102,69,15,111,203                   // movdqa        %xmm11,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,65,15,113,211,8                 // psrlw         $0x8,%xmm11
  .byte  102,69,15,235,217                   // por           %xmm9,%xmm11
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,69,15,56,43,201                 // packusdw      %xmm9,%xmm9
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,209,8                 // psrlw         $0x8,%xmm9
  .byte  102,69,15,235,204                   // por           %xmm12,%xmm9
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,69,15,56,43,210                 // packusdw      %xmm10,%xmm10
  .byte  102,69,15,111,226                   // movdqa        %xmm10,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,210,8                 // psrlw         $0x8,%xmm10
  .byte  102,69,15,235,212                   // por           %xmm12,%xmm10
  .byte  102,69,15,97,195                    // punpcklwd     %xmm11,%xmm8
  .byte  102,69,15,97,202                    // punpcklwd     %xmm10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,69,15,98,209                    // punpckldq     %xmm9,%xmm10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,21                              // jne           4047 <_sk_store_u16_be_sse41+0xe3>
  .byte  69,15,17,20,65                      // movups        %xmm10,(%r9,%rax,2)
  .byte  102,69,15,106,193                   // punpckhdq     %xmm9,%xmm8
  .byte  243,69,15,127,68,65,16              // movdqu        %xmm8,0x10(%r9,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,214,20,65                 // movq          %xmm10,(%r9,%rax,2)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            4043 <_sk_store_u16_be_sse41+0xdf>
  .byte  102,69,15,23,84,65,8                // movhpd        %xmm10,0x8(%r9,%rax,2)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            4043 <_sk_store_u16_be_sse41+0xdf>
  .byte  102,69,15,106,193                   // punpckhdq     %xmm9,%xmm8
  .byte  102,69,15,214,68,65,16              // movq          %xmm8,0x10(%r9,%rax,2)
  .byte  235,213                             // jmp           4043 <_sk_store_u16_be_sse41+0xdf>

HIDDEN _sk_load_f32_sse41
.globl _sk_load_f32_sse41
FUNCTION(_sk_load_f32_sse41)
_sk_load_f32_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  69,15,16,4,2                        // movups        (%r10,%rax,1),%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           40ce <_sk_load_f32_sse41+0x60>
  .byte  67,15,16,68,138,16                  // movups        0x10(%r10,%r9,4),%xmm0
  .byte  67,15,16,92,138,32                  // movups        0x20(%r10,%r9,4),%xmm3
  .byte  71,15,16,76,138,48                  // movups        0x30(%r10,%r9,4),%xmm9
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,20,208                           // unpcklps      %xmm0,%xmm2
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  68,15,21,192                        // unpckhps      %xmm0,%xmm8
  .byte  65,15,21,217                        // unpckhps      %xmm9,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,202                           // movhlps       %xmm2,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  65,15,18,216                        // movhlps       %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,8                               // jne           40e0 <_sk_load_f32_sse41+0x72>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  235,190                             // jmp           409e <_sk_load_f32_sse41+0x30>
  .byte  67,15,16,68,138,16                  // movups        0x10(%r10,%r9,4),%xmm0
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,8                               // jb            40f4 <_sk_load_f32_sse41+0x86>
  .byte  67,15,16,92,138,32                  // movups        0x20(%r10,%r9,4),%xmm3
  .byte  235,170                             // jmp           409e <_sk_load_f32_sse41+0x30>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  235,165                             // jmp           409e <_sk_load_f32_sse41+0x30>

HIDDEN _sk_store_f32_sse41
.globl _sk_store_f32_sse41
FUNCTION(_sk_store_f32_sse41)
_sk_store_f32_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,20,195                        // unpcklps      %xmm3,%xmm8
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,21,209                        // unpckhps      %xmm1,%xmm10
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  68,15,21,219                        // unpckhps      %xmm3,%xmm11
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  102,69,15,20,224                    // unpcklpd      %xmm8,%xmm12
  .byte  69,15,18,193                        // movhlps       %xmm9,%xmm8
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  102,69,15,20,203                    // unpcklpd      %xmm11,%xmm9
  .byte  102,69,15,17,36,2                   // movupd        %xmm12,(%r10,%rax,1)
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,29                              // jne           416b <_sk_store_f32_sse41+0x72>
  .byte  102,69,15,21,211                    // unpckhpd      %xmm11,%xmm10
  .byte  71,15,17,68,138,16                  // movups        %xmm8,0x10(%r10,%r9,4)
  .byte  102,71,15,17,76,138,32              // movupd        %xmm9,0x20(%r10,%r9,4)
  .byte  102,71,15,17,84,138,48              // movupd        %xmm10,0x30(%r10,%r9,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,246                             // je            4167 <_sk_store_f32_sse41+0x6e>
  .byte  71,15,17,68,138,16                  // movups        %xmm8,0x10(%r10,%r9,4)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,234                             // jb            4167 <_sk_store_f32_sse41+0x6e>
  .byte  102,71,15,17,76,138,32              // movupd        %xmm9,0x20(%r10,%r9,4)
  .byte  235,225                             // jmp           4167 <_sk_store_f32_sse41+0x6e>

HIDDEN _sk_clamp_x_sse41
.globl _sk_clamp_x_sse41
FUNCTION(_sk_clamp_x_sse41)
_sk_clamp_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,15,118,192                      // pcmpeqd       %xmm0,%xmm0
  .byte  102,65,15,254,193                   // paddd         %xmm9,%xmm0
  .byte  68,15,93,192                        // minps         %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_sse41
.globl _sk_clamp_y_sse41
FUNCTION(_sk_clamp_y_sse41)
_sk_clamp_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,193                        // maxps         %xmm1,%xmm8
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,15,118,201                      // pcmpeqd       %xmm1,%xmm1
  .byte  102,65,15,254,201                   // paddd         %xmm9,%xmm1
  .byte  68,15,93,193                        // minps         %xmm1,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_sse41
.globl _sk_repeat_x_sse41
FUNCTION(_sk_repeat_x_sse41)
_sk_repeat_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,193                        // minps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_sse41
.globl _sk_repeat_y_sse41
FUNCTION(_sk_repeat_y_sse41)
_sk_repeat_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,201                        // minps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_sse41
.globl _sk_mirror_x_sse41
FUNCTION(_sk_mirror_x_sse41)
_sk_mirror_x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  243,69,15,88,192                    // addss         %xmm8,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  243,68,15,89,13,227,32,0,0          // mulss         0x20e3(%rip),%xmm9        # 6360 <_sk_callback_sse41+0x1307>
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  102,69,15,118,192                   // pcmpeqd       %xmm8,%xmm8
  .byte  102,69,15,254,194                   // paddd         %xmm10,%xmm8
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_sse41
.globl _sk_mirror_y_sse41
FUNCTION(_sk_mirror_y_sse41)
_sk_mirror_y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  243,69,15,88,192                    // addss         %xmm8,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  243,68,15,89,13,128,32,0,0          // mulss         0x2080(%rip),%xmm9        # 6364 <_sk_callback_sse41+0x130b>
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  65,15,92,201                        // subps         %xmm9,%xmm1
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  65,15,84,200                        // andps         %xmm8,%xmm1
  .byte  102,69,15,118,192                   // pcmpeqd       %xmm8,%xmm8
  .byte  102,69,15,254,194                   // paddd         %xmm10,%xmm8
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_1_sse41
.globl _sk_clamp_x_1_sse41
FUNCTION(_sk_clamp_x_1_sse41)
_sk_clamp_x_1_sse41:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  68,15,93,5,114,28,0,0               // minps         0x1c72(%rip),%xmm8        # 5fa0 <_sk_callback_sse41+0xf47>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_1_sse41
.globl _sk_repeat_x_1_sse41
FUNCTION(_sk_repeat_x_1_sse41)
_sk_repeat_x_1_sse41:
  .byte  102,68,15,58,8,192,1                // roundps       $0x1,%xmm0,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_1_sse41
.globl _sk_mirror_x_1_sse41
FUNCTION(_sk_mirror_x_1_sse41)
_sk_mirror_x_1_sse41:
  .byte  68,15,40,5,99,28,0,0                // movaps        0x1c63(%rip),%xmm8        # 5fb0 <_sk_callback_sse41+0xf57>
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,13,103,28,0,0              // movaps        0x1c67(%rip),%xmm9        # 5fc0 <_sk_callback_sse41+0xf67>
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  102,69,15,58,8,201,1                // roundps       $0x1,%xmm9,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_sse41
.globl _sk_luminance_to_alpha_sse41
FUNCTION(_sk_luminance_to_alpha_sse41)
_sk_luminance_to_alpha_sse41:
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,89,5,70,28,0,0                   // mulps         0x1c46(%rip),%xmm0        # 5fd0 <_sk_callback_sse41+0xf77>
  .byte  15,89,13,79,28,0,0                  // mulps         0x1c4f(%rip),%xmm1        # 5fe0 <_sk_callback_sse41+0xf87>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,29,85,28,0,0                  // mulps         0x1c55(%rip),%xmm3        # 5ff0 <_sk_callback_sse41+0xf97>
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_sse41
.globl _sk_matrix_2x3_sse41
FUNCTION(_sk_matrix_2x3_sse41)
_sk_matrix_2x3_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,16                  // movss         0x10(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_sse41
.globl _sk_matrix_3x4_sse41
FUNCTION(_sk_matrix_3x4_sse41)
_sk_matrix_3x4_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,36                  // movss         0x24(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_sse41
.globl _sk_matrix_4x5_sse41
FUNCTION(_sk_matrix_4x5_sse41)
_sk_matrix_4x5_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,32                  // movss         0x20(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,48                  // movss         0x30(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,64                 // movss         0x40(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,20                  // movss         0x14(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,36                  // movss         0x24(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,52                  // movss         0x34(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,68                 // movss         0x44(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,56                 // movss         0x38(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,72                 // movss         0x48(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  243,68,15,16,88,12                  // movss         0xc(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,28                  // movss         0x1c(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,60                 // movss         0x3c(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  243,68,15,16,120,76                 // movss         0x4c(%rax),%xmm15
  .byte  69,15,198,255,0                     // shufps        $0x0,%xmm15,%xmm15
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,247                        // addps         %xmm15,%xmm14
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x3_sse41
.globl _sk_matrix_4x3_sse41
FUNCTION(_sk_matrix_4x3_sse41)
_sk_matrix_4x3_sse41:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,32                     // movss         0x20(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,36                     // movss         0x24(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,80,40                  // movss         0x28(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,80,28                  // movss         0x1c(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,44                  // movss         0x2c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_sse41
.globl _sk_matrix_perspective_sse41
FUNCTION(_sk_matrix_perspective_sse41)
_sk_matrix_perspective_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  243,68,15,16,80,24                  // movss         0x18(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,83,202                        // rcpps         %xmm10,%xmm1
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_gradient_sse41
.globl _sk_evenly_spaced_gradient_sse41
FUNCTION(_sk_evenly_spaced_gradient_sse41)
_sk_evenly_spaced_gradient_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  76,139,112,8                        // mov           0x8(%rax),%r14
  .byte  72,255,203                          // dec           %rbx
  .byte  120,7                               // js            47d9 <_sk_evenly_spaced_gradient_sse41+0x1a>
  .byte  243,72,15,42,203                    // cvtsi2ss      %rbx,%xmm1
  .byte  235,21                              // jmp           47ee <_sk_evenly_spaced_gradient_sse41+0x2f>
  .byte  73,137,217                          // mov           %rbx,%r9
  .byte  73,209,233                          // shr           %r9
  .byte  131,227,1                           // and           $0x1,%ebx
  .byte  76,9,203                            // or            %r9,%rbx
  .byte  243,72,15,42,203                    // cvtsi2ss      %rbx,%xmm1
  .byte  243,15,88,201                       // addss         %xmm1,%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,203                   // movq          %xmm1,%r11
  .byte  69,137,223                          // mov           %r11d,%r15d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,190                  // movss         (%r14,%r15,4),%xmm8
  .byte  102,71,15,58,33,4,158,16            // insertps      $0x10,(%r14,%r11,4),%xmm8
  .byte  243,67,15,16,12,150                 // movss         (%r14,%r10,4),%xmm1
  .byte  102,68,15,58,33,193,32              // insertps      $0x20,%xmm1,%xmm8
  .byte  243,67,15,16,12,142                 // movss         (%r14,%r9,4),%xmm1
  .byte  102,68,15,58,33,193,48              // insertps      $0x30,%xmm1,%xmm8
  .byte  72,139,88,40                        // mov           0x28(%rax),%rbx
  .byte  243,70,15,16,12,187                 // movss         (%rbx,%r15,4),%xmm9
  .byte  102,70,15,58,33,12,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm9
  .byte  243,66,15,16,12,147                 // movss         (%rbx,%r10,4),%xmm1
  .byte  102,68,15,58,33,201,32              // insertps      $0x20,%xmm1,%xmm9
  .byte  243,66,15,16,12,139                 // movss         (%rbx,%r9,4),%xmm1
  .byte  102,68,15,58,33,201,48              // insertps      $0x30,%xmm1,%xmm9
  .byte  72,139,88,16                        // mov           0x10(%rax),%rbx
  .byte  243,66,15,16,12,187                 // movss         (%rbx,%r15,4),%xmm1
  .byte  102,66,15,58,33,12,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm1
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,66,15,16,20,139                 // movss         (%rbx,%r9,4),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  72,139,88,48                        // mov           0x30(%rax),%rbx
  .byte  243,70,15,16,20,187                 // movss         (%rbx,%r15,4),%xmm10
  .byte  102,70,15,58,33,20,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm10
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  102,68,15,58,33,210,32              // insertps      $0x20,%xmm2,%xmm10
  .byte  243,66,15,16,20,139                 // movss         (%rbx,%r9,4),%xmm2
  .byte  102,68,15,58,33,210,48              // insertps      $0x30,%xmm2,%xmm10
  .byte  72,139,88,24                        // mov           0x18(%rax),%rbx
  .byte  243,66,15,16,20,187                 // movss         (%rbx,%r15,4),%xmm2
  .byte  102,66,15,58,33,20,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm2
  .byte  243,66,15,16,28,147                 // movss         (%rbx,%r10,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,66,15,16,28,139                 // movss         (%rbx,%r9,4),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  72,139,88,56                        // mov           0x38(%rax),%rbx
  .byte  243,70,15,16,28,187                 // movss         (%rbx,%r15,4),%xmm11
  .byte  102,70,15,58,33,28,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm11
  .byte  243,66,15,16,28,147                 // movss         (%rbx,%r10,4),%xmm3
  .byte  102,68,15,58,33,219,32              // insertps      $0x20,%xmm3,%xmm11
  .byte  243,66,15,16,28,139                 // movss         (%rbx,%r9,4),%xmm3
  .byte  102,68,15,58,33,219,48              // insertps      $0x30,%xmm3,%xmm11
  .byte  72,139,88,32                        // mov           0x20(%rax),%rbx
  .byte  243,66,15,16,28,187                 // movss         (%rbx,%r15,4),%xmm3
  .byte  102,66,15,58,33,28,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm3
  .byte  243,70,15,16,36,147                 // movss         (%rbx,%r10,4),%xmm12
  .byte  102,65,15,58,33,220,32              // insertps      $0x20,%xmm12,%xmm3
  .byte  243,70,15,16,36,139                 // movss         (%rbx,%r9,4),%xmm12
  .byte  102,65,15,58,33,220,48              // insertps      $0x30,%xmm12,%xmm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  243,70,15,16,36,184                 // movss         (%rax,%r15,4),%xmm12
  .byte  102,70,15,58,33,36,152,16           // insertps      $0x10,(%rax,%r11,4),%xmm12
  .byte  243,70,15,16,44,144                 // movss         (%rax,%r10,4),%xmm13
  .byte  102,69,15,58,33,229,32              // insertps      $0x20,%xmm13,%xmm12
  .byte  243,70,15,16,44,136                 // movss         (%rax,%r9,4),%xmm13
  .byte  102,69,15,58,33,229,48              // insertps      $0x30,%xmm13,%xmm12
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gauss_a_to_rgba_sse41
.globl _sk_gauss_a_to_rgba_sse41
FUNCTION(_sk_gauss_a_to_rgba_sse41)
_sk_gauss_a_to_rgba_sse41:
  .byte  15,40,5,100,22,0,0                  // movaps        0x1664(%rip),%xmm0        # 6000 <_sk_callback_sse41+0xfa7>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,106,22,0,0                  // addps         0x166a(%rip),%xmm0        # 6010 <_sk_callback_sse41+0xfb7>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,112,22,0,0                  // addps         0x1670(%rip),%xmm0        # 6020 <_sk_callback_sse41+0xfc7>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,118,22,0,0                  // addps         0x1676(%rip),%xmm0        # 6030 <_sk_callback_sse41+0xfd7>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,124,22,0,0                  // addps         0x167c(%rip),%xmm0        # 6040 <_sk_callback_sse41+0xfe7>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_sse41
.globl _sk_gradient_sse41
FUNCTION(_sk_gradient_sse41)
_sk_gradient_sse41:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,249,2                        // cmp           $0x2,%r9
  .byte  114,50                              // jb            4a17 <_sk_gradient_sse41+0x46>
  .byte  72,139,88,72                        // mov           0x48(%rax),%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  15,40,21,85,22,0,0                  // movaps        0x1655(%rip),%xmm2        # 6050 <_sk_callback_sse41+0xff7>
  .byte  243,15,16,27                        // movss         (%rbx),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,194,216,2                        // cmpleps       %xmm0,%xmm3
  .byte  15,84,218                           // andps         %xmm2,%xmm3
  .byte  102,15,254,203                      // paddd         %xmm3,%xmm1
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  117,228                             // jne           49fb <_sk_gradient_sse41+0x2a>
  .byte  102,73,15,58,22,201,1               // pextrq        $0x1,%xmm1,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,203                   // movq          %xmm1,%r11
  .byte  69,137,222                          // mov           %r11d,%r14d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,70,15,16,4,179                  // movss         (%rbx,%r14,4),%xmm8
  .byte  102,70,15,58,33,4,155,16            // insertps      $0x10,(%rbx,%r11,4),%xmm8
  .byte  243,66,15,16,12,147                 // movss         (%rbx,%r10,4),%xmm1
  .byte  102,68,15,58,33,193,32              // insertps      $0x20,%xmm1,%xmm8
  .byte  243,66,15,16,12,139                 // movss         (%rbx,%r9,4),%xmm1
  .byte  102,68,15,58,33,193,48              // insertps      $0x30,%xmm1,%xmm8
  .byte  72,139,88,40                        // mov           0x28(%rax),%rbx
  .byte  243,70,15,16,12,179                 // movss         (%rbx,%r14,4),%xmm9
  .byte  102,70,15,58,33,12,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm9
  .byte  243,66,15,16,12,147                 // movss         (%rbx,%r10,4),%xmm1
  .byte  102,68,15,58,33,201,32              // insertps      $0x20,%xmm1,%xmm9
  .byte  243,66,15,16,12,139                 // movss         (%rbx,%r9,4),%xmm1
  .byte  102,68,15,58,33,201,48              // insertps      $0x30,%xmm1,%xmm9
  .byte  243,67,15,16,12,183                 // movss         (%r15,%r14,4),%xmm1
  .byte  102,67,15,58,33,12,159,16           // insertps      $0x10,(%r15,%r11,4),%xmm1
  .byte  243,67,15,16,20,151                 // movss         (%r15,%r10,4),%xmm2
  .byte  102,15,58,33,202,32                 // insertps      $0x20,%xmm2,%xmm1
  .byte  243,67,15,16,20,143                 // movss         (%r15,%r9,4),%xmm2
  .byte  102,15,58,33,202,48                 // insertps      $0x30,%xmm2,%xmm1
  .byte  72,139,88,48                        // mov           0x30(%rax),%rbx
  .byte  243,70,15,16,20,179                 // movss         (%rbx,%r14,4),%xmm10
  .byte  102,70,15,58,33,20,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm10
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  102,68,15,58,33,210,32              // insertps      $0x20,%xmm2,%xmm10
  .byte  243,66,15,16,20,139                 // movss         (%rbx,%r9,4),%xmm2
  .byte  102,68,15,58,33,210,48              // insertps      $0x30,%xmm2,%xmm10
  .byte  72,139,88,24                        // mov           0x18(%rax),%rbx
  .byte  243,66,15,16,20,179                 // movss         (%rbx,%r14,4),%xmm2
  .byte  102,66,15,58,33,20,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm2
  .byte  243,66,15,16,28,147                 // movss         (%rbx,%r10,4),%xmm3
  .byte  102,15,58,33,211,32                 // insertps      $0x20,%xmm3,%xmm2
  .byte  243,66,15,16,28,139                 // movss         (%rbx,%r9,4),%xmm3
  .byte  102,15,58,33,211,48                 // insertps      $0x30,%xmm3,%xmm2
  .byte  72,139,88,56                        // mov           0x38(%rax),%rbx
  .byte  243,70,15,16,28,179                 // movss         (%rbx,%r14,4),%xmm11
  .byte  102,70,15,58,33,28,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm11
  .byte  243,66,15,16,28,147                 // movss         (%rbx,%r10,4),%xmm3
  .byte  102,68,15,58,33,219,32              // insertps      $0x20,%xmm3,%xmm11
  .byte  243,66,15,16,28,139                 // movss         (%rbx,%r9,4),%xmm3
  .byte  102,68,15,58,33,219,48              // insertps      $0x30,%xmm3,%xmm11
  .byte  72,139,88,32                        // mov           0x20(%rax),%rbx
  .byte  243,66,15,16,28,179                 // movss         (%rbx,%r14,4),%xmm3
  .byte  102,66,15,58,33,28,155,16           // insertps      $0x10,(%rbx,%r11,4),%xmm3
  .byte  243,70,15,16,36,147                 // movss         (%rbx,%r10,4),%xmm12
  .byte  102,65,15,58,33,220,32              // insertps      $0x20,%xmm12,%xmm3
  .byte  243,70,15,16,36,139                 // movss         (%rbx,%r9,4),%xmm12
  .byte  102,65,15,58,33,220,48              // insertps      $0x30,%xmm12,%xmm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  243,70,15,16,36,176                 // movss         (%rax,%r14,4),%xmm12
  .byte  102,70,15,58,33,36,152,16           // insertps      $0x10,(%rax,%r11,4),%xmm12
  .byte  243,70,15,16,44,144                 // movss         (%rax,%r10,4),%xmm13
  .byte  102,69,15,58,33,229,32              // insertps      $0x20,%xmm13,%xmm12
  .byte  243,70,15,16,44,136                 // movss         (%rax,%r9,4),%xmm13
  .byte  102,69,15,58,33,229,48              // insertps      $0x30,%xmm13,%xmm12
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,220                        // addps         %xmm12,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_sse41
.globl _sk_evenly_spaced_2_stop_gradient_sse41
FUNCTION(_sk_evenly_spaced_2_stop_gradient_sse41)
_sk_evenly_spaced_2_stop_gradient_sse41:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,72,28                  // movss         0x1c(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_sse41
.globl _sk_xy_to_unit_angle_sse41
FUNCTION(_sk_xy_to_unit_angle_sse41)
_sk_xy_to_unit_angle_sse41:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  68,15,92,217                        // subps         %xmm1,%xmm11
  .byte  68,15,84,217                        // andps         %xmm1,%xmm11
  .byte  68,15,40,224                        // movaps        %xmm0,%xmm12
  .byte  69,15,93,227                        // minps         %xmm11,%xmm12
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  69,15,95,211                        // maxps         %xmm11,%xmm10
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  69,15,89,237                        // mulps         %xmm13,%xmm13
  .byte  68,15,40,21,246,19,0,0              // movaps        0x13f6(%rip),%xmm10        # 6060 <_sk_callback_sse41+0x1007>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,250,19,0,0              // addps         0x13fa(%rip),%xmm10        # 6070 <_sk_callback_sse41+0x1017>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,254,19,0,0              // addps         0x13fe(%rip),%xmm10        # 6080 <_sk_callback_sse41+0x1027>
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  68,15,88,21,2,20,0,0                // addps         0x1402(%rip),%xmm10        # 6090 <_sk_callback_sse41+0x1037>
  .byte  69,15,89,212                        // mulps         %xmm12,%xmm10
  .byte  65,15,194,195,1                     // cmpltps       %xmm11,%xmm0
  .byte  68,15,40,29,1,20,0,0                // movaps        0x1401(%rip),%xmm11        # 60a0 <_sk_callback_sse41+0x1047>
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  69,15,194,200,1                     // cmpltps       %xmm8,%xmm9
  .byte  68,15,40,29,250,19,0,0              // movaps        0x13fa(%rip),%xmm11        # 60b0 <_sk_callback_sse41+0x1057>
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  102,69,15,56,20,211                 // blendvps      %xmm0,%xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,194,192,1                     // cmpltps       %xmm8,%xmm0
  .byte  68,15,40,13,236,19,0,0              // movaps        0x13ec(%rip),%xmm9        # 60c0 <_sk_callback_sse41+0x1067>
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  102,69,15,56,20,209                 // blendvps      %xmm0,%xmm9,%xmm10
  .byte  69,15,194,194,7                     // cmpordps      %xmm10,%xmm8
  .byte  69,15,84,194                        // andps         %xmm10,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_sse41
.globl _sk_xy_to_radius_sse41
FUNCTION(_sk_xy_to_radius_sse41)
_sk_xy_to_radius_sse41:
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  65,15,81,192                        // sqrtps        %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_sse41
.globl _sk_save_xy_sse41
FUNCTION(_sk_save_xy_sse41)
_sk_save_xy_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,192,19,0,0               // movaps        0x13c0(%rip),%xmm8        # 60d0 <_sk_callback_sse41+0x1077>
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  102,69,15,58,8,209,1                // roundps       $0x1,%xmm9,%xmm10
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  102,69,15,58,8,208,1                // roundps       $0x1,%xmm8,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  15,17,72,32                         // movups        %xmm1,0x20(%rax)
  .byte  68,15,17,72,64                      // movups        %xmm9,0x40(%rax)
  .byte  68,15,17,64,96                      // movups        %xmm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_sse41
.globl _sk_accumulate_sse41
FUNCTION(_sk_accumulate_sse41)
_sk_accumulate_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,16,128,128,0,0,0              // movups        0x80(%rax),%xmm8
  .byte  68,15,16,136,160,0,0,0              // movups        0xa0(%rax),%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  65,15,88,224                        // addps         %xmm8,%xmm4
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  65,15,88,232                        // addps         %xmm8,%xmm5
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,88,240                        // addps         %xmm8,%xmm6
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_sse41
.globl _sk_bilinear_nx_sse41
FUNCTION(_sk_bilinear_nx_sse41)
_sk_bilinear_nx_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,66,19,0,0                   // addps         0x1342(%rip),%xmm0        # 60e0 <_sk_callback_sse41+0x1087>
  .byte  68,15,40,13,74,19,0,0               // movaps        0x134a(%rip),%xmm9        # 60f0 <_sk_callback_sse41+0x1097>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_sse41
.globl _sk_bilinear_px_sse41
FUNCTION(_sk_bilinear_px_sse41)
_sk_bilinear_px_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,57,19,0,0                   // addps         0x1339(%rip),%xmm0        # 6100 <_sk_callback_sse41+0x10a7>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_sse41
.globl _sk_bilinear_ny_sse41
FUNCTION(_sk_bilinear_ny_sse41)
_sk_bilinear_ny_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,43,19,0,0                  // addps         0x132b(%rip),%xmm1        # 6110 <_sk_callback_sse41+0x10b7>
  .byte  68,15,40,13,51,19,0,0               // movaps        0x1333(%rip),%xmm9        # 6120 <_sk_callback_sse41+0x10c7>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_sse41
.globl _sk_bilinear_py_sse41
FUNCTION(_sk_bilinear_py_sse41)
_sk_bilinear_py_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,33,19,0,0                  // addps         0x1321(%rip),%xmm1        # 6130 <_sk_callback_sse41+0x10d7>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_sse41
.globl _sk_bicubic_n3x_sse41
FUNCTION(_sk_bicubic_n3x_sse41)
_sk_bicubic_n3x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,20,19,0,0                   // addps         0x1314(%rip),%xmm0        # 6140 <_sk_callback_sse41+0x10e7>
  .byte  68,15,40,13,28,19,0,0               // movaps        0x131c(%rip),%xmm9        # 6150 <_sk_callback_sse41+0x10f7>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,24,19,0,0               // mulps         0x1318(%rip),%xmm9        # 6160 <_sk_callback_sse41+0x1107>
  .byte  68,15,88,13,32,19,0,0               // addps         0x1320(%rip),%xmm9        # 6170 <_sk_callback_sse41+0x1117>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_sse41
.globl _sk_bicubic_n1x_sse41
FUNCTION(_sk_bicubic_n1x_sse41)
_sk_bicubic_n1x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,15,19,0,0                   // addps         0x130f(%rip),%xmm0        # 6180 <_sk_callback_sse41+0x1127>
  .byte  68,15,40,13,23,19,0,0               // movaps        0x1317(%rip),%xmm9        # 6190 <_sk_callback_sse41+0x1137>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,27,19,0,0                // movaps        0x131b(%rip),%xmm8        # 61a0 <_sk_callback_sse41+0x1147>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,31,19,0,0                // addps         0x131f(%rip),%xmm8        # 61b0 <_sk_callback_sse41+0x1157>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,35,19,0,0                // addps         0x1323(%rip),%xmm8        # 61c0 <_sk_callback_sse41+0x1167>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,39,19,0,0                // addps         0x1327(%rip),%xmm8        # 61d0 <_sk_callback_sse41+0x1177>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_sse41
.globl _sk_bicubic_p1x_sse41
FUNCTION(_sk_bicubic_p1x_sse41)
_sk_bicubic_p1x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,33,19,0,0                // movaps        0x1321(%rip),%xmm8        # 61e0 <_sk_callback_sse41+0x1187>
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,72,64                      // movups        0x40(%rax),%xmm9
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,21,29,19,0,0               // movaps        0x131d(%rip),%xmm10        # 61f0 <_sk_callback_sse41+0x1197>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,33,19,0,0               // addps         0x1321(%rip),%xmm10        # 6200 <_sk_callback_sse41+0x11a7>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,29,19,0,0               // addps         0x131d(%rip),%xmm10        # 6210 <_sk_callback_sse41+0x11b7>
  .byte  68,15,17,144,128,0,0,0              // movups        %xmm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_sse41
.globl _sk_bicubic_p3x_sse41
FUNCTION(_sk_bicubic_p3x_sse41)
_sk_bicubic_p3x_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,16,19,0,0                   // addps         0x1310(%rip),%xmm0        # 6220 <_sk_callback_sse41+0x11c7>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,16,19,0,0                // mulps         0x1310(%rip),%xmm8        # 6230 <_sk_callback_sse41+0x11d7>
  .byte  68,15,88,5,24,19,0,0                // addps         0x1318(%rip),%xmm8        # 6240 <_sk_callback_sse41+0x11e7>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_sse41
.globl _sk_bicubic_n3y_sse41
FUNCTION(_sk_bicubic_n3y_sse41)
_sk_bicubic_n3y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,6,19,0,0                   // addps         0x1306(%rip),%xmm1        # 6250 <_sk_callback_sse41+0x11f7>
  .byte  68,15,40,13,14,19,0,0               // movaps        0x130e(%rip),%xmm9        # 6260 <_sk_callback_sse41+0x1207>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,10,19,0,0               // mulps         0x130a(%rip),%xmm9        # 6270 <_sk_callback_sse41+0x1217>
  .byte  68,15,88,13,18,19,0,0               // addps         0x1312(%rip),%xmm9        # 6280 <_sk_callback_sse41+0x1227>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_sse41
.globl _sk_bicubic_n1y_sse41
FUNCTION(_sk_bicubic_n1y_sse41)
_sk_bicubic_n1y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,0,19,0,0                   // addps         0x1300(%rip),%xmm1        # 6290 <_sk_callback_sse41+0x1237>
  .byte  68,15,40,13,8,19,0,0                // movaps        0x1308(%rip),%xmm9        # 62a0 <_sk_callback_sse41+0x1247>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,12,19,0,0                // movaps        0x130c(%rip),%xmm8        # 62b0 <_sk_callback_sse41+0x1257>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,16,19,0,0                // addps         0x1310(%rip),%xmm8        # 62c0 <_sk_callback_sse41+0x1267>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,20,19,0,0                // addps         0x1314(%rip),%xmm8        # 62d0 <_sk_callback_sse41+0x1277>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,24,19,0,0                // addps         0x1318(%rip),%xmm8        # 62e0 <_sk_callback_sse41+0x1287>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_sse41
.globl _sk_bicubic_p1y_sse41
FUNCTION(_sk_bicubic_p1y_sse41)
_sk_bicubic_p1y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,18,19,0,0                // movaps        0x1312(%rip),%xmm8        # 62f0 <_sk_callback_sse41+0x1297>
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,72,96                      // movups        0x60(%rax),%xmm9
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,21,13,19,0,0               // movaps        0x130d(%rip),%xmm10        # 6300 <_sk_callback_sse41+0x12a7>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,17,19,0,0               // addps         0x1311(%rip),%xmm10        # 6310 <_sk_callback_sse41+0x12b7>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,13,19,0,0               // addps         0x130d(%rip),%xmm10        # 6320 <_sk_callback_sse41+0x12c7>
  .byte  68,15,17,144,160,0,0,0              // movups        %xmm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_sse41
.globl _sk_bicubic_p3y_sse41
FUNCTION(_sk_bicubic_p3y_sse41)
_sk_bicubic_p3y_sse41:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,255,18,0,0                 // addps         0x12ff(%rip),%xmm1        # 6330 <_sk_callback_sse41+0x12d7>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,255,18,0,0               // mulps         0x12ff(%rip),%xmm8        # 6340 <_sk_callback_sse41+0x12e7>
  .byte  68,15,88,5,7,19,0,0                 // addps         0x1307(%rip),%xmm8        # 6350 <_sk_callback_sse41+0x12f7>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_sse41
.globl _sk_callback_sse41
FUNCTION(_sk_callback_sse41)
_sk_callback_sse41:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,236,72                       // sub           $0x48,%rsp
  .byte  15,41,125,144                       // movaps        %xmm7,-0x70(%rbp)
  .byte  15,41,117,160                       // movaps        %xmm6,-0x60(%rbp)
  .byte  15,41,109,176                       // movaps        %xmm5,-0x50(%rbp)
  .byte  15,41,101,192                       // movaps        %xmm4,-0x40(%rbp)
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  72,137,77,208                       // mov           %rcx,-0x30(%rbp)
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,252                          // mov           %rdi,%r12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,20,225                           // unpcklps      %xmm1,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,20,235                           // unpcklps      %xmm3,%xmm5
  .byte  15,21,193                           // unpckhps      %xmm1,%xmm0
  .byte  15,21,211                           // unpckhps      %xmm3,%xmm2
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  102,15,20,205                       // unpcklpd      %xmm5,%xmm1
  .byte  15,18,236                           // movhlps       %xmm4,%xmm5
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  102,15,20,218                       // unpcklpd      %xmm2,%xmm3
  .byte  102,65,15,17,78,8                   // movupd        %xmm1,0x8(%r14)
  .byte  15,18,208                           // movhlps       %xmm0,%xmm2
  .byte  65,15,17,110,24                     // movups        %xmm5,0x18(%r14)
  .byte  102,65,15,17,94,40                  // movupd        %xmm3,0x28(%r14)
  .byte  65,15,17,86,56                      // movups        %xmm2,0x38(%r14)
  .byte  72,133,219                          // test          %rbx,%rbx
  .byte  190,4,0,0,0                         // mov           $0x4,%esi
  .byte  15,69,243                           // cmovne        %ebx,%esi
  .byte  76,137,247                          // mov           %r14,%rdi
  .byte  65,255,22                           // callq         *(%r14)
  .byte  73,139,134,136,0,0,0                // mov           0x88(%r14),%rax
  .byte  15,16,32                            // movups        (%rax),%xmm4
  .byte  15,16,64,16                         // movups        0x10(%rax),%xmm0
  .byte  15,16,88,32                         // movups        0x20(%rax),%xmm3
  .byte  15,16,80,48                         // movups        0x30(%rax),%xmm2
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,20,232                           // unpcklps      %xmm0,%xmm5
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  15,21,224                           // unpckhps      %xmm0,%xmm4
  .byte  15,21,218                           // unpckhps      %xmm2,%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,205                           // movhlps       %xmm5,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  15,18,220                           // movhlps       %xmm4,%xmm3
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,250                          // mov           %r15,%rdx
  .byte  72,139,77,208                       // mov           -0x30(%rbp),%rcx
  .byte  73,137,216                          // mov           %rbx,%r8
  .byte  15,40,101,192                       // movaps        -0x40(%rbp),%xmm4
  .byte  15,40,109,176                       // movaps        -0x50(%rbp),%xmm5
  .byte  15,40,117,160                       // movaps        -0x60(%rbp),%xmm6
  .byte  15,40,125,144                       // movaps        -0x70(%rbp),%xmm7
  .byte  72,131,196,72                       // add           $0x48,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

BALIGN16
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%rdi)
  .byte  0,224                               // add           %ah,%al
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  224,64                              // loopne        5328 <.literal16+0x1d8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        532c <.literal16+0x1dc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        5330 <.literal16+0x1e0>
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5351 <.literal16+0x201>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5355 <.literal16+0x205>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5359 <.literal16+0x209>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 535d <.literal16+0x20d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5391 <.literal16+0x241>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5395 <.literal16+0x245>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5399 <.literal16+0x249>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 539d <.literal16+0x24d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 53d1 <.literal16+0x281>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 53d5 <.literal16+0x285>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 53d9 <.literal16+0x289>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 53dd <.literal16+0x28d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5411 <.literal16+0x2c1>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5415 <.literal16+0x2c5>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5419 <.literal16+0x2c9>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 541d <.literal16+0x2cd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,255                          // cmpb          $0xff,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a005408 <_sk_callback_sse41+0xa0003af>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3005410 <_sk_callback_sse41+0x30003b7>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%rax)
  .byte  67,0,0                              // rex.XB        add %al,(%r8)
  .byte  127,67                              // jg            547b <.literal16+0x32b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            547f <.literal16+0x32f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5483 <.literal16+0x333>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  82                                  // push          %rdx
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // rex.WRX
  .byte  65,82                               // push          %r10
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // rex.WRX
  .byte  65,57,215                           // cmp           %edx,%r15d
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%rbx)
  .byte  57,215                              // cmp           %edx,%edi
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%rbx)
  .byte  186,159,98,60,186                   // mov           $0xba3c629f,%edx
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,186                              // cmp           $0xba,%al
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,186                              // cmp           $0xba,%al
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,109                              // cmp           $0x6d,%al
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%rsi)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%rsi)
  .byte  168,177                             // test          $0xb1,%al
  .byte  152                                 // cwtl
  .byte  59,168,177,152,59,168               // cmp           -0x57c4674f(%rax),%ebp
  .byte  177,152                             // mov           $0x98,%cl
  .byte  59,168,177,152,59,0                 // cmp           0x3b98b1(%rax),%ebp
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5659 <.literal16+0x509>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        565d <.literal16+0x50d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5661 <.literal16+0x511>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5665 <.literal16+0x515>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  1,255                               // add           %edi,%edi
  .byte  255                                 // (bad)
  .byte  255,5,255,255,255,9                 // incl          0x9ffffff(%rip)        # a0056a8 <_sk_callback_sse41+0xa00064f>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 30056b0 <_sk_callback_sse41+0x3000657>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,129,128,128,59,129              // incl          -0x7ec47f80(%rcx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,255,0,255,0,255,0    // addl          $0xff00ff,0xff3b80(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,255                               // or            %bh,%bh
  .byte  10,255                              // or            %bh,%bh
  .byte  12,255                              // or            $0xff,%al
  .byte  14                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,128,55,128                  // add           %al,-0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,128,10,128,12,128                 // or            %al,-0x7ff37ff6(%rax)
  .byte  14                                  // (bad)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            577b <.literal16+0x62b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            577f <.literal16+0x62f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5783 <.literal16+0x633>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5774 <.literal16+0x624>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5778 <.literal16+0x628>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            577c <.literal16+0x62c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5780 <.literal16+0x630>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5805 <.literal16+0x6b5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5769 <.literal16+0x619>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a397aa <_sk_callback_sse41+0xffffffffe9a34751>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5844 <.literal16+0x6f4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5848 <.literal16+0x6f8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            584c <.literal16+0x6fc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5850 <.literal16+0x700>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            58d5 <.literal16+0x785>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5839 <.literal16+0x6e9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3987a <_sk_callback_sse41+0xffffffffe9a34821>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5914 <.literal16+0x7c4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5918 <.literal16+0x7c8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            591c <.literal16+0x7cc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5920 <.literal16+0x7d0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            59a5 <.literal16+0x855>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5909 <.literal16+0x7b9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a3994a <_sk_callback_sse41+0xffffffffe9a348f1>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            59e4 <.literal16+0x894>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            59e8 <.literal16+0x898>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            59ec <.literal16+0x89c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            59f0 <.literal16+0x8a0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5a75 <.literal16+0x925>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           59d9 <.literal16+0x889>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a39a1a <_sk_callback_sse41+0xffffffffe9a349c1>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  81                                  // push          %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,200                               // add           %cl,%al
  .byte  66,0,0                              // rex.X         add %al,(%rax)
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  127,67                              // jg            5af7 <.literal16+0x9a7>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5afb <.literal16+0x9ab>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5aff <.literal16+0x9af>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5b03 <.literal16+0x9b3>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,203,61,13                     // or            $0xd3dcb3c,%eax
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,60,203,61                     // cmp           $0x3dcb3c0d,%eax
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  18,3                                // adc           (%rbx),%al
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  163,59,10,215,163,59,10,215,163     // movabs        %eax,0xa3d70a3ba3d70a3b
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,194,24,17       // movabs        %eax,0x1118c23c1118c23b
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,190,203,61                    // cmp           $0x3dcbbe0d,%eax
  .byte  13,190,203,61,13                    // or            $0xd3dcbbe,%eax
  .byte  190,203,61,13,190                   // mov           $0xbe0d3dcb,%esi
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           5b83 <.literal16+0xa33>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           5b87 <.literal16+0xa37>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           5b8b <.literal16+0xa3b>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           5b8f <.literal16+0xa3f>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5bdb <.literal16+0xa8b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5bdf <.literal16+0xa8f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5be3 <.literal16+0xa93>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3005c20 <_sk_callback_sse41+0x3000bc7>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5c59 <.literal16+0xb09>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5c5d <.literal16+0xb0d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5c61 <.literal16+0xb11>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5c65 <.literal16+0xb15>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5cc9 <.literal16+0xb79>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5ccd <.literal16+0xb7d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5cd1 <.literal16+0xb81>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5cd5 <.literal16+0xb85>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,248                               // add           %bh,%al
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            5d66 <.literal16+0xc16>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            5d6a <.literal16+0xc1a>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            5d6e <.literal16+0xc1e>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            5d72 <.literal16+0xc22>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5e75 <.literal16+0xd25>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5e79 <.literal16+0xd29>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5e7d <.literal16+0xd2d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            5e81 <.literal16+0xd31>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3005e70 <_sk_callback_sse41+0x3000e17>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,1,255,255,255            // addb          $0xff,-0xfec5(%rax)
  .byte  5,255,255,255,9                     // add           $0x9ffffff,%eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,13,255,255,255,2                // decl          0x2ffffff(%rip)        # 3005eb0 <_sk_callback_sse41+0x3000e57>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,6                               // incl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,10                              // decl          (%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,14                              // decl          (%rsi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5f0b <.literal16+0xdbb>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5f0f <.literal16+0xdbf>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5f13 <.literal16+0xdc3>
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,4                       // add           %al,0x4000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,128,56                    // add           %al,0x38800000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,56,0                            // cmpb          $0x0,(%rax)
  .byte  0,128,56,0,0,128                    // add           %al,-0x7fffffc8(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            5fdb <.literal16+0xe8b>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            5fdf <.literal16+0xe8f>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            5fe3 <.literal16+0xe93>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            5fe7 <.literal16+0xe97>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,191,0,0,128                   // add           %al,-0x7fffff41(%rax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,0,63,0                  // cmpb          $0x0,0x3f000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  208                                 // (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,152,221,147              // fstl          -0x6c2267c3(%rbx)
  .byte  61,152,221,147,61                   // cmp           $0x3d93dd98,%eax
  .byte  152                                 // cwtl
  .byte  221,147,61,45,16,17                 // fstl          0x11102d3d(%rbx)
  .byte  192,45,16,17,192,45,16              // shrb          $0x10,0x2dc01110(%rip)        # 2dc0711a <_sk_callback_sse41+0x2dc020c1>
  .byte  17,192                              // adc           %eax,%eax
  .byte  45,16,17,192,18                     // sub           $0x12c01110,%eax
  .byte  120,57                              // js            604c <.literal16+0xefc>
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,32,148,90,62,32,148,90           // and           %dl,0x5a94203e(%rdx,%rbx,2)
  .byte  62,32,148,90,62,32,148,90           // and           %dl,%ds:0x5a94203e(%rdx,%rbx,2)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,0,24                             // add           %bl,%ds:(%rax)
  .byte  161,57,0,24,161,57,0,24,161         // movabs        0xa1180039a1180039,%eax
  .byte  57,0                                // cmp           %eax,(%rax)
  .byte  24,161,57,1,0,0                     // sbb           %ah,0x139(%rcx)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,111,43                            // add           %ch,0x2b(%rdi)
  .byte  231,187                             // out           %eax,$0xbb
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  159                                 // lahf
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,212                          // lret          $0xd43c
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,128,62,0,0,128                    // add           %al,-0x7fffffc2(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         6182 <.literal16+0x1032>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6186 <.literal16+0x1036>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         618a <.literal16+0x103a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f015 <_sk_callback_sse41+0x3d639fbc>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f055 <_sk_callback_sse41+0x3d639ffc>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            624e <.literal16+0x10fe>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6252 <.literal16+0x1102>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6256 <.literal16+0x1106>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         625a <.literal16+0x110a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         6292 <.literal16+0x1142>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6296 <.literal16+0x1146>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         629a <.literal16+0x114a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f125 <_sk_callback_sse41+0x3d63a0cc>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f165 <_sk_callback_sse41+0x3d63a10c>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            635e <.literal16+0x120e>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6362 <_sk_callback_sse41+0x1309>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6366 <_sk_callback_sse41+0x130d>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         636a <_sk_callback_sse41+0x1311>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
BALIGN32

HIDDEN _sk_start_pipeline_sse2
.globl _sk_start_pipeline_sse2
FUNCTION(_sk_start_pipeline_sse2)
_sk_start_pipeline_sse2:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  77,137,199                          // mov           %r8,%r15
  .byte  73,137,208                          // mov           %rdx,%r8
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  72,137,251                          // mov           %rdi,%rbx
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  72,141,75,4                         // lea           0x4(%rbx),%rcx
  .byte  76,57,193                           // cmp           %r8,%rcx
  .byte  118,5                               // jbe           30 <_sk_start_pipeline_sse2+0x30>
  .byte  72,137,218                          // mov           %rbx,%rdx
  .byte  235,75                              // jmp           7b <_sk_start_pipeline_sse2+0x7b>
  .byte  76,137,69,208                       // mov           %r8,-0x30(%rbp)
  .byte  65,184,0,0,0,0                      // mov           $0x0,%r8d
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  76,137,255                          // mov           %r15,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,137,218                          // mov           %rbx,%rdx
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  65,255,214                          // callq         *%r14
  .byte  76,139,69,208                       // mov           -0x30(%rbp),%r8
  .byte  76,137,240                          // mov           %r14,%rax
  .byte  72,141,83,4                         // lea           0x4(%rbx),%rdx
  .byte  72,131,195,8                        // add           $0x8,%rbx
  .byte  76,57,195                           // cmp           %r8,%rbx
  .byte  72,137,211                          // mov           %rdx,%rbx
  .byte  118,185                             // jbe           34 <_sk_start_pipeline_sse2+0x34>
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,49                              // je            b1 <_sk_start_pipeline_sse2+0xb1>
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  76,137,255                          // mov           %r15,%rdi
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  195                                 // retq

HIDDEN _sk_just_return_sse2
.globl _sk_just_return_sse2
FUNCTION(_sk_just_return_sse2)
_sk_just_return_sse2:
  .byte  195                                 // retq

HIDDEN _sk_seed_shader_sse2
.globl _sk_seed_shader_sse2
FUNCTION(_sk_seed_shader_sse2)
_sk_seed_shader_sse2:
  .byte  102,15,110,194                      // movd          %edx,%xmm0
  .byte  102,15,112,192,0                    // pshufd        $0x0,%xmm0,%xmm0
  .byte  15,91,200                           // cvtdq2ps      %xmm0,%xmm1
  .byte  15,40,21,220,85,0,0                 // movaps        0x55dc(%rip),%xmm2        # 56b0 <_sk_callback_sse2+0x100>
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  15,16,7                             // movups        (%rdi),%xmm0
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  102,15,110,201                      // movd          %ecx,%xmm1
  .byte  102,15,112,201,0                    // pshufd        $0x0,%xmm1,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,21,203,85,0,0                 // movaps        0x55cb(%rip),%xmm2        # 56c0 <_sk_callback_sse2+0x110>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dither_sse2
.globl _sk_dither_sse2
FUNCTION(_sk_dither_sse2)
_sk_dither_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,68,15,110,194                   // movd          %edx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  243,68,15,111,79,32                 // movdqu        0x20(%rdi),%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  102,68,15,110,193                   // movd          %ecx,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,68,15,111,21,153,85,0,0         // movdqa        0x5599(%rip),%xmm10        # 56d0 <_sk_callback_sse2+0x120>
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,219,218                   // pand          %xmm10,%xmm11
  .byte  102,65,15,114,243,5                 // pslld         $0x5,%xmm11
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,65,15,114,242,4                 // pslld         $0x4,%xmm10
  .byte  102,68,15,111,37,133,85,0,0         // movdqa        0x5585(%rip),%xmm12        # 56e0 <_sk_callback_sse2+0x130>
  .byte  102,68,15,111,45,140,85,0,0         // movdqa        0x558c(%rip),%xmm13        # 56f0 <_sk_callback_sse2+0x140>
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,69,15,219,245                   // pand          %xmm13,%xmm14
  .byte  102,65,15,114,246,2                 // pslld         $0x2,%xmm14
  .byte  102,69,15,219,233                   // pand          %xmm9,%xmm13
  .byte  102,69,15,254,237                   // paddd         %xmm13,%xmm13
  .byte  102,69,15,219,196                   // pand          %xmm12,%xmm8
  .byte  102,65,15,114,208,1                 // psrld         $0x1,%xmm8
  .byte  102,69,15,219,204                   // pand          %xmm12,%xmm9
  .byte  102,65,15,114,209,2                 // psrld         $0x2,%xmm9
  .byte  102,69,15,235,234                   // por           %xmm10,%xmm13
  .byte  102,69,15,235,233                   // por           %xmm9,%xmm13
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,235,245                   // por           %xmm13,%xmm14
  .byte  102,69,15,235,240                   // por           %xmm8,%xmm14
  .byte  69,15,91,198                        // cvtdq2ps      %xmm14,%xmm8
  .byte  68,15,89,5,71,85,0,0                // mulps         0x5547(%rip),%xmm8        # 5700 <_sk_callback_sse2+0x150>
  .byte  68,15,88,5,79,85,0,0                // addps         0x554f(%rip),%xmm8        # 5710 <_sk_callback_sse2+0x160>
  .byte  243,68,15,16,16                     // movss         (%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,88,210                        // addps         %xmm2,%xmm10
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  68,15,93,211                        // minps         %xmm3,%xmm10
  .byte  65,15,95,210                        // maxps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_constant_color_sse2
.globl _sk_constant_color_sse2
FUNCTION(_sk_constant_color_sse2)
_sk_constant_color_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_rgba_sse2
.globl _sk_load_rgba_sse2
FUNCTION(_sk_load_rgba_sse2)
_sk_load_rgba_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  15,16,72,16                         // movups        0x10(%rax),%xmm1
  .byte  15,16,80,32                         // movups        0x20(%rax),%xmm2
  .byte  15,16,88,48                         // movups        0x30(%rax),%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_rgba_sse2
.globl _sk_store_rgba_sse2
FUNCTION(_sk_store_rgba_sse2)
_sk_store_rgba_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  15,17,72,16                         // movups        %xmm1,0x10(%rax)
  .byte  15,17,80,32                         // movups        %xmm2,0x20(%rax)
  .byte  15,17,88,48                         // movups        %xmm3,0x30(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_sse2
.globl _sk_clear_sse2
FUNCTION(_sk_clear_sse2)
_sk_clear_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_sse2
.globl _sk_srcatop_sse2
FUNCTION(_sk_srcatop_sse2)
_sk_srcatop_sse2:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  68,15,40,5,169,84,0,0               // movaps        0x54a9(%rip),%xmm8        # 5720 <_sk_callback_sse2+0x170>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_sse2
.globl _sk_dstatop_sse2
FUNCTION(_sk_dstatop_sse2)
_sk_dstatop_sse2:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  68,15,40,13,108,84,0,0              // movaps        0x546c(%rip),%xmm9        # 5730 <_sk_callback_sse2+0x180>
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  65,15,88,208                        // addps         %xmm8,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_sse2
.globl _sk_srcin_sse2
FUNCTION(_sk_srcin_sse2)
_sk_srcin_sse2:
  .byte  15,89,199                           // mulps         %xmm7,%xmm0
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_sse2
.globl _sk_dstin_sse2
FUNCTION(_sk_dstin_sse2)
_sk_dstin_sse2:
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_sse2
.globl _sk_srcout_sse2
FUNCTION(_sk_srcout_sse2)
_sk_srcout_sse2:
  .byte  68,15,40,5,16,84,0,0                // movaps        0x5410(%rip),%xmm8        # 5740 <_sk_callback_sse2+0x190>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_sse2
.globl _sk_dstout_sse2
FUNCTION(_sk_dstout_sse2)
_sk_dstout_sse2:
  .byte  68,15,40,5,0,84,0,0                 // movaps        0x5400(%rip),%xmm8        # 5750 <_sk_callback_sse2+0x1a0>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_sse2
.globl _sk_srcover_sse2
FUNCTION(_sk_srcover_sse2)
_sk_srcover_sse2:
  .byte  68,15,40,5,227,83,0,0               // movaps        0x53e3(%rip),%xmm8        # 5760 <_sk_callback_sse2+0x1b0>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_sse2
.globl _sk_dstover_sse2
FUNCTION(_sk_dstover_sse2)
_sk_dstover_sse2:
  .byte  68,15,40,5,183,83,0,0               // movaps        0x53b7(%rip),%xmm8        # 5770 <_sk_callback_sse2+0x1c0>
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_sse2
.globl _sk_modulate_sse2
FUNCTION(_sk_modulate_sse2)
_sk_modulate_sse2:
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_sse2
.globl _sk_multiply_sse2
FUNCTION(_sk_multiply_sse2)
_sk_multiply_sse2:
  .byte  68,15,40,5,139,83,0,0               // movaps        0x538b(%rip),%xmm8        # 5780 <_sk_callback_sse2+0x1d0>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,221                        // mulps         %xmm5,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,216                        // addps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_plus__sse2
.globl _sk_plus__sse2
FUNCTION(_sk_plus__sse2)
_sk_plus__sse2:
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_sse2
.globl _sk_screen_sse2
FUNCTION(_sk_screen_sse2)
_sk_screen_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,92,193                        // subps         %xmm1,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,88,215                        // addps         %xmm7,%xmm10
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__sse2
.globl _sk_xor__sse2
FUNCTION(_sk_xor__sse2)
_sk_xor__sse2:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  15,40,29,192,82,0,0                 // movaps        0x52c0(%rip),%xmm3        # 5790 <_sk_callback_sse2+0x1e0>
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  65,15,88,210                        // addps         %xmm10,%xmm2
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  15,89,223                           // mulps         %xmm7,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_darken_sse2
.globl _sk_darken_sse2
FUNCTION(_sk_darken_sse2)
_sk_darken_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,95,201                        // maxps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,95,193                        // maxps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,95,209                        // maxps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,43,82,0,0                  // movaps        0x522b(%rip),%xmm2        # 57a0 <_sk_callback_sse2+0x1f0>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lighten_sse2
.globl _sk_lighten_sse2
FUNCTION(_sk_lighten_sse2)
_sk_lighten_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,208,81,0,0                 // movaps        0x51d0(%rip),%xmm2        # 57b0 <_sk_callback_sse2+0x200>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_difference_sse2
.globl _sk_difference_sse2
FUNCTION(_sk_difference_sse2)
_sk_difference_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  68,15,93,201                        // minps         %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,93,193                        // minps         %xmm9,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,93,209                        // minps         %xmm9,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,106,81,0,0                 // movaps        0x516a(%rip),%xmm2        # 57c0 <_sk_callback_sse2+0x210>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_exclusion_sse2
.globl _sk_exclusion_sse2
FUNCTION(_sk_exclusion_sse2)
_sk_exclusion_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,88,198                        // addps         %xmm6,%xmm8
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  68,15,92,194                        // subps         %xmm2,%xmm8
  .byte  15,40,21,42,81,0,0                  // movaps        0x512a(%rip),%xmm2        # 57d0 <_sk_callback_sse2+0x220>
  .byte  15,92,211                           // subps         %xmm3,%xmm2
  .byte  15,89,215                           // mulps         %xmm7,%xmm2
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colorburn_sse2
.globl _sk_colorburn_sse2
FUNCTION(_sk_colorburn_sse2)
_sk_colorburn_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  68,15,40,21,29,81,0,0               // movaps        0x511d(%rip),%xmm10        # 57e0 <_sk_callback_sse2+0x230>
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,92,207                        // subps         %xmm7,%xmm9
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,94,192                        // divps         %xmm8,%xmm0
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,224                        // minps         %xmm0,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,40,224                        // movaps        %xmm8,%xmm12
  .byte  69,15,194,227,0                     // cmpeqps       %xmm11,%xmm12
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,84,196                        // andps         %xmm12,%xmm8
  .byte  69,15,85,229                        // andnps        %xmm13,%xmm12
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  68,15,89,236                        // mulps         %xmm4,%xmm13
  .byte  69,15,86,224                        // orps          %xmm8,%xmm12
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  68,15,194,199,0                     // cmpeqps       %xmm7,%xmm8
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,85,196                        // andnps        %xmm12,%xmm8
  .byte  65,15,86,192                        // orps          %xmm8,%xmm0
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,92,229                        // subps         %xmm5,%xmm12
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  68,15,94,225                        // divps         %xmm1,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,233                        // movaps        %xmm1,%xmm13
  .byte  69,15,194,235,0                     // cmpeqps       %xmm11,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,224                        // addps         %xmm8,%xmm12
  .byte  65,15,84,205                        // andps         %xmm13,%xmm1
  .byte  69,15,85,236                        // andnps        %xmm12,%xmm13
  .byte  68,15,88,197                        // addps         %xmm5,%xmm8
  .byte  68,15,86,233                        // orps          %xmm1,%xmm13
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,88,233                        // addps         %xmm1,%xmm13
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,194,207,0                        // cmpeqps       %xmm7,%xmm1
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  68,15,86,193                        // orps          %xmm1,%xmm8
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,92,206                           // subps         %xmm6,%xmm1
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,94,202                           // divps         %xmm2,%xmm1
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,93,225                        // minps         %xmm1,%xmm12
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  68,15,194,218,0                     // cmpeqps       %xmm2,%xmm11
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  65,15,84,211                        // andps         %xmm11,%xmm2
  .byte  68,15,85,217                        // andnps        %xmm1,%xmm11
  .byte  68,15,88,206                        // addps         %xmm6,%xmm9
  .byte  68,15,86,218                        // orps          %xmm2,%xmm11
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  68,15,88,217                        // addps         %xmm1,%xmm11
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,194,207,0                        // cmpeqps       %xmm7,%xmm1
  .byte  68,15,84,201                        // andps         %xmm1,%xmm9
  .byte  65,15,85,203                        // andnps        %xmm11,%xmm1
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_colordodge_sse2
.globl _sk_colordodge_sse2
FUNCTION(_sk_colordodge_sse2)
_sk_colordodge_sse2:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,40,21,211,79,0,0              // movaps        0x4fd3(%rip),%xmm10        # 57f0 <_sk_callback_sse2+0x240>
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  68,15,92,223                        // subps         %xmm7,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,89,196                        // mulps         %xmm4,%xmm8
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,193                        // subps         %xmm9,%xmm0
  .byte  68,15,94,192                        // divps         %xmm0,%xmm8
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,194,243,0                     // cmpeqps       %xmm3,%xmm14
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  69,15,84,206                        // andps         %xmm14,%xmm9
  .byte  68,15,85,240                        // andnps        %xmm0,%xmm14
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,40,196                        // movaps        %xmm12,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  68,15,92,211                        // subps         %xmm3,%xmm10
  .byte  69,15,86,241                        // orps          %xmm9,%xmm14
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  69,15,88,241                        // addps         %xmm9,%xmm14
  .byte  68,15,40,204                        // movaps        %xmm4,%xmm9
  .byte  69,15,194,200,0                     // cmpeqps       %xmm8,%xmm9
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  69,15,85,206                        // andnps        %xmm14,%xmm9
  .byte  65,15,86,193                        // orps          %xmm9,%xmm0
  .byte  68,15,40,203                        // movaps        %xmm3,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  69,15,94,204                        // divps         %xmm12,%xmm9
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  69,15,93,233                        // minps         %xmm9,%xmm13
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  68,15,194,243,0                     // cmpeqps       %xmm3,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  65,15,84,206                        // andps         %xmm14,%xmm1
  .byte  69,15,85,245                        // andnps        %xmm13,%xmm14
  .byte  69,15,40,204                        // movaps        %xmm12,%xmm9
  .byte  68,15,88,205                        // addps         %xmm5,%xmm9
  .byte  68,15,86,241                        // orps          %xmm1,%xmm14
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  68,15,88,241                        // addps         %xmm1,%xmm14
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  65,15,194,200,0                     // cmpeqps       %xmm8,%xmm1
  .byte  68,15,84,201                        // andps         %xmm1,%xmm9
  .byte  65,15,85,206                        // andnps        %xmm14,%xmm1
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  68,15,89,230                        // mulps         %xmm6,%xmm12
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,92,202                           // subps         %xmm2,%xmm1
  .byte  68,15,94,225                        // divps         %xmm1,%xmm12
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,194,203,0                        // cmpeqps       %xmm3,%xmm1
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  15,84,209                           // andps         %xmm1,%xmm2
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  15,86,202                           // orps          %xmm2,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  68,15,194,198,0                     // cmpeqps       %xmm6,%xmm8
  .byte  68,15,88,222                        // addps         %xmm6,%xmm11
  .byte  69,15,84,216                        // andps         %xmm8,%xmm11
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,195                        // orps          %xmm11,%xmm8
  .byte  68,15,89,215                        // mulps         %xmm7,%xmm10
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hardlight_sse2
.globl _sk_hardlight_sse2
FUNCTION(_sk_hardlight_sse2)
_sk_hardlight_sse2:
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  68,15,40,29,136,78,0,0              // movaps        0x4e88(%rip),%xmm11        # 5800 <_sk_callback_sse2+0x250>
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  68,15,92,215                        // subps         %xmm7,%xmm10
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  69,15,40,203                        // movaps        %xmm11,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,92,192                        // subps         %xmm0,%xmm8
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,40,255                        // movaps        %xmm7,%xmm15
  .byte  68,15,92,253                        // subps         %xmm5,%xmm15
  .byte  69,15,89,248                        // mulps         %xmm8,%xmm15
  .byte  69,15,88,255                        // addps         %xmm15,%xmm15
  .byte  68,15,40,228                        // movaps        %xmm4,%xmm12
  .byte  69,15,92,231                        // subps         %xmm15,%xmm12
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  68,15,194,195,2                     // cmpleps       %xmm3,%xmm8
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,85,196                        // andnps        %xmm12,%xmm8
  .byte  68,15,86,192                        // orps          %xmm0,%xmm8
  .byte  69,15,40,251                        // movaps        %xmm11,%xmm15
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,254                        // mulps         %xmm6,%xmm15
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,92,238                        // subps         %xmm6,%xmm13
  .byte  68,15,89,232                        // mulps         %xmm0,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,92,197                        // subps         %xmm13,%xmm0
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,88,201                        // addps         %xmm9,%xmm9
  .byte  68,15,194,203,2                     // cmpleps       %xmm3,%xmm9
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  65,15,84,201                        // andps         %xmm9,%xmm1
  .byte  68,15,85,200                        // andnps        %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  69,15,88,207                        // addps         %xmm15,%xmm9
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  68,15,40,108,36,232                 // movaps        -0x18(%rsp),%xmm13
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,88,226                        // addps         %xmm10,%xmm12
  .byte  68,15,40,210                        // movaps        %xmm2,%xmm10
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  68,15,194,211,2                     // cmpleps       %xmm3,%xmm10
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,92,194                           // subps         %xmm2,%xmm0
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  68,15,89,240                        // mulps         %xmm0,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  65,15,92,230                        // subps         %xmm14,%xmm4
  .byte  65,15,84,210                        // andps         %xmm10,%xmm2
  .byte  68,15,85,212                        // andnps        %xmm4,%xmm10
  .byte  68,15,86,210                        // orps          %xmm2,%xmm10
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  65,15,40,245                        // movaps        %xmm13,%xmm6
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_overlay_sse2
.globl _sk_overlay_sse2
FUNCTION(_sk_overlay_sse2)
_sk_overlay_sse2:
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  68,15,40,232                        // movaps        %xmm0,%xmm13
  .byte  68,15,40,13,86,77,0,0               // movaps        0x4d56(%rip),%xmm9        # 5810 <_sk_callback_sse2+0x260>
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  68,15,92,215                        // subps         %xmm7,%xmm10
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,89,221                        // mulps         %xmm13,%xmm11
  .byte  68,15,92,203                        // subps         %xmm3,%xmm9
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,89,236                        // mulps         %xmm4,%xmm13
  .byte  68,15,40,247                        // movaps        %xmm7,%xmm14
  .byte  68,15,92,244                        // subps         %xmm4,%xmm14
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,40,219                        // movaps        %xmm3,%xmm11
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,230                        // subps         %xmm14,%xmm12
  .byte  68,15,84,233                        // andps         %xmm1,%xmm13
  .byte  65,15,85,204                        // andnps        %xmm12,%xmm1
  .byte  65,15,86,205                        // orps          %xmm13,%xmm1
  .byte  15,88,193                           // addps         %xmm1,%xmm0
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  69,15,89,224                        // mulps         %xmm8,%xmm12
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  65,15,88,204                        // addps         %xmm12,%xmm1
  .byte  68,15,40,227                        // movaps        %xmm3,%xmm12
  .byte  69,15,92,224                        // subps         %xmm8,%xmm12
  .byte  68,15,89,197                        // mulps         %xmm5,%xmm8
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  68,15,92,237                        // subps         %xmm5,%xmm13
  .byte  68,15,40,245                        // movaps        %xmm5,%xmm14
  .byte  69,15,88,246                        // addps         %xmm14,%xmm14
  .byte  68,15,194,247,2                     // cmpleps       %xmm7,%xmm14
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,84,198                        // andps         %xmm14,%xmm8
  .byte  69,15,85,244                        // andnps        %xmm12,%xmm14
  .byte  69,15,86,240                        // orps          %xmm8,%xmm14
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  69,15,88,194                        // addps         %xmm10,%xmm8
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,92,210                        // subps         %xmm2,%xmm10
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,92,230                        // subps         %xmm6,%xmm12
  .byte  68,15,40,238                        // movaps        %xmm6,%xmm13
  .byte  69,15,88,237                        // addps         %xmm13,%xmm13
  .byte  68,15,194,239,2                     // cmpleps       %xmm7,%xmm13
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,88,228                        // addps         %xmm12,%xmm12
  .byte  69,15,92,220                        // subps         %xmm12,%xmm11
  .byte  65,15,84,213                        // andps         %xmm13,%xmm2
  .byte  69,15,85,235                        // andnps        %xmm11,%xmm13
  .byte  68,15,86,234                        // orps          %xmm2,%xmm13
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  68,15,89,207                        // mulps         %xmm7,%xmm9
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_softlight_sse2
.globl _sk_softlight_sse2
FUNCTION(_sk_softlight_sse2)
_sk_softlight_sse2:
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,40,209                           // movaps        %xmm1,%xmm2
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  68,15,194,231,1                     // cmpltps       %xmm7,%xmm12
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  68,15,94,215                        // divps         %xmm7,%xmm10
  .byte  69,15,84,212                        // andps         %xmm12,%xmm10
  .byte  68,15,40,13,19,76,0,0               // movaps        0x4c13(%rip),%xmm9        # 5820 <_sk_callback_sse2+0x270>
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  69,15,92,250                        // subps         %xmm10,%xmm15
  .byte  69,15,40,218                        // movaps        %xmm10,%xmm11
  .byte  69,15,40,234                        // movaps        %xmm10,%xmm13
  .byte  65,15,82,194                        // rsqrtps       %xmm10,%xmm0
  .byte  15,83,200                           // rcpps         %xmm0,%xmm1
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  68,15,40,53,237,75,0,0              // movaps        0x4bed(%rip),%xmm14        # 5830 <_sk_callback_sse2+0x280>
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  68,15,89,216                        // mulps         %xmm0,%xmm11
  .byte  68,15,40,21,237,75,0,0              // movaps        0x4bed(%rip),%xmm10        # 5840 <_sk_callback_sse2+0x290>
  .byte  69,15,89,234                        // mulps         %xmm10,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,88,228                           // addps         %xmm4,%xmm4
  .byte  15,194,231,2                        // cmpleps       %xmm7,%xmm4
  .byte  68,15,84,236                        // andps         %xmm4,%xmm13
  .byte  15,85,225                           // andnps        %xmm1,%xmm4
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,88,192                           // addps         %xmm0,%xmm0
  .byte  65,15,86,229                        // orps          %xmm13,%xmm4
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  68,15,89,249                        // mulps         %xmm1,%xmm15
  .byte  15,89,207                           // mulps         %xmm7,%xmm1
  .byte  15,89,225                           // mulps         %xmm1,%xmm4
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  68,15,92,219                        // subps         %xmm3,%xmm11
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  15,89,205                           // mulps         %xmm5,%xmm1
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  68,15,92,239                        // subps         %xmm7,%xmm13
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,253                        // mulps         %xmm5,%xmm15
  .byte  15,194,195,2                        // cmpleps       %xmm3,%xmm0
  .byte  68,15,84,248                        // andps         %xmm0,%xmm15
  .byte  15,85,196                           // andnps        %xmm4,%xmm0
  .byte  65,15,86,199                        // orps          %xmm15,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  68,15,94,199                        // divps         %xmm7,%xmm8
  .byte  69,15,84,196                        // andps         %xmm12,%xmm8
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  69,15,92,248                        // subps         %xmm8,%xmm15
  .byte  65,15,82,224                        // rsqrtps       %xmm8,%xmm4
  .byte  15,83,228                           // rcpps         %xmm4,%xmm4
  .byte  65,15,92,224                        // subps         %xmm8,%xmm4
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  15,40,206                           // movaps        %xmm6,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  15,85,204                           // andnps        %xmm4,%xmm1
  .byte  65,15,86,200                        // orps          %xmm8,%xmm1
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,88,192                        // addps         %xmm8,%xmm8
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  68,15,89,252                        // mulps         %xmm4,%xmm15
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,88,251                        // addps         %xmm3,%xmm15
  .byte  68,15,89,254                        // mulps         %xmm6,%xmm15
  .byte  68,15,194,195,2                     // cmpleps       %xmm3,%xmm8
  .byte  69,15,84,248                        // andps         %xmm8,%xmm15
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,199                        // orps          %xmm15,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  68,15,40,124,36,216                 // movaps        -0x28(%rsp),%xmm15
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,94,207                           // divps         %xmm7,%xmm1
  .byte  65,15,84,204                        // andps         %xmm12,%xmm1
  .byte  68,15,92,201                        // subps         %xmm1,%xmm9
  .byte  68,15,88,241                        // addps         %xmm1,%xmm14
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  15,82,209                           // rsqrtps       %xmm1,%xmm2
  .byte  15,83,210                           // rcpps         %xmm2,%xmm2
  .byte  15,92,209                           // subps         %xmm1,%xmm2
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,89,228                           // mulps         %xmm4,%xmm4
  .byte  15,88,225                           // addps         %xmm1,%xmm4
  .byte  68,15,89,244                        // mulps         %xmm4,%xmm14
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  65,15,40,207                        // movaps        %xmm15,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,88,201                           // addps         %xmm1,%xmm1
  .byte  15,194,207,2                        // cmpleps       %xmm7,%xmm1
  .byte  68,15,84,209                        // andps         %xmm1,%xmm10
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  15,40,84,36,232                     // movaps        -0x18(%rsp),%xmm2
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  15,88,210                           // addps         %xmm2,%xmm2
  .byte  65,15,86,202                        // orps          %xmm10,%xmm1
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  15,92,227                           // subps         %xmm3,%xmm4
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,89,231                           // mulps         %xmm7,%xmm4
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  15,88,204                           // addps         %xmm4,%xmm1
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  65,15,88,229                        // addps         %xmm13,%xmm4
  .byte  68,15,88,203                        // addps         %xmm3,%xmm9
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  69,15,40,215                        // movaps        %xmm15,%xmm10
  .byte  15,194,211,2                        // cmpleps       %xmm3,%xmm2
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,209                        // orps          %xmm9,%xmm2
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,89,223                        // mulps         %xmm7,%xmm11
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  65,15,40,242                        // movaps        %xmm10,%xmm6
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hue_sse2
.globl _sk_hue_sse2
FUNCTION(_sk_hue_sse2)
_sk_hue_sse2:
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  68,15,40,5,48,74,0,0                // movaps        0x4a30(%rip),%xmm8        # 5880 <_sk_callback_sse2+0x2d0>
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  68,15,92,217                        // subps         %xmm1,%xmm11
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  15,41,68,36,232                     // movaps        %xmm0,-0x18(%rsp)
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  68,15,41,100,36,216                 // movaps        %xmm12,-0x28(%rsp)
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  68,15,40,237                        // movaps        %xmm5,%xmm13
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  15,41,68,36,200                     // movaps        %xmm0,-0x38(%rsp)
  .byte  15,40,254                           // movaps        %xmm6,%xmm7
  .byte  68,15,95,239                        // maxps         %xmm7,%xmm13
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  68,15,40,245                        // movaps        %xmm5,%xmm14
  .byte  68,15,40,253                        // movaps        %xmm5,%xmm15
  .byte  69,15,95,253                        // maxps         %xmm13,%xmm15
  .byte  68,15,93,231                        // minps         %xmm7,%xmm12
  .byte  69,15,93,244                        // minps         %xmm12,%xmm14
  .byte  69,15,92,254                        // subps         %xmm14,%xmm15
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  68,15,93,226                        // minps         %xmm2,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,93,236                        // minps         %xmm12,%xmm13
  .byte  69,15,40,226                        // movaps        %xmm10,%xmm12
  .byte  68,15,95,226                        // maxps         %xmm2,%xmm12
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,95,244                        // maxps         %xmm12,%xmm14
  .byte  69,15,92,245                        // subps         %xmm13,%xmm14
  .byte  69,15,92,205                        // subps         %xmm13,%xmm9
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  65,15,92,213                        // subps         %xmm13,%xmm2
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  68,15,89,251                        // mulps         %xmm3,%xmm15
  .byte  69,15,89,207                        // mulps         %xmm15,%xmm9
  .byte  69,15,89,215                        // mulps         %xmm15,%xmm10
  .byte  65,15,89,215                        // mulps         %xmm15,%xmm2
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,94,214                        // divps         %xmm14,%xmm10
  .byte  65,15,94,214                        // divps         %xmm14,%xmm2
  .byte  69,15,194,244,4                     // cmpneqps      %xmm12,%xmm14
  .byte  69,15,84,206                        // andps         %xmm14,%xmm9
  .byte  69,15,84,214                        // andps         %xmm14,%xmm10
  .byte  65,15,84,214                        // andps         %xmm14,%xmm2
  .byte  68,15,40,61,61,73,0,0               // movaps        0x493d(%rip),%xmm15        # 5850 <_sk_callback_sse2+0x2a0>
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  15,40,5,66,73,0,0                   // movaps        0x4942(%rip),%xmm0        # 5860 <_sk_callback_sse2+0x2b0>
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  68,15,40,53,68,73,0,0               // movaps        0x4944(%rip),%xmm14        # 5870 <_sk_callback_sse2+0x2c0>
  .byte  68,15,40,239                        // movaps        %xmm7,%xmm13
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,88,238                        // addps         %xmm6,%xmm13
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,89,231                        // mulps         %xmm15,%xmm4
  .byte  65,15,40,242                        // movaps        %xmm10,%xmm6
  .byte  15,89,240                           // mulps         %xmm0,%xmm6
  .byte  15,88,244                           // addps         %xmm4,%xmm6
  .byte  15,40,226                           // movaps        %xmm2,%xmm4
  .byte  65,15,89,230                        // mulps         %xmm14,%xmm4
  .byte  15,88,230                           // addps         %xmm6,%xmm4
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  68,15,92,236                        // subps         %xmm4,%xmm13
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  69,15,88,213                        // addps         %xmm13,%xmm10
  .byte  68,15,88,234                        // addps         %xmm2,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,93,213                        // minps         %xmm13,%xmm2
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  15,93,242                           // minps         %xmm2,%xmm6
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,95,213                        // maxps         %xmm13,%xmm2
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  15,95,226                           // maxps         %xmm2,%xmm4
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  68,15,88,240                        // addps         %xmm0,%xmm14
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,194,214,2                        // cmpleps       %xmm6,%xmm2
  .byte  69,15,40,254                        // movaps        %xmm14,%xmm15
  .byte  68,15,92,254                        // subps         %xmm6,%xmm15
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,92,246                        // subps         %xmm14,%xmm6
  .byte  65,15,89,246                        // mulps         %xmm14,%xmm6
  .byte  65,15,94,247                        // divps         %xmm15,%xmm6
  .byte  65,15,88,246                        // addps         %xmm14,%xmm6
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  15,85,198                           // andnps        %xmm6,%xmm0
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,41,76,36,184                     // movaps        %xmm1,-0x48(%rsp)
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,41,92,36,168                     // movaps        %xmm3,-0x58(%rsp)
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,194,196,1                        // cmpltps       %xmm4,%xmm0
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,201                        // andnps        %xmm9,%xmm1
  .byte  69,15,92,206                        // subps         %xmm14,%xmm9
  .byte  65,15,92,246                        // subps         %xmm14,%xmm6
  .byte  68,15,89,206                        // mulps         %xmm6,%xmm9
  .byte  65,15,92,230                        // subps         %xmm14,%xmm4
  .byte  68,15,94,204                        // divps         %xmm4,%xmm9
  .byte  69,15,88,206                        // addps         %xmm14,%xmm9
  .byte  68,15,84,200                        // andps         %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,94,207                        // divps         %xmm15,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,85,217                           // andnps        %xmm1,%xmm3
  .byte  68,15,84,210                        // andps         %xmm2,%xmm10
  .byte  68,15,86,211                        // orps          %xmm3,%xmm10
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,202                        // andnps        %xmm10,%xmm1
  .byte  69,15,92,214                        // subps         %xmm14,%xmm10
  .byte  68,15,89,214                        // mulps         %xmm6,%xmm10
  .byte  68,15,94,212                        // divps         %xmm4,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  65,15,40,205                        // movaps        %xmm13,%xmm1
  .byte  65,15,92,206                        // subps         %xmm14,%xmm1
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,94,207                        // divps         %xmm15,%xmm1
  .byte  65,15,88,206                        // addps         %xmm14,%xmm1
  .byte  68,15,84,234                        // andps         %xmm2,%xmm13
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,213                        // orps          %xmm13,%xmm2
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  15,89,214                           // mulps         %xmm6,%xmm2
  .byte  15,94,212                           // divps         %xmm4,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  15,84,208                           // andps         %xmm0,%xmm2
  .byte  15,86,209                           // orps          %xmm1,%xmm2
  .byte  69,15,95,204                        // maxps         %xmm12,%xmm9
  .byte  69,15,95,212                        // maxps         %xmm12,%xmm10
  .byte  65,15,95,212                        // maxps         %xmm12,%xmm2
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,76,36,232                     // movaps        -0x18(%rsp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  15,40,76,36,216                     // movaps        -0x28(%rsp),%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  69,15,88,195                        // addps         %xmm11,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,238                           // movaps        %xmm6,%xmm5
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  15,40,124,36,184                    // movaps        -0x48(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_saturation_sse2
.globl _sk_saturation_sse2
FUNCTION(_sk_saturation_sse2)
_sk_saturation_sse2:
  .byte  68,15,40,231                        // movaps        %xmm7,%xmm12
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  68,15,40,215                        // movaps        %xmm7,%xmm10
  .byte  68,15,89,212                        // mulps         %xmm4,%xmm10
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,116,36,184                    // movaps        %xmm6,-0x48(%rsp)
  .byte  68,15,40,207                        // movaps        %xmm7,%xmm9
  .byte  68,15,89,205                        // mulps         %xmm5,%xmm9
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  69,15,40,232                        // movaps        %xmm8,%xmm13
  .byte  68,15,41,108,36,168                 // movaps        %xmm13,-0x58(%rsp)
  .byte  15,40,225                           // movaps        %xmm1,%xmm4
  .byte  15,41,100,36,216                    // movaps        %xmm4,-0x28(%rsp)
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,41,84,36,232                     // movaps        %xmm2,-0x18(%rsp)
  .byte  15,95,218                           // maxps         %xmm2,%xmm3
  .byte  65,15,40,203                        // movaps        %xmm11,%xmm1
  .byte  15,95,203                           // maxps         %xmm3,%xmm1
  .byte  15,40,220                           // movaps        %xmm4,%xmm3
  .byte  15,93,218                           // minps         %xmm2,%xmm3
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  15,92,202                           // subps         %xmm2,%xmm1
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  65,15,40,228                        // movaps        %xmm12,%xmm4
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,93,208                           // minps         %xmm0,%xmm2
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  68,15,93,194                        // minps         %xmm2,%xmm8
  .byte  65,15,40,209                        // movaps        %xmm9,%xmm2
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,95,218                           // maxps         %xmm2,%xmm3
  .byte  65,15,92,216                        // subps         %xmm8,%xmm3
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  69,15,92,208                        // subps         %xmm8,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  68,15,94,211                        // divps         %xmm3,%xmm10
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,94,195                           // divps         %xmm3,%xmm0
  .byte  15,194,218,4                        // cmpneqps      %xmm2,%xmm3
  .byte  68,15,84,211                        // andps         %xmm3,%xmm10
  .byte  68,15,84,203                        // andps         %xmm3,%xmm9
  .byte  15,84,195                           // andps         %xmm3,%xmm0
  .byte  68,15,40,5,214,70,0,0               // movaps        0x46d6(%rip),%xmm8        # 5890 <_sk_callback_sse2+0x2e0>
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,40,13,216,70,0,0                 // movaps        0x46d8(%rip),%xmm1        # 58a0 <_sk_callback_sse2+0x2f0>
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  68,15,40,37,215,70,0,0              // movaps        0x46d7(%rip),%xmm12        # 58b0 <_sk_callback_sse2+0x300>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,235                        // addps         %xmm3,%xmm13
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,40,217                        // movaps        %xmm9,%xmm3
  .byte  15,89,217                           // mulps         %xmm1,%xmm3
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  68,15,89,239                        // mulps         %xmm7,%xmm13
  .byte  68,15,92,234                        // subps         %xmm2,%xmm13
  .byte  69,15,88,213                        // addps         %xmm13,%xmm10
  .byte  69,15,88,205                        // addps         %xmm13,%xmm9
  .byte  68,15,88,232                        // addps         %xmm0,%xmm13
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,93,197                        // minps         %xmm13,%xmm0
  .byte  65,15,40,218                        // movaps        %xmm10,%xmm3
  .byte  15,93,216                           // minps         %xmm0,%xmm3
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,95,197                        // maxps         %xmm13,%xmm0
  .byte  69,15,40,242                        // movaps        %xmm10,%xmm14
  .byte  68,15,95,240                        // maxps         %xmm0,%xmm14
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  68,15,88,225                        // addps         %xmm1,%xmm12
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,194,211,2                        // cmpleps       %xmm3,%xmm2
  .byte  65,15,40,244                        // movaps        %xmm12,%xmm6
  .byte  15,92,243                           // subps         %xmm3,%xmm6
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  68,15,84,210                        // andps         %xmm2,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,89,221                           // mulps         %xmm5,%xmm3
  .byte  68,15,40,5,60,70,0,0                // movaps        0x463c(%rip),%xmm8        # 58c0 <_sk_callback_sse2+0x310>
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  68,15,92,199                        // subps         %xmm7,%xmm8
  .byte  15,88,253                           // addps         %xmm5,%xmm7
  .byte  15,92,251                           // subps         %xmm3,%xmm7
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,194,222,1                     // cmpltps       %xmm14,%xmm3
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,85,194                        // andnps        %xmm10,%xmm0
  .byte  69,15,92,212                        // subps         %xmm12,%xmm10
  .byte  65,15,92,204                        // subps         %xmm12,%xmm1
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,92,244                        // subps         %xmm12,%xmm14
  .byte  69,15,94,214                        // divps         %xmm14,%xmm10
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  68,15,84,211                        // andps         %xmm3,%xmm10
  .byte  68,15,86,208                        // orps          %xmm0,%xmm10
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  68,15,40,250                        // movaps        %xmm2,%xmm15
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  69,15,86,207                        // orps          %xmm15,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,85,193                        // andnps        %xmm9,%xmm0
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  68,15,84,203                        // andps         %xmm3,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  15,94,198                           // divps         %xmm6,%xmm0
  .byte  65,15,88,196                        // addps         %xmm12,%xmm0
  .byte  68,15,84,234                        // andps         %xmm2,%xmm13
  .byte  15,85,208                           // andnps        %xmm0,%xmm2
  .byte  65,15,86,213                        // orps          %xmm13,%xmm2
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,85,194                           // andnps        %xmm2,%xmm0
  .byte  65,15,92,212                        // subps         %xmm12,%xmm2
  .byte  15,89,209                           // mulps         %xmm1,%xmm2
  .byte  65,15,94,214                        // divps         %xmm14,%xmm2
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  15,84,211                           // andps         %xmm3,%xmm2
  .byte  15,86,208                           // orps          %xmm0,%xmm2
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  15,95,208                           // maxps         %xmm0,%xmm2
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,92,36,184                     // movaps        -0x48(%rsp),%xmm3
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  68,15,40,229                        // movaps        %xmm5,%xmm12
  .byte  65,15,92,228                        // subps         %xmm12,%xmm4
  .byte  68,15,89,220                        // mulps         %xmm4,%xmm11
  .byte  68,15,88,216                        // addps         %xmm0,%xmm11
  .byte  69,15,88,218                        // addps         %xmm10,%xmm11
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,89,197                           // mulps         %xmm5,%xmm0
  .byte  15,40,76,36,216                     // movaps        -0x28(%rsp),%xmm1
  .byte  15,89,204                           // mulps         %xmm4,%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  15,89,100,36,232                    // mulps         -0x18(%rsp),%xmm4
  .byte  15,40,68,36,168                     // movaps        -0x58(%rsp),%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,88,196                        // addps         %xmm4,%xmm8
  .byte  68,15,88,194                        // addps         %xmm2,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,227                           // movaps        %xmm3,%xmm4
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  65,15,40,252                        // movaps        %xmm12,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_color_sse2
.globl _sk_color_sse2
FUNCTION(_sk_color_sse2)
_sk_color_sse2:
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,41,100,36,216                 // movaps        %xmm12,-0x28(%rsp)
  .byte  68,15,40,221                        // movaps        %xmm5,%xmm11
  .byte  68,15,41,92,36,232                  // movaps        %xmm11,-0x18(%rsp)
  .byte  15,40,244                           // movaps        %xmm4,%xmm6
  .byte  15,41,84,36,184                     // movaps        %xmm2,-0x48(%rsp)
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  68,15,40,207                        // movaps        %xmm7,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,40,213                        // movaps        %xmm5,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  68,15,40,45,218,68,0,0              // movaps        0x44da(%rip),%xmm13        # 58d0 <_sk_callback_sse2+0x320>
  .byte  68,15,40,198                        // movaps        %xmm6,%xmm8
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,40,53,218,68,0,0              // movaps        0x44da(%rip),%xmm14        # 58e0 <_sk_callback_sse2+0x330>
  .byte  65,15,40,195                        // movaps        %xmm11,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,29,214,68,0,0              // movaps        0x44d6(%rip),%xmm11        # 58f0 <_sk_callback_sse2+0x340>
  .byte  69,15,89,227                        // mulps         %xmm11,%xmm12
  .byte  68,15,88,224                        // addps         %xmm0,%xmm12
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,89,197                        // mulps         %xmm13,%xmm0
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  68,15,88,248                        // addps         %xmm0,%xmm15
  .byte  68,15,40,5,194,68,0,0               // movaps        0x44c2(%rip),%xmm8        # 5900 <_sk_callback_sse2+0x350>
  .byte  65,15,40,224                        // movaps        %xmm8,%xmm4
  .byte  15,92,226                           // subps         %xmm2,%xmm4
  .byte  15,89,252                           // mulps         %xmm4,%xmm7
  .byte  15,89,236                           // mulps         %xmm4,%xmm5
  .byte  15,40,76,36,184                     // movaps        -0x48(%rsp),%xmm1
  .byte  15,89,225                           // mulps         %xmm1,%xmm4
  .byte  15,89,202                           // mulps         %xmm2,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,88,199                        // addps         %xmm15,%xmm0
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  69,15,88,204                        // addps         %xmm12,%xmm9
  .byte  69,15,88,212                        // addps         %xmm12,%xmm10
  .byte  68,15,88,225                        // addps         %xmm1,%xmm12
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,93,196                        // minps         %xmm12,%xmm0
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  15,93,200                           // minps         %xmm0,%xmm1
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,95,196                        // maxps         %xmm12,%xmm0
  .byte  69,15,40,249                        // movaps        %xmm9,%xmm15
  .byte  68,15,95,248                        // maxps         %xmm0,%xmm15
  .byte  69,15,89,233                        // mulps         %xmm9,%xmm13
  .byte  69,15,89,242                        // mulps         %xmm10,%xmm14
  .byte  69,15,88,245                        // addps         %xmm13,%xmm14
  .byte  69,15,89,220                        // mulps         %xmm12,%xmm11
  .byte  69,15,88,222                        // addps         %xmm14,%xmm11
  .byte  69,15,87,237                        // xorps         %xmm13,%xmm13
  .byte  68,15,194,233,2                     // cmpleps       %xmm1,%xmm13
  .byte  69,15,40,243                        // movaps        %xmm11,%xmm14
  .byte  68,15,92,241                        // subps         %xmm1,%xmm14
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,197                        // movaps        %xmm13,%xmm0
  .byte  15,85,193                           // andnps        %xmm1,%xmm0
  .byte  69,15,84,205                        // andps         %xmm13,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  15,41,84,36,200                     // movaps        %xmm2,-0x38(%rsp)
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,92,216                           // subps         %xmm0,%xmm3
  .byte  15,41,92,36,184                     // movaps        %xmm3,-0x48(%rsp)
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,201                        // andnps        %xmm9,%xmm1
  .byte  69,15,92,203                        // subps         %xmm11,%xmm9
  .byte  65,15,92,219                        // subps         %xmm11,%xmm3
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  69,15,92,251                        // subps         %xmm11,%xmm15
  .byte  69,15,94,207                        // divps         %xmm15,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,84,200                        // andps         %xmm0,%xmm9
  .byte  68,15,86,201                        // orps          %xmm1,%xmm9
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  65,15,40,213                        // movaps        %xmm13,%xmm2
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  69,15,84,213                        // andps         %xmm13,%xmm10
  .byte  68,15,86,210                        // orps          %xmm2,%xmm10
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,202                        // andnps        %xmm10,%xmm1
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  69,15,94,215                        // divps         %xmm15,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  68,15,84,208                        // andps         %xmm0,%xmm10
  .byte  68,15,86,209                        // orps          %xmm1,%xmm10
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  65,15,94,206                        // divps         %xmm14,%xmm1
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  69,15,84,229                        // andps         %xmm13,%xmm12
  .byte  68,15,85,233                        // andnps        %xmm1,%xmm13
  .byte  69,15,86,236                        // orps          %xmm12,%xmm13
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,94,239                        // divps         %xmm15,%xmm13
  .byte  69,15,88,235                        // addps         %xmm11,%xmm13
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  68,15,86,233                        // orps          %xmm1,%xmm13
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  68,15,95,208                        // maxps         %xmm0,%xmm10
  .byte  68,15,95,232                        // maxps         %xmm0,%xmm13
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,89,198                           // mulps         %xmm6,%xmm0
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,84,36,232                     // movaps        -0x18(%rsp),%xmm2
  .byte  15,89,194                           // mulps         %xmm2,%xmm0
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  65,15,88,234                        // addps         %xmm10,%xmm5
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,68,36,216                     // movaps        -0x28(%rsp),%xmm0
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  68,15,88,196                        // addps         %xmm4,%xmm8
  .byte  69,15,88,197                        // addps         %xmm13,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,230                           // movaps        %xmm6,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,92,36,184                     // movaps        -0x48(%rsp),%xmm3
  .byte  15,40,124,36,200                    // movaps        -0x38(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminosity_sse2
.globl _sk_luminosity_sse2
FUNCTION(_sk_luminosity_sse2)
_sk_luminosity_sse2:
  .byte  68,15,40,215                        // movaps        %xmm7,%xmm10
  .byte  15,41,116,36,200                    // movaps        %xmm6,-0x38(%rsp)
  .byte  15,40,245                           // movaps        %xmm5,%xmm6
  .byte  15,41,116,36,232                    // movaps        %xmm6,-0x18(%rsp)
  .byte  15,41,100,36,216                    // movaps        %xmm4,-0x28(%rsp)
  .byte  15,40,235                           // movaps        %xmm3,%xmm5
  .byte  15,40,248                           // movaps        %xmm0,%xmm7
  .byte  68,15,40,205                        // movaps        %xmm5,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  15,89,222                           // mulps         %xmm6,%xmm3
  .byte  68,15,40,37,217,66,0,0              // movaps        0x42d9(%rip),%xmm12        # 5910 <_sk_callback_sse2+0x360>
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  69,15,89,196                        // mulps         %xmm12,%xmm8
  .byte  68,15,40,45,217,66,0,0              // movaps        0x42d9(%rip),%xmm13        # 5920 <_sk_callback_sse2+0x370>
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  69,15,88,240                        // addps         %xmm8,%xmm14
  .byte  68,15,40,29,213,66,0,0              // movaps        0x42d5(%rip),%xmm11        # 5930 <_sk_callback_sse2+0x380>
  .byte  68,15,40,5,221,66,0,0               // movaps        0x42dd(%rip),%xmm8        # 5940 <_sk_callback_sse2+0x390>
  .byte  69,15,40,248                        // movaps        %xmm8,%xmm15
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  68,15,92,248                        // subps         %xmm0,%xmm15
  .byte  65,15,89,255                        // mulps         %xmm15,%xmm7
  .byte  65,15,89,207                        // mulps         %xmm15,%xmm1
  .byte  15,41,76,36,184                     // movaps        %xmm1,-0x48(%rsp)
  .byte  68,15,89,250                        // mulps         %xmm2,%xmm15
  .byte  65,15,89,211                        // mulps         %xmm11,%xmm2
  .byte  65,15,88,214                        // addps         %xmm14,%xmm2
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,89,244                        // mulps         %xmm12,%xmm14
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  69,15,89,213                        // mulps         %xmm13,%xmm10
  .byte  69,15,88,214                        // addps         %xmm14,%xmm10
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,40,116,36,200                    // movaps        -0x38(%rsp),%xmm6
  .byte  15,89,230                           // mulps         %xmm6,%xmm4
  .byte  68,15,40,244                        // movaps        %xmm4,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,92,214                        // subps         %xmm14,%xmm2
  .byte  68,15,88,202                        // addps         %xmm2,%xmm9
  .byte  15,88,218                           // addps         %xmm2,%xmm3
  .byte  15,88,212                           // addps         %xmm4,%xmm2
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,93,210                        // minps         %xmm2,%xmm10
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,93,226                        // minps         %xmm10,%xmm4
  .byte  68,15,40,211                        // movaps        %xmm3,%xmm10
  .byte  68,15,95,210                        // maxps         %xmm2,%xmm10
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  69,15,95,242                        // maxps         %xmm10,%xmm14
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,221                        // addps         %xmm13,%xmm11
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  68,15,194,228,2                     // cmpleps       %xmm4,%xmm12
  .byte  69,15,40,211                        // movaps        %xmm11,%xmm10
  .byte  68,15,92,212                        // subps         %xmm4,%xmm10
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,92,227                        // subps         %xmm11,%xmm4
  .byte  65,15,89,227                        // mulps         %xmm11,%xmm4
  .byte  65,15,94,226                        // divps         %xmm10,%xmm4
  .byte  65,15,88,227                        // addps         %xmm11,%xmm4
  .byte  69,15,40,236                        // movaps        %xmm12,%xmm13
  .byte  68,15,85,236                        // andnps        %xmm4,%xmm13
  .byte  69,15,84,204                        // andps         %xmm12,%xmm9
  .byte  69,15,86,205                        // orps          %xmm13,%xmm9
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,41,68,36,168                     // movaps        %xmm0,-0x58(%rsp)
  .byte  15,89,224                           // mulps         %xmm0,%xmm4
  .byte  68,15,92,197                        // subps         %xmm5,%xmm8
  .byte  15,88,232                           // addps         %xmm0,%xmm5
  .byte  15,92,236                           // subps         %xmm4,%xmm5
  .byte  68,15,40,236                        // movaps        %xmm4,%xmm13
  .byte  65,15,194,230,1                     // cmpltps       %xmm14,%xmm4
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,85,193                        // andnps        %xmm9,%xmm0
  .byte  69,15,92,203                        // subps         %xmm11,%xmm9
  .byte  69,15,92,235                        // subps         %xmm11,%xmm13
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  69,15,94,206                        // divps         %xmm14,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  68,15,84,204                        // andps         %xmm4,%xmm9
  .byte  68,15,86,200                        // orps          %xmm0,%xmm9
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,94,194                        // divps         %xmm10,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,40,204                        // movaps        %xmm12,%xmm1
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  65,15,84,220                        // andps         %xmm12,%xmm3
  .byte  15,86,217                           // orps          %xmm1,%xmm3
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,85,195                           // andnps        %xmm3,%xmm0
  .byte  65,15,92,219                        // subps         %xmm11,%xmm3
  .byte  65,15,89,221                        // mulps         %xmm13,%xmm3
  .byte  65,15,94,222                        // divps         %xmm14,%xmm3
  .byte  65,15,88,219                        // addps         %xmm11,%xmm3
  .byte  15,84,220                           // andps         %xmm4,%xmm3
  .byte  15,86,216                           // orps          %xmm0,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  65,15,94,194                        // divps         %xmm10,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,84,212                        // andps         %xmm12,%xmm2
  .byte  68,15,85,224                        // andnps        %xmm0,%xmm12
  .byte  68,15,86,226                        // orps          %xmm2,%xmm12
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  65,15,85,196                        // andnps        %xmm12,%xmm0
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,94,230                        // divps         %xmm14,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  68,15,84,228                        // andps         %xmm4,%xmm12
  .byte  68,15,86,224                        // orps          %xmm0,%xmm12
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  68,15,95,200                        // maxps         %xmm0,%xmm9
  .byte  15,95,216                           // maxps         %xmm0,%xmm3
  .byte  68,15,95,224                        // maxps         %xmm0,%xmm12
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,100,36,216                    // movaps        -0x28(%rsp),%xmm4
  .byte  15,89,196                           // mulps         %xmm4,%xmm0
  .byte  15,88,248                           // addps         %xmm0,%xmm7
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  68,15,40,84,36,232                  // movaps        -0x18(%rsp),%xmm10
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  15,40,76,36,184                     // movaps        -0x48(%rsp),%xmm1
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,88,203                           // addps         %xmm3,%xmm1
  .byte  68,15,89,198                        // mulps         %xmm6,%xmm8
  .byte  69,15,88,199                        // addps         %xmm15,%xmm8
  .byte  69,15,88,196                        // addps         %xmm12,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,199                           // movaps        %xmm7,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,40,221                           // movaps        %xmm5,%xmm3
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  15,40,124,36,168                    // movaps        -0x58(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_rgba_8888_sse2
.globl _sk_srcover_rgba_8888_sse2
FUNCTION(_sk_srcover_rgba_8888_sse2)
_sk_srcover_rgba_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,227,0,0,0                    // jne           193b <_sk_srcover_rgba_8888_sse2+0xf1>
  .byte  243,68,15,111,4,144                 // movdqu        (%rax,%rdx,4),%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  102,15,111,53,231,64,0,0            // movdqa        0x40e7(%rip),%xmm6        # 5950 <_sk_callback_sse2+0x3a0>
  .byte  102,65,15,111,224                   // movdqa        %xmm8,%xmm4
  .byte  102,15,219,230                      // pand          %xmm6,%xmm4
  .byte  15,91,228                           // cvtdq2ps      %xmm4,%xmm4
  .byte  102,65,15,111,232                   // movdqa        %xmm8,%xmm5
  .byte  102,15,114,213,8                    // psrld         $0x8,%xmm5
  .byte  102,15,219,238                      // pand          %xmm6,%xmm5
  .byte  15,91,237                           // cvtdq2ps      %xmm5,%xmm5
  .byte  102,65,15,111,248                   // movdqa        %xmm8,%xmm7
  .byte  102,15,114,215,16                   // psrld         $0x10,%xmm7
  .byte  102,15,219,254                      // pand          %xmm6,%xmm7
  .byte  15,91,247                           // cvtdq2ps      %xmm7,%xmm6
  .byte  102,65,15,114,208,24                // psrld         $0x18,%xmm8
  .byte  65,15,91,248                        // cvtdq2ps      %xmm8,%xmm7
  .byte  68,15,40,5,183,64,0,0               // movaps        0x40b7(%rip),%xmm8        # 5960 <_sk_callback_sse2+0x3b0>
  .byte  68,15,92,195                        // subps         %xmm3,%xmm8
  .byte  68,15,40,37,187,64,0,0              // movaps        0x40bb(%rip),%xmm12        # 5970 <_sk_callback_sse2+0x3c0>
  .byte  65,15,89,196                        // mulps         %xmm12,%xmm0
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  68,15,89,204                        // mulps         %xmm4,%xmm9
  .byte  68,15,88,200                        // addps         %xmm0,%xmm9
  .byte  65,15,89,204                        // mulps         %xmm12,%xmm1
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  68,15,89,213                        // mulps         %xmm5,%xmm10
  .byte  68,15,88,209                        // addps         %xmm1,%xmm10
  .byte  65,15,89,212                        // mulps         %xmm12,%xmm2
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  68,15,89,222                        // mulps         %xmm6,%xmm11
  .byte  68,15,88,218                        // addps         %xmm2,%xmm11
  .byte  65,15,89,220                        // mulps         %xmm12,%xmm3
  .byte  68,15,89,199                        // mulps         %xmm7,%xmm8
  .byte  68,15,88,195                        // addps         %xmm3,%xmm8
  .byte  102,65,15,91,193                    // cvtps2dq      %xmm9,%xmm0
  .byte  102,65,15,91,202                    // cvtps2dq      %xmm10,%xmm1
  .byte  102,15,114,241,8                    // pslld         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,65,15,91,211                    // cvtps2dq      %xmm11,%xmm2
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,65,15,91,192                    // cvtps2dq      %xmm8,%xmm0
  .byte  102,15,114,240,24                   // pslld         $0x18,%xmm0
  .byte  102,15,235,194                      // por           %xmm2,%xmm0
  .byte  102,15,235,193                      // por           %xmm1,%xmm0
  .byte  117,106                             // jne           198c <_sk_srcover_rgba_8888_sse2+0x142>
  .byte  243,15,127,4,144                    // movdqu        %xmm0,(%rax,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,40,211                        // movaps        %xmm11,%xmm2
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,48                              // je            197d <_sk_srcover_rgba_8888_sse2+0x133>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,22                              // je            1969 <_sk_srcover_rgba_8888_sse2+0x11f>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  15,133,1,255,255,255                // jne           185e <_sk_srcover_rgba_8888_sse2+0x14>
  .byte  102,15,110,100,144,8                // movd          0x8(%rax,%rdx,4),%xmm4
  .byte  102,68,15,112,196,69                // pshufd        $0x45,%xmm4,%xmm8
  .byte  243,15,16,100,144,4                 // movss         0x4(%rax,%rdx,4),%xmm4
  .byte  65,15,198,224,0                     // shufps        $0x0,%xmm8,%xmm4
  .byte  65,15,198,224,226                   // shufps        $0xe2,%xmm8,%xmm4
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  243,15,16,36,144                    // movss         (%rax,%rdx,4),%xmm4
  .byte  243,68,15,16,196                    // movss         %xmm4,%xmm8
  .byte  233,210,254,255,255                 // jmpq          185e <_sk_srcover_rgba_8888_sse2+0x14>
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,34                              // je            19bb <_sk_srcover_rgba_8888_sse2+0x171>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,17                              // je            19b0 <_sk_srcover_rgba_8888_sse2+0x166>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,130                             // jne           1927 <_sk_srcover_rgba_8888_sse2+0xdd>
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,15,126,76,144,8                 // movd          %xmm1,0x8(%rax,%rdx,4)
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,15,126,76,144,4                 // movd          %xmm1,0x4(%rax,%rdx,4)
  .byte  102,15,126,4,144                    // movd          %xmm0,(%rax,%rdx,4)
  .byte  233,98,255,255,255                  // jmpq          1927 <_sk_srcover_rgba_8888_sse2+0xdd>

HIDDEN _sk_clamp_0_sse2
.globl _sk_clamp_0_sse2
FUNCTION(_sk_clamp_0_sse2)
_sk_clamp_0_sse2:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  65,15,95,192                        // maxps         %xmm8,%xmm0
  .byte  65,15,95,200                        // maxps         %xmm8,%xmm1
  .byte  65,15,95,208                        // maxps         %xmm8,%xmm2
  .byte  65,15,95,216                        // maxps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_1_sse2
.globl _sk_clamp_1_sse2
FUNCTION(_sk_clamp_1_sse2)
_sk_clamp_1_sse2:
  .byte  68,15,40,5,155,63,0,0               // movaps        0x3f9b(%rip),%xmm8        # 5980 <_sk_callback_sse2+0x3d0>
  .byte  65,15,93,192                        // minps         %xmm8,%xmm0
  .byte  65,15,93,200                        // minps         %xmm8,%xmm1
  .byte  65,15,93,208                        // minps         %xmm8,%xmm2
  .byte  65,15,93,216                        // minps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_a_sse2
.globl _sk_clamp_a_sse2
FUNCTION(_sk_clamp_a_sse2)
_sk_clamp_a_sse2:
  .byte  15,93,29,144,63,0,0                 // minps         0x3f90(%rip),%xmm3        # 5990 <_sk_callback_sse2+0x3e0>
  .byte  15,93,195                           // minps         %xmm3,%xmm0
  .byte  15,93,203                           // minps         %xmm3,%xmm1
  .byte  15,93,211                           // minps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_sse2
.globl _sk_set_rgb_sse2
FUNCTION(_sk_set_rgb_sse2)
_sk_set_rgb_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_rb_sse2
.globl _sk_swap_rb_sse2
FUNCTION(_sk_swap_rb_sse2)
_sk_swap_rb_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_sse2
.globl _sk_swap_sse2
FUNCTION(_sk_swap_sse2)
_sk_swap_sse2:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,40,248                        // movaps        %xmm8,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_sse2
.globl _sk_move_src_dst_sse2
FUNCTION(_sk_move_src_dst_sse2)
_sk_move_src_dst_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_sse2
.globl _sk_move_dst_src_sse2
FUNCTION(_sk_move_dst_src_sse2)
_sk_move_dst_src_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_sse2
.globl _sk_premul_sse2
FUNCTION(_sk_premul_sse2)
_sk_premul_sse2:
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,89,203                           // mulps         %xmm3,%xmm1
  .byte  15,89,211                           // mulps         %xmm3,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_unpremul_sse2
.globl _sk_unpremul_sse2
FUNCTION(_sk_unpremul_sse2)
_sk_unpremul_sse2:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,40,13,251,62,0,0              // movaps        0x3efb(%rip),%xmm9        # 59a0 <_sk_callback_sse2+0x3f0>
  .byte  68,15,94,203                        // divps         %xmm3,%xmm9
  .byte  68,15,194,195,4                     // cmpneqps      %xmm3,%xmm8
  .byte  69,15,84,193                        // andps         %xmm9,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_from_srgb_sse2
.globl _sk_from_srgb_sse2
FUNCTION(_sk_from_srgb_sse2)
_sk_from_srgb_sse2:
  .byte  68,15,40,5,230,62,0,0               // movaps        0x3ee6(%rip),%xmm8        # 59b0 <_sk_callback_sse2+0x400>
  .byte  68,15,40,232                        // movaps        %xmm0,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  69,15,89,219                        // mulps         %xmm11,%xmm11
  .byte  68,15,40,13,222,62,0,0              // movaps        0x3ede(%rip),%xmm9        # 59c0 <_sk_callback_sse2+0x410>
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  69,15,89,241                        // mulps         %xmm9,%xmm14
  .byte  68,15,40,21,222,62,0,0              // movaps        0x3ede(%rip),%xmm10        # 59d0 <_sk_callback_sse2+0x420>
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  69,15,89,243                        // mulps         %xmm11,%xmm14
  .byte  68,15,40,29,222,62,0,0              // movaps        0x3ede(%rip),%xmm11        # 59e0 <_sk_callback_sse2+0x430>
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  68,15,40,37,226,62,0,0              // movaps        0x3ee2(%rip),%xmm12        # 59f0 <_sk_callback_sse2+0x440>
  .byte  65,15,194,196,1                     // cmpltps       %xmm12,%xmm0
  .byte  68,15,84,232                        // andps         %xmm0,%xmm13
  .byte  65,15,85,198                        // andnps        %xmm14,%xmm0
  .byte  65,15,86,197                        // orps          %xmm13,%xmm0
  .byte  68,15,40,233                        // movaps        %xmm1,%xmm13
  .byte  69,15,89,232                        // mulps         %xmm8,%xmm13
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,246                        // mulps         %xmm14,%xmm14
  .byte  68,15,40,249                        // movaps        %xmm1,%xmm15
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  69,15,88,250                        // addps         %xmm10,%xmm15
  .byte  69,15,89,254                        // mulps         %xmm14,%xmm15
  .byte  69,15,88,251                        // addps         %xmm11,%xmm15
  .byte  65,15,194,204,1                     // cmpltps       %xmm12,%xmm1
  .byte  68,15,84,233                        // andps         %xmm1,%xmm13
  .byte  65,15,85,207                        // andnps        %xmm15,%xmm1
  .byte  65,15,86,205                        // orps          %xmm13,%xmm1
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  68,15,40,234                        // movaps        %xmm2,%xmm13
  .byte  69,15,89,237                        // mulps         %xmm13,%xmm13
  .byte  68,15,89,202                        // mulps         %xmm2,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  65,15,194,212,1                     // cmpltps       %xmm12,%xmm2
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,209                        // andnps        %xmm9,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_to_srgb_sse2
.globl _sk_to_srgb_sse2
FUNCTION(_sk_to_srgb_sse2)
_sk_to_srgb_sse2:
  .byte  68,15,82,232                        // rsqrtps       %xmm0,%xmm13
  .byte  68,15,40,5,111,62,0,0               // movaps        0x3e6f(%rip),%xmm8        # 5a00 <_sk_callback_sse2+0x450>
  .byte  68,15,40,240                        // movaps        %xmm0,%xmm14
  .byte  69,15,89,240                        // mulps         %xmm8,%xmm14
  .byte  68,15,40,13,111,62,0,0              // movaps        0x3e6f(%rip),%xmm9        # 5a10 <_sk_callback_sse2+0x460>
  .byte  69,15,40,253                        // movaps        %xmm13,%xmm15
  .byte  69,15,89,249                        // mulps         %xmm9,%xmm15
  .byte  68,15,40,21,111,62,0,0              // movaps        0x3e6f(%rip),%xmm10        # 5a20 <_sk_callback_sse2+0x470>
  .byte  69,15,88,250                        // addps         %xmm10,%xmm15
  .byte  69,15,89,253                        // mulps         %xmm13,%xmm15
  .byte  68,15,40,29,111,62,0,0              // movaps        0x3e6f(%rip),%xmm11        # 5a30 <_sk_callback_sse2+0x480>
  .byte  69,15,88,251                        // addps         %xmm11,%xmm15
  .byte  68,15,40,37,115,62,0,0              // movaps        0x3e73(%rip),%xmm12        # 5a40 <_sk_callback_sse2+0x490>
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  69,15,83,237                        // rcpps         %xmm13,%xmm13
  .byte  69,15,89,239                        // mulps         %xmm15,%xmm13
  .byte  68,15,40,61,111,62,0,0              // movaps        0x3e6f(%rip),%xmm15        # 5a50 <_sk_callback_sse2+0x4a0>
  .byte  65,15,194,199,1                     // cmpltps       %xmm15,%xmm0
  .byte  68,15,84,240                        // andps         %xmm0,%xmm14
  .byte  65,15,85,197                        // andnps        %xmm13,%xmm0
  .byte  65,15,86,198                        // orps          %xmm14,%xmm0
  .byte  68,15,82,233                        // rsqrtps       %xmm1,%xmm13
  .byte  69,15,40,245                        // movaps        %xmm13,%xmm14
  .byte  69,15,89,241                        // mulps         %xmm9,%xmm14
  .byte  69,15,88,242                        // addps         %xmm10,%xmm14
  .byte  69,15,89,245                        // mulps         %xmm13,%xmm14
  .byte  69,15,88,243                        // addps         %xmm11,%xmm14
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  69,15,83,237                        // rcpps         %xmm13,%xmm13
  .byte  69,15,89,238                        // mulps         %xmm14,%xmm13
  .byte  68,15,40,241                        // movaps        %xmm1,%xmm14
  .byte  69,15,89,240                        // mulps         %xmm8,%xmm14
  .byte  65,15,194,207,1                     // cmpltps       %xmm15,%xmm1
  .byte  68,15,84,241                        // andps         %xmm1,%xmm14
  .byte  65,15,85,205                        // andnps        %xmm13,%xmm1
  .byte  65,15,86,206                        // orps          %xmm14,%xmm1
  .byte  68,15,82,234                        // rsqrtps       %xmm2,%xmm13
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,205                        // mulps         %xmm13,%xmm9
  .byte  69,15,88,203                        // addps         %xmm11,%xmm9
  .byte  69,15,88,236                        // addps         %xmm12,%xmm13
  .byte  69,15,83,213                        // rcpps         %xmm13,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,194,215,1                     // cmpltps       %xmm15,%xmm2
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,210                        // andnps        %xmm10,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_rgb_to_hsl_sse2
.globl _sk_rgb_to_hsl_sse2
FUNCTION(_sk_rgb_to_hsl_sse2)
_sk_rgb_to_hsl_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,40,208                        // movaps        %xmm8,%xmm10
  .byte  69,15,95,209                        // maxps         %xmm9,%xmm10
  .byte  68,15,95,210                        // maxps         %xmm2,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,93,217                        // minps         %xmm9,%xmm11
  .byte  68,15,93,218                        // minps         %xmm2,%xmm11
  .byte  65,15,40,202                        // movaps        %xmm10,%xmm1
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  68,15,40,45,200,61,0,0              // movaps        0x3dc8(%rip),%xmm13        # 5a60 <_sk_callback_sse2+0x4b0>
  .byte  68,15,94,233                        // divps         %xmm1,%xmm13
  .byte  65,15,40,194                        // movaps        %xmm10,%xmm0
  .byte  65,15,194,192,0                     // cmpeqps       %xmm8,%xmm0
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  68,15,92,226                        // subps         %xmm2,%xmm12
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,40,241                        // movaps        %xmm9,%xmm14
  .byte  68,15,194,242,1                     // cmpltps       %xmm2,%xmm14
  .byte  68,15,84,53,174,61,0,0              // andps         0x3dae(%rip),%xmm14        # 5a70 <_sk_callback_sse2+0x4c0>
  .byte  69,15,88,244                        // addps         %xmm12,%xmm14
  .byte  69,15,40,250                        // movaps        %xmm10,%xmm15
  .byte  69,15,194,249,0                     // cmpeqps       %xmm9,%xmm15
  .byte  65,15,92,208                        // subps         %xmm8,%xmm2
  .byte  65,15,89,213                        // mulps         %xmm13,%xmm2
  .byte  68,15,40,37,161,61,0,0              // movaps        0x3da1(%rip),%xmm12        # 5a80 <_sk_callback_sse2+0x4d0>
  .byte  65,15,88,212                        // addps         %xmm12,%xmm2
  .byte  69,15,92,193                        // subps         %xmm9,%xmm8
  .byte  69,15,89,197                        // mulps         %xmm13,%xmm8
  .byte  68,15,88,5,157,61,0,0               // addps         0x3d9d(%rip),%xmm8        # 5a90 <_sk_callback_sse2+0x4e0>
  .byte  65,15,84,215                        // andps         %xmm15,%xmm2
  .byte  69,15,85,248                        // andnps        %xmm8,%xmm15
  .byte  68,15,86,250                        // orps          %xmm2,%xmm15
  .byte  68,15,84,240                        // andps         %xmm0,%xmm14
  .byte  65,15,85,199                        // andnps        %xmm15,%xmm0
  .byte  65,15,86,198                        // orps          %xmm14,%xmm0
  .byte  15,89,5,142,61,0,0                  // mulps         0x3d8e(%rip),%xmm0        # 5aa0 <_sk_callback_sse2+0x4f0>
  .byte  69,15,40,194                        // movaps        %xmm10,%xmm8
  .byte  69,15,194,195,4                     // cmpneqps      %xmm11,%xmm8
  .byte  65,15,84,192                        // andps         %xmm8,%xmm0
  .byte  69,15,92,226                        // subps         %xmm10,%xmm12
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  68,15,40,13,129,61,0,0              // movaps        0x3d81(%rip),%xmm9        # 5ab0 <_sk_callback_sse2+0x500>
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  68,15,194,202,1                     // cmpltps       %xmm2,%xmm9
  .byte  69,15,92,227                        // subps         %xmm11,%xmm12
  .byte  69,15,84,225                        // andps         %xmm9,%xmm12
  .byte  69,15,85,202                        // andnps        %xmm10,%xmm9
  .byte  69,15,86,204                        // orps          %xmm12,%xmm9
  .byte  65,15,94,201                        // divps         %xmm9,%xmm1
  .byte  65,15,84,200                        // andps         %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_hsl_to_rgb_sse2
.globl _sk_hsl_to_rgb_sse2
FUNCTION(_sk_hsl_to_rgb_sse2)
_sk_hsl_to_rgb_sse2:
  .byte  15,41,124,36,232                    // movaps        %xmm7,-0x18(%rsp)
  .byte  15,41,116,36,216                    // movaps        %xmm6,-0x28(%rsp)
  .byte  15,41,108,36,200                    // movaps        %xmm5,-0x38(%rsp)
  .byte  15,41,100,36,184                    // movaps        %xmm4,-0x48(%rsp)
  .byte  15,41,92,36,168                     // movaps        %xmm3,-0x58(%rsp)
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  15,40,240                           // movaps        %xmm0,%xmm6
  .byte  68,15,40,13,64,61,0,0               // movaps        0x3d40(%rip),%xmm9        # 5ac0 <_sk_callback_sse2+0x510>
  .byte  69,15,40,209                        // movaps        %xmm9,%xmm10
  .byte  69,15,194,211,2                     // cmpleps       %xmm11,%xmm10
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,194,217,0                        // cmpeqps       %xmm1,%xmm3
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  15,41,124,36,136                    // movaps        %xmm7,-0x78(%rsp)
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  65,15,84,194                        // andps         %xmm10,%xmm0
  .byte  68,15,85,209                        // andnps        %xmm1,%xmm10
  .byte  68,15,86,208                        // orps          %xmm0,%xmm10
  .byte  68,15,41,92,36,152                  // movaps        %xmm11,-0x68(%rsp)
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,88,219                        // addps         %xmm11,%xmm11
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  15,40,5,9,61,0,0                    // movaps        0x3d09(%rip),%xmm0        # 5ad0 <_sk_callback_sse2+0x520>
  .byte  15,88,198                           // addps         %xmm6,%xmm0
  .byte  243,15,91,200                       // cvttps2dq     %xmm0,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  15,194,217,1                        // cmpltps       %xmm1,%xmm3
  .byte  15,84,29,1,61,0,0                   // andps         0x3d01(%rip),%xmm3        # 5ae0 <_sk_callback_sse2+0x530>
  .byte  15,92,203                           // subps         %xmm3,%xmm1
  .byte  15,92,193                           // subps         %xmm1,%xmm0
  .byte  68,15,40,45,3,61,0,0                // movaps        0x3d03(%rip),%xmm13        # 5af0 <_sk_callback_sse2+0x540>
  .byte  69,15,40,197                        // movaps        %xmm13,%xmm8
  .byte  68,15,194,192,2                     // cmpleps       %xmm0,%xmm8
  .byte  69,15,40,242                        // movaps        %xmm10,%xmm14
  .byte  69,15,92,243                        // subps         %xmm11,%xmm14
  .byte  65,15,40,217                        // movaps        %xmm9,%xmm3
  .byte  15,194,216,2                        // cmpleps       %xmm0,%xmm3
  .byte  15,40,21,19,61,0,0                  // movaps        0x3d13(%rip),%xmm2        # 5b20 <_sk_callback_sse2+0x570>
  .byte  68,15,40,250                        // movaps        %xmm2,%xmm15
  .byte  68,15,194,248,2                     // cmpleps       %xmm0,%xmm15
  .byte  15,40,13,227,60,0,0                 // movaps        0x3ce3(%rip),%xmm1        # 5b00 <_sk_callback_sse2+0x550>
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  15,40,45,233,60,0,0                 // movaps        0x3ce9(%rip),%xmm5        # 5b10 <_sk_callback_sse2+0x560>
  .byte  15,40,229                           // movaps        %xmm5,%xmm4
  .byte  15,92,224                           // subps         %xmm0,%xmm4
  .byte  65,15,89,230                        // mulps         %xmm14,%xmm4
  .byte  65,15,88,227                        // addps         %xmm11,%xmm4
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,84,224                        // andps         %xmm8,%xmm12
  .byte  68,15,85,196                        // andnps        %xmm4,%xmm8
  .byte  69,15,86,196                        // orps          %xmm12,%xmm8
  .byte  68,15,84,195                        // andps         %xmm3,%xmm8
  .byte  65,15,85,218                        // andnps        %xmm10,%xmm3
  .byte  65,15,86,216                        // orps          %xmm8,%xmm3
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,84,223                        // andps         %xmm15,%xmm3
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,86,251                        // orps          %xmm3,%xmm15
  .byte  68,15,40,199                        // movaps        %xmm7,%xmm8
  .byte  69,15,85,199                        // andnps        %xmm15,%xmm8
  .byte  243,15,91,198                       // cvttps2dq     %xmm6,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,194,216,1                        // cmpltps       %xmm0,%xmm3
  .byte  15,84,29,94,60,0,0                  // andps         0x3c5e(%rip),%xmm3        # 5ae0 <_sk_callback_sse2+0x530>
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  68,15,40,230                        // movaps        %xmm6,%xmm12
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  69,15,40,253                        // movaps        %xmm13,%xmm15
  .byte  69,15,194,252,2                     // cmpleps       %xmm12,%xmm15
  .byte  65,15,40,225                        // movaps        %xmm9,%xmm4
  .byte  65,15,194,228,2                     // cmpleps       %xmm12,%xmm4
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  65,15,194,220,2                     // cmpleps       %xmm12,%xmm3
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  65,15,92,196                        // subps         %xmm12,%xmm0
  .byte  65,15,89,198                        // mulps         %xmm14,%xmm0
  .byte  65,15,88,195                        // addps         %xmm11,%xmm0
  .byte  65,15,40,251                        // movaps        %xmm11,%xmm7
  .byte  65,15,84,255                        // andps         %xmm15,%xmm7
  .byte  68,15,85,248                        // andnps        %xmm0,%xmm15
  .byte  68,15,86,255                        // orps          %xmm7,%xmm15
  .byte  68,15,84,252                        // andps         %xmm4,%xmm15
  .byte  65,15,85,226                        // andnps        %xmm10,%xmm4
  .byte  65,15,86,231                        // orps          %xmm15,%xmm4
  .byte  69,15,89,230                        // mulps         %xmm14,%xmm12
  .byte  69,15,88,227                        // addps         %xmm11,%xmm12
  .byte  15,84,227                           // andps         %xmm3,%xmm4
  .byte  65,15,85,220                        // andnps        %xmm12,%xmm3
  .byte  15,86,220                           // orps          %xmm4,%xmm3
  .byte  15,40,124,36,136                    // movaps        -0x78(%rsp),%xmm7
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  15,85,227                           // andnps        %xmm3,%xmm4
  .byte  15,88,53,54,60,0,0                  // addps         0x3c36(%rip),%xmm6        # 5b30 <_sk_callback_sse2+0x580>
  .byte  243,15,91,198                       // cvttps2dq     %xmm6,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,40,222                           // movaps        %xmm6,%xmm3
  .byte  15,194,216,1                        // cmpltps       %xmm0,%xmm3
  .byte  15,84,29,209,59,0,0                 // andps         0x3bd1(%rip),%xmm3        # 5ae0 <_sk_callback_sse2+0x530>
  .byte  15,92,195                           // subps         %xmm3,%xmm0
  .byte  15,92,240                           // subps         %xmm0,%xmm6
  .byte  15,89,206                           // mulps         %xmm6,%xmm1
  .byte  15,92,233                           // subps         %xmm1,%xmm5
  .byte  65,15,89,238                        // mulps         %xmm14,%xmm5
  .byte  65,15,89,206                        // mulps         %xmm14,%xmm1
  .byte  65,15,88,235                        // addps         %xmm11,%xmm5
  .byte  65,15,88,203                        // addps         %xmm11,%xmm1
  .byte  68,15,194,238,2                     // cmpleps       %xmm6,%xmm13
  .byte  69,15,84,221                        // andps         %xmm13,%xmm11
  .byte  68,15,85,237                        // andnps        %xmm5,%xmm13
  .byte  69,15,86,235                        // orps          %xmm11,%xmm13
  .byte  68,15,194,206,2                     // cmpleps       %xmm6,%xmm9
  .byte  69,15,84,233                        // andps         %xmm9,%xmm13
  .byte  69,15,85,202                        // andnps        %xmm10,%xmm9
  .byte  69,15,86,205                        // orps          %xmm13,%xmm9
  .byte  15,194,214,2                        // cmpleps       %xmm6,%xmm2
  .byte  68,15,84,202                        // andps         %xmm2,%xmm9
  .byte  15,85,209                           // andnps        %xmm1,%xmm2
  .byte  65,15,86,209                        // orps          %xmm9,%xmm2
  .byte  15,40,68,36,152                     // movaps        -0x68(%rsp),%xmm0
  .byte  15,40,207                           // movaps        %xmm7,%xmm1
  .byte  15,84,193                           // andps         %xmm1,%xmm0
  .byte  15,85,202                           // andnps        %xmm2,%xmm1
  .byte  68,15,86,192                        // orps          %xmm0,%xmm8
  .byte  15,86,224                           // orps          %xmm0,%xmm4
  .byte  15,86,193                           // orps          %xmm1,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  15,40,92,36,168                     // movaps        -0x58(%rsp),%xmm3
  .byte  15,40,100,36,184                    // movaps        -0x48(%rsp),%xmm4
  .byte  15,40,108,36,200                    // movaps        -0x38(%rsp),%xmm5
  .byte  15,40,116,36,216                    // movaps        -0x28(%rsp),%xmm6
  .byte  15,40,124,36,232                    // movaps        -0x18(%rsp),%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_1_float_sse2
.globl _sk_scale_1_float_sse2
FUNCTION(_sk_scale_1_float_sse2)
_sk_scale_1_float_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_sse2
.globl _sk_scale_u8_sse2
FUNCTION(_sk_scale_u8_sse2)
_sk_scale_u8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,61                              // jne           2002 <_sk_scale_u8_sse2+0x47>
  .byte  102,69,15,110,4,18                  // movd          (%r10,%rdx,1),%xmm8
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  102,68,15,219,5,98,59,0,0           // pand          0x3b62(%rip),%xmm8        # 5b40 <_sk_callback_sse2+0x590>
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,102,59,0,0               // mulps         0x3b66(%rip),%xmm8        # 5b50 <_sk_callback_sse2+0x5a0>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,54                              // je            204a <_sk_scale_u8_sse2+0x8f>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,23                              // je            2031 <_sk_scale_u8_sse2+0x76>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,181                             // jne           1fd5 <_sk_scale_u8_sse2+0x1a>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,69                // pshufd        $0x45,%xmm8,%xmm8
  .byte  65,15,182,68,18,1                   // movzbl        0x1(%r10,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  69,15,198,200,0                     // shufps        $0x0,%xmm8,%xmm9
  .byte  69,15,198,200,226                   // shufps        $0xe2,%xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  243,69,15,16,193                    // movss         %xmm9,%xmm8
  .byte  233,119,255,255,255                 // jmpq          1fd5 <_sk_scale_u8_sse2+0x1a>

HIDDEN _sk_lerp_1_float_sse2
.globl _sk_lerp_1_float_sse2
FUNCTION(_sk_lerp_1_float_sse2)
_sk_lerp_1_float_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_sse2
.globl _sk_lerp_u8_sse2
FUNCTION(_sk_lerp_u8_sse2)
_sk_lerp_u8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,81                              // jne           20f1 <_sk_lerp_u8_sse2+0x5b>
  .byte  102,69,15,110,4,18                  // movd          (%r10,%rdx,1),%xmm8
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  102,68,15,219,5,167,58,0,0          // pand          0x3aa7(%rip),%xmm8        # 5b60 <_sk_callback_sse2+0x5b0>
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,171,58,0,0               // mulps         0x3aab(%rip),%xmm8        # 5b70 <_sk_callback_sse2+0x5c0>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,54                              // je            2139 <_sk_lerp_u8_sse2+0xa3>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,23                              // je            2120 <_sk_lerp_u8_sse2+0x8a>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,161                             // jne           20b0 <_sk_lerp_u8_sse2+0x1a>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,69                // pshufd        $0x45,%xmm8,%xmm8
  .byte  65,15,182,68,18,1                   // movzbl        0x1(%r10,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  69,15,198,200,0                     // shufps        $0x0,%xmm8,%xmm9
  .byte  69,15,198,200,226                   // shufps        $0xe2,%xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,68,15,110,200                   // movd          %eax,%xmm9
  .byte  243,69,15,16,193                    // movss         %xmm9,%xmm8
  .byte  233,99,255,255,255                  // jmpq          20b0 <_sk_lerp_u8_sse2+0x1a>

HIDDEN _sk_lerp_565_sse2
.globl _sk_lerp_565_sse2
FUNCTION(_sk_lerp_565_sse2)
_sk_lerp_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,156,0,0,0                    // jne           21f7 <_sk_lerp_565_sse2+0xaa>
  .byte  243,69,15,126,12,82                 // movq          (%r10,%rdx,2),%xmm9
  .byte  102,68,15,97,200                    // punpcklwd     %xmm0,%xmm9
  .byte  102,68,15,111,5,17,58,0,0           // movdqa        0x3a11(%rip),%xmm8        # 5b80 <_sk_callback_sse2+0x5d0>
  .byte  102,69,15,219,193                   // pand          %xmm9,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,5,16,58,0,0                // mulps         0x3a10(%rip),%xmm8        # 5b90 <_sk_callback_sse2+0x5e0>
  .byte  102,68,15,111,21,23,58,0,0          // movdqa        0x3a17(%rip),%xmm10        # 5ba0 <_sk_callback_sse2+0x5f0>
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  68,15,89,21,22,58,0,0               // mulps         0x3a16(%rip),%xmm10        # 5bb0 <_sk_callback_sse2+0x600>
  .byte  102,68,15,219,13,29,58,0,0          // pand          0x3a1d(%rip),%xmm9        # 5bc0 <_sk_callback_sse2+0x610>
  .byte  69,15,91,201                        // cvtdq2ps      %xmm9,%xmm9
  .byte  68,15,89,13,33,58,0,0               // mulps         0x3a21(%rip),%xmm9        # 5bd0 <_sk_callback_sse2+0x620>
  .byte  15,92,196                           // subps         %xmm4,%xmm0
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,196                           // addps         %xmm4,%xmm0
  .byte  15,92,205                           // subps         %xmm5,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  15,88,205                           // addps         %xmm5,%xmm1
  .byte  15,92,214                           // subps         %xmm6,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,214                           // addps         %xmm6,%xmm2
  .byte  15,92,223                           // subps         %xmm7,%xmm3
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  68,15,88,199                        // addps         %xmm7,%xmm8
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  68,15,88,215                        // addps         %xmm7,%xmm10
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  15,88,223                           // addps         %xmm7,%xmm3
  .byte  68,15,95,211                        // maxps         %xmm3,%xmm10
  .byte  69,15,95,194                        // maxps         %xmm10,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,216                        // movaps        %xmm8,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,58                              // je            2243 <_sk_lerp_565_sse2+0xf6>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,27                              // je            222a <_sk_lerp_565_sse2+0xdd>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  15,133,77,255,255,255               // jne           2166 <_sk_lerp_565_sse2+0x19>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,200,69                // pshufd        $0x45,%xmm8,%xmm9
  .byte  65,15,183,68,82,2                   // movzwl        0x2(%r10,%rdx,2),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  69,15,198,193,0                     // shufps        $0x0,%xmm9,%xmm8
  .byte  69,15,198,193,226                   // shufps        $0xe2,%xmm9,%xmm8
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  243,69,15,16,200                    // movss         %xmm8,%xmm9
  .byte  233,15,255,255,255                  // jmpq          2166 <_sk_lerp_565_sse2+0x19>

HIDDEN _sk_load_tables_sse2
.globl _sk_load_tables_sse2
FUNCTION(_sk_load_tables_sse2)
_sk_load_tables_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,36,1,0,0                     // jne           2389 <_sk_load_tables_sse2+0x132>
  .byte  243,69,15,111,12,145                // movdqu        (%r9,%rdx,4),%xmm9
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,68,15,111,5,103,57,0,0          // movdqa        0x3967(%rip),%xmm8        # 5be0 <_sk_callback_sse2+0x630>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,73,15,126,201                   // movq          %xmm1,%r9
  .byte  102,73,15,126,194                   // movq          %xmm0,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  69,15,182,241                       // movzbl        %r9b,%r14d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,12,19                  // movss         (%rbx,%r10,1),%xmm1
  .byte  243,66,15,16,4,11                   // movss         (%rbx,%r9,1),%xmm0
  .byte  15,20,200                           // unpcklps      %xmm0,%xmm1
  .byte  243,66,15,16,4,155                  // movss         (%rbx,%r11,4),%xmm0
  .byte  243,66,15,16,20,179                 // movss         (%rbx,%r14,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,193                           // unpcklps      %xmm1,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,65,15,219,200                   // pand          %xmm8,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,209                   // movq          %xmm2,%r9
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  68,15,182,211                       // movzbl        %bl,%r10d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  69,15,182,217                       // movzbl        %r9b,%r11d
  .byte  73,193,233,30                       // shr           $0x1e,%r9
  .byte  243,65,15,16,20,31                  // movss         (%r15,%rbx,1),%xmm2
  .byte  243,67,15,16,12,15                  // movss         (%r15,%r9,1),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  243,67,15,16,28,159                 // movss         (%r15,%r11,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,72,24                        // mov           0x18(%rax),%r9
  .byte  102,65,15,111,209                   // movdqa        %xmm9,%xmm2
  .byte  102,15,114,210,16                   // psrld         $0x10,%xmm2
  .byte  102,65,15,219,208                   // pand          %xmm8,%xmm2
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,72,15,126,219                   // movq          %xmm3,%rbx
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  68,15,182,219                       // movzbl        %bl,%r11d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  243,69,15,16,4,1                    // movss         (%r9,%rax,1),%xmm8
  .byte  243,65,15,16,20,25                  // movss         (%r9,%rbx,1),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,67,15,16,20,145                 // movss         (%r9,%r10,4),%xmm2
  .byte  243,67,15,16,28,153                 // movss         (%r9,%r11,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  15,89,29,112,56,0,0                 // mulps         0x3870(%rip),%xmm3        # 5bf0 <_sk_callback_sse2+0x640>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,194                          // mov           %r8d,%r10d
  .byte  65,128,226,3                        // and           $0x3,%r10b
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  65,128,250,1                        // cmp           $0x1,%r10b
  .byte  116,50                              // je            23cd <_sk_load_tables_sse2+0x176>
  .byte  65,128,250,2                        // cmp           $0x2,%r10b
  .byte  116,23                              // je            23b8 <_sk_load_tables_sse2+0x161>
  .byte  65,128,250,3                        // cmp           $0x3,%r10b
  .byte  15,133,192,254,255,255              // jne           226b <_sk_load_tables_sse2+0x14>
  .byte  102,65,15,110,68,145,8              // movd          0x8(%r9,%rdx,4),%xmm0
  .byte  102,68,15,112,200,69                // pshufd        $0x45,%xmm0,%xmm9
  .byte  243,65,15,16,68,145,4               // movss         0x4(%r9,%rdx,4),%xmm0
  .byte  65,15,198,193,0                     // shufps        $0x0,%xmm9,%xmm0
  .byte  65,15,198,193,226                   // shufps        $0xe2,%xmm9,%xmm0
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  243,65,15,16,4,145                  // movss         (%r9,%rdx,4),%xmm0
  .byte  243,68,15,16,200                    // movss         %xmm0,%xmm9
  .byte  233,142,254,255,255                 // jmpq          226b <_sk_load_tables_sse2+0x14>

HIDDEN _sk_load_tables_u16_be_sse2
.globl _sk_load_tables_u16_be_sse2
FUNCTION(_sk_load_tables_u16_be_sse2)
_sk_load_tables_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,149,0,0,0,0               // lea           0x0(,%rdx,4),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,101,1,0,0                    // jne           2558 <_sk_load_tables_u16_be_sse2+0x17b>
  .byte  102,67,15,16,4,81                   // movupd        (%r9,%r10,2),%xmm0
  .byte  102,67,15,16,76,81,16               // movupd        0x10(%r9,%r10,2),%xmm1
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,68,15,40,200                    // movapd        %xmm0,%xmm9
  .byte  102,68,15,97,201                    // punpcklwd     %xmm1,%xmm9
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,68,15,105,200                   // punpckhwd     %xmm0,%xmm9
  .byte  102,68,15,111,21,214,55,0,0         // movdqa        0x37d6(%rip),%xmm10        # 5c00 <_sk_callback_sse2+0x650>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,194                   // pand          %xmm10,%xmm0
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,65,15,97,192                    // punpcklwd     %xmm8,%xmm0
  .byte  102,15,112,216,78                   // pshufd        $0x4e,%xmm0,%xmm3
  .byte  102,73,15,126,217                   // movq          %xmm3,%r9
  .byte  69,15,182,209                       // movzbl        %r9b,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  69,15,182,243                       // movzbl        %r11b,%r14d
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,28,27                  // movss         (%rbx,%r11,1),%xmm3
  .byte  243,66,15,16,4,139                  // movss         (%rbx,%r9,4),%xmm0
  .byte  15,20,216                           // unpcklps      %xmm0,%xmm3
  .byte  243,66,15,16,4,179                  // movss         (%rbx,%r14,4),%xmm0
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,195                           // unpcklps      %xmm3,%xmm0
  .byte  102,15,115,217,8                    // psrldq        $0x8,%xmm1
  .byte  102,65,15,219,202                   // pand          %xmm10,%xmm1
  .byte  102,65,15,97,200                    // punpcklwd     %xmm8,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,73,15,126,202                   // movq          %xmm1,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  243,67,15,16,20,23                  // movss         (%r15,%r10,1),%xmm2
  .byte  243,65,15,16,12,159                 // movss         (%r15,%rbx,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,159                 // movss         (%r15,%r11,4),%xmm1
  .byte  243,67,15,16,28,143                 // movss         (%r15,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  102,69,15,219,209                   // pand          %xmm9,%xmm10
  .byte  102,69,15,97,208                    // punpcklwd     %xmm8,%xmm10
  .byte  102,65,15,112,210,78                // pshufd        $0x4e,%xmm10,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,76,15,126,208                   // movq          %xmm10,%rax
  .byte  68,15,182,216                       // movzbl        %al,%r11d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  243,69,15,16,20,2                   // movss         (%r10,%rax,1),%xmm10
  .byte  243,65,15,16,20,154                 // movss         (%r10,%rbx,4),%xmm2
  .byte  68,15,20,210                        // unpcklps      %xmm2,%xmm10
  .byte  243,67,15,16,20,154                 // movss         (%r10,%r11,4),%xmm2
  .byte  243,67,15,16,28,138                 // movss         (%r10,%r9,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,210                        // unpcklps      %xmm10,%xmm2
  .byte  102,65,15,112,217,78                // pshufd        $0x4e,%xmm9,%xmm3
  .byte  102,68,15,111,203                   // movdqa        %xmm3,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,217                   // por           %xmm9,%xmm3
  .byte  102,65,15,97,216                    // punpcklwd     %xmm8,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,193,54,0,0                 // mulps         0x36c1(%rip),%xmm3        # 5c10 <_sk_callback_sse2+0x660>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  242,67,15,16,4,81                   // movsd         (%r9,%r10,2),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,17                              // jne           2575 <_sk_load_tables_u16_be_sse2+0x198>
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  233,139,254,255,255                 // jmpq          2400 <_sk_load_tables_u16_be_sse2+0x23>
  .byte  102,67,15,22,68,81,8                // movhpd        0x8(%r9,%r10,2),%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,118,254,255,255              // jb            2400 <_sk_load_tables_u16_be_sse2+0x23>
  .byte  242,67,15,16,76,81,16               // movsd         0x10(%r9,%r10,2),%xmm1
  .byte  233,106,254,255,255                 // jmpq          2400 <_sk_load_tables_u16_be_sse2+0x23>

HIDDEN _sk_load_tables_rgb_u16_be_sse2
.globl _sk_load_tables_rgb_u16_be_sse2
FUNCTION(_sk_load_tables_rgb_u16_be_sse2)
_sk_load_tables_rgb_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  76,141,20,82                        // lea           (%rdx,%rdx,2),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,84,1,0,0                     // jne           26fc <_sk_load_tables_rgb_u16_be_sse2+0x166>
  .byte  243,71,15,111,28,81                 // movdqu        (%r9,%r10,2),%xmm11
  .byte  243,67,15,111,76,81,8               // movdqu        0x8(%r9,%r10,2),%xmm1
  .byte  102,15,115,217,4                    // psrldq        $0x4,%xmm1
  .byte  102,69,15,111,211                   // movdqa        %xmm11,%xmm10
  .byte  102,65,15,115,218,6                 // psrldq        $0x6,%xmm10
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  102,68,15,97,217                    // punpcklwd     %xmm1,%xmm11
  .byte  102,68,15,97,208                    // punpcklwd     %xmm0,%xmm10
  .byte  102,65,15,111,195                   // movdqa        %xmm11,%xmm0
  .byte  102,65,15,97,194                    // punpcklwd     %xmm10,%xmm0
  .byte  102,68,15,111,5,48,54,0,0           // movdqa        0x3630(%rip),%xmm8        # 5c20 <_sk_callback_sse2+0x670>
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,65,15,219,192                   // pand          %xmm8,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  102,15,112,216,78                   // pshufd        $0x4e,%xmm0,%xmm3
  .byte  102,73,15,126,217                   // movq          %xmm3,%r9
  .byte  69,15,182,209                       // movzbl        %r9b,%r10d
  .byte  73,193,233,32                       // shr           $0x20,%r9
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  69,15,182,243                       // movzbl        %r11b,%r14d
  .byte  73,193,235,30                       // shr           $0x1e,%r11
  .byte  72,139,88,8                         // mov           0x8(%rax),%rbx
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,66,15,16,28,27                  // movss         (%rbx,%r11,1),%xmm3
  .byte  243,66,15,16,4,139                  // movss         (%rbx,%r9,4),%xmm0
  .byte  15,20,216                           // unpcklps      %xmm0,%xmm3
  .byte  243,66,15,16,4,179                  // movss         (%rbx,%r14,4),%xmm0
  .byte  243,66,15,16,20,147                 // movss         (%rbx,%r10,4),%xmm2
  .byte  15,20,194                           // unpcklps      %xmm2,%xmm0
  .byte  15,20,195                           // unpcklps      %xmm3,%xmm0
  .byte  102,65,15,219,200                   // pand          %xmm8,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,73,15,126,202                   // movq          %xmm1,%r10
  .byte  69,15,182,218                       // movzbl        %r10b,%r11d
  .byte  73,193,234,30                       // shr           $0x1e,%r10
  .byte  243,67,15,16,20,23                  // movss         (%r15,%r10,1),%xmm2
  .byte  243,65,15,16,12,159                 // movss         (%r15,%rbx,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,159                 // movss         (%r15,%r11,4),%xmm1
  .byte  243,67,15,16,28,143                 // movss         (%r15,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,80,24                        // mov           0x18(%rax),%r10
  .byte  102,69,15,105,218                   // punpckhwd     %xmm10,%xmm11
  .byte  102,69,15,219,216                   // pand          %xmm8,%xmm11
  .byte  102,69,15,97,217                    // punpcklwd     %xmm9,%xmm11
  .byte  102,65,15,112,211,78                // pshufd        $0x4e,%xmm11,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,76,15,126,216                   // movq          %xmm11,%rax
  .byte  68,15,182,216                       // movzbl        %al,%r11d
  .byte  72,193,232,30                       // shr           $0x1e,%rax
  .byte  243,69,15,16,4,2                    // movss         (%r10,%rax,1),%xmm8
  .byte  243,65,15,16,20,154                 // movss         (%r10,%rbx,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,67,15,16,20,154                 // movss         (%r10,%r11,4),%xmm2
  .byte  243,67,15,16,28,138                 // movss         (%r10,%r9,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,59,53,0,0                  // movaps        0x353b(%rip),%xmm3        # 5c30 <_sk_callback_sse2+0x680>
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax
  .byte  102,71,15,110,28,81                 // movd          (%r9,%r10,2),%xmm11
  .byte  102,71,15,196,92,81,4,2             // pinsrw        $0x2,0x4(%r9,%r10,2),%xmm11
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,14                              // jne           2722 <_sk_load_tables_rgb_u16_be_sse2+0x18c>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  233,172,254,255,255                 // jmpq          25ce <_sk_load_tables_rgb_u16_be_sse2+0x38>
  .byte  102,71,15,110,84,81,6               // movd          0x6(%r9,%r10,2),%xmm10
  .byte  102,71,15,196,84,81,10,2            // pinsrw        $0x2,0xa(%r9,%r10,2),%xmm10
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,24                              // jb            2753 <_sk_load_tables_rgb_u16_be_sse2+0x1bd>
  .byte  102,67,15,110,76,81,12              // movd          0xc(%r9,%r10,2),%xmm1
  .byte  102,67,15,196,76,81,16,2            // pinsrw        $0x2,0x10(%r9,%r10,2),%xmm1
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,123,254,255,255                 // jmpq          25ce <_sk_load_tables_rgb_u16_be_sse2+0x38>
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,114,254,255,255                 // jmpq          25ce <_sk_load_tables_rgb_u16_be_sse2+0x38>

HIDDEN _sk_byte_tables_sse2
.globl _sk_byte_tables_sse2
FUNCTION(_sk_byte_tables_sse2)
_sk_byte_tables_sse2:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,212,52,0,0               // movaps        0x34d4(%rip),%xmm8        # 5c40 <_sk_callback_sse2+0x690>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,206                          // mov           %r9d,%r14d
  .byte  77,137,207                          // mov           %r9,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  70,15,182,52,51                     // movzbl        (%rbx,%r14,1),%r14d
  .byte  66,15,182,44,59                     // movzbl        (%rbx,%r15,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,245                            // or            %r14d,%ebp
  .byte  70,15,182,20,19                     // movzbl        (%rbx,%r10,1),%r10d
  .byte  66,15,182,28,27                     // movzbl        (%rbx,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  102,15,196,195,0                    // pinsrw        $0x0,%ebx,%xmm0
  .byte  102,15,196,197,1                    // pinsrw        $0x1,%ebp,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,96,193                    // punpcklbw     %xmm9,%xmm0
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,21,110,52,0,0              // movaps        0x346e(%rip),%xmm10        # 5c50 <_sk_callback_sse2+0x6a0>
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,126,205                   // movq          %xmm1,%rbp
  .byte  65,137,234                          // mov           %ebp,%r10d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  102,15,112,201,78                   // pshufd        $0x4e,%xmm1,%xmm1
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,219                          // mov           %ebx,%r11d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,219                            // or            %r11d,%ebx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,44,41                     // movzbl        (%r9,%rbp,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,213                            // or            %r10d,%ebp
  .byte  102,15,196,205,0                    // pinsrw        $0x0,%ebp,%xmm1
  .byte  102,15,196,203,1                    // pinsrw        $0x1,%ebx,%xmm1
  .byte  102,65,15,96,201                    // punpcklbw     %xmm9,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  76,139,80,16                        // mov           0x10(%rax),%r10
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,217                          // mov           %ebx,%r9d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  102,15,112,210,78                   // pshufd        $0x4e,%xmm2,%xmm2
  .byte  102,72,15,126,213                   // movq          %xmm2,%rbp
  .byte  65,137,235                          // mov           %ebp,%r11d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  71,15,182,28,26                     // movzbl        (%r10,%r11,1),%r11d
  .byte  65,15,182,44,42                     // movzbl        (%r10,%rbp,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,221                            // or            %r11d,%ebp
  .byte  71,15,182,12,10                     // movzbl        (%r10,%r9,1),%r9d
  .byte  65,15,182,28,26                     // movzbl        (%r10,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,203                            // or            %r9d,%ebx
  .byte  102,15,196,211,0                    // pinsrw        $0x0,%ebx,%xmm2
  .byte  102,15,196,213,1                    // pinsrw        $0x1,%ebp,%xmm2
  .byte  102,65,15,96,209                    // punpcklbw     %xmm9,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  72,139,64,24                        // mov           0x18(%rax),%rax
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  102,15,91,219                       // cvtps2dq      %xmm3,%xmm3
  .byte  102,72,15,126,221                   // movq          %xmm3,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  102,15,112,219,78                   // pshufd        $0x4e,%xmm3,%xmm3
  .byte  102,72,15,126,219                   // movq          %xmm3,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  70,15,182,20,16                     // movzbl        (%rax,%r10,1),%r10d
  .byte  15,182,28,24                        // movzbl        (%rax,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  70,15,182,12,8                      // movzbl        (%rax,%r9,1),%r9d
  .byte  15,182,4,40                         // movzbl        (%rax,%rbp,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,200                            // or            %r9d,%eax
  .byte  102,15,196,216,0                    // pinsrw        $0x0,%eax,%xmm3
  .byte  102,15,196,219,1                    // pinsrw        $0x1,%ebx,%xmm3
  .byte  102,65,15,96,217                    // punpcklbw     %xmm9,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,218                        // mulps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_byte_tables_rgb_sse2
.globl _sk_byte_tables_rgb_sse2
FUNCTION(_sk_byte_tables_rgb_sse2)
_sk_byte_tables_rgb_sse2:
  .byte  85                                  // push          %rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,139,72,24                        // mov           0x18(%rax),%r9d
  .byte  65,255,201                          // dec           %r9d
  .byte  102,69,15,110,193                   // movd          %r9d,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,91,192                       // cvtps2dq      %xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,202                          // mov           %r9d,%r10d
  .byte  77,137,203                          // mov           %r9,%r11
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,193                   // movq          %xmm0,%r9
  .byte  69,137,206                          // mov           %r9d,%r14d
  .byte  77,137,207                          // mov           %r9,%r15
  .byte  73,193,239,32                       // shr           $0x20,%r15
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  76,139,72,8                         // mov           0x8(%rax),%r9
  .byte  70,15,182,52,51                     // movzbl        (%rbx,%r14,1),%r14d
  .byte  66,15,182,44,59                     // movzbl        (%rbx,%r15,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,245                            // or            %r14d,%ebp
  .byte  70,15,182,20,19                     // movzbl        (%rbx,%r10,1),%r10d
  .byte  66,15,182,28,27                     // movzbl        (%rbx,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  102,15,196,195,0                    // pinsrw        $0x0,%ebx,%xmm0
  .byte  102,15,196,197,1                    // pinsrw        $0x1,%ebp,%xmm0
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,96,193                    // punpcklbw     %xmm9,%xmm0
  .byte  102,65,15,97,193                    // punpcklwd     %xmm9,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,21,182,50,0,0              // movaps        0x32b6(%rip),%xmm10        # 5c60 <_sk_callback_sse2+0x6b0>
  .byte  65,15,89,194                        // mulps         %xmm10,%xmm0
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,15,91,201                       // cvtps2dq      %xmm1,%xmm1
  .byte  102,72,15,126,205                   // movq          %xmm1,%rbp
  .byte  65,137,234                          // mov           %ebp,%r10d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  102,15,112,201,78                   // pshufd        $0x4e,%xmm1,%xmm1
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,219                          // mov           %ebx,%r11d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  71,15,182,28,25                     // movzbl        (%r9,%r11,1),%r11d
  .byte  65,15,182,28,25                     // movzbl        (%r9,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,219                            // or            %r11d,%ebx
  .byte  71,15,182,20,17                     // movzbl        (%r9,%r10,1),%r10d
  .byte  65,15,182,44,41                     // movzbl        (%r9,%rbp,1),%ebp
  .byte  193,229,8                           // shl           $0x8,%ebp
  .byte  68,9,213                            // or            %r10d,%ebp
  .byte  102,15,196,205,0                    // pinsrw        $0x0,%ebp,%xmm1
  .byte  102,15,196,203,1                    // pinsrw        $0x1,%ebx,%xmm1
  .byte  102,65,15,96,201                    // punpcklbw     %xmm9,%xmm1
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,202                        // mulps         %xmm10,%xmm1
  .byte  72,139,64,16                        // mov           0x10(%rax),%rax
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,15,91,210                       // cvtps2dq      %xmm2,%xmm2
  .byte  102,72,15,126,213                   // movq          %xmm2,%rbp
  .byte  65,137,233                          // mov           %ebp,%r9d
  .byte  72,193,237,32                       // shr           $0x20,%rbp
  .byte  102,15,112,210,78                   // pshufd        $0x4e,%xmm2,%xmm2
  .byte  102,72,15,126,211                   // movq          %xmm2,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  70,15,182,20,16                     // movzbl        (%rax,%r10,1),%r10d
  .byte  15,182,28,24                        // movzbl        (%rax,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  68,9,211                            // or            %r10d,%ebx
  .byte  70,15,182,12,8                      // movzbl        (%rax,%r9,1),%r9d
  .byte  15,182,4,40                         // movzbl        (%rax,%rbp,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  68,9,200                            // or            %r9d,%eax
  .byte  102,15,196,208,0                    // pinsrw        $0x0,%eax,%xmm2
  .byte  102,15,196,211,1                    // pinsrw        $0x1,%ebx,%xmm2
  .byte  102,65,15,96,209                    // punpcklbw     %xmm9,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,210                        // mulps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_r_sse2
.globl _sk_table_r_sse2
FUNCTION(_sk_table_r_sse2)
_sk_table_r_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,192,78                // pshufd        $0x4e,%xmm8,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,77,15,126,195                   // movq          %xmm8,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,153                  // movss         (%r9,%r11,4),%xmm8
  .byte  243,65,15,16,4,129                  // movss         (%r9,%rax,4),%xmm0
  .byte  68,15,20,192                        // unpcklps      %xmm0,%xmm8
  .byte  243,65,15,16,4,153                  // movss         (%r9,%rbx,4),%xmm0
  .byte  243,71,15,16,12,145                 // movss         (%r9,%r10,4),%xmm9
  .byte  65,15,20,193                        // unpcklps      %xmm9,%xmm0
  .byte  65,15,20,192                        // unpcklps      %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_g_sse2
.globl _sk_table_g_sse2
FUNCTION(_sk_table_g_sse2)
_sk_table_g_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,200,78                // pshufd        $0x4e,%xmm8,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,77,15,126,195                   // movq          %xmm8,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,153                  // movss         (%r9,%r11,4),%xmm8
  .byte  243,65,15,16,12,129                 // movss         (%r9,%rax,4),%xmm1
  .byte  68,15,20,193                        // unpcklps      %xmm1,%xmm8
  .byte  243,65,15,16,12,153                 // movss         (%r9,%rbx,4),%xmm1
  .byte  243,71,15,16,12,145                 // movss         (%r9,%r10,4),%xmm9
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  65,15,20,200                        // unpcklps      %xmm8,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_b_sse2
.globl _sk_table_b_sse2
FUNCTION(_sk_table_b_sse2)
_sk_table_b_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,208,78                // pshufd        $0x4e,%xmm8,%xmm2
  .byte  102,72,15,126,208                   // movq          %xmm2,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,77,15,126,195                   // movq          %xmm8,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,153                  // movss         (%r9,%r11,4),%xmm8
  .byte  243,65,15,16,20,129                 // movss         (%r9,%rax,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  243,65,15,16,20,153                 // movss         (%r9,%rbx,4),%xmm2
  .byte  243,71,15,16,12,145                 // movss         (%r9,%r10,4),%xmm9
  .byte  65,15,20,209                        // unpcklps      %xmm9,%xmm2
  .byte  65,15,20,208                        // unpcklps      %xmm8,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_table_a_sse2
.globl _sk_table_a_sse2
FUNCTION(_sk_table_a_sse2)
_sk_table_a_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  139,64,8                            // mov           0x8(%rax),%eax
  .byte  255,200                             // dec           %eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  102,69,15,112,192,0                 // pshufd        $0x0,%xmm8,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,112,216,78                // pshufd        $0x4e,%xmm8,%xmm3
  .byte  102,72,15,126,216                   // movq          %xmm3,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,77,15,126,195                   // movq          %xmm8,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,71,15,16,4,153                  // movss         (%r9,%r11,4),%xmm8
  .byte  243,65,15,16,28,129                 // movss         (%r9,%rax,4),%xmm3
  .byte  68,15,20,195                        // unpcklps      %xmm3,%xmm8
  .byte  243,65,15,16,28,153                 // movss         (%r9,%rbx,4),%xmm3
  .byte  243,71,15,16,12,145                 // movss         (%r9,%r10,4),%xmm9
  .byte  65,15,20,217                        // unpcklps      %xmm9,%xmm3
  .byte  65,15,20,216                        // unpcklps      %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_r_sse2
.globl _sk_parametric_r_sse2
FUNCTION(_sk_parametric_r_sse2)
_sk_parametric_r_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  65,15,194,193,2                     // cmpleps       %xmm9,%xmm0
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,234,47,0,0              // mulps         0x2fea(%rip),%xmm9        # 5c70 <_sk_callback_sse2+0x6c0>
  .byte  68,15,84,21,242,47,0,0              // andps         0x2ff2(%rip),%xmm10        # 5c80 <_sk_callback_sse2+0x6d0>
  .byte  68,15,86,21,250,47,0,0              // orps          0x2ffa(%rip),%xmm10        # 5c90 <_sk_callback_sse2+0x6e0>
  .byte  68,15,88,13,2,48,0,0                // addps         0x3002(%rip),%xmm9        # 5ca0 <_sk_callback_sse2+0x6f0>
  .byte  68,15,40,37,10,48,0,0               // movaps        0x300a(%rip),%xmm12        # 5cb0 <_sk_callback_sse2+0x700>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,10,48,0,0               // addps         0x300a(%rip),%xmm10        # 5cc0 <_sk_callback_sse2+0x710>
  .byte  68,15,40,37,18,48,0,0               // movaps        0x3012(%rip),%xmm12        # 5cd0 <_sk_callback_sse2+0x720>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,252,47,0,0              // movaps        0x2ffc(%rip),%xmm10        # 5ce0 <_sk_callback_sse2+0x730>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,240,47,0,0              // addps         0x2ff0(%rip),%xmm9        # 5cf0 <_sk_callback_sse2+0x740>
  .byte  68,15,40,37,248,47,0,0              // movaps        0x2ff8(%rip),%xmm12        # 5d00 <_sk_callback_sse2+0x750>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,248,47,0,0              // movaps        0x2ff8(%rip),%xmm12        # 5d10 <_sk_callback_sse2+0x760>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,252,47,0,0              // movaps        0x2ffc(%rip),%xmm13        # 5d20 <_sk_callback_sse2+0x770>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,252,47,0,0              // mulps         0x2ffc(%rip),%xmm13        # 5d30 <_sk_callback_sse2+0x780>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,192                        // andps         %xmm0,%xmm8
  .byte  65,15,85,196                        // andnps        %xmm12,%xmm0
  .byte  65,15,86,192                        // orps          %xmm8,%xmm0
  .byte  65,15,95,195                        // maxps         %xmm11,%xmm0
  .byte  65,15,93,194                        // minps         %xmm10,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_g_sse2
.globl _sk_parametric_g_sse2
FUNCTION(_sk_parametric_g_sse2)
_sk_parametric_g_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  65,15,194,201,2                     // cmpleps       %xmm9,%xmm1
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,124,47,0,0              // mulps         0x2f7c(%rip),%xmm9        # 5d40 <_sk_callback_sse2+0x790>
  .byte  68,15,84,21,132,47,0,0              // andps         0x2f84(%rip),%xmm10        # 5d50 <_sk_callback_sse2+0x7a0>
  .byte  68,15,86,21,140,47,0,0              // orps          0x2f8c(%rip),%xmm10        # 5d60 <_sk_callback_sse2+0x7b0>
  .byte  68,15,88,13,148,47,0,0              // addps         0x2f94(%rip),%xmm9        # 5d70 <_sk_callback_sse2+0x7c0>
  .byte  68,15,40,37,156,47,0,0              // movaps        0x2f9c(%rip),%xmm12        # 5d80 <_sk_callback_sse2+0x7d0>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,156,47,0,0              // addps         0x2f9c(%rip),%xmm10        # 5d90 <_sk_callback_sse2+0x7e0>
  .byte  68,15,40,37,164,47,0,0              // movaps        0x2fa4(%rip),%xmm12        # 5da0 <_sk_callback_sse2+0x7f0>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,142,47,0,0              // movaps        0x2f8e(%rip),%xmm10        # 5db0 <_sk_callback_sse2+0x800>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,130,47,0,0              // addps         0x2f82(%rip),%xmm9        # 5dc0 <_sk_callback_sse2+0x810>
  .byte  68,15,40,37,138,47,0,0              // movaps        0x2f8a(%rip),%xmm12        # 5dd0 <_sk_callback_sse2+0x820>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,138,47,0,0              // movaps        0x2f8a(%rip),%xmm12        # 5de0 <_sk_callback_sse2+0x830>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,142,47,0,0              // movaps        0x2f8e(%rip),%xmm13        # 5df0 <_sk_callback_sse2+0x840>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,142,47,0,0              // mulps         0x2f8e(%rip),%xmm13        # 5e00 <_sk_callback_sse2+0x850>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,193                        // andps         %xmm1,%xmm8
  .byte  65,15,85,204                        // andnps        %xmm12,%xmm1
  .byte  65,15,86,200                        // orps          %xmm8,%xmm1
  .byte  65,15,95,203                        // maxps         %xmm11,%xmm1
  .byte  65,15,93,202                        // minps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_b_sse2
.globl _sk_parametric_b_sse2
FUNCTION(_sk_parametric_b_sse2)
_sk_parametric_b_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,210                        // mulps         %xmm2,%xmm10
  .byte  65,15,194,209,2                     // cmpleps       %xmm9,%xmm2
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,14,47,0,0               // mulps         0x2f0e(%rip),%xmm9        # 5e10 <_sk_callback_sse2+0x860>
  .byte  68,15,84,21,22,47,0,0               // andps         0x2f16(%rip),%xmm10        # 5e20 <_sk_callback_sse2+0x870>
  .byte  68,15,86,21,30,47,0,0               // orps          0x2f1e(%rip),%xmm10        # 5e30 <_sk_callback_sse2+0x880>
  .byte  68,15,88,13,38,47,0,0               // addps         0x2f26(%rip),%xmm9        # 5e40 <_sk_callback_sse2+0x890>
  .byte  68,15,40,37,46,47,0,0               // movaps        0x2f2e(%rip),%xmm12        # 5e50 <_sk_callback_sse2+0x8a0>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,46,47,0,0               // addps         0x2f2e(%rip),%xmm10        # 5e60 <_sk_callback_sse2+0x8b0>
  .byte  68,15,40,37,54,47,0,0               // movaps        0x2f36(%rip),%xmm12        # 5e70 <_sk_callback_sse2+0x8c0>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,32,47,0,0               // movaps        0x2f20(%rip),%xmm10        # 5e80 <_sk_callback_sse2+0x8d0>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,20,47,0,0               // addps         0x2f14(%rip),%xmm9        # 5e90 <_sk_callback_sse2+0x8e0>
  .byte  68,15,40,37,28,47,0,0               // movaps        0x2f1c(%rip),%xmm12        # 5ea0 <_sk_callback_sse2+0x8f0>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,28,47,0,0               // movaps        0x2f1c(%rip),%xmm12        # 5eb0 <_sk_callback_sse2+0x900>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,32,47,0,0               // movaps        0x2f20(%rip),%xmm13        # 5ec0 <_sk_callback_sse2+0x910>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,32,47,0,0               // mulps         0x2f20(%rip),%xmm13        # 5ed0 <_sk_callback_sse2+0x920>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,194                        // andps         %xmm2,%xmm8
  .byte  65,15,85,212                        // andnps        %xmm12,%xmm2
  .byte  65,15,86,208                        // orps          %xmm8,%xmm2
  .byte  65,15,95,211                        // maxps         %xmm11,%xmm2
  .byte  65,15,93,210                        // minps         %xmm10,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_parametric_a_sse2
.globl _sk_parametric_a_sse2
FUNCTION(_sk_parametric_a_sse2)
_sk_parametric_a_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,72,16                  // movss         0x10(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,64,12                  // movss         0xc(%rax),%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  65,15,194,217,2                     // cmpleps       %xmm9,%xmm3
  .byte  243,68,15,16,72,24                  // movss         0x18(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  243,68,15,16,24                     // movss         (%rax),%xmm11
  .byte  243,68,15,16,72,8                   // movss         0x8(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  69,15,88,209                        // addps         %xmm9,%xmm10
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,91,202                        // cvtdq2ps      %xmm10,%xmm9
  .byte  68,15,89,13,160,46,0,0              // mulps         0x2ea0(%rip),%xmm9        # 5ee0 <_sk_callback_sse2+0x930>
  .byte  68,15,84,21,168,46,0,0              // andps         0x2ea8(%rip),%xmm10        # 5ef0 <_sk_callback_sse2+0x940>
  .byte  68,15,86,21,176,46,0,0              // orps          0x2eb0(%rip),%xmm10        # 5f00 <_sk_callback_sse2+0x950>
  .byte  68,15,88,13,184,46,0,0              // addps         0x2eb8(%rip),%xmm9        # 5f10 <_sk_callback_sse2+0x960>
  .byte  68,15,40,37,192,46,0,0              // movaps        0x2ec0(%rip),%xmm12        # 5f20 <_sk_callback_sse2+0x970>
  .byte  69,15,89,226                        // mulps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,88,21,192,46,0,0              // addps         0x2ec0(%rip),%xmm10        # 5f30 <_sk_callback_sse2+0x980>
  .byte  68,15,40,37,200,46,0,0              // movaps        0x2ec8(%rip),%xmm12        # 5f40 <_sk_callback_sse2+0x990>
  .byte  69,15,94,226                        // divps         %xmm10,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,226                        // cvtdq2ps      %xmm10,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,194,236,1                     // cmpltps       %xmm12,%xmm13
  .byte  68,15,40,21,178,46,0,0              // movaps        0x2eb2(%rip),%xmm10        # 5f50 <_sk_callback_sse2+0x9a0>
  .byte  69,15,84,234                        // andps         %xmm10,%xmm13
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  69,15,40,233                        // movaps        %xmm9,%xmm13
  .byte  69,15,92,236                        // subps         %xmm12,%xmm13
  .byte  68,15,88,13,166,46,0,0              // addps         0x2ea6(%rip),%xmm9        # 5f60 <_sk_callback_sse2+0x9b0>
  .byte  68,15,40,37,174,46,0,0              // movaps        0x2eae(%rip),%xmm12        # 5f70 <_sk_callback_sse2+0x9c0>
  .byte  69,15,89,229                        // mulps         %xmm13,%xmm12
  .byte  69,15,92,204                        // subps         %xmm12,%xmm9
  .byte  68,15,40,37,174,46,0,0              // movaps        0x2eae(%rip),%xmm12        # 5f80 <_sk_callback_sse2+0x9d0>
  .byte  69,15,92,229                        // subps         %xmm13,%xmm12
  .byte  68,15,40,45,178,46,0,0              // movaps        0x2eb2(%rip),%xmm13        # 5f90 <_sk_callback_sse2+0x9e0>
  .byte  69,15,94,236                        // divps         %xmm12,%xmm13
  .byte  69,15,88,233                        // addps         %xmm9,%xmm13
  .byte  68,15,89,45,178,46,0,0              // mulps         0x2eb2(%rip),%xmm13        # 5fa0 <_sk_callback_sse2+0x9f0>
  .byte  102,69,15,91,205                    // cvtps2dq      %xmm13,%xmm9
  .byte  243,68,15,16,96,20                  // movss         0x14(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  69,15,88,225                        // addps         %xmm9,%xmm12
  .byte  68,15,84,195                        // andps         %xmm3,%xmm8
  .byte  65,15,85,220                        // andnps        %xmm12,%xmm3
  .byte  65,15,86,216                        // orps          %xmm8,%xmm3
  .byte  65,15,95,219                        // maxps         %xmm11,%xmm3
  .byte  65,15,93,218                        // minps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lab_to_xyz_sse2
.globl _sk_lab_to_xyz_sse2
FUNCTION(_sk_lab_to_xyz_sse2)
_sk_lab_to_xyz_sse2:
  .byte  15,89,5,143,46,0,0                  // mulps         0x2e8f(%rip),%xmm0        # 5fb0 <_sk_callback_sse2+0xa00>
  .byte  68,15,40,5,151,46,0,0               // movaps        0x2e97(%rip),%xmm8        # 5fc0 <_sk_callback_sse2+0xa10>
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  68,15,40,13,155,46,0,0              // movaps        0x2e9b(%rip),%xmm9        # 5fd0 <_sk_callback_sse2+0xa20>
  .byte  65,15,88,201                        // addps         %xmm9,%xmm1
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  65,15,88,209                        // addps         %xmm9,%xmm2
  .byte  15,88,5,152,46,0,0                  // addps         0x2e98(%rip),%xmm0        # 5fe0 <_sk_callback_sse2+0xa30>
  .byte  15,89,5,161,46,0,0                  // mulps         0x2ea1(%rip),%xmm0        # 5ff0 <_sk_callback_sse2+0xa40>
  .byte  15,89,13,170,46,0,0                 // mulps         0x2eaa(%rip),%xmm1        # 6000 <_sk_callback_sse2+0xa50>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,21,176,46,0,0                 // mulps         0x2eb0(%rip),%xmm2        # 6010 <_sk_callback_sse2+0xa60>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,92,202                        // subps         %xmm2,%xmm9
  .byte  68,15,40,225                        // movaps        %xmm1,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,89,225                        // mulps         %xmm1,%xmm12
  .byte  15,40,21,165,46,0,0                 // movaps        0x2ea5(%rip),%xmm2        # 6020 <_sk_callback_sse2+0xa70>
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  69,15,194,196,1                     // cmpltps       %xmm12,%xmm8
  .byte  68,15,40,21,164,46,0,0              // movaps        0x2ea4(%rip),%xmm10        # 6030 <_sk_callback_sse2+0xa80>
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  68,15,40,29,168,46,0,0              // movaps        0x2ea8(%rip),%xmm11        # 6040 <_sk_callback_sse2+0xa90>
  .byte  65,15,89,203                        // mulps         %xmm11,%xmm1
  .byte  69,15,84,224                        // andps         %xmm8,%xmm12
  .byte  68,15,85,193                        // andnps        %xmm1,%xmm8
  .byte  69,15,86,196                        // orps          %xmm12,%xmm8
  .byte  68,15,40,224                        // movaps        %xmm0,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,89,224                        // mulps         %xmm0,%xmm12
  .byte  15,40,202                           // movaps        %xmm2,%xmm1
  .byte  65,15,194,204,1                     // cmpltps       %xmm12,%xmm1
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  65,15,89,195                        // mulps         %xmm11,%xmm0
  .byte  68,15,84,225                        // andps         %xmm1,%xmm12
  .byte  15,85,200                           // andnps        %xmm0,%xmm1
  .byte  65,15,86,204                        // orps          %xmm12,%xmm1
  .byte  65,15,40,193                        // movaps        %xmm9,%xmm0
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  15,194,208,1                        // cmpltps       %xmm0,%xmm2
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  69,15,89,203                        // mulps         %xmm11,%xmm9
  .byte  15,84,194                           // andps         %xmm2,%xmm0
  .byte  65,15,85,209                        // andnps        %xmm9,%xmm2
  .byte  15,86,208                           // orps          %xmm0,%xmm2
  .byte  68,15,89,5,88,46,0,0                // mulps         0x2e58(%rip),%xmm8        # 6050 <_sk_callback_sse2+0xaa0>
  .byte  15,89,21,97,46,0,0                  // mulps         0x2e61(%rip),%xmm2        # 6060 <_sk_callback_sse2+0xab0>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_a8_sse2
.globl _sk_load_a8_sse2
FUNCTION(_sk_load_a8_sse2)
_sk_load_a8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,45                              // jne           323e <_sk_load_a8_sse2+0x37>
  .byte  102,65,15,110,4,18                  // movd          (%r10,%rdx,1),%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  102,15,219,5,73,46,0,0              // pand          0x2e49(%rip),%xmm0        # 6070 <_sk_callback_sse2+0xac0>
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,79,46,0,0                  // mulps         0x2e4f(%rip),%xmm3        # 6080 <_sk_callback_sse2+0xad0>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,48                              // je            327f <_sk_load_a8_sse2+0x78>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            326a <_sk_load_a8_sse2+0x63>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,196                             // jne           321f <_sk_load_a8_sse2+0x18>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  65,15,182,68,18,1                   // movzbl        0x1(%r10,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  15,198,200,0                        // shufps        $0x0,%xmm0,%xmm1
  .byte  15,198,200,226                      // shufps        $0xe2,%xmm0,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  243,15,16,193                       // movss         %xmm1,%xmm0
  .byte  235,145                             // jmp           321f <_sk_load_a8_sse2+0x18>

HIDDEN _sk_gather_a8_sse2
.globl _sk_gather_a8_sse2
FUNCTION(_sk_gather_a8_sse2)
_sk_gather_a8_sse2:
  .byte  85                                  // push          %rbp
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  65,15,182,44,25                     // movzbl        (%r9,%rbx,1),%ebp
  .byte  67,15,182,28,25                     // movzbl        (%r9,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  9,235                               // or            %ebp,%ebx
  .byte  67,15,182,44,17                     // movzbl        (%r9,%r10,1),%ebp
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,232                               // or            %ebp,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,216                           // cvtdq2ps      %xmm0,%xmm3
  .byte  15,89,29,111,45,0,0                 // mulps         0x2d6f(%rip),%xmm3        # 6090 <_sk_callback_sse2+0xae0>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  91                                  // pop           %rbx
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_a8_sse2
.globl _sk_store_a8_sse2
FUNCTION(_sk_store_a8_sse2)
_sk_store_a8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  68,15,40,5,97,45,0,0                // movaps        0x2d61(%rip),%xmm8        # 60a0 <_sk_callback_sse2+0xaf0>
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,13                              // jne           3370 <_sk_store_a8_sse2+0x3e>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  65,137,4,18                         // mov           %eax,(%r10,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,44                              // je            33b3 <_sk_store_a8_sse2+0x81>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,22                              // je            33a3 <_sk_store_a8_sse2+0x71>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,217                             // jne           336c <_sk_store_a8_sse2+0x3a>
  .byte  102,68,15,127,68,36,232             // movdqa        %xmm8,-0x18(%rsp)
  .byte  138,68,36,240                       // mov           -0x10(%rsp),%al
  .byte  65,136,68,18,2                      // mov           %al,0x2(%r10,%rdx,1)
  .byte  102,68,15,127,68,36,216             // movdqa        %xmm8,-0x28(%rsp)
  .byte  138,68,36,220                       // mov           -0x24(%rsp),%al
  .byte  65,136,68,18,1                      // mov           %al,0x1(%r10,%rdx,1)
  .byte  102,68,15,127,68,36,200             // movdqa        %xmm8,-0x38(%rsp)
  .byte  138,68,36,200                       // mov           -0x38(%rsp),%al
  .byte  65,136,4,18                         // mov           %al,(%r10,%rdx,1)
  .byte  235,168                             // jmp           336c <_sk_store_a8_sse2+0x3a>

HIDDEN _sk_load_g8_sse2
.globl _sk_load_g8_sse2
FUNCTION(_sk_load_g8_sse2)
_sk_load_g8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,49                              // jne           33ff <_sk_load_g8_sse2+0x3b>
  .byte  102,65,15,110,4,18                  // movd          (%r10,%rdx,1),%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  102,15,97,192                       // punpcklwd     %xmm0,%xmm0
  .byte  102,15,219,5,204,44,0,0             // pand          0x2ccc(%rip),%xmm0        # 60b0 <_sk_callback_sse2+0xb00>
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,210,44,0,0                  // mulps         0x2cd2(%rip),%xmm0        # 60c0 <_sk_callback_sse2+0xb10>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,217,44,0,0                 // movaps        0x2cd9(%rip),%xmm3        # 60d0 <_sk_callback_sse2+0xb20>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,48                              // je            3440 <_sk_load_g8_sse2+0x7c>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            342b <_sk_load_g8_sse2+0x67>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,192                             // jne           33dc <_sk_load_g8_sse2+0x18>
  .byte  65,15,182,68,18,2                   // movzbl        0x2(%r10,%rdx,1),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,192,69                   // pshufd        $0x45,%xmm0,%xmm0
  .byte  65,15,182,68,18,1                   // movzbl        0x1(%r10,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  15,198,200,0                        // shufps        $0x0,%xmm0,%xmm1
  .byte  15,198,200,226                      // shufps        $0xe2,%xmm0,%xmm1
  .byte  15,40,193                           // movaps        %xmm1,%xmm0
  .byte  65,15,182,4,18                      // movzbl        (%r10,%rdx,1),%eax
  .byte  102,15,110,200                      // movd          %eax,%xmm1
  .byte  243,15,16,193                       // movss         %xmm1,%xmm0
  .byte  235,141                             // jmp           33dc <_sk_load_g8_sse2+0x18>

HIDDEN _sk_gather_g8_sse2
.globl _sk_gather_g8_sse2
FUNCTION(_sk_gather_g8_sse2)
_sk_gather_g8_sse2:
  .byte  85                                  // push          %rbp
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  65,15,182,44,25                     // movzbl        (%r9,%rbx,1),%ebp
  .byte  67,15,182,28,25                     // movzbl        (%r9,%r11,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  9,235                               // or            %ebp,%ebx
  .byte  67,15,182,44,17                     // movzbl        (%r9,%r10,1),%ebp
  .byte  65,15,182,4,1                       // movzbl        (%r9,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,232                               // or            %ebp,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,254,43,0,0                  // mulps         0x2bfe(%rip),%xmm0        # 60e0 <_sk_callback_sse2+0xb30>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,5,44,0,0                   // movaps        0x2c05(%rip),%xmm3        # 60f0 <_sk_callback_sse2+0xb40>
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  91                                  // pop           %rbx
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gather_i8_sse2
.globl _sk_gather_i8_sse2
FUNCTION(_sk_gather_i8_sse2)
_sk_gather_i8_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,193                          // mov           %rax,%r9
  .byte  77,133,201                          // test          %r9,%r9
  .byte  116,5                               // je            3504 <_sk_gather_i8_sse2+0xf>
  .byte  76,137,200                          // mov           %r9,%rax
  .byte  235,2                               // jmp           3506 <_sk_gather_i8_sse2+0x11>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  85                                  // push          %rbp
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,72,15,126,192                   // movq          %xmm0,%rax
  .byte  65,137,195                          // mov           %eax,%r11d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,15,112,192,78                   // pshufd        $0x4e,%xmm0,%xmm0
  .byte  102,72,15,126,195                   // movq          %xmm0,%rbx
  .byte  65,137,222                          // mov           %ebx,%r14d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  67,15,182,44,50                     // movzbl        (%r10,%r14,1),%ebp
  .byte  65,15,182,28,26                     // movzbl        (%r10,%rbx,1),%ebx
  .byte  193,227,8                           // shl           $0x8,%ebx
  .byte  9,235                               // or            %ebp,%ebx
  .byte  67,15,182,44,26                     // movzbl        (%r10,%r11,1),%ebp
  .byte  65,15,182,4,2                       // movzbl        (%r10,%rax,1),%eax
  .byte  193,224,8                           // shl           $0x8,%eax
  .byte  9,232                               // or            %ebp,%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  102,15,196,195,1                    // pinsrw        $0x1,%ebx,%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  102,15,96,193                       // punpcklbw     %xmm1,%xmm0
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  68,15,182,208                       // movzbl        %al,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,72,15,126,195                   // movq          %xmm0,%rbx
  .byte  73,139,105,8                        // mov           0x8(%r9),%rbp
  .byte  68,15,182,203                       // movzbl        %bl,%r9d
  .byte  72,193,235,30                       // shr           $0x1e,%rbx
  .byte  102,15,110,68,29,0                  // movd          0x0(%rbp,%rbx,1),%xmm0
  .byte  102,15,110,76,133,0                 // movd          0x0(%rbp,%rax,4),%xmm1
  .byte  102,15,98,193                       // punpckldq     %xmm1,%xmm0
  .byte  102,70,15,110,76,141,0              // movd          0x0(%rbp,%r9,4),%xmm9
  .byte  102,66,15,110,76,149,0              // movd          0x0(%rbp,%r10,4),%xmm1
  .byte  102,68,15,98,201                    // punpckldq     %xmm1,%xmm9
  .byte  102,68,15,98,200                    // punpckldq     %xmm0,%xmm9
  .byte  102,15,111,21,30,43,0,0             // movdqa        0x2b1e(%rip),%xmm2        # 6100 <_sk_callback_sse2+0xb50>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,26,43,0,0                // movaps        0x2b1a(%rip),%xmm8        # 6110 <_sk_callback_sse2+0xb60>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,65,15,111,217                   // movdqa        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_565_sse2
.globl _sk_load_565_sse2
FUNCTION(_sk_load_565_sse2)
_sk_load_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,83                              // jne           3697 <_sk_load_565_sse2+0x5d>
  .byte  243,65,15,126,20,82                 // movq          (%r10,%rdx,2),%xmm2
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,111,5,202,42,0,0             // movdqa        0x2aca(%rip),%xmm0        # 6120 <_sk_callback_sse2+0xb70>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,204,42,0,0                  // mulps         0x2acc(%rip),%xmm0        # 6130 <_sk_callback_sse2+0xb80>
  .byte  102,15,111,13,212,42,0,0            // movdqa        0x2ad4(%rip),%xmm1        # 6140 <_sk_callback_sse2+0xb90>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,214,42,0,0                 // mulps         0x2ad6(%rip),%xmm1        # 6150 <_sk_callback_sse2+0xba0>
  .byte  102,15,219,21,222,42,0,0            // pand          0x2ade(%rip),%xmm2        # 6160 <_sk_callback_sse2+0xbb0>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,228,42,0,0                 // mulps         0x2ae4(%rip),%xmm2        # 6170 <_sk_callback_sse2+0xbc0>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,235,42,0,0                 // movaps        0x2aeb(%rip),%xmm3        # 6180 <_sk_callback_sse2+0xbd0>
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,210                      // pxor          %xmm2,%xmm2
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,48                              // je            36d8 <_sk_load_565_sse2+0x9e>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            36c3 <_sk_load_565_sse2+0x89>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,154                             // jne           364e <_sk_load_565_sse2+0x14>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,208,69                   // pshufd        $0x45,%xmm0,%xmm2
  .byte  65,15,183,68,82,2                   // movzwl        0x2(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  15,198,194,0                        // shufps        $0x0,%xmm2,%xmm0
  .byte  15,198,194,226                      // shufps        $0xe2,%xmm2,%xmm0
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  243,15,16,208                       // movss         %xmm0,%xmm2
  .byte  233,100,255,255,255                 // jmpq          364e <_sk_load_565_sse2+0x14>

HIDDEN _sk_gather_565_sse2
.globl _sk_gather_565_sse2
FUNCTION(_sk_gather_565_sse2)
_sk_gather_565_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,196,20,89,0               // pinsrw        $0x0,(%r9,%rbx,2),%xmm2
  .byte  102,67,15,196,20,89,1               // pinsrw        $0x1,(%r9,%r11,2),%xmm2
  .byte  67,15,183,28,81                     // movzwl        (%r9,%r10,2),%ebx
  .byte  102,15,196,211,2                    // pinsrw        $0x2,%ebx,%xmm2
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,208,3                    // pinsrw        $0x3,%eax,%xmm2
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,208                       // punpcklwd     %xmm0,%xmm2
  .byte  102,15,111,5,32,42,0,0              // movdqa        0x2a20(%rip),%xmm0        # 6190 <_sk_callback_sse2+0xbe0>
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,34,42,0,0                   // mulps         0x2a22(%rip),%xmm0        # 61a0 <_sk_callback_sse2+0xbf0>
  .byte  102,15,111,13,42,42,0,0             // movdqa        0x2a2a(%rip),%xmm1        # 61b0 <_sk_callback_sse2+0xc00>
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,44,42,0,0                  // mulps         0x2a2c(%rip),%xmm1        # 61c0 <_sk_callback_sse2+0xc10>
  .byte  102,15,219,21,52,42,0,0             // pand          0x2a34(%rip),%xmm2        # 61d0 <_sk_callback_sse2+0xc20>
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,58,42,0,0                  // mulps         0x2a3a(%rip),%xmm2        # 61e0 <_sk_callback_sse2+0xc30>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,65,42,0,0                  // movaps        0x2a41(%rip),%xmm3        # 61f0 <_sk_callback_sse2+0xc40>
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_565_sse2
.globl _sk_store_565_sse2
FUNCTION(_sk_store_565_sse2)
_sk_store_565_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  68,15,40,5,65,42,0,0                // movaps        0x2a41(%rip),%xmm8        # 6200 <_sk_callback_sse2+0xc50>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,11                // pslld         $0xb,%xmm9
  .byte  68,15,40,21,54,42,0,0               // movaps        0x2a36(%rip),%xmm10        # 6210 <_sk_callback_sse2+0xc60>
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,5                 // pslld         $0x5,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           381c <_sk_store_565_sse2+0x6a>
  .byte  242,69,15,17,4,82                   // movsd         %xmm8,(%r10,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,36                              // je            3852 <_sk_store_565_sse2+0xa0>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,18                              // je            3846 <_sk_store_565_sse2+0x94>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,222                             // jne           3818 <_sk_store_565_sse2+0x66>
  .byte  102,65,15,197,192,4                 // pextrw        $0x4,%xmm8,%eax
  .byte  102,65,137,68,82,4                  // mov           %ax,0x4(%r10,%rdx,2)
  .byte  102,65,15,197,192,2                 // pextrw        $0x2,%xmm8,%eax
  .byte  102,65,137,68,82,2                  // mov           %ax,0x2(%r10,%rdx,2)
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,65,137,4,82                     // mov           %ax,(%r10,%rdx,2)
  .byte  235,186                             // jmp           3818 <_sk_store_565_sse2+0x66>

HIDDEN _sk_load_4444_sse2
.globl _sk_load_4444_sse2
FUNCTION(_sk_load_4444_sse2)
_sk_load_4444_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,98                              // jne           38ca <_sk_load_4444_sse2+0x6c>
  .byte  243,65,15,126,28,82                 // movq          (%r10,%rdx,2),%xmm3
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,111,5,166,41,0,0             // movdqa        0x29a6(%rip),%xmm0        # 6220 <_sk_callback_sse2+0xc70>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,168,41,0,0                  // mulps         0x29a8(%rip),%xmm0        # 6230 <_sk_callback_sse2+0xc80>
  .byte  102,15,111,13,176,41,0,0            // movdqa        0x29b0(%rip),%xmm1        # 6240 <_sk_callback_sse2+0xc90>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,178,41,0,0                 // mulps         0x29b2(%rip),%xmm1        # 6250 <_sk_callback_sse2+0xca0>
  .byte  102,15,111,21,186,41,0,0            // movdqa        0x29ba(%rip),%xmm2        # 6260 <_sk_callback_sse2+0xcb0>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,188,41,0,0                 // mulps         0x29bc(%rip),%xmm2        # 6270 <_sk_callback_sse2+0xcc0>
  .byte  102,15,219,29,196,41,0,0            // pand          0x29c4(%rip),%xmm3        # 6280 <_sk_callback_sse2+0xcd0>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,202,41,0,0                 // mulps         0x29ca(%rip),%xmm3        # 6290 <_sk_callback_sse2+0xce0>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,48                              // je            390b <_sk_load_4444_sse2+0xad>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,21                              // je            38f6 <_sk_load_4444_sse2+0x98>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,139                             // jne           3872 <_sk_load_4444_sse2+0x14>
  .byte  65,15,183,68,82,4                   // movzwl        0x4(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  102,15,112,216,69                   // pshufd        $0x45,%xmm0,%xmm3
  .byte  65,15,183,68,82,2                   // movzwl        0x2(%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  15,198,195,0                        // shufps        $0x0,%xmm3,%xmm0
  .byte  15,198,195,226                      // shufps        $0xe2,%xmm3,%xmm0
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  65,15,183,4,82                      // movzwl        (%r10,%rdx,2),%eax
  .byte  102,15,110,192                      // movd          %eax,%xmm0
  .byte  243,15,16,216                       // movss         %xmm0,%xmm3
  .byte  233,85,255,255,255                  // jmpq          3872 <_sk_load_4444_sse2+0x14>

HIDDEN _sk_gather_4444_sse2
.globl _sk_gather_4444_sse2
FUNCTION(_sk_gather_4444_sse2)
_sk_gather_4444_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,65,15,196,28,89,0               // pinsrw        $0x0,(%r9,%rbx,2),%xmm3
  .byte  102,67,15,196,28,89,1               // pinsrw        $0x1,(%r9,%r11,2),%xmm3
  .byte  67,15,183,28,81                     // movzwl        (%r9,%r10,2),%ebx
  .byte  102,15,196,219,2                    // pinsrw        $0x2,%ebx,%xmm3
  .byte  65,15,183,4,65                      // movzwl        (%r9,%rax,2),%eax
  .byte  102,15,196,216,3                    // pinsrw        $0x3,%eax,%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,97,216                       // punpcklwd     %xmm0,%xmm3
  .byte  102,15,111,5,253,40,0,0             // movdqa        0x28fd(%rip),%xmm0        # 62a0 <_sk_callback_sse2+0xcf0>
  .byte  102,15,219,195                      // pand          %xmm3,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  15,89,5,255,40,0,0                  // mulps         0x28ff(%rip),%xmm0        # 62b0 <_sk_callback_sse2+0xd00>
  .byte  102,15,111,13,7,41,0,0              // movdqa        0x2907(%rip),%xmm1        # 62c0 <_sk_callback_sse2+0xd10>
  .byte  102,15,219,203                      // pand          %xmm3,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  15,89,13,9,41,0,0                   // mulps         0x2909(%rip),%xmm1        # 62d0 <_sk_callback_sse2+0xd20>
  .byte  102,15,111,21,17,41,0,0             // movdqa        0x2911(%rip),%xmm2        # 62e0 <_sk_callback_sse2+0xd30>
  .byte  102,15,219,211                      // pand          %xmm3,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  15,89,21,19,41,0,0                  // mulps         0x2913(%rip),%xmm2        # 62f0 <_sk_callback_sse2+0xd40>
  .byte  102,15,219,29,27,41,0,0             // pand          0x291b(%rip),%xmm3        # 6300 <_sk_callback_sse2+0xd50>
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  15,89,29,33,41,0,0                  // mulps         0x2921(%rip),%xmm3        # 6310 <_sk_callback_sse2+0xd60>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_4444_sse2
.globl _sk_store_4444_sse2
FUNCTION(_sk_store_4444_sse2)
_sk_store_4444_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  68,15,40,5,31,41,0,0                // movaps        0x291f(%rip),%xmm8        # 6320 <_sk_callback_sse2+0xd70>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,12                // pslld         $0xc,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,4                 // pslld         $0x4,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,69,15,86,193                    // orpd          %xmm9,%xmm8
  .byte  102,69,15,86,194                    // orpd          %xmm10,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3a72 <_sk_store_4444_sse2+0x7e>
  .byte  242,69,15,17,4,82                   // movsd         %xmm8,(%r10,%rdx,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,97,192                    // punpcklwd     %xmm0,%xmm8
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,36                              // je            3aa8 <_sk_store_4444_sse2+0xb4>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,18                              // je            3a9c <_sk_store_4444_sse2+0xa8>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,222                             // jne           3a6e <_sk_store_4444_sse2+0x7a>
  .byte  102,65,15,197,192,4                 // pextrw        $0x4,%xmm8,%eax
  .byte  102,65,137,68,82,4                  // mov           %ax,0x4(%r10,%rdx,2)
  .byte  102,65,15,197,192,2                 // pextrw        $0x2,%xmm8,%eax
  .byte  102,65,137,68,82,2                  // mov           %ax,0x2(%r10,%rdx,2)
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,65,137,4,82                     // mov           %ax,(%r10,%rdx,2)
  .byte  235,186                             // jmp           3a6e <_sk_store_4444_sse2+0x7a>

HIDDEN _sk_load_8888_sse2
.globl _sk_load_8888_sse2
FUNCTION(_sk_load_8888_sse2)
_sk_load_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,98                              // jne           3b20 <_sk_load_8888_sse2+0x6c>
  .byte  243,68,15,111,12,144                // movdqu        (%rax,%rdx,4),%xmm9
  .byte  102,15,111,21,100,40,0,0            // movdqa        0x2864(%rip),%xmm2        # 6330 <_sk_callback_sse2+0xd80>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,96,40,0,0                // movaps        0x2860(%rip),%xmm8        # 6340 <_sk_callback_sse2+0xd90>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,65,15,111,217                   // movdqa        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,44                              // je            3b5e <_sk_load_8888_sse2+0xaa>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,18                              // je            3b4a <_sk_load_8888_sse2+0x96>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,134                             // jne           3ac4 <_sk_load_8888_sse2+0x10>
  .byte  102,15,110,68,144,8                 // movd          0x8(%rax,%rdx,4),%xmm0
  .byte  102,68,15,112,200,69                // pshufd        $0x45,%xmm0,%xmm9
  .byte  243,15,16,68,144,4                  // movss         0x4(%rax,%rdx,4),%xmm0
  .byte  65,15,198,193,0                     // shufps        $0x0,%xmm9,%xmm0
  .byte  65,15,198,193,226                   // shufps        $0xe2,%xmm9,%xmm0
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  243,15,16,4,144                     // movss         (%rax,%rdx,4),%xmm0
  .byte  243,68,15,16,200                    // movss         %xmm0,%xmm9
  .byte  233,87,255,255,255                  // jmpq          3ac4 <_sk_load_8888_sse2+0x10>

HIDDEN _sk_gather_8888_sse2
.globl _sk_gather_8888_sse2
FUNCTION(_sk_gather_8888_sse2)
_sk_gather_8888_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,67,15,110,4,153                 // movd          (%r9,%r11,4),%xmm0
  .byte  102,65,15,110,12,129                // movd          (%r9,%rax,4),%xmm1
  .byte  102,15,98,193                       // punpckldq     %xmm1,%xmm0
  .byte  102,69,15,110,12,153                // movd          (%r9,%rbx,4),%xmm9
  .byte  102,67,15,110,12,145                // movd          (%r9,%r10,4),%xmm1
  .byte  102,68,15,98,201                    // punpckldq     %xmm1,%xmm9
  .byte  102,68,15,98,200                    // punpckldq     %xmm0,%xmm9
  .byte  102,15,111,21,97,39,0,0             // movdqa        0x2761(%rip),%xmm2        # 6350 <_sk_callback_sse2+0xda0>
  .byte  102,65,15,111,193                   // movdqa        %xmm9,%xmm0
  .byte  102,15,219,194                      // pand          %xmm2,%xmm0
  .byte  15,91,192                           // cvtdq2ps      %xmm0,%xmm0
  .byte  68,15,40,5,93,39,0,0                // movaps        0x275d(%rip),%xmm8        # 6360 <_sk_callback_sse2+0xdb0>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,15,114,209,8                    // psrld         $0x8,%xmm1
  .byte  102,15,219,202                      // pand          %xmm2,%xmm1
  .byte  15,91,201                           // cvtdq2ps      %xmm1,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,65,15,111,217                   // movdqa        %xmm9,%xmm3
  .byte  102,15,114,211,16                   // psrld         $0x10,%xmm3
  .byte  102,15,219,218                      // pand          %xmm2,%xmm3
  .byte  15,91,211                           // cvtdq2ps      %xmm3,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,65,15,114,209,24                // psrld         $0x18,%xmm9
  .byte  65,15,91,217                        // cvtdq2ps      %xmm9,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_8888_sse2
.globl _sk_store_8888_sse2
FUNCTION(_sk_store_8888_sse2)
_sk_store_8888_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  68,15,40,5,31,39,0,0                // movaps        0x271f(%rip),%xmm8        # 6370 <_sk_callback_sse2+0xdc0>
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,8                 // pslld         $0x8,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  68,15,89,195                        // mulps         %xmm3,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,24                // pslld         $0x18,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  102,69,15,235,194                   // por           %xmm10,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           3cb1 <_sk_store_8888_sse2+0x6d>
  .byte  243,68,15,127,4,144                 // movdqu        %xmm8,(%rax,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,3                        // and           $0x3,%r9b
  .byte  65,128,249,1                        // cmp           $0x1,%r9b
  .byte  116,38                              // je            3ce4 <_sk_store_8888_sse2+0xa0>
  .byte  65,128,249,2                        // cmp           $0x2,%r9b
  .byte  116,19                              // je            3cd7 <_sk_store_8888_sse2+0x93>
  .byte  65,128,249,3                        // cmp           $0x3,%r9b
  .byte  117,227                             // jne           3cad <_sk_store_8888_sse2+0x69>
  .byte  102,69,15,112,200,78                // pshufd        $0x4e,%xmm8,%xmm9
  .byte  102,68,15,126,76,144,8              // movd          %xmm9,0x8(%rax,%rdx,4)
  .byte  102,69,15,112,200,229               // pshufd        $0xe5,%xmm8,%xmm9
  .byte  102,68,15,126,76,144,4              // movd          %xmm9,0x4(%rax,%rdx,4)
  .byte  102,68,15,126,4,144                 // movd          %xmm8,(%rax,%rdx,4)
  .byte  235,193                             // jmp           3cad <_sk_store_8888_sse2+0x69>

HIDDEN _sk_load_f16_sse2
.globl _sk_load_f16_sse2
FUNCTION(_sk_load_f16_sse2)
_sk_load_f16_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,96,1,0,0                     // jne           3e5a <_sk_load_f16_sse2+0x16e>
  .byte  102,15,16,4,208                     // movupd        (%rax,%rdx,8),%xmm0
  .byte  102,15,16,76,208,16                 // movupd        0x10(%rax,%rdx,8),%xmm1
  .byte  102,68,15,40,192                    // movapd        %xmm0,%xmm8
  .byte  102,68,15,97,193                    // punpcklwd     %xmm1,%xmm8
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,68,15,97,240                    // punpcklwd     %xmm0,%xmm14
  .byte  102,68,15,105,192                   // punpckhwd     %xmm0,%xmm8
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,97,202                    // punpcklwd     %xmm10,%xmm1
  .byte  102,68,15,111,13,70,38,0,0          // movdqa        0x2646(%rip),%xmm9        # 6380 <_sk_callback_sse2+0xdd0>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,193                   // pand          %xmm9,%xmm0
  .byte  102,15,239,200                      // pxor          %xmm0,%xmm1
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,68,15,111,233                   // movdqa        %xmm1,%xmm13
  .byte  102,65,15,114,245,13                // pslld         $0xd,%xmm13
  .byte  102,68,15,235,232                   // por           %xmm0,%xmm13
  .byte  102,68,15,111,29,43,38,0,0          // movdqa        0x262b(%rip),%xmm11        # 6390 <_sk_callback_sse2+0xde0>
  .byte  102,69,15,254,235                   // paddd         %xmm11,%xmm13
  .byte  102,68,15,111,37,45,38,0,0          // movdqa        0x262d(%rip),%xmm12        # 63a0 <_sk_callback_sse2+0xdf0>
  .byte  102,65,15,239,204                   // pxor          %xmm12,%xmm1
  .byte  102,15,111,29,48,38,0,0             // movdqa        0x2630(%rip),%xmm3        # 63b0 <_sk_callback_sse2+0xe00>
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,102,193                      // pcmpgtd       %xmm1,%xmm0
  .byte  102,65,15,223,197                   // pandn         %xmm13,%xmm0
  .byte  102,65,15,115,222,8                 // psrldq        $0x8,%xmm14
  .byte  102,69,15,97,242                    // punpcklwd     %xmm10,%xmm14
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,219,201                   // pand          %xmm9,%xmm1
  .byte  102,68,15,239,241                   // pxor          %xmm1,%xmm14
  .byte  102,15,114,241,16                   // pslld         $0x10,%xmm1
  .byte  102,65,15,111,214                   // movdqa        %xmm14,%xmm2
  .byte  102,15,114,242,13                   // pslld         $0xd,%xmm2
  .byte  102,15,235,209                      // por           %xmm1,%xmm2
  .byte  102,65,15,254,211                   // paddd         %xmm11,%xmm2
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,65,15,102,206                   // pcmpgtd       %xmm14,%xmm1
  .byte  102,15,223,202                      // pandn         %xmm2,%xmm1
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,234                    // punpcklwd     %xmm10,%xmm13
  .byte  102,65,15,111,213                   // movdqa        %xmm13,%xmm2
  .byte  102,65,15,219,209                   // pand          %xmm9,%xmm2
  .byte  102,68,15,239,234                   // pxor          %xmm2,%xmm13
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,65,15,114,246,13                // pslld         $0xd,%xmm14
  .byte  102,68,15,235,242                   // por           %xmm2,%xmm14
  .byte  102,69,15,254,243                   // paddd         %xmm11,%xmm14
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,65,15,102,213                   // pcmpgtd       %xmm13,%xmm2
  .byte  102,65,15,223,214                   // pandn         %xmm14,%xmm2
  .byte  102,65,15,115,216,8                 // psrldq        $0x8,%xmm8
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,219,200                   // pand          %xmm8,%xmm9
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,114,242,13                // pslld         $0xd,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  102,69,15,254,211                   // paddd         %xmm11,%xmm10
  .byte  102,69,15,239,196                   // pxor          %xmm12,%xmm8
  .byte  102,65,15,102,216                   // pcmpgtd       %xmm8,%xmm3
  .byte  102,65,15,223,218                   // pandn         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,15,16,4,208                     // movsd         (%rax,%rdx,8),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,17                              // jne           3e76 <_sk_load_f16_sse2+0x18a>
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  233,143,254,255,255                 // jmpq          3d05 <_sk_load_f16_sse2+0x19>
  .byte  102,15,22,68,208,8                  // movhpd        0x8(%rax,%rdx,8),%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,123,254,255,255              // jb            3d05 <_sk_load_f16_sse2+0x19>
  .byte  242,15,16,76,208,16                 // movsd         0x10(%rax,%rdx,8),%xmm1
  .byte  233,112,254,255,255                 // jmpq          3d05 <_sk_load_f16_sse2+0x19>

HIDDEN _sk_gather_f16_sse2
.globl _sk_gather_f16_sse2
FUNCTION(_sk_gather_f16_sse2)
_sk_gather_f16_sse2:
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,110,80,16                    // movd          0x10(%rax),%xmm2
  .byte  102,15,112,210,0                    // pshufd        $0x0,%xmm2,%xmm2
  .byte  102,15,112,217,245                  // pshufd        $0xf5,%xmm1,%xmm3
  .byte  102,15,244,218                      // pmuludq       %xmm2,%xmm3
  .byte  102,15,112,219,232                  // pshufd        $0xe8,%xmm3,%xmm3
  .byte  102,15,244,209                      // pmuludq       %xmm1,%xmm2
  .byte  102,15,112,202,232                  // pshufd        $0xe8,%xmm2,%xmm1
  .byte  102,15,98,203                       // punpckldq     %xmm3,%xmm1
  .byte  243,15,91,192                       // cvttps2dq     %xmm0,%xmm0
  .byte  102,15,254,193                      // paddd         %xmm1,%xmm0
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,72,15,126,200                   // movq          %xmm1,%rax
  .byte  65,137,194                          // mov           %eax,%r10d
  .byte  72,193,232,32                       // shr           $0x20,%rax
  .byte  102,73,15,126,195                   // movq          %xmm0,%r11
  .byte  68,137,219                          // mov           %r11d,%ebx
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  243,67,15,126,4,217                 // movq          (%r9,%r11,8),%xmm0
  .byte  243,65,15,126,12,217                // movq          (%r9,%rbx,8),%xmm1
  .byte  102,15,108,200                      // punpcklqdq    %xmm0,%xmm1
  .byte  243,65,15,126,4,193                 // movq          (%r9,%rax,8),%xmm0
  .byte  243,67,15,126,20,209                // movq          (%r9,%r10,8),%xmm2
  .byte  102,15,108,208                      // punpcklqdq    %xmm0,%xmm2
  .byte  102,68,15,111,193                   // movdqa        %xmm1,%xmm8
  .byte  102,68,15,97,194                    // punpcklwd     %xmm2,%xmm8
  .byte  102,15,105,202                      // punpckhwd     %xmm2,%xmm1
  .byte  102,69,15,111,240                   // movdqa        %xmm8,%xmm14
  .byte  102,68,15,97,241                    // punpcklwd     %xmm1,%xmm14
  .byte  102,68,15,105,193                   // punpckhwd     %xmm1,%xmm8
  .byte  102,69,15,239,210                   // pxor          %xmm10,%xmm10
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,97,202                    // punpcklwd     %xmm10,%xmm1
  .byte  102,68,15,111,13,130,36,0,0         // movdqa        0x2482(%rip),%xmm9        # 63c0 <_sk_callback_sse2+0xe10>
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,65,15,219,193                   // pand          %xmm9,%xmm0
  .byte  102,15,239,200                      // pxor          %xmm0,%xmm1
  .byte  102,15,114,240,16                   // pslld         $0x10,%xmm0
  .byte  102,68,15,111,233                   // movdqa        %xmm1,%xmm13
  .byte  102,65,15,114,245,13                // pslld         $0xd,%xmm13
  .byte  102,68,15,235,232                   // por           %xmm0,%xmm13
  .byte  102,68,15,111,29,103,36,0,0         // movdqa        0x2467(%rip),%xmm11        # 63d0 <_sk_callback_sse2+0xe20>
  .byte  102,69,15,254,235                   // paddd         %xmm11,%xmm13
  .byte  102,68,15,111,37,105,36,0,0         // movdqa        0x2469(%rip),%xmm12        # 63e0 <_sk_callback_sse2+0xe30>
  .byte  102,65,15,239,204                   // pxor          %xmm12,%xmm1
  .byte  102,15,111,29,108,36,0,0            // movdqa        0x246c(%rip),%xmm3        # 63f0 <_sk_callback_sse2+0xe40>
  .byte  102,15,111,195                      // movdqa        %xmm3,%xmm0
  .byte  102,15,102,193                      // pcmpgtd       %xmm1,%xmm0
  .byte  102,65,15,223,197                   // pandn         %xmm13,%xmm0
  .byte  102,65,15,115,222,8                 // psrldq        $0x8,%xmm14
  .byte  102,69,15,97,242                    // punpcklwd     %xmm10,%xmm14
  .byte  102,65,15,111,206                   // movdqa        %xmm14,%xmm1
  .byte  102,65,15,219,201                   // pand          %xmm9,%xmm1
  .byte  102,68,15,239,241                   // pxor          %xmm1,%xmm14
  .byte  102,15,114,241,16                   // pslld         $0x10,%xmm1
  .byte  102,65,15,111,214                   // movdqa        %xmm14,%xmm2
  .byte  102,15,114,242,13                   // pslld         $0xd,%xmm2
  .byte  102,15,235,209                      // por           %xmm1,%xmm2
  .byte  102,65,15,254,211                   // paddd         %xmm11,%xmm2
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,65,15,102,206                   // pcmpgtd       %xmm14,%xmm1
  .byte  102,15,223,202                      // pandn         %xmm2,%xmm1
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,234                    // punpcklwd     %xmm10,%xmm13
  .byte  102,65,15,111,213                   // movdqa        %xmm13,%xmm2
  .byte  102,65,15,219,209                   // pand          %xmm9,%xmm2
  .byte  102,68,15,239,234                   // pxor          %xmm2,%xmm13
  .byte  102,15,114,242,16                   // pslld         $0x10,%xmm2
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,65,15,114,246,13                // pslld         $0xd,%xmm14
  .byte  102,68,15,235,242                   // por           %xmm2,%xmm14
  .byte  102,69,15,254,243                   // paddd         %xmm11,%xmm14
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,15,111,211                      // movdqa        %xmm3,%xmm2
  .byte  102,65,15,102,213                   // pcmpgtd       %xmm13,%xmm2
  .byte  102,65,15,223,214                   // pandn         %xmm14,%xmm2
  .byte  102,65,15,115,216,8                 // psrldq        $0x8,%xmm8
  .byte  102,69,15,97,194                    // punpcklwd     %xmm10,%xmm8
  .byte  102,69,15,219,200                   // pand          %xmm8,%xmm9
  .byte  102,69,15,239,193                   // pxor          %xmm9,%xmm8
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,65,15,114,242,13                // pslld         $0xd,%xmm10
  .byte  102,69,15,235,209                   // por           %xmm9,%xmm10
  .byte  102,69,15,254,211                   // paddd         %xmm11,%xmm10
  .byte  102,69,15,239,196                   // pxor          %xmm12,%xmm8
  .byte  102,65,15,102,216                   // pcmpgtd       %xmm8,%xmm3
  .byte  102,65,15,223,218                   // pandn         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  91                                  // pop           %rbx
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_store_f16_sse2
.globl _sk_store_f16_sse2
FUNCTION(_sk_store_f16_sse2)
_sk_store_f16_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,0                            // mov           (%rax),%rax
  .byte  102,68,15,111,21,147,35,0,0         // movdqa        0x2393(%rip),%xmm10        # 6400 <_sk_callback_sse2+0xe50>
  .byte  102,68,15,111,224                   // movdqa        %xmm0,%xmm12
  .byte  102,69,15,219,226                   // pand          %xmm10,%xmm12
  .byte  102,68,15,111,232                   // movdqa        %xmm0,%xmm13
  .byte  102,69,15,239,236                   // pxor          %xmm12,%xmm13
  .byte  102,68,15,111,13,134,35,0,0         // movdqa        0x2386(%rip),%xmm9        # 6410 <_sk_callback_sse2+0xe60>
  .byte  102,65,15,114,212,16                // psrld         $0x10,%xmm12
  .byte  102,69,15,111,193                   // movdqa        %xmm9,%xmm8
  .byte  102,69,15,102,197                   // pcmpgtd       %xmm13,%xmm8
  .byte  102,65,15,114,213,13                // psrld         $0xd,%xmm13
  .byte  102,68,15,111,29,119,35,0,0         // movdqa        0x2377(%rip),%xmm11        # 6420 <_sk_callback_sse2+0xe70>
  .byte  102,69,15,235,227                   // por           %xmm11,%xmm12
  .byte  102,69,15,254,229                   // paddd         %xmm13,%xmm12
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,114,228,16                // psrad         $0x10,%xmm12
  .byte  102,69,15,223,196                   // pandn         %xmm12,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,68,15,111,225                   // movdqa        %xmm1,%xmm12
  .byte  102,69,15,219,226                   // pand          %xmm10,%xmm12
  .byte  102,68,15,111,241                   // movdqa        %xmm1,%xmm14
  .byte  102,69,15,239,244                   // pxor          %xmm12,%xmm14
  .byte  102,65,15,114,212,16                // psrld         $0x10,%xmm12
  .byte  102,69,15,111,233                   // movdqa        %xmm9,%xmm13
  .byte  102,69,15,102,238                   // pcmpgtd       %xmm14,%xmm13
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,227                   // por           %xmm11,%xmm12
  .byte  102,69,15,254,230                   // paddd         %xmm14,%xmm12
  .byte  102,65,15,114,244,16                // pslld         $0x10,%xmm12
  .byte  102,65,15,114,228,16                // psrad         $0x10,%xmm12
  .byte  102,69,15,223,236                   // pandn         %xmm12,%xmm13
  .byte  102,69,15,107,237                   // packssdw      %xmm13,%xmm13
  .byte  102,68,15,111,242                   // movdqa        %xmm2,%xmm14
  .byte  102,69,15,219,242                   // pand          %xmm10,%xmm14
  .byte  102,68,15,111,250                   // movdqa        %xmm2,%xmm15
  .byte  102,69,15,239,254                   // pxor          %xmm14,%xmm15
  .byte  102,65,15,114,214,16                // psrld         $0x10,%xmm14
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,69,15,102,231                   // pcmpgtd       %xmm15,%xmm12
  .byte  102,65,15,114,215,13                // psrld         $0xd,%xmm15
  .byte  102,69,15,235,243                   // por           %xmm11,%xmm14
  .byte  102,69,15,254,247                   // paddd         %xmm15,%xmm14
  .byte  102,65,15,114,246,16                // pslld         $0x10,%xmm14
  .byte  102,65,15,114,230,16                // psrad         $0x10,%xmm14
  .byte  102,69,15,223,230                   // pandn         %xmm14,%xmm12
  .byte  102,69,15,107,228                   // packssdw      %xmm12,%xmm12
  .byte  102,68,15,219,211                   // pand          %xmm3,%xmm10
  .byte  102,68,15,111,243                   // movdqa        %xmm3,%xmm14
  .byte  102,69,15,239,242                   // pxor          %xmm10,%xmm14
  .byte  102,65,15,114,210,16                // psrld         $0x10,%xmm10
  .byte  102,69,15,102,206                   // pcmpgtd       %xmm14,%xmm9
  .byte  102,65,15,114,214,13                // psrld         $0xd,%xmm14
  .byte  102,69,15,235,211                   // por           %xmm11,%xmm10
  .byte  102,69,15,254,214                   // paddd         %xmm14,%xmm10
  .byte  102,65,15,114,242,16                // pslld         $0x10,%xmm10
  .byte  102,65,15,114,226,16                // psrad         $0x10,%xmm10
  .byte  102,69,15,223,202                   // pandn         %xmm10,%xmm9
  .byte  102,69,15,107,201                   // packssdw      %xmm9,%xmm9
  .byte  102,69,15,97,197                    // punpcklwd     %xmm13,%xmm8
  .byte  102,69,15,97,225                    // punpcklwd     %xmm9,%xmm12
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,69,15,98,204                    // punpckldq     %xmm12,%xmm9
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,21                              // jne           41cb <_sk_store_f16_sse2+0x16c>
  .byte  68,15,17,12,208                     // movups        %xmm9,(%rax,%rdx,8)
  .byte  102,69,15,106,196                   // punpckhdq     %xmm12,%xmm8
  .byte  243,68,15,127,68,208,16             // movdqu        %xmm8,0x10(%rax,%rdx,8)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,214,12,208                // movq          %xmm9,(%rax,%rdx,8)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            41c7 <_sk_store_f16_sse2+0x168>
  .byte  102,68,15,23,76,208,8               // movhpd        %xmm9,0x8(%rax,%rdx,8)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            41c7 <_sk_store_f16_sse2+0x168>
  .byte  102,69,15,106,196                   // punpckhdq     %xmm12,%xmm8
  .byte  102,68,15,214,68,208,16             // movq          %xmm8,0x10(%rax,%rdx,8)
  .byte  235,213                             // jmp           41c7 <_sk_store_f16_sse2+0x168>

HIDDEN _sk_load_u16_be_sse2
.globl _sk_load_u16_be_sse2
FUNCTION(_sk_load_u16_be_sse2)
_sk_load_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,190,0,0,0                    // jne           42c6 <_sk_load_u16_be_sse2+0xd4>
  .byte  102,65,15,16,4,65                   // movupd        (%r9,%rax,2),%xmm0
  .byte  102,65,15,16,76,65,16               // movupd        0x10(%r9,%rax,2),%xmm1
  .byte  102,15,40,208                       // movapd        %xmm0,%xmm2
  .byte  102,15,97,209                       // punpcklwd     %xmm1,%xmm2
  .byte  102,15,105,193                      // punpckhwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,69,15,239,201                   // pxor          %xmm9,%xmm9
  .byte  102,65,15,97,201                    // punpcklwd     %xmm9,%xmm1
  .byte  15,91,193                           // cvtdq2ps      %xmm1,%xmm0
  .byte  68,15,40,5,215,33,0,0               // movaps        0x21d7(%rip),%xmm8        # 6430 <_sk_callback_sse2+0xe80>
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,203                           // cvtdq2ps      %xmm3,%xmm1
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  102,68,15,111,210                   // movdqa        %xmm2,%xmm10
  .byte  102,65,15,113,242,8                 // psllw         $0x8,%xmm10
  .byte  102,15,112,218,78                   // pshufd        $0x4e,%xmm2,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,65,15,235,210                   // por           %xmm10,%xmm2
  .byte  102,65,15,97,209                    // punpcklwd     %xmm9,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  102,68,15,111,211                   // movdqa        %xmm3,%xmm10
  .byte  102,65,15,113,242,8                 // psllw         $0x8,%xmm10
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,65,15,235,218                   // por           %xmm10,%xmm3
  .byte  102,65,15,97,217                    // punpcklwd     %xmm9,%xmm3
  .byte  15,91,219                           // cvtdq2ps      %xmm3,%xmm3
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  242,65,15,16,4,65                   // movsd         (%r9,%rax,2),%xmm0
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,17                              // jne           42e3 <_sk_load_u16_be_sse2+0xf1>
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  233,50,255,255,255                  // jmpq          4215 <_sk_load_u16_be_sse2+0x23>
  .byte  102,65,15,22,68,65,8                // movhpd        0x8(%r9,%rax,2),%xmm0
  .byte  102,15,87,201                       // xorpd         %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  15,130,29,255,255,255               // jb            4215 <_sk_load_u16_be_sse2+0x23>
  .byte  242,65,15,16,76,65,16               // movsd         0x10(%r9,%rax,2),%xmm1
  .byte  233,17,255,255,255                  // jmpq          4215 <_sk_load_u16_be_sse2+0x23>

HIDDEN _sk_load_rgb_u16_be_sse2
.globl _sk_load_rgb_u16_be_sse2
FUNCTION(_sk_load_rgb_u16_be_sse2)
_sk_load_rgb_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,82                         // lea           (%rdx,%rdx,2),%rax
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,175,0,0,0                    // jne           43c5 <_sk_load_rgb_u16_be_sse2+0xc1>
  .byte  243,65,15,111,20,65                 // movdqu        (%r9,%rax,2),%xmm2
  .byte  243,65,15,111,92,65,8               // movdqu        0x8(%r9,%rax,2),%xmm3
  .byte  102,15,115,219,4                    // psrldq        $0x4,%xmm3
  .byte  102,15,111,194                      // movdqa        %xmm2,%xmm0
  .byte  102,15,115,216,6                    // psrldq        $0x6,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,115,217,6                    // psrldq        $0x6,%xmm1
  .byte  102,15,97,211                       // punpcklwd     %xmm3,%xmm2
  .byte  102,15,97,193                       // punpcklwd     %xmm1,%xmm0
  .byte  102,15,111,202                      // movdqa        %xmm2,%xmm1
  .byte  102,15,97,200                       // punpcklwd     %xmm0,%xmm1
  .byte  102,15,112,217,78                   // pshufd        $0x4e,%xmm1,%xmm3
  .byte  102,15,105,208                      // punpckhwd     %xmm0,%xmm2
  .byte  102,15,111,193                      // movdqa        %xmm1,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,113,209,8                    // psrlw         $0x8,%xmm1
  .byte  102,15,235,200                      // por           %xmm0,%xmm1
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,65,15,97,200                    // punpcklwd     %xmm8,%xmm1
  .byte  15,91,193                           // cvtdq2ps      %xmm1,%xmm0
  .byte  68,15,40,13,198,32,0,0              // movaps        0x20c6(%rip),%xmm9        # 6440 <_sk_callback_sse2+0xe90>
  .byte  65,15,89,193                        // mulps         %xmm9,%xmm0
  .byte  102,15,111,203                      // movdqa        %xmm3,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,15,113,211,8                    // psrlw         $0x8,%xmm3
  .byte  102,15,235,217                      // por           %xmm1,%xmm3
  .byte  102,65,15,97,216                    // punpcklwd     %xmm8,%xmm3
  .byte  15,91,203                           // cvtdq2ps      %xmm3,%xmm1
  .byte  65,15,89,201                        // mulps         %xmm9,%xmm1
  .byte  102,15,111,218                      // movdqa        %xmm2,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,113,210,8                    // psrlw         $0x8,%xmm2
  .byte  102,15,235,211                      // por           %xmm3,%xmm2
  .byte  102,65,15,97,208                    // punpcklwd     %xmm8,%xmm2
  .byte  15,91,210                           // cvtdq2ps      %xmm2,%xmm2
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,141,32,0,0                 // movaps        0x208d(%rip),%xmm3        # 6450 <_sk_callback_sse2+0xea0>
  .byte  255,224                             // jmpq          *%rax
  .byte  102,65,15,110,20,65                 // movd          (%r9,%rax,2),%xmm2
  .byte  102,65,15,196,84,65,4,2             // pinsrw        $0x2,0x4(%r9,%rax,2),%xmm2
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,13                              // jne           43ea <_sk_load_rgb_u16_be_sse2+0xe6>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  233,80,255,255,255                  // jmpq          433a <_sk_load_rgb_u16_be_sse2+0x36>
  .byte  102,65,15,110,68,65,6               // movd          0x6(%r9,%rax,2),%xmm0
  .byte  102,65,15,196,68,65,10,2            // pinsrw        $0x2,0xa(%r9,%rax,2),%xmm0
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,24                              // jb            441b <_sk_load_rgb_u16_be_sse2+0x117>
  .byte  102,65,15,110,92,65,12              // movd          0xc(%r9,%rax,2),%xmm3
  .byte  102,65,15,196,92,65,16,2            // pinsrw        $0x2,0x10(%r9,%rax,2),%xmm3
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  233,31,255,255,255                  // jmpq          433a <_sk_load_rgb_u16_be_sse2+0x36>
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  233,22,255,255,255                  // jmpq          433a <_sk_load_rgb_u16_be_sse2+0x36>

HIDDEN _sk_store_u16_be_sse2
.globl _sk_store_u16_be_sse2
FUNCTION(_sk_store_u16_be_sse2)
_sk_store_u16_be_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  72,141,4,149,0,0,0,0                // lea           0x0(,%rdx,4),%rax
  .byte  68,15,40,21,39,32,0,0               // movaps        0x2027(%rip),%xmm10        # 6460 <_sk_callback_sse2+0xeb0>
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  69,15,89,194                        // mulps         %xmm10,%xmm8
  .byte  102,69,15,91,192                    // cvtps2dq      %xmm8,%xmm8
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,65,15,114,224,16                // psrad         $0x10,%xmm8
  .byte  102,69,15,107,192                   // packssdw      %xmm8,%xmm8
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,65,15,113,208,8                 // psrlw         $0x8,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  102,69,15,91,217                    // cvtps2dq      %xmm9,%xmm11
  .byte  102,65,15,114,243,16                // pslld         $0x10,%xmm11
  .byte  102,65,15,114,227,16                // psrad         $0x10,%xmm11
  .byte  102,69,15,107,219                   // packssdw      %xmm11,%xmm11
  .byte  102,69,15,111,203                   // movdqa        %xmm11,%xmm9
  .byte  102,65,15,113,241,8                 // psllw         $0x8,%xmm9
  .byte  102,65,15,113,211,8                 // psrlw         $0x8,%xmm11
  .byte  102,69,15,235,217                   // por           %xmm9,%xmm11
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  69,15,89,202                        // mulps         %xmm10,%xmm9
  .byte  102,69,15,91,201                    // cvtps2dq      %xmm9,%xmm9
  .byte  102,65,15,114,241,16                // pslld         $0x10,%xmm9
  .byte  102,65,15,114,225,16                // psrad         $0x10,%xmm9
  .byte  102,69,15,107,201                   // packssdw      %xmm9,%xmm9
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,209,8                 // psrlw         $0x8,%xmm9
  .byte  102,69,15,235,204                   // por           %xmm12,%xmm9
  .byte  68,15,89,211                        // mulps         %xmm3,%xmm10
  .byte  102,69,15,91,210                    // cvtps2dq      %xmm10,%xmm10
  .byte  102,65,15,114,242,16                // pslld         $0x10,%xmm10
  .byte  102,65,15,114,226,16                // psrad         $0x10,%xmm10
  .byte  102,69,15,107,210                   // packssdw      %xmm10,%xmm10
  .byte  102,69,15,111,226                   // movdqa        %xmm10,%xmm12
  .byte  102,65,15,113,244,8                 // psllw         $0x8,%xmm12
  .byte  102,65,15,113,210,8                 // psrlw         $0x8,%xmm10
  .byte  102,69,15,235,212                   // por           %xmm12,%xmm10
  .byte  102,69,15,97,195                    // punpcklwd     %xmm11,%xmm8
  .byte  102,69,15,97,202                    // punpcklwd     %xmm10,%xmm9
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,69,15,98,209                    // punpckldq     %xmm9,%xmm10
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,21                              // jne           4533 <_sk_store_u16_be_sse2+0x10f>
  .byte  69,15,17,20,65                      // movups        %xmm10,(%r9,%rax,2)
  .byte  102,69,15,106,193                   // punpckhdq     %xmm9,%xmm8
  .byte  243,69,15,127,68,65,16              // movdqu        %xmm8,0x10(%r9,%rax,2)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,214,20,65                 // movq          %xmm10,(%r9,%rax,2)
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,240                             // je            452f <_sk_store_u16_be_sse2+0x10b>
  .byte  102,69,15,23,84,65,8                // movhpd        %xmm10,0x8(%r9,%rax,2)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,227                             // jb            452f <_sk_store_u16_be_sse2+0x10b>
  .byte  102,69,15,106,193                   // punpckhdq     %xmm9,%xmm8
  .byte  102,69,15,214,68,65,16              // movq          %xmm8,0x10(%r9,%rax,2)
  .byte  235,213                             // jmp           452f <_sk_store_u16_be_sse2+0x10b>

HIDDEN _sk_load_f32_sse2
.globl _sk_load_f32_sse2
FUNCTION(_sk_load_f32_sse2)
_sk_load_f32_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  69,15,16,4,2                        // movups        (%r10,%rax,1),%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,66                              // jne           45ba <_sk_load_f32_sse2+0x60>
  .byte  67,15,16,68,138,16                  // movups        0x10(%r10,%r9,4),%xmm0
  .byte  67,15,16,92,138,32                  // movups        0x20(%r10,%r9,4),%xmm3
  .byte  71,15,16,76,138,48                  // movups        0x30(%r10,%r9,4),%xmm9
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  15,20,208                           // unpcklps      %xmm0,%xmm2
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  65,15,20,201                        // unpcklps      %xmm9,%xmm1
  .byte  68,15,21,192                        // unpckhps      %xmm0,%xmm8
  .byte  65,15,21,217                        // unpckhps      %xmm9,%xmm3
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,202                           // movhlps       %xmm2,%xmm1
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  65,15,18,216                        // movhlps       %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  117,8                               // jne           45cc <_sk_load_f32_sse2+0x72>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  235,190                             // jmp           458a <_sk_load_f32_sse2+0x30>
  .byte  67,15,16,68,138,16                  // movups        0x10(%r10,%r9,4),%xmm0
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,8                               // jb            45e0 <_sk_load_f32_sse2+0x86>
  .byte  67,15,16,92,138,32                  // movups        0x20(%r10,%r9,4),%xmm3
  .byte  235,170                             // jmp           458a <_sk_load_f32_sse2+0x30>
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  235,165                             // jmp           458a <_sk_load_f32_sse2+0x30>

HIDDEN _sk_store_f32_sse2
.globl _sk_store_f32_sse2
FUNCTION(_sk_store_f32_sse2)
_sk_store_f32_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,16                           // mov           (%rax),%r10
  .byte  76,141,12,149,0,0,0,0               // lea           0x0(,%rdx,4),%r9
  .byte  72,137,208                          // mov           %rdx,%rax
  .byte  72,193,224,4                        // shl           $0x4,%rax
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  68,15,40,194                        // movaps        %xmm2,%xmm8
  .byte  68,15,20,195                        // unpcklps      %xmm3,%xmm8
  .byte  68,15,40,208                        // movaps        %xmm0,%xmm10
  .byte  68,15,21,209                        // unpckhps      %xmm1,%xmm10
  .byte  68,15,40,218                        // movaps        %xmm2,%xmm11
  .byte  68,15,21,219                        // unpckhps      %xmm3,%xmm11
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  102,69,15,20,224                    // unpcklpd      %xmm8,%xmm12
  .byte  69,15,18,193                        // movhlps       %xmm9,%xmm8
  .byte  69,15,40,202                        // movaps        %xmm10,%xmm9
  .byte  102,69,15,20,203                    // unpcklpd      %xmm11,%xmm9
  .byte  102,69,15,17,36,2                   // movupd        %xmm12,(%r10,%rax,1)
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,29                              // jne           4657 <_sk_store_f32_sse2+0x72>
  .byte  102,69,15,21,211                    // unpckhpd      %xmm11,%xmm10
  .byte  71,15,17,68,138,16                  // movups        %xmm8,0x10(%r10,%r9,4)
  .byte  102,71,15,17,76,138,32              // movupd        %xmm9,0x20(%r10,%r9,4)
  .byte  102,71,15,17,84,138,48              // movupd        %xmm10,0x30(%r10,%r9,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  73,131,248,1                        // cmp           $0x1,%r8
  .byte  116,246                             // je            4653 <_sk_store_f32_sse2+0x6e>
  .byte  71,15,17,68,138,16                  // movups        %xmm8,0x10(%r10,%r9,4)
  .byte  73,131,248,3                        // cmp           $0x3,%r8
  .byte  114,234                             // jb            4653 <_sk_store_f32_sse2+0x6e>
  .byte  102,71,15,17,76,138,32              // movupd        %xmm9,0x20(%r10,%r9,4)
  .byte  235,225                             // jmp           4653 <_sk_store_f32_sse2+0x6e>

HIDDEN _sk_clamp_x_sse2
.globl _sk_clamp_x_sse2
FUNCTION(_sk_clamp_x_sse2)
_sk_clamp_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,15,118,192                      // pcmpeqd       %xmm0,%xmm0
  .byte  102,65,15,254,193                   // paddd         %xmm9,%xmm0
  .byte  68,15,93,192                        // minps         %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_y_sse2
.globl _sk_clamp_y_sse2
FUNCTION(_sk_clamp_y_sse2)
_sk_clamp_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,193                        // maxps         %xmm1,%xmm8
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  102,15,118,201                      // pcmpeqd       %xmm1,%xmm1
  .byte  102,65,15,254,201                   // paddd         %xmm9,%xmm1
  .byte  68,15,93,193                        // minps         %xmm1,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,200                        // movaps        %xmm8,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_sse2
.globl _sk_repeat_x_sse2
FUNCTION(_sk_repeat_x_sse2)
_sk_repeat_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,84,13,128,29,0,0              // andps         0x1d80(%rip),%xmm9        # 6470 <_sk_callback_sse2+0xec0>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,193                        // minps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_y_sse2
.globl _sk_repeat_y_sse2
FUNCTION(_sk_repeat_y_sse2)
_sk_repeat_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,84,13,65,29,0,0               // andps         0x1d41(%rip),%xmm9        # 6480 <_sk_callback_sse2+0xed0>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  65,15,92,202                        // subps         %xmm10,%xmm1
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,201                        // minps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_sse2
.globl _sk_mirror_x_sse2
FUNCTION(_sk_mirror_x_sse2)
_sk_mirror_x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  243,69,15,88,201                    // addss         %xmm9,%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,89,21,17,33,0,0           // mulss         0x2111(%rip),%xmm10        # 68a0 <_sk_callback_sse2+0x12f0>
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,208                        // mulps         %xmm0,%xmm10
  .byte  243,69,15,91,218                    // cvttps2dq     %xmm10,%xmm11
  .byte  69,15,91,219                        // cvtdq2ps      %xmm11,%xmm11
  .byte  69,15,194,211,1                     // cmpltps       %xmm11,%xmm10
  .byte  68,15,84,21,226,28,0,0              // andps         0x1ce2(%rip),%xmm10        # 6490 <_sk_callback_sse2+0xee0>
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  65,15,92,195                        // subps         %xmm11,%xmm0
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  68,15,92,224                        // subps         %xmm0,%xmm12
  .byte  65,15,84,196                        // andps         %xmm12,%xmm0
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,193                        // minps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_y_sse2
.globl _sk_mirror_y_sse2
FUNCTION(_sk_mirror_y_sse2)
_sk_mirror_y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,8                      // movss         (%rax),%xmm9
  .byte  243,68,15,16,80,4                   // movss         0x4(%rax),%xmm10
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm8
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  243,69,15,88,201                    // addss         %xmm9,%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,89,21,155,32,0,0          // mulss         0x209b(%rip),%xmm10        # 68a4 <_sk_callback_sse2+0x12f4>
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  243,69,15,91,218                    // cvttps2dq     %xmm10,%xmm11
  .byte  69,15,91,219                        // cvtdq2ps      %xmm11,%xmm11
  .byte  69,15,194,211,1                     // cmpltps       %xmm11,%xmm10
  .byte  68,15,84,21,120,28,0,0              // andps         0x1c78(%rip),%xmm10        # 64a0 <_sk_callback_sse2+0xef0>
  .byte  69,15,87,228                        // xorps         %xmm12,%xmm12
  .byte  69,15,92,218                        // subps         %xmm10,%xmm11
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  65,15,92,203                        // subps         %xmm11,%xmm1
  .byte  65,15,92,200                        // subps         %xmm8,%xmm1
  .byte  68,15,92,225                        // subps         %xmm1,%xmm12
  .byte  65,15,84,204                        // andps         %xmm12,%xmm1
  .byte  102,69,15,118,201                   // pcmpeqd       %xmm9,%xmm9
  .byte  102,69,15,254,200                   // paddd         %xmm8,%xmm9
  .byte  65,15,93,201                        // minps         %xmm9,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clamp_x_1_sse2
.globl _sk_clamp_x_1_sse2
FUNCTION(_sk_clamp_x_1_sse2)
_sk_clamp_x_1_sse2:
  .byte  69,15,87,192                        // xorps         %xmm8,%xmm8
  .byte  68,15,95,192                        // maxps         %xmm0,%xmm8
  .byte  68,15,93,5,74,28,0,0                // minps         0x1c4a(%rip),%xmm8        # 64b0 <_sk_callback_sse2+0xf00>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_repeat_x_1_sse2
.globl _sk_repeat_x_1_sse2
FUNCTION(_sk_repeat_x_1_sse2)
_sk_repeat_x_1_sse2:
  .byte  243,68,15,91,192                    // cvttps2dq     %xmm0,%xmm8
  .byte  69,15,91,192                        // cvtdq2ps      %xmm8,%xmm8
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,194,200,1                     // cmpltps       %xmm8,%xmm9
  .byte  68,15,84,13,56,28,0,0               // andps         0x1c38(%rip),%xmm9        # 64c0 <_sk_callback_sse2+0xf10>
  .byte  69,15,92,193                        // subps         %xmm9,%xmm8
  .byte  65,15,92,192                        // subps         %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_mirror_x_1_sse2
.globl _sk_mirror_x_1_sse2
FUNCTION(_sk_mirror_x_1_sse2)
_sk_mirror_x_1_sse2:
  .byte  68,15,40,5,52,28,0,0                // movaps        0x1c34(%rip),%xmm8        # 64d0 <_sk_callback_sse2+0xf20>
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,13,56,28,0,0               // movaps        0x1c38(%rip),%xmm9        # 64e0 <_sk_callback_sse2+0xf30>
  .byte  68,15,89,200                        // mulps         %xmm0,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,84,13,46,28,0,0               // andps         0x1c2e(%rip),%xmm9        # 64f0 <_sk_callback_sse2+0xf40>
  .byte  69,15,87,219                        // xorps         %xmm11,%xmm11
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,88,210                        // addps         %xmm10,%xmm10
  .byte  65,15,92,194                        // subps         %xmm10,%xmm0
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,92,216                        // subps         %xmm0,%xmm11
  .byte  65,15,84,195                        // andps         %xmm11,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_luminance_to_alpha_sse2
.globl _sk_luminance_to_alpha_sse2
FUNCTION(_sk_luminance_to_alpha_sse2)
_sk_luminance_to_alpha_sse2:
  .byte  15,40,218                           // movaps        %xmm2,%xmm3
  .byte  15,89,5,20,28,0,0                   // mulps         0x1c14(%rip),%xmm0        # 6500 <_sk_callback_sse2+0xf50>
  .byte  15,89,13,29,28,0,0                  // mulps         0x1c1d(%rip),%xmm1        # 6510 <_sk_callback_sse2+0xf60>
  .byte  15,88,200                           // addps         %xmm0,%xmm1
  .byte  15,89,29,35,28,0,0                  // mulps         0x1c23(%rip),%xmm3        # 6520 <_sk_callback_sse2+0xf70>
  .byte  15,88,217                           // addps         %xmm1,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_2x3_sse2
.globl _sk_matrix_2x3_sse2
FUNCTION(_sk_matrix_2x3_sse2)
_sk_matrix_2x3_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,16                  // movss         0x10(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_3x4_sse2
.globl _sk_matrix_3x4_sse2
FUNCTION(_sk_matrix_3x4_sse2)
_sk_matrix_3x4_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,12                  // movss         0xc(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,36                  // movss         0x24(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x5_sse2
.globl _sk_matrix_4x5_sse2
FUNCTION(_sk_matrix_4x5_sse2)
_sk_matrix_4x5_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,32                  // movss         0x20(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,48                  // movss         0x30(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,64                 // movss         0x40(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,194                        // addps         %xmm10,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,68,15,16,80,20                  // movss         0x14(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,36                  // movss         0x24(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,52                  // movss         0x34(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,68                 // movss         0x44(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  68,15,89,227                        // mulps         %xmm3,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  68,15,89,218                        // mulps         %xmm2,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,24                  // movss         0x18(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,40                  // movss         0x28(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,56                 // movss         0x38(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,72                 // movss         0x48(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  68,15,89,235                        // mulps         %xmm3,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  68,15,89,226                        // mulps         %xmm2,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,217                        // mulps         %xmm9,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  243,68,15,16,88,12                  // movss         0xc(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,28                  // movss         0x1c(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  243,68,15,16,104,44                 // movss         0x2c(%rax),%xmm13
  .byte  69,15,198,237,0                     // shufps        $0x0,%xmm13,%xmm13
  .byte  243,68,15,16,112,60                 // movss         0x3c(%rax),%xmm14
  .byte  69,15,198,246,0                     // shufps        $0x0,%xmm14,%xmm14
  .byte  243,68,15,16,120,76                 // movss         0x4c(%rax),%xmm15
  .byte  69,15,198,255,0                     // shufps        $0x0,%xmm15,%xmm15
  .byte  68,15,89,243                        // mulps         %xmm3,%xmm14
  .byte  69,15,88,247                        // addps         %xmm15,%xmm14
  .byte  68,15,89,234                        // mulps         %xmm2,%xmm13
  .byte  69,15,88,238                        // addps         %xmm14,%xmm13
  .byte  69,15,89,225                        // mulps         %xmm9,%xmm12
  .byte  69,15,88,229                        // addps         %xmm13,%xmm12
  .byte  69,15,89,216                        // mulps         %xmm8,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,210                        // movaps        %xmm10,%xmm2
  .byte  65,15,40,219                        // movaps        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_4x3_sse2
.globl _sk_matrix_4x3_sse2
FUNCTION(_sk_matrix_4x3_sse2)
_sk_matrix_4x3_sse2:
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,32                     // movss         0x20(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,36                     // movss         0x24(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,209                        // mulps         %xmm9,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,80,40                  // movss         0x28(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  65,15,89,217                        // mulps         %xmm9,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,80,28                  // movss         0x1c(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,44                  // movss         0x2c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,218                        // addps         %xmm10,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_matrix_perspective_sse2
.globl _sk_matrix_perspective_sse2
FUNCTION(_sk_matrix_perspective_sse2)
_sk_matrix_perspective_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,68,15,16,72,4                   // movss         0x4(%rax),%xmm9
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,8                   // movss         0x8(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  65,15,88,193                        // addps         %xmm9,%xmm0
  .byte  243,68,15,16,72,12                  // movss         0xc(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  243,68,15,16,80,16                  // movss         0x10(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,20                  // movss         0x14(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  68,15,89,209                        // mulps         %xmm1,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,88,202                        // addps         %xmm10,%xmm9
  .byte  243,68,15,16,80,24                  // movss         0x18(%rax),%xmm10
  .byte  69,15,198,210,0                     // shufps        $0x0,%xmm10,%xmm10
  .byte  243,68,15,16,88,28                  // movss         0x1c(%rax),%xmm11
  .byte  69,15,198,219,0                     // shufps        $0x0,%xmm11,%xmm11
  .byte  243,68,15,16,96,32                  // movss         0x20(%rax),%xmm12
  .byte  69,15,198,228,0                     // shufps        $0x0,%xmm12,%xmm12
  .byte  68,15,89,217                        // mulps         %xmm1,%xmm11
  .byte  69,15,88,220                        // addps         %xmm12,%xmm11
  .byte  69,15,89,208                        // mulps         %xmm8,%xmm10
  .byte  69,15,88,211                        // addps         %xmm11,%xmm10
  .byte  65,15,83,202                        // rcpps         %xmm10,%xmm1
  .byte  15,89,193                           // mulps         %xmm1,%xmm0
  .byte  68,15,89,201                        // mulps         %xmm1,%xmm9
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,201                        // movaps        %xmm9,%xmm1
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_gradient_sse2
.globl _sk_evenly_spaced_gradient_sse2
FUNCTION(_sk_evenly_spaced_gradient_sse2)
_sk_evenly_spaced_gradient_sse2:
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  72,139,24                           // mov           (%rax),%rbx
  .byte  76,139,112,8                        // mov           0x8(%rax),%r14
  .byte  72,255,203                          // dec           %rbx
  .byte  120,7                               // js            4d39 <_sk_evenly_spaced_gradient_sse2+0x18>
  .byte  243,72,15,42,203                    // cvtsi2ss      %rbx,%xmm1
  .byte  235,21                              // jmp           4d4e <_sk_evenly_spaced_gradient_sse2+0x2d>
  .byte  73,137,217                          // mov           %rbx,%r9
  .byte  73,209,233                          // shr           %r9
  .byte  131,227,1                           // and           $0x1,%ebx
  .byte  76,9,203                            // or            %r9,%rbx
  .byte  243,72,15,42,203                    // cvtsi2ss      %rbx,%xmm1
  .byte  243,15,88,201                       // addss         %xmm1,%xmm1
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  243,15,91,201                       // cvttps2dq     %xmm1,%xmm1
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,211                   // movq          %xmm2,%r11
  .byte  69,137,217                          // mov           %r11d,%r9d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  243,65,15,16,12,158                 // movss         (%r14,%rbx,4),%xmm1
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  243,71,15,16,4,150                  // movss         (%r14,%r10,4),%xmm8
  .byte  243,67,15,16,20,142                 // movss         (%r14,%r9,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  68,15,20,193                        // unpcklps      %xmm1,%xmm8
  .byte  76,139,112,40                       // mov           0x28(%rax),%r14
  .byte  243,65,15,16,12,158                 // movss         (%r14,%rbx,4),%xmm1
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  243,71,15,16,12,150                 // movss         (%r14,%r10,4),%xmm9
  .byte  243,67,15,16,20,142                 // movss         (%r14,%r9,4),%xmm2
  .byte  68,15,20,202                        // unpcklps      %xmm2,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  76,139,112,16                       // mov           0x10(%rax),%r14
  .byte  243,65,15,16,20,158                 // movss         (%r14,%rbx,4),%xmm2
  .byte  243,67,15,16,12,158                 // movss         (%r14,%r11,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,150                 // movss         (%r14,%r10,4),%xmm1
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,112,48                       // mov           0x30(%rax),%r14
  .byte  243,65,15,16,20,158                 // movss         (%r14,%rbx,4),%xmm2
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  243,71,15,16,20,150                 // movss         (%r14,%r10,4),%xmm10
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  68,15,20,211                        // unpcklps      %xmm3,%xmm10
  .byte  68,15,20,210                        // unpcklps      %xmm2,%xmm10
  .byte  76,139,112,24                       // mov           0x18(%rax),%r14
  .byte  243,69,15,16,28,158                 // movss         (%r14,%rbx,4),%xmm11
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  68,15,20,218                        // unpcklps      %xmm2,%xmm11
  .byte  243,67,15,16,20,150                 // movss         (%r14,%r10,4),%xmm2
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,211                        // unpcklps      %xmm11,%xmm2
  .byte  76,139,112,56                       // mov           0x38(%rax),%r14
  .byte  243,69,15,16,36,158                 // movss         (%r14,%rbx,4),%xmm12
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  68,15,20,227                        // unpcklps      %xmm3,%xmm12
  .byte  243,71,15,16,28,150                 // movss         (%r14,%r10,4),%xmm11
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  68,15,20,219                        // unpcklps      %xmm3,%xmm11
  .byte  69,15,20,220                        // unpcklps      %xmm12,%xmm11
  .byte  76,139,112,32                       // mov           0x20(%rax),%r14
  .byte  243,69,15,16,36,158                 // movss         (%r14,%rbx,4),%xmm12
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  68,15,20,227                        // unpcklps      %xmm3,%xmm12
  .byte  243,67,15,16,28,150                 // movss         (%r14,%r10,4),%xmm3
  .byte  243,71,15,16,44,142                 // movss         (%r14,%r9,4),%xmm13
  .byte  65,15,20,221                        // unpcklps      %xmm13,%xmm3
  .byte  65,15,20,220                        // unpcklps      %xmm12,%xmm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  243,68,15,16,36,152                 // movss         (%rax,%rbx,4),%xmm12
  .byte  243,70,15,16,44,152                 // movss         (%rax,%r11,4),%xmm13
  .byte  69,15,20,229                        // unpcklps      %xmm13,%xmm12
  .byte  243,70,15,16,44,144                 // movss         (%rax,%r10,4),%xmm13
  .byte  243,70,15,16,52,136                 // movss         (%rax,%r9,4),%xmm14
  .byte  69,15,20,238                        // unpcklps      %xmm14,%xmm13
  .byte  69,15,20,236                        // unpcklps      %xmm12,%xmm13
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gauss_a_to_rgba_sse2
.globl _sk_gauss_a_to_rgba_sse2
FUNCTION(_sk_gauss_a_to_rgba_sse2)
_sk_gauss_a_to_rgba_sse2:
  .byte  15,40,5,86,22,0,0                   // movaps        0x1656(%rip),%xmm0        # 6530 <_sk_callback_sse2+0xf80>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,92,22,0,0                   // addps         0x165c(%rip),%xmm0        # 6540 <_sk_callback_sse2+0xf90>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,98,22,0,0                   // addps         0x1662(%rip),%xmm0        # 6550 <_sk_callback_sse2+0xfa0>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,104,22,0,0                  // addps         0x1668(%rip),%xmm0        # 6560 <_sk_callback_sse2+0xfb0>
  .byte  15,89,195                           // mulps         %xmm3,%xmm0
  .byte  15,88,5,110,22,0,0                  // addps         0x166e(%rip),%xmm0        # 6570 <_sk_callback_sse2+0xfc0>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,200                           // movaps        %xmm0,%xmm1
  .byte  15,40,208                           // movaps        %xmm0,%xmm2
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_gradient_sse2
.globl _sk_gradient_sse2
FUNCTION(_sk_gradient_sse2)
_sk_gradient_sse2:
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  83                                  // push          %rbx
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,8                            // mov           (%rax),%r9
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  73,131,249,2                        // cmp           $0x2,%r9
  .byte  114,50                              // jb            4f55 <_sk_gradient_sse2+0x46>
  .byte  72,139,88,72                        // mov           0x48(%rax),%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  102,15,239,201                      // pxor          %xmm1,%xmm1
  .byte  15,40,21,71,22,0,0                  // movaps        0x1647(%rip),%xmm2        # 6580 <_sk_callback_sse2+0xfd0>
  .byte  243,15,16,27                        // movss         (%rbx),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  15,194,216,2                        // cmpleps       %xmm0,%xmm3
  .byte  15,84,218                           // andps         %xmm2,%xmm3
  .byte  102,15,254,203                      // paddd         %xmm3,%xmm1
  .byte  72,131,195,4                        // add           $0x4,%rbx
  .byte  73,255,201                          // dec           %r9
  .byte  117,228                             // jne           4f39 <_sk_gradient_sse2+0x2a>
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,73,15,126,211                   // movq          %xmm2,%r11
  .byte  69,137,217                          // mov           %r11d,%r9d
  .byte  73,193,235,32                       // shr           $0x20,%r11
  .byte  102,72,15,126,203                   // movq          %xmm1,%rbx
  .byte  65,137,218                          // mov           %ebx,%r10d
  .byte  72,193,235,32                       // shr           $0x20,%rbx
  .byte  76,139,112,8                        // mov           0x8(%rax),%r14
  .byte  76,139,120,16                       // mov           0x10(%rax),%r15
  .byte  243,65,15,16,12,158                 // movss         (%r14,%rbx,4),%xmm1
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  243,71,15,16,4,150                  // movss         (%r14,%r10,4),%xmm8
  .byte  243,67,15,16,20,142                 // movss         (%r14,%r9,4),%xmm2
  .byte  68,15,20,194                        // unpcklps      %xmm2,%xmm8
  .byte  68,15,20,193                        // unpcklps      %xmm1,%xmm8
  .byte  76,139,112,40                       // mov           0x28(%rax),%r14
  .byte  243,65,15,16,12,158                 // movss         (%r14,%rbx,4),%xmm1
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  243,71,15,16,12,150                 // movss         (%r14,%r10,4),%xmm9
  .byte  243,67,15,16,20,142                 // movss         (%r14,%r9,4),%xmm2
  .byte  68,15,20,202                        // unpcklps      %xmm2,%xmm9
  .byte  68,15,20,201                        // unpcklps      %xmm1,%xmm9
  .byte  243,65,15,16,20,159                 // movss         (%r15,%rbx,4),%xmm2
  .byte  243,67,15,16,12,159                 // movss         (%r15,%r11,4),%xmm1
  .byte  15,20,209                           // unpcklps      %xmm1,%xmm2
  .byte  243,67,15,16,12,151                 // movss         (%r15,%r10,4),%xmm1
  .byte  243,67,15,16,28,143                 // movss         (%r15,%r9,4),%xmm3
  .byte  15,20,203                           // unpcklps      %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  76,139,112,48                       // mov           0x30(%rax),%r14
  .byte  243,65,15,16,20,158                 // movss         (%r14,%rbx,4),%xmm2
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  243,71,15,16,20,150                 // movss         (%r14,%r10,4),%xmm10
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  68,15,20,211                        // unpcklps      %xmm3,%xmm10
  .byte  68,15,20,210                        // unpcklps      %xmm2,%xmm10
  .byte  76,139,112,24                       // mov           0x18(%rax),%r14
  .byte  243,69,15,16,28,158                 // movss         (%r14,%rbx,4),%xmm11
  .byte  243,67,15,16,20,158                 // movss         (%r14,%r11,4),%xmm2
  .byte  68,15,20,218                        // unpcklps      %xmm2,%xmm11
  .byte  243,67,15,16,20,150                 // movss         (%r14,%r10,4),%xmm2
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  15,20,211                           // unpcklps      %xmm3,%xmm2
  .byte  65,15,20,211                        // unpcklps      %xmm11,%xmm2
  .byte  76,139,112,56                       // mov           0x38(%rax),%r14
  .byte  243,69,15,16,36,158                 // movss         (%r14,%rbx,4),%xmm12
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  68,15,20,227                        // unpcklps      %xmm3,%xmm12
  .byte  243,71,15,16,28,150                 // movss         (%r14,%r10,4),%xmm11
  .byte  243,67,15,16,28,142                 // movss         (%r14,%r9,4),%xmm3
  .byte  68,15,20,219                        // unpcklps      %xmm3,%xmm11
  .byte  69,15,20,220                        // unpcklps      %xmm12,%xmm11
  .byte  76,139,112,32                       // mov           0x20(%rax),%r14
  .byte  243,69,15,16,36,158                 // movss         (%r14,%rbx,4),%xmm12
  .byte  243,67,15,16,28,158                 // movss         (%r14,%r11,4),%xmm3
  .byte  68,15,20,227                        // unpcklps      %xmm3,%xmm12
  .byte  243,67,15,16,28,150                 // movss         (%r14,%r10,4),%xmm3
  .byte  243,71,15,16,44,142                 // movss         (%r14,%r9,4),%xmm13
  .byte  65,15,20,221                        // unpcklps      %xmm13,%xmm3
  .byte  65,15,20,220                        // unpcklps      %xmm12,%xmm3
  .byte  72,139,64,64                        // mov           0x40(%rax),%rax
  .byte  243,68,15,16,36,152                 // movss         (%rax,%rbx,4),%xmm12
  .byte  243,70,15,16,44,152                 // movss         (%rax,%r11,4),%xmm13
  .byte  69,15,20,229                        // unpcklps      %xmm13,%xmm12
  .byte  243,70,15,16,44,144                 // movss         (%rax,%r10,4),%xmm13
  .byte  243,70,15,16,52,136                 // movss         (%rax,%r9,4),%xmm14
  .byte  69,15,20,238                        // unpcklps      %xmm14,%xmm13
  .byte  69,15,20,236                        // unpcklps      %xmm12,%xmm13
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  69,15,88,193                        // addps         %xmm9,%xmm8
  .byte  15,89,200                           // mulps         %xmm0,%xmm1
  .byte  65,15,88,202                        // addps         %xmm10,%xmm1
  .byte  15,89,208                           // mulps         %xmm0,%xmm2
  .byte  65,15,88,211                        // addps         %xmm11,%xmm2
  .byte  15,89,216                           // mulps         %xmm0,%xmm3
  .byte  65,15,88,221                        // addps         %xmm13,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  65,15,40,192                        // movaps        %xmm8,%xmm0
  .byte  91                                  // pop           %rbx
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_evenly_spaced_2_stop_gradient_sse2
.globl _sk_evenly_spaced_2_stop_gradient_sse2
FUNCTION(_sk_evenly_spaced_2_stop_gradient_sse2)
_sk_evenly_spaced_2_stop_gradient_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  15,198,192,0                        // shufps        $0x0,%xmm0,%xmm0
  .byte  243,15,16,80,16                     // movss         0x10(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,192                        // mulps         %xmm8,%xmm0
  .byte  15,88,194                           // addps         %xmm2,%xmm0
  .byte  15,198,201,0                        // shufps        $0x0,%xmm1,%xmm1
  .byte  243,15,16,80,20                     // movss         0x14(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  65,15,89,200                        // mulps         %xmm8,%xmm1
  .byte  15,88,202                           // addps         %xmm2,%xmm1
  .byte  243,15,16,80,8                      // movss         0x8(%rax),%xmm2
  .byte  15,198,210,0                        // shufps        $0x0,%xmm2,%xmm2
  .byte  243,15,16,88,24                     // movss         0x18(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  65,15,89,208                        // mulps         %xmm8,%xmm2
  .byte  15,88,211                           // addps         %xmm3,%xmm2
  .byte  243,15,16,88,12                     // movss         0xc(%rax),%xmm3
  .byte  15,198,219,0                        // shufps        $0x0,%xmm3,%xmm3
  .byte  243,68,15,16,72,28                  // movss         0x1c(%rax),%xmm9
  .byte  69,15,198,201,0                     // shufps        $0x0,%xmm9,%xmm9
  .byte  65,15,89,216                        // mulps         %xmm8,%xmm3
  .byte  65,15,88,217                        // addps         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_unit_angle_sse2
.globl _sk_xy_to_unit_angle_sse2
FUNCTION(_sk_xy_to_unit_angle_sse2)
_sk_xy_to_unit_angle_sse2:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  69,15,87,201                        // xorps         %xmm9,%xmm9
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,84,200                        // andps         %xmm8,%xmm9
  .byte  69,15,87,210                        // xorps         %xmm10,%xmm10
  .byte  68,15,92,209                        // subps         %xmm1,%xmm10
  .byte  68,15,84,209                        // andps         %xmm1,%xmm10
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,93,218                        // minps         %xmm10,%xmm11
  .byte  69,15,40,225                        // movaps        %xmm9,%xmm12
  .byte  69,15,95,226                        // maxps         %xmm10,%xmm12
  .byte  69,15,94,220                        // divps         %xmm12,%xmm11
  .byte  69,15,40,227                        // movaps        %xmm11,%xmm12
  .byte  69,15,89,228                        // mulps         %xmm12,%xmm12
  .byte  68,15,40,45,8,20,0,0                // movaps        0x1408(%rip),%xmm13        # 6590 <_sk_callback_sse2+0xfe0>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,12,20,0,0               // addps         0x140c(%rip),%xmm13        # 65a0 <_sk_callback_sse2+0xff0>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,16,20,0,0               // addps         0x1410(%rip),%xmm13        # 65b0 <_sk_callback_sse2+0x1000>
  .byte  69,15,89,236                        // mulps         %xmm12,%xmm13
  .byte  68,15,88,45,20,20,0,0               // addps         0x1414(%rip),%xmm13        # 65c0 <_sk_callback_sse2+0x1010>
  .byte  69,15,89,235                        // mulps         %xmm11,%xmm13
  .byte  69,15,194,202,1                     // cmpltps       %xmm10,%xmm9
  .byte  68,15,40,21,19,20,0,0               // movaps        0x1413(%rip),%xmm10        # 65d0 <_sk_callback_sse2+0x1020>
  .byte  69,15,92,213                        // subps         %xmm13,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  69,15,85,205                        // andnps        %xmm13,%xmm9
  .byte  69,15,86,202                        // orps          %xmm10,%xmm9
  .byte  68,15,194,192,1                     // cmpltps       %xmm0,%xmm8
  .byte  68,15,40,21,6,20,0,0                // movaps        0x1406(%rip),%xmm10        # 65e0 <_sk_callback_sse2+0x1030>
  .byte  69,15,92,209                        // subps         %xmm9,%xmm10
  .byte  69,15,84,208                        // andps         %xmm8,%xmm10
  .byte  69,15,85,193                        // andnps        %xmm9,%xmm8
  .byte  69,15,86,194                        // orps          %xmm10,%xmm8
  .byte  68,15,40,201                        // movaps        %xmm1,%xmm9
  .byte  68,15,194,200,1                     // cmpltps       %xmm0,%xmm9
  .byte  68,15,40,21,245,19,0,0              // movaps        0x13f5(%rip),%xmm10        # 65f0 <_sk_callback_sse2+0x1040>
  .byte  69,15,92,208                        // subps         %xmm8,%xmm10
  .byte  69,15,84,209                        // andps         %xmm9,%xmm10
  .byte  69,15,85,200                        // andnps        %xmm8,%xmm9
  .byte  69,15,86,202                        // orps          %xmm10,%xmm9
  .byte  65,15,194,193,7                     // cmpordps      %xmm9,%xmm0
  .byte  65,15,84,193                        // andps         %xmm9,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xy_to_radius_sse2
.globl _sk_xy_to_radius_sse2
FUNCTION(_sk_xy_to_radius_sse2)
_sk_xy_to_radius_sse2:
  .byte  15,89,192                           // mulps         %xmm0,%xmm0
  .byte  68,15,40,193                        // movaps        %xmm1,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,88,192                        // addps         %xmm0,%xmm8
  .byte  65,15,81,192                        // sqrtps        %xmm8,%xmm0
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_save_xy_sse2
.globl _sk_save_xy_sse2
FUNCTION(_sk_save_xy_sse2)
_sk_save_xy_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,199,19,0,0               // movaps        0x13c7(%rip),%xmm8        # 6600 <_sk_callback_sse2+0x1050>
  .byte  15,17,0                             // movups        %xmm0,(%rax)
  .byte  68,15,40,200                        // movaps        %xmm0,%xmm9
  .byte  69,15,88,200                        // addps         %xmm8,%xmm9
  .byte  243,69,15,91,209                    // cvttps2dq     %xmm9,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,40,217                        // movaps        %xmm9,%xmm11
  .byte  69,15,194,218,1                     // cmpltps       %xmm10,%xmm11
  .byte  68,15,40,37,178,19,0,0              // movaps        0x13b2(%rip),%xmm12        # 6610 <_sk_callback_sse2+0x1060>
  .byte  69,15,84,220                        // andps         %xmm12,%xmm11
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  69,15,92,202                        // subps         %xmm10,%xmm9
  .byte  68,15,88,193                        // addps         %xmm1,%xmm8
  .byte  243,69,15,91,208                    // cvttps2dq     %xmm8,%xmm10
  .byte  69,15,91,210                        // cvtdq2ps      %xmm10,%xmm10
  .byte  69,15,40,216                        // movaps        %xmm8,%xmm11
  .byte  69,15,194,218,1                     // cmpltps       %xmm10,%xmm11
  .byte  69,15,84,220                        // andps         %xmm12,%xmm11
  .byte  69,15,92,211                        // subps         %xmm11,%xmm10
  .byte  69,15,92,194                        // subps         %xmm10,%xmm8
  .byte  15,17,72,32                         // movups        %xmm1,0x20(%rax)
  .byte  68,15,17,72,64                      // movups        %xmm9,0x40(%rax)
  .byte  68,15,17,64,96                      // movups        %xmm8,0x60(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_accumulate_sse2
.globl _sk_accumulate_sse2
FUNCTION(_sk_accumulate_sse2)
_sk_accumulate_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,16,128,128,0,0,0              // movups        0x80(%rax),%xmm8
  .byte  68,15,16,136,160,0,0,0              // movups        0xa0(%rax),%xmm9
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,192                        // mulps         %xmm0,%xmm8
  .byte  65,15,88,224                        // addps         %xmm8,%xmm4
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,193                        // mulps         %xmm1,%xmm8
  .byte  65,15,88,232                        // addps         %xmm8,%xmm5
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  68,15,89,194                        // mulps         %xmm2,%xmm8
  .byte  65,15,88,240                        // addps         %xmm8,%xmm6
  .byte  68,15,89,203                        // mulps         %xmm3,%xmm9
  .byte  65,15,88,249                        // addps         %xmm9,%xmm7
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_nx_sse2
.globl _sk_bilinear_nx_sse2
FUNCTION(_sk_bilinear_nx_sse2)
_sk_bilinear_nx_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,43,19,0,0                   // addps         0x132b(%rip),%xmm0        # 6620 <_sk_callback_sse2+0x1070>
  .byte  68,15,40,13,51,19,0,0               // movaps        0x1333(%rip),%xmm9        # 6630 <_sk_callback_sse2+0x1080>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_px_sse2
.globl _sk_bilinear_px_sse2
FUNCTION(_sk_bilinear_px_sse2)
_sk_bilinear_px_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,34,19,0,0                   // addps         0x1322(%rip),%xmm0        # 6640 <_sk_callback_sse2+0x1090>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_ny_sse2
.globl _sk_bilinear_ny_sse2
FUNCTION(_sk_bilinear_ny_sse2)
_sk_bilinear_ny_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,20,19,0,0                  // addps         0x1314(%rip),%xmm1        # 6650 <_sk_callback_sse2+0x10a0>
  .byte  68,15,40,13,28,19,0,0               // movaps        0x131c(%rip),%xmm9        # 6660 <_sk_callback_sse2+0x10b0>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bilinear_py_sse2
.globl _sk_bilinear_py_sse2
FUNCTION(_sk_bilinear_py_sse2)
_sk_bilinear_py_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,10,19,0,0                  // addps         0x130a(%rip),%xmm1        # 6670 <_sk_callback_sse2+0x10c0>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3x_sse2
.globl _sk_bicubic_n3x_sse2
FUNCTION(_sk_bicubic_n3x_sse2)
_sk_bicubic_n3x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,253,18,0,0                  // addps         0x12fd(%rip),%xmm0        # 6680 <_sk_callback_sse2+0x10d0>
  .byte  68,15,40,13,5,19,0,0                // movaps        0x1305(%rip),%xmm9        # 6690 <_sk_callback_sse2+0x10e0>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,1,19,0,0                // mulps         0x1301(%rip),%xmm9        # 66a0 <_sk_callback_sse2+0x10f0>
  .byte  68,15,88,13,9,19,0,0                // addps         0x1309(%rip),%xmm9        # 66b0 <_sk_callback_sse2+0x1100>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,128,0,0,0              // movups        %xmm9,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1x_sse2
.globl _sk_bicubic_n1x_sse2
FUNCTION(_sk_bicubic_n1x_sse2)
_sk_bicubic_n1x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,248,18,0,0                  // addps         0x12f8(%rip),%xmm0        # 66c0 <_sk_callback_sse2+0x1110>
  .byte  68,15,40,13,0,19,0,0                // movaps        0x1300(%rip),%xmm9        # 66d0 <_sk_callback_sse2+0x1120>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,4,19,0,0                 // movaps        0x1304(%rip),%xmm8        # 66e0 <_sk_callback_sse2+0x1130>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,8,19,0,0                 // addps         0x1308(%rip),%xmm8        # 66f0 <_sk_callback_sse2+0x1140>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,12,19,0,0                // addps         0x130c(%rip),%xmm8        # 6700 <_sk_callback_sse2+0x1150>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,16,19,0,0                // addps         0x1310(%rip),%xmm8        # 6710 <_sk_callback_sse2+0x1160>
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1x_sse2
.globl _sk_bicubic_p1x_sse2
FUNCTION(_sk_bicubic_p1x_sse2)
_sk_bicubic_p1x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,10,19,0,0                // movaps        0x130a(%rip),%xmm8        # 6720 <_sk_callback_sse2+0x1170>
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,72,64                      // movups        0x40(%rax),%xmm9
  .byte  65,15,88,192                        // addps         %xmm8,%xmm0
  .byte  68,15,40,21,6,19,0,0                // movaps        0x1306(%rip),%xmm10        # 6730 <_sk_callback_sse2+0x1180>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,10,19,0,0               // addps         0x130a(%rip),%xmm10        # 6740 <_sk_callback_sse2+0x1190>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,6,19,0,0                // addps         0x1306(%rip),%xmm10        # 6750 <_sk_callback_sse2+0x11a0>
  .byte  68,15,17,144,128,0,0,0              // movups        %xmm10,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3x_sse2
.globl _sk_bicubic_p3x_sse2
FUNCTION(_sk_bicubic_p3x_sse2)
_sk_bicubic_p3x_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,0                             // movups        (%rax),%xmm0
  .byte  68,15,16,64,64                      // movups        0x40(%rax),%xmm8
  .byte  15,88,5,249,18,0,0                  // addps         0x12f9(%rip),%xmm0        # 6760 <_sk_callback_sse2+0x11b0>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,249,18,0,0               // mulps         0x12f9(%rip),%xmm8        # 6770 <_sk_callback_sse2+0x11c0>
  .byte  68,15,88,5,1,19,0,0                 // addps         0x1301(%rip),%xmm8        # 6780 <_sk_callback_sse2+0x11d0>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,128,0,0,0              // movups        %xmm8,0x80(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n3y_sse2
.globl _sk_bicubic_n3y_sse2
FUNCTION(_sk_bicubic_n3y_sse2)
_sk_bicubic_n3y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,239,18,0,0                 // addps         0x12ef(%rip),%xmm1        # 6790 <_sk_callback_sse2+0x11e0>
  .byte  68,15,40,13,247,18,0,0              // movaps        0x12f7(%rip),%xmm9        # 67a0 <_sk_callback_sse2+0x11f0>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  69,15,40,193                        // movaps        %xmm9,%xmm8
  .byte  69,15,89,192                        // mulps         %xmm8,%xmm8
  .byte  68,15,89,13,243,18,0,0              // mulps         0x12f3(%rip),%xmm9        # 67b0 <_sk_callback_sse2+0x1200>
  .byte  68,15,88,13,251,18,0,0              // addps         0x12fb(%rip),%xmm9        # 67c0 <_sk_callback_sse2+0x1210>
  .byte  69,15,89,200                        // mulps         %xmm8,%xmm9
  .byte  68,15,17,136,160,0,0,0              // movups        %xmm9,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_n1y_sse2
.globl _sk_bicubic_n1y_sse2
FUNCTION(_sk_bicubic_n1y_sse2)
_sk_bicubic_n1y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,233,18,0,0                 // addps         0x12e9(%rip),%xmm1        # 67d0 <_sk_callback_sse2+0x1220>
  .byte  68,15,40,13,241,18,0,0              // movaps        0x12f1(%rip),%xmm9        # 67e0 <_sk_callback_sse2+0x1230>
  .byte  69,15,92,200                        // subps         %xmm8,%xmm9
  .byte  68,15,40,5,245,18,0,0               // movaps        0x12f5(%rip),%xmm8        # 67f0 <_sk_callback_sse2+0x1240>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,249,18,0,0               // addps         0x12f9(%rip),%xmm8        # 6800 <_sk_callback_sse2+0x1250>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,253,18,0,0               // addps         0x12fd(%rip),%xmm8        # 6810 <_sk_callback_sse2+0x1260>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,88,5,1,19,0,0                 // addps         0x1301(%rip),%xmm8        # 6820 <_sk_callback_sse2+0x1270>
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p1y_sse2
.globl _sk_bicubic_p1y_sse2
FUNCTION(_sk_bicubic_p1y_sse2)
_sk_bicubic_p1y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  68,15,40,5,251,18,0,0               // movaps        0x12fb(%rip),%xmm8        # 6830 <_sk_callback_sse2+0x1280>
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,72,96                      // movups        0x60(%rax),%xmm9
  .byte  65,15,88,200                        // addps         %xmm8,%xmm1
  .byte  68,15,40,21,246,18,0,0              // movaps        0x12f6(%rip),%xmm10        # 6840 <_sk_callback_sse2+0x1290>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,250,18,0,0              // addps         0x12fa(%rip),%xmm10        # 6850 <_sk_callback_sse2+0x12a0>
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  69,15,88,208                        // addps         %xmm8,%xmm10
  .byte  69,15,89,209                        // mulps         %xmm9,%xmm10
  .byte  68,15,88,21,246,18,0,0              // addps         0x12f6(%rip),%xmm10        # 6860 <_sk_callback_sse2+0x12b0>
  .byte  68,15,17,144,160,0,0,0              // movups        %xmm10,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_bicubic_p3y_sse2
.globl _sk_bicubic_p3y_sse2
FUNCTION(_sk_bicubic_p3y_sse2)
_sk_bicubic_p3y_sse2:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,72,32                         // movups        0x20(%rax),%xmm1
  .byte  68,15,16,64,96                      // movups        0x60(%rax),%xmm8
  .byte  15,88,13,232,18,0,0                 // addps         0x12e8(%rip),%xmm1        # 6870 <_sk_callback_sse2+0x12c0>
  .byte  69,15,40,200                        // movaps        %xmm8,%xmm9
  .byte  69,15,89,201                        // mulps         %xmm9,%xmm9
  .byte  68,15,89,5,232,18,0,0               // mulps         0x12e8(%rip),%xmm8        # 6880 <_sk_callback_sse2+0x12d0>
  .byte  68,15,88,5,240,18,0,0               // addps         0x12f0(%rip),%xmm8        # 6890 <_sk_callback_sse2+0x12e0>
  .byte  69,15,89,193                        // mulps         %xmm9,%xmm8
  .byte  68,15,17,128,160,0,0,0              // movups        %xmm8,0xa0(%rax)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_callback_sse2
.globl _sk_callback_sse2
FUNCTION(_sk_callback_sse2)
_sk_callback_sse2:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  72,131,236,72                       // sub           $0x48,%rsp
  .byte  15,41,125,144                       // movaps        %xmm7,-0x70(%rbp)
  .byte  15,41,117,160                       // movaps        %xmm6,-0x60(%rbp)
  .byte  15,41,109,176                       // movaps        %xmm5,-0x50(%rbp)
  .byte  15,41,101,192                       // movaps        %xmm4,-0x40(%rbp)
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  72,137,77,208                       // mov           %rcx,-0x30(%rbp)
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,252                          // mov           %rdi,%r12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,198                          // mov           %rax,%r14
  .byte  73,137,245                          // mov           %rsi,%r13
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,20,225                           // unpcklps      %xmm1,%xmm4
  .byte  15,40,234                           // movaps        %xmm2,%xmm5
  .byte  15,20,235                           // unpcklps      %xmm3,%xmm5
  .byte  15,21,193                           // unpckhps      %xmm1,%xmm0
  .byte  15,21,211                           // unpckhps      %xmm3,%xmm2
  .byte  15,40,204                           // movaps        %xmm4,%xmm1
  .byte  102,15,20,205                       // unpcklpd      %xmm5,%xmm1
  .byte  15,18,236                           // movhlps       %xmm4,%xmm5
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  102,15,20,218                       // unpcklpd      %xmm2,%xmm3
  .byte  102,65,15,17,78,8                   // movupd        %xmm1,0x8(%r14)
  .byte  15,18,208                           // movhlps       %xmm0,%xmm2
  .byte  65,15,17,110,24                     // movups        %xmm5,0x18(%r14)
  .byte  102,65,15,17,94,40                  // movupd        %xmm3,0x28(%r14)
  .byte  65,15,17,86,56                      // movups        %xmm2,0x38(%r14)
  .byte  72,133,219                          // test          %rbx,%rbx
  .byte  190,4,0,0,0                         // mov           $0x4,%esi
  .byte  15,69,243                           // cmovne        %ebx,%esi
  .byte  76,137,247                          // mov           %r14,%rdi
  .byte  65,255,22                           // callq         *(%r14)
  .byte  73,139,134,136,0,0,0                // mov           0x88(%r14),%rax
  .byte  15,16,32                            // movups        (%rax),%xmm4
  .byte  15,16,64,16                         // movups        0x10(%rax),%xmm0
  .byte  15,16,88,32                         // movups        0x20(%rax),%xmm3
  .byte  15,16,80,48                         // movups        0x30(%rax),%xmm2
  .byte  15,40,236                           // movaps        %xmm4,%xmm5
  .byte  15,20,232                           // unpcklps      %xmm0,%xmm5
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  15,20,202                           // unpcklps      %xmm2,%xmm1
  .byte  15,21,224                           // unpckhps      %xmm0,%xmm4
  .byte  15,21,218                           // unpckhps      %xmm2,%xmm3
  .byte  15,40,197                           // movaps        %xmm5,%xmm0
  .byte  102,15,20,193                       // unpcklpd      %xmm1,%xmm0
  .byte  15,18,205                           // movhlps       %xmm5,%xmm1
  .byte  15,40,212                           // movaps        %xmm4,%xmm2
  .byte  102,15,20,211                       // unpcklpd      %xmm3,%xmm2
  .byte  15,18,220                           // movhlps       %xmm4,%xmm3
  .byte  76,137,238                          // mov           %r13,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,137,231                          // mov           %r12,%rdi
  .byte  76,137,250                          // mov           %r15,%rdx
  .byte  72,139,77,208                       // mov           -0x30(%rbp),%rcx
  .byte  73,137,216                          // mov           %rbx,%r8
  .byte  15,40,101,192                       // movaps        -0x40(%rbp),%xmm4
  .byte  15,40,109,176                       // movaps        -0x50(%rbp),%xmm5
  .byte  15,40,117,160                       // movaps        -0x60(%rbp),%xmm6
  .byte  15,40,125,144                       // movaps        -0x70(%rbp),%xmm7
  .byte  72,131,196,72                       // add           $0x48,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  255,224                             // jmpq          *%rax

BALIGN16
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,1                            // cmpb          $0x1,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  4,0                                 // add           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  2,0                                 // add           (%rax),%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  128,60,0,0                          // cmpb          $0x0,(%rax,%rax,1)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  252                                 // cld
  .byte  190,0,0,252,190                     // mov           $0xbefc0000,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  191,0,0,128,191                     // mov           $0xbf800000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%rdi)
  .byte  0,224                               // add           %ah,%al
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  224,64                              // loopne        5888 <.literal16+0x1d8>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        588c <.literal16+0x1dc>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,64                              // loopne        5890 <.literal16+0x1e0>
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 58b1 <.literal16+0x201>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 58b5 <.literal16+0x205>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 58b9 <.literal16+0x209>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 58bd <.literal16+0x20d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 58f1 <.literal16+0x241>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 58f5 <.literal16+0x245>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 58f9 <.literal16+0x249>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 58fd <.literal16+0x24d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5931 <.literal16+0x281>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5935 <.literal16+0x285>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5939 <.literal16+0x289>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 593d <.literal16+0x28d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,154                          // cmpb          $0x9a,(%rdi)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,61,10,23,63,61                   // ds            cmp $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  61,10,23,63,61                      // cmp           $0x3d3f170a,%eax
  .byte  10,23                               // or            (%rdi),%dl
  .byte  63                                  // (bad)
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5971 <.literal16+0x2c1>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5975 <.literal16+0x2c5>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 5979 <.literal16+0x2c9>
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,225,61                           // rex.RXB       loope 597d <.literal16+0x2cd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,255                          // cmpb          $0xff,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,127                    // add           %al,0x7f00003f(%rax)
  .byte  67,0,0                              // rex.XB        add %al,(%r8)
  .byte  127,67                              // jg            59bb <.literal16+0x30b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            59bf <.literal16+0x30f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            59c3 <.literal16+0x313>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  145                                 // xchg          %eax,%ecx
  .byte  131,158,61,145,131,158,61           // sbbl          $0x3d,-0x617c6ec3(%rsi)
  .byte  154                                 // (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,154                              // ds            (bad)
  .byte  153                                 // cltd
  .byte  153                                 // cltd
  .byte  62,92                               // ds            pop %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  92                                  // pop           %rsp
  .byte  143                                 // (bad)
  .byte  50,63                               // xor           (%rdi),%bh
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  35,59                               // and           (%rbx),%edi
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  174                                 // scas          %es:(%rdi),%al
  .byte  71,97                               // rex.RXB       (bad)
  .byte  61,174,71,97,61                     // cmp           $0x3d6147ae,%eax
  .byte  82                                  // push          %rdx
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // rex.WRX
  .byte  65,82                               // push          %r10
  .byte  184,78,65,82,184                    // mov           $0xb852414e,%eax
  .byte  78                                  // rex.WRX
  .byte  65,57,215                           // cmp           %edx,%r15d
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%rbx)
  .byte  57,215                              // cmp           %edx,%edi
  .byte  32,187,57,215,32,187                // and           %bh,-0x44df28c7(%rbx)
  .byte  186,159,98,60,186                   // mov           $0xba3c629f,%edx
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,186                              // cmp           $0xba,%al
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,186                              // cmp           $0xba,%al
  .byte  159                                 // lahf
  .byte  98                                  // (bad)
  .byte  60,109                              // cmp           $0x6d,%al
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  109                                 // insl          (%dx),%es:(%rdi)
  .byte  165                                 // movsl         %ds:(%rsi),%es:(%rdi)
  .byte  144                                 // nop
  .byte  63                                  // (bad)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%rsi)
  .byte  252                                 // cld
  .byte  191,16,62,252,191                   // mov           $0xbffc3e10,%edi
  .byte  16,62                               // adc           %bh,(%rsi)
  .byte  168,177                             // test          $0xb1,%al
  .byte  152                                 // cwtl
  .byte  59,168,177,152,59,168               // cmp           -0x57c4674f(%rax),%ebp
  .byte  177,152                             // mov           $0x98,%cl
  .byte  59,168,177,152,59,0                 // cmp           0x3b98b1(%rax),%ebp
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,192                    // add           %al,-0x3fffffc1(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  0,64,0                              // add           %al,0x0(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  64,0,0                              // add           %al,(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,171                          // cmpb          $0xab,(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,63                               // sub           (%rdi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  192,64,0,0                          // rolb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,0,0                          // addb          $0x0,0x0(%rax)
  .byte  128,64,171,170                      // addb          $0xaa,-0x55(%rax)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  42,62                               // sub           (%rsi),%bh
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        5ba9 <.literal16+0x4f9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5bad <.literal16+0x4fd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5bb1 <.literal16+0x501>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        5bb5 <.literal16+0x505>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,255,0              // addb          $0x0,-0xff00c5(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5c8b <.literal16+0x5db>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5c8f <.literal16+0x5df>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            5c93 <.literal16+0x5e3>
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5c84 <.literal16+0x5d4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5c88 <.literal16+0x5d8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5c8c <.literal16+0x5dc>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5c90 <.literal16+0x5e0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5d15 <.literal16+0x665>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5c79 <.literal16+0x5c9>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a39cba <_sk_callback_sse2+0xffffffffe9a3470a>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5d54 <.literal16+0x6a4>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5d58 <.literal16+0x6a8>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5d5c <.literal16+0x6ac>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5d60 <.literal16+0x6b0>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5de5 <.literal16+0x735>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5d49 <.literal16+0x699>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a39d8a <_sk_callback_sse2+0xffffffffe9a347da>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5e24 <.literal16+0x774>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5e28 <.literal16+0x778>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5e2c <.literal16+0x77c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5e30 <.literal16+0x780>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5eb5 <.literal16+0x805>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5e19 <.literal16+0x769>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a39e5a <_sk_callback_sse2+0xffffffffe9a348aa>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,52,0                              // add           %dh,(%rax,%rax,1)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,0                                // xor           $0x0,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  52,255                              // xor           $0xff,%al
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5ef4 <.literal16+0x844>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5ef8 <.literal16+0x848>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5efc <.literal16+0x84c>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  127,0                               // jg            5f00 <.literal16+0x850>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  119,115                             // ja            5f85 <.literal16+0x8d5>
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,119,115                         // retq          $0x7377
  .byte  248                                 // clc
  .byte  194,117,191                         // retq          $0xbf75
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  117,191                             // jne           5ee9 <.literal16+0x839>
  .byte  191,63,117,191,191                  // mov           $0xbfbf753f,%edi
  .byte  63                                  // (bad)
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  249                                 // stc
  .byte  68,180,62                           // rex.R         mov $0x3e,%spl
  .byte  163,233,220,63,163,233,220,63,163   // movabs        %eax,0xa33fdce9a33fdce9
  .byte  233,220,63,163,233                  // jmpq          ffffffffe9a39f2a <_sk_callback_sse2+0xffffffffe9a3497a>
  .byte  220,63                              // fdivrl        (%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,81                           // cmpb          $0x51,(%rdi)
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,81                               // rex.X         push %rcx
  .byte  140,242                             // mov           %?,%edx
  .byte  66,141,188,190,63,141,188,190       // lea           -0x414372c1(%rsi,%r15,4),%edi
  .byte  63                                  // (bad)
  .byte  141,188,190,63,141,188,190          // lea           -0x414372c1(%rsi,%rdi,4),%edi
  .byte  63                                  // (bad)
  .byte  248                                 // clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,248                              // rex           clc
  .byte  245                                 // cmc
  .byte  154                                 // (bad)
  .byte  64,254                              // rex           (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,254                              // rex.B         (bad)
  .byte  210,221                             // rcr           %cl,%ch
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  0,75,0                              // add           %cl,0x0(%rbx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  75,0,0                              // rex.WXB       add %al,(%r8)
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  200,66,0,0                          // enterq        $0x42,$0x0
  .byte  127,67                              // jg            6007 <.literal16+0x957>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            600b <.literal16+0x95b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            600f <.literal16+0x95f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            6013 <.literal16+0x963>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,195                               // add           %al,%bl
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,0,0                          // addb          $0x0,0x0(%rcx)
  .byte  128,65,203,61                       // addb          $0x3d,-0x35(%rcx)
  .byte  13,60,203,61,13                     // or            $0xd3dcb3c,%eax
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,60,203,61                     // cmp           $0x3dcb3c0d,%eax
  .byte  13,60,111,18,3                      // or            $0x3126f3c,%eax
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  18,3                                // adc           (%rbx),%al
  .byte  59,111,18                           // cmp           0x12(%rdi),%ebp
  .byte  3,59                                // add           (%rbx),%edi
  .byte  10,215                              // or            %bh,%dl
  .byte  163,59,10,215,163,59,10,215,163     // movabs        %eax,0xa3d70a3ba3d70a3b
  .byte  59,10                               // cmp           (%rdx),%ecx
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  163,59,194,24,17,60,194,24,17       // movabs        %eax,0x1118c23c1118c23b
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,194                              // cmp           $0xc2,%al
  .byte  24,17                               // sbb           %dl,(%rcx)
  .byte  60,203                              // cmp           $0xcb,%al
  .byte  61,13,190,203,61                    // cmp           $0x3dcbbe0d,%eax
  .byte  13,190,203,61,13                    // or            $0xd3dcbbe,%eax
  .byte  190,203,61,13,190                   // mov           $0xbe0d3dcb,%esi
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  80                                  // push          %rax
  .byte  128,3,62                            // addb          $0x3e,(%rbx)
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           6093 <.literal16+0x9e3>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           6097 <.literal16+0x9e7>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           609b <.literal16+0x9eb>
  .byte  31                                  // (bad)
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  118,63                              // jbe           609f <.literal16+0x9ef>
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  246,64,83,63                        // testb         $0x3f,0x53(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,129,128,128,59           // addb          $0x3b,-0x7f7f7ec5(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,0                            // cmpb          $0x0,(%rbx)
  .byte  0,127,67                            // add           %bh,0x43(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            60eb <.literal16+0xa3b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            60ef <.literal16+0xa3f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            60f3 <.literal16+0xa43>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,128,63               // addb          $0x3f,-0x7fffffc5(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,248,0,0                // addb          $0x0,0xf8003b(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        6149 <.literal16+0xa99>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        614d <.literal16+0xa9d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6151 <.literal16+0xaa1>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        6155 <.literal16+0xaa5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  248                                 // clc
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,248                               // add           %bh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  132,55                              // test          %dh,(%rdi)
  .byte  224,7                               // loopne        61b9 <.literal16+0xb09>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        61bd <.literal16+0xb0d>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        61c1 <.literal16+0xb11>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  224,7                               // loopne        61c5 <.literal16+0xb15>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  33,8                                // and           %ecx,(%rax)
  .byte  2,58                                // add           (%rdx),%bh
  .byte  31                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,31                                // add           %bl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,8                                 // add           %cl,(%rax)
  .byte  33,4,61,8,33,4,61                   // and           %eax,0x3d042108(,%rdi,1)
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  8,33                                // or            %ah,(%rcx)
  .byte  4,61                                // add           $0x3d,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,248                               // add           %bh,%al
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  248                                 // clc
  .byte  65,0,0                              // add           %al,(%r8)
  .byte  124,66                              // jl            6256 <.literal16+0xba6>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            625a <.literal16+0xbaa>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            625e <.literal16+0xbae>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  124,66                              // jl            6262 <.literal16+0xbb2>
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  137,136,136,55,137,136              // mov           %ecx,-0x7776c878(%rax)
  .byte  136,55                              // mov           %dh,(%rdi)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  137,136,136,57,137,136              // mov           %ecx,-0x7776c678(%rax)
  .byte  136,57                              // mov           %bh,(%rcx)
  .byte  240,0,0                             // lock          add %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,240                               // add           %dh,%al
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,59,137                // add           %cl,-0x76c47778(%rcx)
  .byte  136,136,59,137,136,136              // mov           %cl,-0x777776c5(%rax)
  .byte  59,137,136,136,59,15                // cmp           0xf3b8888(%rcx),%ecx
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,15                                // add           %cl,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,137,136,136,61,137                // add           %cl,-0x76c27778(%rcx)
  .byte  136,136,61,137,136,136              // mov           %cl,-0x777776c3(%rax)
  .byte  61,137,136,136,61                   // cmp           $0x3d888889,%eax
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6365 <.literal16+0xcb5>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6369 <.literal16+0xcb9>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            636d <.literal16+0xcbd>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  112,65                              // jo            6371 <.literal16+0xcc1>
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,255,0,0,0                // addb          $0x0,0xff3b(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  129,128,128,59,129,128,128,59,129,128// addl          $0x80813b80,-0x7f7ec480(%rax)
  .byte  128,59,129                          // cmpb          $0x81,(%rbx)
  .byte  128,128,59,0,0,127,67               // addb          $0x43,0x7f00003b(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            63bb <.literal16+0xd0b>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            63bf <.literal16+0xd0f>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  127,67                              // jg            63c3 <.literal16+0xd13>
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,4                             // addb          $0x4,(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,0                       // add           %al,0x0(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,56                                // add           %bh,(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,4                             // addb          $0x4,(%rax)
  .byte  0,128,0,4,0,128                     // add           %al,-0x7ffffc00(%rax)
  .byte  0,4,0                               // add           %al,(%rax,%rax,1)
  .byte  128,0,0                             // addb          $0x0,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,128,0,0,0,128                     // add           %al,-0x80000000(%rax)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,56,0                            // cmpb          $0x0,(%rax)
  .byte  0,128,56,0,0,128                    // add           %al,-0x7fffffc8(%rax)
  .byte  56,0                                // cmp           %al,(%rax)
  .byte  0,128,56,0,64,254                   // add           %al,-0x1bfffc8(%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  64,254                              // rex           (bad)
  .byte  255,128,0,128,55,128                // incl          -0x7fc88000(%rax)
  .byte  0,128,55,128,0,128                  // add           %al,-0x7fff7fc9(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  55                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  255                                 // (bad)
  .byte  127,71                              // jg            64ab <.literal16+0xdfb>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            64af <.literal16+0xdff>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            64b3 <.literal16+0xe03>
  .byte  0,255                               // add           %bh,%bh
  .byte  127,71                              // jg            64b7 <.literal16+0xe07>
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,191,0,0,128,191,0               // cmpb          $0x0,-0x40800000(%rdi)
  .byte  0,128,191,0,0,128                   // add           %al,-0x7fffff41(%rax)
  .byte  191,0,0,0,63                        // mov           $0x3f000000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,208                          // cmpb          $0xd0,(%rdi)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,208                              // ds            (bad)
  .byte  179,89                              // mov           $0x59,%bl
  .byte  62,89                               // ds            pop %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  89                                  // pop           %rcx
  .byte  23                                  // (bad)
  .byte  55                                  // (bad)
  .byte  63                                  // (bad)
  .byte  152                                 // cwtl
  .byte  221,147,61,152,221,147              // fstl          -0x6c2267c3(%rbx)
  .byte  61,152,221,147,61                   // cmp           $0x3d93dd98,%eax
  .byte  152                                 // cwtl
  .byte  221,147,61,45,16,17                 // fstl          0x11102d3d(%rbx)
  .byte  192,45,16,17,192,45,16              // shrb          $0x10,0x2dc01110(%rip)        # 2dc0764a <_sk_callback_sse2+0x2dc0209a>
  .byte  17,192                              // adc           %eax,%eax
  .byte  45,16,17,192,18                     // sub           $0x12c01110,%eax
  .byte  120,57                              // js            657c <.literal16+0xecc>
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,18,120,57                        // adc           0x39(%rax),%dil
  .byte  64,32,148,90,62,32,148,90           // and           %dl,0x5a94203e(%rdx,%rbx,2)
  .byte  62,32,148,90,62,32,148,90           // and           %dl,%ds:0x5a94203e(%rdx,%rbx,2)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,4,157                            // ds            add $0x9d,%al
  .byte  30                                  // (bad)
  .byte  62,0,24                             // add           %bl,%ds:(%rax)
  .byte  161,57,0,24,161,57,0,24,161         // movabs        0xa1180039a1180039,%eax
  .byte  57,0                                // cmp           %eax,(%rax)
  .byte  24,161,57,1,0,0                     // sbb           %ah,0x139(%rcx)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,1                                 // add           %al,(%rcx)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,111,43                            // add           %ch,0x2b(%rdi)
  .byte  231,187                             // out           %eax,$0xbb
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,111,43,231,187                  // mov           $0xbbe72b6f,%ebx
  .byte  111                                 // outsl         %ds:(%rsi),(%dx)
  .byte  43,231                              // sub           %edi,%esp
  .byte  187,159,215,202,60                  // mov           $0x3ccad79f,%ebx
  .byte  159                                 // lahf
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,159                          // lret          $0x9f3c
  .byte  215                                 // xlat          %ds:(%rbx)
  .byte  202,60,212                          // lret          $0xd43c
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  212                                 // (bad)
  .byte  100,84                              // fs            push %rsp
  .byte  189,212,100,84,189                  // mov           $0xbd5464d4,%ebp
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  169,240,34,62,169                   // test          $0xa93e22f0,%eax
  .byte  240,34,62                           // lock          and (%rsi),%bh
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,128,62,0,0,128                    // add           %al,-0x7fffffc2(%rax)
  .byte  62,0,0                              // add           %al,%ds:(%rax)
  .byte  128,62,0                            // cmpb          $0x0,(%rsi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  191,0,0,0,191                       // mov           $0xbf000000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         66c2 <.literal16+0x1012>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         66c6 <.literal16+0x1016>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         66ca <.literal16+0x101a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f555 <_sk_callback_sse2+0x3d639fa5>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f595 <_sk_callback_sse2+0x3d639fe5>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            678e <.literal16+0x10de>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6792 <.literal16+0x10e2>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         6796 <.literal16+0x10e6>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         679a <.literal16+0x10ea>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,191,0,0,192,191,0               // sarb          $0x0,-0x40400000(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  191,0,0,192,191                     // mov           $0xbfc00000,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,114                          // cmpb          $0x72,(%rdi)
  .byte  28,199                              // sbb           $0xc7,%al
  .byte  62,114,28                           // jb,pt         67d2 <.literal16+0x1122>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         67d6 <.literal16+0x1126>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         67da <.literal16+0x112a>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,191,0,0,0,191                     // add           %bh,-0x41000000(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,0                            // cmpb          $0x0,(%rdi)
  .byte  0,128,63,0,0,128                    // add           %al,-0x7fffffc1(%rax)
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,63,85                           // cmpb          $0x55,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f665 <_sk_callback_sse2+0x3d63a0b5>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  85                                  // push          %rbp
  .byte  85                                  // push          %rbp
  .byte  149                                 // xchg          %eax,%ebp
  .byte  191,85,85,149,191                   // mov           $0xbf955555,%edi
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  57,142,99,61,57,142                 // cmp           %ecx,-0x71c6c29d(%rsi)
  .byte  99,61,57,142,99,61                  // movslq        0x3d638e39(%rip),%edi        # 3d63f6a5 <_sk_callback_sse2+0x3d63a0f5>
  .byte  57,142,99,61,0,0                    // cmp           %ecx,0x3d63(%rsi)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  192,63,0                            // sarb          $0x0,(%rdi)
  .byte  0,192                               // add           %al,%al
  .byte  63                                  // (bad)
  .byte  114,28                              // jb            689e <.literal16+0x11ee>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         68a2 <_sk_callback_sse2+0x12f2>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         68a6 <_sk_callback_sse2+0x12f6>
  .byte  199                                 // (bad)
  .byte  62,114,28                           // jb,pt         68aa <_sk_callback_sse2+0x12fa>
  .byte  199                                 // (bad)
  .byte  62,171                              // ds            stos %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi
  .byte  171                                 // stos          %eax,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  170                                 // stos          %al,%es:(%rdi)
  .byte  190,171,170,170,190                 // mov           $0xbeaaaaab,%esi

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
  .byte  0,0                                 // add           %al,(%rax)
  .byte  0,63                                // add           %bh,(%rdi)
BALIGN32

HIDDEN _sk_start_pipeline_ssse3_lowp
.globl _sk_start_pipeline_ssse3_lowp
FUNCTION(_sk_start_pipeline_ssse3_lowp)
_sk_start_pipeline_ssse3_lowp:
  .byte  85                                  // push          %rbp
  .byte  72,137,229                          // mov           %rsp,%rbp
  .byte  65,87                               // push          %r15
  .byte  65,86                               // push          %r14
  .byte  65,85                               // push          %r13
  .byte  65,84                               // push          %r12
  .byte  83                                  // push          %rbx
  .byte  80                                  // push          %rax
  .byte  76,137,195                          // mov           %r8,%rbx
  .byte  73,137,215                          // mov           %rdx,%r15
  .byte  73,137,244                          // mov           %rsi,%r12
  .byte  73,137,254                          // mov           %rdi,%r14
  .byte  72,137,206                          // mov           %rcx,%rsi
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  73,137,197                          // mov           %rax,%r13
  .byte  73,141,78,8                         // lea           0x8(%r14),%rcx
  .byte  76,57,249                           // cmp           %r15,%rcx
  .byte  118,5                               // jbe           30 <_sk_start_pipeline_ssse3_lowp+0x30>
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  235,72                              // jmp           78 <_sk_start_pipeline_ssse3_lowp+0x78>
  .byte  76,137,125,208                      // mov           %r15,-0x30(%rbp)
  .byte  65,184,0,0,0,0                      // mov           $0x0,%r8d
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  73,137,247                          // mov           %rsi,%r15
  .byte  76,137,242                          // mov           %r14,%rdx
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,137,254                          // mov           %r15,%rsi
  .byte  76,139,125,208                      // mov           -0x30(%rbp),%r15
  .byte  73,141,86,8                         // lea           0x8(%r14),%rdx
  .byte  73,131,198,16                       // add           $0x10,%r14
  .byte  77,57,254                           // cmp           %r15,%r14
  .byte  73,137,214                          // mov           %rdx,%r14
  .byte  118,188                             // jbe           34 <_sk_start_pipeline_ssse3_lowp+0x34>
  .byte  77,137,248                          // mov           %r15,%r8
  .byte  73,41,208                           // sub           %rdx,%r8
  .byte  116,33                              // je            a1 <_sk_start_pipeline_ssse3_lowp+0xa1>
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  15,87,228                           // xorps         %xmm4,%xmm4
  .byte  15,87,237                           // xorps         %xmm5,%xmm5
  .byte  15,87,246                           // xorps         %xmm6,%xmm6
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  72,137,223                          // mov           %rbx,%rdi
  .byte  76,137,225                          // mov           %r12,%rcx
  .byte  65,255,213                          // callq         *%r13
  .byte  76,137,248                          // mov           %r15,%rax
  .byte  72,131,196,8                        // add           $0x8,%rsp
  .byte  91                                  // pop           %rbx
  .byte  65,92                               // pop           %r12
  .byte  65,93                               // pop           %r13
  .byte  65,94                               // pop           %r14
  .byte  65,95                               // pop           %r15
  .byte  93                                  // pop           %rbp
  .byte  195                                 // retq

HIDDEN _sk_just_return_ssse3_lowp
.globl _sk_just_return_ssse3_lowp
FUNCTION(_sk_just_return_ssse3_lowp)
_sk_just_return_ssse3_lowp:
  .byte  195                                 // retq

HIDDEN _sk_constant_color_ssse3_lowp
.globl _sk_constant_color_ssse3_lowp
FUNCTION(_sk_constant_color_ssse3_lowp)
_sk_constant_color_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,16,24                            // movups        (%rax),%xmm3
  .byte  15,88,29,80,18,0,0                  // addps         0x1250(%rip),%xmm3        # 1310 <_sk_xor__ssse3_lowp+0xa3>
  .byte  242,15,112,195,0                    // pshuflw       $0x0,%xmm3,%xmm0
  .byte  102,15,112,192,80                   // pshufd        $0x50,%xmm0,%xmm0
  .byte  242,15,112,203,170                  // pshuflw       $0xaa,%xmm3,%xmm1
  .byte  102,15,112,201,80                   // pshufd        $0x50,%xmm1,%xmm1
  .byte  243,15,112,211,0                    // pshufhw       $0x0,%xmm3,%xmm2
  .byte  102,15,112,210,250                  // pshufd        $0xfa,%xmm2,%xmm2
  .byte  243,15,112,219,170                  // pshufhw       $0xaa,%xmm3,%xmm3
  .byte  102,15,112,219,250                  // pshufd        $0xfa,%xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_set_rgb_ssse3_lowp
.globl _sk_set_rgb_ssse3_lowp
FUNCTION(_sk_set_rgb_ssse3_lowp)
_sk_set_rgb_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,15,16,21,250,19,0,0             // movss         0x13fa(%rip),%xmm2        # 14f0 <_sk_xor__ssse3_lowp+0x283>
  .byte  243,15,16,0                         // movss         (%rax),%xmm0
  .byte  243,15,88,194                       // addss         %xmm2,%xmm0
  .byte  102,65,15,126,193                   // movd          %xmm0,%r9d
  .byte  102,65,15,110,193                   // movd          %r9d,%xmm0
  .byte  242,15,112,192,0                    // pshuflw       $0x0,%xmm0,%xmm0
  .byte  102,15,112,192,80                   // pshufd        $0x50,%xmm0,%xmm0
  .byte  243,15,16,72,4                      // movss         0x4(%rax),%xmm1
  .byte  243,15,88,202                       // addss         %xmm2,%xmm1
  .byte  102,65,15,126,201                   // movd          %xmm1,%r9d
  .byte  102,65,15,110,201                   // movd          %r9d,%xmm1
  .byte  242,15,112,201,0                    // pshuflw       $0x0,%xmm1,%xmm1
  .byte  102,15,112,201,80                   // pshufd        $0x50,%xmm1,%xmm1
  .byte  243,15,88,80,8                      // addss         0x8(%rax),%xmm2
  .byte  102,15,126,208                      // movd          %xmm2,%eax
  .byte  102,15,110,208                      // movd          %eax,%xmm2
  .byte  242,15,112,210,0                    // pshuflw       $0x0,%xmm2,%xmm2
  .byte  102,15,112,210,80                   // pshufd        $0x50,%xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_premul_ssse3_lowp
.globl _sk_premul_ssse3_lowp
FUNCTION(_sk_premul_ssse3_lowp)
_sk_premul_ssse3_lowp:
  .byte  102,15,56,11,195                    // pmulhrsw      %xmm3,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,56,11,203                    // pmulhrsw      %xmm3,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,56,11,211                    // pmulhrsw      %xmm3,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_load_8888_ssse3_lowp
.globl _sk_load_8888_ssse3_lowp
FUNCTION(_sk_load_8888_ssse3_lowp)
_sk_load_8888_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,187,0,0,0                    // jne           235 <_sk_load_8888_ssse3_lowp+0xc9>
  .byte  69,15,16,68,147,16                  // movups        0x10(%r11,%rdx,4),%xmm8
  .byte  65,15,16,28,147                     // movups        (%r11,%rdx,4),%xmm3
  .byte  102,15,111,13,147,17,0,0            // movdqa        0x1193(%rip),%xmm1        # 1320 <_sk_xor__ssse3_lowp+0xb3>
  .byte  15,40,195                           // movaps        %xmm3,%xmm0
  .byte  102,15,56,0,193                     // pshufb        %xmm1,%xmm0
  .byte  102,65,15,111,208                   // movdqa        %xmm8,%xmm2
  .byte  102,15,56,0,209                     // pshufb        %xmm1,%xmm2
  .byte  102,15,108,194                      // punpcklqdq    %xmm2,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,68,15,111,13,127,17,0,0         // movdqa        0x117f(%rip),%xmm9        # 1330 <_sk_xor__ssse3_lowp+0xc3>
  .byte  102,65,15,228,193                   // pmulhuw       %xmm9,%xmm0
  .byte  102,68,15,111,21,129,17,0,0         // movdqa        0x1181(%rip),%xmm10        # 1340 <_sk_xor__ssse3_lowp+0xd3>
  .byte  15,40,203                           // movaps        %xmm3,%xmm1
  .byte  102,65,15,56,0,202                  // pshufb        %xmm10,%xmm1
  .byte  102,65,15,111,208                   // movdqa        %xmm8,%xmm2
  .byte  102,65,15,56,0,210                  // pshufb        %xmm10,%xmm2
  .byte  102,15,108,202                      // punpcklqdq    %xmm2,%xmm1
  .byte  102,15,113,241,8                    // psllw         $0x8,%xmm1
  .byte  102,65,15,228,201                   // pmulhuw       %xmm9,%xmm1
  .byte  102,68,15,111,21,102,17,0,0         // movdqa        0x1166(%rip),%xmm10        # 1350 <_sk_xor__ssse3_lowp+0xe3>
  .byte  15,40,211                           // movaps        %xmm3,%xmm2
  .byte  102,65,15,56,0,210                  // pshufb        %xmm10,%xmm2
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,56,0,218                  // pshufb        %xmm10,%xmm11
  .byte  102,65,15,108,211                   // punpcklqdq    %xmm11,%xmm2
  .byte  102,15,113,242,8                    // psllw         $0x8,%xmm2
  .byte  102,65,15,228,209                   // pmulhuw       %xmm9,%xmm2
  .byte  102,68,15,111,21,74,17,0,0          // movdqa        0x114a(%rip),%xmm10        # 1360 <_sk_xor__ssse3_lowp+0xf3>
  .byte  102,65,15,56,0,218                  // pshufb        %xmm10,%xmm3
  .byte  102,69,15,56,0,194                  // pshufb        %xmm10,%xmm8
  .byte  102,65,15,108,216                   // punpcklqdq    %xmm8,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,65,15,228,217                   // pmulhuw       %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,52,255,255,255               // ja            185 <_sk_load_8888_ssse3_lowp+0x19>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,124,0,0,0                 // lea           0x7c(%rip),%r10        # 2d8 <_sk_load_8888_ssse3_lowp+0x16c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,65,15,110,68,147,24             // movd          0x18(%r11,%rdx,4),%xmm0
  .byte  102,68,15,112,192,69                // pshufd        $0x45,%xmm0,%xmm8
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  243,65,15,16,68,147,20              // movss         0x14(%r11,%rdx,4),%xmm0
  .byte  65,15,198,192,0                     // shufps        $0x0,%xmm8,%xmm0
  .byte  65,15,198,192,226                   // shufps        $0xe2,%xmm8,%xmm0
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  243,65,15,16,68,147,16              // movss         0x10(%r11,%rdx,4),%xmm0
  .byte  243,68,15,16,192                    // movss         %xmm0,%xmm8
  .byte  243,65,15,16,68,147,12              // movss         0xc(%r11,%rdx,4),%xmm0
  .byte  15,198,195,32                       // shufps        $0x20,%xmm3,%xmm0
  .byte  15,198,216,36                       // shufps        $0x24,%xmm0,%xmm3
  .byte  243,65,15,16,68,147,8               // movss         0x8(%r11,%rdx,4),%xmm0
  .byte  15,198,195,48                       // shufps        $0x30,%xmm3,%xmm0
  .byte  15,198,216,132                      // shufps        $0x84,%xmm0,%xmm3
  .byte  243,65,15,16,68,147,4               // movss         0x4(%r11,%rdx,4),%xmm0
  .byte  15,198,195,0                        // shufps        $0x0,%xmm3,%xmm0
  .byte  15,198,195,226                      // shufps        $0xe2,%xmm3,%xmm0
  .byte  15,40,216                           // movaps        %xmm0,%xmm3
  .byte  243,65,15,16,4,147                  // movss         (%r11,%rdx,4),%xmm0
  .byte  243,15,16,216                       // movss         %xmm0,%xmm3
  .byte  233,176,254,255,255                 // jmpq          185 <_sk_load_8888_ssse3_lowp+0x19>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  220,255                             // fdivr         %st,%st(7)
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190,255,255,255,178                 // mov           $0xb2ffffff,%esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,157,255,255,255,141             // lcall         *-0x72000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_8888_ssse3_lowp
.globl _sk_store_8888_ssse3_lowp
FUNCTION(_sk_store_8888_ssse3_lowp)
_sk_store_8888_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  102,68,15,111,192                   // movdqa        %xmm0,%xmm8
  .byte  102,65,15,113,208,7                 // psrlw         $0x7,%xmm8
  .byte  102,68,15,111,21,99,16,0,0          // movdqa        0x1063(%rip),%xmm10        # 1370 <_sk_xor__ssse3_lowp+0x103>
  .byte  102,69,15,234,194                   // pminsw        %xmm10,%xmm8
  .byte  102,69,15,239,219                   // pxor          %xmm11,%xmm11
  .byte  102,69,15,111,232                   // movdqa        %xmm8,%xmm13
  .byte  102,69,15,97,235                    // punpcklwd     %xmm11,%xmm13
  .byte  102,69,15,105,195                   // punpckhwd     %xmm11,%xmm8
  .byte  102,68,15,111,201                   // movdqa        %xmm1,%xmm9
  .byte  102,65,15,113,209,7                 // psrlw         $0x7,%xmm9
  .byte  102,69,15,234,202                   // pminsw        %xmm10,%xmm9
  .byte  102,69,15,111,225                   // movdqa        %xmm9,%xmm12
  .byte  102,69,15,105,227                   // punpckhwd     %xmm11,%xmm12
  .byte  102,69,15,97,203                    // punpcklwd     %xmm11,%xmm9
  .byte  102,65,15,114,241,8                 // pslld         $0x8,%xmm9
  .byte  102,65,15,114,244,8                 // pslld         $0x8,%xmm12
  .byte  102,69,15,235,224                   // por           %xmm8,%xmm12
  .byte  102,69,15,235,205                   // por           %xmm13,%xmm9
  .byte  102,68,15,111,234                   // movdqa        %xmm2,%xmm13
  .byte  102,65,15,113,213,7                 // psrlw         $0x7,%xmm13
  .byte  102,69,15,234,234                   // pminsw        %xmm10,%xmm13
  .byte  102,69,15,111,245                   // movdqa        %xmm13,%xmm14
  .byte  102,69,15,97,243                    // punpcklwd     %xmm11,%xmm14
  .byte  102,69,15,105,235                   // punpckhwd     %xmm11,%xmm13
  .byte  102,65,15,114,245,16                // pslld         $0x10,%xmm13
  .byte  102,65,15,114,246,16                // pslld         $0x10,%xmm14
  .byte  102,68,15,111,195                   // movdqa        %xmm3,%xmm8
  .byte  102,65,15,113,208,7                 // psrlw         $0x7,%xmm8
  .byte  102,69,15,234,194                   // pminsw        %xmm10,%xmm8
  .byte  102,69,15,111,208                   // movdqa        %xmm8,%xmm10
  .byte  102,69,15,105,211                   // punpckhwd     %xmm11,%xmm10
  .byte  102,69,15,97,195                    // punpcklwd     %xmm11,%xmm8
  .byte  102,65,15,114,240,24                // pslld         $0x18,%xmm8
  .byte  102,65,15,114,242,24                // pslld         $0x18,%xmm10
  .byte  102,69,15,235,213                   // por           %xmm13,%xmm10
  .byte  102,69,15,235,212                   // por           %xmm12,%xmm10
  .byte  102,69,15,235,198                   // por           %xmm14,%xmm8
  .byte  102,69,15,235,193                   // por           %xmm9,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,17                              // jne           3db <_sk_store_8888_ssse3_lowp+0xe7>
  .byte  243,69,15,127,4,147                 // movdqu        %xmm8,(%r11,%rdx,4)
  .byte  243,69,15,127,84,147,16             // movdqu        %xmm10,0x10(%r11,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            3d7 <_sk_store_8888_ssse3_lowp+0xe3>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,90,0,0,0                  // lea           0x5a(%rip),%r10        # 450 <_sk_store_8888_ssse3_lowp+0x15c>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,69,15,112,202,78                // pshufd        $0x4e,%xmm10,%xmm9
  .byte  102,69,15,126,76,147,24             // movd          %xmm9,0x18(%r11,%rdx,4)
  .byte  102,69,15,112,202,229               // pshufd        $0xe5,%xmm10,%xmm9
  .byte  102,69,15,126,76,147,20             // movd          %xmm9,0x14(%r11,%rdx,4)
  .byte  102,69,15,126,84,147,16             // movd          %xmm10,0x10(%r11,%rdx,4)
  .byte  102,69,15,112,200,231               // pshufd        $0xe7,%xmm8,%xmm9
  .byte  102,69,15,126,76,147,12             // movd          %xmm9,0xc(%r11,%rdx,4)
  .byte  102,69,15,112,200,78                // pshufd        $0x4e,%xmm8,%xmm9
  .byte  102,69,15,126,76,147,8              // movd          %xmm9,0x8(%r11,%rdx,4)
  .byte  102,69,15,112,200,229               // pshufd        $0xe5,%xmm8,%xmm9
  .byte  102,69,15,126,76,147,4              // movd          %xmm9,0x4(%r11,%rdx,4)
  .byte  102,69,15,126,4,147                 // movd          %xmm8,(%r11,%rdx,4)
  .byte  235,136                             // jmp           3d7 <_sk_store_8888_ssse3_lowp+0xe3>
  .byte  144                                 // nop
  .byte  247,255                             // idiv          %edi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  234                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  221,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  188,255,255,255,175                 // mov           $0xafffffff,%esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_a8_ssse3_lowp
.globl _sk_load_a8_ssse3_lowp
FUNCTION(_sk_load_a8_ssse3_lowp)
_sk_load_a8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,37                              // jne           49b <_sk_load_a8_ssse3_lowp+0x2f>
  .byte  243,65,15,126,28,19                 // movq          (%r11,%rdx,1),%xmm3
  .byte  102,15,96,216                       // punpcklbw     %xmm0,%xmm3
  .byte  102,15,113,243,8                    // psllw         $0x8,%xmm3
  .byte  102,15,228,29,243,14,0,0            // pmulhuw       0xef3(%rip),%xmm3        # 1380 <_sk_xor__ssse3_lowp+0x113>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,209                             // ja            480 <_sk_load_a8_ssse3_lowp+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,94,0,0,0                  // lea           0x5e(%rip),%r10        # 518 <_sk_load_a8_ssse3_lowp+0xac>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,15,239,219                      // pxor          %xmm3,%xmm3
  .byte  102,15,196,216,6                    // pinsrw        $0x6,%eax,%xmm3
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,15,196,216,5                    // pinsrw        $0x5,%eax,%xmm3
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,15,196,216,4                    // pinsrw        $0x4,%eax,%xmm3
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  102,15,196,216,3                    // pinsrw        $0x3,%eax,%xmm3
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,15,196,216,2                    // pinsrw        $0x2,%eax,%xmm3
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  102,15,196,216,1                    // pinsrw        $0x1,%eax,%xmm3
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,15,196,216,0                    // pinsrw        $0x0,%eax,%xmm3
  .byte  233,104,255,255,255                 // jmpq          480 <_sk_load_a8_ssse3_lowp+0x14>
  .byte  241                                 // icebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,230                             // jmpq          *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  219,255                             // (bad)
  .byte  255                                 // (bad)
  .byte  255,208                             // callq         *%rax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,197                             // inc           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  186,255,255,255,171                 // mov           $0xabffffff,%edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_store_a8_ssse3_lowp
.globl _sk_store_a8_ssse3_lowp
FUNCTION(_sk_store_a8_ssse3_lowp)
_sk_store_a8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  102,68,15,111,195                   // movdqa        %xmm3,%xmm8
  .byte  102,65,15,113,208,7                 // psrlw         $0x7,%xmm8
  .byte  102,69,15,103,192                   // packuswb      %xmm8,%xmm8
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,10                              // jne           558 <_sk_store_a8_ssse3_lowp+0x24>
  .byte  242,69,15,17,4,19                   // movsd         %xmm8,(%r11,%rdx,1)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,236                             // ja            554 <_sk_store_a8_ssse3_lowp+0x20>
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,128,0,0,0                 // lea           0x80(%rip),%r10        # 5f8 <_sk_store_a8_ssse3_lowp+0xc4>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,68,15,127,68,36,232             // movdqa        %xmm8,-0x18(%rsp)
  .byte  138,68,36,244                       // mov           -0xc(%rsp),%al
  .byte  65,136,68,19,6                      // mov           %al,0x6(%r11,%rdx,1)
  .byte  102,68,15,127,68,36,216             // movdqa        %xmm8,-0x28(%rsp)
  .byte  138,68,36,226                       // mov           -0x1e(%rsp),%al
  .byte  65,136,68,19,5                      // mov           %al,0x5(%r11,%rdx,1)
  .byte  102,68,15,127,68,36,200             // movdqa        %xmm8,-0x38(%rsp)
  .byte  138,68,36,208                       // mov           -0x30(%rsp),%al
  .byte  65,136,68,19,4                      // mov           %al,0x4(%r11,%rdx,1)
  .byte  102,68,15,127,68,36,184             // movdqa        %xmm8,-0x48(%rsp)
  .byte  138,68,36,190                       // mov           -0x42(%rsp),%al
  .byte  65,136,68,19,3                      // mov           %al,0x3(%r11,%rdx,1)
  .byte  102,68,15,127,68,36,168             // movdqa        %xmm8,-0x58(%rsp)
  .byte  138,68,36,172                       // mov           -0x54(%rsp),%al
  .byte  65,136,68,19,2                      // mov           %al,0x2(%r11,%rdx,1)
  .byte  102,68,15,127,68,36,152             // movdqa        %xmm8,-0x68(%rsp)
  .byte  138,68,36,154                       // mov           -0x66(%rsp),%al
  .byte  65,136,68,19,1                      // mov           %al,0x1(%r11,%rdx,1)
  .byte  102,68,15,127,68,36,136             // movdqa        %xmm8,-0x78(%rsp)
  .byte  138,68,36,136                       // mov           -0x78(%rsp),%al
  .byte  65,136,4,19                         // mov           %al,(%r11,%rdx,1)
  .byte  233,95,255,255,255                  // jmpq          554 <_sk_store_a8_ssse3_lowp+0x20>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  233,255,255,255,217                 // jmpq          ffffffffda0005fc <_sk_xor__ssse3_lowp+0xffffffffd9fff38f>
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,201                             // dec           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  185,255,255,255,169                 // mov           $0xa9ffffff,%ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,153,255,255,255,137             // lcall         *-0x76000001(%rcx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_load_g8_ssse3_lowp
.globl _sk_load_g8_ssse3_lowp
FUNCTION(_sk_load_g8_ssse3_lowp)
_sk_load_g8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,42                              // jne           648 <_sk_load_g8_ssse3_lowp+0x34>
  .byte  243,65,15,126,4,19                  // movq          (%r11,%rdx,1),%xmm0
  .byte  102,15,96,192                       // punpcklbw     %xmm0,%xmm0
  .byte  102,15,113,240,8                    // psllw         $0x8,%xmm0
  .byte  102,15,228,5,91,13,0,0              // pmulhuw       0xd5b(%rip),%xmm0        # 1390 <_sk_xor__ssse3_lowp+0x123>
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,29,98,13,0,0                  // movaps        0xd62(%rip),%xmm3        # 13a0 <_sk_xor__ssse3_lowp+0x133>
  .byte  102,15,111,200                      // movdqa        %xmm0,%xmm1
  .byte  102,15,111,208                      // movdqa        %xmm0,%xmm2
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,204                             // ja            628 <_sk_load_g8_ssse3_lowp+0x14>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,97,0,0,0                  // lea           0x61(%rip),%r10        # 6c8 <_sk_load_g8_ssse3_lowp+0xb4>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,15,239,192                      // pxor          %xmm0,%xmm0
  .byte  102,15,196,192,6                    // pinsrw        $0x6,%eax,%xmm0
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,15,196,192,5                    // pinsrw        $0x5,%eax,%xmm0
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,15,196,192,4                    // pinsrw        $0x4,%eax,%xmm0
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  102,15,196,192,3                    // pinsrw        $0x3,%eax,%xmm0
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,15,196,192,2                    // pinsrw        $0x2,%eax,%xmm0
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  102,15,196,192,1                    // pinsrw        $0x1,%eax,%xmm0
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,15,196,192,0                    // pinsrw        $0x0,%eax,%xmm0
  .byte  233,99,255,255,255                  // jmpq          628 <_sk_load_g8_ssse3_lowp+0x14>
  .byte  15,31,0                             // nopl          (%rax)
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,227                             // jmpq          *%rbx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  216,255                             // fdivr         %st(7),%st
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,194                             // inc           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,183,255,255,255,168             // pushq         -0x57000001(%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_srcover_rgba_8888_ssse3_lowp
.globl _sk_srcover_rgba_8888_ssse3_lowp
FUNCTION(_sk_srcover_rgba_8888_ssse3_lowp)
_sk_srcover_rgba_8888_ssse3_lowp:
  .byte  102,68,15,111,225                   // movdqa        %xmm1,%xmm12
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,11,2,0,0                     // jne           902 <_sk_srcover_rgba_8888_ssse3_lowp+0x21e>
  .byte  69,15,16,68,147,16                  // movups        0x10(%r11,%rdx,4),%xmm8
  .byte  65,15,16,60,147                     // movups        (%r11,%rdx,4),%xmm7
  .byte  102,15,111,45,166,12,0,0            // movdqa        0xca6(%rip),%xmm5        # 13b0 <_sk_xor__ssse3_lowp+0x143>
  .byte  15,40,231                           // movaps        %xmm7,%xmm4
  .byte  102,15,56,0,229                     // pshufb        %xmm5,%xmm4
  .byte  102,65,15,111,240                   // movdqa        %xmm8,%xmm6
  .byte  102,15,56,0,245                     // pshufb        %xmm5,%xmm6
  .byte  102,15,108,230                      // punpcklqdq    %xmm6,%xmm4
  .byte  102,15,111,13,152,12,0,0            // movdqa        0xc98(%rip),%xmm1        # 13c0 <_sk_xor__ssse3_lowp+0x153>
  .byte  102,15,113,244,8                    // psllw         $0x8,%xmm4
  .byte  102,68,15,111,13,154,12,0,0         // movdqa        0xc9a(%rip),%xmm9        # 13d0 <_sk_xor__ssse3_lowp+0x163>
  .byte  102,65,15,228,225                   // pmulhuw       %xmm9,%xmm4
  .byte  102,68,15,111,21,156,12,0,0         // movdqa        0xc9c(%rip),%xmm10        # 13e0 <_sk_xor__ssse3_lowp+0x173>
  .byte  15,40,239                           // movaps        %xmm7,%xmm5
  .byte  102,65,15,56,0,234                  // pshufb        %xmm10,%xmm5
  .byte  102,65,15,111,240                   // movdqa        %xmm8,%xmm6
  .byte  102,65,15,56,0,242                  // pshufb        %xmm10,%xmm6
  .byte  102,15,108,238                      // punpcklqdq    %xmm6,%xmm5
  .byte  102,15,113,245,8                    // psllw         $0x8,%xmm5
  .byte  102,65,15,228,233                   // pmulhuw       %xmm9,%xmm5
  .byte  102,68,15,111,21,129,12,0,0         // movdqa        0xc81(%rip),%xmm10        # 13f0 <_sk_xor__ssse3_lowp+0x183>
  .byte  15,40,247                           // movaps        %xmm7,%xmm6
  .byte  102,65,15,56,0,242                  // pshufb        %xmm10,%xmm6
  .byte  102,69,15,111,216                   // movdqa        %xmm8,%xmm11
  .byte  102,69,15,56,0,218                  // pshufb        %xmm10,%xmm11
  .byte  102,65,15,108,243                   // punpcklqdq    %xmm11,%xmm6
  .byte  102,15,113,246,8                    // psllw         $0x8,%xmm6
  .byte  102,65,15,228,241                   // pmulhuw       %xmm9,%xmm6
  .byte  102,68,15,111,21,101,12,0,0         // movdqa        0xc65(%rip),%xmm10        # 1400 <_sk_xor__ssse3_lowp+0x193>
  .byte  102,65,15,56,0,250                  // pshufb        %xmm10,%xmm7
  .byte  102,69,15,56,0,194                  // pshufb        %xmm10,%xmm8
  .byte  102,65,15,108,248                   // punpcklqdq    %xmm8,%xmm7
  .byte  102,15,113,247,8                    // psllw         $0x8,%xmm7
  .byte  102,65,15,228,249                   // pmulhuw       %xmm9,%xmm7
  .byte  102,68,15,111,29,81,12,0,0          // movdqa        0xc51(%rip),%xmm11        # 1410 <_sk_xor__ssse3_lowp+0x1a3>
  .byte  102,68,15,249,219                   // psubw         %xmm3,%xmm11
  .byte  102,68,15,111,196                   // movdqa        %xmm4,%xmm8
  .byte  102,69,15,56,11,195                 // pmulhrsw      %xmm11,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,68,15,253,192                   // paddw         %xmm0,%xmm8
  .byte  102,15,111,197                      // movdqa        %xmm5,%xmm0
  .byte  102,65,15,56,11,195                 // pmulhrsw      %xmm11,%xmm0
  .byte  102,68,15,56,29,200                 // pabsw         %xmm0,%xmm9
  .byte  102,69,15,253,204                   // paddw         %xmm12,%xmm9
  .byte  102,15,111,198                      // movdqa        %xmm6,%xmm0
  .byte  102,65,15,56,11,195                 // pmulhrsw      %xmm11,%xmm0
  .byte  102,68,15,56,29,224                 // pabsw         %xmm0,%xmm12
  .byte  102,68,15,253,226                   // paddw         %xmm2,%xmm12
  .byte  102,68,15,56,11,223                 // pmulhrsw      %xmm7,%xmm11
  .byte  102,69,15,56,29,219                 // pabsw         %xmm11,%xmm11
  .byte  102,68,15,253,219                   // paddw         %xmm3,%xmm11
  .byte  102,68,15,127,68,36,232             // movdqa        %xmm8,-0x18(%rsp)
  .byte  102,65,15,111,216                   // movdqa        %xmm8,%xmm3
  .byte  102,15,113,211,7                    // psrlw         $0x7,%xmm3
  .byte  102,15,234,217                      // pminsw        %xmm1,%xmm3
  .byte  102,69,15,239,255                   // pxor          %xmm15,%xmm15
  .byte  102,68,15,111,235                   // movdqa        %xmm3,%xmm13
  .byte  102,69,15,97,239                    // punpcklwd     %xmm15,%xmm13
  .byte  102,65,15,105,223                   // punpckhwd     %xmm15,%xmm3
  .byte  102,65,15,111,209                   // movdqa        %xmm9,%xmm2
  .byte  102,15,113,210,7                    // psrlw         $0x7,%xmm2
  .byte  102,15,234,209                      // pminsw        %xmm1,%xmm2
  .byte  102,68,15,111,242                   // movdqa        %xmm2,%xmm14
  .byte  102,69,15,105,247                   // punpckhwd     %xmm15,%xmm14
  .byte  102,65,15,97,215                    // punpcklwd     %xmm15,%xmm2
  .byte  102,69,15,111,212                   // movdqa        %xmm12,%xmm10
  .byte  102,65,15,113,210,7                 // psrlw         $0x7,%xmm10
  .byte  102,68,15,234,209                   // pminsw        %xmm1,%xmm10
  .byte  102,69,15,111,194                   // movdqa        %xmm10,%xmm8
  .byte  102,69,15,97,199                    // punpcklwd     %xmm15,%xmm8
  .byte  102,69,15,105,215                   // punpckhwd     %xmm15,%xmm10
  .byte  102,65,15,111,195                   // movdqa        %xmm11,%xmm0
  .byte  102,15,113,208,7                    // psrlw         $0x7,%xmm0
  .byte  102,15,234,193                      // pminsw        %xmm1,%xmm0
  .byte  102,15,111,200                      // movdqa        %xmm0,%xmm1
  .byte  102,65,15,105,207                   // punpckhwd     %xmm15,%xmm1
  .byte  102,65,15,97,199                    // punpcklwd     %xmm15,%xmm0
  .byte  102,65,15,114,246,8                 // pslld         $0x8,%xmm14
  .byte  102,68,15,235,243                   // por           %xmm3,%xmm14
  .byte  102,15,114,242,8                    // pslld         $0x8,%xmm2
  .byte  102,65,15,235,213                   // por           %xmm13,%xmm2
  .byte  102,65,15,114,242,16                // pslld         $0x10,%xmm10
  .byte  102,15,114,241,24                   // pslld         $0x18,%xmm1
  .byte  102,65,15,235,202                   // por           %xmm10,%xmm1
  .byte  102,65,15,235,206                   // por           %xmm14,%xmm1
  .byte  102,65,15,114,240,16                // pslld         $0x10,%xmm8
  .byte  102,15,114,240,24                   // pslld         $0x18,%xmm0
  .byte  102,65,15,235,192                   // por           %xmm8,%xmm0
  .byte  102,15,235,194                      // por           %xmm2,%xmm0
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,197,0,0,0                    // jne           9a2 <_sk_srcover_rgba_8888_ssse3_lowp+0x2be>
  .byte  243,65,15,127,4,147                 // movdqu        %xmm0,(%r11,%rdx,4)
  .byte  243,65,15,127,76,147,16             // movdqu        %xmm1,0x10(%r11,%rdx,4)
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,68,36,232                     // movaps        -0x18(%rsp),%xmm0
  .byte  102,65,15,111,201                   // movdqa        %xmm9,%xmm1
  .byte  102,65,15,111,212                   // movdqa        %xmm12,%xmm2
  .byte  102,65,15,111,219                   // movdqa        %xmm11,%xmm3
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,228,253,255,255              // ja            702 <_sk_srcover_rgba_8888_ssse3_lowp+0x1e>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,239,0,0,0                 // lea           0xef(%rip),%r10        # a18 <_sk_srcover_rgba_8888_ssse3_lowp+0x334>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,65,15,110,100,147,24            // movd          0x18(%r11,%rdx,4),%xmm4
  .byte  102,68,15,112,196,69                // pshufd        $0x45,%xmm4,%xmm8
  .byte  15,87,255                           // xorps         %xmm7,%xmm7
  .byte  243,65,15,16,100,147,20             // movss         0x14(%r11,%rdx,4),%xmm4
  .byte  65,15,198,224,0                     // shufps        $0x0,%xmm8,%xmm4
  .byte  65,15,198,224,226                   // shufps        $0xe2,%xmm8,%xmm4
  .byte  68,15,40,196                        // movaps        %xmm4,%xmm8
  .byte  243,65,15,16,100,147,16             // movss         0x10(%r11,%rdx,4),%xmm4
  .byte  243,68,15,16,196                    // movss         %xmm4,%xmm8
  .byte  243,65,15,16,100,147,12             // movss         0xc(%r11,%rdx,4),%xmm4
  .byte  15,198,231,32                       // shufps        $0x20,%xmm7,%xmm4
  .byte  15,198,252,36                       // shufps        $0x24,%xmm4,%xmm7
  .byte  243,65,15,16,100,147,8              // movss         0x8(%r11,%rdx,4),%xmm4
  .byte  15,198,231,48                       // shufps        $0x30,%xmm7,%xmm4
  .byte  15,198,252,132                      // shufps        $0x84,%xmm4,%xmm7
  .byte  243,65,15,16,100,147,4              // movss         0x4(%r11,%rdx,4),%xmm4
  .byte  15,198,231,0                        // shufps        $0x0,%xmm7,%xmm4
  .byte  15,198,231,226                      // shufps        $0xe2,%xmm7,%xmm4
  .byte  15,40,252                           // movaps        %xmm4,%xmm7
  .byte  243,65,15,16,36,147                 // movss         (%r11,%rdx,4),%xmm4
  .byte  243,15,16,252                       // movss         %xmm4,%xmm7
  .byte  233,96,253,255,255                  // jmpq          702 <_sk_srcover_rgba_8888_ssse3_lowp+0x1e>
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,52,255,255,255               // ja            8ea <_sk_srcover_rgba_8888_ssse3_lowp+0x206>
  .byte  65,15,182,193                       // movzbl        %r9b,%eax
  .byte  76,141,13,115,0,0,0                 // lea           0x73(%rip),%r9        # a34 <_sk_srcover_rgba_8888_ssse3_lowp+0x350>
  .byte  73,99,4,129                         // movslq        (%r9,%rax,4),%rax
  .byte  76,1,200                            // add           %r9,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  102,15,112,209,78                   // pshufd        $0x4e,%xmm1,%xmm2
  .byte  102,65,15,126,84,147,24             // movd          %xmm2,0x18(%r11,%rdx,4)
  .byte  102,15,112,209,229                  // pshufd        $0xe5,%xmm1,%xmm2
  .byte  102,65,15,126,84,147,20             // movd          %xmm2,0x14(%r11,%rdx,4)
  .byte  102,65,15,126,76,147,16             // movd          %xmm1,0x10(%r11,%rdx,4)
  .byte  102,15,112,200,231                  // pshufd        $0xe7,%xmm0,%xmm1
  .byte  102,65,15,126,76,147,12             // movd          %xmm1,0xc(%r11,%rdx,4)
  .byte  102,15,112,200,78                   // pshufd        $0x4e,%xmm0,%xmm1
  .byte  102,65,15,126,76,147,8              // movd          %xmm1,0x8(%r11,%rdx,4)
  .byte  102,15,112,200,229                  // pshufd        $0xe5,%xmm0,%xmm1
  .byte  102,65,15,126,76,147,4              // movd          %xmm1,0x4(%r11,%rdx,4)
  .byte  102,65,15,126,4,147                 // movd          %xmm0,(%r11,%rdx,4)
  .byte  233,210,254,255,255                 // jmpq          8ea <_sk_srcover_rgba_8888_ssse3_lowp+0x206>
  .byte  123,255                             // jnp           a19 <_sk_srcover_rgba_8888_ssse3_lowp+0x335>
  .byte  255                                 // (bad)
  .byte  255,105,255                         // ljmp          *-0x1(%rcx)
  .byte  255                                 // (bad)
  .byte  255,90,255                          // lcall         *-0x1(%rdx)
  .byte  255                                 // (bad)
  .byte  255,75,255                          // decl          -0x1(%rbx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  63                                  // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,42                              // ljmp          *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,26                              // lcall         *(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  217,255                             // fcos
  .byte  255                                 // (bad)
  .byte  255,205                             // dec           %ebp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,193                             // inc           %ecx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,181,255,255,255,174             // pushq         -0x51000001(%rbp)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,162,255,255,255,150             // jmpq          *-0x69000001(%rdx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_scale_1_float_ssse3_lowp
.globl _sk_scale_1_float_ssse3_lowp
FUNCTION(_sk_scale_1_float_ssse3_lowp)
_sk_scale_1_float_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,88,5,148,10,0,0           // addss         0xa94(%rip),%xmm8        # 14f4 <_sk_xor__ssse3_lowp+0x287>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  242,69,15,112,192,0                 // pshuflw       $0x0,%xmm8,%xmm8
  .byte  102,69,15,112,192,80                // pshufd        $0x50,%xmm8,%xmm8
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,56,11,216                 // pmulhrsw      %xmm8,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_scale_u8_ssse3_lowp
.globl _sk_scale_u8_ssse3_lowp
FUNCTION(_sk_scale_u8_ssse3_lowp)
_sk_scale_u8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  117,74                              // jne           afa <_sk_scale_u8_ssse3_lowp+0x54>
  .byte  243,69,15,126,4,19                  // movq          (%r11,%rdx,1),%xmm8
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,65,15,113,240,8                 // psllw         $0x8,%xmm8
  .byte  102,68,15,228,5,86,9,0,0            // pmulhuw       0x956(%rip),%xmm8        # 1420 <_sk_xor__ssse3_lowp+0x1b3>
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,56,11,216                 // pmulhrsw      %xmm8,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  119,172                             // ja            abb <_sk_scale_u8_ssse3_lowp+0x15>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,102,0,0,0                 // lea           0x66(%rip),%r10        # b80 <_sk_scale_u8_ssse3_lowp+0xda>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,68,15,196,192,6                 // pinsrw        $0x6,%eax,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,5                 // pinsrw        $0x5,%eax,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,4                 // pinsrw        $0x4,%eax,%xmm8
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,3                 // pinsrw        $0x3,%eax,%xmm8
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,2                 // pinsrw        $0x2,%eax,%xmm8
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,1                 // pinsrw        $0x1,%eax,%xmm8
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,0                 // pinsrw        $0x0,%eax,%xmm8
  .byte  233,59,255,255,255                  // jmpq          abb <_sk_scale_u8_ssse3_lowp+0x15>
  .byte  240,255                             // lock          (bad)
  .byte  255                                 // (bad)
  .byte  255,228                             // jmpq          *%rsp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  216,255                             // fdivr         %st(7),%st
  .byte  255                                 // (bad)
  .byte  255,204                             // dec           %esp
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,192                             // inc           %eax
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,180,255,255,255,163,255         // pushq         -0x5c0001(%rdi,%rdi,8)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_lerp_1_float_ssse3_lowp
.globl _sk_lerp_1_float_ssse3_lowp
FUNCTION(_sk_lerp_1_float_ssse3_lowp)
_sk_lerp_1_float_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  243,68,15,16,0                      // movss         (%rax),%xmm8
  .byte  243,68,15,88,5,76,9,0,0             // addss         0x94c(%rip),%xmm8        # 14f8 <_sk_xor__ssse3_lowp+0x28b>
  .byte  102,68,15,126,192                   // movd          %xmm8,%eax
  .byte  102,68,15,110,192                   // movd          %eax,%xmm8
  .byte  242,69,15,112,192,0                 // pshuflw       $0x0,%xmm8,%xmm8
  .byte  102,69,15,112,192,80                // pshufd        $0x50,%xmm8,%xmm8
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,68,15,56,29,200                 // pabsw         %xmm0,%xmm9
  .byte  102,68,15,111,21,89,8,0,0           // movdqa        0x859(%rip),%xmm10        # 1430 <_sk_xor__ssse3_lowp+0x1c3>
  .byte  102,69,15,249,208                   // psubw         %xmm8,%xmm10
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,194                 // pmulhrsw      %xmm10,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,193                   // paddw         %xmm9,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,68,15,56,29,201                 // pabsw         %xmm1,%xmm9
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,202                 // pmulhrsw      %xmm10,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,201                   // paddw         %xmm9,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,68,15,56,29,202                 // pabsw         %xmm2,%xmm9
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,210                 // pmulhrsw      %xmm10,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,209                   // paddw         %xmm9,%xmm2
  .byte  102,65,15,56,11,216                 // pmulhrsw      %xmm8,%xmm3
  .byte  102,68,15,56,29,195                 // pabsw         %xmm3,%xmm8
  .byte  102,68,15,56,11,215                 // pmulhrsw      %xmm7,%xmm10
  .byte  102,65,15,56,29,218                 // pabsw         %xmm10,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_lerp_u8_ssse3_lowp
.globl _sk_lerp_u8_ssse3_lowp
FUNCTION(_sk_lerp_u8_ssse3_lowp)
_sk_lerp_u8_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  76,139,24                           // mov           (%rax),%r11
  .byte  77,133,192                          // test          %r8,%r8
  .byte  15,133,169,0,0,0                    // jne           d08 <_sk_lerp_u8_ssse3_lowp+0xb7>
  .byte  243,69,15,126,4,19                  // movq          (%r11,%rdx,1),%xmm8
  .byte  102,68,15,96,192                    // punpcklbw     %xmm0,%xmm8
  .byte  102,65,15,113,240,8                 // psllw         $0x8,%xmm8
  .byte  102,68,15,228,5,199,7,0,0           // pmulhuw       0x7c7(%rip),%xmm8        # 1440 <_sk_xor__ssse3_lowp+0x1d3>
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,68,15,56,29,200                 // pabsw         %xmm0,%xmm9
  .byte  102,68,15,111,21,194,7,0,0          // movdqa        0x7c2(%rip),%xmm10        # 1450 <_sk_xor__ssse3_lowp+0x1e3>
  .byte  102,69,15,249,208                   // psubw         %xmm8,%xmm10
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,194                 // pmulhrsw      %xmm10,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,193                   // paddw         %xmm9,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,68,15,56,29,201                 // pabsw         %xmm1,%xmm9
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,202                 // pmulhrsw      %xmm10,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,201                   // paddw         %xmm9,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,68,15,56,29,202                 // pabsw         %xmm2,%xmm9
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,210                 // pmulhrsw      %xmm10,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,209                   // paddw         %xmm9,%xmm2
  .byte  102,65,15,56,11,216                 // pmulhrsw      %xmm8,%xmm3
  .byte  102,68,15,56,29,195                 // pabsw         %xmm3,%xmm8
  .byte  102,68,15,56,11,215                 // pmulhrsw      %xmm7,%xmm10
  .byte  102,65,15,56,29,218                 // pabsw         %xmm10,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  69,137,193                          // mov           %r8d,%r9d
  .byte  65,128,225,7                        // and           $0x7,%r9b
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  65,254,201                          // dec           %r9b
  .byte  65,128,249,6                        // cmp           $0x6,%r9b
  .byte  15,135,73,255,255,255               // ja            c6a <_sk_lerp_u8_ssse3_lowp+0x19>
  .byte  69,15,182,201                       // movzbl        %r9b,%r9d
  .byte  76,141,21,104,0,0,0                 // lea           0x68(%rip),%r10        # d94 <_sk_lerp_u8_ssse3_lowp+0x143>
  .byte  75,99,4,138                         // movslq        (%r10,%r9,4),%rax
  .byte  76,1,208                            // add           %r10,%rax
  .byte  255,224                             // jmpq          *%rax
  .byte  65,15,182,68,19,6                   // movzbl        0x6(%r11,%rdx,1),%eax
  .byte  102,69,15,239,192                   // pxor          %xmm8,%xmm8
  .byte  102,68,15,196,192,6                 // pinsrw        $0x6,%eax,%xmm8
  .byte  65,15,182,68,19,5                   // movzbl        0x5(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,5                 // pinsrw        $0x5,%eax,%xmm8
  .byte  65,15,182,68,19,4                   // movzbl        0x4(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,4                 // pinsrw        $0x4,%eax,%xmm8
  .byte  65,15,182,68,19,3                   // movzbl        0x3(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,3                 // pinsrw        $0x3,%eax,%xmm8
  .byte  65,15,182,68,19,2                   // movzbl        0x2(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,2                 // pinsrw        $0x2,%eax,%xmm8
  .byte  65,15,182,68,19,1                   // movzbl        0x1(%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,1                 // pinsrw        $0x1,%eax,%xmm8
  .byte  65,15,182,4,19                      // movzbl        (%r11,%rdx,1),%eax
  .byte  102,68,15,196,192,0                 // pinsrw        $0x0,%eax,%xmm8
  .byte  233,216,254,255,255                 // jmpq          c6a <_sk_lerp_u8_ssse3_lowp+0x19>
  .byte  102,144                             // xchg          %ax,%ax
  .byte  238                                 // out           %al,(%dx)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,226                             // jmpq          *%rdx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,214                             // callq         *%rsi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,202                             // dec           %edx
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  190,255,255,255,178                 // mov           $0xb2ffffff,%esi
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff
  .byte  161                                 // .byte         0xa1
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // .byte         0xff

HIDDEN _sk_swap_rb_ssse3_lowp
.globl _sk_swap_rb_ssse3_lowp
FUNCTION(_sk_swap_rb_ssse3_lowp)
_sk_swap_rb_ssse3_lowp:
  .byte  68,15,40,192                        // movaps        %xmm0,%xmm8
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,194                           // movaps        %xmm2,%xmm0
  .byte  65,15,40,208                        // movaps        %xmm8,%xmm2
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_swap_ssse3_lowp
.globl _sk_swap_ssse3_lowp
FUNCTION(_sk_swap_ssse3_lowp)
_sk_swap_ssse3_lowp:
  .byte  68,15,40,195                        // movaps        %xmm3,%xmm8
  .byte  68,15,40,202                        // movaps        %xmm2,%xmm9
  .byte  68,15,40,209                        // movaps        %xmm1,%xmm10
  .byte  68,15,40,216                        // movaps        %xmm0,%xmm11
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  65,15,40,227                        // movaps        %xmm11,%xmm4
  .byte  65,15,40,234                        // movaps        %xmm10,%xmm5
  .byte  65,15,40,241                        // movaps        %xmm9,%xmm6
  .byte  65,15,40,248                        // movaps        %xmm8,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_src_dst_ssse3_lowp
.globl _sk_move_src_dst_ssse3_lowp
FUNCTION(_sk_move_src_dst_ssse3_lowp)
_sk_move_src_dst_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,224                           // movaps        %xmm0,%xmm4
  .byte  15,40,233                           // movaps        %xmm1,%xmm5
  .byte  15,40,242                           // movaps        %xmm2,%xmm6
  .byte  15,40,251                           // movaps        %xmm3,%xmm7
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_move_dst_src_ssse3_lowp
.globl _sk_move_dst_src_ssse3_lowp
FUNCTION(_sk_move_dst_src_ssse3_lowp)
_sk_move_dst_src_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,40,196                           // movaps        %xmm4,%xmm0
  .byte  15,40,205                           // movaps        %xmm5,%xmm1
  .byte  15,40,214                           // movaps        %xmm6,%xmm2
  .byte  15,40,223                           // movaps        %xmm7,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_clear_ssse3_lowp
.globl _sk_clear_ssse3_lowp
FUNCTION(_sk_clear_ssse3_lowp)
_sk_clear_ssse3_lowp:
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  15,87,192                           // xorps         %xmm0,%xmm0
  .byte  15,87,201                           // xorps         %xmm1,%xmm1
  .byte  15,87,210                           // xorps         %xmm2,%xmm2
  .byte  15,87,219                           // xorps         %xmm3,%xmm3
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcatop_ssse3_lowp
.globl _sk_srcatop_ssse3_lowp
FUNCTION(_sk_srcatop_ssse3_lowp)
_sk_srcatop_ssse3_lowp:
  .byte  102,15,56,11,199                    // pmulhrsw      %xmm7,%xmm0
  .byte  102,68,15,56,29,192                 // pabsw         %xmm0,%xmm8
  .byte  102,68,15,111,13,45,6,0,0           // movdqa        0x62d(%rip),%xmm9        # 1460 <_sk_xor__ssse3_lowp+0x1f3>
  .byte  102,68,15,249,203                   // psubw         %xmm3,%xmm9
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,193                 // pmulhrsw      %xmm9,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,192                   // paddw         %xmm8,%xmm0
  .byte  102,15,56,11,207                    // pmulhrsw      %xmm7,%xmm1
  .byte  102,68,15,56,29,193                 // pabsw         %xmm1,%xmm8
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,201                 // pmulhrsw      %xmm9,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,200                   // paddw         %xmm8,%xmm1
  .byte  102,15,56,11,215                    // pmulhrsw      %xmm7,%xmm2
  .byte  102,68,15,56,29,194                 // pabsw         %xmm2,%xmm8
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,209                 // pmulhrsw      %xmm9,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,208                   // paddw         %xmm8,%xmm2
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,68,15,56,29,195                 // pabsw         %xmm3,%xmm8
  .byte  102,68,15,56,11,207                 // pmulhrsw      %xmm7,%xmm9
  .byte  102,65,15,56,29,217                 // pabsw         %xmm9,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstatop_ssse3_lowp
.globl _sk_dstatop_ssse3_lowp
FUNCTION(_sk_dstatop_ssse3_lowp)
_sk_dstatop_ssse3_lowp:
  .byte  102,68,15,111,196                   // movdqa        %xmm4,%xmm8
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,68,15,111,13,172,5,0,0          // movdqa        0x5ac(%rip),%xmm9        # 1470 <_sk_xor__ssse3_lowp+0x203>
  .byte  102,68,15,249,207                   // psubw         %xmm7,%xmm9
  .byte  102,65,15,56,11,193                 // pmulhrsw      %xmm9,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,192                   // paddw         %xmm8,%xmm0
  .byte  102,68,15,111,197                   // movdqa        %xmm5,%xmm8
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,65,15,56,11,201                 // pmulhrsw      %xmm9,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,200                   // paddw         %xmm8,%xmm1
  .byte  102,68,15,111,198                   // movdqa        %xmm6,%xmm8
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,65,15,56,11,209                 // pmulhrsw      %xmm9,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,208                   // paddw         %xmm8,%xmm2
  .byte  102,68,15,111,199                   // movdqa        %xmm7,%xmm8
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,68,15,56,11,203                 // pmulhrsw      %xmm3,%xmm9
  .byte  102,65,15,56,29,217                 // pabsw         %xmm9,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcin_ssse3_lowp
.globl _sk_srcin_ssse3_lowp
FUNCTION(_sk_srcin_ssse3_lowp)
_sk_srcin_ssse3_lowp:
  .byte  102,15,56,11,199                    // pmulhrsw      %xmm7,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,56,11,207                    // pmulhrsw      %xmm7,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,56,11,215                    // pmulhrsw      %xmm7,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstin_ssse3_lowp
.globl _sk_dstin_ssse3_lowp
FUNCTION(_sk_dstin_ssse3_lowp)
_sk_dstin_ssse3_lowp:
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,15,56,11,195                    // pmulhrsw      %xmm3,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,15,56,11,203                    // pmulhrsw      %xmm3,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,15,56,11,211                    // pmulhrsw      %xmm3,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcout_ssse3_lowp
.globl _sk_srcout_ssse3_lowp
FUNCTION(_sk_srcout_ssse3_lowp)
_sk_srcout_ssse3_lowp:
  .byte  102,68,15,111,5,210,4,0,0           // movdqa        0x4d2(%rip),%xmm8        # 1480 <_sk_xor__ssse3_lowp+0x213>
  .byte  102,68,15,249,199                   // psubw         %xmm7,%xmm8
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,65,15,56,29,216                 // pabsw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstout_ssse3_lowp
.globl _sk_dstout_ssse3_lowp
FUNCTION(_sk_dstout_ssse3_lowp)
_sk_dstout_ssse3_lowp:
  .byte  102,68,15,111,5,163,4,0,0           // movdqa        0x4a3(%rip),%xmm8        # 1490 <_sk_xor__ssse3_lowp+0x223>
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,65,15,56,29,216                 // pabsw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_srcover_ssse3_lowp
.globl _sk_srcover_ssse3_lowp
FUNCTION(_sk_srcover_ssse3_lowp)
_sk_srcover_ssse3_lowp:
  .byte  102,68,15,111,5,104,4,0,0           // movdqa        0x468(%rip),%xmm8        # 14a0 <_sk_xor__ssse3_lowp+0x233>
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,68,15,111,204                   // movdqa        %xmm4,%xmm9
  .byte  102,69,15,56,11,200                 // pmulhrsw      %xmm8,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,193                   // paddw         %xmm9,%xmm0
  .byte  102,68,15,111,205                   // movdqa        %xmm5,%xmm9
  .byte  102,69,15,56,11,200                 // pmulhrsw      %xmm8,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,201                   // paddw         %xmm9,%xmm1
  .byte  102,68,15,111,206                   // movdqa        %xmm6,%xmm9
  .byte  102,69,15,56,11,200                 // pmulhrsw      %xmm8,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,209                   // paddw         %xmm9,%xmm2
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_dstover_ssse3_lowp
.globl _sk_dstover_ssse3_lowp
FUNCTION(_sk_dstover_ssse3_lowp)
_sk_dstover_ssse3_lowp:
  .byte  102,68,15,111,5,19,4,0,0            // movdqa        0x413(%rip),%xmm8        # 14b0 <_sk_xor__ssse3_lowp+0x243>
  .byte  102,68,15,249,199                   // psubw         %xmm7,%xmm8
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,253,196                      // paddw         %xmm4,%xmm0
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,253,205                      // paddw         %xmm5,%xmm1
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,15,253,214                      // paddw         %xmm6,%xmm2
  .byte  102,68,15,56,11,195                 // pmulhrsw      %xmm3,%xmm8
  .byte  102,65,15,56,29,216                 // pabsw         %xmm8,%xmm3
  .byte  102,15,253,223                      // paddw         %xmm7,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_modulate_ssse3_lowp
.globl _sk_modulate_ssse3_lowp
FUNCTION(_sk_modulate_ssse3_lowp)
_sk_modulate_ssse3_lowp:
  .byte  102,15,56,11,196                    // pmulhrsw      %xmm4,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,15,56,11,205                    // pmulhrsw      %xmm5,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,15,56,11,214                    // pmulhrsw      %xmm6,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_multiply_ssse3_lowp
.globl _sk_multiply_ssse3_lowp
FUNCTION(_sk_multiply_ssse3_lowp)
_sk_multiply_ssse3_lowp:
  .byte  102,68,15,111,5,168,3,0,0           // movdqa        0x3a8(%rip),%xmm8        # 14c0 <_sk_xor__ssse3_lowp+0x253>
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,207                   // psubw         %xmm7,%xmm9
  .byte  102,68,15,111,208                   // movdqa        %xmm0,%xmm10
  .byte  102,69,15,56,11,209                 // pmulhrsw      %xmm9,%xmm10
  .byte  102,69,15,56,29,210                 // pabsw         %xmm10,%xmm10
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,15,56,11,196                    // pmulhrsw      %xmm4,%xmm0
  .byte  102,68,15,111,220                   // movdqa        %xmm4,%xmm11
  .byte  102,69,15,56,11,216                 // pmulhrsw      %xmm8,%xmm11
  .byte  102,69,15,56,29,219                 // pabsw         %xmm11,%xmm11
  .byte  102,69,15,253,218                   // paddw         %xmm10,%xmm11
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,195                   // paddw         %xmm11,%xmm0
  .byte  102,68,15,111,209                   // movdqa        %xmm1,%xmm10
  .byte  102,69,15,56,11,209                 // pmulhrsw      %xmm9,%xmm10
  .byte  102,69,15,56,29,210                 // pabsw         %xmm10,%xmm10
  .byte  102,15,56,11,205                    // pmulhrsw      %xmm5,%xmm1
  .byte  102,68,15,111,221                   // movdqa        %xmm5,%xmm11
  .byte  102,69,15,56,11,216                 // pmulhrsw      %xmm8,%xmm11
  .byte  102,69,15,56,29,219                 // pabsw         %xmm11,%xmm11
  .byte  102,69,15,253,218                   // paddw         %xmm10,%xmm11
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,203                   // paddw         %xmm11,%xmm1
  .byte  102,68,15,111,210                   // movdqa        %xmm2,%xmm10
  .byte  102,69,15,56,11,209                 // pmulhrsw      %xmm9,%xmm10
  .byte  102,69,15,56,29,210                 // pabsw         %xmm10,%xmm10
  .byte  102,15,56,11,214                    // pmulhrsw      %xmm6,%xmm2
  .byte  102,68,15,111,222                   // movdqa        %xmm6,%xmm11
  .byte  102,69,15,56,11,216                 // pmulhrsw      %xmm8,%xmm11
  .byte  102,69,15,56,29,219                 // pabsw         %xmm11,%xmm11
  .byte  102,69,15,253,218                   // paddw         %xmm10,%xmm11
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,211                   // paddw         %xmm11,%xmm2
  .byte  102,68,15,56,11,203                 // pmulhrsw      %xmm3,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,69,15,253,193                   // paddw         %xmm9,%xmm8
  .byte  102,15,56,11,223                    // pmulhrsw      %xmm7,%xmm3
  .byte  102,15,56,29,219                    // pabsw         %xmm3,%xmm3
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_screen_ssse3_lowp
.globl _sk_screen_ssse3_lowp
FUNCTION(_sk_screen_ssse3_lowp)
_sk_screen_ssse3_lowp:
  .byte  102,68,15,111,5,206,2,0,0           // movdqa        0x2ce(%rip),%xmm8        # 14d0 <_sk_xor__ssse3_lowp+0x263>
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,200                   // psubw         %xmm0,%xmm9
  .byte  102,68,15,56,11,204                 // pmulhrsw      %xmm4,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,193                   // paddw         %xmm9,%xmm0
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,201                   // psubw         %xmm1,%xmm9
  .byte  102,68,15,56,11,205                 // pmulhrsw      %xmm5,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,201                   // paddw         %xmm9,%xmm1
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,202                   // psubw         %xmm2,%xmm9
  .byte  102,68,15,56,11,206                 // pmulhrsw      %xmm6,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,65,15,253,209                   // paddw         %xmm9,%xmm2
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,69,15,56,29,192                 // pabsw         %xmm8,%xmm8
  .byte  102,65,15,253,216                   // paddw         %xmm8,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

HIDDEN _sk_xor__ssse3_lowp
.globl _sk_xor__ssse3_lowp
FUNCTION(_sk_xor__ssse3_lowp)
_sk_xor__ssse3_lowp:
  .byte  102,68,15,111,5,106,2,0,0           // movdqa        0x26a(%rip),%xmm8        # 14e0 <_sk_xor__ssse3_lowp+0x273>
  .byte  102,69,15,111,200                   // movdqa        %xmm8,%xmm9
  .byte  102,68,15,249,207                   // psubw         %xmm7,%xmm9
  .byte  102,65,15,56,11,193                 // pmulhrsw      %xmm9,%xmm0
  .byte  102,68,15,56,29,208                 // pabsw         %xmm0,%xmm10
  .byte  102,68,15,249,195                   // psubw         %xmm3,%xmm8
  .byte  102,15,111,196                      // movdqa        %xmm4,%xmm0
  .byte  102,65,15,56,11,192                 // pmulhrsw      %xmm8,%xmm0
  .byte  102,15,56,29,192                    // pabsw         %xmm0,%xmm0
  .byte  102,65,15,253,194                   // paddw         %xmm10,%xmm0
  .byte  102,65,15,56,11,201                 // pmulhrsw      %xmm9,%xmm1
  .byte  102,68,15,56,29,209                 // pabsw         %xmm1,%xmm10
  .byte  102,15,111,205                      // movdqa        %xmm5,%xmm1
  .byte  102,65,15,56,11,200                 // pmulhrsw      %xmm8,%xmm1
  .byte  102,15,56,29,201                    // pabsw         %xmm1,%xmm1
  .byte  102,65,15,253,202                   // paddw         %xmm10,%xmm1
  .byte  102,65,15,56,11,209                 // pmulhrsw      %xmm9,%xmm2
  .byte  102,68,15,56,29,210                 // pabsw         %xmm2,%xmm10
  .byte  102,15,111,214                      // movdqa        %xmm6,%xmm2
  .byte  102,65,15,56,11,208                 // pmulhrsw      %xmm8,%xmm2
  .byte  102,15,56,29,210                    // pabsw         %xmm2,%xmm2
  .byte  102,65,15,253,210                   // paddw         %xmm10,%xmm2
  .byte  102,68,15,56,11,203                 // pmulhrsw      %xmm3,%xmm9
  .byte  102,69,15,56,29,201                 // pabsw         %xmm9,%xmm9
  .byte  102,68,15,56,11,199                 // pmulhrsw      %xmm7,%xmm8
  .byte  102,65,15,56,29,216                 // pabsw         %xmm8,%xmm3
  .byte  102,65,15,253,217                   // paddw         %xmm9,%xmm3
  .byte  72,173                              // lods          %ds:(%rsi),%rax
  .byte  255,224                             // jmpq          *%rax

BALIGN16
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,1                          // addb          $0x1,0x0(%rbx)
  .byte  4,5                                 // add           $0x5,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  12,13                               // or            $0xd,%al
  .byte  14                                  // (bad)
  .byte  15,129,128,129,128,129              // jno           ffffffff818094b5 <_sk_xor__ssse3_lowp+0xffffffff81808248>
  .byte  128,129,128,129,128,129,128         // addb          $0x80,-0x7e7f7e80(%rcx)
  .byte  129,128,129,128,1,2,5,6,9,10        // addl          $0xa090605,0x2018081(%rax)
  .byte  13,14,9,10,13                       // or            $0xd0a090e,%eax
  .byte  14                                  // (bad)
  .byte  13,14,15,255,2                      // or            $0x2ff0f0e,%eax
  .byte  3,6                                 // add           (%rsi),%eax
  .byte  7                                   // (bad)
  .byte  10,11                               // or            (%rbx),%cl
  .byte  14                                  // (bad)
  .byte  15,10                               // (bad)
  .byte  11,14                               // or            (%rsi),%ecx
  .byte  15,14                               // femms
  .byte  15,255                              // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255,7                               // incl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,15                              // decl          (%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  255,0                               // incl          (%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,0,128,0,128,0,128,0,128     // addl          $0x80008000,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,1,4,5                       // add           %al,0x5040100(%rax)
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  8,9                                 // or            %cl,(%rcx)
  .byte  12,13                               // or            $0xd,%al
  .byte  12,13                               // or            $0xd,%al
  .byte  14                                  // (bad)
  .byte  15,255                              // (bad)
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,255                               // add           %bh,%bh
  .byte  0,129,128,129,128,129               // add           %al,-0x7e7f7e80(%rcx)
  .byte  128,129,128,129,128,129,128         // addb          $0x80,-0x7e7f7e80(%rcx)
  .byte  129,128,129,128,1,2,5,6,9,10        // addl          $0xa090605,0x2018081(%rax)
  .byte  13,14,9,10,13                       // or            $0xd0a090e,%eax
  .byte  14                                  // (bad)
  .byte  13,14,15,255,2                      // or            $0x2ff0f0e,%eax
  .byte  3,6                                 // add           (%rsi),%eax
  .byte  7                                   // (bad)
  .byte  10,11                               // or            (%rbx),%cl
  .byte  14                                  // (bad)
  .byte  15,10                               // (bad)
  .byte  11,14                               // or            (%rsi),%ecx
  .byte  15,14                               // femms
  .byte  15,255                              // (bad)
  .byte  255,3                               // incl          (%rbx)
  .byte  255,7                               // incl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,11                              // decl          (%rbx)
  .byte  255,15                              // decl          (%rdi)
  .byte  255,15                              // decl          (%rdi)
  .byte  255                                 // (bad)
  .byte  255                                 // (bad)
  .byte  255,0                               // incl          (%rax)
  .byte  128,0,128                           // addb          $0x80,(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,0,128,0,128 // addl          $0x80008000,-0x7f7e7f7f(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  129,128,129,128,129,128,129,128,129,128// addl          $0x80818081,-0x7f7e7f7f(%rax)
  .byte  129,128,129,128,129,128,0,128,0,128 // addl          $0x80008000,-0x7f7e7f7f(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)
  .byte  0,128,0,128,0,128                   // add           %al,-0x7fff8000(%rax)

BALIGN4
  .byte  0,0                                 // add           %al,(%rax)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128,67,0,0                          // addb          $0x0,0x0(%rbx)
  .byte  128                                 // .byte         0x80
  .byte  67                                  // rex.XB
#endif
