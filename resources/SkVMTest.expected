A8 over A8
r0 = load8 arg(0)
r1 = splat 3B808081 (0.0039215689)
r0 = to_f32 r0
r0 = mul_f32 r1 r0
r2 = load8 arg(1)
r2 = to_f32 r2
r2 = mul_f32 r1 r2
r1 = splat 3F800000 (1)
r1 = sub_f32 r1 r0
r1 = mad_f32 r2 r1 r0
r2 = splat 437F0000 (255)
r0 = splat 3F000000 (0.5)
r0 = mad_f32 r1 r2 r0
r0 = to_i32 r0
store8 arg(1) r0

A8 over G8
r0 = load8 arg(0)
r1 = splat 3B808081 (0.0039215689)
r0 = to_f32 r0
r0 = mul_f32 r1 r0
r2 = load8 arg(1)
r2 = to_f32 r2
r2 = mul_f32 r1 r2
r1 = splat 3F800000 (1)
r1 = sub_f32 r1 r0
r1 = mul_f32 r2 r1
r2 = splat 3E59B3D0 (0.21259999)
r0 = splat 3F371759 (0.71520001)
r3 = splat 3D93DD98 (0.0722)
r3 = mul_f32 r1 r3
r3 = mad_f32 r1 r0 r3
r3 = mad_f32 r1 r2 r3
r2 = splat 437F0000 (255)
r1 = splat 3F000000 (0.5)
r1 = mad_f32 r3 r2 r1
r1 = to_i32 r1
store8 arg(1) r1

A8 over RGBA_8888
r0 = load8 arg(0)
r1 = splat 3B808081 (0.0039215689)
r0 = to_f32 r0
r0 = mul_f32 r1 r0
r2 = load32 arg(1)
r3 = splat FF (3.5733111e-43)
r4 = bit_and r2 r3
r4 = to_f32 r4
r4 = mul_f32 r1 r4
r5 = shr r2 8
r5 = bit_and r5 r3
r5 = to_f32 r5
r5 = mul_f32 r1 r5
r6 = shr r2 16
r6 = bit_and r6 r3
r6 = to_f32 r6
r6 = mul_f32 r1 r6
r2 = shr r2 24
r2 = to_f32 r2
r2 = mul_f32 r1 r2
r1 = splat 3F800000 (1)
r1 = sub_f32 r1 r0
r4 = mul_f32 r4 r1
r5 = mul_f32 r5 r1
r6 = mul_f32 r6 r1
r1 = mad_f32 r2 r1 r0
r2 = splat 437F0000 (255)
r0 = splat 3F000000 (0.5)
r4 = mad_f32 r4 r2 r0
r4 = to_i32 r4
r5 = mad_f32 r5 r2 r0
r5 = to_i32 r5
r6 = mad_f32 r6 r2 r0
r6 = to_i32 r6
r0 = mad_f32 r1 r2 r0
r0 = to_i32 r0
r5 = pack r4 r5 8
r0 = pack r6 r0 8
r0 = pack r5 r0 16
store32 arg(1) r0

G8 over A8
r0 = splat 3B808081 (0.0039215689)
r1 = splat 3F800000 (1)
r2 = load8 arg(1)
r2 = to_f32 r2
r2 = mul_f32 r0 r2
r0 = sub_f32 r1 r1
r0 = mad_f32 r2 r0 r1
r2 = splat 437F0000 (255)
r1 = splat 3F000000 (0.5)
r1 = mad_f32 r0 r2 r1
r1 = to_i32 r1
store8 arg(1) r1

G8 over G8
r0 = load8 arg(0)
r1 = splat 3B808081 (0.0039215689)
r0 = to_f32 r0
r0 = mul_f32 r1 r0
r2 = splat 3F800000 (1)
r3 = load8 arg(1)
r3 = to_f32 r3
r3 = mul_f32 r1 r3
r2 = sub_f32 r2 r2
r2 = mad_f32 r3 r2 r0
r3 = splat 3E59B3D0 (0.21259999)
r0 = splat 3F371759 (0.71520001)
r1 = splat 3D93DD98 (0.0722)
r1 = mul_f32 r2 r1
r1 = mad_f32 r2 r0 r1
r1 = mad_f32 r2 r3 r1
r3 = splat 437F0000 (255)
r2 = splat 3F000000 (0.5)
r2 = mad_f32 r1 r3 r2
r2 = to_i32 r2
store8 arg(1) r2

G8 over RGBA_8888
r0 = load8 arg(0)
r1 = splat 3B808081 (0.0039215689)
r0 = to_f32 r0
r0 = mul_f32 r1 r0
r2 = splat 3F800000 (1)
r3 = load32 arg(1)
r4 = splat FF (3.5733111e-43)
r5 = bit_and r3 r4
r5 = to_f32 r5
r5 = mul_f32 r1 r5
r6 = shr r3 8
r6 = bit_and r6 r4
r6 = to_f32 r6
r6 = mul_f32 r1 r6
r7 = shr r3 16
r7 = bit_and r7 r4
r7 = to_f32 r7
r7 = mul_f32 r1 r7
r3 = shr r3 24
r3 = to_f32 r3
r3 = mul_f32 r1 r3
r1 = sub_f32 r2 r2
r5 = mad_f32 r5 r1 r0
r6 = mad_f32 r6 r1 r0
r7 = mad_f32 r7 r1 r0
r1 = mad_f32 r3 r1 r2
r3 = splat 437F0000 (255)
r2 = splat 3F000000 (0.5)
r5 = mad_f32 r5 r3 r2
r5 = to_i32 r5
r6 = mad_f32 r6 r3 r2
r6 = to_i32 r6
r7 = mad_f32 r7 r3 r2
r7 = to_i32 r7
r2 = mad_f32 r1 r3 r2
r2 = to_i32 r2
r6 = pack r5 r6 8
r2 = pack r7 r2 8
r2 = pack r6 r2 16
store32 arg(1) r2

RGBA_8888 over A8
r0 = load32 arg(0)
r1 = splat 3B808081 (0.0039215689)
r0 = shr r0 24
r0 = to_f32 r0
r0 = mul_f32 r1 r0
r2 = load8 arg(1)
r2 = to_f32 r2
r2 = mul_f32 r1 r2
r1 = splat 3F800000 (1)
r1 = sub_f32 r1 r0
r1 = mad_f32 r2 r1 r0
r2 = splat 437F0000 (255)
r0 = splat 3F000000 (0.5)
r0 = mad_f32 r1 r2 r0
r0 = to_i32 r0
store8 arg(1) r0

RGBA_8888 over G8
r0 = load32 arg(0)
r1 = splat FF (3.5733111e-43)
r2 = bit_and r0 r1
r3 = splat 3B808081 (0.0039215689)
r2 = to_f32 r2
r2 = mul_f32 r3 r2
r4 = shr r0 8
r4 = bit_and r4 r1
r4 = to_f32 r4
r4 = mul_f32 r3 r4
r5 = shr r0 16
r5 = bit_and r5 r1
r5 = to_f32 r5
r5 = mul_f32 r3 r5
r0 = shr r0 24
r0 = to_f32 r0
r0 = mul_f32 r3 r0
r1 = load8 arg(1)
r1 = to_f32 r1
r1 = mul_f32 r3 r1
r3 = splat 3F800000 (1)
r3 = sub_f32 r3 r0
r2 = mad_f32 r1 r3 r2
r4 = mad_f32 r1 r3 r4
r3 = mad_f32 r1 r3 r5
r1 = splat 3E59B3D0 (0.21259999)
r5 = splat 3F371759 (0.71520001)
r0 = splat 3D93DD98 (0.0722)
r0 = mul_f32 r3 r0
r0 = mad_f32 r4 r5 r0
r0 = mad_f32 r2 r1 r0
r1 = splat 437F0000 (255)
r2 = splat 3F000000 (0.5)
r2 = mad_f32 r0 r1 r2
r2 = to_i32 r2
store8 arg(1) r2

RGBA_8888 over RGBA_8888
r0 = load32 arg(0)
r1 = splat FF (3.5733111e-43)
r2 = bit_and r0 r1
r3 = splat 3B808081 (0.0039215689)
r2 = to_f32 r2
r2 = mul_f32 r3 r2
r4 = shr r0 8
r4 = bit_and r4 r1
r4 = to_f32 r4
r4 = mul_f32 r3 r4
r5 = shr r0 16
r5 = bit_and r5 r1
r5 = to_f32 r5
r5 = mul_f32 r3 r5
r0 = shr r0 24
r0 = to_f32 r0
r0 = mul_f32 r3 r0
r6 = load32 arg(1)
r7 = bit_and r6 r1
r7 = to_f32 r7
r7 = mul_f32 r3 r7
r8 = shr r6 8
r8 = bit_and r8 r1
r8 = to_f32 r8
r8 = mul_f32 r3 r8
r9 = shr r6 16
r9 = bit_and r9 r1
r9 = to_f32 r9
r9 = mul_f32 r3 r9
r6 = shr r6 24
r6 = to_f32 r6
r6 = mul_f32 r3 r6
r3 = splat 3F800000 (1)
r3 = sub_f32 r3 r0
r7 = mad_f32 r7 r3 r2
r8 = mad_f32 r8 r3 r4
r9 = mad_f32 r9 r3 r5
r3 = mad_f32 r6 r3 r0
r6 = splat 437F0000 (255)
r0 = splat 3F000000 (0.5)
r7 = mad_f32 r7 r6 r0
r7 = to_i32 r7
r8 = mad_f32 r8 r6 r0
r8 = to_i32 r8
r9 = mad_f32 r9 r6 r0
r9 = to_i32 r9
r0 = mad_f32 r3 r6 r0
r0 = to_i32 r0
r8 = pack r7 r8 8
r0 = pack r9 r0 8
r0 = pack r8 r0 16
store32 arg(1) r0

I32 8888 over 8888
r0 = load32 arg(0)
r1 = splat FF (3.5733111e-43)
r2 = bit_and r0 r1
r3 = shr r0 8
r3 = bit_and r3 r1
r4 = shr r0 16
r4 = bit_and r4 r1
r0 = shr r0 24
r5 = load32 arg(1)
r6 = bit_and r5 r1
r7 = shr r5 8
r7 = bit_and r7 r1
r8 = shr r5 16
r8 = bit_and r8 r1
r5 = shr r5 24
r1 = sub_i32 r1 r0
r6 = mul_unorm8 r6 r1
r6 = add_i32 r2 r6
r7 = mul_unorm8 r7 r1
r7 = add_i32 r3 r7
r8 = mul_unorm8 r8 r1
r8 = add_i32 r4 r8
r1 = mul_unorm8 r5 r1
r1 = add_i32 r0 r1
r7 = pack r6 r7 8
r1 = pack r8 r1 8
r1 = pack r7 r1 16
store32 arg(1) r1

I32 (SWAR) 8888 over 8888
r0 = load32 arg(0)
r1 = splat FF00FF (2.3418409e-38)
r2 = bit_and r0 r1
r0 = shr r0 8
r0 = bit_and r0 r1
r3 = load32 arg(1)
r4 = bit_and r3 r1
r3 = shr r3 8
r3 = bit_and r3 r1
r5 = splat FF (3.5733111e-43)
r6 = shr r0 16
r6 = sub_i32 r5 r6
r4 = mul_i32 r4 r6
r4 = add_i32 r4 r1
r4 = shr r4 8
r4 = bit_and r4 r1
r4 = add_i32 r2 r4
r6 = mul_i32 r3 r6
r6 = add_i32 r6 r1
r6 = shr r6 8
r6 = bit_and r6 r1
r6 = add_i32 r0 r6
r6 = pack r4 r6 8
store32 arg(1) r6

